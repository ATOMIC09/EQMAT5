
STM32F405_EQ_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005780  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005908  08005908  00006908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005940  08005940  000070ac  2**0
                  CONTENTS
  4 .ARM          00000008  08005940  08005940  00006940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005948  08005948  000070ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005948  08005948  00006948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800594c  0800594c  0000694c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08005950  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000070ac  2**0
                  CONTENTS
 10 .bss          000003b8  200000ac  200000ac  000070ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000464  20000464  000070ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ae39  00000000  00000000  000070dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ed2  00000000  00000000  00011f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f8  00000000  00000000  00013de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006dd  00000000  00000000  000146e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ec32  00000000  00000000  00014dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c866  00000000  00000000  000339ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9abd  00000000  00000000  00040255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f9d12  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027c8  00000000  00000000  000f9d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000fc520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000ac 	.word	0x200000ac
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080058f0 	.word	0x080058f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b0 	.word	0x200000b0
 80001c4:	080058f0 	.word	0x080058f0

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b96a 	b.w	8000b20 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	460c      	mov	r4, r1
 800086c:	2b00      	cmp	r3, #0
 800086e:	d14e      	bne.n	800090e <__udivmoddi4+0xaa>
 8000870:	4694      	mov	ip, r2
 8000872:	458c      	cmp	ip, r1
 8000874:	4686      	mov	lr, r0
 8000876:	fab2 f282 	clz	r2, r2
 800087a:	d962      	bls.n	8000942 <__udivmoddi4+0xde>
 800087c:	b14a      	cbz	r2, 8000892 <__udivmoddi4+0x2e>
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	4091      	lsls	r1, r2
 8000884:	fa20 f303 	lsr.w	r3, r0, r3
 8000888:	fa0c fc02 	lsl.w	ip, ip, r2
 800088c:	4319      	orrs	r1, r3
 800088e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000892:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000896:	fa1f f68c 	uxth.w	r6, ip
 800089a:	fbb1 f4f7 	udiv	r4, r1, r7
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb07 1114 	mls	r1, r7, r4, r1
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	fb04 f106 	mul.w	r1, r4, r6
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d90a      	bls.n	80008c8 <__udivmoddi4+0x64>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f104 30ff 	add.w	r0, r4, #4294967295
 80008ba:	f080 8112 	bcs.w	8000ae2 <__udivmoddi4+0x27e>
 80008be:	4299      	cmp	r1, r3
 80008c0:	f240 810f 	bls.w	8000ae2 <__udivmoddi4+0x27e>
 80008c4:	3c02      	subs	r4, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1a59      	subs	r1, r3, r1
 80008ca:	fa1f f38e 	uxth.w	r3, lr
 80008ce:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d2:	fb07 1110 	mls	r1, r7, r0, r1
 80008d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008da:	fb00 f606 	mul.w	r6, r0, r6
 80008de:	429e      	cmp	r6, r3
 80008e0:	d90a      	bls.n	80008f8 <__udivmoddi4+0x94>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ea:	f080 80fc 	bcs.w	8000ae6 <__udivmoddi4+0x282>
 80008ee:	429e      	cmp	r6, r3
 80008f0:	f240 80f9 	bls.w	8000ae6 <__udivmoddi4+0x282>
 80008f4:	4463      	add	r3, ip
 80008f6:	3802      	subs	r0, #2
 80008f8:	1b9b      	subs	r3, r3, r6
 80008fa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008fe:	2100      	movs	r1, #0
 8000900:	b11d      	cbz	r5, 800090a <__udivmoddi4+0xa6>
 8000902:	40d3      	lsrs	r3, r2
 8000904:	2200      	movs	r2, #0
 8000906:	e9c5 3200 	strd	r3, r2, [r5]
 800090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090e:	428b      	cmp	r3, r1
 8000910:	d905      	bls.n	800091e <__udivmoddi4+0xba>
 8000912:	b10d      	cbz	r5, 8000918 <__udivmoddi4+0xb4>
 8000914:	e9c5 0100 	strd	r0, r1, [r5]
 8000918:	2100      	movs	r1, #0
 800091a:	4608      	mov	r0, r1
 800091c:	e7f5      	b.n	800090a <__udivmoddi4+0xa6>
 800091e:	fab3 f183 	clz	r1, r3
 8000922:	2900      	cmp	r1, #0
 8000924:	d146      	bne.n	80009b4 <__udivmoddi4+0x150>
 8000926:	42a3      	cmp	r3, r4
 8000928:	d302      	bcc.n	8000930 <__udivmoddi4+0xcc>
 800092a:	4290      	cmp	r0, r2
 800092c:	f0c0 80f0 	bcc.w	8000b10 <__udivmoddi4+0x2ac>
 8000930:	1a86      	subs	r6, r0, r2
 8000932:	eb64 0303 	sbc.w	r3, r4, r3
 8000936:	2001      	movs	r0, #1
 8000938:	2d00      	cmp	r5, #0
 800093a:	d0e6      	beq.n	800090a <__udivmoddi4+0xa6>
 800093c:	e9c5 6300 	strd	r6, r3, [r5]
 8000940:	e7e3      	b.n	800090a <__udivmoddi4+0xa6>
 8000942:	2a00      	cmp	r2, #0
 8000944:	f040 8090 	bne.w	8000a68 <__udivmoddi4+0x204>
 8000948:	eba1 040c 	sub.w	r4, r1, ip
 800094c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000950:	fa1f f78c 	uxth.w	r7, ip
 8000954:	2101      	movs	r1, #1
 8000956:	fbb4 f6f8 	udiv	r6, r4, r8
 800095a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800095e:	fb08 4416 	mls	r4, r8, r6, r4
 8000962:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000966:	fb07 f006 	mul.w	r0, r7, r6
 800096a:	4298      	cmp	r0, r3
 800096c:	d908      	bls.n	8000980 <__udivmoddi4+0x11c>
 800096e:	eb1c 0303 	adds.w	r3, ip, r3
 8000972:	f106 34ff 	add.w	r4, r6, #4294967295
 8000976:	d202      	bcs.n	800097e <__udivmoddi4+0x11a>
 8000978:	4298      	cmp	r0, r3
 800097a:	f200 80cd 	bhi.w	8000b18 <__udivmoddi4+0x2b4>
 800097e:	4626      	mov	r6, r4
 8000980:	1a1c      	subs	r4, r3, r0
 8000982:	fa1f f38e 	uxth.w	r3, lr
 8000986:	fbb4 f0f8 	udiv	r0, r4, r8
 800098a:	fb08 4410 	mls	r4, r8, r0, r4
 800098e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000992:	fb00 f707 	mul.w	r7, r0, r7
 8000996:	429f      	cmp	r7, r3
 8000998:	d908      	bls.n	80009ac <__udivmoddi4+0x148>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a2:	d202      	bcs.n	80009aa <__udivmoddi4+0x146>
 80009a4:	429f      	cmp	r7, r3
 80009a6:	f200 80b0 	bhi.w	8000b0a <__udivmoddi4+0x2a6>
 80009aa:	4620      	mov	r0, r4
 80009ac:	1bdb      	subs	r3, r3, r7
 80009ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b2:	e7a5      	b.n	8000900 <__udivmoddi4+0x9c>
 80009b4:	f1c1 0620 	rsb	r6, r1, #32
 80009b8:	408b      	lsls	r3, r1
 80009ba:	fa22 f706 	lsr.w	r7, r2, r6
 80009be:	431f      	orrs	r7, r3
 80009c0:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c4:	fa04 f301 	lsl.w	r3, r4, r1
 80009c8:	ea43 030c 	orr.w	r3, r3, ip
 80009cc:	40f4      	lsrs	r4, r6
 80009ce:	fa00 f801 	lsl.w	r8, r0, r1
 80009d2:	0c38      	lsrs	r0, r7, #16
 80009d4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009d8:	fbb4 fef0 	udiv	lr, r4, r0
 80009dc:	fa1f fc87 	uxth.w	ip, r7
 80009e0:	fb00 441e 	mls	r4, r0, lr, r4
 80009e4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e8:	fb0e f90c 	mul.w	r9, lr, ip
 80009ec:	45a1      	cmp	r9, r4
 80009ee:	fa02 f201 	lsl.w	r2, r2, r1
 80009f2:	d90a      	bls.n	8000a0a <__udivmoddi4+0x1a6>
 80009f4:	193c      	adds	r4, r7, r4
 80009f6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fa:	f080 8084 	bcs.w	8000b06 <__udivmoddi4+0x2a2>
 80009fe:	45a1      	cmp	r9, r4
 8000a00:	f240 8081 	bls.w	8000b06 <__udivmoddi4+0x2a2>
 8000a04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a08:	443c      	add	r4, r7
 8000a0a:	eba4 0409 	sub.w	r4, r4, r9
 8000a0e:	fa1f f983 	uxth.w	r9, r3
 8000a12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a16:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a22:	45a4      	cmp	ip, r4
 8000a24:	d907      	bls.n	8000a36 <__udivmoddi4+0x1d2>
 8000a26:	193c      	adds	r4, r7, r4
 8000a28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a2c:	d267      	bcs.n	8000afe <__udivmoddi4+0x29a>
 8000a2e:	45a4      	cmp	ip, r4
 8000a30:	d965      	bls.n	8000afe <__udivmoddi4+0x29a>
 8000a32:	3b02      	subs	r3, #2
 8000a34:	443c      	add	r4, r7
 8000a36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a3e:	eba4 040c 	sub.w	r4, r4, ip
 8000a42:	429c      	cmp	r4, r3
 8000a44:	46ce      	mov	lr, r9
 8000a46:	469c      	mov	ip, r3
 8000a48:	d351      	bcc.n	8000aee <__udivmoddi4+0x28a>
 8000a4a:	d04e      	beq.n	8000aea <__udivmoddi4+0x286>
 8000a4c:	b155      	cbz	r5, 8000a64 <__udivmoddi4+0x200>
 8000a4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a52:	eb64 040c 	sbc.w	r4, r4, ip
 8000a56:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5a:	40cb      	lsrs	r3, r1
 8000a5c:	431e      	orrs	r6, r3
 8000a5e:	40cc      	lsrs	r4, r1
 8000a60:	e9c5 6400 	strd	r6, r4, [r5]
 8000a64:	2100      	movs	r1, #0
 8000a66:	e750      	b.n	800090a <__udivmoddi4+0xa6>
 8000a68:	f1c2 0320 	rsb	r3, r2, #32
 8000a6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a74:	fa24 f303 	lsr.w	r3, r4, r3
 8000a78:	4094      	lsls	r4, r2
 8000a7a:	430c      	orrs	r4, r1
 8000a7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a84:	fa1f f78c 	uxth.w	r7, ip
 8000a88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a90:	0c23      	lsrs	r3, r4, #16
 8000a92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a96:	fb00 f107 	mul.w	r1, r0, r7
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x24c>
 8000a9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aa6:	d22c      	bcs.n	8000b02 <__udivmoddi4+0x29e>
 8000aa8:	4299      	cmp	r1, r3
 8000aaa:	d92a      	bls.n	8000b02 <__udivmoddi4+0x29e>
 8000aac:	3802      	subs	r0, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	1a5b      	subs	r3, r3, r1
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ab8:	fb08 3311 	mls	r3, r8, r1, r3
 8000abc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac0:	fb01 f307 	mul.w	r3, r1, r7
 8000ac4:	42a3      	cmp	r3, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x276>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad0:	d213      	bcs.n	8000afa <__udivmoddi4+0x296>
 8000ad2:	42a3      	cmp	r3, r4
 8000ad4:	d911      	bls.n	8000afa <__udivmoddi4+0x296>
 8000ad6:	3902      	subs	r1, #2
 8000ad8:	4464      	add	r4, ip
 8000ada:	1ae4      	subs	r4, r4, r3
 8000adc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae0:	e739      	b.n	8000956 <__udivmoddi4+0xf2>
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	e6f0      	b.n	80008c8 <__udivmoddi4+0x64>
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	e706      	b.n	80008f8 <__udivmoddi4+0x94>
 8000aea:	45c8      	cmp	r8, r9
 8000aec:	d2ae      	bcs.n	8000a4c <__udivmoddi4+0x1e8>
 8000aee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000af6:	3801      	subs	r0, #1
 8000af8:	e7a8      	b.n	8000a4c <__udivmoddi4+0x1e8>
 8000afa:	4631      	mov	r1, r6
 8000afc:	e7ed      	b.n	8000ada <__udivmoddi4+0x276>
 8000afe:	4603      	mov	r3, r0
 8000b00:	e799      	b.n	8000a36 <__udivmoddi4+0x1d2>
 8000b02:	4630      	mov	r0, r6
 8000b04:	e7d4      	b.n	8000ab0 <__udivmoddi4+0x24c>
 8000b06:	46d6      	mov	lr, sl
 8000b08:	e77f      	b.n	8000a0a <__udivmoddi4+0x1a6>
 8000b0a:	4463      	add	r3, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	e74d      	b.n	80009ac <__udivmoddi4+0x148>
 8000b10:	4606      	mov	r6, r0
 8000b12:	4623      	mov	r3, r4
 8000b14:	4608      	mov	r0, r1
 8000b16:	e70f      	b.n	8000938 <__udivmoddi4+0xd4>
 8000b18:	3e02      	subs	r6, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	e730      	b.n	8000980 <__udivmoddi4+0x11c>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_idiv0>:
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b28:	f000 feb6 	bl	8001898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2c:	f000 f8bc 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b30:	f000 f9a6 	bl	8000e80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b34:	f000 f97c 	bl	8000e30 <MX_DMA_Init>
  MX_I2S2_Init();
 8000b38:	f000 f920 	bl	8000d7c <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8000b3c:	f000 f94e 	bl	8000ddc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  peaking_filter_init(&lowFilt);
 8000b40:	4843      	ldr	r0, [pc, #268]	@ (8000c50 <main+0x12c>)
 8000b42:	f000 fb69 	bl	8001218 <peaking_filter_init>
  peaking_filter_init(&midLowFilt);
 8000b46:	4843      	ldr	r0, [pc, #268]	@ (8000c54 <main+0x130>)
 8000b48:	f000 fb66 	bl	8001218 <peaking_filter_init>
  peaking_filter_init(&midFilt);
 8000b4c:	4842      	ldr	r0, [pc, #264]	@ (8000c58 <main+0x134>)
 8000b4e:	f000 fb63 	bl	8001218 <peaking_filter_init>
  peaking_filter_init(&midHighFilt);
 8000b52:	4842      	ldr	r0, [pc, #264]	@ (8000c5c <main+0x138>)
 8000b54:	f000 fb60 	bl	8001218 <peaking_filter_init>
  peaking_filter_init(&highFilt);
 8000b58:	4841      	ldr	r0, [pc, #260]	@ (8000c60 <main+0x13c>)
 8000b5a:	f000 fb5d 	bl	8001218 <peaking_filter_init>

  peaking_filter_set_params(&lowFilt, gainLowShelf, LOW_FREQ, Q);
 8000b5e:	4b41      	ldr	r3, [pc, #260]	@ (8000c64 <main+0x140>)
 8000b60:	edd3 7a00 	vldr	s15, [r3]
 8000b64:	4b40      	ldr	r3, [pc, #256]	@ (8000c68 <main+0x144>)
 8000b66:	ed93 7a00 	vldr	s14, [r3]
 8000b6a:	4b40      	ldr	r3, [pc, #256]	@ (8000c6c <main+0x148>)
 8000b6c:	edd3 6a00 	vldr	s13, [r3]
 8000b70:	eeb0 1a66 	vmov.f32	s2, s13
 8000b74:	eef0 0a47 	vmov.f32	s1, s14
 8000b78:	eeb0 0a67 	vmov.f32	s0, s15
 8000b7c:	4834      	ldr	r0, [pc, #208]	@ (8000c50 <main+0x12c>)
 8000b7e:	f000 fb6f 	bl	8001260 <peaking_filter_set_params>
  peaking_filter_set_params(&midLowFilt, gainLowMid, MID_LOW_FREQ, Q);
 8000b82:	4b3b      	ldr	r3, [pc, #236]	@ (8000c70 <main+0x14c>)
 8000b84:	edd3 7a00 	vldr	s15, [r3]
 8000b88:	4b3a      	ldr	r3, [pc, #232]	@ (8000c74 <main+0x150>)
 8000b8a:	ed93 7a00 	vldr	s14, [r3]
 8000b8e:	4b37      	ldr	r3, [pc, #220]	@ (8000c6c <main+0x148>)
 8000b90:	edd3 6a00 	vldr	s13, [r3]
 8000b94:	eeb0 1a66 	vmov.f32	s2, s13
 8000b98:	eef0 0a47 	vmov.f32	s1, s14
 8000b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba0:	482c      	ldr	r0, [pc, #176]	@ (8000c54 <main+0x130>)
 8000ba2:	f000 fb5d 	bl	8001260 <peaking_filter_set_params>
  peaking_filter_set_params(&midFilt, gainMid, MID_FREQ, Q);
 8000ba6:	4b34      	ldr	r3, [pc, #208]	@ (8000c78 <main+0x154>)
 8000ba8:	edd3 7a00 	vldr	s15, [r3]
 8000bac:	4b33      	ldr	r3, [pc, #204]	@ (8000c7c <main+0x158>)
 8000bae:	ed93 7a00 	vldr	s14, [r3]
 8000bb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c6c <main+0x148>)
 8000bb4:	edd3 6a00 	vldr	s13, [r3]
 8000bb8:	eeb0 1a66 	vmov.f32	s2, s13
 8000bbc:	eef0 0a47 	vmov.f32	s1, s14
 8000bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc4:	4824      	ldr	r0, [pc, #144]	@ (8000c58 <main+0x134>)
 8000bc6:	f000 fb4b 	bl	8001260 <peaking_filter_set_params>
  peaking_filter_set_params(&midHighFilt, gainHighMid, MID_HIGH_FREQ, Q);
 8000bca:	4b2d      	ldr	r3, [pc, #180]	@ (8000c80 <main+0x15c>)
 8000bcc:	edd3 7a00 	vldr	s15, [r3]
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c84 <main+0x160>)
 8000bd2:	ed93 7a00 	vldr	s14, [r3]
 8000bd6:	4b25      	ldr	r3, [pc, #148]	@ (8000c6c <main+0x148>)
 8000bd8:	edd3 6a00 	vldr	s13, [r3]
 8000bdc:	eeb0 1a66 	vmov.f32	s2, s13
 8000be0:	eef0 0a47 	vmov.f32	s1, s14
 8000be4:	eeb0 0a67 	vmov.f32	s0, s15
 8000be8:	481c      	ldr	r0, [pc, #112]	@ (8000c5c <main+0x138>)
 8000bea:	f000 fb39 	bl	8001260 <peaking_filter_set_params>
  peaking_filter_set_params(&highFilt, gainHighShelf, HIGH_FREQ, Q);
 8000bee:	4b26      	ldr	r3, [pc, #152]	@ (8000c88 <main+0x164>)
 8000bf0:	edd3 7a00 	vldr	s15, [r3]
 8000bf4:	4b25      	ldr	r3, [pc, #148]	@ (8000c8c <main+0x168>)
 8000bf6:	ed93 7a00 	vldr	s14, [r3]
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000c6c <main+0x148>)
 8000bfc:	edd3 6a00 	vldr	s13, [r3]
 8000c00:	eeb0 1a66 	vmov.f32	s2, s13
 8000c04:	eef0 0a47 	vmov.f32	s1, s14
 8000c08:	eeb0 0a67 	vmov.f32	s0, s15
 8000c0c:	4814      	ldr	r0, [pc, #80]	@ (8000c60 <main+0x13c>)
 8000c0e:	f000 fb27 	bl	8001260 <peaking_filter_set_params>

  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, 4);
 8000c12:	2304      	movs	r3, #4
 8000c14:	4a1e      	ldr	r2, [pc, #120]	@ (8000c90 <main+0x16c>)
 8000c16:	491f      	ldr	r1, [pc, #124]	@ (8000c94 <main+0x170>)
 8000c18:	481f      	ldr	r0, [pc, #124]	@ (8000c98 <main+0x174>)
 8000c1a:	f001 fffd 	bl	8002c18 <HAL_I2SEx_TransmitReceive_DMA>
  // r_a1 = 0.002045517309308495f;
  // r_a2 = 0.0010227586546542474f;
  // r_b1 = -1.9066459797557103f;
  // r_b2 = 0.9107370143743273f;

  HAL_UART_Transmit(&huart1, tx_buffer, sizeof(tx_buffer), 1000);
 8000c1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c22:	221e      	movs	r2, #30
 8000c24:	491d      	ldr	r1, [pc, #116]	@ (8000c9c <main+0x178>)
 8000c26:	481e      	ldr	r0, [pc, #120]	@ (8000ca0 <main+0x17c>)
 8000c28:	f003 fab4 	bl	8004194 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_UART_Transmit(&huart1, tx_buffer, sizeof(tx_buffer), 1000);
 8000c2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c30:	221e      	movs	r2, #30
 8000c32:	491a      	ldr	r1, [pc, #104]	@ (8000c9c <main+0x178>)
 8000c34:	481a      	ldr	r0, [pc, #104]	@ (8000ca0 <main+0x17c>)
 8000c36:	f003 faad 	bl	8004194 <HAL_UART_Transmit>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000c3a:	2104      	movs	r1, #4
 8000c3c:	4819      	ldr	r0, [pc, #100]	@ (8000ca4 <main+0x180>)
 8000c3e:	f001 fd8a 	bl	8002756 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8000c42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c46:	f000 fe99 	bl	800197c <HAL_Delay>
    HAL_UART_Transmit(&huart1, tx_buffer, sizeof(tx_buffer), 1000);
 8000c4a:	bf00      	nop
 8000c4c:	e7ee      	b.n	8000c2c <main+0x108>
 8000c4e:	bf00      	nop
 8000c50:	20000238 	.word	0x20000238
 8000c54:	20000268 	.word	0x20000268
 8000c58:	20000298 	.word	0x20000298
 8000c5c:	200002c8 	.word	0x200002c8
 8000c60:	200002f8 	.word	0x200002f8
 8000c64:	20000034 	.word	0x20000034
 8000c68:	20000020 	.word	0x20000020
 8000c6c:	20000048 	.word	0x20000048
 8000c70:	20000038 	.word	0x20000038
 8000c74:	20000024 	.word	0x20000024
 8000c78:	2000003c 	.word	0x2000003c
 8000c7c:	20000028 	.word	0x20000028
 8000c80:	20000040 	.word	0x20000040
 8000c84:	2000002c 	.word	0x2000002c
 8000c88:	20000044 	.word	0x20000044
 8000c8c:	20000030 	.word	0x20000030
 8000c90:	20000218 	.word	0x20000218
 8000c94:	20000228 	.word	0x20000228
 8000c98:	200000c8 	.word	0x200000c8
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	200001d0 	.word	0x200001d0
 8000ca4:	40020400 	.word	0x40020400

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b094      	sub	sp, #80	@ 0x50
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0320 	add.w	r3, r7, #32
 8000cb2:	2230      	movs	r2, #48	@ 0x30
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 fa1e 	bl	80050f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	4b28      	ldr	r3, [pc, #160]	@ (8000d74 <SystemClock_Config+0xcc>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd4:	4a27      	ldr	r2, [pc, #156]	@ (8000d74 <SystemClock_Config+0xcc>)
 8000cd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cdc:	4b25      	ldr	r3, [pc, #148]	@ (8000d74 <SystemClock_Config+0xcc>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	4b22      	ldr	r3, [pc, #136]	@ (8000d78 <SystemClock_Config+0xd0>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a21      	ldr	r2, [pc, #132]	@ (8000d78 <SystemClock_Config+0xd0>)
 8000cf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <SystemClock_Config+0xd0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d04:	2301      	movs	r3, #1
 8000d06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d12:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d1c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d22:	2302      	movs	r3, #2
 8000d24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d26:	2304      	movs	r3, #4
 8000d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2a:	f107 0320 	add.w	r3, r7, #32
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 fc06 	bl	8003540 <HAL_RCC_OscConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d3a:	f000 fa67 	bl	800120c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3e:	230f      	movs	r3, #15
 8000d40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d42:	2302      	movs	r3, #2
 8000d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d4a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	2105      	movs	r1, #5
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f002 fe67 	bl	8003a30 <HAL_RCC_ClockConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d68:	f000 fa50 	bl	800120c <Error_Handler>
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3750      	adds	r7, #80	@ 0x50
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40007000 	.word	0x40007000

08000d7c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000d80:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <MX_I2S2_Init+0x54>)
 8000d82:	4a14      	ldr	r2, [pc, #80]	@ (8000dd4 <MX_I2S2_Init+0x58>)
 8000d84:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000d86:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <MX_I2S2_Init+0x54>)
 8000d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d8c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <MX_I2S2_Init+0x54>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000d94:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <MX_I2S2_Init+0x54>)
 8000d96:	2203      	movs	r2, #3
 8000d98:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd0 <MX_I2S2_Init+0x54>)
 8000d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000da0:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <MX_I2S2_Init+0x54>)
 8000da4:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd8 <MX_I2S2_Init+0x5c>)
 8000da6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000da8:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <MX_I2S2_Init+0x54>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000dae:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <MX_I2S2_Init+0x54>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <MX_I2S2_Init+0x54>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <MX_I2S2_Init+0x54>)
 8000dbc:	f001 fce6 	bl	800278c <HAL_I2S_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000dc6:	f000 fa21 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200000c8 	.word	0x200000c8
 8000dd4:	40003800 	.word	0x40003800
 8000dd8:	00017700 	.word	0x00017700

08000ddc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <MX_USART1_UART_Init+0x50>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000de8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000e14:	f003 f96e 	bl	80040f4 <HAL_UART_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e1e:	f000 f9f5 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200001d0 	.word	0x200001d0
 8000e2c:	40011000 	.word	0x40011000

08000e30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <MX_DMA_Init+0x4c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e7c <MX_DMA_Init+0x4c>)
 8000e40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e46:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <MX_DMA_Init+0x4c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	200e      	movs	r0, #14
 8000e58:	f000 fe8f 	bl	8001b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e5c:	200e      	movs	r0, #14
 8000e5e:	f000 fea8 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	200f      	movs	r0, #15
 8000e68:	f000 fe87 	bl	8001b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000e6c:	200f      	movs	r0, #15
 8000e6e:	f000 fea0 	bl	8001bb2 <HAL_NVIC_EnableIRQ>

}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	@ 0x28
 8000e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b26      	ldr	r3, [pc, #152]	@ (8000f34 <MX_GPIO_Init+0xb4>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a25      	ldr	r2, [pc, #148]	@ (8000f34 <MX_GPIO_Init+0xb4>)
 8000ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b23      	ldr	r3, [pc, #140]	@ (8000f34 <MX_GPIO_Init+0xb4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f34 <MX_GPIO_Init+0xb4>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a1e      	ldr	r2, [pc, #120]	@ (8000f34 <MX_GPIO_Init+0xb4>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f34 <MX_GPIO_Init+0xb4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	4b18      	ldr	r3, [pc, #96]	@ (8000f34 <MX_GPIO_Init+0xb4>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a17      	ldr	r2, [pc, #92]	@ (8000f34 <MX_GPIO_Init+0xb4>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <MX_GPIO_Init+0xb4>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <MX_GPIO_Init+0xb4>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a10      	ldr	r2, [pc, #64]	@ (8000f34 <MX_GPIO_Init+0xb4>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <MX_GPIO_Init+0xb4>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2104      	movs	r1, #4
 8000f0a:	480b      	ldr	r0, [pc, #44]	@ (8000f38 <MX_GPIO_Init+0xb8>)
 8000f0c:	f001 fc0a 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f10:	2304      	movs	r3, #4
 8000f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	4804      	ldr	r0, [pc, #16]	@ (8000f38 <MX_GPIO_Init+0xb8>)
 8000f28:	f001 fa60 	bl	80023ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	@ 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020400 	.word	0x40020400

08000f3c <HAL_I2SEx_TxRxHalfCpltCallback>:
//     txBuf[5] = lSample&0xFFFF;
//     txBuf[6] = (rSample>>16)&0xFFFF;
//     txBuf[7] = rSample&0xFFFF;
// }

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
    // Restore signed 24-bit samples from 16-bit buffers
    for (int i = 0; i < BUFFER_SIZE / 2; i++) {
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	e095      	b.n	8001076 <HAL_I2SEx_TxRxHalfCpltCallback+0x13a>
        int rSample = (int)(rxBuf[i * 4] << 16) | rxBuf[i * 4 + 1];
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4a4e      	ldr	r2, [pc, #312]	@ (8001088 <HAL_I2SEx_TxRxHalfCpltCallback+0x14c>)
 8000f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f54:	041b      	lsls	r3, r3, #16
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	0092      	lsls	r2, r2, #2
 8000f5a:	3201      	adds	r2, #1
 8000f5c:	494a      	ldr	r1, [pc, #296]	@ (8001088 <HAL_I2SEx_TxRxHalfCpltCallback+0x14c>)
 8000f5e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        int lSample = (int)(rxBuf[i * 4 + 2] << 16) | rxBuf[i * 4 + 3];
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	4a46      	ldr	r2, [pc, #280]	@ (8001088 <HAL_I2SEx_TxRxHalfCpltCallback+0x14c>)
 8000f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f72:	041b      	lsls	r3, r3, #16
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	3203      	adds	r2, #3
 8000f7a:	4943      	ldr	r1, [pc, #268]	@ (8001088 <HAL_I2SEx_TxRxHalfCpltCallback+0x14c>)
 8000f7c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]

        // Run filtering for each band on the left and right channels
        lSample = peaking_filter_update(&lowFilt, lSample);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f92:	483e      	ldr	r0, [pc, #248]	@ (800108c <HAL_I2SEx_TxRxHalfCpltCallback+0x150>)
 8000f94:	f000 fa26 	bl	80013e4 <peaking_filter_update>
 8000f98:	eef0 7a40 	vmov.f32	s15, s0
 8000f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fa0:	ee17 3a90 	vmov	r3, s15
 8000fa4:	60fb      	str	r3, [r7, #12]
        lSample = peaking_filter_update(&midLowFilt, lSample);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	ee07 3a90 	vmov	s15, r3
 8000fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb4:	4836      	ldr	r0, [pc, #216]	@ (8001090 <HAL_I2SEx_TxRxHalfCpltCallback+0x154>)
 8000fb6:	f000 fa15 	bl	80013e4 <peaking_filter_update>
 8000fba:	eef0 7a40 	vmov.f32	s15, s0
 8000fbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc2:	ee17 3a90 	vmov	r3, s15
 8000fc6:	60fb      	str	r3, [r7, #12]
        lSample = peaking_filter_update(&midFilt, lSample);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	ee07 3a90 	vmov	s15, r3
 8000fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd6:	482f      	ldr	r0, [pc, #188]	@ (8001094 <HAL_I2SEx_TxRxHalfCpltCallback+0x158>)
 8000fd8:	f000 fa04 	bl	80013e4 <peaking_filter_update>
 8000fdc:	eef0 7a40 	vmov.f32	s15, s0
 8000fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe4:	ee17 3a90 	vmov	r3, s15
 8000fe8:	60fb      	str	r3, [r7, #12]
        lSample = peaking_filter_update(&midHighFilt, lSample);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	ee07 3a90 	vmov	s15, r3
 8000ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff8:	4827      	ldr	r0, [pc, #156]	@ (8001098 <HAL_I2SEx_TxRxHalfCpltCallback+0x15c>)
 8000ffa:	f000 f9f3 	bl	80013e4 <peaking_filter_update>
 8000ffe:	eef0 7a40 	vmov.f32	s15, s0
 8001002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001006:	ee17 3a90 	vmov	r3, s15
 800100a:	60fb      	str	r3, [r7, #12]
        lSample = peaking_filter_update(&highFilt, lSample);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001016:	eeb0 0a67 	vmov.f32	s0, s15
 800101a:	4820      	ldr	r0, [pc, #128]	@ (800109c <HAL_I2SEx_TxRxHalfCpltCallback+0x160>)
 800101c:	f000 f9e2 	bl	80013e4 <peaking_filter_update>
 8001020:	eef0 7a40 	vmov.f32	s15, s0
 8001024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001028:	ee17 3a90 	vmov	r3, s15
 800102c:	60fb      	str	r3, [r7, #12]

        txBuf[i * 4] = (lSample >> 16) & 0xFFFF;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	0c1a      	lsrs	r2, r3, #16
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	b291      	uxth	r1, r2
 8001038:	4a19      	ldr	r2, [pc, #100]	@ (80010a0 <HAL_I2SEx_TxRxHalfCpltCallback+0x164>)
 800103a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        txBuf[i * 4 + 1] = lSample & 0xFFFF;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	3301      	adds	r3, #1
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	b291      	uxth	r1, r2
 8001048:	4a15      	ldr	r2, [pc, #84]	@ (80010a0 <HAL_I2SEx_TxRxHalfCpltCallback+0x164>)
 800104a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        txBuf[i * 4 + 2] = (rSample >> 16) & 0xFFFF;
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	0c1a      	lsrs	r2, r3, #16
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	b291      	uxth	r1, r2
 800105a:	4a11      	ldr	r2, [pc, #68]	@ (80010a0 <HAL_I2SEx_TxRxHalfCpltCallback+0x164>)
 800105c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        txBuf[i * 4 + 3] = rSample & 0xFFFF;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	3303      	adds	r3, #3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	b291      	uxth	r1, r2
 800106a:	4a0d      	ldr	r2, [pc, #52]	@ (80010a0 <HAL_I2SEx_TxRxHalfCpltCallback+0x164>)
 800106c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < BUFFER_SIZE / 2; i++) {
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	3301      	adds	r3, #1
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b03      	cmp	r3, #3
 800107a:	f77f af66 	ble.w	8000f4a <HAL_I2SEx_TxRxHalfCpltCallback+0xe>
    }
}
 800107e:	bf00      	nop
 8001080:	bf00      	nop
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000218 	.word	0x20000218
 800108c:	20000238 	.word	0x20000238
 8001090:	20000268 	.word	0x20000268
 8001094:	20000298 	.word	0x20000298
 8001098:	200002c8 	.word	0x200002c8
 800109c:	200002f8 	.word	0x200002f8
 80010a0:	20000228 	.word	0x20000228

080010a4 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    // Restore signed 24-bit samples from 16-bit buffers
    for (int i = BUFFER_SIZE / 2; i < BUFFER_SIZE; i++) {
 80010ac:	2304      	movs	r3, #4
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	e095      	b.n	80011de <HAL_I2SEx_TxRxCpltCallback+0x13a>
        int rSample = (int)(rxBuf[i * 4] << 16) | rxBuf[i * 4 + 1];
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4a4e      	ldr	r2, [pc, #312]	@ (80011f0 <HAL_I2SEx_TxRxCpltCallback+0x14c>)
 80010b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010bc:	041b      	lsls	r3, r3, #16
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	0092      	lsls	r2, r2, #2
 80010c2:	3201      	adds	r2, #1
 80010c4:	494a      	ldr	r1, [pc, #296]	@ (80011f0 <HAL_I2SEx_TxRxCpltCallback+0x14c>)
 80010c6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        int lSample = (int)(rxBuf[i * 4 + 2] << 16) | rxBuf[i * 4 + 3];
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	4a46      	ldr	r2, [pc, #280]	@ (80011f0 <HAL_I2SEx_TxRxCpltCallback+0x14c>)
 80010d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010da:	041b      	lsls	r3, r3, #16
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	3203      	adds	r2, #3
 80010e2:	4943      	ldr	r1, [pc, #268]	@ (80011f0 <HAL_I2SEx_TxRxCpltCallback+0x14c>)
 80010e4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]

        // Run filtering for each band on the left and right channels
        lSample = peaking_filter_update(&lowFilt, lSample);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f6:	eeb0 0a67 	vmov.f32	s0, s15
 80010fa:	483e      	ldr	r0, [pc, #248]	@ (80011f4 <HAL_I2SEx_TxRxCpltCallback+0x150>)
 80010fc:	f000 f972 	bl	80013e4 <peaking_filter_update>
 8001100:	eef0 7a40 	vmov.f32	s15, s0
 8001104:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001108:	ee17 3a90 	vmov	r3, s15
 800110c:	60fb      	str	r3, [r7, #12]
        lSample = peaking_filter_update(&midLowFilt, lSample);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001118:	eeb0 0a67 	vmov.f32	s0, s15
 800111c:	4836      	ldr	r0, [pc, #216]	@ (80011f8 <HAL_I2SEx_TxRxCpltCallback+0x154>)
 800111e:	f000 f961 	bl	80013e4 <peaking_filter_update>
 8001122:	eef0 7a40 	vmov.f32	s15, s0
 8001126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800112a:	ee17 3a90 	vmov	r3, s15
 800112e:	60fb      	str	r3, [r7, #12]
        lSample = peaking_filter_update(&midFilt, lSample);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113a:	eeb0 0a67 	vmov.f32	s0, s15
 800113e:	482f      	ldr	r0, [pc, #188]	@ (80011fc <HAL_I2SEx_TxRxCpltCallback+0x158>)
 8001140:	f000 f950 	bl	80013e4 <peaking_filter_update>
 8001144:	eef0 7a40 	vmov.f32	s15, s0
 8001148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800114c:	ee17 3a90 	vmov	r3, s15
 8001150:	60fb      	str	r3, [r7, #12]
        lSample = peaking_filter_update(&midHighFilt, lSample);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115c:	eeb0 0a67 	vmov.f32	s0, s15
 8001160:	4827      	ldr	r0, [pc, #156]	@ (8001200 <HAL_I2SEx_TxRxCpltCallback+0x15c>)
 8001162:	f000 f93f 	bl	80013e4 <peaking_filter_update>
 8001166:	eef0 7a40 	vmov.f32	s15, s0
 800116a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800116e:	ee17 3a90 	vmov	r3, s15
 8001172:	60fb      	str	r3, [r7, #12]
        lSample = peaking_filter_update(&highFilt, lSample);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117e:	eeb0 0a67 	vmov.f32	s0, s15
 8001182:	4820      	ldr	r0, [pc, #128]	@ (8001204 <HAL_I2SEx_TxRxCpltCallback+0x160>)
 8001184:	f000 f92e 	bl	80013e4 <peaking_filter_update>
 8001188:	eef0 7a40 	vmov.f32	s15, s0
 800118c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001190:	ee17 3a90 	vmov	r3, s15
 8001194:	60fb      	str	r3, [r7, #12]

        txBuf[i * 4] = (lSample >> 16) & 0xFFFF;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	0c1a      	lsrs	r2, r3, #16
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	b291      	uxth	r1, r2
 80011a0:	4a19      	ldr	r2, [pc, #100]	@ (8001208 <HAL_I2SEx_TxRxCpltCallback+0x164>)
 80011a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        txBuf[i * 4 + 1] = lSample & 0xFFFF;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	3301      	adds	r3, #1
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	b291      	uxth	r1, r2
 80011b0:	4a15      	ldr	r2, [pc, #84]	@ (8001208 <HAL_I2SEx_TxRxCpltCallback+0x164>)
 80011b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        txBuf[i * 4 + 2] = (rSample >> 16) & 0xFFFF;
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	0c1a      	lsrs	r2, r3, #16
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	b291      	uxth	r1, r2
 80011c2:	4a11      	ldr	r2, [pc, #68]	@ (8001208 <HAL_I2SEx_TxRxCpltCallback+0x164>)
 80011c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        txBuf[i * 4 + 3] = rSample & 0xFFFF;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	3303      	adds	r3, #3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	b291      	uxth	r1, r2
 80011d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001208 <HAL_I2SEx_TxRxCpltCallback+0x164>)
 80011d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = BUFFER_SIZE / 2; i < BUFFER_SIZE; i++) {
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3301      	adds	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	2b07      	cmp	r3, #7
 80011e2:	f77f af66 	ble.w	80010b2 <HAL_I2SEx_TxRxCpltCallback+0xe>
    }
}
 80011e6:	bf00      	nop
 80011e8:	bf00      	nop
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000218 	.word	0x20000218
 80011f4:	20000238 	.word	0x20000238
 80011f8:	20000268 	.word	0x20000268
 80011fc:	20000298 	.word	0x20000298
 8001200:	200002c8 	.word	0x200002c8
 8001204:	200002f8 	.word	0x200002f8
 8001208:	20000228 	.word	0x20000228

0800120c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <Error_Handler+0x8>

08001218 <peaking_filter_init>:

#define _USE_MATH_DEFINES
#include "peaking_filter.h"
//#include <stdio.h>

void peaking_filter_init(peaking_filter_data *filt) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    // Initialize filter memory
    filt -> x[0] = 0.0f;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
    filt -> x[1] = 0.0f;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	605a      	str	r2, [r3, #4]
    filt -> x[2] = 0.0f;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
    filt -> y[0] = 0.0f;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	60da      	str	r2, [r3, #12]
    filt -> y[1] = 0.0f;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
    filt -> y[2] = 0.0f;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	0000      	movs	r0, r0
	...

08001260 <peaking_filter_set_params>:

float dt = 1 / 96E3;

void peaking_filter_set_params(peaking_filter_data *filt, float gain, float centerFreq_hz, float q_width) {
 8001260:	b580      	push	{r7, lr}
 8001262:	ed2d 8b02 	vpush	{d8}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001270:	edc7 0a01 	vstr	s1, [r7, #4]
 8001274:	ed87 1a00 	vstr	s2, [r7]
    // Convert Hz to rad/s
    float centerFreq_rad = 2 * M_PI * centerFreq_hz;
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fa33 	bl	80006e4 <__aeabi_f2d>
 800127e:	a357      	add	r3, pc, #348	@ (adr r3, 80013dc <peaking_filter_set_params+0x17c>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	f7fe ffa0 	bl	80001c8 <__aeabi_dmul>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fa80 	bl	8000794 <__aeabi_d2f>
 8001294:	4603      	mov	r3, r0
 8001296:	617b      	str	r3, [r7, #20]
    
    // Compute Quality factor (Q = fc / BW)
    // float Q = center_freq / bandwidth;

    // Guide
    float wcT = centerFreq_rad * dt;
 8001298:	4b4f      	ldr	r3, [pc, #316]	@ (80013d8 <peaking_filter_set_params+0x178>)
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	ed97 7a05 	vldr	s14, [r7, #20]
 80012a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a6:	edc7 7a04 	vstr	s15, [r7, #16]
    
    // Compute filter coefficients
    filt -> a[0] = 4.0f + (2.0f * (gain / q_width) * wcT) + powf((wcT),2);
 80012aa:	edd7 6a02 	vldr	s13, [r7, #8]
 80012ae:	ed97 7a00 	vldr	s14, [r7]
 80012b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80012be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80012c6:	ee37 8a87 	vadd.f32	s16, s15, s14
 80012ca:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80012ce:	ed97 0a04 	vldr	s0, [r7, #16]
 80012d2:	f003 ff43 	bl	800515c <powf>
 80012d6:	eef0 7a40 	vmov.f32	s15, s0
 80012da:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	edc3 7a06 	vstr	s15, [r3, #24]
    filt -> a[1] = 2.0f * powf((wcT),2) - 8.0f;
 80012e4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80012e8:	ed97 0a04 	vldr	s0, [r7, #16]
 80012ec:	f003 ff36 	bl	800515c <powf>
 80012f0:	eef0 7a40 	vmov.f32	s15, s0
 80012f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012f8:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80012fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	edc3 7a07 	vstr	s15, [r3, #28]
    filt -> a[2] = 4.0f - (2.0f * (gain/q_width) * wcT) + powf((wcT),2);
 8001306:	edd7 6a02 	vldr	s13, [r7, #8]
 800130a:	ed97 7a00 	vldr	s14, [r7]
 800130e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001312:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001316:	edd7 7a04 	vldr	s15, [r7, #16]
 800131a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001322:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001326:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800132a:	ed97 0a04 	vldr	s0, [r7, #16]
 800132e:	f003 ff15 	bl	800515c <powf>
 8001332:	eef0 7a40 	vmov.f32	s15, s0
 8001336:	ee78 7a27 	vadd.f32	s15, s16, s15
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	edc3 7a08 	vstr	s15, [r3, #32]
    filt -> b[0] = 1.0f / (4.0f + 2.0f / q_width * wcT + wcT * wcT);
 8001340:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001344:	edd7 7a00 	vldr	s15, [r7]
 8001348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800134c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001354:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800135c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001360:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001364:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001368:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800136c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    filt -> b[1] = -(2.0f * wcT * wcT - 8.0f);
 8001376:	edd7 7a04 	vldr	s15, [r7, #16]
 800137a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800137e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001386:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800138a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800138e:	eef1 7a67 	vneg.f32	s15, s15
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    filt -> b[2] = -(4.0f - 2.0f / q_width * wcT + wcT * wcT);
 8001398:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800139c:	edd7 7a00 	vldr	s15, [r7]
 80013a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80013a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ac:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80013b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80013b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c0:	eef1 7a67 	vneg.f32	s15, s15
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	ecbd 8b02 	vpop	{d8}
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000004c 	.word	0x2000004c
 80013dc:	54442d18 	.word	0x54442d18
 80013e0:	401921fb 	.word	0x401921fb

080013e4 <peaking_filter_update>:

float peaking_filter_update(peaking_filter_data *filt, float in) {
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	ed87 0a00 	vstr	s0, [r7]
    // Update filter memory
    filt -> x[2] = filt -> x[1];
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	609a      	str	r2, [r3, #8]
    filt -> x[1] = filt -> x[0];
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	605a      	str	r2, [r3, #4]
    filt -> x[0] = in;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	601a      	str	r2, [r3, #0]
    filt -> y[2] = filt -> y[1];
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691a      	ldr	r2, [r3, #16]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	615a      	str	r2, [r3, #20]
    filt -> y[1] = filt -> y[0];
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	611a      	str	r2, [r3, #16]

    // Compute filter output
    filt -> y[0] = ((filt -> a[0] * filt -> x[0] + filt -> a[1] * filt -> x[1] + filt -> a[2] * filt -> x[2]) + (filt -> b[1] * filt -> y[1] + filt -> b[2] * filt -> y[2])) * filt -> b[0]; // / filt -> b[0];
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	ed93 7a06 	vldr	s14, [r3, #24]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	edd3 7a00 	vldr	s15, [r3]
 8001422:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	edd3 6a07 	vldr	s13, [r3, #28]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001436:	ee37 7a27 	vadd.f32	s14, s14, s15
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	edd3 6a08 	vldr	s13, [r3, #32]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	edd3 7a02 	vldr	s15, [r3, #8]
 8001446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800144a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	edd3 7a04 	vldr	s15, [r3, #16]
 800145a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	edd3 7a05 	vldr	s15, [r3, #20]
 800146a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800146e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001472:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800147c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	edc3 7a03 	vstr	s15, [r3, #12]
    return filt -> y[0];
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	ee07 3a90 	vmov	s15, r3
}
 800148e:	eeb0 0a67 	vmov.f32	s0, s15
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <HAL_MspInit+0x4c>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014aa:	4a0f      	ldr	r2, [pc, #60]	@ (80014e8 <HAL_MspInit+0x4c>)
 80014ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b2:	4b0d      	ldr	r3, [pc, #52]	@ (80014e8 <HAL_MspInit+0x4c>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <HAL_MspInit+0x4c>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	4a08      	ldr	r2, [pc, #32]	@ (80014e8 <HAL_MspInit+0x4c>)
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_MspInit+0x4c>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08e      	sub	sp, #56	@ 0x38
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a6b      	ldr	r2, [pc, #428]	@ (80016c4 <HAL_I2S_MspInit+0x1d8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	f040 80cf 	bne.w	80016bc <HAL_I2S_MspInit+0x1d0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800151e:	2301      	movs	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001522:	23c0      	movs	r3, #192	@ 0xc0
 8001524:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001526:	2302      	movs	r3, #2
 8001528:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4618      	mov	r0, r3
 8001530:	f002 fc9e 	bl	8003e70 <HAL_RCCEx_PeriphCLKConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800153a:	f7ff fe67 	bl	800120c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b61      	ldr	r3, [pc, #388]	@ (80016c8 <HAL_I2S_MspInit+0x1dc>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	4a60      	ldr	r2, [pc, #384]	@ (80016c8 <HAL_I2S_MspInit+0x1dc>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800154c:	6413      	str	r3, [r2, #64]	@ 0x40
 800154e:	4b5e      	ldr	r3, [pc, #376]	@ (80016c8 <HAL_I2S_MspInit+0x1dc>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b5a      	ldr	r3, [pc, #360]	@ (80016c8 <HAL_I2S_MspInit+0x1dc>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a59      	ldr	r2, [pc, #356]	@ (80016c8 <HAL_I2S_MspInit+0x1dc>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b57      	ldr	r3, [pc, #348]	@ (80016c8 <HAL_I2S_MspInit+0x1dc>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	4b53      	ldr	r3, [pc, #332]	@ (80016c8 <HAL_I2S_MspInit+0x1dc>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a52      	ldr	r2, [pc, #328]	@ (80016c8 <HAL_I2S_MspInit+0x1dc>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b50      	ldr	r3, [pc, #320]	@ (80016c8 <HAL_I2S_MspInit+0x1dc>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001592:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015a4:	2305      	movs	r3, #5
 80015a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ac:	4619      	mov	r1, r3
 80015ae:	4847      	ldr	r0, [pc, #284]	@ (80016cc <HAL_I2S_MspInit+0x1e0>)
 80015b0:	f000 ff1c 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80015b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80015c6:	2306      	movs	r3, #6
 80015c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ce:	4619      	mov	r1, r3
 80015d0:	483e      	ldr	r0, [pc, #248]	@ (80016cc <HAL_I2S_MspInit+0x1e0>)
 80015d2:	f000 ff0b 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015d6:	2340      	movs	r3, #64	@ 0x40
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015e6:	2305      	movs	r3, #5
 80015e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ee:	4619      	mov	r1, r3
 80015f0:	4837      	ldr	r0, [pc, #220]	@ (80016d0 <HAL_I2S_MspInit+0x1e4>)
 80015f2:	f000 fefb 	bl	80023ec <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 80015f6:	4b37      	ldr	r3, [pc, #220]	@ (80016d4 <HAL_I2S_MspInit+0x1e8>)
 80015f8:	4a37      	ldr	r2, [pc, #220]	@ (80016d8 <HAL_I2S_MspInit+0x1ec>)
 80015fa:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 80015fc:	4b35      	ldr	r3, [pc, #212]	@ (80016d4 <HAL_I2S_MspInit+0x1e8>)
 80015fe:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001602:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001604:	4b33      	ldr	r3, [pc, #204]	@ (80016d4 <HAL_I2S_MspInit+0x1e8>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800160a:	4b32      	ldr	r3, [pc, #200]	@ (80016d4 <HAL_I2S_MspInit+0x1e8>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001610:	4b30      	ldr	r3, [pc, #192]	@ (80016d4 <HAL_I2S_MspInit+0x1e8>)
 8001612:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001616:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001618:	4b2e      	ldr	r3, [pc, #184]	@ (80016d4 <HAL_I2S_MspInit+0x1e8>)
 800161a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800161e:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001620:	4b2c      	ldr	r3, [pc, #176]	@ (80016d4 <HAL_I2S_MspInit+0x1e8>)
 8001622:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001626:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001628:	4b2a      	ldr	r3, [pc, #168]	@ (80016d4 <HAL_I2S_MspInit+0x1e8>)
 800162a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800162e:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001630:	4b28      	ldr	r3, [pc, #160]	@ (80016d4 <HAL_I2S_MspInit+0x1e8>)
 8001632:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001636:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001638:	4b26      	ldr	r3, [pc, #152]	@ (80016d4 <HAL_I2S_MspInit+0x1e8>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 800163e:	4825      	ldr	r0, [pc, #148]	@ (80016d4 <HAL_I2S_MspInit+0x1e8>)
 8001640:	f000 fad2 	bl	8001be8 <HAL_DMA_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 800164a:	f7ff fddf 	bl	800120c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a20      	ldr	r2, [pc, #128]	@ (80016d4 <HAL_I2S_MspInit+0x1e8>)
 8001652:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001654:	4a1f      	ldr	r2, [pc, #124]	@ (80016d4 <HAL_I2S_MspInit+0x1e8>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800165a:	4b20      	ldr	r3, [pc, #128]	@ (80016dc <HAL_I2S_MspInit+0x1f0>)
 800165c:	4a20      	ldr	r2, [pc, #128]	@ (80016e0 <HAL_I2S_MspInit+0x1f4>)
 800165e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001660:	4b1e      	ldr	r3, [pc, #120]	@ (80016dc <HAL_I2S_MspInit+0x1f0>)
 8001662:	2200      	movs	r2, #0
 8001664:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001666:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <HAL_I2S_MspInit+0x1f0>)
 8001668:	2240      	movs	r2, #64	@ 0x40
 800166a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800166c:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <HAL_I2S_MspInit+0x1f0>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001672:	4b1a      	ldr	r3, [pc, #104]	@ (80016dc <HAL_I2S_MspInit+0x1f0>)
 8001674:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001678:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800167a:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <HAL_I2S_MspInit+0x1f0>)
 800167c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001680:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001682:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <HAL_I2S_MspInit+0x1f0>)
 8001684:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001688:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800168a:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <HAL_I2S_MspInit+0x1f0>)
 800168c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001690:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001692:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <HAL_I2S_MspInit+0x1f0>)
 8001694:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001698:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <HAL_I2S_MspInit+0x1f0>)
 800169c:	2200      	movs	r2, #0
 800169e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80016a0:	480e      	ldr	r0, [pc, #56]	@ (80016dc <HAL_I2S_MspInit+0x1f0>)
 80016a2:	f000 faa1 	bl	8001be8 <HAL_DMA_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 80016ac:	f7ff fdae 	bl	800120c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <HAL_I2S_MspInit+0x1f0>)
 80016b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80016b6:	4a09      	ldr	r2, [pc, #36]	@ (80016dc <HAL_I2S_MspInit+0x1f0>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80016bc:	bf00      	nop
 80016be:	3738      	adds	r7, #56	@ 0x38
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40003800 	.word	0x40003800
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020400 	.word	0x40020400
 80016d0:	40020800 	.word	0x40020800
 80016d4:	20000110 	.word	0x20000110
 80016d8:	40026058 	.word	0x40026058
 80016dc:	20000170 	.word	0x20000170
 80016e0:	40026070 	.word	0x40026070

080016e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	@ 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1d      	ldr	r2, [pc, #116]	@ (8001778 <HAL_UART_MspInit+0x94>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d134      	bne.n	8001770 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <HAL_UART_MspInit+0x98>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170e:	4a1b      	ldr	r2, [pc, #108]	@ (800177c <HAL_UART_MspInit+0x98>)
 8001710:	f043 0310 	orr.w	r3, r3, #16
 8001714:	6453      	str	r3, [r2, #68]	@ 0x44
 8001716:	4b19      	ldr	r3, [pc, #100]	@ (800177c <HAL_UART_MspInit+0x98>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171a:	f003 0310 	and.w	r3, r3, #16
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <HAL_UART_MspInit+0x98>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	4a14      	ldr	r2, [pc, #80]	@ (800177c <HAL_UART_MspInit+0x98>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	@ 0x30
 8001732:	4b12      	ldr	r3, [pc, #72]	@ (800177c <HAL_UART_MspInit+0x98>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800173e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001750:	2307      	movs	r3, #7
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	4809      	ldr	r0, [pc, #36]	@ (8001780 <HAL_UART_MspInit+0x9c>)
 800175c:	f000 fe46 	bl	80023ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	2025      	movs	r0, #37	@ 0x25
 8001766:	f000 fa08 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800176a:	2025      	movs	r0, #37	@ 0x25
 800176c:	f000 fa21 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	@ 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40011000 	.word	0x40011000
 800177c:	40023800 	.word	0x40023800
 8001780:	40020000 	.word	0x40020000

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <NMI_Handler+0x4>

0800178c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <HardFault_Handler+0x4>

08001794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <MemManage_Handler+0x4>

0800179c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <UsageFault_Handler+0x4>

080017ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017da:	f000 f8af 	bl	800193c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 80017e8:	4802      	ldr	r0, [pc, #8]	@ (80017f4 <DMA1_Stream3_IRQHandler+0x10>)
 80017ea:	f000 fb95 	bl	8001f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000110 	.word	0x20000110

080017f8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80017fc:	4802      	ldr	r0, [pc, #8]	@ (8001808 <DMA1_Stream4_IRQHandler+0x10>)
 80017fe:	f000 fb8b 	bl	8001f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000170 	.word	0x20000170

0800180c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001810:	4802      	ldr	r0, [pc, #8]	@ (800181c <USART1_IRQHandler+0x10>)
 8001812:	f002 fd4b 	bl	80042ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200001d0 	.word	0x200001d0

08001820 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <SystemInit+0x20>)
 8001826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800182a:	4a05      	ldr	r2, [pc, #20]	@ (8001840 <SystemInit+0x20>)
 800182c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001830:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001844:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800187c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001848:	f7ff ffea 	bl	8001820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800184c:	480c      	ldr	r0, [pc, #48]	@ (8001880 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800184e:	490d      	ldr	r1, [pc, #52]	@ (8001884 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001850:	4a0d      	ldr	r2, [pc, #52]	@ (8001888 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001854:	e002      	b.n	800185c <LoopCopyDataInit>

08001856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185a:	3304      	adds	r3, #4

0800185c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800185c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001860:	d3f9      	bcc.n	8001856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001862:	4a0a      	ldr	r2, [pc, #40]	@ (800188c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001864:	4c0a      	ldr	r4, [pc, #40]	@ (8001890 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001868:	e001      	b.n	800186e <LoopFillZerobss>

0800186a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800186c:	3204      	adds	r2, #4

0800186e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001870:	d3fb      	bcc.n	800186a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001872:	f003 fc4f 	bl	8005114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001876:	f7ff f955 	bl	8000b24 <main>
  bx  lr    
 800187a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800187c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001884:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001888:	08005950 	.word	0x08005950
  ldr r2, =_sbss
 800188c:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001890:	20000464 	.word	0x20000464

08001894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC_IRQHandler>
	...

08001898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800189c:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0d      	ldr	r2, [pc, #52]	@ (80018d8 <HAL_Init+0x40>)
 80018a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a8:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <HAL_Init+0x40>)
 80018ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b4:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a07      	ldr	r2, [pc, #28]	@ (80018d8 <HAL_Init+0x40>)
 80018ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f000 f94f 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c6:	200f      	movs	r0, #15
 80018c8:	f000 f808 	bl	80018dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018cc:	f7ff fde6 	bl	800149c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023c00 	.word	0x40023c00

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e4:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <HAL_InitTick+0x54>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <HAL_InitTick+0x58>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f967 	bl	8001bce <HAL_SYSTICK_Config>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e00e      	b.n	8001928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b0f      	cmp	r3, #15
 800190e:	d80a      	bhi.n	8001926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001910:	2200      	movs	r2, #0
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f000 f92f 	bl	8001b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800191c:	4a06      	ldr	r2, [pc, #24]	@ (8001938 <HAL_InitTick+0x5c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e000      	b.n	8001928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000050 	.word	0x20000050
 8001934:	20000058 	.word	0x20000058
 8001938:	20000054 	.word	0x20000054

0800193c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HAL_IncTick+0x20>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <HAL_IncTick+0x24>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a04      	ldr	r2, [pc, #16]	@ (8001960 <HAL_IncTick+0x24>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000058 	.word	0x20000058
 8001960:	20000328 	.word	0x20000328

08001964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return uwTick;
 8001968:	4b03      	ldr	r3, [pc, #12]	@ (8001978 <HAL_GetTick+0x14>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000328 	.word	0x20000328

0800197c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001984:	f7ff ffee 	bl	8001964 <HAL_GetTick>
 8001988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001994:	d005      	beq.n	80019a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001996:	4b0a      	ldr	r3, [pc, #40]	@ (80019c0 <HAL_Delay+0x44>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4413      	add	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019a2:	bf00      	nop
 80019a4:	f7ff ffde 	bl	8001964 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d8f7      	bhi.n	80019a4 <HAL_Delay+0x28>
  {
  }
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000058 	.word	0x20000058

080019c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a10:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <__NVIC_GetPriorityGrouping+0x18>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	f003 0307 	and.w	r3, r3, #7
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db0b      	blt.n	8001a52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	4907      	ldr	r1, [pc, #28]	@ (8001a60 <__NVIC_EnableIRQ+0x38>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e100 	.word	0xe000e100

08001a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	@ (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	@ (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	@ 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f1c3 0307 	rsb	r3, r3, #7
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf28      	it	cs
 8001ad6:	2304      	movcs	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d902      	bls.n	8001ae8 <NVIC_EncodePriority+0x30>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3b03      	subs	r3, #3
 8001ae6:	e000      	b.n	8001aea <NVIC_EncodePriority+0x32>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	4313      	orrs	r3, r2
         );
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	@ 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b30:	d301      	bcc.n	8001b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00f      	b.n	8001b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b36:	4a0a      	ldr	r2, [pc, #40]	@ (8001b60 <SysTick_Config+0x40>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3e:	210f      	movs	r1, #15
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f7ff ff8e 	bl	8001a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <SysTick_Config+0x40>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4e:	4b04      	ldr	r3, [pc, #16]	@ (8001b60 <SysTick_Config+0x40>)
 8001b50:	2207      	movs	r2, #7
 8001b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	e000e010 	.word	0xe000e010

08001b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff29 	bl	80019c4 <__NVIC_SetPriorityGrouping>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8c:	f7ff ff3e 	bl	8001a0c <__NVIC_GetPriorityGrouping>
 8001b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	f7ff ff8e 	bl	8001ab8 <NVIC_EncodePriority>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff5d 	bl	8001a64 <__NVIC_SetPriority>
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff31 	bl	8001a28 <__NVIC_EnableIRQ>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ffa2 	bl	8001b20 <SysTick_Config>
 8001bdc:	4603      	mov	r3, r0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bf4:	f7ff feb6 	bl	8001964 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e099      	b.n	8001d38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0201 	bic.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c24:	e00f      	b.n	8001c46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c26:	f7ff fe9d 	bl	8001964 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b05      	cmp	r3, #5
 8001c32:	d908      	bls.n	8001c46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2220      	movs	r2, #32
 8001c38:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e078      	b.n	8001d38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1e8      	bne.n	8001c26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	4b38      	ldr	r3, [pc, #224]	@ (8001d40 <HAL_DMA_Init+0x158>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d107      	bne.n	8001cb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f023 0307 	bic.w	r3, r3, #7
 8001cc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d117      	bne.n	8001d0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00e      	beq.n	8001d0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 fb01 	bl	80022f4 <DMA_CheckFifoParam>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2240      	movs	r2, #64	@ 0x40
 8001cfc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d06:	2301      	movs	r3, #1
 8001d08:	e016      	b.n	8001d38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 fab8 	bl	8002288 <DMA_CalcBaseAndBitshift>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d20:	223f      	movs	r2, #63	@ 0x3f
 8001d22:	409a      	lsls	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	f010803f 	.word	0xf010803f

08001d44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <HAL_DMA_Start_IT+0x26>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e040      	b.n	8001dec <HAL_DMA_Start_IT+0xa8>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d12f      	bne.n	8001dde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2202      	movs	r2, #2
 8001d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 fa4a 	bl	800222c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9c:	223f      	movs	r2, #63	@ 0x3f
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0216 	orr.w	r2, r2, #22
 8001db2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d007      	beq.n	8001dcc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0208 	orr.w	r2, r2, #8
 8001dca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	e005      	b.n	8001dea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001de6:	2302      	movs	r3, #2
 8001de8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e02:	f7ff fdaf 	bl	8001964 <HAL_GetTick>
 8001e06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d008      	beq.n	8001e26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2280      	movs	r2, #128	@ 0x80
 8001e18:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e052      	b.n	8001ecc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0216 	bic.w	r2, r2, #22
 8001e34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d103      	bne.n	8001e56 <HAL_DMA_Abort+0x62>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0208 	bic.w	r2, r2, #8
 8001e64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0201 	bic.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e76:	e013      	b.n	8001ea0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e78:	f7ff fd74 	bl	8001964 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b05      	cmp	r3, #5
 8001e84:	d90c      	bls.n	8001ea0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2203      	movs	r2, #3
 8001e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e015      	b.n	8001ecc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1e4      	bne.n	8001e78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb2:	223f      	movs	r2, #63	@ 0x3f
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d004      	beq.n	8001ef2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2280      	movs	r2, #128	@ 0x80
 8001eec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e00c      	b.n	8001f0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2205      	movs	r2, #5
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0201 	bic.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f24:	4b8e      	ldr	r3, [pc, #568]	@ (8002160 <HAL_DMA_IRQHandler+0x248>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a8e      	ldr	r2, [pc, #568]	@ (8002164 <HAL_DMA_IRQHandler+0x24c>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0a9b      	lsrs	r3, r3, #10
 8001f30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f42:	2208      	movs	r2, #8
 8001f44:	409a      	lsls	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d01a      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0204 	bic.w	r2, r2, #4
 8001f6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f70:	2208      	movs	r2, #8
 8001f72:	409a      	lsls	r2, r3
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f7c:	f043 0201 	orr.w	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f88:	2201      	movs	r2, #1
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d012      	beq.n	8001fba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb2:	f043 0202 	orr.w	r2, r3, #2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d012      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00b      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fdc:	2204      	movs	r2, #4
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe8:	f043 0204 	orr.w	r2, r3, #4
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d043      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d03c      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002012:	2210      	movs	r2, #16
 8002014:	409a      	lsls	r2, r3
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d018      	beq.n	800205a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d108      	bne.n	8002048 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d024      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	4798      	blx	r3
 8002046:	e01f      	b.n	8002088 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01b      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
 8002058:	e016      	b.n	8002088 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d107      	bne.n	8002078 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0208 	bic.w	r2, r2, #8
 8002076:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208c:	2220      	movs	r2, #32
 800208e:	409a      	lsls	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 808f 	beq.w	80021b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0310 	and.w	r3, r3, #16
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8087 	beq.w	80021b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ae:	2220      	movs	r2, #32
 80020b0:	409a      	lsls	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b05      	cmp	r3, #5
 80020c0:	d136      	bne.n	8002130 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0216 	bic.w	r2, r2, #22
 80020d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d103      	bne.n	80020f2 <HAL_DMA_IRQHandler+0x1da>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0208 	bic.w	r2, r2, #8
 8002100:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002106:	223f      	movs	r2, #63	@ 0x3f
 8002108:	409a      	lsls	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002122:	2b00      	cmp	r3, #0
 8002124:	d07e      	beq.n	8002224 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4798      	blx	r3
        }
        return;
 800212e:	e079      	b.n	8002224 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d01d      	beq.n	800217a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10d      	bne.n	8002168 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002150:	2b00      	cmp	r3, #0
 8002152:	d031      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
 800215c:	e02c      	b.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
 800215e:	bf00      	nop
 8002160:	20000050 	.word	0x20000050
 8002164:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d023      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
 8002178:	e01e      	b.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10f      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0210 	bic.w	r2, r2, #16
 8002196:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d032      	beq.n	8002226 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d022      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2205      	movs	r2, #5
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	3301      	adds	r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d307      	bcc.n	8002200 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f2      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x2cc>
 80021fe:	e000      	b.n	8002202 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002200:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	4798      	blx	r3
 8002222:	e000      	b.n	8002226 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002224:	bf00      	nop
    }
  }
}
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002248:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b40      	cmp	r3, #64	@ 0x40
 8002258:	d108      	bne.n	800226c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800226a:	e007      	b.n	800227c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	60da      	str	r2, [r3, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	3b10      	subs	r3, #16
 8002298:	4a14      	ldr	r2, [pc, #80]	@ (80022ec <DMA_CalcBaseAndBitshift+0x64>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022a2:	4a13      	ldr	r2, [pc, #76]	@ (80022f0 <DMA_CalcBaseAndBitshift+0x68>)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d909      	bls.n	80022ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022be:	f023 0303 	bic.w	r3, r3, #3
 80022c2:	1d1a      	adds	r2, r3, #4
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80022c8:	e007      	b.n	80022da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022d2:	f023 0303 	bic.w	r3, r3, #3
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	aaaaaaab 	.word	0xaaaaaaab
 80022f0:	08005920 	.word	0x08005920

080022f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002304:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d11f      	bne.n	800234e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d856      	bhi.n	80023c2 <DMA_CheckFifoParam+0xce>
 8002314:	a201      	add	r2, pc, #4	@ (adr r2, 800231c <DMA_CheckFifoParam+0x28>)
 8002316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231a:	bf00      	nop
 800231c:	0800232d 	.word	0x0800232d
 8002320:	0800233f 	.word	0x0800233f
 8002324:	0800232d 	.word	0x0800232d
 8002328:	080023c3 	.word	0x080023c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002330:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d046      	beq.n	80023c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800233c:	e043      	b.n	80023c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002342:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002346:	d140      	bne.n	80023ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800234c:	e03d      	b.n	80023ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002356:	d121      	bne.n	800239c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b03      	cmp	r3, #3
 800235c:	d837      	bhi.n	80023ce <DMA_CheckFifoParam+0xda>
 800235e:	a201      	add	r2, pc, #4	@ (adr r2, 8002364 <DMA_CheckFifoParam+0x70>)
 8002360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002364:	08002375 	.word	0x08002375
 8002368:	0800237b 	.word	0x0800237b
 800236c:	08002375 	.word	0x08002375
 8002370:	0800238d 	.word	0x0800238d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
      break;
 8002378:	e030      	b.n	80023dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d025      	beq.n	80023d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800238a:	e022      	b.n	80023d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002390:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002394:	d11f      	bne.n	80023d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800239a:	e01c      	b.n	80023d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d903      	bls.n	80023aa <DMA_CheckFifoParam+0xb6>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d003      	beq.n	80023b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023a8:	e018      	b.n	80023dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
      break;
 80023ae:	e015      	b.n	80023dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00e      	beq.n	80023da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
      break;
 80023c0:	e00b      	b.n	80023da <DMA_CheckFifoParam+0xe6>
      break;
 80023c2:	bf00      	nop
 80023c4:	e00a      	b.n	80023dc <DMA_CheckFifoParam+0xe8>
      break;
 80023c6:	bf00      	nop
 80023c8:	e008      	b.n	80023dc <DMA_CheckFifoParam+0xe8>
      break;
 80023ca:	bf00      	nop
 80023cc:	e006      	b.n	80023dc <DMA_CheckFifoParam+0xe8>
      break;
 80023ce:	bf00      	nop
 80023d0:	e004      	b.n	80023dc <DMA_CheckFifoParam+0xe8>
      break;
 80023d2:	bf00      	nop
 80023d4:	e002      	b.n	80023dc <DMA_CheckFifoParam+0xe8>
      break;   
 80023d6:	bf00      	nop
 80023d8:	e000      	b.n	80023dc <DMA_CheckFifoParam+0xe8>
      break;
 80023da:	bf00      	nop
    }
  } 
  
  return status; 
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	@ 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	e16b      	b.n	80026e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002408:	2201      	movs	r2, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	429a      	cmp	r2, r3
 8002422:	f040 815a 	bne.w	80026da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d005      	beq.n	800243e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243a:	2b02      	cmp	r3, #2
 800243c:	d130      	bne.n	80024a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	2203      	movs	r2, #3
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002474:	2201      	movs	r2, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 0201 	and.w	r2, r3, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d017      	beq.n	80024dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d123      	bne.n	8002530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	08da      	lsrs	r2, r3, #3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3208      	adds	r2, #8
 80024f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	220f      	movs	r2, #15
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	08da      	lsrs	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3208      	adds	r2, #8
 800252a:	69b9      	ldr	r1, [r7, #24]
 800252c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2203      	movs	r2, #3
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0203 	and.w	r2, r3, #3
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80b4 	beq.w	80026da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b60      	ldr	r3, [pc, #384]	@ (80026f8 <HAL_GPIO_Init+0x30c>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	4a5f      	ldr	r2, [pc, #380]	@ (80026f8 <HAL_GPIO_Init+0x30c>)
 800257c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002580:	6453      	str	r3, [r2, #68]	@ 0x44
 8002582:	4b5d      	ldr	r3, [pc, #372]	@ (80026f8 <HAL_GPIO_Init+0x30c>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800258e:	4a5b      	ldr	r2, [pc, #364]	@ (80026fc <HAL_GPIO_Init+0x310>)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3302      	adds	r3, #2
 8002596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	220f      	movs	r2, #15
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a52      	ldr	r2, [pc, #328]	@ (8002700 <HAL_GPIO_Init+0x314>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d02b      	beq.n	8002612 <HAL_GPIO_Init+0x226>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a51      	ldr	r2, [pc, #324]	@ (8002704 <HAL_GPIO_Init+0x318>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d025      	beq.n	800260e <HAL_GPIO_Init+0x222>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a50      	ldr	r2, [pc, #320]	@ (8002708 <HAL_GPIO_Init+0x31c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01f      	beq.n	800260a <HAL_GPIO_Init+0x21e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4f      	ldr	r2, [pc, #316]	@ (800270c <HAL_GPIO_Init+0x320>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d019      	beq.n	8002606 <HAL_GPIO_Init+0x21a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002710 <HAL_GPIO_Init+0x324>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_GPIO_Init+0x216>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002714 <HAL_GPIO_Init+0x328>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00d      	beq.n	80025fe <HAL_GPIO_Init+0x212>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002718 <HAL_GPIO_Init+0x32c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <HAL_GPIO_Init+0x20e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4b      	ldr	r2, [pc, #300]	@ (800271c <HAL_GPIO_Init+0x330>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_GPIO_Init+0x20a>
 80025f2:	2307      	movs	r3, #7
 80025f4:	e00e      	b.n	8002614 <HAL_GPIO_Init+0x228>
 80025f6:	2308      	movs	r3, #8
 80025f8:	e00c      	b.n	8002614 <HAL_GPIO_Init+0x228>
 80025fa:	2306      	movs	r3, #6
 80025fc:	e00a      	b.n	8002614 <HAL_GPIO_Init+0x228>
 80025fe:	2305      	movs	r3, #5
 8002600:	e008      	b.n	8002614 <HAL_GPIO_Init+0x228>
 8002602:	2304      	movs	r3, #4
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x228>
 8002606:	2303      	movs	r3, #3
 8002608:	e004      	b.n	8002614 <HAL_GPIO_Init+0x228>
 800260a:	2302      	movs	r3, #2
 800260c:	e002      	b.n	8002614 <HAL_GPIO_Init+0x228>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_GPIO_Init+0x228>
 8002612:	2300      	movs	r3, #0
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	f002 0203 	and.w	r2, r2, #3
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	4093      	lsls	r3, r2
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002624:	4935      	ldr	r1, [pc, #212]	@ (80026fc <HAL_GPIO_Init+0x310>)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002632:	4b3b      	ldr	r3, [pc, #236]	@ (8002720 <HAL_GPIO_Init+0x334>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002656:	4a32      	ldr	r2, [pc, #200]	@ (8002720 <HAL_GPIO_Init+0x334>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800265c:	4b30      	ldr	r3, [pc, #192]	@ (8002720 <HAL_GPIO_Init+0x334>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002680:	4a27      	ldr	r2, [pc, #156]	@ (8002720 <HAL_GPIO_Init+0x334>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002686:	4b26      	ldr	r3, [pc, #152]	@ (8002720 <HAL_GPIO_Init+0x334>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002720 <HAL_GPIO_Init+0x334>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <HAL_GPIO_Init+0x334>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d4:	4a12      	ldr	r2, [pc, #72]	@ (8002720 <HAL_GPIO_Init+0x334>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3301      	adds	r3, #1
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	f67f ae90 	bls.w	8002408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3724      	adds	r7, #36	@ 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40013800 	.word	0x40013800
 8002700:	40020000 	.word	0x40020000
 8002704:	40020400 	.word	0x40020400
 8002708:	40020800 	.word	0x40020800
 800270c:	40020c00 	.word	0x40020c00
 8002710:	40021000 	.word	0x40021000
 8002714:	40021400 	.word	0x40021400
 8002718:	40021800 	.word	0x40021800
 800271c:	40021c00 	.word	0x40021c00
 8002720:	40013c00 	.word	0x40013c00

08002724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
 8002730:	4613      	mov	r3, r2
 8002732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002734:	787b      	ldrb	r3, [r7, #1]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002740:	e003      	b.n	800274a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002742:	887b      	ldrh	r3, [r7, #2]
 8002744:	041a      	lsls	r2, r3, #16
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	619a      	str	r2, [r3, #24]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002768:	887a      	ldrh	r2, [r7, #2]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4013      	ands	r3, r2
 800276e:	041a      	lsls	r2, r3, #16
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	43d9      	mvns	r1, r3
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	400b      	ands	r3, r1
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	619a      	str	r2, [r3, #24]
}
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e128      	b.n	80029f0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a90      	ldr	r2, [pc, #576]	@ (80029f8 <HAL_I2S_Init+0x26c>)
 80027b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7fe fe97 	bl	80014ec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2202      	movs	r2, #2
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80027d4:	f023 030f 	bic.w	r3, r3, #15
 80027d8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2202      	movs	r2, #2
 80027e0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d060      	beq.n	80028ac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d102      	bne.n	80027f8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80027f2:	2310      	movs	r3, #16
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	e001      	b.n	80027fc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80027f8:	2320      	movs	r3, #32
 80027fa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b20      	cmp	r3, #32
 8002802:	d802      	bhi.n	800280a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800280a:	2001      	movs	r0, #1
 800280c:	f001 fc12 	bl	8004034 <HAL_RCCEx_GetPeriphCLKFreq>
 8002810:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800281a:	d125      	bne.n	8002868 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d010      	beq.n	8002846 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	fbb2 f2f3 	udiv	r2, r2, r3
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	461a      	mov	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	3305      	adds	r3, #5
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	e01f      	b.n	8002886 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	461a      	mov	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	3305      	adds	r3, #5
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	e00e      	b.n	8002886 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	461a      	mov	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	3305      	adds	r3, #5
 8002884:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4a5c      	ldr	r2, [pc, #368]	@ (80029fc <HAL_I2S_Init+0x270>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	08db      	lsrs	r3, r3, #3
 8002890:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	085b      	lsrs	r3, r3, #1
 80028a2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	e003      	b.n	80028b4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80028ac:	2302      	movs	r3, #2
 80028ae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d902      	bls.n	80028c0 <HAL_I2S_Init+0x134>
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	2bff      	cmp	r3, #255	@ 0xff
 80028be:	d907      	bls.n	80028d0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c4:	f043 0210 	orr.w	r2, r3, #16
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e08f      	b.n	80029f0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	ea42 0103 	orr.w	r1, r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80028ee:	f023 030f 	bic.w	r3, r3, #15
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6851      	ldr	r1, [r2, #4]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6892      	ldr	r2, [r2, #8]
 80028fa:	4311      	orrs	r1, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68d2      	ldr	r2, [r2, #12]
 8002900:	4311      	orrs	r1, r2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6992      	ldr	r2, [r2, #24]
 8002906:	430a      	orrs	r2, r1
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002912:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d161      	bne.n	80029e0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a38      	ldr	r2, [pc, #224]	@ (8002a00 <HAL_I2S_Init+0x274>)
 8002920:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a37      	ldr	r2, [pc, #220]	@ (8002a04 <HAL_I2S_Init+0x278>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d101      	bne.n	8002930 <HAL_I2S_Init+0x1a4>
 800292c:	4b36      	ldr	r3, [pc, #216]	@ (8002a08 <HAL_I2S_Init+0x27c>)
 800292e:	e001      	b.n	8002934 <HAL_I2S_Init+0x1a8>
 8002930:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	4932      	ldr	r1, [pc, #200]	@ (8002a04 <HAL_I2S_Init+0x278>)
 800293c:	428a      	cmp	r2, r1
 800293e:	d101      	bne.n	8002944 <HAL_I2S_Init+0x1b8>
 8002940:	4a31      	ldr	r2, [pc, #196]	@ (8002a08 <HAL_I2S_Init+0x27c>)
 8002942:	e001      	b.n	8002948 <HAL_I2S_Init+0x1bc>
 8002944:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002948:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800294c:	f023 030f 	bic.w	r3, r3, #15
 8002950:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a2b      	ldr	r2, [pc, #172]	@ (8002a04 <HAL_I2S_Init+0x278>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d101      	bne.n	8002960 <HAL_I2S_Init+0x1d4>
 800295c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a08 <HAL_I2S_Init+0x27c>)
 800295e:	e001      	b.n	8002964 <HAL_I2S_Init+0x1d8>
 8002960:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002964:	2202      	movs	r2, #2
 8002966:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a25      	ldr	r2, [pc, #148]	@ (8002a04 <HAL_I2S_Init+0x278>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_I2S_Init+0x1ea>
 8002972:	4b25      	ldr	r3, [pc, #148]	@ (8002a08 <HAL_I2S_Init+0x27c>)
 8002974:	e001      	b.n	800297a <HAL_I2S_Init+0x1ee>
 8002976:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002986:	d003      	beq.n	8002990 <HAL_I2S_Init+0x204>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d103      	bne.n	8002998 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002990:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	e001      	b.n	800299c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80029a6:	4313      	orrs	r3, r2
 80029a8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80029b0:	4313      	orrs	r3, r2
 80029b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80029ba:	4313      	orrs	r3, r2
 80029bc:	b29a      	uxth	r2, r3
 80029be:	897b      	ldrh	r3, [r7, #10]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029c8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002a04 <HAL_I2S_Init+0x278>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d101      	bne.n	80029d8 <HAL_I2S_Init+0x24c>
 80029d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a08 <HAL_I2S_Init+0x27c>)
 80029d6:	e001      	b.n	80029dc <HAL_I2S_Init+0x250>
 80029d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029dc:	897a      	ldrh	r2, [r7, #10]
 80029de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3720      	adds	r7, #32
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	08002b03 	.word	0x08002b03
 80029fc:	cccccccd 	.word	0xcccccccd
 8002a00:	08002f2d 	.word	0x08002f2d
 8002a04:	40003800 	.word	0x40003800
 8002a08:	40003400 	.word	0x40003400

08002a0c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a54:	881a      	ldrh	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	1c9a      	adds	r2, r3, #2
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10e      	bne.n	8002a9c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a8c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ffb8 	bl	8002a0c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab6:	b292      	uxth	r2, r2
 8002ab8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abe:	1c9a      	adds	r2, r3, #2
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10e      	bne.n	8002afa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002aea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff ff93 	bl	8002a20 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b086      	sub	sp, #24
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d13a      	bne.n	8002b94 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d109      	bne.n	8002b3c <I2S_IRQHandler+0x3a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b32:	2b40      	cmp	r3, #64	@ 0x40
 8002b34:	d102      	bne.n	8002b3c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff ffb4 	bl	8002aa4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b42:	2b40      	cmp	r3, #64	@ 0x40
 8002b44:	d126      	bne.n	8002b94 <I2S_IRQHandler+0x92>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d11f      	bne.n	8002b94 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b86:	f043 0202 	orr.w	r2, r3, #2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ff50 	bl	8002a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d136      	bne.n	8002c0e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d109      	bne.n	8002bbe <I2S_IRQHandler+0xbc>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb4:	2b80      	cmp	r3, #128	@ 0x80
 8002bb6:	d102      	bne.n	8002bbe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff ff45 	bl	8002a48 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d122      	bne.n	8002c0e <I2S_IRQHandler+0x10c>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d11b      	bne.n	8002c0e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002be4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c00:	f043 0204 	orr.w	r2, r3, #4
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ff13 	bl	8002a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c0e:	bf00      	nop
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d002      	beq.n	8002c44 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c42:	e160      	b.n	8002f06 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002c50:	887b      	ldrh	r3, [r7, #2]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e15a      	b.n	8002f10 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e152      	b.n	8002f10 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  hi2s->pTxBuffPtr = pTxData;
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d002      	beq.n	8002c96 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2b05      	cmp	r3, #5
 8002c94:	d114      	bne.n	8002cc0 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8002c96:	887b      	ldrh	r3, [r7, #2]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002ca0:	887b      	ldrh	r3, [r7, #2]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002caa:	887b      	ldrh	r3, [r7, #2]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002cb4:	887b      	ldrh	r3, [r7, #2]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	865a      	strh	r2, [r3, #50]	@ 0x32
 8002cbe:	e00b      	b.n	8002cd8 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	887a      	ldrh	r2, [r7, #2]
 8002cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	887a      	ldrh	r2, [r7, #2]
 8002cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = Size;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	887a      	ldrh	r2, [r7, #2]
 8002cd0:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	887a      	ldrh	r2, [r7, #2]
 8002cd6:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2205      	movs	r2, #5
 8002ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cea:	4a8b      	ldr	r2, [pc, #556]	@ (8002f18 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002cec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf2:	4a8a      	ldr	r2, [pc, #552]	@ (8002f1c <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002cf4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfa:	4a89      	ldr	r2, [pc, #548]	@ (8002f20 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002cfc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d02:	2200      	movs	r2, #0
 8002d04:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d12:	4a83      	ldr	r2, [pc, #524]	@ (8002f20 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002d14:	64da      	str	r2, [r3, #76]	@ 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d20:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d28:	d002      	beq.n	8002d30 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d16b      	bne.n	8002e08 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002d30:	1d3b      	adds	r3, r7, #4
 8002d32:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a79      	ldr	r2, [pc, #484]	@ (8002f24 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d101      	bne.n	8002d46 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8002d42:	4b79      	ldr	r3, [pc, #484]	@ (8002f28 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002d44:	e001      	b.n	8002d4a <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8002d46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d4a:	330c      	adds	r3, #12
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f7fe fff4 	bl	8001d44 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a70      	ldr	r2, [pc, #448]	@ (8002f24 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8002d66:	4b70      	ldr	r3, [pc, #448]	@ (8002f28 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002d68:	e001      	b.n	8002d6e <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002d6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	496b      	ldr	r1, [pc, #428]	@ (8002f24 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002d76:	428b      	cmp	r3, r1
 8002d78:	d101      	bne.n	8002d7e <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002d7a:	4b6b      	ldr	r3, [pc, #428]	@ (8002f28 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002d7c:	e001      	b.n	8002d82 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002d7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002d88:	f107 0308 	add.w	r3, r7, #8
 8002d8c:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	6819      	ldr	r1, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f7fe ffce 	bl	8001d44 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0202 	orr.w	r2, r2, #2
 8002db6:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dc6:	f000 809e 	beq.w	8002f06 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a55      	ldr	r2, [pc, #340]	@ (8002f24 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d101      	bne.n	8002dd8 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002dd4:	4b54      	ldr	r3, [pc, #336]	@ (8002f28 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002dd6:	e001      	b.n	8002ddc <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002dd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4950      	ldr	r1, [pc, #320]	@ (8002f24 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002de4:	428b      	cmp	r3, r1
 8002de6:	d101      	bne.n	8002dec <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002de8:	4b4f      	ldr	r3, [pc, #316]	@ (8002f28 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002dea:	e001      	b.n	8002df0 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002dec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002df0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002df4:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e04:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002e06:	e07e      	b.n	8002f06 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e16:	d10a      	bne.n	8002e2e <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e18:	2300      	movs	r3, #0
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002e2e:	f107 0308 	add.w	r3, r7, #8
 8002e32:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	6819      	ldr	r1, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a38      	ldr	r2, [pc, #224]	@ (8002f24 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d101      	bne.n	8002e4a <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8002e46:	4b38      	ldr	r3, [pc, #224]	@ (8002f28 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e48:	e001      	b.n	8002e4e <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002e4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e4e:	330c      	adds	r3, #12
 8002e50:	461a      	mov	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	f7fe ff74 	bl	8001d44 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a30      	ldr	r2, [pc, #192]	@ (8002f24 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d101      	bne.n	8002e6a <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8002e66:	4b30      	ldr	r3, [pc, #192]	@ (8002f28 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e68:	e001      	b.n	8002e6e <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002e6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	492b      	ldr	r1, [pc, #172]	@ (8002f24 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e76:	428b      	cmp	r3, r1
 8002e78:	d101      	bne.n	8002e7e <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002f28 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e7c:	e001      	b.n	8002e82 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002e7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e82:	f042 0202 	orr.w	r2, r2, #2
 8002e86:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	330c      	adds	r3, #12
 8002e96:	4619      	mov	r1, r3
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	f7fe ff4f 	bl	8001d44 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0201 	orr.w	r2, r2, #1
 8002eb4:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ec4:	d01e      	beq.n	8002f04 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a16      	ldr	r2, [pc, #88]	@ (8002f24 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d101      	bne.n	8002ed4 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002ed0:	4b15      	ldr	r3, [pc, #84]	@ (8002f28 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002ed2:	e001      	b.n	8002ed8 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002ed4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4911      	ldr	r1, [pc, #68]	@ (8002f24 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002ee0:	428b      	cmp	r3, r1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002ee4:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002ee6:	e001      	b.n	8002eec <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002ee8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002eec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ef0:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69da      	ldr	r2, [r3, #28]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f00:	61da      	str	r2, [r3, #28]
 8002f02:	e000      	b.n	8002f06 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002f04:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return errorcode;
 8002f0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	080031d5 	.word	0x080031d5
 8002f1c:	080031f1 	.word	0x080031f1
 8002f20:	080032c9 	.word	0x080032c9
 8002f24:	40003800 	.word	0x40003800
 8002f28:	40003400 	.word	0x40003400

08002f2c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a92      	ldr	r2, [pc, #584]	@ (800318c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d101      	bne.n	8002f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002f46:	4b92      	ldr	r3, [pc, #584]	@ (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f48:	e001      	b.n	8002f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002f4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a8b      	ldr	r2, [pc, #556]	@ (800318c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d101      	bne.n	8002f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002f64:	4b8a      	ldr	r3, [pc, #552]	@ (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f66:	e001      	b.n	8002f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002f68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f78:	d004      	beq.n	8002f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f040 8099 	bne.w	80030b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d107      	bne.n	8002f9e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f9d5 	bl	8003348 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d107      	bne.n	8002fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fa78 	bl	80034a8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fbe:	2b40      	cmp	r3, #64	@ 0x40
 8002fc0:	d13a      	bne.n	8003038 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d035      	beq.n	8003038 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a6e      	ldr	r2, [pc, #440]	@ (800318c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d101      	bne.n	8002fda <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002fd6:	4b6e      	ldr	r3, [pc, #440]	@ (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fd8:	e001      	b.n	8002fde <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002fda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4969      	ldr	r1, [pc, #420]	@ (800318c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fe6:	428b      	cmp	r3, r1
 8002fe8:	d101      	bne.n	8002fee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002fea:	4b69      	ldr	r3, [pc, #420]	@ (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fec:	e001      	b.n	8002ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002fee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ff2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ff6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003006:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302a:	f043 0202 	orr.w	r2, r3, #2
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff fcfe 	bl	8002a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b08      	cmp	r3, #8
 8003040:	f040 80c3 	bne.w	80031ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 80bd 	beq.w	80031ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800305e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a49      	ldr	r2, [pc, #292]	@ (800318c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800306a:	4b49      	ldr	r3, [pc, #292]	@ (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800306c:	e001      	b.n	8003072 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800306e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4944      	ldr	r1, [pc, #272]	@ (800318c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800307a:	428b      	cmp	r3, r1
 800307c:	d101      	bne.n	8003082 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800307e:	4b44      	ldr	r3, [pc, #272]	@ (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003080:	e001      	b.n	8003086 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003082:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003086:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800308a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800308c:	2300      	movs	r3, #0
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	f043 0204 	orr.w	r2, r3, #4
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff fcc0 	bl	8002a34 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030b4:	e089      	b.n	80031ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d107      	bne.n	80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f96e 	bl	80033ac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d107      	bne.n	80030ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f9ad 	bl	8003444 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f0:	2b40      	cmp	r3, #64	@ 0x40
 80030f2:	d12f      	bne.n	8003154 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d02a      	beq.n	8003154 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800310c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a1e      	ldr	r2, [pc, #120]	@ (800318c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d101      	bne.n	800311c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003118:	4b1d      	ldr	r3, [pc, #116]	@ (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800311a:	e001      	b.n	8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800311c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4919      	ldr	r1, [pc, #100]	@ (800318c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003128:	428b      	cmp	r3, r1
 800312a:	d101      	bne.n	8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800312c:	4b18      	ldr	r3, [pc, #96]	@ (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800312e:	e001      	b.n	8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003130:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003134:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003138:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003146:	f043 0202 	orr.w	r2, r3, #2
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff fc70 	bl	8002a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b08      	cmp	r3, #8
 800315c:	d136      	bne.n	80031cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b00      	cmp	r3, #0
 8003166:	d031      	beq.n	80031cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a07      	ldr	r2, [pc, #28]	@ (800318c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003172:	4b07      	ldr	r3, [pc, #28]	@ (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003174:	e001      	b.n	800317a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003176:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4902      	ldr	r1, [pc, #8]	@ (800318c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003182:	428b      	cmp	r3, r1
 8003184:	d106      	bne.n	8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003186:	4b02      	ldr	r3, [pc, #8]	@ (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003188:	e006      	b.n	8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800318a:	bf00      	nop
 800318c:	40003800 	.word	0x40003800
 8003190:	40003400 	.word	0x40003400
 8003194:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003198:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800319c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80031ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ba:	f043 0204 	orr.w	r2, r3, #4
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff fc36 	bl	8002a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031c8:	e000      	b.n	80031cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031ca:	bf00      	nop
}
 80031cc:	bf00      	nop
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f7fd feaa 	bl	8000f3c <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80031e8:	bf00      	nop
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fc:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d155      	bne.n	80032b2 <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003214:	d006      	beq.n	8003224 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003220:	2b00      	cmp	r3, #0
 8003222:	d11e      	bne.n	8003262 <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a25      	ldr	r2, [pc, #148]	@ (80032c0 <I2SEx_TxRxDMACplt+0xd0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d101      	bne.n	8003232 <I2SEx_TxRxDMACplt+0x42>
 800322e:	4b25      	ldr	r3, [pc, #148]	@ (80032c4 <I2SEx_TxRxDMACplt+0xd4>)
 8003230:	e001      	b.n	8003236 <I2SEx_TxRxDMACplt+0x46>
 8003232:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4920      	ldr	r1, [pc, #128]	@ (80032c0 <I2SEx_TxRxDMACplt+0xd0>)
 800323e:	428b      	cmp	r3, r1
 8003240:	d101      	bne.n	8003246 <I2SEx_TxRxDMACplt+0x56>
 8003242:	4b20      	ldr	r3, [pc, #128]	@ (80032c4 <I2SEx_TxRxDMACplt+0xd4>)
 8003244:	e001      	b.n	800324a <I2SEx_TxRxDMACplt+0x5a>
 8003246:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0202 	bic.w	r2, r2, #2
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	e01d      	b.n	800329e <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a12      	ldr	r2, [pc, #72]	@ (80032c0 <I2SEx_TxRxDMACplt+0xd0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d101      	bne.n	8003280 <I2SEx_TxRxDMACplt+0x90>
 800327c:	4b11      	ldr	r3, [pc, #68]	@ (80032c4 <I2SEx_TxRxDMACplt+0xd4>)
 800327e:	e001      	b.n	8003284 <I2SEx_TxRxDMACplt+0x94>
 8003280:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	490d      	ldr	r1, [pc, #52]	@ (80032c0 <I2SEx_TxRxDMACplt+0xd0>)
 800328c:	428b      	cmp	r3, r1
 800328e:	d101      	bne.n	8003294 <I2SEx_TxRxDMACplt+0xa4>
 8003290:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <I2SEx_TxRxDMACplt+0xd4>)
 8003292:	e001      	b.n	8003298 <I2SEx_TxRxDMACplt+0xa8>
 8003294:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003298:	f022 0202 	bic.w	r2, r2, #2
 800329c:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->TxXferCount = 0U;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7fd fef6 	bl	80010a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40003800 	.word	0x40003800
 80032c4:	40003400 	.word	0x40003400

080032c8 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0203 	bic.w	r2, r2, #3
 80032e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a15      	ldr	r2, [pc, #84]	@ (8003340 <I2SEx_TxRxDMAError+0x78>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d101      	bne.n	80032f4 <I2SEx_TxRxDMAError+0x2c>
 80032f0:	4b14      	ldr	r3, [pc, #80]	@ (8003344 <I2SEx_TxRxDMAError+0x7c>)
 80032f2:	e001      	b.n	80032f8 <I2SEx_TxRxDMAError+0x30>
 80032f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4910      	ldr	r1, [pc, #64]	@ (8003340 <I2SEx_TxRxDMAError+0x78>)
 8003300:	428b      	cmp	r3, r1
 8003302:	d101      	bne.n	8003308 <I2SEx_TxRxDMAError+0x40>
 8003304:	4b0f      	ldr	r3, [pc, #60]	@ (8003344 <I2SEx_TxRxDMAError+0x7c>)
 8003306:	e001      	b.n	800330c <I2SEx_TxRxDMAError+0x44>
 8003308:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800330c:	f022 0203 	bic.w	r2, r2, #3
 8003310:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332a:	f043 0208 	orr.w	r2, r3, #8
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7ff fb7e 	bl	8002a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40003800 	.word	0x40003800
 8003344:	40003400 	.word	0x40003400

08003348 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	1c99      	adds	r1, r3, #2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6251      	str	r1, [r2, #36]	@ 0x24
 800335a:	881a      	ldrh	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d113      	bne.n	80033a2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003388:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d106      	bne.n	80033a2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7fd fe81 	bl	80010a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	1c99      	adds	r1, r3, #2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6251      	str	r1, [r2, #36]	@ 0x24
 80033be:	8819      	ldrh	r1, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a1d      	ldr	r2, [pc, #116]	@ (800343c <I2SEx_TxISR_I2SExt+0x90>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d101      	bne.n	80033ce <I2SEx_TxISR_I2SExt+0x22>
 80033ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003440 <I2SEx_TxISR_I2SExt+0x94>)
 80033cc:	e001      	b.n	80033d2 <I2SEx_TxISR_I2SExt+0x26>
 80033ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033d2:	460a      	mov	r2, r1
 80033d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d121      	bne.n	8003432 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a12      	ldr	r2, [pc, #72]	@ (800343c <I2SEx_TxISR_I2SExt+0x90>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d101      	bne.n	80033fc <I2SEx_TxISR_I2SExt+0x50>
 80033f8:	4b11      	ldr	r3, [pc, #68]	@ (8003440 <I2SEx_TxISR_I2SExt+0x94>)
 80033fa:	e001      	b.n	8003400 <I2SEx_TxISR_I2SExt+0x54>
 80033fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	490d      	ldr	r1, [pc, #52]	@ (800343c <I2SEx_TxISR_I2SExt+0x90>)
 8003408:	428b      	cmp	r3, r1
 800340a:	d101      	bne.n	8003410 <I2SEx_TxISR_I2SExt+0x64>
 800340c:	4b0c      	ldr	r3, [pc, #48]	@ (8003440 <I2SEx_TxISR_I2SExt+0x94>)
 800340e:	e001      	b.n	8003414 <I2SEx_TxISR_I2SExt+0x68>
 8003410:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003414:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003418:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d106      	bne.n	8003432 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7fd fe39 	bl	80010a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40003800 	.word	0x40003800
 8003440:	40003400 	.word	0x40003400

08003444 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68d8      	ldr	r0, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003456:	1c99      	adds	r1, r3, #2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800345c:	b282      	uxth	r2, r0
 800345e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d113      	bne.n	80034a0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003486:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fd fe02 	bl	80010a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a20      	ldr	r2, [pc, #128]	@ (8003538 <I2SEx_RxISR_I2SExt+0x90>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d101      	bne.n	80034be <I2SEx_RxISR_I2SExt+0x16>
 80034ba:	4b20      	ldr	r3, [pc, #128]	@ (800353c <I2SEx_RxISR_I2SExt+0x94>)
 80034bc:	e001      	b.n	80034c2 <I2SEx_RxISR_I2SExt+0x1a>
 80034be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034c2:	68d8      	ldr	r0, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c8:	1c99      	adds	r1, r3, #2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80034ce:	b282      	uxth	r2, r0
 80034d0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d121      	bne.n	800352e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a12      	ldr	r2, [pc, #72]	@ (8003538 <I2SEx_RxISR_I2SExt+0x90>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d101      	bne.n	80034f8 <I2SEx_RxISR_I2SExt+0x50>
 80034f4:	4b11      	ldr	r3, [pc, #68]	@ (800353c <I2SEx_RxISR_I2SExt+0x94>)
 80034f6:	e001      	b.n	80034fc <I2SEx_RxISR_I2SExt+0x54>
 80034f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	490d      	ldr	r1, [pc, #52]	@ (8003538 <I2SEx_RxISR_I2SExt+0x90>)
 8003504:	428b      	cmp	r3, r1
 8003506:	d101      	bne.n	800350c <I2SEx_RxISR_I2SExt+0x64>
 8003508:	4b0c      	ldr	r3, [pc, #48]	@ (800353c <I2SEx_RxISR_I2SExt+0x94>)
 800350a:	e001      	b.n	8003510 <I2SEx_RxISR_I2SExt+0x68>
 800350c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003510:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003514:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d106      	bne.n	800352e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7fd fdbb 	bl	80010a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40003800 	.word	0x40003800
 800353c:	40003400 	.word	0x40003400

08003540 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e267      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d075      	beq.n	800364a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800355e:	4b88      	ldr	r3, [pc, #544]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b04      	cmp	r3, #4
 8003568:	d00c      	beq.n	8003584 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800356a:	4b85      	ldr	r3, [pc, #532]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003572:	2b08      	cmp	r3, #8
 8003574:	d112      	bne.n	800359c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003576:	4b82      	ldr	r3, [pc, #520]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800357e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003582:	d10b      	bne.n	800359c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003584:	4b7e      	ldr	r3, [pc, #504]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d05b      	beq.n	8003648 <HAL_RCC_OscConfig+0x108>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d157      	bne.n	8003648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e242      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a4:	d106      	bne.n	80035b4 <HAL_RCC_OscConfig+0x74>
 80035a6:	4b76      	ldr	r3, [pc, #472]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a75      	ldr	r2, [pc, #468]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	e01d      	b.n	80035f0 <HAL_RCC_OscConfig+0xb0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCC_OscConfig+0x98>
 80035be:	4b70      	ldr	r3, [pc, #448]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a6f      	ldr	r2, [pc, #444]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a6c      	ldr	r2, [pc, #432]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	e00b      	b.n	80035f0 <HAL_RCC_OscConfig+0xb0>
 80035d8:	4b69      	ldr	r3, [pc, #420]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a68      	ldr	r2, [pc, #416]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	4b66      	ldr	r3, [pc, #408]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a65      	ldr	r2, [pc, #404]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d013      	beq.n	8003620 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fe f9b4 	bl	8001964 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003600:	f7fe f9b0 	bl	8001964 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	@ 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e207      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	4b5b      	ldr	r3, [pc, #364]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0xc0>
 800361e:	e014      	b.n	800364a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003620:	f7fe f9a0 	bl	8001964 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003628:	f7fe f99c 	bl	8001964 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	@ 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e1f3      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363a:	4b51      	ldr	r3, [pc, #324]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0xe8>
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d063      	beq.n	800371e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003656:	4b4a      	ldr	r3, [pc, #296]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00b      	beq.n	800367a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003662:	4b47      	ldr	r3, [pc, #284]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800366a:	2b08      	cmp	r3, #8
 800366c:	d11c      	bne.n	80036a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800366e:	4b44      	ldr	r3, [pc, #272]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d116      	bne.n	80036a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367a:	4b41      	ldr	r3, [pc, #260]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_RCC_OscConfig+0x152>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d001      	beq.n	8003692 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e1c7      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003692:	4b3b      	ldr	r3, [pc, #236]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4937      	ldr	r1, [pc, #220]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a6:	e03a      	b.n	800371e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d020      	beq.n	80036f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b0:	4b34      	ldr	r3, [pc, #208]	@ (8003784 <HAL_RCC_OscConfig+0x244>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b6:	f7fe f955 	bl	8001964 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036be:	f7fe f951 	bl	8001964 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e1a8      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f0      	beq.n	80036be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036dc:	4b28      	ldr	r3, [pc, #160]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4925      	ldr	r1, [pc, #148]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	600b      	str	r3, [r1, #0]
 80036f0:	e015      	b.n	800371e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f2:	4b24      	ldr	r3, [pc, #144]	@ (8003784 <HAL_RCC_OscConfig+0x244>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fe f934 	bl	8001964 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003700:	f7fe f930 	bl	8001964 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e187      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003712:	4b1b      	ldr	r3, [pc, #108]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d036      	beq.n	8003798 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d016      	beq.n	8003760 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003732:	4b15      	ldr	r3, [pc, #84]	@ (8003788 <HAL_RCC_OscConfig+0x248>)
 8003734:	2201      	movs	r2, #1
 8003736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003738:	f7fe f914 	bl	8001964 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003740:	f7fe f910 	bl	8001964 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e167      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003752:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCC_OscConfig+0x200>
 800375e:	e01b      	b.n	8003798 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003760:	4b09      	ldr	r3, [pc, #36]	@ (8003788 <HAL_RCC_OscConfig+0x248>)
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003766:	f7fe f8fd 	bl	8001964 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800376c:	e00e      	b.n	800378c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800376e:	f7fe f8f9 	bl	8001964 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d907      	bls.n	800378c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e150      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
 8003780:	40023800 	.word	0x40023800
 8003784:	42470000 	.word	0x42470000
 8003788:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378c:	4b88      	ldr	r3, [pc, #544]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 800378e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1ea      	bne.n	800376e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8097 	beq.w	80038d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a6:	2300      	movs	r3, #0
 80037a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037aa:	4b81      	ldr	r3, [pc, #516]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10f      	bne.n	80037d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	4b7d      	ldr	r3, [pc, #500]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	4a7c      	ldr	r2, [pc, #496]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 80037c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037c6:	4b7a      	ldr	r3, [pc, #488]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d2:	2301      	movs	r3, #1
 80037d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d6:	4b77      	ldr	r3, [pc, #476]	@ (80039b4 <HAL_RCC_OscConfig+0x474>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d118      	bne.n	8003814 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e2:	4b74      	ldr	r3, [pc, #464]	@ (80039b4 <HAL_RCC_OscConfig+0x474>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a73      	ldr	r2, [pc, #460]	@ (80039b4 <HAL_RCC_OscConfig+0x474>)
 80037e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ee:	f7fe f8b9 	bl	8001964 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f6:	f7fe f8b5 	bl	8001964 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e10c      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	4b6a      	ldr	r3, [pc, #424]	@ (80039b4 <HAL_RCC_OscConfig+0x474>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d106      	bne.n	800382a <HAL_RCC_OscConfig+0x2ea>
 800381c:	4b64      	ldr	r3, [pc, #400]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003820:	4a63      	ldr	r2, [pc, #396]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	6713      	str	r3, [r2, #112]	@ 0x70
 8003828:	e01c      	b.n	8003864 <HAL_RCC_OscConfig+0x324>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b05      	cmp	r3, #5
 8003830:	d10c      	bne.n	800384c <HAL_RCC_OscConfig+0x30c>
 8003832:	4b5f      	ldr	r3, [pc, #380]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003836:	4a5e      	ldr	r2, [pc, #376]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003838:	f043 0304 	orr.w	r3, r3, #4
 800383c:	6713      	str	r3, [r2, #112]	@ 0x70
 800383e:	4b5c      	ldr	r3, [pc, #368]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003842:	4a5b      	ldr	r2, [pc, #364]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6713      	str	r3, [r2, #112]	@ 0x70
 800384a:	e00b      	b.n	8003864 <HAL_RCC_OscConfig+0x324>
 800384c:	4b58      	ldr	r3, [pc, #352]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003850:	4a57      	ldr	r2, [pc, #348]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003852:	f023 0301 	bic.w	r3, r3, #1
 8003856:	6713      	str	r3, [r2, #112]	@ 0x70
 8003858:	4b55      	ldr	r3, [pc, #340]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385c:	4a54      	ldr	r2, [pc, #336]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 800385e:	f023 0304 	bic.w	r3, r3, #4
 8003862:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d015      	beq.n	8003898 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386c:	f7fe f87a 	bl	8001964 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003872:	e00a      	b.n	800388a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003874:	f7fe f876 	bl	8001964 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e0cb      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388a:	4b49      	ldr	r3, [pc, #292]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0ee      	beq.n	8003874 <HAL_RCC_OscConfig+0x334>
 8003896:	e014      	b.n	80038c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003898:	f7fe f864 	bl	8001964 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800389e:	e00a      	b.n	80038b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a0:	f7fe f860 	bl	8001964 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e0b5      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b6:	4b3e      	ldr	r3, [pc, #248]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1ee      	bne.n	80038a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038c2:	7dfb      	ldrb	r3, [r7, #23]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d105      	bne.n	80038d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c8:	4b39      	ldr	r3, [pc, #228]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 80038ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038cc:	4a38      	ldr	r2, [pc, #224]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 80038ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80a1 	beq.w	8003a20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038de:	4b34      	ldr	r3, [pc, #208]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d05c      	beq.n	80039a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d141      	bne.n	8003976 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f2:	4b31      	ldr	r3, [pc, #196]	@ (80039b8 <HAL_RCC_OscConfig+0x478>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fe f834 	bl	8001964 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003900:	f7fe f830 	bl	8001964 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e087      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003912:	4b27      	ldr	r3, [pc, #156]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69da      	ldr	r2, [r3, #28]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	019b      	lsls	r3, r3, #6
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003934:	085b      	lsrs	r3, r3, #1
 8003936:	3b01      	subs	r3, #1
 8003938:	041b      	lsls	r3, r3, #16
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003940:	061b      	lsls	r3, r3, #24
 8003942:	491b      	ldr	r1, [pc, #108]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003944:	4313      	orrs	r3, r2
 8003946:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003948:	4b1b      	ldr	r3, [pc, #108]	@ (80039b8 <HAL_RCC_OscConfig+0x478>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394e:	f7fe f809 	bl	8001964 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003956:	f7fe f805 	bl	8001964 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e05c      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003968:	4b11      	ldr	r3, [pc, #68]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCC_OscConfig+0x416>
 8003974:	e054      	b.n	8003a20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003976:	4b10      	ldr	r3, [pc, #64]	@ (80039b8 <HAL_RCC_OscConfig+0x478>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fd fff2 	bl	8001964 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003984:	f7fd ffee 	bl	8001964 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e045      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003996:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x444>
 80039a2:	e03d      	b.n	8003a20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d107      	bne.n	80039bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e038      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
 80039b0:	40023800 	.word	0x40023800
 80039b4:	40007000 	.word	0x40007000
 80039b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039bc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a2c <HAL_RCC_OscConfig+0x4ec>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d028      	beq.n	8003a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d121      	bne.n	8003a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d11a      	bne.n	8003a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039ec:	4013      	ands	r3, r2
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d111      	bne.n	8003a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a02:	085b      	lsrs	r3, r3, #1
 8003a04:	3b01      	subs	r3, #1
 8003a06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023800 	.word	0x40023800

08003a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0cc      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a44:	4b68      	ldr	r3, [pc, #416]	@ (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d90c      	bls.n	8003a6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	4b65      	ldr	r3, [pc, #404]	@ (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5a:	4b63      	ldr	r3, [pc, #396]	@ (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0b8      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d020      	beq.n	8003aba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a84:	4b59      	ldr	r3, [pc, #356]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4a58      	ldr	r2, [pc, #352]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a9c:	4b53      	ldr	r3, [pc, #332]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	4a52      	ldr	r2, [pc, #328]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003aa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa8:	4b50      	ldr	r3, [pc, #320]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	494d      	ldr	r1, [pc, #308]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d044      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d107      	bne.n	8003ade <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	4b47      	ldr	r3, [pc, #284]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d119      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e07f      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d003      	beq.n	8003aee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d107      	bne.n	8003afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aee:	4b3f      	ldr	r3, [pc, #252]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d109      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e06f      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afe:	4b3b      	ldr	r3, [pc, #236]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e067      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b0e:	4b37      	ldr	r3, [pc, #220]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f023 0203 	bic.w	r2, r3, #3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	4934      	ldr	r1, [pc, #208]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b20:	f7fd ff20 	bl	8001964 <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b28:	f7fd ff1c 	bl	8001964 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e04f      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 020c 	and.w	r2, r3, #12
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d1eb      	bne.n	8003b28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b50:	4b25      	ldr	r3, [pc, #148]	@ (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d20c      	bcs.n	8003b78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5e:	4b22      	ldr	r3, [pc, #136]	@ (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b66:	4b20      	ldr	r3, [pc, #128]	@ (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e032      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b84:	4b19      	ldr	r3, [pc, #100]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4916      	ldr	r1, [pc, #88]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d009      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ba2:	4b12      	ldr	r3, [pc, #72]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	490e      	ldr	r1, [pc, #56]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bb6:	f000 f821 	bl	8003bfc <HAL_RCC_GetSysClockFreq>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	490a      	ldr	r1, [pc, #40]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc8:	5ccb      	ldrb	r3, [r1, r3]
 8003bca:	fa22 f303 	lsr.w	r3, r2, r3
 8003bce:	4a09      	ldr	r2, [pc, #36]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bd2:	4b09      	ldr	r3, [pc, #36]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd fe80 	bl	80018dc <HAL_InitTick>

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40023c00 	.word	0x40023c00
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	08005908 	.word	0x08005908
 8003bf4:	20000050 	.word	0x20000050
 8003bf8:	20000054 	.word	0x20000054

08003bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c00:	b094      	sub	sp, #80	@ 0x50
 8003c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c08:	2300      	movs	r3, #0
 8003c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c14:	4b79      	ldr	r3, [pc, #484]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 030c 	and.w	r3, r3, #12
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d00d      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0x40>
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	f200 80e1 	bhi.w	8003de8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0x34>
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c2e:	e0db      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c30:	4b73      	ldr	r3, [pc, #460]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c32:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003c34:	e0db      	b.n	8003dee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c36:	4b73      	ldr	r3, [pc, #460]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c3a:	e0d8      	b.n	8003dee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c3c:	4b6f      	ldr	r3, [pc, #444]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c44:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c46:	4b6d      	ldr	r3, [pc, #436]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d063      	beq.n	8003d1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c52:	4b6a      	ldr	r3, [pc, #424]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	099b      	lsrs	r3, r3, #6
 8003c58:	2200      	movs	r2, #0
 8003c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c64:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c66:	2300      	movs	r3, #0
 8003c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c6e:	4622      	mov	r2, r4
 8003c70:	462b      	mov	r3, r5
 8003c72:	f04f 0000 	mov.w	r0, #0
 8003c76:	f04f 0100 	mov.w	r1, #0
 8003c7a:	0159      	lsls	r1, r3, #5
 8003c7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c80:	0150      	lsls	r0, r2, #5
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4621      	mov	r1, r4
 8003c88:	1a51      	subs	r1, r2, r1
 8003c8a:	6139      	str	r1, [r7, #16]
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ca0:	4659      	mov	r1, fp
 8003ca2:	018b      	lsls	r3, r1, #6
 8003ca4:	4651      	mov	r1, sl
 8003ca6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003caa:	4651      	mov	r1, sl
 8003cac:	018a      	lsls	r2, r1, #6
 8003cae:	4651      	mov	r1, sl
 8003cb0:	ebb2 0801 	subs.w	r8, r2, r1
 8003cb4:	4659      	mov	r1, fp
 8003cb6:	eb63 0901 	sbc.w	r9, r3, r1
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cce:	4690      	mov	r8, r2
 8003cd0:	4699      	mov	r9, r3
 8003cd2:	4623      	mov	r3, r4
 8003cd4:	eb18 0303 	adds.w	r3, r8, r3
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	462b      	mov	r3, r5
 8003cdc:	eb49 0303 	adc.w	r3, r9, r3
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cee:	4629      	mov	r1, r5
 8003cf0:	024b      	lsls	r3, r1, #9
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	024a      	lsls	r2, r1, #9
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	4619      	mov	r1, r3
 8003d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d02:	2200      	movs	r2, #0
 8003d04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d0c:	f7fc fd92 	bl	8000834 <__aeabi_uldivmod>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4613      	mov	r3, r2
 8003d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d18:	e058      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d1a:	4b38      	ldr	r3, [pc, #224]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	099b      	lsrs	r3, r3, #6
 8003d20:	2200      	movs	r2, #0
 8003d22:	4618      	mov	r0, r3
 8003d24:	4611      	mov	r1, r2
 8003d26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d2a:	623b      	str	r3, [r7, #32]
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d34:	4642      	mov	r2, r8
 8003d36:	464b      	mov	r3, r9
 8003d38:	f04f 0000 	mov.w	r0, #0
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	0159      	lsls	r1, r3, #5
 8003d42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d46:	0150      	lsls	r0, r2, #5
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d52:	4649      	mov	r1, r9
 8003d54:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d6c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d70:	eb63 050b 	sbc.w	r5, r3, fp
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	00eb      	lsls	r3, r5, #3
 8003d7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d82:	00e2      	lsls	r2, r4, #3
 8003d84:	4614      	mov	r4, r2
 8003d86:	461d      	mov	r5, r3
 8003d88:	4643      	mov	r3, r8
 8003d8a:	18e3      	adds	r3, r4, r3
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	464b      	mov	r3, r9
 8003d90:	eb45 0303 	adc.w	r3, r5, r3
 8003d94:	607b      	str	r3, [r7, #4]
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003da2:	4629      	mov	r1, r5
 8003da4:	028b      	lsls	r3, r1, #10
 8003da6:	4621      	mov	r1, r4
 8003da8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dac:	4621      	mov	r1, r4
 8003dae:	028a      	lsls	r2, r1, #10
 8003db0:	4610      	mov	r0, r2
 8003db2:	4619      	mov	r1, r3
 8003db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003db6:	2200      	movs	r2, #0
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	61fa      	str	r2, [r7, #28]
 8003dbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dc0:	f7fc fd38 	bl	8000834 <__aeabi_uldivmod>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4613      	mov	r3, r2
 8003dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	0c1b      	lsrs	r3, r3, #16
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003ddc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003de6:	e002      	b.n	8003dee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003de8:	4b05      	ldr	r3, [pc, #20]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3750      	adds	r7, #80	@ 0x50
 8003df4:	46bd      	mov	sp, r7
 8003df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	00f42400 	.word	0x00f42400
 8003e04:	007a1200 	.word	0x007a1200

08003e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e0c:	4b03      	ldr	r3, [pc, #12]	@ (8003e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	20000050 	.word	0x20000050

08003e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e24:	f7ff fff0 	bl	8003e08 <HAL_RCC_GetHCLKFreq>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	4b05      	ldr	r3, [pc, #20]	@ (8003e40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	0a9b      	lsrs	r3, r3, #10
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	4903      	ldr	r1, [pc, #12]	@ (8003e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e36:	5ccb      	ldrb	r3, [r1, r3]
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40023800 	.word	0x40023800
 8003e44:	08005918 	.word	0x08005918

08003e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e4c:	f7ff ffdc 	bl	8003e08 <HAL_RCC_GetHCLKFreq>
 8003e50:	4602      	mov	r2, r0
 8003e52:	4b05      	ldr	r3, [pc, #20]	@ (8003e68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	0b5b      	lsrs	r3, r3, #13
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	4903      	ldr	r1, [pc, #12]	@ (8003e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e5e:	5ccb      	ldrb	r3, [r1, r3]
 8003e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	08005918 	.word	0x08005918

08003e70 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d035      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e98:	4b62      	ldr	r3, [pc, #392]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e9e:	f7fd fd61 	bl	8001964 <HAL_GetTick>
 8003ea2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ea6:	f7fd fd5d 	bl	8001964 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e0b0      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003eb8:	4b5b      	ldr	r3, [pc, #364]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f0      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	019a      	lsls	r2, r3, #6
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	071b      	lsls	r3, r3, #28
 8003ed0:	4955      	ldr	r1, [pc, #340]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ed8:	4b52      	ldr	r3, [pc, #328]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ede:	f7fd fd41 	bl	8001964 <HAL_GetTick>
 8003ee2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ee6:	f7fd fd3d 	bl	8001964 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e090      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8083 	beq.w	8004018 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	4b44      	ldr	r3, [pc, #272]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	4a43      	ldr	r2, [pc, #268]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f22:	4b41      	ldr	r3, [pc, #260]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a3e      	ldr	r2, [pc, #248]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f3a:	f7fd fd13 	bl	8001964 <HAL_GetTick>
 8003f3e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f40:	e008      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f42:	f7fd fd0f 	bl	8001964 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e062      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f54:	4b35      	ldr	r3, [pc, #212]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f60:	4b31      	ldr	r3, [pc, #196]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f68:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d02f      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d028      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f86:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f88:	4b29      	ldr	r3, [pc, #164]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f8e:	4b28      	ldr	r3, [pc, #160]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f94:	4a24      	ldr	r2, [pc, #144]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f9a:	4b23      	ldr	r3, [pc, #140]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d114      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003fa6:	f7fd fcdd 	bl	8001964 <HAL_GetTick>
 8003faa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fd fcd9 	bl	8001964 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e02a      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc4:	4b18      	ldr	r3, [pc, #96]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0ee      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fdc:	d10d      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003fde:	4b12      	ldr	r3, [pc, #72]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ff2:	490d      	ldr	r1, [pc, #52]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	608b      	str	r3, [r1, #8]
 8003ff8:	e005      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004000:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004004:	6093      	str	r3, [r2, #8]
 8004006:	4b08      	ldr	r3, [pc, #32]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004008:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004012:	4905      	ldr	r1, [pc, #20]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004014:	4313      	orrs	r3, r2
 8004016:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	42470068 	.word	0x42470068
 8004028:	40023800 	.word	0x40023800
 800402c:	40007000 	.word	0x40007000
 8004030:	42470e40 	.word	0x42470e40

08004034 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d13f      	bne.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004052:	4b24      	ldr	r3, [pc, #144]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d006      	beq.n	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004068:	d12f      	bne.n	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800406a:	4b1f      	ldr	r3, [pc, #124]	@ (80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800406c:	617b      	str	r3, [r7, #20]
          break;
 800406e:	e02f      	b.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004070:	4b1c      	ldr	r3, [pc, #112]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004078:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800407c:	d108      	bne.n	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800407e:	4b19      	ldr	r3, [pc, #100]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004086:	4a19      	ldr	r2, [pc, #100]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	e007      	b.n	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004090:	4b14      	ldr	r3, [pc, #80]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004098:	4a15      	ldr	r2, [pc, #84]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800409a:	fbb2 f3f3 	udiv	r3, r2, r3
 800409e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80040a0:	4b10      	ldr	r3, [pc, #64]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80040a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040a6:	099b      	lsrs	r3, r3, #6
 80040a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80040b4:	4b0b      	ldr	r3, [pc, #44]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80040b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ba:	0f1b      	lsrs	r3, r3, #28
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	617b      	str	r3, [r7, #20]
          break;
 80040c8:	e002      	b.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]
          break;
 80040ce:	bf00      	nop
        }
      }
      break;
 80040d0:	e000      	b.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80040d2:	bf00      	nop
    }
  }
  return frequency;
 80040d4:	697b      	ldr	r3, [r7, #20]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800
 80040e8:	00bb8000 	.word	0x00bb8000
 80040ec:	007a1200 	.word	0x007a1200
 80040f0:	00f42400 	.word	0x00f42400

080040f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e042      	b.n	800418c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fd fae2 	bl	80016e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2224      	movs	r2, #36	@ 0x24
 8004124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fd69 	bl	8004c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800414c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800415c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800416c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08a      	sub	sp, #40	@ 0x28
 8004198:	af02      	add	r7, sp, #8
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	4613      	mov	r3, r2
 80041a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d175      	bne.n	80042a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_UART_Transmit+0x2c>
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e06e      	b.n	80042a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2221      	movs	r2, #33	@ 0x21
 80041ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041d2:	f7fd fbc7 	bl	8001964 <HAL_GetTick>
 80041d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	88fa      	ldrh	r2, [r7, #6]
 80041dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	88fa      	ldrh	r2, [r7, #6]
 80041e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ec:	d108      	bne.n	8004200 <HAL_UART_Transmit+0x6c>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d104      	bne.n	8004200 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	61bb      	str	r3, [r7, #24]
 80041fe:	e003      	b.n	8004208 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004204:	2300      	movs	r3, #0
 8004206:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004208:	e02e      	b.n	8004268 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2200      	movs	r2, #0
 8004212:	2180      	movs	r1, #128	@ 0x80
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 fb05 	bl	8004824 <UART_WaitOnFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e03a      	b.n	80042a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10b      	bne.n	800424a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004240:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	3302      	adds	r3, #2
 8004246:	61bb      	str	r3, [r7, #24]
 8004248:	e007      	b.n	800425a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	781a      	ldrb	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	3301      	adds	r3, #1
 8004258:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1cb      	bne.n	800420a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2200      	movs	r2, #0
 800427a:	2140      	movs	r1, #64	@ 0x40
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 fad1 	bl	8004824 <UART_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e006      	b.n	80042a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	e000      	b.n	80042a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80042a0:	2302      	movs	r3, #2
  }
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b0ba      	sub	sp, #232	@ 0xe8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80042d8:	2300      	movs	r3, #0
 80042da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80042ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10f      	bne.n	8004312 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d009      	beq.n	8004312 <HAL_UART_IRQHandler+0x66>
 80042fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fbc2 	bl	8004a94 <UART_Receive_IT>
      return;
 8004310:	e25b      	b.n	80047ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 80de 	beq.w	80044d8 <HAL_UART_IRQHandler+0x22c>
 800431c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d106      	bne.n	8004336 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800432c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80d1 	beq.w	80044d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00b      	beq.n	800435a <HAL_UART_IRQHandler+0xae>
 8004342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004352:	f043 0201 	orr.w	r2, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800435a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <HAL_UART_IRQHandler+0xd2>
 8004366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d005      	beq.n	800437e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004376:	f043 0202 	orr.w	r2, r3, #2
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800437e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00b      	beq.n	80043a2 <HAL_UART_IRQHandler+0xf6>
 800438a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439a:	f043 0204 	orr.w	r2, r3, #4
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d011      	beq.n	80043d2 <HAL_UART_IRQHandler+0x126>
 80043ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d105      	bne.n	80043c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d005      	beq.n	80043d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ca:	f043 0208 	orr.w	r2, r3, #8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 81f2 	beq.w	80047c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_UART_IRQHandler+0x14e>
 80043e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fb4d 	bl	8004a94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004404:	2b40      	cmp	r3, #64	@ 0x40
 8004406:	bf0c      	ite	eq
 8004408:	2301      	moveq	r3, #1
 800440a:	2300      	movne	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d103      	bne.n	8004426 <HAL_UART_IRQHandler+0x17a>
 800441e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d04f      	beq.n	80044c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fa55 	bl	80048d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004436:	2b40      	cmp	r3, #64	@ 0x40
 8004438:	d141      	bne.n	80044be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3314      	adds	r3, #20
 8004440:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004448:	e853 3f00 	ldrex	r3, [r3]
 800444c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004450:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004454:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004458:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3314      	adds	r3, #20
 8004462:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004466:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800446a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004472:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800447e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1d9      	bne.n	800443a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d013      	beq.n	80044b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004492:	4a7e      	ldr	r2, [pc, #504]	@ (800468c <HAL_UART_IRQHandler+0x3e0>)
 8004494:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449a:	4618      	mov	r0, r3
 800449c:	f7fd fd1a 	bl	8001ed4 <HAL_DMA_Abort_IT>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d016      	beq.n	80044d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80044b0:	4610      	mov	r0, r2
 80044b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b4:	e00e      	b.n	80044d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f99e 	bl	80047f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044bc:	e00a      	b.n	80044d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f99a 	bl	80047f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c4:	e006      	b.n	80044d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f996 	bl	80047f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80044d2:	e175      	b.n	80047c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d4:	bf00      	nop
    return;
 80044d6:	e173      	b.n	80047c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044dc:	2b01      	cmp	r3, #1
 80044de:	f040 814f 	bne.w	8004780 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8148 	beq.w	8004780 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8141 	beq.w	8004780 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044fe:	2300      	movs	r3, #0
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800451e:	2b40      	cmp	r3, #64	@ 0x40
 8004520:	f040 80b6 	bne.w	8004690 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004530:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 8145 	beq.w	80047c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800453e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004542:	429a      	cmp	r2, r3
 8004544:	f080 813e 	bcs.w	80047c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800454e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800455a:	f000 8088 	beq.w	800466e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	330c      	adds	r3, #12
 8004564:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004574:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800457c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	330c      	adds	r3, #12
 8004586:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800458a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800458e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004596:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80045a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1d9      	bne.n	800455e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3314      	adds	r3, #20
 80045b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045bc:	f023 0301 	bic.w	r3, r3, #1
 80045c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3314      	adds	r3, #20
 80045ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80045d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80045d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80045e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1e1      	bne.n	80045aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3314      	adds	r3, #20
 80045ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045f0:	e853 3f00 	ldrex	r3, [r3]
 80045f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3314      	adds	r3, #20
 8004606:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800460a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800460c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004610:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004612:	e841 2300 	strex	r3, r2, [r1]
 8004616:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004618:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1e3      	bne.n	80045e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	330c      	adds	r3, #12
 8004632:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004636:	e853 3f00 	ldrex	r3, [r3]
 800463a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800463c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800463e:	f023 0310 	bic.w	r3, r3, #16
 8004642:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	330c      	adds	r3, #12
 800464c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004650:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004652:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004656:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004658:	e841 2300 	strex	r3, r2, [r1]
 800465c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800465e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e3      	bne.n	800462c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004668:	4618      	mov	r0, r3
 800466a:	f7fd fbc3 	bl	8001df4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800467c:	b29b      	uxth	r3, r3
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	b29b      	uxth	r3, r3
 8004682:	4619      	mov	r1, r3
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f8c1 	bl	800480c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800468a:	e09b      	b.n	80047c4 <HAL_UART_IRQHandler+0x518>
 800468c:	0800499d 	.word	0x0800499d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004698:	b29b      	uxth	r3, r3
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 808e 	beq.w	80047c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80046ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8089 	beq.w	80047c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	330c      	adds	r3, #12
 80046bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	330c      	adds	r3, #12
 80046d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80046da:	647a      	str	r2, [r7, #68]	@ 0x44
 80046dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1e3      	bne.n	80046b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3314      	adds	r3, #20
 80046f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	e853 3f00 	ldrex	r3, [r3]
 80046fc:	623b      	str	r3, [r7, #32]
   return(result);
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	f023 0301 	bic.w	r3, r3, #1
 8004704:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3314      	adds	r3, #20
 800470e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004712:	633a      	str	r2, [r7, #48]	@ 0x30
 8004714:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e3      	bne.n	80046ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	330c      	adds	r3, #12
 800473a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	60fb      	str	r3, [r7, #12]
   return(result);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0310 	bic.w	r3, r3, #16
 800474a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	330c      	adds	r3, #12
 8004754:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004758:	61fa      	str	r2, [r7, #28]
 800475a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	69b9      	ldr	r1, [r7, #24]
 800475e:	69fa      	ldr	r2, [r7, #28]
 8004760:	e841 2300 	strex	r3, r2, [r1]
 8004764:	617b      	str	r3, [r7, #20]
   return(result);
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e3      	bne.n	8004734 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004772:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004776:	4619      	mov	r1, r3
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f847 	bl	800480c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800477e:	e023      	b.n	80047c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004788:	2b00      	cmp	r3, #0
 800478a:	d009      	beq.n	80047a0 <HAL_UART_IRQHandler+0x4f4>
 800478c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f913 	bl	80049c4 <UART_Transmit_IT>
    return;
 800479e:	e014      	b.n	80047ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00e      	beq.n	80047ca <HAL_UART_IRQHandler+0x51e>
 80047ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f953 	bl	8004a64 <UART_EndTransmit_IT>
    return;
 80047be:	e004      	b.n	80047ca <HAL_UART_IRQHandler+0x51e>
    return;
 80047c0:	bf00      	nop
 80047c2:	e002      	b.n	80047ca <HAL_UART_IRQHandler+0x51e>
      return;
 80047c4:	bf00      	nop
 80047c6:	e000      	b.n	80047ca <HAL_UART_IRQHandler+0x51e>
      return;
 80047c8:	bf00      	nop
  }
}
 80047ca:	37e8      	adds	r7, #232	@ 0xe8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	4613      	mov	r3, r2
 8004832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004834:	e03b      	b.n	80048ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d037      	beq.n	80048ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483e:	f7fd f891 	bl	8001964 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	6a3a      	ldr	r2, [r7, #32]
 800484a:	429a      	cmp	r2, r3
 800484c:	d302      	bcc.n	8004854 <UART_WaitOnFlagUntilTimeout+0x30>
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e03a      	b.n	80048ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	2b00      	cmp	r3, #0
 8004864:	d023      	beq.n	80048ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b80      	cmp	r3, #128	@ 0x80
 800486a:	d020      	beq.n	80048ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2b40      	cmp	r3, #64	@ 0x40
 8004870:	d01d      	beq.n	80048ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	2b08      	cmp	r3, #8
 800487e:	d116      	bne.n	80048ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 f81d 	bl	80048d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2208      	movs	r2, #8
 80048a0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e00f      	b.n	80048ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4013      	ands	r3, r2
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	bf0c      	ite	eq
 80048be:	2301      	moveq	r3, #1
 80048c0:	2300      	movne	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	461a      	mov	r2, r3
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d0b4      	beq.n	8004836 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b095      	sub	sp, #84	@ 0x54
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	330c      	adds	r3, #12
 80048e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	330c      	adds	r3, #12
 80048fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8004900:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004904:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800490c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e5      	bne.n	80048de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3314      	adds	r3, #20
 8004918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	61fb      	str	r3, [r7, #28]
   return(result);
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3314      	adds	r3, #20
 8004930:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004932:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004934:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e5      	bne.n	8004912 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494a:	2b01      	cmp	r3, #1
 800494c:	d119      	bne.n	8004982 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	330c      	adds	r3, #12
 8004954:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	e853 3f00 	ldrex	r3, [r3]
 800495c:	60bb      	str	r3, [r7, #8]
   return(result);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f023 0310 	bic.w	r3, r3, #16
 8004964:	647b      	str	r3, [r7, #68]	@ 0x44
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	330c      	adds	r3, #12
 800496c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800496e:	61ba      	str	r2, [r7, #24]
 8004970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004972:	6979      	ldr	r1, [r7, #20]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	e841 2300 	strex	r3, r2, [r1]
 800497a:	613b      	str	r3, [r7, #16]
   return(result);
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1e5      	bne.n	800494e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004990:	bf00      	nop
 8004992:	3754      	adds	r7, #84	@ 0x54
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f7ff ff1e 	bl	80047f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049bc:	bf00      	nop
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b21      	cmp	r3, #33	@ 0x21
 80049d6:	d13e      	bne.n	8004a56 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049e0:	d114      	bne.n	8004a0c <UART_Transmit_IT+0x48>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d110      	bne.n	8004a0c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	1c9a      	adds	r2, r3, #2
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	621a      	str	r2, [r3, #32]
 8004a0a:	e008      	b.n	8004a1e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	1c59      	adds	r1, r3, #1
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6211      	str	r1, [r2, #32]
 8004a16:	781a      	ldrb	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10f      	bne.n	8004a52 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e000      	b.n	8004a58 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
  }
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff fea3 	bl	80047d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08c      	sub	sp, #48	@ 0x30
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b22      	cmp	r3, #34	@ 0x22
 8004aa6:	f040 80ae 	bne.w	8004c06 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ab2:	d117      	bne.n	8004ae4 <UART_Receive_IT+0x50>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d113      	bne.n	8004ae4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004abc:	2300      	movs	r3, #0
 8004abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004adc:	1c9a      	adds	r2, r3, #2
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ae2:	e026      	b.n	8004b32 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004af6:	d007      	beq.n	8004b08 <UART_Receive_IT+0x74>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10a      	bne.n	8004b16 <UART_Receive_IT+0x82>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d106      	bne.n	8004b16 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	e008      	b.n	8004b28 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b26:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d15d      	bne.n	8004c02 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0220 	bic.w	r2, r2, #32
 8004b54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695a      	ldr	r2, [r3, #20]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0201 	bic.w	r2, r2, #1
 8004b74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d135      	bne.n	8004bf8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	330c      	adds	r3, #12
 8004b98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f023 0310 	bic.w	r3, r3, #16
 8004ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	330c      	adds	r3, #12
 8004bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bb2:	623a      	str	r2, [r7, #32]
 8004bb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	69f9      	ldr	r1, [r7, #28]
 8004bb8:	6a3a      	ldr	r2, [r7, #32]
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e5      	bne.n	8004b92 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b10      	cmp	r3, #16
 8004bd2:	d10a      	bne.n	8004bea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff fe0b 	bl	800480c <HAL_UARTEx_RxEventCallback>
 8004bf6:	e002      	b.n	8004bfe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff fdf3 	bl	80047e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e002      	b.n	8004c08 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e000      	b.n	8004c08 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c06:	2302      	movs	r3, #2
  }
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3730      	adds	r7, #48	@ 0x30
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c14:	b0c0      	sub	sp, #256	@ 0x100
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2c:	68d9      	ldr	r1, [r3, #12]
 8004c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	ea40 0301 	orr.w	r3, r0, r1
 8004c38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c68:	f021 010c 	bic.w	r1, r1, #12
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c76:	430b      	orrs	r3, r1
 8004c78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8a:	6999      	ldr	r1, [r3, #24]
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	ea40 0301 	orr.w	r3, r0, r1
 8004c96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4b8f      	ldr	r3, [pc, #572]	@ (8004edc <UART_SetConfig+0x2cc>)
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d005      	beq.n	8004cb0 <UART_SetConfig+0xa0>
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4b8d      	ldr	r3, [pc, #564]	@ (8004ee0 <UART_SetConfig+0x2d0>)
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d104      	bne.n	8004cba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cb0:	f7ff f8ca 	bl	8003e48 <HAL_RCC_GetPCLK2Freq>
 8004cb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004cb8:	e003      	b.n	8004cc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cba:	f7ff f8b1 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 8004cbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ccc:	f040 810c 	bne.w	8004ee8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004cde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ce2:	4622      	mov	r2, r4
 8004ce4:	462b      	mov	r3, r5
 8004ce6:	1891      	adds	r1, r2, r2
 8004ce8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004cea:	415b      	adcs	r3, r3
 8004cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	eb12 0801 	adds.w	r8, r2, r1
 8004cf8:	4629      	mov	r1, r5
 8004cfa:	eb43 0901 	adc.w	r9, r3, r1
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d12:	4690      	mov	r8, r2
 8004d14:	4699      	mov	r9, r3
 8004d16:	4623      	mov	r3, r4
 8004d18:	eb18 0303 	adds.w	r3, r8, r3
 8004d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d20:	462b      	mov	r3, r5
 8004d22:	eb49 0303 	adc.w	r3, r9, r3
 8004d26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d3e:	460b      	mov	r3, r1
 8004d40:	18db      	adds	r3, r3, r3
 8004d42:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d44:	4613      	mov	r3, r2
 8004d46:	eb42 0303 	adc.w	r3, r2, r3
 8004d4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d54:	f7fb fd6e 	bl	8000834 <__aeabi_uldivmod>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4b61      	ldr	r3, [pc, #388]	@ (8004ee4 <UART_SetConfig+0x2d4>)
 8004d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	011c      	lsls	r4, r3, #4
 8004d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d78:	4642      	mov	r2, r8
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	1891      	adds	r1, r2, r2
 8004d7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d80:	415b      	adcs	r3, r3
 8004d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d88:	4641      	mov	r1, r8
 8004d8a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d8e:	4649      	mov	r1, r9
 8004d90:	eb43 0b01 	adc.w	fp, r3, r1
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004da0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004da8:	4692      	mov	sl, r2
 8004daa:	469b      	mov	fp, r3
 8004dac:	4643      	mov	r3, r8
 8004dae:	eb1a 0303 	adds.w	r3, sl, r3
 8004db2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004db6:	464b      	mov	r3, r9
 8004db8:	eb4b 0303 	adc.w	r3, fp, r3
 8004dbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004dcc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004dd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	18db      	adds	r3, r3, r3
 8004dd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dda:	4613      	mov	r3, r2
 8004ddc:	eb42 0303 	adc.w	r3, r2, r3
 8004de0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004de2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004de6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004dea:	f7fb fd23 	bl	8000834 <__aeabi_uldivmod>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4611      	mov	r1, r2
 8004df4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ee4 <UART_SetConfig+0x2d4>)
 8004df6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	2264      	movs	r2, #100	@ 0x64
 8004dfe:	fb02 f303 	mul.w	r3, r2, r3
 8004e02:	1acb      	subs	r3, r1, r3
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e0a:	4b36      	ldr	r3, [pc, #216]	@ (8004ee4 <UART_SetConfig+0x2d4>)
 8004e0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e18:	441c      	add	r4, r3
 8004e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e2c:	4642      	mov	r2, r8
 8004e2e:	464b      	mov	r3, r9
 8004e30:	1891      	adds	r1, r2, r2
 8004e32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e34:	415b      	adcs	r3, r3
 8004e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e3c:	4641      	mov	r1, r8
 8004e3e:	1851      	adds	r1, r2, r1
 8004e40:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e42:	4649      	mov	r1, r9
 8004e44:	414b      	adcs	r3, r1
 8004e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e54:	4659      	mov	r1, fp
 8004e56:	00cb      	lsls	r3, r1, #3
 8004e58:	4651      	mov	r1, sl
 8004e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e5e:	4651      	mov	r1, sl
 8004e60:	00ca      	lsls	r2, r1, #3
 8004e62:	4610      	mov	r0, r2
 8004e64:	4619      	mov	r1, r3
 8004e66:	4603      	mov	r3, r0
 8004e68:	4642      	mov	r2, r8
 8004e6a:	189b      	adds	r3, r3, r2
 8004e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e70:	464b      	mov	r3, r9
 8004e72:	460a      	mov	r2, r1
 8004e74:	eb42 0303 	adc.w	r3, r2, r3
 8004e78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e90:	460b      	mov	r3, r1
 8004e92:	18db      	adds	r3, r3, r3
 8004e94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e96:	4613      	mov	r3, r2
 8004e98:	eb42 0303 	adc.w	r3, r2, r3
 8004e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ea2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ea6:	f7fb fcc5 	bl	8000834 <__aeabi_uldivmod>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee4 <UART_SetConfig+0x2d4>)
 8004eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	2164      	movs	r1, #100	@ 0x64
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	3332      	adds	r3, #50	@ 0x32
 8004ec2:	4a08      	ldr	r2, [pc, #32]	@ (8004ee4 <UART_SetConfig+0x2d4>)
 8004ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	f003 0207 	and.w	r2, r3, #7
 8004ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4422      	add	r2, r4
 8004ed6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ed8:	e106      	b.n	80050e8 <UART_SetConfig+0x4d8>
 8004eda:	bf00      	nop
 8004edc:	40011000 	.word	0x40011000
 8004ee0:	40011400 	.word	0x40011400
 8004ee4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ef2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ef6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004efa:	4642      	mov	r2, r8
 8004efc:	464b      	mov	r3, r9
 8004efe:	1891      	adds	r1, r2, r2
 8004f00:	6239      	str	r1, [r7, #32]
 8004f02:	415b      	adcs	r3, r3
 8004f04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f0a:	4641      	mov	r1, r8
 8004f0c:	1854      	adds	r4, r2, r1
 8004f0e:	4649      	mov	r1, r9
 8004f10:	eb43 0501 	adc.w	r5, r3, r1
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	00eb      	lsls	r3, r5, #3
 8004f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f22:	00e2      	lsls	r2, r4, #3
 8004f24:	4614      	mov	r4, r2
 8004f26:	461d      	mov	r5, r3
 8004f28:	4643      	mov	r3, r8
 8004f2a:	18e3      	adds	r3, r4, r3
 8004f2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f30:	464b      	mov	r3, r9
 8004f32:	eb45 0303 	adc.w	r3, r5, r3
 8004f36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f56:	4629      	mov	r1, r5
 8004f58:	008b      	lsls	r3, r1, #2
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f60:	4621      	mov	r1, r4
 8004f62:	008a      	lsls	r2, r1, #2
 8004f64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f68:	f7fb fc64 	bl	8000834 <__aeabi_uldivmod>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4b60      	ldr	r3, [pc, #384]	@ (80050f4 <UART_SetConfig+0x4e4>)
 8004f72:	fba3 2302 	umull	r2, r3, r3, r2
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	011c      	lsls	r4, r3, #4
 8004f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	464b      	mov	r3, r9
 8004f90:	1891      	adds	r1, r2, r2
 8004f92:	61b9      	str	r1, [r7, #24]
 8004f94:	415b      	adcs	r3, r3
 8004f96:	61fb      	str	r3, [r7, #28]
 8004f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f9c:	4641      	mov	r1, r8
 8004f9e:	1851      	adds	r1, r2, r1
 8004fa0:	6139      	str	r1, [r7, #16]
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	414b      	adcs	r3, r1
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fb4:	4659      	mov	r1, fp
 8004fb6:	00cb      	lsls	r3, r1, #3
 8004fb8:	4651      	mov	r1, sl
 8004fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fbe:	4651      	mov	r1, sl
 8004fc0:	00ca      	lsls	r2, r1, #3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	4642      	mov	r2, r8
 8004fca:	189b      	adds	r3, r3, r2
 8004fcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fd0:	464b      	mov	r3, r9
 8004fd2:	460a      	mov	r2, r1
 8004fd4:	eb42 0303 	adc.w	r3, r2, r3
 8004fd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fe6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	008b      	lsls	r3, r1, #2
 8004ff8:	4641      	mov	r1, r8
 8004ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ffe:	4641      	mov	r1, r8
 8005000:	008a      	lsls	r2, r1, #2
 8005002:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005006:	f7fb fc15 	bl	8000834 <__aeabi_uldivmod>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4611      	mov	r1, r2
 8005010:	4b38      	ldr	r3, [pc, #224]	@ (80050f4 <UART_SetConfig+0x4e4>)
 8005012:	fba3 2301 	umull	r2, r3, r3, r1
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	2264      	movs	r2, #100	@ 0x64
 800501a:	fb02 f303 	mul.w	r3, r2, r3
 800501e:	1acb      	subs	r3, r1, r3
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	3332      	adds	r3, #50	@ 0x32
 8005024:	4a33      	ldr	r2, [pc, #204]	@ (80050f4 <UART_SetConfig+0x4e4>)
 8005026:	fba2 2303 	umull	r2, r3, r2, r3
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005030:	441c      	add	r4, r3
 8005032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005036:	2200      	movs	r2, #0
 8005038:	673b      	str	r3, [r7, #112]	@ 0x70
 800503a:	677a      	str	r2, [r7, #116]	@ 0x74
 800503c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005040:	4642      	mov	r2, r8
 8005042:	464b      	mov	r3, r9
 8005044:	1891      	adds	r1, r2, r2
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	415b      	adcs	r3, r3
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005050:	4641      	mov	r1, r8
 8005052:	1851      	adds	r1, r2, r1
 8005054:	6039      	str	r1, [r7, #0]
 8005056:	4649      	mov	r1, r9
 8005058:	414b      	adcs	r3, r1
 800505a:	607b      	str	r3, [r7, #4]
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005068:	4659      	mov	r1, fp
 800506a:	00cb      	lsls	r3, r1, #3
 800506c:	4651      	mov	r1, sl
 800506e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005072:	4651      	mov	r1, sl
 8005074:	00ca      	lsls	r2, r1, #3
 8005076:	4610      	mov	r0, r2
 8005078:	4619      	mov	r1, r3
 800507a:	4603      	mov	r3, r0
 800507c:	4642      	mov	r2, r8
 800507e:	189b      	adds	r3, r3, r2
 8005080:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005082:	464b      	mov	r3, r9
 8005084:	460a      	mov	r2, r1
 8005086:	eb42 0303 	adc.w	r3, r2, r3
 800508a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800508c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	663b      	str	r3, [r7, #96]	@ 0x60
 8005096:	667a      	str	r2, [r7, #100]	@ 0x64
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	f04f 0300 	mov.w	r3, #0
 80050a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80050a4:	4649      	mov	r1, r9
 80050a6:	008b      	lsls	r3, r1, #2
 80050a8:	4641      	mov	r1, r8
 80050aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ae:	4641      	mov	r1, r8
 80050b0:	008a      	lsls	r2, r1, #2
 80050b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80050b6:	f7fb fbbd 	bl	8000834 <__aeabi_uldivmod>
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	4b0d      	ldr	r3, [pc, #52]	@ (80050f4 <UART_SetConfig+0x4e4>)
 80050c0:	fba3 1302 	umull	r1, r3, r3, r2
 80050c4:	095b      	lsrs	r3, r3, #5
 80050c6:	2164      	movs	r1, #100	@ 0x64
 80050c8:	fb01 f303 	mul.w	r3, r1, r3
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	3332      	adds	r3, #50	@ 0x32
 80050d2:	4a08      	ldr	r2, [pc, #32]	@ (80050f4 <UART_SetConfig+0x4e4>)
 80050d4:	fba2 2303 	umull	r2, r3, r2, r3
 80050d8:	095b      	lsrs	r3, r3, #5
 80050da:	f003 020f 	and.w	r2, r3, #15
 80050de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4422      	add	r2, r4
 80050e6:	609a      	str	r2, [r3, #8]
}
 80050e8:	bf00      	nop
 80050ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80050ee:	46bd      	mov	sp, r7
 80050f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050f4:	51eb851f 	.word	0x51eb851f

080050f8 <memset>:
 80050f8:	4402      	add	r2, r0
 80050fa:	4603      	mov	r3, r0
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d100      	bne.n	8005102 <memset+0xa>
 8005100:	4770      	bx	lr
 8005102:	f803 1b01 	strb.w	r1, [r3], #1
 8005106:	e7f9      	b.n	80050fc <memset+0x4>

08005108 <__errno>:
 8005108:	4b01      	ldr	r3, [pc, #4]	@ (8005110 <__errno+0x8>)
 800510a:	6818      	ldr	r0, [r3, #0]
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	2000005c 	.word	0x2000005c

08005114 <__libc_init_array>:
 8005114:	b570      	push	{r4, r5, r6, lr}
 8005116:	4d0d      	ldr	r5, [pc, #52]	@ (800514c <__libc_init_array+0x38>)
 8005118:	4c0d      	ldr	r4, [pc, #52]	@ (8005150 <__libc_init_array+0x3c>)
 800511a:	1b64      	subs	r4, r4, r5
 800511c:	10a4      	asrs	r4, r4, #2
 800511e:	2600      	movs	r6, #0
 8005120:	42a6      	cmp	r6, r4
 8005122:	d109      	bne.n	8005138 <__libc_init_array+0x24>
 8005124:	4d0b      	ldr	r5, [pc, #44]	@ (8005154 <__libc_init_array+0x40>)
 8005126:	4c0c      	ldr	r4, [pc, #48]	@ (8005158 <__libc_init_array+0x44>)
 8005128:	f000 fbe2 	bl	80058f0 <_init>
 800512c:	1b64      	subs	r4, r4, r5
 800512e:	10a4      	asrs	r4, r4, #2
 8005130:	2600      	movs	r6, #0
 8005132:	42a6      	cmp	r6, r4
 8005134:	d105      	bne.n	8005142 <__libc_init_array+0x2e>
 8005136:	bd70      	pop	{r4, r5, r6, pc}
 8005138:	f855 3b04 	ldr.w	r3, [r5], #4
 800513c:	4798      	blx	r3
 800513e:	3601      	adds	r6, #1
 8005140:	e7ee      	b.n	8005120 <__libc_init_array+0xc>
 8005142:	f855 3b04 	ldr.w	r3, [r5], #4
 8005146:	4798      	blx	r3
 8005148:	3601      	adds	r6, #1
 800514a:	e7f2      	b.n	8005132 <__libc_init_array+0x1e>
 800514c:	08005948 	.word	0x08005948
 8005150:	08005948 	.word	0x08005948
 8005154:	08005948 	.word	0x08005948
 8005158:	0800594c 	.word	0x0800594c

0800515c <powf>:
 800515c:	b508      	push	{r3, lr}
 800515e:	ed2d 8b04 	vpush	{d8-d9}
 8005162:	eeb0 8a60 	vmov.f32	s16, s1
 8005166:	eeb0 9a40 	vmov.f32	s18, s0
 800516a:	f000 f859 	bl	8005220 <__ieee754_powf>
 800516e:	eeb4 8a48 	vcmp.f32	s16, s16
 8005172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005176:	eef0 8a40 	vmov.f32	s17, s0
 800517a:	d63e      	bvs.n	80051fa <powf+0x9e>
 800517c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8005180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005184:	d112      	bne.n	80051ac <powf+0x50>
 8005186:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800518a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518e:	d039      	beq.n	8005204 <powf+0xa8>
 8005190:	eeb0 0a48 	vmov.f32	s0, s16
 8005194:	f000 f839 	bl	800520a <finitef>
 8005198:	b378      	cbz	r0, 80051fa <powf+0x9e>
 800519a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800519e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a2:	d52a      	bpl.n	80051fa <powf+0x9e>
 80051a4:	f7ff ffb0 	bl	8005108 <__errno>
 80051a8:	2322      	movs	r3, #34	@ 0x22
 80051aa:	e014      	b.n	80051d6 <powf+0x7a>
 80051ac:	f000 f82d 	bl	800520a <finitef>
 80051b0:	b998      	cbnz	r0, 80051da <powf+0x7e>
 80051b2:	eeb0 0a49 	vmov.f32	s0, s18
 80051b6:	f000 f828 	bl	800520a <finitef>
 80051ba:	b170      	cbz	r0, 80051da <powf+0x7e>
 80051bc:	eeb0 0a48 	vmov.f32	s0, s16
 80051c0:	f000 f823 	bl	800520a <finitef>
 80051c4:	b148      	cbz	r0, 80051da <powf+0x7e>
 80051c6:	eef4 8a68 	vcmp.f32	s17, s17
 80051ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ce:	d7e9      	bvc.n	80051a4 <powf+0x48>
 80051d0:	f7ff ff9a 	bl	8005108 <__errno>
 80051d4:	2321      	movs	r3, #33	@ 0x21
 80051d6:	6003      	str	r3, [r0, #0]
 80051d8:	e00f      	b.n	80051fa <powf+0x9e>
 80051da:	eef5 8a40 	vcmp.f32	s17, #0.0
 80051de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e2:	d10a      	bne.n	80051fa <powf+0x9e>
 80051e4:	eeb0 0a49 	vmov.f32	s0, s18
 80051e8:	f000 f80f 	bl	800520a <finitef>
 80051ec:	b128      	cbz	r0, 80051fa <powf+0x9e>
 80051ee:	eeb0 0a48 	vmov.f32	s0, s16
 80051f2:	f000 f80a 	bl	800520a <finitef>
 80051f6:	2800      	cmp	r0, #0
 80051f8:	d1d4      	bne.n	80051a4 <powf+0x48>
 80051fa:	eeb0 0a68 	vmov.f32	s0, s17
 80051fe:	ecbd 8b04 	vpop	{d8-d9}
 8005202:	bd08      	pop	{r3, pc}
 8005204:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8005208:	e7f7      	b.n	80051fa <powf+0x9e>

0800520a <finitef>:
 800520a:	ee10 3a10 	vmov	r3, s0
 800520e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8005212:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8005216:	bfac      	ite	ge
 8005218:	2000      	movge	r0, #0
 800521a:	2001      	movlt	r0, #1
 800521c:	4770      	bx	lr
	...

08005220 <__ieee754_powf>:
 8005220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005224:	ee10 4a90 	vmov	r4, s1
 8005228:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800522c:	ed2d 8b02 	vpush	{d8}
 8005230:	ee10 6a10 	vmov	r6, s0
 8005234:	eeb0 8a40 	vmov.f32	s16, s0
 8005238:	eef0 8a60 	vmov.f32	s17, s1
 800523c:	d10c      	bne.n	8005258 <__ieee754_powf+0x38>
 800523e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8005242:	0076      	lsls	r6, r6, #1
 8005244:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8005248:	f240 829c 	bls.w	8005784 <__ieee754_powf+0x564>
 800524c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8005250:	ecbd 8b02 	vpop	{d8}
 8005254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005258:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800525c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8005260:	d802      	bhi.n	8005268 <__ieee754_powf+0x48>
 8005262:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8005266:	d908      	bls.n	800527a <__ieee754_powf+0x5a>
 8005268:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800526c:	d1ee      	bne.n	800524c <__ieee754_powf+0x2c>
 800526e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8005272:	0064      	lsls	r4, r4, #1
 8005274:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8005278:	e7e6      	b.n	8005248 <__ieee754_powf+0x28>
 800527a:	2e00      	cmp	r6, #0
 800527c:	da1e      	bge.n	80052bc <__ieee754_powf+0x9c>
 800527e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8005282:	d22b      	bcs.n	80052dc <__ieee754_powf+0xbc>
 8005284:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8005288:	d332      	bcc.n	80052f0 <__ieee754_powf+0xd0>
 800528a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800528e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8005292:	fa49 f503 	asr.w	r5, r9, r3
 8005296:	fa05 f303 	lsl.w	r3, r5, r3
 800529a:	454b      	cmp	r3, r9
 800529c:	d126      	bne.n	80052ec <__ieee754_powf+0xcc>
 800529e:	f005 0501 	and.w	r5, r5, #1
 80052a2:	f1c5 0502 	rsb	r5, r5, #2
 80052a6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80052aa:	d122      	bne.n	80052f2 <__ieee754_powf+0xd2>
 80052ac:	2c00      	cmp	r4, #0
 80052ae:	f280 826f 	bge.w	8005790 <__ieee754_powf+0x570>
 80052b2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80052b6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80052ba:	e7c9      	b.n	8005250 <__ieee754_powf+0x30>
 80052bc:	2500      	movs	r5, #0
 80052be:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80052c2:	d1f0      	bne.n	80052a6 <__ieee754_powf+0x86>
 80052c4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80052c8:	f000 825c 	beq.w	8005784 <__ieee754_powf+0x564>
 80052cc:	d908      	bls.n	80052e0 <__ieee754_powf+0xc0>
 80052ce:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8005630 <__ieee754_powf+0x410>
 80052d2:	2c00      	cmp	r4, #0
 80052d4:	bfa8      	it	ge
 80052d6:	eeb0 0a68 	vmovge.f32	s0, s17
 80052da:	e7b9      	b.n	8005250 <__ieee754_powf+0x30>
 80052dc:	2502      	movs	r5, #2
 80052de:	e7ee      	b.n	80052be <__ieee754_powf+0x9e>
 80052e0:	2c00      	cmp	r4, #0
 80052e2:	f280 8252 	bge.w	800578a <__ieee754_powf+0x56a>
 80052e6:	eeb1 0a68 	vneg.f32	s0, s17
 80052ea:	e7b1      	b.n	8005250 <__ieee754_powf+0x30>
 80052ec:	2500      	movs	r5, #0
 80052ee:	e7da      	b.n	80052a6 <__ieee754_powf+0x86>
 80052f0:	2500      	movs	r5, #0
 80052f2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80052f6:	d102      	bne.n	80052fe <__ieee754_powf+0xde>
 80052f8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80052fc:	e7a8      	b.n	8005250 <__ieee754_powf+0x30>
 80052fe:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8005302:	d109      	bne.n	8005318 <__ieee754_powf+0xf8>
 8005304:	2e00      	cmp	r6, #0
 8005306:	db07      	blt.n	8005318 <__ieee754_powf+0xf8>
 8005308:	eeb0 0a48 	vmov.f32	s0, s16
 800530c:	ecbd 8b02 	vpop	{d8}
 8005310:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005314:	f000 bae8 	b.w	80058e8 <__ieee754_sqrtf>
 8005318:	eeb0 0a48 	vmov.f32	s0, s16
 800531c:	f000 fa50 	bl	80057c0 <fabsf>
 8005320:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8005324:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8005328:	4647      	mov	r7, r8
 800532a:	d002      	beq.n	8005332 <__ieee754_powf+0x112>
 800532c:	f1b8 0f00 	cmp.w	r8, #0
 8005330:	d117      	bne.n	8005362 <__ieee754_powf+0x142>
 8005332:	2c00      	cmp	r4, #0
 8005334:	bfbc      	itt	lt
 8005336:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800533a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800533e:	2e00      	cmp	r6, #0
 8005340:	da86      	bge.n	8005250 <__ieee754_powf+0x30>
 8005342:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8005346:	ea58 0805 	orrs.w	r8, r8, r5
 800534a:	d104      	bne.n	8005356 <__ieee754_powf+0x136>
 800534c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005350:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8005354:	e77c      	b.n	8005250 <__ieee754_powf+0x30>
 8005356:	2d01      	cmp	r5, #1
 8005358:	f47f af7a 	bne.w	8005250 <__ieee754_powf+0x30>
 800535c:	eeb1 0a40 	vneg.f32	s0, s0
 8005360:	e776      	b.n	8005250 <__ieee754_powf+0x30>
 8005362:	0ff0      	lsrs	r0, r6, #31
 8005364:	3801      	subs	r0, #1
 8005366:	ea55 0300 	orrs.w	r3, r5, r0
 800536a:	d104      	bne.n	8005376 <__ieee754_powf+0x156>
 800536c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8005370:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8005374:	e76c      	b.n	8005250 <__ieee754_powf+0x30>
 8005376:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800537a:	d973      	bls.n	8005464 <__ieee754_powf+0x244>
 800537c:	4bad      	ldr	r3, [pc, #692]	@ (8005634 <__ieee754_powf+0x414>)
 800537e:	4598      	cmp	r8, r3
 8005380:	d808      	bhi.n	8005394 <__ieee754_powf+0x174>
 8005382:	2c00      	cmp	r4, #0
 8005384:	da0b      	bge.n	800539e <__ieee754_powf+0x17e>
 8005386:	2000      	movs	r0, #0
 8005388:	ecbd 8b02 	vpop	{d8}
 800538c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005390:	f000 baa4 	b.w	80058dc <__math_oflowf>
 8005394:	4ba8      	ldr	r3, [pc, #672]	@ (8005638 <__ieee754_powf+0x418>)
 8005396:	4598      	cmp	r8, r3
 8005398:	d908      	bls.n	80053ac <__ieee754_powf+0x18c>
 800539a:	2c00      	cmp	r4, #0
 800539c:	dcf3      	bgt.n	8005386 <__ieee754_powf+0x166>
 800539e:	2000      	movs	r0, #0
 80053a0:	ecbd 8b02 	vpop	{d8}
 80053a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a8:	f000 ba92 	b.w	80058d0 <__math_uflowf>
 80053ac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80053b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80053b4:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800563c <__ieee754_powf+0x41c>
 80053b8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80053bc:	eee0 6a67 	vfms.f32	s13, s0, s15
 80053c0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80053c4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80053c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80053cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053d0:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8005640 <__ieee754_powf+0x420>
 80053d4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80053d8:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8005644 <__ieee754_powf+0x424>
 80053dc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80053e0:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8005648 <__ieee754_powf+0x428>
 80053e4:	eef0 6a67 	vmov.f32	s13, s15
 80053e8:	eee0 6a07 	vfma.f32	s13, s0, s14
 80053ec:	ee16 3a90 	vmov	r3, s13
 80053f0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80053f4:	f023 030f 	bic.w	r3, r3, #15
 80053f8:	ee06 3a90 	vmov	s13, r3
 80053fc:	eee0 6a47 	vfms.f32	s13, s0, s14
 8005400:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005404:	3d01      	subs	r5, #1
 8005406:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800540a:	4305      	orrs	r5, r0
 800540c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005410:	f024 040f 	bic.w	r4, r4, #15
 8005414:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8005418:	bf18      	it	ne
 800541a:	eeb0 8a47 	vmovne.f32	s16, s14
 800541e:	ee07 4a10 	vmov	s14, r4
 8005422:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8005426:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8005432:	ee07 4a10 	vmov	s14, r4
 8005436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800543a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800543e:	ee17 1a10 	vmov	r1, s14
 8005442:	2900      	cmp	r1, #0
 8005444:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005448:	f340 80dd 	ble.w	8005606 <__ieee754_powf+0x3e6>
 800544c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8005450:	f240 80ca 	bls.w	80055e8 <__ieee754_powf+0x3c8>
 8005454:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800545c:	bf4c      	ite	mi
 800545e:	2001      	movmi	r0, #1
 8005460:	2000      	movpl	r0, #0
 8005462:	e791      	b.n	8005388 <__ieee754_powf+0x168>
 8005464:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8005468:	bf01      	itttt	eq
 800546a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800564c <__ieee754_powf+0x42c>
 800546e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8005472:	f06f 0317 	mvneq.w	r3, #23
 8005476:	ee17 7a90 	vmoveq	r7, s15
 800547a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800547e:	bf18      	it	ne
 8005480:	2300      	movne	r3, #0
 8005482:	3a7f      	subs	r2, #127	@ 0x7f
 8005484:	441a      	add	r2, r3
 8005486:	4b72      	ldr	r3, [pc, #456]	@ (8005650 <__ieee754_powf+0x430>)
 8005488:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800548c:	429f      	cmp	r7, r3
 800548e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8005492:	dd06      	ble.n	80054a2 <__ieee754_powf+0x282>
 8005494:	4b6f      	ldr	r3, [pc, #444]	@ (8005654 <__ieee754_powf+0x434>)
 8005496:	429f      	cmp	r7, r3
 8005498:	f340 80a4 	ble.w	80055e4 <__ieee754_powf+0x3c4>
 800549c:	3201      	adds	r2, #1
 800549e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80054a2:	2600      	movs	r6, #0
 80054a4:	4b6c      	ldr	r3, [pc, #432]	@ (8005658 <__ieee754_powf+0x438>)
 80054a6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80054aa:	ee07 1a10 	vmov	s14, r1
 80054ae:	edd3 5a00 	vldr	s11, [r3]
 80054b2:	4b6a      	ldr	r3, [pc, #424]	@ (800565c <__ieee754_powf+0x43c>)
 80054b4:	ee75 7a87 	vadd.f32	s15, s11, s14
 80054b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054bc:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80054c0:	1049      	asrs	r1, r1, #1
 80054c2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80054c6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80054ca:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80054ce:	ee37 6a65 	vsub.f32	s12, s14, s11
 80054d2:	ee07 1a90 	vmov	s15, r1
 80054d6:	ee26 5a24 	vmul.f32	s10, s12, s9
 80054da:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80054de:	ee15 7a10 	vmov	r7, s10
 80054e2:	401f      	ands	r7, r3
 80054e4:	ee06 7a90 	vmov	s13, r7
 80054e8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80054ec:	ee37 7a65 	vsub.f32	s14, s14, s11
 80054f0:	ee65 7a05 	vmul.f32	s15, s10, s10
 80054f4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80054f8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005660 <__ieee754_powf+0x440>
 80054fc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8005664 <__ieee754_powf+0x444>
 8005500:	eee7 5a87 	vfma.f32	s11, s15, s14
 8005504:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8005668 <__ieee754_powf+0x448>
 8005508:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800550c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800563c <__ieee754_powf+0x41c>
 8005510:	eee7 5a27 	vfma.f32	s11, s14, s15
 8005514:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800566c <__ieee754_powf+0x44c>
 8005518:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800551c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8005670 <__ieee754_powf+0x450>
 8005520:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005524:	eee7 5a27 	vfma.f32	s11, s14, s15
 8005528:	ee35 7a26 	vadd.f32	s14, s10, s13
 800552c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8005530:	ee27 7a06 	vmul.f32	s14, s14, s12
 8005534:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8005538:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800553c:	eef0 5a67 	vmov.f32	s11, s15
 8005540:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8005544:	ee75 5a87 	vadd.f32	s11, s11, s14
 8005548:	ee15 1a90 	vmov	r1, s11
 800554c:	4019      	ands	r1, r3
 800554e:	ee05 1a90 	vmov	s11, r1
 8005552:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8005556:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800555a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800555e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005562:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005566:	eeb0 6a67 	vmov.f32	s12, s15
 800556a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800556e:	ee16 1a10 	vmov	r1, s12
 8005572:	4019      	ands	r1, r3
 8005574:	ee06 1a10 	vmov	s12, r1
 8005578:	eeb0 7a46 	vmov.f32	s14, s12
 800557c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8005580:	493c      	ldr	r1, [pc, #240]	@ (8005674 <__ieee754_powf+0x454>)
 8005582:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8005586:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800558a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8005678 <__ieee754_powf+0x458>
 800558e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800567c <__ieee754_powf+0x45c>
 8005592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005596:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8005680 <__ieee754_powf+0x460>
 800559a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800559e:	ed91 7a00 	vldr	s14, [r1]
 80055a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055a6:	ee07 2a10 	vmov	s14, r2
 80055aa:	eef0 6a67 	vmov.f32	s13, s15
 80055ae:	4a35      	ldr	r2, [pc, #212]	@ (8005684 <__ieee754_powf+0x464>)
 80055b0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80055b4:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80055b8:	ed92 5a00 	vldr	s10, [r2]
 80055bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80055c0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80055c4:	ee76 6a87 	vadd.f32	s13, s13, s14
 80055c8:	ee16 2a90 	vmov	r2, s13
 80055cc:	4013      	ands	r3, r2
 80055ce:	ee06 3a90 	vmov	s13, r3
 80055d2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80055d6:	ee37 7a45 	vsub.f32	s14, s14, s10
 80055da:	eea6 7a65 	vfms.f32	s14, s12, s11
 80055de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80055e2:	e70f      	b.n	8005404 <__ieee754_powf+0x1e4>
 80055e4:	2601      	movs	r6, #1
 80055e6:	e75d      	b.n	80054a4 <__ieee754_powf+0x284>
 80055e8:	d152      	bne.n	8005690 <__ieee754_powf+0x470>
 80055ea:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8005688 <__ieee754_powf+0x468>
 80055ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055f2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80055f6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80055fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fe:	f73f af29 	bgt.w	8005454 <__ieee754_powf+0x234>
 8005602:	2386      	movs	r3, #134	@ 0x86
 8005604:	e048      	b.n	8005698 <__ieee754_powf+0x478>
 8005606:	4a21      	ldr	r2, [pc, #132]	@ (800568c <__ieee754_powf+0x46c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d907      	bls.n	800561c <__ieee754_powf+0x3fc>
 800560c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005614:	bf4c      	ite	mi
 8005616:	2001      	movmi	r0, #1
 8005618:	2000      	movpl	r0, #0
 800561a:	e6c1      	b.n	80053a0 <__ieee754_powf+0x180>
 800561c:	d138      	bne.n	8005690 <__ieee754_powf+0x470>
 800561e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005622:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8005626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800562a:	dbea      	blt.n	8005602 <__ieee754_powf+0x3e2>
 800562c:	e7ee      	b.n	800560c <__ieee754_powf+0x3ec>
 800562e:	bf00      	nop
 8005630:	00000000 	.word	0x00000000
 8005634:	3f7ffff3 	.word	0x3f7ffff3
 8005638:	3f800007 	.word	0x3f800007
 800563c:	3eaaaaab 	.word	0x3eaaaaab
 8005640:	3fb8aa3b 	.word	0x3fb8aa3b
 8005644:	36eca570 	.word	0x36eca570
 8005648:	3fb8aa00 	.word	0x3fb8aa00
 800564c:	4b800000 	.word	0x4b800000
 8005650:	001cc471 	.word	0x001cc471
 8005654:	005db3d6 	.word	0x005db3d6
 8005658:	08005938 	.word	0x08005938
 800565c:	fffff000 	.word	0xfffff000
 8005660:	3e6c3255 	.word	0x3e6c3255
 8005664:	3e53f142 	.word	0x3e53f142
 8005668:	3e8ba305 	.word	0x3e8ba305
 800566c:	3edb6db7 	.word	0x3edb6db7
 8005670:	3f19999a 	.word	0x3f19999a
 8005674:	08005928 	.word	0x08005928
 8005678:	3f76384f 	.word	0x3f76384f
 800567c:	3f763800 	.word	0x3f763800
 8005680:	369dc3a0 	.word	0x369dc3a0
 8005684:	08005930 	.word	0x08005930
 8005688:	3338aa3c 	.word	0x3338aa3c
 800568c:	43160000 	.word	0x43160000
 8005690:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8005694:	d971      	bls.n	800577a <__ieee754_powf+0x55a>
 8005696:	15db      	asrs	r3, r3, #23
 8005698:	3b7e      	subs	r3, #126	@ 0x7e
 800569a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800569e:	4118      	asrs	r0, r3
 80056a0:	4408      	add	r0, r1
 80056a2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80056a6:	4a3c      	ldr	r2, [pc, #240]	@ (8005798 <__ieee754_powf+0x578>)
 80056a8:	3b7f      	subs	r3, #127	@ 0x7f
 80056aa:	411a      	asrs	r2, r3
 80056ac:	4002      	ands	r2, r0
 80056ae:	ee07 2a10 	vmov	s14, r2
 80056b2:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80056b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80056ba:	f1c3 0317 	rsb	r3, r3, #23
 80056be:	4118      	asrs	r0, r3
 80056c0:	2900      	cmp	r1, #0
 80056c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80056c6:	bfb8      	it	lt
 80056c8:	4240      	neglt	r0, r0
 80056ca:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80056ce:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800579c <__ieee754_powf+0x57c>
 80056d2:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 80057a0 <__ieee754_powf+0x580>
 80056d6:	ee17 3a10 	vmov	r3, s14
 80056da:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80056de:	f023 030f 	bic.w	r3, r3, #15
 80056e2:	ee07 3a10 	vmov	s14, r3
 80056e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056ea:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80056ee:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80056f2:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80057a4 <__ieee754_powf+0x584>
 80056f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056fa:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80056fe:	eef0 6a67 	vmov.f32	s13, s15
 8005702:	eee7 6a06 	vfma.f32	s13, s14, s12
 8005706:	eef0 5a66 	vmov.f32	s11, s13
 800570a:	eee7 5a46 	vfms.f32	s11, s14, s12
 800570e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8005712:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005716:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 80057a8 <__ieee754_powf+0x588>
 800571a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 80057ac <__ieee754_powf+0x58c>
 800571e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8005722:	eddf 5a23 	vldr	s11, [pc, #140]	@ 80057b0 <__ieee754_powf+0x590>
 8005726:	eee6 5a07 	vfma.f32	s11, s12, s14
 800572a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80057b4 <__ieee754_powf+0x594>
 800572e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8005732:	eddf 5a21 	vldr	s11, [pc, #132]	@ 80057b8 <__ieee754_powf+0x598>
 8005736:	eee6 5a07 	vfma.f32	s11, s12, s14
 800573a:	eeb0 6a66 	vmov.f32	s12, s13
 800573e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8005742:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8005746:	ee66 5a86 	vmul.f32	s11, s13, s12
 800574a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800574e:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8005752:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8005756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800575a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800575e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005762:	ee10 3a10 	vmov	r3, s0
 8005766:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800576a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800576e:	da06      	bge.n	800577e <__ieee754_powf+0x55e>
 8005770:	f000 f82e 	bl	80057d0 <scalbnf>
 8005774:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005778:	e56a      	b.n	8005250 <__ieee754_powf+0x30>
 800577a:	2000      	movs	r0, #0
 800577c:	e7a5      	b.n	80056ca <__ieee754_powf+0x4aa>
 800577e:	ee00 3a10 	vmov	s0, r3
 8005782:	e7f7      	b.n	8005774 <__ieee754_powf+0x554>
 8005784:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005788:	e562      	b.n	8005250 <__ieee754_powf+0x30>
 800578a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80057bc <__ieee754_powf+0x59c>
 800578e:	e55f      	b.n	8005250 <__ieee754_powf+0x30>
 8005790:	eeb0 0a48 	vmov.f32	s0, s16
 8005794:	e55c      	b.n	8005250 <__ieee754_powf+0x30>
 8005796:	bf00      	nop
 8005798:	ff800000 	.word	0xff800000
 800579c:	3f317218 	.word	0x3f317218
 80057a0:	3f317200 	.word	0x3f317200
 80057a4:	35bfbe8c 	.word	0x35bfbe8c
 80057a8:	b5ddea0e 	.word	0xb5ddea0e
 80057ac:	3331bb4c 	.word	0x3331bb4c
 80057b0:	388ab355 	.word	0x388ab355
 80057b4:	bb360b61 	.word	0xbb360b61
 80057b8:	3e2aaaab 	.word	0x3e2aaaab
 80057bc:	00000000 	.word	0x00000000

080057c0 <fabsf>:
 80057c0:	ee10 3a10 	vmov	r3, s0
 80057c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057c8:	ee00 3a10 	vmov	s0, r3
 80057cc:	4770      	bx	lr
	...

080057d0 <scalbnf>:
 80057d0:	ee10 3a10 	vmov	r3, s0
 80057d4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80057d8:	d02b      	beq.n	8005832 <scalbnf+0x62>
 80057da:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80057de:	d302      	bcc.n	80057e6 <scalbnf+0x16>
 80057e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80057e4:	4770      	bx	lr
 80057e6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80057ea:	d123      	bne.n	8005834 <scalbnf+0x64>
 80057ec:	4b24      	ldr	r3, [pc, #144]	@ (8005880 <scalbnf+0xb0>)
 80057ee:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8005884 <scalbnf+0xb4>
 80057f2:	4298      	cmp	r0, r3
 80057f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80057f8:	db17      	blt.n	800582a <scalbnf+0x5a>
 80057fa:	ee10 3a10 	vmov	r3, s0
 80057fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005802:	3a19      	subs	r2, #25
 8005804:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8005808:	4288      	cmp	r0, r1
 800580a:	dd15      	ble.n	8005838 <scalbnf+0x68>
 800580c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8005888 <scalbnf+0xb8>
 8005810:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800588c <scalbnf+0xbc>
 8005814:	ee10 3a10 	vmov	r3, s0
 8005818:	eeb0 7a67 	vmov.f32	s14, s15
 800581c:	2b00      	cmp	r3, #0
 800581e:	bfb8      	it	lt
 8005820:	eef0 7a66 	vmovlt.f32	s15, s13
 8005824:	ee27 0a87 	vmul.f32	s0, s15, s14
 8005828:	4770      	bx	lr
 800582a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005890 <scalbnf+0xc0>
 800582e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005832:	4770      	bx	lr
 8005834:	0dd2      	lsrs	r2, r2, #23
 8005836:	e7e5      	b.n	8005804 <scalbnf+0x34>
 8005838:	4410      	add	r0, r2
 800583a:	28fe      	cmp	r0, #254	@ 0xfe
 800583c:	dce6      	bgt.n	800580c <scalbnf+0x3c>
 800583e:	2800      	cmp	r0, #0
 8005840:	dd06      	ble.n	8005850 <scalbnf+0x80>
 8005842:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005846:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800584a:	ee00 3a10 	vmov	s0, r3
 800584e:	4770      	bx	lr
 8005850:	f110 0f16 	cmn.w	r0, #22
 8005854:	da09      	bge.n	800586a <scalbnf+0x9a>
 8005856:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8005890 <scalbnf+0xc0>
 800585a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8005894 <scalbnf+0xc4>
 800585e:	ee10 3a10 	vmov	r3, s0
 8005862:	eeb0 7a67 	vmov.f32	s14, s15
 8005866:	2b00      	cmp	r3, #0
 8005868:	e7d9      	b.n	800581e <scalbnf+0x4e>
 800586a:	3019      	adds	r0, #25
 800586c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005870:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005874:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8005898 <scalbnf+0xc8>
 8005878:	ee07 3a90 	vmov	s15, r3
 800587c:	e7d7      	b.n	800582e <scalbnf+0x5e>
 800587e:	bf00      	nop
 8005880:	ffff3cb0 	.word	0xffff3cb0
 8005884:	4c000000 	.word	0x4c000000
 8005888:	7149f2ca 	.word	0x7149f2ca
 800588c:	f149f2ca 	.word	0xf149f2ca
 8005890:	0da24260 	.word	0x0da24260
 8005894:	8da24260 	.word	0x8da24260
 8005898:	33000000 	.word	0x33000000

0800589c <with_errnof>:
 800589c:	b510      	push	{r4, lr}
 800589e:	ed2d 8b02 	vpush	{d8}
 80058a2:	eeb0 8a40 	vmov.f32	s16, s0
 80058a6:	4604      	mov	r4, r0
 80058a8:	f7ff fc2e 	bl	8005108 <__errno>
 80058ac:	eeb0 0a48 	vmov.f32	s0, s16
 80058b0:	ecbd 8b02 	vpop	{d8}
 80058b4:	6004      	str	r4, [r0, #0]
 80058b6:	bd10      	pop	{r4, pc}

080058b8 <xflowf>:
 80058b8:	b130      	cbz	r0, 80058c8 <xflowf+0x10>
 80058ba:	eef1 7a40 	vneg.f32	s15, s0
 80058be:	ee27 0a80 	vmul.f32	s0, s15, s0
 80058c2:	2022      	movs	r0, #34	@ 0x22
 80058c4:	f7ff bfea 	b.w	800589c <with_errnof>
 80058c8:	eef0 7a40 	vmov.f32	s15, s0
 80058cc:	e7f7      	b.n	80058be <xflowf+0x6>
	...

080058d0 <__math_uflowf>:
 80058d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80058d8 <__math_uflowf+0x8>
 80058d4:	f7ff bff0 	b.w	80058b8 <xflowf>
 80058d8:	10000000 	.word	0x10000000

080058dc <__math_oflowf>:
 80058dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80058e4 <__math_oflowf+0x8>
 80058e0:	f7ff bfea 	b.w	80058b8 <xflowf>
 80058e4:	70000000 	.word	0x70000000

080058e8 <__ieee754_sqrtf>:
 80058e8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80058ec:	4770      	bx	lr
	...

080058f0 <_init>:
 80058f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f2:	bf00      	nop
 80058f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f6:	bc08      	pop	{r3}
 80058f8:	469e      	mov	lr, r3
 80058fa:	4770      	bx	lr

080058fc <_fini>:
 80058fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fe:	bf00      	nop
 8005900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005902:	bc08      	pop	{r3}
 8005904:	469e      	mov	lr, r3
 8005906:	4770      	bx	lr
