
STM32F405_EQ_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004378  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004500  08004500  00005500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004530  08004530  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004530  08004530  00005530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004538  08004538  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004538  08004538  00005538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800453c  0800453c  0000553c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004540  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000606c  2**0
                  CONTENTS
 10 .bss          000006b0  2000006c  2000006c  0000606c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000071c  2000071c  0000606c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007441  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b87  00000000  00000000  0000d4dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  0000f068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000050f  00000000  00000000  0000f740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e943  00000000  00000000  0000fc4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009d9e  00000000  00000000  0002e592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b7adf  00000000  00000000  00038330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000efe0f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e18  00000000  00000000  000efe54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000f1c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044e8 	.word	0x080044e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	080044e8 	.word	0x080044e8

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b96a 	b.w	8000b20 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	460c      	mov	r4, r1
 800086c:	2b00      	cmp	r3, #0
 800086e:	d14e      	bne.n	800090e <__udivmoddi4+0xaa>
 8000870:	4694      	mov	ip, r2
 8000872:	458c      	cmp	ip, r1
 8000874:	4686      	mov	lr, r0
 8000876:	fab2 f282 	clz	r2, r2
 800087a:	d962      	bls.n	8000942 <__udivmoddi4+0xde>
 800087c:	b14a      	cbz	r2, 8000892 <__udivmoddi4+0x2e>
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	4091      	lsls	r1, r2
 8000884:	fa20 f303 	lsr.w	r3, r0, r3
 8000888:	fa0c fc02 	lsl.w	ip, ip, r2
 800088c:	4319      	orrs	r1, r3
 800088e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000892:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000896:	fa1f f68c 	uxth.w	r6, ip
 800089a:	fbb1 f4f7 	udiv	r4, r1, r7
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb07 1114 	mls	r1, r7, r4, r1
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	fb04 f106 	mul.w	r1, r4, r6
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d90a      	bls.n	80008c8 <__udivmoddi4+0x64>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f104 30ff 	add.w	r0, r4, #4294967295
 80008ba:	f080 8112 	bcs.w	8000ae2 <__udivmoddi4+0x27e>
 80008be:	4299      	cmp	r1, r3
 80008c0:	f240 810f 	bls.w	8000ae2 <__udivmoddi4+0x27e>
 80008c4:	3c02      	subs	r4, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1a59      	subs	r1, r3, r1
 80008ca:	fa1f f38e 	uxth.w	r3, lr
 80008ce:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d2:	fb07 1110 	mls	r1, r7, r0, r1
 80008d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008da:	fb00 f606 	mul.w	r6, r0, r6
 80008de:	429e      	cmp	r6, r3
 80008e0:	d90a      	bls.n	80008f8 <__udivmoddi4+0x94>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ea:	f080 80fc 	bcs.w	8000ae6 <__udivmoddi4+0x282>
 80008ee:	429e      	cmp	r6, r3
 80008f0:	f240 80f9 	bls.w	8000ae6 <__udivmoddi4+0x282>
 80008f4:	4463      	add	r3, ip
 80008f6:	3802      	subs	r0, #2
 80008f8:	1b9b      	subs	r3, r3, r6
 80008fa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008fe:	2100      	movs	r1, #0
 8000900:	b11d      	cbz	r5, 800090a <__udivmoddi4+0xa6>
 8000902:	40d3      	lsrs	r3, r2
 8000904:	2200      	movs	r2, #0
 8000906:	e9c5 3200 	strd	r3, r2, [r5]
 800090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090e:	428b      	cmp	r3, r1
 8000910:	d905      	bls.n	800091e <__udivmoddi4+0xba>
 8000912:	b10d      	cbz	r5, 8000918 <__udivmoddi4+0xb4>
 8000914:	e9c5 0100 	strd	r0, r1, [r5]
 8000918:	2100      	movs	r1, #0
 800091a:	4608      	mov	r0, r1
 800091c:	e7f5      	b.n	800090a <__udivmoddi4+0xa6>
 800091e:	fab3 f183 	clz	r1, r3
 8000922:	2900      	cmp	r1, #0
 8000924:	d146      	bne.n	80009b4 <__udivmoddi4+0x150>
 8000926:	42a3      	cmp	r3, r4
 8000928:	d302      	bcc.n	8000930 <__udivmoddi4+0xcc>
 800092a:	4290      	cmp	r0, r2
 800092c:	f0c0 80f0 	bcc.w	8000b10 <__udivmoddi4+0x2ac>
 8000930:	1a86      	subs	r6, r0, r2
 8000932:	eb64 0303 	sbc.w	r3, r4, r3
 8000936:	2001      	movs	r0, #1
 8000938:	2d00      	cmp	r5, #0
 800093a:	d0e6      	beq.n	800090a <__udivmoddi4+0xa6>
 800093c:	e9c5 6300 	strd	r6, r3, [r5]
 8000940:	e7e3      	b.n	800090a <__udivmoddi4+0xa6>
 8000942:	2a00      	cmp	r2, #0
 8000944:	f040 8090 	bne.w	8000a68 <__udivmoddi4+0x204>
 8000948:	eba1 040c 	sub.w	r4, r1, ip
 800094c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000950:	fa1f f78c 	uxth.w	r7, ip
 8000954:	2101      	movs	r1, #1
 8000956:	fbb4 f6f8 	udiv	r6, r4, r8
 800095a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800095e:	fb08 4416 	mls	r4, r8, r6, r4
 8000962:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000966:	fb07 f006 	mul.w	r0, r7, r6
 800096a:	4298      	cmp	r0, r3
 800096c:	d908      	bls.n	8000980 <__udivmoddi4+0x11c>
 800096e:	eb1c 0303 	adds.w	r3, ip, r3
 8000972:	f106 34ff 	add.w	r4, r6, #4294967295
 8000976:	d202      	bcs.n	800097e <__udivmoddi4+0x11a>
 8000978:	4298      	cmp	r0, r3
 800097a:	f200 80cd 	bhi.w	8000b18 <__udivmoddi4+0x2b4>
 800097e:	4626      	mov	r6, r4
 8000980:	1a1c      	subs	r4, r3, r0
 8000982:	fa1f f38e 	uxth.w	r3, lr
 8000986:	fbb4 f0f8 	udiv	r0, r4, r8
 800098a:	fb08 4410 	mls	r4, r8, r0, r4
 800098e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000992:	fb00 f707 	mul.w	r7, r0, r7
 8000996:	429f      	cmp	r7, r3
 8000998:	d908      	bls.n	80009ac <__udivmoddi4+0x148>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a2:	d202      	bcs.n	80009aa <__udivmoddi4+0x146>
 80009a4:	429f      	cmp	r7, r3
 80009a6:	f200 80b0 	bhi.w	8000b0a <__udivmoddi4+0x2a6>
 80009aa:	4620      	mov	r0, r4
 80009ac:	1bdb      	subs	r3, r3, r7
 80009ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b2:	e7a5      	b.n	8000900 <__udivmoddi4+0x9c>
 80009b4:	f1c1 0620 	rsb	r6, r1, #32
 80009b8:	408b      	lsls	r3, r1
 80009ba:	fa22 f706 	lsr.w	r7, r2, r6
 80009be:	431f      	orrs	r7, r3
 80009c0:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c4:	fa04 f301 	lsl.w	r3, r4, r1
 80009c8:	ea43 030c 	orr.w	r3, r3, ip
 80009cc:	40f4      	lsrs	r4, r6
 80009ce:	fa00 f801 	lsl.w	r8, r0, r1
 80009d2:	0c38      	lsrs	r0, r7, #16
 80009d4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009d8:	fbb4 fef0 	udiv	lr, r4, r0
 80009dc:	fa1f fc87 	uxth.w	ip, r7
 80009e0:	fb00 441e 	mls	r4, r0, lr, r4
 80009e4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e8:	fb0e f90c 	mul.w	r9, lr, ip
 80009ec:	45a1      	cmp	r9, r4
 80009ee:	fa02 f201 	lsl.w	r2, r2, r1
 80009f2:	d90a      	bls.n	8000a0a <__udivmoddi4+0x1a6>
 80009f4:	193c      	adds	r4, r7, r4
 80009f6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fa:	f080 8084 	bcs.w	8000b06 <__udivmoddi4+0x2a2>
 80009fe:	45a1      	cmp	r9, r4
 8000a00:	f240 8081 	bls.w	8000b06 <__udivmoddi4+0x2a2>
 8000a04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a08:	443c      	add	r4, r7
 8000a0a:	eba4 0409 	sub.w	r4, r4, r9
 8000a0e:	fa1f f983 	uxth.w	r9, r3
 8000a12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a16:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a22:	45a4      	cmp	ip, r4
 8000a24:	d907      	bls.n	8000a36 <__udivmoddi4+0x1d2>
 8000a26:	193c      	adds	r4, r7, r4
 8000a28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a2c:	d267      	bcs.n	8000afe <__udivmoddi4+0x29a>
 8000a2e:	45a4      	cmp	ip, r4
 8000a30:	d965      	bls.n	8000afe <__udivmoddi4+0x29a>
 8000a32:	3b02      	subs	r3, #2
 8000a34:	443c      	add	r4, r7
 8000a36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a3e:	eba4 040c 	sub.w	r4, r4, ip
 8000a42:	429c      	cmp	r4, r3
 8000a44:	46ce      	mov	lr, r9
 8000a46:	469c      	mov	ip, r3
 8000a48:	d351      	bcc.n	8000aee <__udivmoddi4+0x28a>
 8000a4a:	d04e      	beq.n	8000aea <__udivmoddi4+0x286>
 8000a4c:	b155      	cbz	r5, 8000a64 <__udivmoddi4+0x200>
 8000a4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a52:	eb64 040c 	sbc.w	r4, r4, ip
 8000a56:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5a:	40cb      	lsrs	r3, r1
 8000a5c:	431e      	orrs	r6, r3
 8000a5e:	40cc      	lsrs	r4, r1
 8000a60:	e9c5 6400 	strd	r6, r4, [r5]
 8000a64:	2100      	movs	r1, #0
 8000a66:	e750      	b.n	800090a <__udivmoddi4+0xa6>
 8000a68:	f1c2 0320 	rsb	r3, r2, #32
 8000a6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a74:	fa24 f303 	lsr.w	r3, r4, r3
 8000a78:	4094      	lsls	r4, r2
 8000a7a:	430c      	orrs	r4, r1
 8000a7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a84:	fa1f f78c 	uxth.w	r7, ip
 8000a88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a90:	0c23      	lsrs	r3, r4, #16
 8000a92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a96:	fb00 f107 	mul.w	r1, r0, r7
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x24c>
 8000a9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aa6:	d22c      	bcs.n	8000b02 <__udivmoddi4+0x29e>
 8000aa8:	4299      	cmp	r1, r3
 8000aaa:	d92a      	bls.n	8000b02 <__udivmoddi4+0x29e>
 8000aac:	3802      	subs	r0, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	1a5b      	subs	r3, r3, r1
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ab8:	fb08 3311 	mls	r3, r8, r1, r3
 8000abc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac0:	fb01 f307 	mul.w	r3, r1, r7
 8000ac4:	42a3      	cmp	r3, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x276>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad0:	d213      	bcs.n	8000afa <__udivmoddi4+0x296>
 8000ad2:	42a3      	cmp	r3, r4
 8000ad4:	d911      	bls.n	8000afa <__udivmoddi4+0x296>
 8000ad6:	3902      	subs	r1, #2
 8000ad8:	4464      	add	r4, ip
 8000ada:	1ae4      	subs	r4, r4, r3
 8000adc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae0:	e739      	b.n	8000956 <__udivmoddi4+0xf2>
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	e6f0      	b.n	80008c8 <__udivmoddi4+0x64>
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	e706      	b.n	80008f8 <__udivmoddi4+0x94>
 8000aea:	45c8      	cmp	r8, r9
 8000aec:	d2ae      	bcs.n	8000a4c <__udivmoddi4+0x1e8>
 8000aee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000af6:	3801      	subs	r0, #1
 8000af8:	e7a8      	b.n	8000a4c <__udivmoddi4+0x1e8>
 8000afa:	4631      	mov	r1, r6
 8000afc:	e7ed      	b.n	8000ada <__udivmoddi4+0x276>
 8000afe:	4603      	mov	r3, r0
 8000b00:	e799      	b.n	8000a36 <__udivmoddi4+0x1d2>
 8000b02:	4630      	mov	r0, r6
 8000b04:	e7d4      	b.n	8000ab0 <__udivmoddi4+0x24c>
 8000b06:	46d6      	mov	lr, sl
 8000b08:	e77f      	b.n	8000a0a <__udivmoddi4+0x1a6>
 8000b0a:	4463      	add	r3, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	e74d      	b.n	80009ac <__udivmoddi4+0x148>
 8000b10:	4606      	mov	r6, r0
 8000b12:	4623      	mov	r3, r4
 8000b14:	4608      	mov	r0, r1
 8000b16:	e70f      	b.n	8000938 <__udivmoddi4+0xd4>
 8000b18:	3e02      	subs	r6, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	e730      	b.n	8000980 <__udivmoddi4+0x11c>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_idiv0>:
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b28:	f000 fdb8 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2c:	f000 f83c 	bl	8000ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b30:	f000 f8fc 	bl	8000d2c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b34:	f000 f8d2 	bl	8000cdc <MX_DMA_Init>
  MX_I2S2_Init();
 8000b38:	f000 f8a0 	bl	8000c7c <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  // peaking_filter_init(&lowFilt);
  peaking_filter_init(&midLowFilt);
 8000b3c:	4812      	ldr	r0, [pc, #72]	@ (8000b88 <main+0x64>)
 8000b3e:	f000 fac9 	bl	80010d4 <peaking_filter_init>
  // peaking_filter_init(&midFilt);
  // peaking_filter_init(&midHighFilt);
  // peaking_filter_init(&highFilt);

  // peaking_filter_set_params(&lowFilt, gainLowShelf, LOW_FREQ, Q);
  peaking_filter_set_params(&midLowFilt, gainLowMid, MID_LOW_FREQ, Q);
 8000b42:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <main+0x68>)
 8000b44:	edd3 7a00 	vldr	s15, [r3]
 8000b48:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <main+0x6c>)
 8000b4a:	ed93 7a00 	vldr	s14, [r3]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <main+0x70>)
 8000b50:	edd3 6a00 	vldr	s13, [r3]
 8000b54:	eeb0 1a66 	vmov.f32	s2, s13
 8000b58:	eef0 0a47 	vmov.f32	s1, s14
 8000b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b60:	4809      	ldr	r0, [pc, #36]	@ (8000b88 <main+0x64>)
 8000b62:	f000 fad9 	bl	8001118 <peaking_filter_set_params>
  // peaking_filter_set_params(&midFilt, gainMid, MID_FREQ, Q);
  // peaking_filter_set_params(&midHighFilt, gainHighMid, MID_HIGH_FREQ, Q);
  // peaking_filter_set_params(&highFilt, gainHighShelf, HIGH_FREQ, Q);

  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, BUFFER_SIZE/2);
 8000b66:	2380      	movs	r3, #128	@ 0x80
 8000b68:	4a0b      	ldr	r2, [pc, #44]	@ (8000b98 <main+0x74>)
 8000b6a:	490c      	ldr	r1, [pc, #48]	@ (8000b9c <main+0x78>)
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <main+0x7c>)
 8000b6e:	f001 fe85 	bl	800287c <HAL_I2SEx_TransmitReceive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (isDataReady){
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <main+0x80>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0fb      	beq.n	8000b72 <main+0x4e>
		  processSignal();
 8000b7a:	f000 f935 	bl	8000de8 <processSignal>
		isDataReady = 0;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <main+0x80>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
    if (isDataReady){
 8000b84:	e7f5      	b.n	8000b72 <main+0x4e>
 8000b86:	bf00      	nop
 8000b88:	2000059c 	.word	0x2000059c
 8000b8c:	20000004 	.word	0x20000004
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000190 	.word	0x20000190
 8000b9c:	20000390 	.word	0x20000390
 8000ba0:	20000088 	.word	0x20000088
 8000ba4:	20000590 	.word	0x20000590

08000ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b094      	sub	sp, #80	@ 0x50
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	f107 0320 	add.w	r3, r7, #32
 8000bb2:	2230      	movs	r2, #48	@ 0x30
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f003 f89a 	bl	8003cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	4b28      	ldr	r3, [pc, #160]	@ (8000c74 <SystemClock_Config+0xcc>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd4:	4a27      	ldr	r2, [pc, #156]	@ (8000c74 <SystemClock_Config+0xcc>)
 8000bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bdc:	4b25      	ldr	r3, [pc, #148]	@ (8000c74 <SystemClock_Config+0xcc>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	4b22      	ldr	r3, [pc, #136]	@ (8000c78 <SystemClock_Config+0xd0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a21      	ldr	r2, [pc, #132]	@ (8000c78 <SystemClock_Config+0xd0>)
 8000bf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c78 <SystemClock_Config+0xd0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c04:	2301      	movs	r3, #1
 8000c06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c12:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c18:	2308      	movs	r3, #8
 8000c1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c1c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c22:	2302      	movs	r3, #2
 8000c24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c26:	2304      	movs	r3, #4
 8000c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2a:	f107 0320 	add.w	r3, r7, #32
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f002 fab8 	bl	80031a4 <HAL_RCC_OscConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c3a:	f000 fa45 	bl	80010c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3e:	230f      	movs	r3, #15
 8000c40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c42:	2302      	movs	r3, #2
 8000c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c4a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	2105      	movs	r1, #5
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 fd19 	bl	8003694 <HAL_RCC_ClockConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c68:	f000 fa2e 	bl	80010c8 <Error_Handler>
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3750      	adds	r7, #80	@ 0x50
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40007000 	.word	0x40007000

08000c7c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <MX_I2S2_Init+0x54>)
 8000c82:	4a14      	ldr	r2, [pc, #80]	@ (8000cd4 <MX_I2S2_Init+0x58>)
 8000c84:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000c86:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <MX_I2S2_Init+0x54>)
 8000c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c8c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <MX_I2S2_Init+0x54>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <MX_I2S2_Init+0x54>)
 8000c96:	2203      	movs	r2, #3
 8000c98:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <MX_I2S2_Init+0x54>)
 8000c9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ca0:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <MX_I2S2_Init+0x54>)
 8000ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd8 <MX_I2S2_Init+0x5c>)
 8000ca6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <MX_I2S2_Init+0x54>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000cae:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <MX_I2S2_Init+0x54>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <MX_I2S2_Init+0x54>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_I2S2_Init+0x54>)
 8000cbc:	f001 fb98 	bl	80023f0 <HAL_I2S_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000cc6:	f000 f9ff 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000088 	.word	0x20000088
 8000cd4:	40003800 	.word	0x40003800
 8000cd8:	00017700 	.word	0x00017700

08000cdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <MX_DMA_Init+0x4c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a0f      	ldr	r2, [pc, #60]	@ (8000d28 <MX_DMA_Init+0x4c>)
 8000cec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <MX_DMA_Init+0x4c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	200e      	movs	r0, #14
 8000d04:	f000 fe17 	bl	8001936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d08:	200e      	movs	r0, #14
 8000d0a:	f000 fe30 	bl	800196e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	200f      	movs	r0, #15
 8000d14:	f000 fe0f 	bl	8001936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d18:	200f      	movs	r0, #15
 8000d1a:	f000 fe28 	bl	800196e <HAL_NVIC_EnableIRQ>

}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	@ 0x28
 8000d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b26      	ldr	r3, [pc, #152]	@ (8000de0 <MX_GPIO_Init+0xb4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a25      	ldr	r2, [pc, #148]	@ (8000de0 <MX_GPIO_Init+0xb4>)
 8000d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d52:	4b23      	ldr	r3, [pc, #140]	@ (8000de0 <MX_GPIO_Init+0xb4>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b1f      	ldr	r3, [pc, #124]	@ (8000de0 <MX_GPIO_Init+0xb4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a1e      	ldr	r2, [pc, #120]	@ (8000de0 <MX_GPIO_Init+0xb4>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <MX_GPIO_Init+0xb4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <MX_GPIO_Init+0xb4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a17      	ldr	r2, [pc, #92]	@ (8000de0 <MX_GPIO_Init+0xb4>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <MX_GPIO_Init+0xb4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <MX_GPIO_Init+0xb4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a10      	ldr	r2, [pc, #64]	@ (8000de0 <MX_GPIO_Init+0xb4>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <MX_GPIO_Init+0xb4>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2104      	movs	r1, #4
 8000db6:	480b      	ldr	r0, [pc, #44]	@ (8000de4 <MX_GPIO_Init+0xb8>)
 8000db8:	f001 fb00 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4804      	ldr	r0, [pc, #16]	@ (8000de4 <MX_GPIO_Init+0xb8>)
 8000dd4:	f001 f956 	bl	8002084 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	@ 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020400 	.word	0x40020400

08000de8 <processSignal>:
//   rout_z1 = outSampleF;

//   return (int) outSampleF;
// }

void processSignal(){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
  int iteration = BUFFER_SIZE/2;
 8000dee:	2380      	movs	r3, #128	@ 0x80
 8000df0:	603b      	str	r3, [r7, #0]
	static float leftIn;
	static float leftOut;
	static float rightIn;
	static float rightOut;

	for (int i = 0; i < iteration; i += 2){
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	e05e      	b.n	8000eb6 <processSignal+0xce>
		leftIn = inProcessBuff[i] / 32768.0f;
 8000df8:	4b33      	ldr	r3, [pc, #204]	@ (8000ec8 <processSignal+0xe0>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	ee07 3a90 	vmov	s15, r3
 8000e0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e0e:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8000ecc <processSignal+0xe4>
 8000e12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e16:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed0 <processSignal+0xe8>)
 8000e18:	edc3 7a00 	vstr	s15, [r3]
		rightIn = inProcessBuff[i] / 32768.0f;
 8000e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec8 <processSignal+0xe0>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	ee07 3a90 	vmov	s15, r3
 8000e2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e32:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8000ecc <processSignal+0xe4>
 8000e36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e3a:	4b26      	ldr	r3, [pc, #152]	@ (8000ed4 <processSignal+0xec>)
 8000e3c:	edc3 7a00 	vstr	s15, [r3]
		// leftOut = peaking_filter_update(&lowFilt, leftIn);
    leftOut = peaking_filter_update(&midLowFilt, leftOut);
 8000e40:	4b25      	ldr	r3, [pc, #148]	@ (8000ed8 <processSignal+0xf0>)
 8000e42:	edd3 7a00 	vldr	s15, [r3]
 8000e46:	eeb0 0a67 	vmov.f32	s0, s15
 8000e4a:	4824      	ldr	r0, [pc, #144]	@ (8000edc <processSignal+0xf4>)
 8000e4c:	f000 fa26 	bl	800129c <peaking_filter_update>
 8000e50:	eef0 7a40 	vmov.f32	s15, s0
 8000e54:	4b20      	ldr	r3, [pc, #128]	@ (8000ed8 <processSignal+0xf0>)
 8000e56:	edc3 7a00 	vstr	s15, [r3]
		// leftOut = peaking_filter_update(&midFilt, leftOut);
    // leftOut = peaking_filter_update(&midHighFilt, leftOut);
		// leftOut = peaking_filter_update(&highFilt, leftOut);
    rightOut = leftOut;
 8000e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed8 <processSignal+0xf0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a20      	ldr	r2, [pc, #128]	@ (8000ee0 <processSignal+0xf8>)
 8000e60:	6013      	str	r3, [r2, #0]

    outProcessBuff[i] = (int16_t)(leftOut * 32768.0f);
 8000e62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <processSignal+0xf0>)
 8000e64:	edd3 7a00 	vldr	s15, [r3]
 8000e68:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8000ecc <processSignal+0xe4>
 8000e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e74:	ee17 3a90 	vmov	r3, s15
 8000e78:	b219      	sxth	r1, r3
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <processSignal+0xfc>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	b28a      	uxth	r2, r1
 8000e86:	801a      	strh	r2, [r3, #0]
		outProcessBuff[i+1] = (int16_t)(rightOut * 32768.0f);
 8000e88:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <processSignal+0xf8>)
 8000e8a:	edd3 7a00 	vldr	s15, [r3]
 8000e8e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000ecc <processSignal+0xe4>
 8000e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e9a:	ee17 3a90 	vmov	r3, s15
 8000e9e:	b219      	sxth	r1, r3
 8000ea0:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <processSignal+0xfc>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	b28a      	uxth	r2, r1
 8000eae:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < iteration; i += 2){
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	db9c      	blt.n	8000df8 <processSignal+0x10>
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000594 	.word	0x20000594
 8000ecc:	47000000 	.word	0x47000000
 8000ed0:	200005d0 	.word	0x200005d0
 8000ed4:	200005d4 	.word	0x200005d4
 8000ed8:	200005d8 	.word	0x200005d8
 8000edc:	2000059c 	.word	0x2000059c
 8000ee0:	200005dc 	.word	0x200005dc
 8000ee4:	20000598 	.word	0x20000598

08000ee8 <HAL_I2SEx_TxRxHalfCpltCallback>:

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    int iteration = BUFFER_SIZE/2; 
 8000ef0:	2380      	movs	r3, #128	@ 0x80
 8000ef2:	613b      	str	r3, [r7, #16]
    int rSample = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
    int lSample = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]

    // Restore from buffer with looping
    for (int i = 0; i < iteration; i += 2){
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e05a      	b.n	8000fb8 <HAL_I2SEx_TxRxHalfCpltCallback+0xd0>
        // Restore signed 24-bit sample from 16-bit buffers
        rSample = (int) (rxBuf[i]<<16) | rxBuf[i+1];
 8000f02:	4a32      	ldr	r2, [pc, #200]	@ (8000fcc <HAL_I2SEx_TxRxHalfCpltCallback+0xe4>)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f0a:	041b      	lsls	r3, r3, #16
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	3201      	adds	r2, #1
 8000f10:	492e      	ldr	r1, [pc, #184]	@ (8000fcc <HAL_I2SEx_TxRxHalfCpltCallback+0xe4>)
 8000f12:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
        lSample = (int) (rxBuf[i+2]<<16) | rxBuf[i+3];
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	4a2b      	ldr	r2, [pc, #172]	@ (8000fcc <HAL_I2SEx_TxRxHalfCpltCallback+0xe4>)
 8000f20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f24:	041b      	lsls	r3, r3, #16
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	3203      	adds	r2, #3
 8000f2a:	4928      	ldr	r1, [pc, #160]	@ (8000fcc <HAL_I2SEx_TxRxHalfCpltCallback+0xe4>)
 8000f2c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
 
        // Filter the left and right channels
        lSample = peaking_filter_update(&midLowFilt, lSample);
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f42:	4823      	ldr	r0, [pc, #140]	@ (8000fd0 <HAL_I2SEx_TxRxHalfCpltCallback+0xe8>)
 8000f44:	f000 f9aa 	bl	800129c <peaking_filter_update>
 8000f48:	eef0 7a40 	vmov.f32	s15, s0
 8000f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f50:	ee17 3a90 	vmov	r3, s15
 8000f54:	60bb      	str	r3, [r7, #8]
        rSample = peaking_filter_update(&midLowFilt, rSample);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f60:	eeb0 0a67 	vmov.f32	s0, s15
 8000f64:	481a      	ldr	r0, [pc, #104]	@ (8000fd0 <HAL_I2SEx_TxRxHalfCpltCallback+0xe8>)
 8000f66:	f000 f999 	bl	800129c <peaking_filter_update>
 8000f6a:	eef0 7a40 	vmov.f32	s15, s0
 8000f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f72:	ee17 3a90 	vmov	r3, s15
 8000f76:	60fb      	str	r3, [r7, #12]

        // Restore to buffer with looping
        txBuf[i] = (int)(lSample >> 16) & 0xFFFF;
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	0c1b      	lsrs	r3, r3, #16
 8000f7c:	b299      	uxth	r1, r3
 8000f7e:	4a15      	ldr	r2, [pc, #84]	@ (8000fd4 <HAL_I2SEx_TxRxHalfCpltCallback+0xec>)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        txBuf[i+1] = (int)lSample & 0xFFFF;
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	b291      	uxth	r1, r2
 8000f8e:	4a11      	ldr	r2, [pc, #68]	@ (8000fd4 <HAL_I2SEx_TxRxHalfCpltCallback+0xec>)
 8000f90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        txBuf[i+2] = (int)(rSample >> 16) & 0xFFFF;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	0c1a      	lsrs	r2, r3, #16
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	b291      	uxth	r1, r2
 8000f9e:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <HAL_I2SEx_TxRxHalfCpltCallback+0xec>)
 8000fa0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        txBuf[i+3] = (int)rSample & 0xFFFF;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3303      	adds	r3, #3
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	b291      	uxth	r1, r2
 8000fac:	4a09      	ldr	r2, [pc, #36]	@ (8000fd4 <HAL_I2SEx_TxRxHalfCpltCallback+0xec>)
 8000fae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < iteration; i += 2){
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	dba0      	blt.n	8000f02 <HAL_I2SEx_TxRxHalfCpltCallback+0x1a>
    //restore to buffer
    // txBuf[0] = (lSample>>16)&0xFFFF;
    // txBuf[1] = lSample&0xFFFF;
    // txBuf[2] = (rSample>>16)&0xFFFF;
    // txBuf[3] = rSample&0xFFFF;
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000190 	.word	0x20000190
 8000fd0:	2000059c 	.word	0x2000059c
 8000fd4:	20000390 	.word	0x20000390

08000fd8 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
    int iteration = BUFFER_SIZE/2;
 8000fe0:	2380      	movs	r3, #128	@ 0x80
 8000fe2:	613b      	str	r3, [r7, #16]
    int rSample = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
    int lSample = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]

    // Restore from buffer with looping
    for (int i = 0; i < iteration; i += 2){
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	e05a      	b.n	80010a8 <HAL_I2SEx_TxRxCpltCallback+0xd0>
        // Restore signed 24-bit sample from 16-bit buffers
        rSample = (int) (rxBuf[i]<<16) | rxBuf[i+1];
 8000ff2:	4a32      	ldr	r2, [pc, #200]	@ (80010bc <HAL_I2SEx_TxRxCpltCallback+0xe4>)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ffa:	041b      	lsls	r3, r3, #16
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	3201      	adds	r2, #1
 8001000:	492e      	ldr	r1, [pc, #184]	@ (80010bc <HAL_I2SEx_TxRxCpltCallback+0xe4>)
 8001002:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001006:	4313      	orrs	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
        lSample = (int) (rxBuf[i+2]<<16) | rxBuf[i+3];
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3302      	adds	r3, #2
 800100e:	4a2b      	ldr	r2, [pc, #172]	@ (80010bc <HAL_I2SEx_TxRxCpltCallback+0xe4>)
 8001010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001014:	041b      	lsls	r3, r3, #16
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	3203      	adds	r2, #3
 800101a:	4928      	ldr	r1, [pc, #160]	@ (80010bc <HAL_I2SEx_TxRxCpltCallback+0xe4>)
 800101c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001020:	4313      	orrs	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
 
        // Filter the left and right channels
        lSample = peaking_filter_update(&midLowFilt, lSample);
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	4823      	ldr	r0, [pc, #140]	@ (80010c0 <HAL_I2SEx_TxRxCpltCallback+0xe8>)
 8001034:	f000 f932 	bl	800129c <peaking_filter_update>
 8001038:	eef0 7a40 	vmov.f32	s15, s0
 800103c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001040:	ee17 3a90 	vmov	r3, s15
 8001044:	60bb      	str	r3, [r7, #8]
        rSample = peaking_filter_update(&midLowFilt, rSample);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	ee07 3a90 	vmov	s15, r3
 800104c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001050:	eeb0 0a67 	vmov.f32	s0, s15
 8001054:	481a      	ldr	r0, [pc, #104]	@ (80010c0 <HAL_I2SEx_TxRxCpltCallback+0xe8>)
 8001056:	f000 f921 	bl	800129c <peaking_filter_update>
 800105a:	eef0 7a40 	vmov.f32	s15, s0
 800105e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001062:	ee17 3a90 	vmov	r3, s15
 8001066:	60fb      	str	r3, [r7, #12]

        // Restore to buffer with looping
        txBuf[i] = (int)(lSample >> 16) & 0xFFFF;
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	0c1b      	lsrs	r3, r3, #16
 800106c:	b299      	uxth	r1, r3
 800106e:	4a15      	ldr	r2, [pc, #84]	@ (80010c4 <HAL_I2SEx_TxRxCpltCallback+0xec>)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        txBuf[i+1] = (int)lSample & 0xFFFF;
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	b291      	uxth	r1, r2
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <HAL_I2SEx_TxRxCpltCallback+0xec>)
 8001080:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        txBuf[i+2] = (int)(rSample >> 16) & 0xFFFF;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	0c1a      	lsrs	r2, r3, #16
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	3302      	adds	r3, #2
 800108c:	b291      	uxth	r1, r2
 800108e:	4a0d      	ldr	r2, [pc, #52]	@ (80010c4 <HAL_I2SEx_TxRxCpltCallback+0xec>)
 8001090:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        txBuf[i+3] = (int)rSample & 0xFFFF;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3303      	adds	r3, #3
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	b291      	uxth	r1, r2
 800109c:	4a09      	ldr	r2, [pc, #36]	@ (80010c4 <HAL_I2SEx_TxRxCpltCallback+0xec>)
 800109e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < iteration; i += 2){
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3302      	adds	r3, #2
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dba0      	blt.n	8000ff2 <HAL_I2SEx_TxRxCpltCallback+0x1a>
    //restore to buffer
    // txBuf[4] = (lSample>>16)&0xFFFF;
    // txBuf[5] = lSample&0xFFFF;
    // txBuf[6] = (rSample>>16)&0xFFFF;
    // txBuf[7] = rSample&0xFFFF;
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000190 	.word	0x20000190
 80010c0:	2000059c 	.word	0x2000059c
 80010c4:	20000390 	.word	0x20000390

080010c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010cc:	b672      	cpsid	i
}
 80010ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <Error_Handler+0x8>

080010d4 <peaking_filter_init>:

#define _USE_MATH_DEFINES
#include "peaking_filter.h"
//#include <stdio.h>

void peaking_filter_init(peaking_filter_data *filt) {
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
    // Initialize filter memory
    filt -> x[0] = 0.0f;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
    filt -> x[1] = 0.0f;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
    filt -> x[2] = 0.0f;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
    filt -> y[0] = 0.0f;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
    filt -> y[1] = 0.0f;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
    filt -> y[2] = 0.0f;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <peaking_filter_set_params>:

float dt = 1 / 96E3;

void peaking_filter_set_params(peaking_filter_data *filt, float gain, float centerFreq_hz, float q_width) {
 8001118:	b580      	push	{r7, lr}
 800111a:	ed2d 8b02 	vpush	{d8}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	ed87 0a02 	vstr	s0, [r7, #8]
 8001128:	edc7 0a01 	vstr	s1, [r7, #4]
 800112c:	ed87 1a00 	vstr	s2, [r7]
    // Convert Hz to rad/s
    float centerFreq_rad = 2 * M_PI * centerFreq_hz;
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff fad7 	bl	80006e4 <__aeabi_f2d>
 8001136:	a357      	add	r3, pc, #348	@ (adr r3, 8001294 <peaking_filter_set_params+0x17c>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff f844 	bl	80001c8 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fb24 	bl	8000794 <__aeabi_d2f>
 800114c:	4603      	mov	r3, r0
 800114e:	617b      	str	r3, [r7, #20]
    
    // Compute Quality factor (Q = fc / BW)
    // float Q = center_freq / bandwidth;

    // Guide
    float wcT = centerFreq_rad * dt;
 8001150:	4b4f      	ldr	r3, [pc, #316]	@ (8001290 <peaking_filter_set_params+0x178>)
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	ed97 7a05 	vldr	s14, [r7, #20]
 800115a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800115e:	edc7 7a04 	vstr	s15, [r7, #16]
    
    // Compute filter coefficients
    filt -> a[0] = 4.0f + (2.0f * (gain / q_width) * wcT) + powf((wcT),2);
 8001162:	edd7 6a02 	vldr	s13, [r7, #8]
 8001166:	ed97 7a00 	vldr	s14, [r7]
 800116a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800116e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001172:	edd7 7a04 	vldr	s15, [r7, #16]
 8001176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800117e:	ee37 8a87 	vadd.f32	s16, s15, s14
 8001182:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001186:	ed97 0a04 	vldr	s0, [r7, #16]
 800118a:	f002 fde3 	bl	8003d54 <powf>
 800118e:	eef0 7a40 	vmov.f32	s15, s0
 8001192:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	edc3 7a07 	vstr	s15, [r3, #28]
    filt -> a[1] = 2.0f * powf((wcT),2) - 8.0f;
 800119c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80011a0:	ed97 0a04 	vldr	s0, [r7, #16]
 80011a4:	f002 fdd6 	bl	8003d54 <powf>
 80011a8:	eef0 7a40 	vmov.f32	s15, s0
 80011ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011b0:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80011b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	edc3 7a08 	vstr	s15, [r3, #32]
    filt -> a[2] = 4.0f - (2.0f * (gain/q_width) * wcT) + powf((wcT),2);
 80011be:	edd7 6a02 	vldr	s13, [r7, #8]
 80011c2:	ed97 7a00 	vldr	s14, [r7]
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80011d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80011da:	ee37 8a67 	vsub.f32	s16, s14, s15
 80011de:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80011e2:	ed97 0a04 	vldr	s0, [r7, #16]
 80011e6:	f002 fdb5 	bl	8003d54 <powf>
 80011ea:	eef0 7a40 	vmov.f32	s15, s0
 80011ee:	ee78 7a27 	vadd.f32	s15, s16, s15
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    filt -> b[0] = 1.0f / (4.0f + 2.0f / q_width * wcT + wcT * wcT);
 80011f8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80011fc:	edd7 7a00 	vldr	s15, [r7]
 8001200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001204:	edd7 7a04 	vldr	s15, [r7, #16]
 8001208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800120c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001210:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001214:	edd7 7a04 	vldr	s15, [r7, #16]
 8001218:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800121c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001220:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    filt -> b[1] = -(2.0f * wcT * wcT - 8.0f);
 800122e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001232:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001236:	edd7 7a04 	vldr	s15, [r7, #16]
 800123a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800123e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001242:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001246:	eef1 7a67 	vneg.f32	s15, s15
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    filt -> b[2] = -(4.0f - 2.0f / q_width * wcT + wcT * wcT);
 8001250:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001254:	edd7 7a00 	vldr	s15, [r7]
 8001258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800125c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001264:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001268:	ee37 7a67 	vsub.f32	s14, s14, s15
 800126c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001270:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001278:	eef1 7a67 	vneg.f32	s15, s15
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	ecbd 8b02 	vpop	{d8}
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000000c 	.word	0x2000000c
 8001294:	54442d18 	.word	0x54442d18
 8001298:	401921fb 	.word	0x401921fb

0800129c <peaking_filter_update>:

float peaking_filter_update(peaking_filter_data *filt, float in) {
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	ed87 0a00 	vstr	s0, [r7]
    // Update filter memory
    filt -> x[2] = filt -> x[1];
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	60da      	str	r2, [r3, #12]
    filt -> x[1] = filt -> x[0];
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	609a      	str	r2, [r3, #8]
    filt -> x[0] = in;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	605a      	str	r2, [r3, #4]
    filt -> y[2] = filt -> y[1];
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695a      	ldr	r2, [r3, #20]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	619a      	str	r2, [r3, #24]
    filt -> y[1] = filt -> y[0];
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691a      	ldr	r2, [r3, #16]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	615a      	str	r2, [r3, #20]

    // Compute filter output
    filt -> y[0] = ((filt -> a[0] * filt -> x[0] + filt -> a[1] * filt -> x[1] + filt -> a[2] * filt -> x[2]) + (filt -> b[1] * filt -> y[1] + filt -> b[2] * filt -> y[2])) * filt -> b[0]; // / filt -> b[0];
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	ed93 7a07 	vldr	s14, [r3, #28]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 6a08 	vldr	s13, [r3, #32]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80012ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80012fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001302:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001312:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	ed93 6a0c 	vldr	s12, [r3, #48]	@ 0x30
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001322:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800132a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	edc3 7a04 	vstr	s15, [r3, #16]
    return filt -> y[0];
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	ee07 3a90 	vmov	s15, r3
}
 8001346:	eeb0 0a67 	vmov.f32	s0, s15
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	4a0f      	ldr	r2, [pc, #60]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001368:	6453      	str	r3, [r2, #68]	@ 0x44
 800136a:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <HAL_MspInit+0x4c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <HAL_MspInit+0x4c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	4a08      	ldr	r2, [pc, #32]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001384:	6413      	str	r3, [r2, #64]	@ 0x40
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	@ 0x38
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a6b      	ldr	r2, [pc, #428]	@ (800157c <HAL_I2S_MspInit+0x1d8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	f040 80cf 	bne.w	8001574 <HAL_I2S_MspInit+0x1d0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013d6:	2301      	movs	r3, #1
 80013d8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80013da:	23c0      	movs	r3, #192	@ 0xc0
 80013dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80013de:	2302      	movs	r3, #2
 80013e0:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 fb40 	bl	8003a6c <HAL_RCCEx_PeriphCLKConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80013f2:	f7ff fe69 	bl	80010c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	4b61      	ldr	r3, [pc, #388]	@ (8001580 <HAL_I2S_MspInit+0x1dc>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	4a60      	ldr	r2, [pc, #384]	@ (8001580 <HAL_I2S_MspInit+0x1dc>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001404:	6413      	str	r3, [r2, #64]	@ 0x40
 8001406:	4b5e      	ldr	r3, [pc, #376]	@ (8001580 <HAL_I2S_MspInit+0x1dc>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b5a      	ldr	r3, [pc, #360]	@ (8001580 <HAL_I2S_MspInit+0x1dc>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a59      	ldr	r2, [pc, #356]	@ (8001580 <HAL_I2S_MspInit+0x1dc>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b57      	ldr	r3, [pc, #348]	@ (8001580 <HAL_I2S_MspInit+0x1dc>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	4b53      	ldr	r3, [pc, #332]	@ (8001580 <HAL_I2S_MspInit+0x1dc>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a52      	ldr	r2, [pc, #328]	@ (8001580 <HAL_I2S_MspInit+0x1dc>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b50      	ldr	r3, [pc, #320]	@ (8001580 <HAL_I2S_MspInit+0x1dc>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800144a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800145c:	2305      	movs	r3, #5
 800145e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	4847      	ldr	r0, [pc, #284]	@ (8001584 <HAL_I2S_MspInit+0x1e0>)
 8001468:	f000 fe0c 	bl	8002084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800146c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800147e:	2306      	movs	r3, #6
 8001480:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001486:	4619      	mov	r1, r3
 8001488:	483e      	ldr	r0, [pc, #248]	@ (8001584 <HAL_I2S_MspInit+0x1e0>)
 800148a:	f000 fdfb 	bl	8002084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800148e:	2340      	movs	r3, #64	@ 0x40
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800149e:	2305      	movs	r3, #5
 80014a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a6:	4619      	mov	r1, r3
 80014a8:	4837      	ldr	r0, [pc, #220]	@ (8001588 <HAL_I2S_MspInit+0x1e4>)
 80014aa:	f000 fdeb 	bl	8002084 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 80014ae:	4b37      	ldr	r3, [pc, #220]	@ (800158c <HAL_I2S_MspInit+0x1e8>)
 80014b0:	4a37      	ldr	r2, [pc, #220]	@ (8001590 <HAL_I2S_MspInit+0x1ec>)
 80014b2:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 80014b4:	4b35      	ldr	r3, [pc, #212]	@ (800158c <HAL_I2S_MspInit+0x1e8>)
 80014b6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80014ba:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014bc:	4b33      	ldr	r3, [pc, #204]	@ (800158c <HAL_I2S_MspInit+0x1e8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c2:	4b32      	ldr	r3, [pc, #200]	@ (800158c <HAL_I2S_MspInit+0x1e8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014c8:	4b30      	ldr	r3, [pc, #192]	@ (800158c <HAL_I2S_MspInit+0x1e8>)
 80014ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ce:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014d0:	4b2e      	ldr	r3, [pc, #184]	@ (800158c <HAL_I2S_MspInit+0x1e8>)
 80014d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014d6:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014d8:	4b2c      	ldr	r3, [pc, #176]	@ (800158c <HAL_I2S_MspInit+0x1e8>)
 80014da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014de:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 80014e0:	4b2a      	ldr	r3, [pc, #168]	@ (800158c <HAL_I2S_MspInit+0x1e8>)
 80014e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014e6:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80014e8:	4b28      	ldr	r3, [pc, #160]	@ (800158c <HAL_I2S_MspInit+0x1e8>)
 80014ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014ee:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014f0:	4b26      	ldr	r3, [pc, #152]	@ (800158c <HAL_I2S_MspInit+0x1e8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 80014f6:	4825      	ldr	r0, [pc, #148]	@ (800158c <HAL_I2S_MspInit+0x1e8>)
 80014f8:	f000 fa54 	bl	80019a4 <HAL_DMA_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 8001502:	f7ff fde1 	bl	80010c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a20      	ldr	r2, [pc, #128]	@ (800158c <HAL_I2S_MspInit+0x1e8>)
 800150a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800150c:	4a1f      	ldr	r2, [pc, #124]	@ (800158c <HAL_I2S_MspInit+0x1e8>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001512:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <HAL_I2S_MspInit+0x1f0>)
 8001514:	4a20      	ldr	r2, [pc, #128]	@ (8001598 <HAL_I2S_MspInit+0x1f4>)
 8001516:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001518:	4b1e      	ldr	r3, [pc, #120]	@ (8001594 <HAL_I2S_MspInit+0x1f0>)
 800151a:	2200      	movs	r2, #0
 800151c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800151e:	4b1d      	ldr	r3, [pc, #116]	@ (8001594 <HAL_I2S_MspInit+0x1f0>)
 8001520:	2240      	movs	r2, #64	@ 0x40
 8001522:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001524:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <HAL_I2S_MspInit+0x1f0>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800152a:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <HAL_I2S_MspInit+0x1f0>)
 800152c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001530:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001532:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <HAL_I2S_MspInit+0x1f0>)
 8001534:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001538:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800153a:	4b16      	ldr	r3, [pc, #88]	@ (8001594 <HAL_I2S_MspInit+0x1f0>)
 800153c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001540:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001542:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <HAL_I2S_MspInit+0x1f0>)
 8001544:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001548:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800154a:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <HAL_I2S_MspInit+0x1f0>)
 800154c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001550:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001552:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <HAL_I2S_MspInit+0x1f0>)
 8001554:	2200      	movs	r2, #0
 8001556:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001558:	480e      	ldr	r0, [pc, #56]	@ (8001594 <HAL_I2S_MspInit+0x1f0>)
 800155a:	f000 fa23 	bl	80019a4 <HAL_DMA_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 8001564:	f7ff fdb0 	bl	80010c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <HAL_I2S_MspInit+0x1f0>)
 800156c:	639a      	str	r2, [r3, #56]	@ 0x38
 800156e:	4a09      	ldr	r2, [pc, #36]	@ (8001594 <HAL_I2S_MspInit+0x1f0>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001574:	bf00      	nop
 8001576:	3738      	adds	r7, #56	@ 0x38
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40003800 	.word	0x40003800
 8001580:	40023800 	.word	0x40023800
 8001584:	40020400 	.word	0x40020400
 8001588:	40020800 	.word	0x40020800
 800158c:	200000d0 	.word	0x200000d0
 8001590:	40026058 	.word	0x40026058
 8001594:	20000130 	.word	0x20000130
 8001598:	40026070 	.word	0x40026070

0800159c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <NMI_Handler+0x4>

080015a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <MemManage_Handler+0x4>

080015b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f2:	f000 f8a5 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <DMA1_Stream3_IRQHandler+0x10>)
 8001602:	f000 fad5 	bl	8001bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200000d0 	.word	0x200000d0

08001610 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <DMA1_Stream4_IRQHandler+0x10>)
 8001616:	f000 facb 	bl	8001bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000130 	.word	0x20000130

08001624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <SystemInit+0x20>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800162e:	4a05      	ldr	r2, [pc, #20]	@ (8001644 <SystemInit+0x20>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001680 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800164c:	f7ff ffea 	bl	8001624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001650:	480c      	ldr	r0, [pc, #48]	@ (8001684 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001652:	490d      	ldr	r1, [pc, #52]	@ (8001688 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001654:	4a0d      	ldr	r2, [pc, #52]	@ (800168c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001668:	4c0a      	ldr	r4, [pc, #40]	@ (8001694 <LoopFillZerobss+0x22>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001676:	f002 fb49 	bl	8003d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7ff fa53 	bl	8000b24 <main>
  bx  lr    
 800167e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800168c:	08004540 	.word	0x08004540
  ldr r2, =_sbss
 8001690:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001694:	2000071c 	.word	0x2000071c

08001698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a0:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0d      	ldr	r2, [pc, #52]	@ (80016dc <HAL_Init+0x40>)
 80016a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <HAL_Init+0x40>)
 80016b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	@ (80016dc <HAL_Init+0x40>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 f92b 	bl	8001920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	200f      	movs	r0, #15
 80016cc:	f000 f808 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff fe40 	bl	8001354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023c00 	.word	0x40023c00

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_InitTick+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <HAL_InitTick+0x58>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f943 	bl	800198a <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 f90b 	bl	8001936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	@ (800173c <HAL_InitTick+0x5c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000010 	.word	0x20000010
 8001738:	20000018 	.word	0x20000018
 800173c:	20000014 	.word	0x20000014

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	@ (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000018 	.word	0x20000018
 8001764:	200005e0 	.word	0x200005e0

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	@ (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200005e0 	.word	0x200005e0

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db0b      	blt.n	800180e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4907      	ldr	r1, [pc, #28]	@ (800181c <__NVIC_EnableIRQ+0x38>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2001      	movs	r0, #1
 8001806:	fa00 f202 	lsl.w	r2, r0, r2
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000e100 	.word	0xe000e100

08001820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	@ (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	@ (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	@ 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf28      	it	cs
 8001892:	2304      	movcs	r3, #4
 8001894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3304      	adds	r3, #4
 800189a:	2b06      	cmp	r3, #6
 800189c:	d902      	bls.n	80018a4 <NVIC_EncodePriority+0x30>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3b03      	subs	r3, #3
 80018a2:	e000      	b.n	80018a6 <NVIC_EncodePriority+0x32>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	401a      	ands	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
         );
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	@ 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018ec:	d301      	bcc.n	80018f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00f      	b.n	8001912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f2:	4a0a      	ldr	r2, [pc, #40]	@ (800191c <SysTick_Config+0x40>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fa:	210f      	movs	r1, #15
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f7ff ff8e 	bl	8001820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <SysTick_Config+0x40>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190a:	4b04      	ldr	r3, [pc, #16]	@ (800191c <SysTick_Config+0x40>)
 800190c:	2207      	movs	r2, #7
 800190e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	e000e010 	.word	0xe000e010

08001920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff29 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001948:	f7ff ff3e 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 800194c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	6978      	ldr	r0, [r7, #20]
 8001954:	f7ff ff8e 	bl	8001874 <NVIC_EncodePriority>
 8001958:	4602      	mov	r2, r0
 800195a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff5d 	bl	8001820 <__NVIC_SetPriority>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff31 	bl	80017e4 <__NVIC_EnableIRQ>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffa2 	bl	80018dc <SysTick_Config>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff feda 	bl	8001768 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e099      	b.n	8001af4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0201 	bic.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019e0:	e00f      	b.n	8001a02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019e2:	f7ff fec1 	bl	8001768 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d908      	bls.n	8001a02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2220      	movs	r2, #32
 80019f4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2203      	movs	r2, #3
 80019fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e078      	b.n	8001af4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1e8      	bne.n	80019e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	4b38      	ldr	r3, [pc, #224]	@ (8001afc <HAL_DMA_Init+0x158>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d107      	bne.n	8001a6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a64:	4313      	orrs	r3, r2
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f023 0307 	bic.w	r3, r3, #7
 8001a82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d117      	bne.n	8001ac6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00e      	beq.n	8001ac6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 fa6f 	bl	8001f8c <DMA_CheckFifoParam>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2240      	movs	r2, #64	@ 0x40
 8001ab8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e016      	b.n	8001af4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fa26 	bl	8001f20 <DMA_CalcBaseAndBitshift>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001adc:	223f      	movs	r2, #63	@ 0x3f
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	f010803f 	.word	0xf010803f

08001b00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_DMA_Start_IT+0x26>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e040      	b.n	8001ba8 <HAL_DMA_Start_IT+0xa8>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d12f      	bne.n	8001b9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 f9b8 	bl	8001ec4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b58:	223f      	movs	r2, #63	@ 0x3f
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0216 	orr.w	r2, r2, #22
 8001b6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d007      	beq.n	8001b88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0208 	orr.w	r2, r2, #8
 8001b86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	e005      	b.n	8001ba6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bbc:	4b8e      	ldr	r3, [pc, #568]	@ (8001df8 <HAL_DMA_IRQHandler+0x248>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a8e      	ldr	r2, [pc, #568]	@ (8001dfc <HAL_DMA_IRQHandler+0x24c>)
 8001bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc6:	0a9b      	lsrs	r3, r3, #10
 8001bc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bda:	2208      	movs	r2, #8
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d01a      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0204 	bic.w	r2, r2, #4
 8001c02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c08:	2208      	movs	r2, #8
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c14:	f043 0201 	orr.w	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c20:	2201      	movs	r2, #1
 8001c22:	409a      	lsls	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d012      	beq.n	8001c52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00b      	beq.n	8001c52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3e:	2201      	movs	r2, #1
 8001c40:	409a      	lsls	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c4a:	f043 0202 	orr.w	r2, r3, #2
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c56:	2204      	movs	r2, #4
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d012      	beq.n	8001c88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00b      	beq.n	8001c88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c74:	2204      	movs	r2, #4
 8001c76:	409a      	lsls	r2, r3
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c80:	f043 0204 	orr.w	r2, r3, #4
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d043      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d03c      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001caa:	2210      	movs	r2, #16
 8001cac:	409a      	lsls	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d018      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d108      	bne.n	8001ce0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d024      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	4798      	blx	r3
 8001cde:	e01f      	b.n	8001d20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01b      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	4798      	blx	r3
 8001cf0:	e016      	b.n	8001d20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d107      	bne.n	8001d10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0208 	bic.w	r2, r2, #8
 8001d0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d24:	2220      	movs	r2, #32
 8001d26:	409a      	lsls	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 808f 	beq.w	8001e50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 8087 	beq.w	8001e50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d46:	2220      	movs	r2, #32
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d136      	bne.n	8001dc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0216 	bic.w	r2, r2, #22
 8001d68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d103      	bne.n	8001d8a <HAL_DMA_IRQHandler+0x1da>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d007      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0208 	bic.w	r2, r2, #8
 8001d98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9e:	223f      	movs	r2, #63	@ 0x3f
 8001da0:	409a      	lsls	r2, r3
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d07e      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	4798      	blx	r3
        }
        return;
 8001dc6:	e079      	b.n	8001ebc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d01d      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10d      	bne.n	8001e00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d031      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	4798      	blx	r3
 8001df4:	e02c      	b.n	8001e50 <HAL_DMA_IRQHandler+0x2a0>
 8001df6:	bf00      	nop
 8001df8:	20000010 	.word	0x20000010
 8001dfc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d023      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	4798      	blx	r3
 8001e10:	e01e      	b.n	8001e50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10f      	bne.n	8001e40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0210 	bic.w	r2, r2, #16
 8001e2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d032      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d022      	beq.n	8001eaa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2205      	movs	r2, #5
 8001e68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0201 	bic.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d307      	bcc.n	8001e98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f2      	bne.n	8001e7c <HAL_DMA_IRQHandler+0x2cc>
 8001e96:	e000      	b.n	8001e9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	4798      	blx	r3
 8001eba:	e000      	b.n	8001ebe <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ebc:	bf00      	nop
    }
  }
}
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ee0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b40      	cmp	r3, #64	@ 0x40
 8001ef0:	d108      	bne.n	8001f04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f02:	e007      	b.n	8001f14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	60da      	str	r2, [r3, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	3b10      	subs	r3, #16
 8001f30:	4a14      	ldr	r2, [pc, #80]	@ (8001f84 <DMA_CalcBaseAndBitshift+0x64>)
 8001f32:	fba2 2303 	umull	r2, r3, r2, r3
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f3a:	4a13      	ldr	r2, [pc, #76]	@ (8001f88 <DMA_CalcBaseAndBitshift+0x68>)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4413      	add	r3, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d909      	bls.n	8001f62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f56:	f023 0303 	bic.w	r3, r3, #3
 8001f5a:	1d1a      	adds	r2, r3, #4
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f60:	e007      	b.n	8001f72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f6a:	f023 0303 	bic.w	r3, r3, #3
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	aaaaaaab 	.word	0xaaaaaaab
 8001f88:	08004510 	.word	0x08004510

08001f8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d11f      	bne.n	8001fe6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d856      	bhi.n	800205a <DMA_CheckFifoParam+0xce>
 8001fac:	a201      	add	r2, pc, #4	@ (adr r2, 8001fb4 <DMA_CheckFifoParam+0x28>)
 8001fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb2:	bf00      	nop
 8001fb4:	08001fc5 	.word	0x08001fc5
 8001fb8:	08001fd7 	.word	0x08001fd7
 8001fbc:	08001fc5 	.word	0x08001fc5
 8001fc0:	0800205b 	.word	0x0800205b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d046      	beq.n	800205e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd4:	e043      	b.n	800205e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fda:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fde:	d140      	bne.n	8002062 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fe4:	e03d      	b.n	8002062 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fee:	d121      	bne.n	8002034 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d837      	bhi.n	8002066 <DMA_CheckFifoParam+0xda>
 8001ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ffc <DMA_CheckFifoParam+0x70>)
 8001ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffc:	0800200d 	.word	0x0800200d
 8002000:	08002013 	.word	0x08002013
 8002004:	0800200d 	.word	0x0800200d
 8002008:	08002025 	.word	0x08002025
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
      break;
 8002010:	e030      	b.n	8002074 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002016:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d025      	beq.n	800206a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002022:	e022      	b.n	800206a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002028:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800202c:	d11f      	bne.n	800206e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002032:	e01c      	b.n	800206e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d903      	bls.n	8002042 <DMA_CheckFifoParam+0xb6>
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b03      	cmp	r3, #3
 800203e:	d003      	beq.n	8002048 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002040:	e018      	b.n	8002074 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]
      break;
 8002046:	e015      	b.n	8002074 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00e      	beq.n	8002072 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
      break;
 8002058:	e00b      	b.n	8002072 <DMA_CheckFifoParam+0xe6>
      break;
 800205a:	bf00      	nop
 800205c:	e00a      	b.n	8002074 <DMA_CheckFifoParam+0xe8>
      break;
 800205e:	bf00      	nop
 8002060:	e008      	b.n	8002074 <DMA_CheckFifoParam+0xe8>
      break;
 8002062:	bf00      	nop
 8002064:	e006      	b.n	8002074 <DMA_CheckFifoParam+0xe8>
      break;
 8002066:	bf00      	nop
 8002068:	e004      	b.n	8002074 <DMA_CheckFifoParam+0xe8>
      break;
 800206a:	bf00      	nop
 800206c:	e002      	b.n	8002074 <DMA_CheckFifoParam+0xe8>
      break;   
 800206e:	bf00      	nop
 8002070:	e000      	b.n	8002074 <DMA_CheckFifoParam+0xe8>
      break;
 8002072:	bf00      	nop
    }
  } 
  
  return status; 
 8002074:	7bfb      	ldrb	r3, [r7, #15]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop

08002084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	@ 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	e16b      	b.n	8002378 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a0:	2201      	movs	r2, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	f040 815a 	bne.w	8002372 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d005      	beq.n	80020d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d130      	bne.n	8002138 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	2203      	movs	r2, #3
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800210c:	2201      	movs	r2, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 0201 	and.w	r2, r3, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b03      	cmp	r3, #3
 8002142:	d017      	beq.n	8002174 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d123      	bne.n	80021c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	08da      	lsrs	r2, r3, #3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3208      	adds	r2, #8
 8002188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	220f      	movs	r2, #15
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	08da      	lsrs	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3208      	adds	r2, #8
 80021c2:	69b9      	ldr	r1, [r7, #24]
 80021c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	2203      	movs	r2, #3
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0203 	and.w	r2, r3, #3
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80b4 	beq.w	8002372 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	4b60      	ldr	r3, [pc, #384]	@ (8002390 <HAL_GPIO_Init+0x30c>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	4a5f      	ldr	r2, [pc, #380]	@ (8002390 <HAL_GPIO_Init+0x30c>)
 8002214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002218:	6453      	str	r3, [r2, #68]	@ 0x44
 800221a:	4b5d      	ldr	r3, [pc, #372]	@ (8002390 <HAL_GPIO_Init+0x30c>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002226:	4a5b      	ldr	r2, [pc, #364]	@ (8002394 <HAL_GPIO_Init+0x310>)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	3302      	adds	r3, #2
 800222e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	220f      	movs	r2, #15
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a52      	ldr	r2, [pc, #328]	@ (8002398 <HAL_GPIO_Init+0x314>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d02b      	beq.n	80022aa <HAL_GPIO_Init+0x226>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a51      	ldr	r2, [pc, #324]	@ (800239c <HAL_GPIO_Init+0x318>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d025      	beq.n	80022a6 <HAL_GPIO_Init+0x222>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a50      	ldr	r2, [pc, #320]	@ (80023a0 <HAL_GPIO_Init+0x31c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01f      	beq.n	80022a2 <HAL_GPIO_Init+0x21e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4f      	ldr	r2, [pc, #316]	@ (80023a4 <HAL_GPIO_Init+0x320>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d019      	beq.n	800229e <HAL_GPIO_Init+0x21a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4e      	ldr	r2, [pc, #312]	@ (80023a8 <HAL_GPIO_Init+0x324>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_GPIO_Init+0x216>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4d      	ldr	r2, [pc, #308]	@ (80023ac <HAL_GPIO_Init+0x328>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00d      	beq.n	8002296 <HAL_GPIO_Init+0x212>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4c      	ldr	r2, [pc, #304]	@ (80023b0 <HAL_GPIO_Init+0x32c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d007      	beq.n	8002292 <HAL_GPIO_Init+0x20e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a4b      	ldr	r2, [pc, #300]	@ (80023b4 <HAL_GPIO_Init+0x330>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d101      	bne.n	800228e <HAL_GPIO_Init+0x20a>
 800228a:	2307      	movs	r3, #7
 800228c:	e00e      	b.n	80022ac <HAL_GPIO_Init+0x228>
 800228e:	2308      	movs	r3, #8
 8002290:	e00c      	b.n	80022ac <HAL_GPIO_Init+0x228>
 8002292:	2306      	movs	r3, #6
 8002294:	e00a      	b.n	80022ac <HAL_GPIO_Init+0x228>
 8002296:	2305      	movs	r3, #5
 8002298:	e008      	b.n	80022ac <HAL_GPIO_Init+0x228>
 800229a:	2304      	movs	r3, #4
 800229c:	e006      	b.n	80022ac <HAL_GPIO_Init+0x228>
 800229e:	2303      	movs	r3, #3
 80022a0:	e004      	b.n	80022ac <HAL_GPIO_Init+0x228>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e002      	b.n	80022ac <HAL_GPIO_Init+0x228>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_GPIO_Init+0x228>
 80022aa:	2300      	movs	r3, #0
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	f002 0203 	and.w	r2, r2, #3
 80022b2:	0092      	lsls	r2, r2, #2
 80022b4:	4093      	lsls	r3, r2
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022bc:	4935      	ldr	r1, [pc, #212]	@ (8002394 <HAL_GPIO_Init+0x310>)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	3302      	adds	r3, #2
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ca:	4b3b      	ldr	r3, [pc, #236]	@ (80023b8 <HAL_GPIO_Init+0x334>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ee:	4a32      	ldr	r2, [pc, #200]	@ (80023b8 <HAL_GPIO_Init+0x334>)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f4:	4b30      	ldr	r3, [pc, #192]	@ (80023b8 <HAL_GPIO_Init+0x334>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002318:	4a27      	ldr	r2, [pc, #156]	@ (80023b8 <HAL_GPIO_Init+0x334>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800231e:	4b26      	ldr	r3, [pc, #152]	@ (80023b8 <HAL_GPIO_Init+0x334>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002342:	4a1d      	ldr	r2, [pc, #116]	@ (80023b8 <HAL_GPIO_Init+0x334>)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002348:	4b1b      	ldr	r3, [pc, #108]	@ (80023b8 <HAL_GPIO_Init+0x334>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800236c:	4a12      	ldr	r2, [pc, #72]	@ (80023b8 <HAL_GPIO_Init+0x334>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3301      	adds	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	2b0f      	cmp	r3, #15
 800237c:	f67f ae90 	bls.w	80020a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	3724      	adds	r7, #36	@ 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800
 8002394:	40013800 	.word	0x40013800
 8002398:	40020000 	.word	0x40020000
 800239c:	40020400 	.word	0x40020400
 80023a0:	40020800 	.word	0x40020800
 80023a4:	40020c00 	.word	0x40020c00
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40021400 	.word	0x40021400
 80023b0:	40021800 	.word	0x40021800
 80023b4:	40021c00 	.word	0x40021c00
 80023b8:	40013c00 	.word	0x40013c00

080023bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
 80023c8:	4613      	mov	r3, r2
 80023ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023cc:	787b      	ldrb	r3, [r7, #1]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d8:	e003      	b.n	80023e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023da:	887b      	ldrh	r3, [r7, #2]
 80023dc:	041a      	lsls	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	619a      	str	r2, [r3, #24]
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e128      	b.n	8002654 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a90      	ldr	r2, [pc, #576]	@ (800265c <HAL_I2S_Init+0x26c>)
 800241a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7fe ffc1 	bl	80013a4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2202      	movs	r2, #2
 8002426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002438:	f023 030f 	bic.w	r3, r3, #15
 800243c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2202      	movs	r2, #2
 8002444:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d060      	beq.n	8002510 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d102      	bne.n	800245c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002456:	2310      	movs	r3, #16
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e001      	b.n	8002460 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800245c:	2320      	movs	r3, #32
 800245e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b20      	cmp	r3, #32
 8002466:	d802      	bhi.n	800246e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800246e:	2001      	movs	r0, #1
 8002470:	f001 fbde 	bl	8003c30 <HAL_RCCEx_GetPeriphCLKFreq>
 8002474:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800247e:	d125      	bne.n	80024cc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d010      	beq.n	80024aa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	461a      	mov	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	3305      	adds	r3, #5
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	e01f      	b.n	80024ea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	461a      	mov	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c6:	3305      	adds	r3, #5
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	e00e      	b.n	80024ea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	461a      	mov	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	3305      	adds	r3, #5
 80024e8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4a5c      	ldr	r2, [pc, #368]	@ (8002660 <HAL_I2S_Init+0x270>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	08db      	lsrs	r3, r3, #3
 80024f4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	085b      	lsrs	r3, r3, #1
 8002506:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	e003      	b.n	8002518 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002510:	2302      	movs	r3, #2
 8002512:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d902      	bls.n	8002524 <HAL_I2S_Init+0x134>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	2bff      	cmp	r3, #255	@ 0xff
 8002522:	d907      	bls.n	8002534 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002528:	f043 0210 	orr.w	r2, r3, #16
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e08f      	b.n	8002654 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	ea42 0103 	orr.w	r1, r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69fa      	ldr	r2, [r7, #28]
 8002544:	430a      	orrs	r2, r1
 8002546:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002552:	f023 030f 	bic.w	r3, r3, #15
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6851      	ldr	r1, [r2, #4]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6892      	ldr	r2, [r2, #8]
 800255e:	4311      	orrs	r1, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68d2      	ldr	r2, [r2, #12]
 8002564:	4311      	orrs	r1, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6992      	ldr	r2, [r2, #24]
 800256a:	430a      	orrs	r2, r1
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002576:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d161      	bne.n	8002644 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a38      	ldr	r2, [pc, #224]	@ (8002664 <HAL_I2S_Init+0x274>)
 8002584:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a37      	ldr	r2, [pc, #220]	@ (8002668 <HAL_I2S_Init+0x278>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d101      	bne.n	8002594 <HAL_I2S_Init+0x1a4>
 8002590:	4b36      	ldr	r3, [pc, #216]	@ (800266c <HAL_I2S_Init+0x27c>)
 8002592:	e001      	b.n	8002598 <HAL_I2S_Init+0x1a8>
 8002594:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	4932      	ldr	r1, [pc, #200]	@ (8002668 <HAL_I2S_Init+0x278>)
 80025a0:	428a      	cmp	r2, r1
 80025a2:	d101      	bne.n	80025a8 <HAL_I2S_Init+0x1b8>
 80025a4:	4a31      	ldr	r2, [pc, #196]	@ (800266c <HAL_I2S_Init+0x27c>)
 80025a6:	e001      	b.n	80025ac <HAL_I2S_Init+0x1bc>
 80025a8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80025ac:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80025b0:	f023 030f 	bic.w	r3, r3, #15
 80025b4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002668 <HAL_I2S_Init+0x278>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d101      	bne.n	80025c4 <HAL_I2S_Init+0x1d4>
 80025c0:	4b2a      	ldr	r3, [pc, #168]	@ (800266c <HAL_I2S_Init+0x27c>)
 80025c2:	e001      	b.n	80025c8 <HAL_I2S_Init+0x1d8>
 80025c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80025c8:	2202      	movs	r2, #2
 80025ca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a25      	ldr	r2, [pc, #148]	@ (8002668 <HAL_I2S_Init+0x278>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <HAL_I2S_Init+0x1ea>
 80025d6:	4b25      	ldr	r3, [pc, #148]	@ (800266c <HAL_I2S_Init+0x27c>)
 80025d8:	e001      	b.n	80025de <HAL_I2S_Init+0x1ee>
 80025da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025ea:	d003      	beq.n	80025f4 <HAL_I2S_Init+0x204>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d103      	bne.n	80025fc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80025f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	e001      	b.n	8002600 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80025fc:	2300      	movs	r3, #0
 80025fe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800260a:	4313      	orrs	r3, r2
 800260c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002614:	4313      	orrs	r3, r2
 8002616:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800261e:	4313      	orrs	r3, r2
 8002620:	b29a      	uxth	r2, r3
 8002622:	897b      	ldrh	r3, [r7, #10]
 8002624:	4313      	orrs	r3, r2
 8002626:	b29b      	uxth	r3, r3
 8002628:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800262c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a0d      	ldr	r2, [pc, #52]	@ (8002668 <HAL_I2S_Init+0x278>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d101      	bne.n	800263c <HAL_I2S_Init+0x24c>
 8002638:	4b0c      	ldr	r3, [pc, #48]	@ (800266c <HAL_I2S_Init+0x27c>)
 800263a:	e001      	b.n	8002640 <HAL_I2S_Init+0x250>
 800263c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002640:	897a      	ldrh	r2, [r7, #10]
 8002642:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3720      	adds	r7, #32
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	08002767 	.word	0x08002767
 8002660:	cccccccd 	.word	0xcccccccd
 8002664:	08002b91 	.word	0x08002b91
 8002668:	40003800 	.word	0x40003800
 800266c:	40003400 	.word	0x40003400

08002670 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	881a      	ldrh	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c4:	1c9a      	adds	r2, r3, #2
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10e      	bne.n	8002700 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80026f0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ffb8 	bl	8002670 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271a:	b292      	uxth	r2, r2
 800271c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002722:	1c9a      	adds	r2, r3, #2
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800273a:	b29b      	uxth	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10e      	bne.n	800275e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800274e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ff93 	bl	8002684 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b04      	cmp	r3, #4
 8002780:	d13a      	bne.n	80027f8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b01      	cmp	r3, #1
 800278a:	d109      	bne.n	80027a0 <I2S_IRQHandler+0x3a>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002796:	2b40      	cmp	r3, #64	@ 0x40
 8002798:	d102      	bne.n	80027a0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff ffb4 	bl	8002708 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a6:	2b40      	cmp	r3, #64	@ 0x40
 80027a8:	d126      	bne.n	80027f8 <I2S_IRQHandler+0x92>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d11f      	bne.n	80027f8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	f043 0202 	orr.w	r2, r3, #2
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ff50 	bl	8002698 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b03      	cmp	r3, #3
 8002802:	d136      	bne.n	8002872 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b02      	cmp	r3, #2
 800280c:	d109      	bne.n	8002822 <I2S_IRQHandler+0xbc>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002818:	2b80      	cmp	r3, #128	@ 0x80
 800281a:	d102      	bne.n	8002822 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ff45 	bl	80026ac <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b08      	cmp	r3, #8
 800282a:	d122      	bne.n	8002872 <I2S_IRQHandler+0x10c>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	2b20      	cmp	r3, #32
 8002838:	d11b      	bne.n	8002872 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002848:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002864:	f043 0204 	orr.w	r2, r3, #4
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff ff13 	bl	8002698 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002872:	bf00      	nop
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d002      	beq.n	80028a8 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 80028a2:	2302      	movs	r3, #2
 80028a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028a6:	e160      	b.n	8002b6a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d005      	beq.n	80028ba <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80028b4:	887b      	ldrh	r3, [r7, #2]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e15a      	b.n	8002b74 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_I2SEx_TransmitReceive_DMA+0x52>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e152      	b.n	8002b74 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  hi2s->pTxBuffPtr = pTxData;
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->pRxBuffPtr = pRxData;
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d002      	beq.n	80028fa <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2b05      	cmp	r3, #5
 80028f8:	d114      	bne.n	8002924 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 80028fa:	887b      	ldrh	r3, [r7, #2]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002904:	887b      	ldrh	r3, [r7, #2]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 800290e:	887b      	ldrh	r3, [r7, #2]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002918:	887b      	ldrh	r3, [r7, #2]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	865a      	strh	r2, [r3, #50]	@ 0x32
 8002922:	e00b      	b.n	800293c <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	887a      	ldrh	r2, [r7, #2]
 800292e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = Size;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	887a      	ldrh	r2, [r7, #2]
 8002934:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	887a      	ldrh	r2, [r7, #2]
 800293a:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2205      	movs	r2, #5
 8002946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294e:	4a8b      	ldr	r2, [pc, #556]	@ (8002b7c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002950:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002956:	4a8a      	ldr	r2, [pc, #552]	@ (8002b80 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002958:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295e:	4a89      	ldr	r2, [pc, #548]	@ (8002b84 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002960:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002966:	2200      	movs	r2, #0
 8002968:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800296e:	2200      	movs	r2, #0
 8002970:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002976:	4a83      	ldr	r2, [pc, #524]	@ (8002b84 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002978:	64da      	str	r2, [r3, #76]	@ 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002984:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800298c:	d002      	beq.n	8002994 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d16b      	bne.n	8002a6c <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a79      	ldr	r2, [pc, #484]	@ (8002b88 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 80029a6:	4b79      	ldr	r3, [pc, #484]	@ (8002b8c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80029a8:	e001      	b.n	80029ae <HAL_I2SEx_TransmitReceive_DMA+0x132>
 80029aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029ae:	330c      	adds	r3, #12
 80029b0:	4619      	mov	r1, r3
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	f7ff f8a0 	bl	8001b00 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a70      	ldr	r2, [pc, #448]	@ (8002b88 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d101      	bne.n	80029ce <HAL_I2SEx_TransmitReceive_DMA+0x152>
 80029ca:	4b70      	ldr	r3, [pc, #448]	@ (8002b8c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80029cc:	e001      	b.n	80029d2 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 80029ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	496b      	ldr	r1, [pc, #428]	@ (8002b88 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80029da:	428b      	cmp	r3, r1
 80029dc:	d101      	bne.n	80029e2 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 80029de:	4b6b      	ldr	r3, [pc, #428]	@ (8002b8c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80029e0:	e001      	b.n	80029e6 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 80029e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80029ec:	f107 0308 	add.w	r3, r7, #8
 80029f0:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	6819      	ldr	r1, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	330c      	adds	r3, #12
 8002a00:	461a      	mov	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	f7ff f87a 	bl	8001b00 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0202 	orr.w	r2, r2, #2
 8002a1a:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a2a:	f000 809e 	beq.w	8002b6a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a55      	ldr	r2, [pc, #340]	@ (8002b88 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d101      	bne.n	8002a3c <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002a38:	4b54      	ldr	r3, [pc, #336]	@ (8002b8c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002a3a:	e001      	b.n	8002a40 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002a3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4950      	ldr	r1, [pc, #320]	@ (8002b88 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002a48:	428b      	cmp	r3, r1
 8002a4a:	d101      	bne.n	8002a50 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002a4c:	4b4f      	ldr	r3, [pc, #316]	@ (8002b8c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002a4e:	e001      	b.n	8002a54 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002a50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a58:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a68:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002a6a:	e07e      	b.n	8002b6a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a7a:	d10a      	bne.n	8002a92 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002a92:	f107 0308 	add.w	r3, r7, #8
 8002a96:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	6819      	ldr	r1, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a38      	ldr	r2, [pc, #224]	@ (8002b88 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d101      	bne.n	8002aae <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8002aaa:	4b38      	ldr	r3, [pc, #224]	@ (8002b8c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002aac:	e001      	b.n	8002ab2 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002aae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ab2:	330c      	adds	r3, #12
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	f7ff f820 	bl	8001b00 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a30      	ldr	r2, [pc, #192]	@ (8002b88 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d101      	bne.n	8002ace <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8002aca:	4b30      	ldr	r3, [pc, #192]	@ (8002b8c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002acc:	e001      	b.n	8002ad2 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002ace:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	492b      	ldr	r1, [pc, #172]	@ (8002b88 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002ada:	428b      	cmp	r3, r1
 8002adc:	d101      	bne.n	8002ae2 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002ade:	4b2b      	ldr	r3, [pc, #172]	@ (8002b8c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002ae0:	e001      	b.n	8002ae6 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002ae2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ae6:	f042 0202 	orr.w	r2, r2, #2
 8002aea:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002aec:	1d3b      	adds	r3, r7, #4
 8002aee:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	330c      	adds	r3, #12
 8002afa:	4619      	mov	r1, r3
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f7fe fffb 	bl	8001b00 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b28:	d01e      	beq.n	8002b68 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a16      	ldr	r2, [pc, #88]	@ (8002b88 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d101      	bne.n	8002b38 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002b34:	4b15      	ldr	r3, [pc, #84]	@ (8002b8c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002b36:	e001      	b.n	8002b3c <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002b38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4911      	ldr	r1, [pc, #68]	@ (8002b88 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002b44:	428b      	cmp	r3, r1
 8002b46:	d101      	bne.n	8002b4c <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002b48:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002b4a:	e001      	b.n	8002b50 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002b4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b54:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69da      	ldr	r2, [r3, #28]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b64:	61da      	str	r2, [r3, #28]
 8002b66:	e000      	b.n	8002b6a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002b68:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return errorcode;
 8002b72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3720      	adds	r7, #32
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	08002e39 	.word	0x08002e39
 8002b80:	08002e55 	.word	0x08002e55
 8002b84:	08002f2d 	.word	0x08002f2d
 8002b88:	40003800 	.word	0x40003800
 8002b8c:	40003400 	.word	0x40003400

08002b90 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a92      	ldr	r2, [pc, #584]	@ (8002df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d101      	bne.n	8002bae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002baa:	4b92      	ldr	r3, [pc, #584]	@ (8002df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bac:	e001      	b.n	8002bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002bae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a8b      	ldr	r2, [pc, #556]	@ (8002df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d101      	bne.n	8002bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002bc8:	4b8a      	ldr	r3, [pc, #552]	@ (8002df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bca:	e001      	b.n	8002bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002bcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bdc:	d004      	beq.n	8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f040 8099 	bne.w	8002d1a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d107      	bne.n	8002c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f9d5 	bl	8002fac <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d107      	bne.n	8002c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fa78 	bl	800310c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c22:	2b40      	cmp	r3, #64	@ 0x40
 8002c24:	d13a      	bne.n	8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d035      	beq.n	8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a6e      	ldr	r2, [pc, #440]	@ (8002df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d101      	bne.n	8002c3e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c3a:	4b6e      	ldr	r3, [pc, #440]	@ (8002df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c3c:	e001      	b.n	8002c42 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4969      	ldr	r1, [pc, #420]	@ (8002df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c4a:	428b      	cmp	r3, r1
 8002c4c:	d101      	bne.n	8002c52 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c4e:	4b69      	ldr	r3, [pc, #420]	@ (8002df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c50:	e001      	b.n	8002c56 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c5a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c6a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8e:	f043 0202 	orr.w	r2, r3, #2
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff fcfe 	bl	8002698 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	f040 80c3 	bne.w	8002e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 80bd 	beq.w	8002e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002cc2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a49      	ldr	r2, [pc, #292]	@ (8002df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d101      	bne.n	8002cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002cce:	4b49      	ldr	r3, [pc, #292]	@ (8002df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cd0:	e001      	b.n	8002cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002cd2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4944      	ldr	r1, [pc, #272]	@ (8002df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cde:	428b      	cmp	r3, r1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002ce2:	4b44      	ldr	r3, [pc, #272]	@ (8002df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ce4:	e001      	b.n	8002cea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002ce6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002cee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0a:	f043 0204 	orr.w	r2, r3, #4
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff fcc0 	bl	8002698 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d18:	e089      	b.n	8002e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d107      	bne.n	8002d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f96e 	bl	8003010 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d107      	bne.n	8002d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f9ad 	bl	80030a8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d54:	2b40      	cmp	r3, #64	@ 0x40
 8002d56:	d12f      	bne.n	8002db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d02a      	beq.n	8002db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d70:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1e      	ldr	r2, [pc, #120]	@ (8002df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d101      	bne.n	8002d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d7e:	e001      	b.n	8002d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4919      	ldr	r1, [pc, #100]	@ (8002df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d8c:	428b      	cmp	r3, r1
 8002d8e:	d101      	bne.n	8002d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d90:	4b18      	ldr	r3, [pc, #96]	@ (8002df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d92:	e001      	b.n	8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d98:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d9c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002daa:	f043 0202 	orr.w	r2, r3, #2
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff fc70 	bl	8002698 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d136      	bne.n	8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d031      	beq.n	8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a07      	ldr	r2, [pc, #28]	@ (8002df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002dd6:	4b07      	ldr	r3, [pc, #28]	@ (8002df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dd8:	e001      	b.n	8002dde <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002dda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4902      	ldr	r1, [pc, #8]	@ (8002df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002de6:	428b      	cmp	r3, r1
 8002de8:	d106      	bne.n	8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002dea:	4b02      	ldr	r3, [pc, #8]	@ (8002df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dec:	e006      	b.n	8002dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002dee:	bf00      	nop
 8002df0:	40003800 	.word	0x40003800
 8002df4:	40003400 	.word	0x40003400
 8002df8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002dfc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e00:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1e:	f043 0204 	orr.w	r2, r3, #4
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff fc36 	bl	8002698 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e2c:	e000      	b.n	8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e2e:	bf00      	nop
}
 8002e30:	bf00      	nop
 8002e32:	3720      	adds	r7, #32
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f7fe f84e 	bl	8000ee8 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e60:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d155      	bne.n	8002f16 <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e78:	d006      	beq.n	8002e88 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d11e      	bne.n	8002ec6 <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a25      	ldr	r2, [pc, #148]	@ (8002f24 <I2SEx_TxRxDMACplt+0xd0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d101      	bne.n	8002e96 <I2SEx_TxRxDMACplt+0x42>
 8002e92:	4b25      	ldr	r3, [pc, #148]	@ (8002f28 <I2SEx_TxRxDMACplt+0xd4>)
 8002e94:	e001      	b.n	8002e9a <I2SEx_TxRxDMACplt+0x46>
 8002e96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4920      	ldr	r1, [pc, #128]	@ (8002f24 <I2SEx_TxRxDMACplt+0xd0>)
 8002ea2:	428b      	cmp	r3, r1
 8002ea4:	d101      	bne.n	8002eaa <I2SEx_TxRxDMACplt+0x56>
 8002ea6:	4b20      	ldr	r3, [pc, #128]	@ (8002f28 <I2SEx_TxRxDMACplt+0xd4>)
 8002ea8:	e001      	b.n	8002eae <I2SEx_TxRxDMACplt+0x5a>
 8002eaa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0202 	bic.w	r2, r2, #2
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	e01d      	b.n	8002f02 <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a12      	ldr	r2, [pc, #72]	@ (8002f24 <I2SEx_TxRxDMACplt+0xd0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d101      	bne.n	8002ee4 <I2SEx_TxRxDMACplt+0x90>
 8002ee0:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <I2SEx_TxRxDMACplt+0xd4>)
 8002ee2:	e001      	b.n	8002ee8 <I2SEx_TxRxDMACplt+0x94>
 8002ee4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	490d      	ldr	r1, [pc, #52]	@ (8002f24 <I2SEx_TxRxDMACplt+0xd0>)
 8002ef0:	428b      	cmp	r3, r1
 8002ef2:	d101      	bne.n	8002ef8 <I2SEx_TxRxDMACplt+0xa4>
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <I2SEx_TxRxDMACplt+0xd4>)
 8002ef6:	e001      	b.n	8002efc <I2SEx_TxRxDMACplt+0xa8>
 8002ef8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002efc:	f022 0202 	bic.w	r2, r2, #2
 8002f00:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->TxXferCount = 0U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f7fe f85e 	bl	8000fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002f1c:	bf00      	nop
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40003800 	.word	0x40003800
 8002f28:	40003400 	.word	0x40003400

08002f2c <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0203 	bic.w	r2, r2, #3
 8002f48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a15      	ldr	r2, [pc, #84]	@ (8002fa4 <I2SEx_TxRxDMAError+0x78>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d101      	bne.n	8002f58 <I2SEx_TxRxDMAError+0x2c>
 8002f54:	4b14      	ldr	r3, [pc, #80]	@ (8002fa8 <I2SEx_TxRxDMAError+0x7c>)
 8002f56:	e001      	b.n	8002f5c <I2SEx_TxRxDMAError+0x30>
 8002f58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4910      	ldr	r1, [pc, #64]	@ (8002fa4 <I2SEx_TxRxDMAError+0x78>)
 8002f64:	428b      	cmp	r3, r1
 8002f66:	d101      	bne.n	8002f6c <I2SEx_TxRxDMAError+0x40>
 8002f68:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa8 <I2SEx_TxRxDMAError+0x7c>)
 8002f6a:	e001      	b.n	8002f70 <I2SEx_TxRxDMAError+0x44>
 8002f6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f70:	f022 0203 	bic.w	r2, r2, #3
 8002f74:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8e:	f043 0208 	orr.w	r2, r3, #8
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f7ff fb7e 	bl	8002698 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40003800 	.word	0x40003800
 8002fa8:	40003400 	.word	0x40003400

08002fac <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	1c99      	adds	r1, r3, #2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6251      	str	r1, [r2, #36]	@ 0x24
 8002fbe:	881a      	ldrh	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d113      	bne.n	8003006 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002fec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d106      	bne.n	8003006 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7fd ffe9 	bl	8000fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301c:	1c99      	adds	r1, r3, #2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6251      	str	r1, [r2, #36]	@ 0x24
 8003022:	8819      	ldrh	r1, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1d      	ldr	r2, [pc, #116]	@ (80030a0 <I2SEx_TxISR_I2SExt+0x90>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d101      	bne.n	8003032 <I2SEx_TxISR_I2SExt+0x22>
 800302e:	4b1d      	ldr	r3, [pc, #116]	@ (80030a4 <I2SEx_TxISR_I2SExt+0x94>)
 8003030:	e001      	b.n	8003036 <I2SEx_TxISR_I2SExt+0x26>
 8003032:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003036:	460a      	mov	r2, r1
 8003038:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d121      	bne.n	8003096 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a12      	ldr	r2, [pc, #72]	@ (80030a0 <I2SEx_TxISR_I2SExt+0x90>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d101      	bne.n	8003060 <I2SEx_TxISR_I2SExt+0x50>
 800305c:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <I2SEx_TxISR_I2SExt+0x94>)
 800305e:	e001      	b.n	8003064 <I2SEx_TxISR_I2SExt+0x54>
 8003060:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	490d      	ldr	r1, [pc, #52]	@ (80030a0 <I2SEx_TxISR_I2SExt+0x90>)
 800306c:	428b      	cmp	r3, r1
 800306e:	d101      	bne.n	8003074 <I2SEx_TxISR_I2SExt+0x64>
 8003070:	4b0c      	ldr	r3, [pc, #48]	@ (80030a4 <I2SEx_TxISR_I2SExt+0x94>)
 8003072:	e001      	b.n	8003078 <I2SEx_TxISR_I2SExt+0x68>
 8003074:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003078:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800307c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d106      	bne.n	8003096 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7fd ffa1 	bl	8000fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40003800 	.word	0x40003800
 80030a4:	40003400 	.word	0x40003400

080030a8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68d8      	ldr	r0, [r3, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ba:	1c99      	adds	r1, r3, #2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80030c0:	b282      	uxth	r2, r0
 80030c2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d113      	bne.n	8003104 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80030ea:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fd ff6a 	bl	8000fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a20      	ldr	r2, [pc, #128]	@ (800319c <I2SEx_RxISR_I2SExt+0x90>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d101      	bne.n	8003122 <I2SEx_RxISR_I2SExt+0x16>
 800311e:	4b20      	ldr	r3, [pc, #128]	@ (80031a0 <I2SEx_RxISR_I2SExt+0x94>)
 8003120:	e001      	b.n	8003126 <I2SEx_RxISR_I2SExt+0x1a>
 8003122:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003126:	68d8      	ldr	r0, [r3, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312c:	1c99      	adds	r1, r3, #2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003132:	b282      	uxth	r2, r0
 8003134:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d121      	bne.n	8003192 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a12      	ldr	r2, [pc, #72]	@ (800319c <I2SEx_RxISR_I2SExt+0x90>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d101      	bne.n	800315c <I2SEx_RxISR_I2SExt+0x50>
 8003158:	4b11      	ldr	r3, [pc, #68]	@ (80031a0 <I2SEx_RxISR_I2SExt+0x94>)
 800315a:	e001      	b.n	8003160 <I2SEx_RxISR_I2SExt+0x54>
 800315c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	490d      	ldr	r1, [pc, #52]	@ (800319c <I2SEx_RxISR_I2SExt+0x90>)
 8003168:	428b      	cmp	r3, r1
 800316a:	d101      	bne.n	8003170 <I2SEx_RxISR_I2SExt+0x64>
 800316c:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <I2SEx_RxISR_I2SExt+0x94>)
 800316e:	e001      	b.n	8003174 <I2SEx_RxISR_I2SExt+0x68>
 8003170:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003174:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003178:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d106      	bne.n	8003192 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7fd ff23 	bl	8000fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40003800 	.word	0x40003800
 80031a0:	40003400 	.word	0x40003400

080031a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e267      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d075      	beq.n	80032ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031c2:	4b88      	ldr	r3, [pc, #544]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d00c      	beq.n	80031e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ce:	4b85      	ldr	r3, [pc, #532]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d112      	bne.n	8003200 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031da:	4b82      	ldr	r3, [pc, #520]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031e6:	d10b      	bne.n	8003200 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e8:	4b7e      	ldr	r3, [pc, #504]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d05b      	beq.n	80032ac <HAL_RCC_OscConfig+0x108>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d157      	bne.n	80032ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e242      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003208:	d106      	bne.n	8003218 <HAL_RCC_OscConfig+0x74>
 800320a:	4b76      	ldr	r3, [pc, #472]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a75      	ldr	r2, [pc, #468]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	e01d      	b.n	8003254 <HAL_RCC_OscConfig+0xb0>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003220:	d10c      	bne.n	800323c <HAL_RCC_OscConfig+0x98>
 8003222:	4b70      	ldr	r3, [pc, #448]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a6f      	ldr	r2, [pc, #444]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003228:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	4b6d      	ldr	r3, [pc, #436]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a6c      	ldr	r2, [pc, #432]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e00b      	b.n	8003254 <HAL_RCC_OscConfig+0xb0>
 800323c:	4b69      	ldr	r3, [pc, #420]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a68      	ldr	r2, [pc, #416]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	4b66      	ldr	r3, [pc, #408]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a65      	ldr	r2, [pc, #404]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 800324e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d013      	beq.n	8003284 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fe fa84 	bl	8001768 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003264:	f7fe fa80 	bl	8001768 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b64      	cmp	r3, #100	@ 0x64
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e207      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003276:	4b5b      	ldr	r3, [pc, #364]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0xc0>
 8003282:	e014      	b.n	80032ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fe fa70 	bl	8001768 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800328c:	f7fe fa6c 	bl	8001768 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	@ 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e1f3      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329e:	4b51      	ldr	r3, [pc, #324]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0xe8>
 80032aa:	e000      	b.n	80032ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d063      	beq.n	8003382 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ba:	4b4a      	ldr	r3, [pc, #296]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00b      	beq.n	80032de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032c6:	4b47      	ldr	r3, [pc, #284]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d11c      	bne.n	800330c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d2:	4b44      	ldr	r3, [pc, #272]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d116      	bne.n	800330c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032de:	4b41      	ldr	r3, [pc, #260]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_RCC_OscConfig+0x152>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d001      	beq.n	80032f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e1c7      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f6:	4b3b      	ldr	r3, [pc, #236]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4937      	ldr	r1, [pc, #220]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330a:	e03a      	b.n	8003382 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d020      	beq.n	8003356 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003314:	4b34      	ldr	r3, [pc, #208]	@ (80033e8 <HAL_RCC_OscConfig+0x244>)
 8003316:	2201      	movs	r2, #1
 8003318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331a:	f7fe fa25 	bl	8001768 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003322:	f7fe fa21 	bl	8001768 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e1a8      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003334:	4b2b      	ldr	r3, [pc, #172]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003340:	4b28      	ldr	r3, [pc, #160]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4925      	ldr	r1, [pc, #148]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003350:	4313      	orrs	r3, r2
 8003352:	600b      	str	r3, [r1, #0]
 8003354:	e015      	b.n	8003382 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003356:	4b24      	ldr	r3, [pc, #144]	@ (80033e8 <HAL_RCC_OscConfig+0x244>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fe fa04 	bl	8001768 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003364:	f7fe fa00 	bl	8001768 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e187      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003376:	4b1b      	ldr	r3, [pc, #108]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f0      	bne.n	8003364 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d036      	beq.n	80033fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d016      	beq.n	80033c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003396:	4b15      	ldr	r3, [pc, #84]	@ (80033ec <HAL_RCC_OscConfig+0x248>)
 8003398:	2201      	movs	r2, #1
 800339a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339c:	f7fe f9e4 	bl	8001768 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a4:	f7fe f9e0 	bl	8001768 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e167      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b6:	4b0b      	ldr	r3, [pc, #44]	@ (80033e4 <HAL_RCC_OscConfig+0x240>)
 80033b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0x200>
 80033c2:	e01b      	b.n	80033fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c4:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <HAL_RCC_OscConfig+0x248>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ca:	f7fe f9cd 	bl	8001768 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d0:	e00e      	b.n	80033f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d2:	f7fe f9c9 	bl	8001768 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d907      	bls.n	80033f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e150      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
 80033e4:	40023800 	.word	0x40023800
 80033e8:	42470000 	.word	0x42470000
 80033ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f0:	4b88      	ldr	r3, [pc, #544]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 80033f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1ea      	bne.n	80033d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 8097 	beq.w	8003538 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340a:	2300      	movs	r3, #0
 800340c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800340e:	4b81      	ldr	r3, [pc, #516]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10f      	bne.n	800343a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	4b7d      	ldr	r3, [pc, #500]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	4a7c      	ldr	r2, [pc, #496]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 8003424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003428:	6413      	str	r3, [r2, #64]	@ 0x40
 800342a:	4b7a      	ldr	r3, [pc, #488]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003436:	2301      	movs	r3, #1
 8003438:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343a:	4b77      	ldr	r3, [pc, #476]	@ (8003618 <HAL_RCC_OscConfig+0x474>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d118      	bne.n	8003478 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003446:	4b74      	ldr	r3, [pc, #464]	@ (8003618 <HAL_RCC_OscConfig+0x474>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a73      	ldr	r2, [pc, #460]	@ (8003618 <HAL_RCC_OscConfig+0x474>)
 800344c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003452:	f7fe f989 	bl	8001768 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345a:	f7fe f985 	bl	8001768 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e10c      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	4b6a      	ldr	r3, [pc, #424]	@ (8003618 <HAL_RCC_OscConfig+0x474>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d106      	bne.n	800348e <HAL_RCC_OscConfig+0x2ea>
 8003480:	4b64      	ldr	r3, [pc, #400]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003484:	4a63      	ldr	r2, [pc, #396]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	6713      	str	r3, [r2, #112]	@ 0x70
 800348c:	e01c      	b.n	80034c8 <HAL_RCC_OscConfig+0x324>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b05      	cmp	r3, #5
 8003494:	d10c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x30c>
 8003496:	4b5f      	ldr	r3, [pc, #380]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349a:	4a5e      	ldr	r2, [pc, #376]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 800349c:	f043 0304 	orr.w	r3, r3, #4
 80034a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ae:	e00b      	b.n	80034c8 <HAL_RCC_OscConfig+0x324>
 80034b0:	4b58      	ldr	r3, [pc, #352]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b4:	4a57      	ldr	r2, [pc, #348]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 80034b6:	f023 0301 	bic.w	r3, r3, #1
 80034ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80034bc:	4b55      	ldr	r3, [pc, #340]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c0:	4a54      	ldr	r2, [pc, #336]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 80034c2:	f023 0304 	bic.w	r3, r3, #4
 80034c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d015      	beq.n	80034fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fe f94a 	bl	8001768 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fe f946 	bl	8001768 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e0cb      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ee:	4b49      	ldr	r3, [pc, #292]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0ee      	beq.n	80034d8 <HAL_RCC_OscConfig+0x334>
 80034fa:	e014      	b.n	8003526 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034fc:	f7fe f934 	bl	8001768 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003502:	e00a      	b.n	800351a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003504:	f7fe f930 	bl	8001768 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e0b5      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800351a:	4b3e      	ldr	r3, [pc, #248]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1ee      	bne.n	8003504 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003526:	7dfb      	ldrb	r3, [r7, #23]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d105      	bne.n	8003538 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800352c:	4b39      	ldr	r3, [pc, #228]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	4a38      	ldr	r2, [pc, #224]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 8003532:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003536:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80a1 	beq.w	8003684 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003542:	4b34      	ldr	r3, [pc, #208]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b08      	cmp	r3, #8
 800354c:	d05c      	beq.n	8003608 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d141      	bne.n	80035da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003556:	4b31      	ldr	r3, [pc, #196]	@ (800361c <HAL_RCC_OscConfig+0x478>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fe f904 	bl	8001768 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003564:	f7fe f900 	bl	8001768 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e087      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003576:	4b27      	ldr	r3, [pc, #156]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69da      	ldr	r2, [r3, #28]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	019b      	lsls	r3, r3, #6
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003598:	085b      	lsrs	r3, r3, #1
 800359a:	3b01      	subs	r3, #1
 800359c:	041b      	lsls	r3, r3, #16
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a4:	061b      	lsls	r3, r3, #24
 80035a6:	491b      	ldr	r1, [pc, #108]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ac:	4b1b      	ldr	r3, [pc, #108]	@ (800361c <HAL_RCC_OscConfig+0x478>)
 80035ae:	2201      	movs	r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b2:	f7fe f8d9 	bl	8001768 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ba:	f7fe f8d5 	bl	8001768 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e05c      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035cc:	4b11      	ldr	r3, [pc, #68]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCC_OscConfig+0x416>
 80035d8:	e054      	b.n	8003684 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035da:	4b10      	ldr	r3, [pc, #64]	@ (800361c <HAL_RCC_OscConfig+0x478>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7fe f8c2 	bl	8001768 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e8:	f7fe f8be 	bl	8001768 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e045      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fa:	4b06      	ldr	r3, [pc, #24]	@ (8003614 <HAL_RCC_OscConfig+0x470>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x444>
 8003606:	e03d      	b.n	8003684 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d107      	bne.n	8003620 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e038      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
 8003614:	40023800 	.word	0x40023800
 8003618:	40007000 	.word	0x40007000
 800361c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003620:	4b1b      	ldr	r3, [pc, #108]	@ (8003690 <HAL_RCC_OscConfig+0x4ec>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d028      	beq.n	8003680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d121      	bne.n	8003680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d11a      	bne.n	8003680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003650:	4013      	ands	r3, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003656:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003658:	4293      	cmp	r3, r2
 800365a:	d111      	bne.n	8003680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003666:	085b      	lsrs	r3, r3, #1
 8003668:	3b01      	subs	r3, #1
 800366a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800366c:	429a      	cmp	r2, r3
 800366e:	d107      	bne.n	8003680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800

08003694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0cc      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036a8:	4b68      	ldr	r3, [pc, #416]	@ (800384c <HAL_RCC_ClockConfig+0x1b8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d90c      	bls.n	80036d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b65      	ldr	r3, [pc, #404]	@ (800384c <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b63      	ldr	r3, [pc, #396]	@ (800384c <HAL_RCC_ClockConfig+0x1b8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0b8      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d020      	beq.n	800371e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e8:	4b59      	ldr	r3, [pc, #356]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4a58      	ldr	r2, [pc, #352]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003700:	4b53      	ldr	r3, [pc, #332]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4a52      	ldr	r2, [pc, #328]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800370a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800370c:	4b50      	ldr	r3, [pc, #320]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	494d      	ldr	r1, [pc, #308]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	4313      	orrs	r3, r2
 800371c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d044      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d107      	bne.n	8003742 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003732:	4b47      	ldr	r3, [pc, #284]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d119      	bne.n	8003772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e07f      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d003      	beq.n	8003752 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800374e:	2b03      	cmp	r3, #3
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003752:	4b3f      	ldr	r3, [pc, #252]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e06f      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003762:	4b3b      	ldr	r3, [pc, #236]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e067      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003772:	4b37      	ldr	r3, [pc, #220]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f023 0203 	bic.w	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4934      	ldr	r1, [pc, #208]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	4313      	orrs	r3, r2
 8003782:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003784:	f7fd fff0 	bl	8001768 <HAL_GetTick>
 8003788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378c:	f7fd ffec 	bl	8001768 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e04f      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 020c 	and.w	r2, r3, #12
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d1eb      	bne.n	800378c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037b4:	4b25      	ldr	r3, [pc, #148]	@ (800384c <HAL_RCC_ClockConfig+0x1b8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d20c      	bcs.n	80037dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c2:	4b22      	ldr	r3, [pc, #136]	@ (800384c <HAL_RCC_ClockConfig+0x1b8>)
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ca:	4b20      	ldr	r3, [pc, #128]	@ (800384c <HAL_RCC_ClockConfig+0x1b8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e032      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e8:	4b19      	ldr	r3, [pc, #100]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4916      	ldr	r1, [pc, #88]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003806:	4b12      	ldr	r3, [pc, #72]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	490e      	ldr	r1, [pc, #56]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800381a:	f000 f821 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 800381e:	4602      	mov	r2, r0
 8003820:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	490a      	ldr	r1, [pc, #40]	@ (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 800382c:	5ccb      	ldrb	r3, [r1, r3]
 800382e:	fa22 f303 	lsr.w	r3, r2, r3
 8003832:	4a09      	ldr	r2, [pc, #36]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003836:	4b09      	ldr	r3, [pc, #36]	@ (800385c <HAL_RCC_ClockConfig+0x1c8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7fd ff50 	bl	80016e0 <HAL_InitTick>

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40023c00 	.word	0x40023c00
 8003850:	40023800 	.word	0x40023800
 8003854:	08004500 	.word	0x08004500
 8003858:	20000010 	.word	0x20000010
 800385c:	20000014 	.word	0x20000014

08003860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003864:	b094      	sub	sp, #80	@ 0x50
 8003866:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	647b      	str	r3, [r7, #68]	@ 0x44
 800386c:	2300      	movs	r3, #0
 800386e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003870:	2300      	movs	r3, #0
 8003872:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003878:	4b79      	ldr	r3, [pc, #484]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x200>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 030c 	and.w	r3, r3, #12
 8003880:	2b08      	cmp	r3, #8
 8003882:	d00d      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003884:	2b08      	cmp	r3, #8
 8003886:	f200 80e1 	bhi.w	8003a4c <HAL_RCC_GetSysClockFreq+0x1ec>
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_RCC_GetSysClockFreq+0x34>
 800388e:	2b04      	cmp	r3, #4
 8003890:	d003      	beq.n	800389a <HAL_RCC_GetSysClockFreq+0x3a>
 8003892:	e0db      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003894:	4b73      	ldr	r3, [pc, #460]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003896:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003898:	e0db      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800389a:	4b73      	ldr	r3, [pc, #460]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x208>)
 800389c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800389e:	e0d8      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x200>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d063      	beq.n	800397e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	099b      	lsrs	r3, r3, #6
 80038bc:	2200      	movs	r2, #0
 80038be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80038ca:	2300      	movs	r3, #0
 80038cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038d2:	4622      	mov	r2, r4
 80038d4:	462b      	mov	r3, r5
 80038d6:	f04f 0000 	mov.w	r0, #0
 80038da:	f04f 0100 	mov.w	r1, #0
 80038de:	0159      	lsls	r1, r3, #5
 80038e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038e4:	0150      	lsls	r0, r2, #5
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4621      	mov	r1, r4
 80038ec:	1a51      	subs	r1, r2, r1
 80038ee:	6139      	str	r1, [r7, #16]
 80038f0:	4629      	mov	r1, r5
 80038f2:	eb63 0301 	sbc.w	r3, r3, r1
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003904:	4659      	mov	r1, fp
 8003906:	018b      	lsls	r3, r1, #6
 8003908:	4651      	mov	r1, sl
 800390a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800390e:	4651      	mov	r1, sl
 8003910:	018a      	lsls	r2, r1, #6
 8003912:	4651      	mov	r1, sl
 8003914:	ebb2 0801 	subs.w	r8, r2, r1
 8003918:	4659      	mov	r1, fp
 800391a:	eb63 0901 	sbc.w	r9, r3, r1
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800392a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800392e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003932:	4690      	mov	r8, r2
 8003934:	4699      	mov	r9, r3
 8003936:	4623      	mov	r3, r4
 8003938:	eb18 0303 	adds.w	r3, r8, r3
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	462b      	mov	r3, r5
 8003940:	eb49 0303 	adc.w	r3, r9, r3
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003952:	4629      	mov	r1, r5
 8003954:	024b      	lsls	r3, r1, #9
 8003956:	4621      	mov	r1, r4
 8003958:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800395c:	4621      	mov	r1, r4
 800395e:	024a      	lsls	r2, r1, #9
 8003960:	4610      	mov	r0, r2
 8003962:	4619      	mov	r1, r3
 8003964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003966:	2200      	movs	r2, #0
 8003968:	62bb      	str	r3, [r7, #40]	@ 0x28
 800396a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800396c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003970:	f7fc ff60 	bl	8000834 <__aeabi_uldivmod>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4613      	mov	r3, r2
 800397a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800397c:	e058      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800397e:	4b38      	ldr	r3, [pc, #224]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	099b      	lsrs	r3, r3, #6
 8003984:	2200      	movs	r2, #0
 8003986:	4618      	mov	r0, r3
 8003988:	4611      	mov	r1, r2
 800398a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800398e:	623b      	str	r3, [r7, #32]
 8003990:	2300      	movs	r3, #0
 8003992:	627b      	str	r3, [r7, #36]	@ 0x24
 8003994:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003998:	4642      	mov	r2, r8
 800399a:	464b      	mov	r3, r9
 800399c:	f04f 0000 	mov.w	r0, #0
 80039a0:	f04f 0100 	mov.w	r1, #0
 80039a4:	0159      	lsls	r1, r3, #5
 80039a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039aa:	0150      	lsls	r0, r2, #5
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4641      	mov	r1, r8
 80039b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80039b6:	4649      	mov	r1, r9
 80039b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039d0:	ebb2 040a 	subs.w	r4, r2, sl
 80039d4:	eb63 050b 	sbc.w	r5, r3, fp
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	00eb      	lsls	r3, r5, #3
 80039e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039e6:	00e2      	lsls	r2, r4, #3
 80039e8:	4614      	mov	r4, r2
 80039ea:	461d      	mov	r5, r3
 80039ec:	4643      	mov	r3, r8
 80039ee:	18e3      	adds	r3, r4, r3
 80039f0:	603b      	str	r3, [r7, #0]
 80039f2:	464b      	mov	r3, r9
 80039f4:	eb45 0303 	adc.w	r3, r5, r3
 80039f8:	607b      	str	r3, [r7, #4]
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a06:	4629      	mov	r1, r5
 8003a08:	028b      	lsls	r3, r1, #10
 8003a0a:	4621      	mov	r1, r4
 8003a0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a10:	4621      	mov	r1, r4
 8003a12:	028a      	lsls	r2, r1, #10
 8003a14:	4610      	mov	r0, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	61fa      	str	r2, [r7, #28]
 8003a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a24:	f7fc ff06 	bl	8000834 <__aeabi_uldivmod>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a30:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	0c1b      	lsrs	r3, r3, #16
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003a40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a4a:	e002      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a4c:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3750      	adds	r7, #80	@ 0x50
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a5e:	bf00      	nop
 8003a60:	40023800 	.word	0x40023800
 8003a64:	00f42400 	.word	0x00f42400
 8003a68:	007a1200 	.word	0x007a1200

08003a6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d105      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d035      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a94:	4b62      	ldr	r3, [pc, #392]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a9a:	f7fd fe65 	bl	8001768 <HAL_GetTick>
 8003a9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003aa2:	f7fd fe61 	bl	8001768 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e0b0      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ab4:	4b5b      	ldr	r3, [pc, #364]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f0      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	019a      	lsls	r2, r3, #6
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	071b      	lsls	r3, r3, #28
 8003acc:	4955      	ldr	r1, [pc, #340]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ad4:	4b52      	ldr	r3, [pc, #328]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ada:	f7fd fe45 	bl	8001768 <HAL_GetTick>
 8003ade:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ae2:	f7fd fe41 	bl	8001768 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e090      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003af4:	4b4b      	ldr	r3, [pc, #300]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8083 	beq.w	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	4b44      	ldr	r3, [pc, #272]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	4a43      	ldr	r2, [pc, #268]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b1e:	4b41      	ldr	r3, [pc, #260]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a3e      	ldr	r2, [pc, #248]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b36:	f7fd fe17 	bl	8001768 <HAL_GetTick>
 8003b3a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b3e:	f7fd fe13 	bl	8001768 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e062      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b50:	4b35      	ldr	r3, [pc, #212]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b5c:	4b31      	ldr	r3, [pc, #196]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b64:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d02f      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d028      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b84:	4b29      	ldr	r3, [pc, #164]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b8a:	4b28      	ldr	r3, [pc, #160]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b90:	4a24      	ldr	r2, [pc, #144]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b96:	4b23      	ldr	r3, [pc, #140]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d114      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fd fde1 	bl	8001768 <HAL_GetTick>
 8003ba6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003baa:	f7fd fddd 	bl	8001768 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e02a      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc0:	4b18      	ldr	r3, [pc, #96]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0ee      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bd8:	d10d      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003bda:	4b12      	ldr	r3, [pc, #72]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bee:	490d      	ldr	r1, [pc, #52]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	608b      	str	r3, [r1, #8]
 8003bf4:	e005      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bfc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003c00:	6093      	str	r3, [r2, #8]
 8003c02:	4b08      	ldr	r3, [pc, #32]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0e:	4905      	ldr	r1, [pc, #20]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	42470068 	.word	0x42470068
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40007000 	.word	0x40007000
 8003c2c:	42470e40 	.word	0x42470e40

08003c30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d13f      	bne.n	8003cce <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003c4e:	4b24      	ldr	r3, [pc, #144]	@ (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d006      	beq.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c64:	d12f      	bne.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003c66:	4b1f      	ldr	r3, [pc, #124]	@ (8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003c68:	617b      	str	r3, [r7, #20]
          break;
 8003c6a:	e02f      	b.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c78:	d108      	bne.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c7a:	4b19      	ldr	r3, [pc, #100]	@ (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c82:	4a19      	ldr	r2, [pc, #100]	@ (8003ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	e007      	b.n	8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c8c:	4b14      	ldr	r3, [pc, #80]	@ (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c94:	4a15      	ldr	r2, [pc, #84]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003c9c:	4b10      	ldr	r3, [pc, #64]	@ (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ca2:	099b      	lsrs	r3, r3, #6
 8003ca4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	fb02 f303 	mul.w	r3, r2, r3
 8003cae:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cb6:	0f1b      	lsrs	r3, r3, #28
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc2:	617b      	str	r3, [r7, #20]
          break;
 8003cc4:	e002      	b.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
          break;
 8003cca:	bf00      	nop
        }
      }
      break;
 8003ccc:	e000      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8003cce:	bf00      	nop
    }
  }
  return frequency;
 8003cd0:	697b      	ldr	r3, [r7, #20]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	00bb8000 	.word	0x00bb8000
 8003ce8:	007a1200 	.word	0x007a1200
 8003cec:	00f42400 	.word	0x00f42400

08003cf0 <memset>:
 8003cf0:	4402      	add	r2, r0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d100      	bne.n	8003cfa <memset+0xa>
 8003cf8:	4770      	bx	lr
 8003cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8003cfe:	e7f9      	b.n	8003cf4 <memset+0x4>

08003d00 <__errno>:
 8003d00:	4b01      	ldr	r3, [pc, #4]	@ (8003d08 <__errno+0x8>)
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	2000001c 	.word	0x2000001c

08003d0c <__libc_init_array>:
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	4d0d      	ldr	r5, [pc, #52]	@ (8003d44 <__libc_init_array+0x38>)
 8003d10:	4c0d      	ldr	r4, [pc, #52]	@ (8003d48 <__libc_init_array+0x3c>)
 8003d12:	1b64      	subs	r4, r4, r5
 8003d14:	10a4      	asrs	r4, r4, #2
 8003d16:	2600      	movs	r6, #0
 8003d18:	42a6      	cmp	r6, r4
 8003d1a:	d109      	bne.n	8003d30 <__libc_init_array+0x24>
 8003d1c:	4d0b      	ldr	r5, [pc, #44]	@ (8003d4c <__libc_init_array+0x40>)
 8003d1e:	4c0c      	ldr	r4, [pc, #48]	@ (8003d50 <__libc_init_array+0x44>)
 8003d20:	f000 fbe2 	bl	80044e8 <_init>
 8003d24:	1b64      	subs	r4, r4, r5
 8003d26:	10a4      	asrs	r4, r4, #2
 8003d28:	2600      	movs	r6, #0
 8003d2a:	42a6      	cmp	r6, r4
 8003d2c:	d105      	bne.n	8003d3a <__libc_init_array+0x2e>
 8003d2e:	bd70      	pop	{r4, r5, r6, pc}
 8003d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d34:	4798      	blx	r3
 8003d36:	3601      	adds	r6, #1
 8003d38:	e7ee      	b.n	8003d18 <__libc_init_array+0xc>
 8003d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3e:	4798      	blx	r3
 8003d40:	3601      	adds	r6, #1
 8003d42:	e7f2      	b.n	8003d2a <__libc_init_array+0x1e>
 8003d44:	08004538 	.word	0x08004538
 8003d48:	08004538 	.word	0x08004538
 8003d4c:	08004538 	.word	0x08004538
 8003d50:	0800453c 	.word	0x0800453c

08003d54 <powf>:
 8003d54:	b508      	push	{r3, lr}
 8003d56:	ed2d 8b04 	vpush	{d8-d9}
 8003d5a:	eeb0 8a60 	vmov.f32	s16, s1
 8003d5e:	eeb0 9a40 	vmov.f32	s18, s0
 8003d62:	f000 f859 	bl	8003e18 <__ieee754_powf>
 8003d66:	eeb4 8a48 	vcmp.f32	s16, s16
 8003d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6e:	eef0 8a40 	vmov.f32	s17, s0
 8003d72:	d63e      	bvs.n	8003df2 <powf+0x9e>
 8003d74:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8003d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7c:	d112      	bne.n	8003da4 <powf+0x50>
 8003d7e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d86:	d039      	beq.n	8003dfc <powf+0xa8>
 8003d88:	eeb0 0a48 	vmov.f32	s0, s16
 8003d8c:	f000 f839 	bl	8003e02 <finitef>
 8003d90:	b378      	cbz	r0, 8003df2 <powf+0x9e>
 8003d92:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d9a:	d52a      	bpl.n	8003df2 <powf+0x9e>
 8003d9c:	f7ff ffb0 	bl	8003d00 <__errno>
 8003da0:	2322      	movs	r3, #34	@ 0x22
 8003da2:	e014      	b.n	8003dce <powf+0x7a>
 8003da4:	f000 f82d 	bl	8003e02 <finitef>
 8003da8:	b998      	cbnz	r0, 8003dd2 <powf+0x7e>
 8003daa:	eeb0 0a49 	vmov.f32	s0, s18
 8003dae:	f000 f828 	bl	8003e02 <finitef>
 8003db2:	b170      	cbz	r0, 8003dd2 <powf+0x7e>
 8003db4:	eeb0 0a48 	vmov.f32	s0, s16
 8003db8:	f000 f823 	bl	8003e02 <finitef>
 8003dbc:	b148      	cbz	r0, 8003dd2 <powf+0x7e>
 8003dbe:	eef4 8a68 	vcmp.f32	s17, s17
 8003dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc6:	d7e9      	bvc.n	8003d9c <powf+0x48>
 8003dc8:	f7ff ff9a 	bl	8003d00 <__errno>
 8003dcc:	2321      	movs	r3, #33	@ 0x21
 8003dce:	6003      	str	r3, [r0, #0]
 8003dd0:	e00f      	b.n	8003df2 <powf+0x9e>
 8003dd2:	eef5 8a40 	vcmp.f32	s17, #0.0
 8003dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dda:	d10a      	bne.n	8003df2 <powf+0x9e>
 8003ddc:	eeb0 0a49 	vmov.f32	s0, s18
 8003de0:	f000 f80f 	bl	8003e02 <finitef>
 8003de4:	b128      	cbz	r0, 8003df2 <powf+0x9e>
 8003de6:	eeb0 0a48 	vmov.f32	s0, s16
 8003dea:	f000 f80a 	bl	8003e02 <finitef>
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d1d4      	bne.n	8003d9c <powf+0x48>
 8003df2:	eeb0 0a68 	vmov.f32	s0, s17
 8003df6:	ecbd 8b04 	vpop	{d8-d9}
 8003dfa:	bd08      	pop	{r3, pc}
 8003dfc:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8003e00:	e7f7      	b.n	8003df2 <powf+0x9e>

08003e02 <finitef>:
 8003e02:	ee10 3a10 	vmov	r3, s0
 8003e06:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8003e0a:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8003e0e:	bfac      	ite	ge
 8003e10:	2000      	movge	r0, #0
 8003e12:	2001      	movlt	r0, #1
 8003e14:	4770      	bx	lr
	...

08003e18 <__ieee754_powf>:
 8003e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e1c:	ee10 4a90 	vmov	r4, s1
 8003e20:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8003e24:	ed2d 8b02 	vpush	{d8}
 8003e28:	ee10 6a10 	vmov	r6, s0
 8003e2c:	eeb0 8a40 	vmov.f32	s16, s0
 8003e30:	eef0 8a60 	vmov.f32	s17, s1
 8003e34:	d10c      	bne.n	8003e50 <__ieee754_powf+0x38>
 8003e36:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8003e3a:	0076      	lsls	r6, r6, #1
 8003e3c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8003e40:	f240 829c 	bls.w	800437c <__ieee754_powf+0x564>
 8003e44:	ee38 0a28 	vadd.f32	s0, s16, s17
 8003e48:	ecbd 8b02 	vpop	{d8}
 8003e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e50:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8003e54:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8003e58:	d802      	bhi.n	8003e60 <__ieee754_powf+0x48>
 8003e5a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8003e5e:	d908      	bls.n	8003e72 <__ieee754_powf+0x5a>
 8003e60:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8003e64:	d1ee      	bne.n	8003e44 <__ieee754_powf+0x2c>
 8003e66:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8003e6a:	0064      	lsls	r4, r4, #1
 8003e6c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8003e70:	e7e6      	b.n	8003e40 <__ieee754_powf+0x28>
 8003e72:	2e00      	cmp	r6, #0
 8003e74:	da1e      	bge.n	8003eb4 <__ieee754_powf+0x9c>
 8003e76:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8003e7a:	d22b      	bcs.n	8003ed4 <__ieee754_powf+0xbc>
 8003e7c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8003e80:	d332      	bcc.n	8003ee8 <__ieee754_powf+0xd0>
 8003e82:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8003e86:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8003e8a:	fa49 f503 	asr.w	r5, r9, r3
 8003e8e:	fa05 f303 	lsl.w	r3, r5, r3
 8003e92:	454b      	cmp	r3, r9
 8003e94:	d126      	bne.n	8003ee4 <__ieee754_powf+0xcc>
 8003e96:	f005 0501 	and.w	r5, r5, #1
 8003e9a:	f1c5 0502 	rsb	r5, r5, #2
 8003e9e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8003ea2:	d122      	bne.n	8003eea <__ieee754_powf+0xd2>
 8003ea4:	2c00      	cmp	r4, #0
 8003ea6:	f280 826f 	bge.w	8004388 <__ieee754_powf+0x570>
 8003eaa:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003eae:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8003eb2:	e7c9      	b.n	8003e48 <__ieee754_powf+0x30>
 8003eb4:	2500      	movs	r5, #0
 8003eb6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8003eba:	d1f0      	bne.n	8003e9e <__ieee754_powf+0x86>
 8003ebc:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8003ec0:	f000 825c 	beq.w	800437c <__ieee754_powf+0x564>
 8003ec4:	d908      	bls.n	8003ed8 <__ieee754_powf+0xc0>
 8003ec6:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8004228 <__ieee754_powf+0x410>
 8003eca:	2c00      	cmp	r4, #0
 8003ecc:	bfa8      	it	ge
 8003ece:	eeb0 0a68 	vmovge.f32	s0, s17
 8003ed2:	e7b9      	b.n	8003e48 <__ieee754_powf+0x30>
 8003ed4:	2502      	movs	r5, #2
 8003ed6:	e7ee      	b.n	8003eb6 <__ieee754_powf+0x9e>
 8003ed8:	2c00      	cmp	r4, #0
 8003eda:	f280 8252 	bge.w	8004382 <__ieee754_powf+0x56a>
 8003ede:	eeb1 0a68 	vneg.f32	s0, s17
 8003ee2:	e7b1      	b.n	8003e48 <__ieee754_powf+0x30>
 8003ee4:	2500      	movs	r5, #0
 8003ee6:	e7da      	b.n	8003e9e <__ieee754_powf+0x86>
 8003ee8:	2500      	movs	r5, #0
 8003eea:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8003eee:	d102      	bne.n	8003ef6 <__ieee754_powf+0xde>
 8003ef0:	ee28 0a08 	vmul.f32	s0, s16, s16
 8003ef4:	e7a8      	b.n	8003e48 <__ieee754_powf+0x30>
 8003ef6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8003efa:	d109      	bne.n	8003f10 <__ieee754_powf+0xf8>
 8003efc:	2e00      	cmp	r6, #0
 8003efe:	db07      	blt.n	8003f10 <__ieee754_powf+0xf8>
 8003f00:	eeb0 0a48 	vmov.f32	s0, s16
 8003f04:	ecbd 8b02 	vpop	{d8}
 8003f08:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f0c:	f000 bae8 	b.w	80044e0 <__ieee754_sqrtf>
 8003f10:	eeb0 0a48 	vmov.f32	s0, s16
 8003f14:	f000 fa50 	bl	80043b8 <fabsf>
 8003f18:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8003f1c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8003f20:	4647      	mov	r7, r8
 8003f22:	d002      	beq.n	8003f2a <__ieee754_powf+0x112>
 8003f24:	f1b8 0f00 	cmp.w	r8, #0
 8003f28:	d117      	bne.n	8003f5a <__ieee754_powf+0x142>
 8003f2a:	2c00      	cmp	r4, #0
 8003f2c:	bfbc      	itt	lt
 8003f2e:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8003f32:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8003f36:	2e00      	cmp	r6, #0
 8003f38:	da86      	bge.n	8003e48 <__ieee754_powf+0x30>
 8003f3a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8003f3e:	ea58 0805 	orrs.w	r8, r8, r5
 8003f42:	d104      	bne.n	8003f4e <__ieee754_powf+0x136>
 8003f44:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003f48:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8003f4c:	e77c      	b.n	8003e48 <__ieee754_powf+0x30>
 8003f4e:	2d01      	cmp	r5, #1
 8003f50:	f47f af7a 	bne.w	8003e48 <__ieee754_powf+0x30>
 8003f54:	eeb1 0a40 	vneg.f32	s0, s0
 8003f58:	e776      	b.n	8003e48 <__ieee754_powf+0x30>
 8003f5a:	0ff0      	lsrs	r0, r6, #31
 8003f5c:	3801      	subs	r0, #1
 8003f5e:	ea55 0300 	orrs.w	r3, r5, r0
 8003f62:	d104      	bne.n	8003f6e <__ieee754_powf+0x156>
 8003f64:	ee38 8a48 	vsub.f32	s16, s16, s16
 8003f68:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8003f6c:	e76c      	b.n	8003e48 <__ieee754_powf+0x30>
 8003f6e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8003f72:	d973      	bls.n	800405c <__ieee754_powf+0x244>
 8003f74:	4bad      	ldr	r3, [pc, #692]	@ (800422c <__ieee754_powf+0x414>)
 8003f76:	4598      	cmp	r8, r3
 8003f78:	d808      	bhi.n	8003f8c <__ieee754_powf+0x174>
 8003f7a:	2c00      	cmp	r4, #0
 8003f7c:	da0b      	bge.n	8003f96 <__ieee754_powf+0x17e>
 8003f7e:	2000      	movs	r0, #0
 8003f80:	ecbd 8b02 	vpop	{d8}
 8003f84:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f88:	f000 baa4 	b.w	80044d4 <__math_oflowf>
 8003f8c:	4ba8      	ldr	r3, [pc, #672]	@ (8004230 <__ieee754_powf+0x418>)
 8003f8e:	4598      	cmp	r8, r3
 8003f90:	d908      	bls.n	8003fa4 <__ieee754_powf+0x18c>
 8003f92:	2c00      	cmp	r4, #0
 8003f94:	dcf3      	bgt.n	8003f7e <__ieee754_powf+0x166>
 8003f96:	2000      	movs	r0, #0
 8003f98:	ecbd 8b02 	vpop	{d8}
 8003f9c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fa0:	f000 ba92 	b.w	80044c8 <__math_uflowf>
 8003fa4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003fa8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003fac:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8004234 <__ieee754_powf+0x41c>
 8003fb0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8003fb4:	eee0 6a67 	vfms.f32	s13, s0, s15
 8003fb8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003fbc:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8003fc0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003fc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fc8:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8004238 <__ieee754_powf+0x420>
 8003fcc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8003fd0:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800423c <__ieee754_powf+0x424>
 8003fd4:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003fd8:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8004240 <__ieee754_powf+0x428>
 8003fdc:	eef0 6a67 	vmov.f32	s13, s15
 8003fe0:	eee0 6a07 	vfma.f32	s13, s0, s14
 8003fe4:	ee16 3a90 	vmov	r3, s13
 8003fe8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003fec:	f023 030f 	bic.w	r3, r3, #15
 8003ff0:	ee06 3a90 	vmov	s13, r3
 8003ff4:	eee0 6a47 	vfms.f32	s13, s0, s14
 8003ff8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003ffc:	3d01      	subs	r5, #1
 8003ffe:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8004002:	4305      	orrs	r5, r0
 8004004:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004008:	f024 040f 	bic.w	r4, r4, #15
 800400c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8004010:	bf18      	it	ne
 8004012:	eeb0 8a47 	vmovne.f32	s16, s14
 8004016:	ee07 4a10 	vmov	s14, r4
 800401a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800401e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eee7 0a27 	vfma.f32	s1, s14, s15
 800402a:	ee07 4a10 	vmov	s14, r4
 800402e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004032:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8004036:	ee17 1a10 	vmov	r1, s14
 800403a:	2900      	cmp	r1, #0
 800403c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004040:	f340 80dd 	ble.w	80041fe <__ieee754_powf+0x3e6>
 8004044:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8004048:	f240 80ca 	bls.w	80041e0 <__ieee754_powf+0x3c8>
 800404c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004054:	bf4c      	ite	mi
 8004056:	2001      	movmi	r0, #1
 8004058:	2000      	movpl	r0, #0
 800405a:	e791      	b.n	8003f80 <__ieee754_powf+0x168>
 800405c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8004060:	bf01      	itttt	eq
 8004062:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8004244 <__ieee754_powf+0x42c>
 8004066:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800406a:	f06f 0317 	mvneq.w	r3, #23
 800406e:	ee17 7a90 	vmoveq	r7, s15
 8004072:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8004076:	bf18      	it	ne
 8004078:	2300      	movne	r3, #0
 800407a:	3a7f      	subs	r2, #127	@ 0x7f
 800407c:	441a      	add	r2, r3
 800407e:	4b72      	ldr	r3, [pc, #456]	@ (8004248 <__ieee754_powf+0x430>)
 8004080:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8004084:	429f      	cmp	r7, r3
 8004086:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800408a:	dd06      	ble.n	800409a <__ieee754_powf+0x282>
 800408c:	4b6f      	ldr	r3, [pc, #444]	@ (800424c <__ieee754_powf+0x434>)
 800408e:	429f      	cmp	r7, r3
 8004090:	f340 80a4 	ble.w	80041dc <__ieee754_powf+0x3c4>
 8004094:	3201      	adds	r2, #1
 8004096:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800409a:	2600      	movs	r6, #0
 800409c:	4b6c      	ldr	r3, [pc, #432]	@ (8004250 <__ieee754_powf+0x438>)
 800409e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80040a2:	ee07 1a10 	vmov	s14, r1
 80040a6:	edd3 5a00 	vldr	s11, [r3]
 80040aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004254 <__ieee754_powf+0x43c>)
 80040ac:	ee75 7a87 	vadd.f32	s15, s11, s14
 80040b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040b4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80040b8:	1049      	asrs	r1, r1, #1
 80040ba:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80040be:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80040c2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80040c6:	ee37 6a65 	vsub.f32	s12, s14, s11
 80040ca:	ee07 1a90 	vmov	s15, r1
 80040ce:	ee26 5a24 	vmul.f32	s10, s12, s9
 80040d2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80040d6:	ee15 7a10 	vmov	r7, s10
 80040da:	401f      	ands	r7, r3
 80040dc:	ee06 7a90 	vmov	s13, r7
 80040e0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80040e4:	ee37 7a65 	vsub.f32	s14, s14, s11
 80040e8:	ee65 7a05 	vmul.f32	s15, s10, s10
 80040ec:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80040f0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004258 <__ieee754_powf+0x440>
 80040f4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800425c <__ieee754_powf+0x444>
 80040f8:	eee7 5a87 	vfma.f32	s11, s15, s14
 80040fc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8004260 <__ieee754_powf+0x448>
 8004100:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004104:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8004234 <__ieee754_powf+0x41c>
 8004108:	eee7 5a27 	vfma.f32	s11, s14, s15
 800410c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8004264 <__ieee754_powf+0x44c>
 8004110:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004114:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8004268 <__ieee754_powf+0x450>
 8004118:	ee26 6a24 	vmul.f32	s12, s12, s9
 800411c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8004120:	ee35 7a26 	vadd.f32	s14, s10, s13
 8004124:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8004128:	ee27 7a06 	vmul.f32	s14, s14, s12
 800412c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8004130:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8004134:	eef0 5a67 	vmov.f32	s11, s15
 8004138:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800413c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8004140:	ee15 1a90 	vmov	r1, s11
 8004144:	4019      	ands	r1, r3
 8004146:	ee05 1a90 	vmov	s11, r1
 800414a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800414e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8004152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004156:	ee67 7a85 	vmul.f32	s15, s15, s10
 800415a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800415e:	eeb0 6a67 	vmov.f32	s12, s15
 8004162:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8004166:	ee16 1a10 	vmov	r1, s12
 800416a:	4019      	ands	r1, r3
 800416c:	ee06 1a10 	vmov	s12, r1
 8004170:	eeb0 7a46 	vmov.f32	s14, s12
 8004174:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8004178:	493c      	ldr	r1, [pc, #240]	@ (800426c <__ieee754_powf+0x454>)
 800417a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800417e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004182:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8004270 <__ieee754_powf+0x458>
 8004186:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8004274 <__ieee754_powf+0x45c>
 800418a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800418e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8004278 <__ieee754_powf+0x460>
 8004192:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004196:	ed91 7a00 	vldr	s14, [r1]
 800419a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800419e:	ee07 2a10 	vmov	s14, r2
 80041a2:	eef0 6a67 	vmov.f32	s13, s15
 80041a6:	4a35      	ldr	r2, [pc, #212]	@ (800427c <__ieee754_powf+0x464>)
 80041a8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80041ac:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80041b0:	ed92 5a00 	vldr	s10, [r2]
 80041b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80041b8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80041bc:	ee76 6a87 	vadd.f32	s13, s13, s14
 80041c0:	ee16 2a90 	vmov	r2, s13
 80041c4:	4013      	ands	r3, r2
 80041c6:	ee06 3a90 	vmov	s13, r3
 80041ca:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80041ce:	ee37 7a45 	vsub.f32	s14, s14, s10
 80041d2:	eea6 7a65 	vfms.f32	s14, s12, s11
 80041d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80041da:	e70f      	b.n	8003ffc <__ieee754_powf+0x1e4>
 80041dc:	2601      	movs	r6, #1
 80041de:	e75d      	b.n	800409c <__ieee754_powf+0x284>
 80041e0:	d152      	bne.n	8004288 <__ieee754_powf+0x470>
 80041e2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8004280 <__ieee754_powf+0x468>
 80041e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041ea:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80041ee:	eef4 6ac7 	vcmpe.f32	s13, s14
 80041f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f6:	f73f af29 	bgt.w	800404c <__ieee754_powf+0x234>
 80041fa:	2386      	movs	r3, #134	@ 0x86
 80041fc:	e048      	b.n	8004290 <__ieee754_powf+0x478>
 80041fe:	4a21      	ldr	r2, [pc, #132]	@ (8004284 <__ieee754_powf+0x46c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d907      	bls.n	8004214 <__ieee754_powf+0x3fc>
 8004204:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420c:	bf4c      	ite	mi
 800420e:	2001      	movmi	r0, #1
 8004210:	2000      	movpl	r0, #0
 8004212:	e6c1      	b.n	8003f98 <__ieee754_powf+0x180>
 8004214:	d138      	bne.n	8004288 <__ieee754_powf+0x470>
 8004216:	ee37 7a67 	vsub.f32	s14, s14, s15
 800421a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800421e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004222:	dbea      	blt.n	80041fa <__ieee754_powf+0x3e2>
 8004224:	e7ee      	b.n	8004204 <__ieee754_powf+0x3ec>
 8004226:	bf00      	nop
 8004228:	00000000 	.word	0x00000000
 800422c:	3f7ffff3 	.word	0x3f7ffff3
 8004230:	3f800007 	.word	0x3f800007
 8004234:	3eaaaaab 	.word	0x3eaaaaab
 8004238:	3fb8aa3b 	.word	0x3fb8aa3b
 800423c:	36eca570 	.word	0x36eca570
 8004240:	3fb8aa00 	.word	0x3fb8aa00
 8004244:	4b800000 	.word	0x4b800000
 8004248:	001cc471 	.word	0x001cc471
 800424c:	005db3d6 	.word	0x005db3d6
 8004250:	08004528 	.word	0x08004528
 8004254:	fffff000 	.word	0xfffff000
 8004258:	3e6c3255 	.word	0x3e6c3255
 800425c:	3e53f142 	.word	0x3e53f142
 8004260:	3e8ba305 	.word	0x3e8ba305
 8004264:	3edb6db7 	.word	0x3edb6db7
 8004268:	3f19999a 	.word	0x3f19999a
 800426c:	08004518 	.word	0x08004518
 8004270:	3f76384f 	.word	0x3f76384f
 8004274:	3f763800 	.word	0x3f763800
 8004278:	369dc3a0 	.word	0x369dc3a0
 800427c:	08004520 	.word	0x08004520
 8004280:	3338aa3c 	.word	0x3338aa3c
 8004284:	43160000 	.word	0x43160000
 8004288:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800428c:	d971      	bls.n	8004372 <__ieee754_powf+0x55a>
 800428e:	15db      	asrs	r3, r3, #23
 8004290:	3b7e      	subs	r3, #126	@ 0x7e
 8004292:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8004296:	4118      	asrs	r0, r3
 8004298:	4408      	add	r0, r1
 800429a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800429e:	4a3c      	ldr	r2, [pc, #240]	@ (8004390 <__ieee754_powf+0x578>)
 80042a0:	3b7f      	subs	r3, #127	@ 0x7f
 80042a2:	411a      	asrs	r2, r3
 80042a4:	4002      	ands	r2, r0
 80042a6:	ee07 2a10 	vmov	s14, r2
 80042aa:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80042ae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80042b2:	f1c3 0317 	rsb	r3, r3, #23
 80042b6:	4118      	asrs	r0, r3
 80042b8:	2900      	cmp	r1, #0
 80042ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042be:	bfb8      	it	lt
 80042c0:	4240      	neglt	r0, r0
 80042c2:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80042c6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8004394 <__ieee754_powf+0x57c>
 80042ca:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8004398 <__ieee754_powf+0x580>
 80042ce:	ee17 3a10 	vmov	r3, s14
 80042d2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80042d6:	f023 030f 	bic.w	r3, r3, #15
 80042da:	ee07 3a10 	vmov	s14, r3
 80042de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042e2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80042e6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80042ea:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800439c <__ieee754_powf+0x584>
 80042ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f2:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80042f6:	eef0 6a67 	vmov.f32	s13, s15
 80042fa:	eee7 6a06 	vfma.f32	s13, s14, s12
 80042fe:	eef0 5a66 	vmov.f32	s11, s13
 8004302:	eee7 5a46 	vfms.f32	s11, s14, s12
 8004306:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800430a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800430e:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 80043a0 <__ieee754_powf+0x588>
 8004312:	eddf 5a24 	vldr	s11, [pc, #144]	@ 80043a4 <__ieee754_powf+0x58c>
 8004316:	eea7 6a25 	vfma.f32	s12, s14, s11
 800431a:	eddf 5a23 	vldr	s11, [pc, #140]	@ 80043a8 <__ieee754_powf+0x590>
 800431e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8004322:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80043ac <__ieee754_powf+0x594>
 8004326:	eea5 6a87 	vfma.f32	s12, s11, s14
 800432a:	eddf 5a21 	vldr	s11, [pc, #132]	@ 80043b0 <__ieee754_powf+0x598>
 800432e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8004332:	eeb0 6a66 	vmov.f32	s12, s13
 8004336:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800433a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800433e:	ee66 5a86 	vmul.f32	s11, s13, s12
 8004342:	ee36 6a47 	vsub.f32	s12, s12, s14
 8004346:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800434a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800434e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004352:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004356:	ee30 0a67 	vsub.f32	s0, s0, s15
 800435a:	ee10 3a10 	vmov	r3, s0
 800435e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8004362:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004366:	da06      	bge.n	8004376 <__ieee754_powf+0x55e>
 8004368:	f000 f82e 	bl	80043c8 <scalbnf>
 800436c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004370:	e56a      	b.n	8003e48 <__ieee754_powf+0x30>
 8004372:	2000      	movs	r0, #0
 8004374:	e7a5      	b.n	80042c2 <__ieee754_powf+0x4aa>
 8004376:	ee00 3a10 	vmov	s0, r3
 800437a:	e7f7      	b.n	800436c <__ieee754_powf+0x554>
 800437c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004380:	e562      	b.n	8003e48 <__ieee754_powf+0x30>
 8004382:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80043b4 <__ieee754_powf+0x59c>
 8004386:	e55f      	b.n	8003e48 <__ieee754_powf+0x30>
 8004388:	eeb0 0a48 	vmov.f32	s0, s16
 800438c:	e55c      	b.n	8003e48 <__ieee754_powf+0x30>
 800438e:	bf00      	nop
 8004390:	ff800000 	.word	0xff800000
 8004394:	3f317218 	.word	0x3f317218
 8004398:	3f317200 	.word	0x3f317200
 800439c:	35bfbe8c 	.word	0x35bfbe8c
 80043a0:	b5ddea0e 	.word	0xb5ddea0e
 80043a4:	3331bb4c 	.word	0x3331bb4c
 80043a8:	388ab355 	.word	0x388ab355
 80043ac:	bb360b61 	.word	0xbb360b61
 80043b0:	3e2aaaab 	.word	0x3e2aaaab
 80043b4:	00000000 	.word	0x00000000

080043b8 <fabsf>:
 80043b8:	ee10 3a10 	vmov	r3, s0
 80043bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043c0:	ee00 3a10 	vmov	s0, r3
 80043c4:	4770      	bx	lr
	...

080043c8 <scalbnf>:
 80043c8:	ee10 3a10 	vmov	r3, s0
 80043cc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80043d0:	d02b      	beq.n	800442a <scalbnf+0x62>
 80043d2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80043d6:	d302      	bcc.n	80043de <scalbnf+0x16>
 80043d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80043dc:	4770      	bx	lr
 80043de:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80043e2:	d123      	bne.n	800442c <scalbnf+0x64>
 80043e4:	4b24      	ldr	r3, [pc, #144]	@ (8004478 <scalbnf+0xb0>)
 80043e6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800447c <scalbnf+0xb4>
 80043ea:	4298      	cmp	r0, r3
 80043ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 80043f0:	db17      	blt.n	8004422 <scalbnf+0x5a>
 80043f2:	ee10 3a10 	vmov	r3, s0
 80043f6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80043fa:	3a19      	subs	r2, #25
 80043fc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004400:	4288      	cmp	r0, r1
 8004402:	dd15      	ble.n	8004430 <scalbnf+0x68>
 8004404:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8004480 <scalbnf+0xb8>
 8004408:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8004484 <scalbnf+0xbc>
 800440c:	ee10 3a10 	vmov	r3, s0
 8004410:	eeb0 7a67 	vmov.f32	s14, s15
 8004414:	2b00      	cmp	r3, #0
 8004416:	bfb8      	it	lt
 8004418:	eef0 7a66 	vmovlt.f32	s15, s13
 800441c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8004420:	4770      	bx	lr
 8004422:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004488 <scalbnf+0xc0>
 8004426:	ee27 0a80 	vmul.f32	s0, s15, s0
 800442a:	4770      	bx	lr
 800442c:	0dd2      	lsrs	r2, r2, #23
 800442e:	e7e5      	b.n	80043fc <scalbnf+0x34>
 8004430:	4410      	add	r0, r2
 8004432:	28fe      	cmp	r0, #254	@ 0xfe
 8004434:	dce6      	bgt.n	8004404 <scalbnf+0x3c>
 8004436:	2800      	cmp	r0, #0
 8004438:	dd06      	ble.n	8004448 <scalbnf+0x80>
 800443a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800443e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004442:	ee00 3a10 	vmov	s0, r3
 8004446:	4770      	bx	lr
 8004448:	f110 0f16 	cmn.w	r0, #22
 800444c:	da09      	bge.n	8004462 <scalbnf+0x9a>
 800444e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8004488 <scalbnf+0xc0>
 8004452:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800448c <scalbnf+0xc4>
 8004456:	ee10 3a10 	vmov	r3, s0
 800445a:	eeb0 7a67 	vmov.f32	s14, s15
 800445e:	2b00      	cmp	r3, #0
 8004460:	e7d9      	b.n	8004416 <scalbnf+0x4e>
 8004462:	3019      	adds	r0, #25
 8004464:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004468:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800446c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8004490 <scalbnf+0xc8>
 8004470:	ee07 3a90 	vmov	s15, r3
 8004474:	e7d7      	b.n	8004426 <scalbnf+0x5e>
 8004476:	bf00      	nop
 8004478:	ffff3cb0 	.word	0xffff3cb0
 800447c:	4c000000 	.word	0x4c000000
 8004480:	7149f2ca 	.word	0x7149f2ca
 8004484:	f149f2ca 	.word	0xf149f2ca
 8004488:	0da24260 	.word	0x0da24260
 800448c:	8da24260 	.word	0x8da24260
 8004490:	33000000 	.word	0x33000000

08004494 <with_errnof>:
 8004494:	b510      	push	{r4, lr}
 8004496:	ed2d 8b02 	vpush	{d8}
 800449a:	eeb0 8a40 	vmov.f32	s16, s0
 800449e:	4604      	mov	r4, r0
 80044a0:	f7ff fc2e 	bl	8003d00 <__errno>
 80044a4:	eeb0 0a48 	vmov.f32	s0, s16
 80044a8:	ecbd 8b02 	vpop	{d8}
 80044ac:	6004      	str	r4, [r0, #0]
 80044ae:	bd10      	pop	{r4, pc}

080044b0 <xflowf>:
 80044b0:	b130      	cbz	r0, 80044c0 <xflowf+0x10>
 80044b2:	eef1 7a40 	vneg.f32	s15, s0
 80044b6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80044ba:	2022      	movs	r0, #34	@ 0x22
 80044bc:	f7ff bfea 	b.w	8004494 <with_errnof>
 80044c0:	eef0 7a40 	vmov.f32	s15, s0
 80044c4:	e7f7      	b.n	80044b6 <xflowf+0x6>
	...

080044c8 <__math_uflowf>:
 80044c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80044d0 <__math_uflowf+0x8>
 80044cc:	f7ff bff0 	b.w	80044b0 <xflowf>
 80044d0:	10000000 	.word	0x10000000

080044d4 <__math_oflowf>:
 80044d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80044dc <__math_oflowf+0x8>
 80044d8:	f7ff bfea 	b.w	80044b0 <xflowf>
 80044dc:	70000000 	.word	0x70000000

080044e0 <__ieee754_sqrtf>:
 80044e0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80044e4:	4770      	bx	lr
	...

080044e8 <_init>:
 80044e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ea:	bf00      	nop
 80044ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ee:	bc08      	pop	{r3}
 80044f0:	469e      	mov	lr, r3
 80044f2:	4770      	bx	lr

080044f4 <_fini>:
 80044f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f6:	bf00      	nop
 80044f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fa:	bc08      	pop	{r3}
 80044fc:	469e      	mov	lr, r3
 80044fe:	4770      	bx	lr
