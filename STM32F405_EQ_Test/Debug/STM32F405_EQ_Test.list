
STM32F405_EQ_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003058  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080031e0  080031e0  000041e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f8  080031f8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080031f8  080031f8  000041f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003200  08003200  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003200  08003200  00004200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003204  08003204  00004204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003208  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00002134  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002140  20002140  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006f5e  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a02  00000000  00000000  0000bf9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a0  00000000  00000000  0000d9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004e4  00000000  00000000  0000e040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001db02  00000000  00000000  0000e524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009368  00000000  00000000  0002c026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3a3f  00000000  00000000  0003538e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e8dcd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000192c  00000000  00000000  000e8e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  000ea73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080031c8 	.word	0x080031c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080031c8 	.word	0x080031c8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fb2e 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f826 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f8e6 	bl	8000694 <MX_GPIO_Init>
  MX_DMA_Init();
 80004c8:	f000 f8bc 	bl	8000644 <MX_DMA_Init>
  MX_I2S2_Init();
 80004cc:	f000 f88a 	bl	80005e4 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, adcData, dacData, 4);
 80004d0:	2304      	movs	r3, #4
 80004d2:	4a0a      	ldr	r2, [pc, #40]	@ (80004fc <main+0x44>)
 80004d4:	490a      	ldr	r1, [pc, #40]	@ (8000500 <main+0x48>)
 80004d6:	480b      	ldr	r0, [pc, #44]	@ (8000504 <main+0x4c>)
 80004d8:	f001 fc10 	bl	8001cfc <HAL_I2SEx_TransmitReceive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (isDataReady){
 80004dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000508 <main+0x50>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d005      	beq.n	80004f0 <main+0x38>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2104      	movs	r1, #4
 80004e8:	4808      	ldr	r0, [pc, #32]	@ (800050c <main+0x54>)
 80004ea:	f001 f9a7 	bl	800183c <HAL_GPIO_WritePin>
 80004ee:	e7f5      	b.n	80004dc <main+0x24>
//      isDataReady = 0;
	  	}
	  else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2104      	movs	r1, #4
 80004f4:	4805      	ldr	r0, [pc, #20]	@ (800050c <main+0x54>)
 80004f6:	f001 f9a1 	bl	800183c <HAL_GPIO_WritePin>
	  if (isDataReady){
 80004fa:	e7ef      	b.n	80004dc <main+0x24>
 80004fc:	20001130 	.word	0x20001130
 8000500:	20000130 	.word	0x20000130
 8000504:	20000028 	.word	0x20000028
 8000508:	20002130 	.word	0x20002130
 800050c:	40020400 	.word	0x40020400

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	@ 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	@ 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f002 fe26 	bl	8003170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b28      	ldr	r3, [pc, #160]	@ (80005dc <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053c:	4a27      	ldr	r2, [pc, #156]	@ (80005dc <SystemClock_Config+0xcc>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	@ 0x40
 8000544:	4b25      	ldr	r3, [pc, #148]	@ (80005dc <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b22      	ldr	r3, [pc, #136]	@ (80005e0 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a21      	ldr	r2, [pc, #132]	@ (80005e0 <SystemClock_Config+0xd0>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b1f      	ldr	r3, [pc, #124]	@ (80005e0 <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056c:	2301      	movs	r3, #1
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000570:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000574:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800057e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000580:	2308      	movs	r3, #8
 8000582:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000584:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000588:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800058e:	2304      	movs	r3, #4
 8000590:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	4618      	mov	r0, r3
 8000598:	f002 f844 	bl	8002624 <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005a2:	f000 f911 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2302      	movs	r3, #2
 80005ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	2105      	movs	r1, #5
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 faa5 	bl	8002b14 <HAL_RCC_ClockConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005d0:	f000 f8fa 	bl	80007c8 <Error_Handler>
  }
}
 80005d4:	bf00      	nop
 80005d6:	3750      	adds	r7, #80	@ 0x50
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80005e8:	4b13      	ldr	r3, [pc, #76]	@ (8000638 <MX_I2S2_Init+0x54>)
 80005ea:	4a14      	ldr	r2, [pc, #80]	@ (800063c <MX_I2S2_Init+0x58>)
 80005ec:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80005ee:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_I2S2_Init+0x54>)
 80005f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005f4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80005f6:	4b10      	ldr	r3, [pc, #64]	@ (8000638 <MX_I2S2_Init+0x54>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80005fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <MX_I2S2_Init+0x54>)
 80005fe:	2203      	movs	r2, #3
 8000600:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <MX_I2S2_Init+0x54>)
 8000604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000608:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800060a:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <MX_I2S2_Init+0x54>)
 800060c:	4a0c      	ldr	r2, [pc, #48]	@ (8000640 <MX_I2S2_Init+0x5c>)
 800060e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <MX_I2S2_Init+0x54>)
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000616:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <MX_I2S2_Init+0x54>)
 8000618:	2200      	movs	r2, #0
 800061a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800061c:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <MX_I2S2_Init+0x54>)
 800061e:	2201      	movs	r2, #1
 8000620:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000622:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_I2S2_Init+0x54>)
 8000624:	f001 f924 	bl	8001870 <HAL_I2S_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800062e:	f000 f8cb 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000028 	.word	0x20000028
 800063c:	40003800 	.word	0x40003800
 8000640:	00017700 	.word	0x00017700

08000644 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <MX_DMA_Init+0x4c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a0f      	ldr	r2, [pc, #60]	@ (8000690 <MX_DMA_Init+0x4c>)
 8000654:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <MX_DMA_Init+0x4c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	200e      	movs	r0, #14
 800066c:	f000 fba3 	bl	8000db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000670:	200e      	movs	r0, #14
 8000672:	f000 fbbc 	bl	8000dee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	200f      	movs	r0, #15
 800067c:	f000 fb9b 	bl	8000db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000680:	200f      	movs	r0, #15
 8000682:	f000 fbb4 	bl	8000dee <HAL_NVIC_EnableIRQ>

}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	@ 0x28
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	4b26      	ldr	r3, [pc, #152]	@ (8000748 <MX_GPIO_Init+0xb4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <MX_GPIO_Init+0xb4>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b23      	ldr	r3, [pc, #140]	@ (8000748 <MX_GPIO_Init+0xb4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <MX_GPIO_Init+0xb4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000748 <MX_GPIO_Init+0xb4>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <MX_GPIO_Init+0xb4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <MX_GPIO_Init+0xb4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a17      	ldr	r2, [pc, #92]	@ (8000748 <MX_GPIO_Init+0xb4>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <MX_GPIO_Init+0xb4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_GPIO_Init+0xb4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a10      	ldr	r2, [pc, #64]	@ (8000748 <MX_GPIO_Init+0xb4>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_GPIO_Init+0xb4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2104      	movs	r1, #4
 800071e:	480b      	ldr	r0, [pc, #44]	@ (800074c <MX_GPIO_Init+0xb8>)
 8000720:	f001 f88c 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000724:	2304      	movs	r3, #4
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_GPIO_Init+0xb8>)
 800073c:	f000 fee2 	bl	8001504 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000740:	bf00      	nop
 8000742:	3728      	adds	r7, #40	@ 0x28
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40020400 	.word	0x40020400

08000750 <HAL_I2SEx_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	inBuff = &adcData[BUFFER_SIZE/2];
 8000758:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <HAL_I2SEx_TxRxCpltCallback+0x28>)
 800075a:	4a08      	ldr	r2, [pc, #32]	@ (800077c <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 800075c:	601a      	str	r2, [r3, #0]
	outBuff = &dacData[BUFFER_SIZE/2];
 800075e:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <HAL_I2SEx_TxRxCpltCallback+0x30>)
 8000760:	4a08      	ldr	r2, [pc, #32]	@ (8000784 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 8000762:	601a      	str	r2, [r3, #0]
	isDataReady = 1;
 8000764:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	20002134 	.word	0x20002134
 800077c:	20000930 	.word	0x20000930
 8000780:	20002138 	.word	0x20002138
 8000784:	20001930 	.word	0x20001930
 8000788:	20002130 	.word	0x20002130

0800078c <HAL_I2SEx_TxRxHalfCpltCallback>:
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	inBuff = adcData;
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <HAL_I2SEx_TxRxHalfCpltCallback+0x28>)
 8000796:	4a08      	ldr	r2, [pc, #32]	@ (80007b8 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 8000798:	601a      	str	r2, [r3, #0]
	outBuff = dacData;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <HAL_I2SEx_TxRxHalfCpltCallback+0x30>)
 800079c:	4a08      	ldr	r2, [pc, #32]	@ (80007c0 <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 800079e:	601a      	str	r2, [r3, #0]
	isDataReady = 1;
 80007a0:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	20002134 	.word	0x20002134
 80007b8:	20000130 	.word	0x20000130
 80007bc:	20002138 	.word	0x20002138
 80007c0:	20001130 	.word	0x20001130
 80007c4:	20002130 	.word	0x20002130

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <Error_Handler+0x8>

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000820 <HAL_MspInit+0x4c>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <HAL_MspInit+0x4c>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fe:	4a08      	ldr	r2, [pc, #32]	@ (8000820 <HAL_MspInit+0x4c>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	@ 0x40
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <HAL_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08e      	sub	sp, #56	@ 0x38
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a6b      	ldr	r2, [pc, #428]	@ (80009fc <HAL_I2S_MspInit+0x1d8>)
 8000850:	4293      	cmp	r3, r2
 8000852:	f040 80cf 	bne.w	80009f4 <HAL_I2S_MspInit+0x1d0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000856:	2301      	movs	r3, #1
 8000858:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800085a:	23c0      	movs	r3, #192	@ 0xc0
 800085c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4618      	mov	r0, r3
 8000868:	f002 fb40 	bl	8002eec <HAL_RCCEx_PeriphCLKConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000872:	f7ff ffa9 	bl	80007c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b61      	ldr	r3, [pc, #388]	@ (8000a00 <HAL_I2S_MspInit+0x1dc>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	4a60      	ldr	r2, [pc, #384]	@ (8000a00 <HAL_I2S_MspInit+0x1dc>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000884:	6413      	str	r3, [r2, #64]	@ 0x40
 8000886:	4b5e      	ldr	r3, [pc, #376]	@ (8000a00 <HAL_I2S_MspInit+0x1dc>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b5a      	ldr	r3, [pc, #360]	@ (8000a00 <HAL_I2S_MspInit+0x1dc>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a59      	ldr	r2, [pc, #356]	@ (8000a00 <HAL_I2S_MspInit+0x1dc>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b57      	ldr	r3, [pc, #348]	@ (8000a00 <HAL_I2S_MspInit+0x1dc>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b53      	ldr	r3, [pc, #332]	@ (8000a00 <HAL_I2S_MspInit+0x1dc>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a52      	ldr	r2, [pc, #328]	@ (8000a00 <HAL_I2S_MspInit+0x1dc>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b50      	ldr	r3, [pc, #320]	@ (8000a00 <HAL_I2S_MspInit+0x1dc>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80008ca:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008dc:	2305      	movs	r3, #5
 80008de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e4:	4619      	mov	r1, r3
 80008e6:	4847      	ldr	r0, [pc, #284]	@ (8000a04 <HAL_I2S_MspInit+0x1e0>)
 80008e8:	f000 fe0c 	bl	8001504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80008fe:	2306      	movs	r3, #6
 8000900:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000906:	4619      	mov	r1, r3
 8000908:	483e      	ldr	r0, [pc, #248]	@ (8000a04 <HAL_I2S_MspInit+0x1e0>)
 800090a:	f000 fdfb 	bl	8001504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800090e:	2340      	movs	r3, #64	@ 0x40
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800091e:	2305      	movs	r3, #5
 8000920:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000926:	4619      	mov	r1, r3
 8000928:	4837      	ldr	r0, [pc, #220]	@ (8000a08 <HAL_I2S_MspInit+0x1e4>)
 800092a:	f000 fdeb 	bl	8001504 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 800092e:	4b37      	ldr	r3, [pc, #220]	@ (8000a0c <HAL_I2S_MspInit+0x1e8>)
 8000930:	4a37      	ldr	r2, [pc, #220]	@ (8000a10 <HAL_I2S_MspInit+0x1ec>)
 8000932:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000934:	4b35      	ldr	r3, [pc, #212]	@ (8000a0c <HAL_I2S_MspInit+0x1e8>)
 8000936:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800093a:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800093c:	4b33      	ldr	r3, [pc, #204]	@ (8000a0c <HAL_I2S_MspInit+0x1e8>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000942:	4b32      	ldr	r3, [pc, #200]	@ (8000a0c <HAL_I2S_MspInit+0x1e8>)
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000948:	4b30      	ldr	r3, [pc, #192]	@ (8000a0c <HAL_I2S_MspInit+0x1e8>)
 800094a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800094e:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000950:	4b2e      	ldr	r3, [pc, #184]	@ (8000a0c <HAL_I2S_MspInit+0x1e8>)
 8000952:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000956:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000958:	4b2c      	ldr	r3, [pc, #176]	@ (8000a0c <HAL_I2S_MspInit+0x1e8>)
 800095a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800095e:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000960:	4b2a      	ldr	r3, [pc, #168]	@ (8000a0c <HAL_I2S_MspInit+0x1e8>)
 8000962:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000966:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000968:	4b28      	ldr	r3, [pc, #160]	@ (8000a0c <HAL_I2S_MspInit+0x1e8>)
 800096a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800096e:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000970:	4b26      	ldr	r3, [pc, #152]	@ (8000a0c <HAL_I2S_MspInit+0x1e8>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000976:	4825      	ldr	r0, [pc, #148]	@ (8000a0c <HAL_I2S_MspInit+0x1e8>)
 8000978:	f000 fa54 	bl	8000e24 <HAL_DMA_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 8000982:	f7ff ff21 	bl	80007c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a20      	ldr	r2, [pc, #128]	@ (8000a0c <HAL_I2S_MspInit+0x1e8>)
 800098a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800098c:	4a1f      	ldr	r2, [pc, #124]	@ (8000a0c <HAL_I2S_MspInit+0x1e8>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000992:	4b20      	ldr	r3, [pc, #128]	@ (8000a14 <HAL_I2S_MspInit+0x1f0>)
 8000994:	4a20      	ldr	r2, [pc, #128]	@ (8000a18 <HAL_I2S_MspInit+0x1f4>)
 8000996:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000998:	4b1e      	ldr	r3, [pc, #120]	@ (8000a14 <HAL_I2S_MspInit+0x1f0>)
 800099a:	2200      	movs	r2, #0
 800099c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800099e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a14 <HAL_I2S_MspInit+0x1f0>)
 80009a0:	2240      	movs	r2, #64	@ 0x40
 80009a2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <HAL_I2S_MspInit+0x1f0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <HAL_I2S_MspInit+0x1f0>)
 80009ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009b0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009b2:	4b18      	ldr	r3, [pc, #96]	@ (8000a14 <HAL_I2S_MspInit+0x1f0>)
 80009b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009b8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009ba:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <HAL_I2S_MspInit+0x1f0>)
 80009bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009c0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80009c2:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <HAL_I2S_MspInit+0x1f0>)
 80009c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009c8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80009ca:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <HAL_I2S_MspInit+0x1f0>)
 80009cc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80009d0:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <HAL_I2S_MspInit+0x1f0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80009d8:	480e      	ldr	r0, [pc, #56]	@ (8000a14 <HAL_I2S_MspInit+0x1f0>)
 80009da:	f000 fa23 	bl	8000e24 <HAL_DMA_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 80009e4:	f7ff fef0 	bl	80007c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <HAL_I2S_MspInit+0x1f0>)
 80009ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80009ee:	4a09      	ldr	r2, [pc, #36]	@ (8000a14 <HAL_I2S_MspInit+0x1f0>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80009f4:	bf00      	nop
 80009f6:	3738      	adds	r7, #56	@ 0x38
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40003800 	.word	0x40003800
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020400 	.word	0x40020400
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	20000070 	.word	0x20000070
 8000a10:	40026058 	.word	0x40026058
 8000a14:	200000d0 	.word	0x200000d0
 8000a18:	40026070 	.word	0x40026070

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <NMI_Handler+0x4>

08000a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <MemManage_Handler+0x4>

08000a34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a72:	f000 f8a5 	bl	8000bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <DMA1_Stream3_IRQHandler+0x10>)
 8000a82:	f000 fad5 	bl	8001030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000070 	.word	0x20000070

08000a90 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <DMA1_Stream4_IRQHandler+0x10>)
 8000a96:	f000 facb 	bl	8001030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000d0 	.word	0x200000d0

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	@ (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000acc:	f7ff ffea 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	@ (8000b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f002 fb43 	bl	8003180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fcdd 	bl	80004b8 <main>
  bx  lr    
 8000afe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b0c:	08003208 	.word	0x08003208
  ldr r2, =_sbss
 8000b10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b14:	20002140 	.word	0x20002140

08000b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b20:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0d      	ldr	r2, [pc, #52]	@ (8000b5c <HAL_Init+0x40>)
 8000b26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <HAL_Init+0x40>)
 8000b32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b38:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a07      	ldr	r2, [pc, #28]	@ (8000b5c <HAL_Init+0x40>)
 8000b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 f92b 	bl	8000da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f000 f808 	bl	8000b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b50:	f7ff fe40 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023c00 	.word	0x40023c00

08000b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <HAL_InitTick+0x54>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <HAL_InitTick+0x58>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4619      	mov	r1, r3
 8000b72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 f943 	bl	8000e0a <HAL_SYSTICK_Config>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e00e      	b.n	8000bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	d80a      	bhi.n	8000baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b94:	2200      	movs	r2, #0
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f000 f90b 	bl	8000db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba0:	4a06      	ldr	r2, [pc, #24]	@ (8000bbc <HAL_InitTick+0x5c>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e000      	b.n	8000bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	20000004 	.word	0x20000004

08000bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_IncTick+0x20>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_IncTick+0x24>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <HAL_IncTick+0x24>)
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000008 	.word	0x20000008
 8000be4:	2000213c 	.word	0x2000213c

08000be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b03      	ldr	r3, [pc, #12]	@ (8000bfc <HAL_GetTick+0x14>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	2000213c 	.word	0x2000213c

08000c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c10:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c32:	4a04      	ldr	r2, [pc, #16]	@ (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	60d3      	str	r3, [r2, #12]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4c:	4b04      	ldr	r3, [pc, #16]	@ (8000c60 <__NVIC_GetPriorityGrouping+0x18>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	f003 0307 	and.w	r3, r3, #7
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db0b      	blt.n	8000c8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f003 021f 	and.w	r2, r3, #31
 8000c7c:	4907      	ldr	r1, [pc, #28]	@ (8000c9c <__NVIC_EnableIRQ+0x38>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	095b      	lsrs	r3, r3, #5
 8000c84:	2001      	movs	r0, #1
 8000c86:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e100 	.word	0xe000e100

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	@ (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	@ (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	@ 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	@ 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d6c:	d301      	bcc.n	8000d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00f      	b.n	8000d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d72:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <SysTick_Config+0x40>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7a:	210f      	movs	r1, #15
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f7ff ff8e 	bl	8000ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <SysTick_Config+0x40>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8a:	4b04      	ldr	r3, [pc, #16]	@ (8000d9c <SysTick_Config+0x40>)
 8000d8c:	2207      	movs	r2, #7
 8000d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	e000e010 	.word	0xe000e010

08000da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff29 	bl	8000c00 <__NVIC_SetPriorityGrouping>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc8:	f7ff ff3e 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	f7ff ff8e 	bl	8000cf4 <NVIC_EncodePriority>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff5d 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff31 	bl	8000c64 <__NVIC_EnableIRQ>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffa2 	bl	8000d5c <SysTick_Config>
 8000e18:	4603      	mov	r3, r0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e30:	f7ff feda 	bl	8000be8 <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e099      	b.n	8000f74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2202      	movs	r2, #2
 8000e44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 0201 	bic.w	r2, r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e60:	e00f      	b.n	8000e82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e62:	f7ff fec1 	bl	8000be8 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b05      	cmp	r3, #5
 8000e6e:	d908      	bls.n	8000e82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2220      	movs	r2, #32
 8000e74:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2203      	movs	r2, #3
 8000e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e078      	b.n	8000f74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1e8      	bne.n	8000e62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	4b38      	ldr	r3, [pc, #224]	@ (8000f7c <HAL_DMA_Init+0x158>)
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d107      	bne.n	8000eec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f023 0307 	bic.w	r3, r3, #7
 8000f02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	d117      	bne.n	8000f46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d00e      	beq.n	8000f46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f000 fa6f 	bl	800140c <DMA_CheckFifoParam>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d008      	beq.n	8000f46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2240      	movs	r2, #64	@ 0x40
 8000f38:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8000f42:	2301      	movs	r3, #1
 8000f44:	e016      	b.n	8000f74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 fa26 	bl	80013a0 <DMA_CalcBaseAndBitshift>
 8000f54:	4603      	mov	r3, r0
 8000f56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f5c:	223f      	movs	r2, #63	@ 0x3f
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	f010803f 	.word	0xf010803f

08000f80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d101      	bne.n	8000fa6 <HAL_DMA_Start_IT+0x26>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	e040      	b.n	8001028 <HAL_DMA_Start_IT+0xa8>
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d12f      	bne.n	800101a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 f9b8 	bl	8001344 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fd8:	223f      	movs	r2, #63	@ 0x3f
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0216 	orr.w	r2, r2, #22
 8000fee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d007      	beq.n	8001008 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 0208 	orr.w	r2, r2, #8
 8001006:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f042 0201 	orr.w	r2, r2, #1
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	e005      	b.n	8001026 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001022:	2302      	movs	r3, #2
 8001024:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001026:	7dfb      	ldrb	r3, [r7, #23]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800103c:	4b8e      	ldr	r3, [pc, #568]	@ (8001278 <HAL_DMA_IRQHandler+0x248>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a8e      	ldr	r2, [pc, #568]	@ (800127c <HAL_DMA_IRQHandler+0x24c>)
 8001042:	fba2 2303 	umull	r2, r3, r2, r3
 8001046:	0a9b      	lsrs	r3, r3, #10
 8001048:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800105a:	2208      	movs	r2, #8
 800105c:	409a      	lsls	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4013      	ands	r3, r2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d01a      	beq.n	800109c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	d013      	beq.n	800109c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0204 	bic.w	r2, r2, #4
 8001082:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001088:	2208      	movs	r2, #8
 800108a:	409a      	lsls	r2, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001094:	f043 0201 	orr.w	r2, r3, #1
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010a0:	2201      	movs	r2, #1
 80010a2:	409a      	lsls	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d012      	beq.n	80010d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00b      	beq.n	80010d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010be:	2201      	movs	r2, #1
 80010c0:	409a      	lsls	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010ca:	f043 0202 	orr.w	r2, r3, #2
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010d6:	2204      	movs	r2, #4
 80010d8:	409a      	lsls	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4013      	ands	r3, r2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d012      	beq.n	8001108 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00b      	beq.n	8001108 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010f4:	2204      	movs	r2, #4
 80010f6:	409a      	lsls	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001100:	f043 0204 	orr.w	r2, r3, #4
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800110c:	2210      	movs	r2, #16
 800110e:	409a      	lsls	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4013      	ands	r3, r2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d043      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	2b00      	cmp	r3, #0
 8001124:	d03c      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800112a:	2210      	movs	r2, #16
 800112c:	409a      	lsls	r2, r3
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d018      	beq.n	8001172 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d108      	bne.n	8001160 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d024      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	4798      	blx	r3
 800115e:	e01f      	b.n	80011a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001164:	2b00      	cmp	r3, #0
 8001166:	d01b      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	4798      	blx	r3
 8001170:	e016      	b.n	80011a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800117c:	2b00      	cmp	r3, #0
 800117e:	d107      	bne.n	8001190 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0208 	bic.w	r2, r2, #8
 800118e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011a4:	2220      	movs	r2, #32
 80011a6:	409a      	lsls	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 808f 	beq.w	80012d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 8087 	beq.w	80012d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011c6:	2220      	movs	r2, #32
 80011c8:	409a      	lsls	r2, r3
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b05      	cmp	r3, #5
 80011d8:	d136      	bne.n	8001248 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0216 	bic.w	r2, r2, #22
 80011e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	695a      	ldr	r2, [r3, #20]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d103      	bne.n	800120a <HAL_DMA_IRQHandler+0x1da>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0208 	bic.w	r2, r2, #8
 8001218:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800121e:	223f      	movs	r2, #63	@ 0x3f
 8001220:	409a      	lsls	r2, r3
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800123a:	2b00      	cmp	r3, #0
 800123c:	d07e      	beq.n	800133c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	4798      	blx	r3
        }
        return;
 8001246:	e079      	b.n	800133c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d01d      	beq.n	8001292 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10d      	bne.n	8001280 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001268:	2b00      	cmp	r3, #0
 800126a:	d031      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	4798      	blx	r3
 8001274:	e02c      	b.n	80012d0 <HAL_DMA_IRQHandler+0x2a0>
 8001276:	bf00      	nop
 8001278:	20000000 	.word	0x20000000
 800127c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001284:	2b00      	cmp	r3, #0
 8001286:	d023      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	4798      	blx	r3
 8001290:	e01e      	b.n	80012d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10f      	bne.n	80012c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0210 	bic.w	r2, r2, #16
 80012ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d032      	beq.n	800133e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d022      	beq.n	800132a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2205      	movs	r2, #5
 80012e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0201 	bic.w	r2, r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	3301      	adds	r3, #1
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	429a      	cmp	r2, r3
 8001306:	d307      	bcc.n	8001318 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f2      	bne.n	80012fc <HAL_DMA_IRQHandler+0x2cc>
 8001316:	e000      	b.n	800131a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001318:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	2b00      	cmp	r3, #0
 8001330:	d005      	beq.n	800133e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	4798      	blx	r3
 800133a:	e000      	b.n	800133e <HAL_DMA_IRQHandler+0x30e>
        return;
 800133c:	bf00      	nop
    }
  }
}
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001360:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	2b40      	cmp	r3, #64	@ 0x40
 8001370:	d108      	bne.n	8001384 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001382:	e007      	b.n	8001394 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	60da      	str	r2, [r3, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	3b10      	subs	r3, #16
 80013b0:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <DMA_CalcBaseAndBitshift+0x64>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	091b      	lsrs	r3, r3, #4
 80013b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013ba:	4a13      	ldr	r2, [pc, #76]	@ (8001408 <DMA_CalcBaseAndBitshift+0x68>)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d909      	bls.n	80013e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80013d6:	f023 0303 	bic.w	r3, r3, #3
 80013da:	1d1a      	adds	r2, r3, #4
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	659a      	str	r2, [r3, #88]	@ 0x58
 80013e0:	e007      	b.n	80013f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80013ea:	f023 0303 	bic.w	r3, r3, #3
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	aaaaaaab 	.word	0xaaaaaaab
 8001408:	080031f0 	.word	0x080031f0

0800140c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800141c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d11f      	bne.n	8001466 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	2b03      	cmp	r3, #3
 800142a:	d856      	bhi.n	80014da <DMA_CheckFifoParam+0xce>
 800142c:	a201      	add	r2, pc, #4	@ (adr r2, 8001434 <DMA_CheckFifoParam+0x28>)
 800142e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001432:	bf00      	nop
 8001434:	08001445 	.word	0x08001445
 8001438:	08001457 	.word	0x08001457
 800143c:	08001445 	.word	0x08001445
 8001440:	080014db 	.word	0x080014db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001448:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d046      	beq.n	80014de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001454:	e043      	b.n	80014de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800145a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800145e:	d140      	bne.n	80014e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001464:	e03d      	b.n	80014e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800146e:	d121      	bne.n	80014b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d837      	bhi.n	80014e6 <DMA_CheckFifoParam+0xda>
 8001476:	a201      	add	r2, pc, #4	@ (adr r2, 800147c <DMA_CheckFifoParam+0x70>)
 8001478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147c:	0800148d 	.word	0x0800148d
 8001480:	08001493 	.word	0x08001493
 8001484:	0800148d 	.word	0x0800148d
 8001488:	080014a5 	.word	0x080014a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
      break;
 8001490:	e030      	b.n	80014f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001496:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d025      	beq.n	80014ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014a2:	e022      	b.n	80014ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80014ac:	d11f      	bne.n	80014ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80014b2:	e01c      	b.n	80014ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d903      	bls.n	80014c2 <DMA_CheckFifoParam+0xb6>
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d003      	beq.n	80014c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80014c0:	e018      	b.n	80014f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
      break;
 80014c6:	e015      	b.n	80014f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00e      	beq.n	80014f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
      break;
 80014d8:	e00b      	b.n	80014f2 <DMA_CheckFifoParam+0xe6>
      break;
 80014da:	bf00      	nop
 80014dc:	e00a      	b.n	80014f4 <DMA_CheckFifoParam+0xe8>
      break;
 80014de:	bf00      	nop
 80014e0:	e008      	b.n	80014f4 <DMA_CheckFifoParam+0xe8>
      break;
 80014e2:	bf00      	nop
 80014e4:	e006      	b.n	80014f4 <DMA_CheckFifoParam+0xe8>
      break;
 80014e6:	bf00      	nop
 80014e8:	e004      	b.n	80014f4 <DMA_CheckFifoParam+0xe8>
      break;
 80014ea:	bf00      	nop
 80014ec:	e002      	b.n	80014f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80014ee:	bf00      	nop
 80014f0:	e000      	b.n	80014f4 <DMA_CheckFifoParam+0xe8>
      break;
 80014f2:	bf00      	nop
    }
  } 
  
  return status; 
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop

08001504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	@ 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
 800151e:	e16b      	b.n	80017f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001520:	2201      	movs	r2, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	429a      	cmp	r2, r3
 800153a:	f040 815a 	bne.w	80017f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d005      	beq.n	8001556 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001552:	2b02      	cmp	r3, #2
 8001554:	d130      	bne.n	80015b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	2203      	movs	r2, #3
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800158c:	2201      	movs	r2, #1
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	f003 0201 	and.w	r2, r3, #1
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d017      	beq.n	80015f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d123      	bne.n	8001648 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	08da      	lsrs	r2, r3, #3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3208      	adds	r2, #8
 8001608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	220f      	movs	r2, #15
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	691a      	ldr	r2, [r3, #16]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	08da      	lsrs	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3208      	adds	r2, #8
 8001642:	69b9      	ldr	r1, [r7, #24]
 8001644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0203 	and.w	r2, r3, #3
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80b4 	beq.w	80017f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b60      	ldr	r3, [pc, #384]	@ (8001810 <HAL_GPIO_Init+0x30c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	4a5f      	ldr	r2, [pc, #380]	@ (8001810 <HAL_GPIO_Init+0x30c>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001698:	6453      	str	r3, [r2, #68]	@ 0x44
 800169a:	4b5d      	ldr	r3, [pc, #372]	@ (8001810 <HAL_GPIO_Init+0x30c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001814 <HAL_GPIO_Init+0x310>)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3302      	adds	r3, #2
 80016ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	220f      	movs	r2, #15
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a52      	ldr	r2, [pc, #328]	@ (8001818 <HAL_GPIO_Init+0x314>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d02b      	beq.n	800172a <HAL_GPIO_Init+0x226>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a51      	ldr	r2, [pc, #324]	@ (800181c <HAL_GPIO_Init+0x318>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d025      	beq.n	8001726 <HAL_GPIO_Init+0x222>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a50      	ldr	r2, [pc, #320]	@ (8001820 <HAL_GPIO_Init+0x31c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d01f      	beq.n	8001722 <HAL_GPIO_Init+0x21e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001824 <HAL_GPIO_Init+0x320>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d019      	beq.n	800171e <HAL_GPIO_Init+0x21a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001828 <HAL_GPIO_Init+0x324>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d013      	beq.n	800171a <HAL_GPIO_Init+0x216>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4d      	ldr	r2, [pc, #308]	@ (800182c <HAL_GPIO_Init+0x328>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d00d      	beq.n	8001716 <HAL_GPIO_Init+0x212>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001830 <HAL_GPIO_Init+0x32c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d007      	beq.n	8001712 <HAL_GPIO_Init+0x20e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4b      	ldr	r2, [pc, #300]	@ (8001834 <HAL_GPIO_Init+0x330>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d101      	bne.n	800170e <HAL_GPIO_Init+0x20a>
 800170a:	2307      	movs	r3, #7
 800170c:	e00e      	b.n	800172c <HAL_GPIO_Init+0x228>
 800170e:	2308      	movs	r3, #8
 8001710:	e00c      	b.n	800172c <HAL_GPIO_Init+0x228>
 8001712:	2306      	movs	r3, #6
 8001714:	e00a      	b.n	800172c <HAL_GPIO_Init+0x228>
 8001716:	2305      	movs	r3, #5
 8001718:	e008      	b.n	800172c <HAL_GPIO_Init+0x228>
 800171a:	2304      	movs	r3, #4
 800171c:	e006      	b.n	800172c <HAL_GPIO_Init+0x228>
 800171e:	2303      	movs	r3, #3
 8001720:	e004      	b.n	800172c <HAL_GPIO_Init+0x228>
 8001722:	2302      	movs	r3, #2
 8001724:	e002      	b.n	800172c <HAL_GPIO_Init+0x228>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <HAL_GPIO_Init+0x228>
 800172a:	2300      	movs	r3, #0
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	f002 0203 	and.w	r2, r2, #3
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	4093      	lsls	r3, r2
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800173c:	4935      	ldr	r1, [pc, #212]	@ (8001814 <HAL_GPIO_Init+0x310>)
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	089b      	lsrs	r3, r3, #2
 8001742:	3302      	adds	r3, #2
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800174a:	4b3b      	ldr	r3, [pc, #236]	@ (8001838 <HAL_GPIO_Init+0x334>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800176e:	4a32      	ldr	r2, [pc, #200]	@ (8001838 <HAL_GPIO_Init+0x334>)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001774:	4b30      	ldr	r3, [pc, #192]	@ (8001838 <HAL_GPIO_Init+0x334>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001798:	4a27      	ldr	r2, [pc, #156]	@ (8001838 <HAL_GPIO_Init+0x334>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800179e:	4b26      	ldr	r3, [pc, #152]	@ (8001838 <HAL_GPIO_Init+0x334>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001838 <HAL_GPIO_Init+0x334>)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <HAL_GPIO_Init+0x334>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017ec:	4a12      	ldr	r2, [pc, #72]	@ (8001838 <HAL_GPIO_Init+0x334>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3301      	adds	r3, #1
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b0f      	cmp	r3, #15
 80017fc:	f67f ae90 	bls.w	8001520 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3724      	adds	r7, #36	@ 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800
 8001814:	40013800 	.word	0x40013800
 8001818:	40020000 	.word	0x40020000
 800181c:	40020400 	.word	0x40020400
 8001820:	40020800 	.word	0x40020800
 8001824:	40020c00 	.word	0x40020c00
 8001828:	40021000 	.word	0x40021000
 800182c:	40021400 	.word	0x40021400
 8001830:	40021800 	.word	0x40021800
 8001834:	40021c00 	.word	0x40021c00
 8001838:	40013c00 	.word	0x40013c00

0800183c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]
 8001848:	4613      	mov	r3, r2
 800184a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001858:	e003      	b.n	8001862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	041a      	lsls	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	619a      	str	r2, [r3, #24]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e128      	b.n	8001ad4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a90      	ldr	r2, [pc, #576]	@ (8001adc <HAL_I2S_Init+0x26c>)
 800189a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7fe ffc1 	bl	8000824 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2202      	movs	r2, #2
 80018a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80018b8:	f023 030f 	bic.w	r3, r3, #15
 80018bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2202      	movs	r2, #2
 80018c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d060      	beq.n	8001990 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80018d6:	2310      	movs	r3, #16
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	e001      	b.n	80018e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80018dc:	2320      	movs	r3, #32
 80018de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b20      	cmp	r3, #32
 80018e6:	d802      	bhi.n	80018ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80018ee:	2001      	movs	r0, #1
 80018f0:	f001 fbde 	bl	80030b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80018f4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018fe:	d125      	bne.n	800194c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d010      	beq.n	800192a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	461a      	mov	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	fbb2 f3f3 	udiv	r3, r2, r3
 8001924:	3305      	adds	r3, #5
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	e01f      	b.n	800196a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	fbb2 f2f3 	udiv	r2, r2, r3
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	461a      	mov	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	3305      	adds	r3, #5
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	e00e      	b.n	800196a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	fbb2 f2f3 	udiv	r2, r2, r3
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	461a      	mov	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	3305      	adds	r3, #5
 8001968:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4a5c      	ldr	r2, [pc, #368]	@ (8001ae0 <HAL_I2S_Init+0x270>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	08db      	lsrs	r3, r3, #3
 8001974:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	085b      	lsrs	r3, r3, #1
 8001986:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	e003      	b.n	8001998 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001990:	2302      	movs	r3, #2
 8001992:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d902      	bls.n	80019a4 <HAL_I2S_Init+0x134>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	2bff      	cmp	r3, #255	@ 0xff
 80019a2:	d907      	bls.n	80019b4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a8:	f043 0210 	orr.w	r2, r3, #16
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e08f      	b.n	8001ad4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	ea42 0103 	orr.w	r1, r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	69fa      	ldr	r2, [r7, #28]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80019d2:	f023 030f 	bic.w	r3, r3, #15
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6851      	ldr	r1, [r2, #4]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6892      	ldr	r2, [r2, #8]
 80019de:	4311      	orrs	r1, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	68d2      	ldr	r2, [r2, #12]
 80019e4:	4311      	orrs	r1, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6992      	ldr	r2, [r2, #24]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019f6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d161      	bne.n	8001ac4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a38      	ldr	r2, [pc, #224]	@ (8001ae4 <HAL_I2S_Init+0x274>)
 8001a04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a37      	ldr	r2, [pc, #220]	@ (8001ae8 <HAL_I2S_Init+0x278>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d101      	bne.n	8001a14 <HAL_I2S_Init+0x1a4>
 8001a10:	4b36      	ldr	r3, [pc, #216]	@ (8001aec <HAL_I2S_Init+0x27c>)
 8001a12:	e001      	b.n	8001a18 <HAL_I2S_Init+0x1a8>
 8001a14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	4932      	ldr	r1, [pc, #200]	@ (8001ae8 <HAL_I2S_Init+0x278>)
 8001a20:	428a      	cmp	r2, r1
 8001a22:	d101      	bne.n	8001a28 <HAL_I2S_Init+0x1b8>
 8001a24:	4a31      	ldr	r2, [pc, #196]	@ (8001aec <HAL_I2S_Init+0x27c>)
 8001a26:	e001      	b.n	8001a2c <HAL_I2S_Init+0x1bc>
 8001a28:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001a2c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001a30:	f023 030f 	bic.w	r3, r3, #15
 8001a34:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a2b      	ldr	r2, [pc, #172]	@ (8001ae8 <HAL_I2S_Init+0x278>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d101      	bne.n	8001a44 <HAL_I2S_Init+0x1d4>
 8001a40:	4b2a      	ldr	r3, [pc, #168]	@ (8001aec <HAL_I2S_Init+0x27c>)
 8001a42:	e001      	b.n	8001a48 <HAL_I2S_Init+0x1d8>
 8001a44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001a48:	2202      	movs	r2, #2
 8001a4a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a25      	ldr	r2, [pc, #148]	@ (8001ae8 <HAL_I2S_Init+0x278>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d101      	bne.n	8001a5a <HAL_I2S_Init+0x1ea>
 8001a56:	4b25      	ldr	r3, [pc, #148]	@ (8001aec <HAL_I2S_Init+0x27c>)
 8001a58:	e001      	b.n	8001a5e <HAL_I2S_Init+0x1ee>
 8001a5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a6a:	d003      	beq.n	8001a74 <HAL_I2S_Init+0x204>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d103      	bne.n	8001a7c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001a74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	e001      	b.n	8001a80 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a94:	4313      	orrs	r3, r2
 8001a96:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	897b      	ldrh	r3, [r7, #10]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001aac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae8 <HAL_I2S_Init+0x278>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d101      	bne.n	8001abc <HAL_I2S_Init+0x24c>
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8001aec <HAL_I2S_Init+0x27c>)
 8001aba:	e001      	b.n	8001ac0 <HAL_I2S_Init+0x250>
 8001abc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ac0:	897a      	ldrh	r2, [r7, #10]
 8001ac2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	08001be7 	.word	0x08001be7
 8001ae0:	cccccccd 	.word	0xcccccccd
 8001ae4:	08002011 	.word	0x08002011
 8001ae8:	40003800 	.word	0x40003800
 8001aec:	40003400 	.word	0x40003400

08001af0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b38:	881a      	ldrh	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b44:	1c9a      	adds	r2, r3, #2
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10e      	bne.n	8001b80 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001b70:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ffb8 	bl	8001af0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9a:	b292      	uxth	r2, r2
 8001b9c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba2:	1c9a      	adds	r2, r3, #2
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10e      	bne.n	8001bde <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001bce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff93 	bl	8001b04 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d13a      	bne.n	8001c78 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d109      	bne.n	8001c20 <I2S_IRQHandler+0x3a>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c16:	2b40      	cmp	r3, #64	@ 0x40
 8001c18:	d102      	bne.n	8001c20 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ffb4 	bl	8001b88 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c26:	2b40      	cmp	r3, #64	@ 0x40
 8001c28:	d126      	bne.n	8001c78 <I2S_IRQHandler+0x92>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0320 	and.w	r3, r3, #32
 8001c34:	2b20      	cmp	r3, #32
 8001c36:	d11f      	bne.n	8001c78 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6a:	f043 0202 	orr.w	r2, r3, #2
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ff50 	bl	8001b18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d136      	bne.n	8001cf2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d109      	bne.n	8001ca2 <I2S_IRQHandler+0xbc>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c98:	2b80      	cmp	r3, #128	@ 0x80
 8001c9a:	d102      	bne.n	8001ca2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff45 	bl	8001b2c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d122      	bne.n	8001cf2 <I2S_IRQHandler+0x10c>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d11b      	bne.n	8001cf2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001cc8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce4:	f043 0204 	orr.w	r2, r3, #4
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff13 	bl	8001b18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d002      	beq.n	8001d28 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8001d22:	2302      	movs	r3, #2
 8001d24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d26:	e160      	b.n	8001fea <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d005      	beq.n	8001d3a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e15a      	b.n	8001ff4 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e152      	b.n	8001ff4 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  hi2s->pTxBuffPtr = pTxData;
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->pRxBuffPtr = pRxData;
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d002      	beq.n	8001d7a <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2b05      	cmp	r3, #5
 8001d78:	d114      	bne.n	8001da4 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8001d7a:	887b      	ldrh	r3, [r7, #2]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8001d84:	887b      	ldrh	r3, [r7, #2]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001d98:	887b      	ldrh	r3, [r7, #2]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	865a      	strh	r2, [r3, #50]	@ 0x32
 8001da2:	e00b      	b.n	8001dbc <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	887a      	ldrh	r2, [r7, #2]
 8001dae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = Size;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	887a      	ldrh	r2, [r7, #2]
 8001db4:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	887a      	ldrh	r2, [r7, #2]
 8001dba:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2205      	movs	r2, #5
 8001dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dce:	4a8b      	ldr	r2, [pc, #556]	@ (8001ffc <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8001dd0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd6:	4a8a      	ldr	r2, [pc, #552]	@ (8002000 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8001dd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dde:	4a89      	ldr	r2, [pc, #548]	@ (8002004 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8001de0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001de6:	2200      	movs	r2, #0
 8001de8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dee:	2200      	movs	r2, #0
 8001df0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df6:	4a83      	ldr	r2, [pc, #524]	@ (8002004 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8001df8:	64da      	str	r2, [r3, #76]	@ 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e04:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e0c:	d002      	beq.n	8001e14 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d16b      	bne.n	8001eec <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a79      	ldr	r2, [pc, #484]	@ (8002008 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d101      	bne.n	8001e2a <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8001e26:	4b79      	ldr	r3, [pc, #484]	@ (800200c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001e28:	e001      	b.n	8001e2e <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8001e2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e2e:	330c      	adds	r3, #12
 8001e30:	4619      	mov	r1, r3
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	f7ff f8a0 	bl	8000f80 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a70      	ldr	r2, [pc, #448]	@ (8002008 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8001e4a:	4b70      	ldr	r3, [pc, #448]	@ (800200c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001e4c:	e001      	b.n	8001e52 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8001e4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	496b      	ldr	r1, [pc, #428]	@ (8002008 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001e5a:	428b      	cmp	r3, r1
 8001e5c:	d101      	bne.n	8001e62 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8001e5e:	4b6b      	ldr	r3, [pc, #428]	@ (800200c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001e60:	e001      	b.n	8001e66 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8001e62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e66:	f042 0201 	orr.w	r2, r2, #1
 8001e6a:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8001e6c:	f107 0308 	add.w	r3, r7, #8
 8001e70:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	6819      	ldr	r1, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	330c      	adds	r3, #12
 8001e80:	461a      	mov	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	f7ff f87a 	bl	8000f80 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0202 	orr.w	r2, r2, #2
 8001e9a:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eaa:	f000 809e 	beq.w	8001fea <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a55      	ldr	r2, [pc, #340]	@ (8002008 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8001eb8:	4b54      	ldr	r3, [pc, #336]	@ (800200c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001eba:	e001      	b.n	8001ec0 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8001ebc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ec0:	69da      	ldr	r2, [r3, #28]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4950      	ldr	r1, [pc, #320]	@ (8002008 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001ec8:	428b      	cmp	r3, r1
 8001eca:	d101      	bne.n	8001ed0 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8001ecc:	4b4f      	ldr	r3, [pc, #316]	@ (800200c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001ece:	e001      	b.n	8001ed4 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8001ed0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ed4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ed8:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	69da      	ldr	r2, [r3, #28]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ee8:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8001eea:	e07e      	b.n	8001fea <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ef6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001efa:	d10a      	bne.n	8001f12 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8001f12:	f107 0308 	add.w	r3, r7, #8
 8001f16:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	6819      	ldr	r1, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a38      	ldr	r2, [pc, #224]	@ (8002008 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d101      	bne.n	8001f2e <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8001f2a:	4b38      	ldr	r3, [pc, #224]	@ (800200c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001f2c:	e001      	b.n	8001f32 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8001f2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f32:	330c      	adds	r3, #12
 8001f34:	461a      	mov	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	f7ff f820 	bl	8000f80 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a30      	ldr	r2, [pc, #192]	@ (8002008 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d101      	bne.n	8001f4e <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8001f4a:	4b30      	ldr	r3, [pc, #192]	@ (800200c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001f4c:	e001      	b.n	8001f52 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8001f4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	492b      	ldr	r1, [pc, #172]	@ (8002008 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001f5a:	428b      	cmp	r3, r1
 8001f5c:	d101      	bne.n	8001f62 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8001f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800200c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001f60:	e001      	b.n	8001f66 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8001f62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f66:	f042 0202 	orr.w	r2, r2, #2
 8001f6a:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	330c      	adds	r3, #12
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	f7fe fffb 	bl	8000f80 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 0201 	orr.w	r2, r2, #1
 8001f98:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fa8:	d01e      	beq.n	8001fe8 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a16      	ldr	r2, [pc, #88]	@ (8002008 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d101      	bne.n	8001fb8 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8001fb4:	4b15      	ldr	r3, [pc, #84]	@ (800200c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001fb6:	e001      	b.n	8001fbc <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8001fb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fbc:	69da      	ldr	r2, [r3, #28]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4911      	ldr	r1, [pc, #68]	@ (8002008 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001fc4:	428b      	cmp	r3, r1
 8001fc6:	d101      	bne.n	8001fcc <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8001fc8:	4b10      	ldr	r3, [pc, #64]	@ (800200c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001fca:	e001      	b.n	8001fd0 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8001fcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001fd4:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	69da      	ldr	r2, [r3, #28]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001fe4:	61da      	str	r2, [r3, #28]
 8001fe6:	e000      	b.n	8001fea <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8001fe8:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return errorcode;
 8001ff2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3720      	adds	r7, #32
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	080022b9 	.word	0x080022b9
 8002000:	080022d5 	.word	0x080022d5
 8002004:	080023ad 	.word	0x080023ad
 8002008:	40003800 	.word	0x40003800
 800200c:	40003400 	.word	0x40003400

08002010 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a92      	ldr	r2, [pc, #584]	@ (8002270 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d101      	bne.n	800202e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800202a:	4b92      	ldr	r3, [pc, #584]	@ (8002274 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800202c:	e001      	b.n	8002032 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800202e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a8b      	ldr	r2, [pc, #556]	@ (8002270 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d101      	bne.n	800204c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002048:	4b8a      	ldr	r3, [pc, #552]	@ (8002274 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800204a:	e001      	b.n	8002050 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800204c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800205c:	d004      	beq.n	8002068 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f040 8099 	bne.w	800219a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b02      	cmp	r3, #2
 8002070:	d107      	bne.n	8002082 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f9d5 	bl	800242c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fa78 	bl	800258c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a2:	2b40      	cmp	r3, #64	@ 0x40
 80020a4:	d13a      	bne.n	800211c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d035      	beq.n	800211c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a6e      	ldr	r2, [pc, #440]	@ (8002270 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80020ba:	4b6e      	ldr	r3, [pc, #440]	@ (8002274 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020bc:	e001      	b.n	80020c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80020be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4969      	ldr	r1, [pc, #420]	@ (8002270 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020ca:	428b      	cmp	r3, r1
 80020cc:	d101      	bne.n	80020d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80020ce:	4b69      	ldr	r3, [pc, #420]	@ (8002274 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020d0:	e001      	b.n	80020d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80020d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80020da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80020ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	f043 0202 	orr.w	r2, r3, #2
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fcfe 	bl	8001b18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b08      	cmp	r3, #8
 8002124:	f040 80c3 	bne.w	80022ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80bd 	beq.w	80022ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002142:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a49      	ldr	r2, [pc, #292]	@ (8002270 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800214e:	4b49      	ldr	r3, [pc, #292]	@ (8002274 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002150:	e001      	b.n	8002156 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002152:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4944      	ldr	r1, [pc, #272]	@ (8002270 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800215e:	428b      	cmp	r3, r1
 8002160:	d101      	bne.n	8002166 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002162:	4b44      	ldr	r3, [pc, #272]	@ (8002274 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002164:	e001      	b.n	800216a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002166:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800216a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800216e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218a:	f043 0204 	orr.w	r2, r3, #4
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fcc0 	bl	8001b18 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002198:	e089      	b.n	80022ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d107      	bne.n	80021b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f96e 	bl	8002490 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d107      	bne.n	80021ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f9ad 	bl	8002528 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d4:	2b40      	cmp	r3, #64	@ 0x40
 80021d6:	d12f      	bne.n	8002238 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d02a      	beq.n	8002238 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80021f0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002270 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d101      	bne.n	8002200 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80021fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002274 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021fe:	e001      	b.n	8002204 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002200:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4919      	ldr	r1, [pc, #100]	@ (8002270 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800220c:	428b      	cmp	r3, r1
 800220e:	d101      	bne.n	8002214 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002210:	4b18      	ldr	r3, [pc, #96]	@ (8002274 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002212:	e001      	b.n	8002218 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002214:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002218:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800221c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	f043 0202 	orr.w	r2, r3, #2
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff fc70 	bl	8001b18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b08      	cmp	r3, #8
 8002240:	d136      	bne.n	80022b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d031      	beq.n	80022b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a07      	ldr	r2, [pc, #28]	@ (8002270 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d101      	bne.n	800225a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002256:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002258:	e001      	b.n	800225e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800225a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4902      	ldr	r1, [pc, #8]	@ (8002270 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002266:	428b      	cmp	r3, r1
 8002268:	d106      	bne.n	8002278 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800226a:	4b02      	ldr	r3, [pc, #8]	@ (8002274 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800226c:	e006      	b.n	800227c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800226e:	bf00      	nop
 8002270:	40003800 	.word	0x40003800
 8002274:	40003400 	.word	0x40003400
 8002278:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800227c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002280:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002290:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	f043 0204 	orr.w	r2, r3, #4
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff fc36 	bl	8001b18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022ac:	e000      	b.n	80022b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80022ae:	bf00      	nop
}
 80022b0:	bf00      	nop
 80022b2:	3720      	adds	r7, #32
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f7fe fa60 	bl	800078c <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80022cc:	bf00      	nop
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e0:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d155      	bne.n	8002396 <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022f8:	d006      	beq.n	8002308 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002304:	2b00      	cmp	r3, #0
 8002306:	d11e      	bne.n	8002346 <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a25      	ldr	r2, [pc, #148]	@ (80023a4 <I2SEx_TxRxDMACplt+0xd0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <I2SEx_TxRxDMACplt+0x42>
 8002312:	4b25      	ldr	r3, [pc, #148]	@ (80023a8 <I2SEx_TxRxDMACplt+0xd4>)
 8002314:	e001      	b.n	800231a <I2SEx_TxRxDMACplt+0x46>
 8002316:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4920      	ldr	r1, [pc, #128]	@ (80023a4 <I2SEx_TxRxDMACplt+0xd0>)
 8002322:	428b      	cmp	r3, r1
 8002324:	d101      	bne.n	800232a <I2SEx_TxRxDMACplt+0x56>
 8002326:	4b20      	ldr	r3, [pc, #128]	@ (80023a8 <I2SEx_TxRxDMACplt+0xd4>)
 8002328:	e001      	b.n	800232e <I2SEx_TxRxDMACplt+0x5a>
 800232a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0202 	bic.w	r2, r2, #2
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	e01d      	b.n	8002382 <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a12      	ldr	r2, [pc, #72]	@ (80023a4 <I2SEx_TxRxDMACplt+0xd0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d101      	bne.n	8002364 <I2SEx_TxRxDMACplt+0x90>
 8002360:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <I2SEx_TxRxDMACplt+0xd4>)
 8002362:	e001      	b.n	8002368 <I2SEx_TxRxDMACplt+0x94>
 8002364:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	490d      	ldr	r1, [pc, #52]	@ (80023a4 <I2SEx_TxRxDMACplt+0xd0>)
 8002370:	428b      	cmp	r3, r1
 8002372:	d101      	bne.n	8002378 <I2SEx_TxRxDMACplt+0xa4>
 8002374:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <I2SEx_TxRxDMACplt+0xd4>)
 8002376:	e001      	b.n	800237c <I2SEx_TxRxDMACplt+0xa8>
 8002378:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800237c:	f022 0202 	bic.w	r2, r2, #2
 8002380:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->TxXferCount = 0U;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f7fe f9da 	bl	8000750 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40003800 	.word	0x40003800
 80023a8:	40003400 	.word	0x40003400

080023ac <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0203 	bic.w	r2, r2, #3
 80023c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a15      	ldr	r2, [pc, #84]	@ (8002424 <I2SEx_TxRxDMAError+0x78>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d101      	bne.n	80023d8 <I2SEx_TxRxDMAError+0x2c>
 80023d4:	4b14      	ldr	r3, [pc, #80]	@ (8002428 <I2SEx_TxRxDMAError+0x7c>)
 80023d6:	e001      	b.n	80023dc <I2SEx_TxRxDMAError+0x30>
 80023d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4910      	ldr	r1, [pc, #64]	@ (8002424 <I2SEx_TxRxDMAError+0x78>)
 80023e4:	428b      	cmp	r3, r1
 80023e6:	d101      	bne.n	80023ec <I2SEx_TxRxDMAError+0x40>
 80023e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002428 <I2SEx_TxRxDMAError+0x7c>)
 80023ea:	e001      	b.n	80023f0 <I2SEx_TxRxDMAError+0x44>
 80023ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023f0:	f022 0203 	bic.w	r2, r2, #3
 80023f4:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240e:	f043 0208 	orr.w	r2, r3, #8
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f7ff fb7e 	bl	8001b18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40003800 	.word	0x40003800
 8002428:	40003400 	.word	0x40003400

0800242c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002438:	1c99      	adds	r1, r3, #2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6251      	str	r1, [r2, #36]	@ 0x24
 800243e:	881a      	ldrh	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800244a:	b29b      	uxth	r3, r3
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d113      	bne.n	8002486 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800246c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d106      	bne.n	8002486 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7fe f965 	bl	8000750 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	1c99      	adds	r1, r3, #2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6251      	str	r1, [r2, #36]	@ 0x24
 80024a2:	8819      	ldrh	r1, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002520 <I2SEx_TxISR_I2SExt+0x90>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <I2SEx_TxISR_I2SExt+0x22>
 80024ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002524 <I2SEx_TxISR_I2SExt+0x94>)
 80024b0:	e001      	b.n	80024b6 <I2SEx_TxISR_I2SExt+0x26>
 80024b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80024b6:	460a      	mov	r2, r1
 80024b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024be:	b29b      	uxth	r3, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d121      	bne.n	8002516 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a12      	ldr	r2, [pc, #72]	@ (8002520 <I2SEx_TxISR_I2SExt+0x90>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d101      	bne.n	80024e0 <I2SEx_TxISR_I2SExt+0x50>
 80024dc:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <I2SEx_TxISR_I2SExt+0x94>)
 80024de:	e001      	b.n	80024e4 <I2SEx_TxISR_I2SExt+0x54>
 80024e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	490d      	ldr	r1, [pc, #52]	@ (8002520 <I2SEx_TxISR_I2SExt+0x90>)
 80024ec:	428b      	cmp	r3, r1
 80024ee:	d101      	bne.n	80024f4 <I2SEx_TxISR_I2SExt+0x64>
 80024f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002524 <I2SEx_TxISR_I2SExt+0x94>)
 80024f2:	e001      	b.n	80024f8 <I2SEx_TxISR_I2SExt+0x68>
 80024f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80024f8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80024fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002502:	b29b      	uxth	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d106      	bne.n	8002516 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7fe f91d 	bl	8000750 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40003800 	.word	0x40003800
 8002524:	40003400 	.word	0x40003400

08002528 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68d8      	ldr	r0, [r3, #12]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253a:	1c99      	adds	r1, r3, #2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002540:	b282      	uxth	r2, r0
 8002542:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002556:	b29b      	uxth	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d113      	bne.n	8002584 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800256a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fe f8e6 	bl	8000750 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a20      	ldr	r2, [pc, #128]	@ (800261c <I2SEx_RxISR_I2SExt+0x90>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d101      	bne.n	80025a2 <I2SEx_RxISR_I2SExt+0x16>
 800259e:	4b20      	ldr	r3, [pc, #128]	@ (8002620 <I2SEx_RxISR_I2SExt+0x94>)
 80025a0:	e001      	b.n	80025a6 <I2SEx_RxISR_I2SExt+0x1a>
 80025a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80025a6:	68d8      	ldr	r0, [r3, #12]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ac:	1c99      	adds	r1, r3, #2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80025b2:	b282      	uxth	r2, r0
 80025b4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a12      	ldr	r2, [pc, #72]	@ (800261c <I2SEx_RxISR_I2SExt+0x90>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d101      	bne.n	80025dc <I2SEx_RxISR_I2SExt+0x50>
 80025d8:	4b11      	ldr	r3, [pc, #68]	@ (8002620 <I2SEx_RxISR_I2SExt+0x94>)
 80025da:	e001      	b.n	80025e0 <I2SEx_RxISR_I2SExt+0x54>
 80025dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	490d      	ldr	r1, [pc, #52]	@ (800261c <I2SEx_RxISR_I2SExt+0x90>)
 80025e8:	428b      	cmp	r3, r1
 80025ea:	d101      	bne.n	80025f0 <I2SEx_RxISR_I2SExt+0x64>
 80025ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002620 <I2SEx_RxISR_I2SExt+0x94>)
 80025ee:	e001      	b.n	80025f4 <I2SEx_RxISR_I2SExt+0x68>
 80025f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80025f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80025f8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d106      	bne.n	8002612 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7fe f89f 	bl	8000750 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40003800 	.word	0x40003800
 8002620:	40003400 	.word	0x40003400

08002624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e267      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d075      	beq.n	800272e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002642:	4b88      	ldr	r3, [pc, #544]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b04      	cmp	r3, #4
 800264c:	d00c      	beq.n	8002668 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264e:	4b85      	ldr	r3, [pc, #532]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002656:	2b08      	cmp	r3, #8
 8002658:	d112      	bne.n	8002680 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800265a:	4b82      	ldr	r3, [pc, #520]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002662:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002666:	d10b      	bne.n	8002680 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	4b7e      	ldr	r3, [pc, #504]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d05b      	beq.n	800272c <HAL_RCC_OscConfig+0x108>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d157      	bne.n	800272c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e242      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002688:	d106      	bne.n	8002698 <HAL_RCC_OscConfig+0x74>
 800268a:	4b76      	ldr	r3, [pc, #472]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a75      	ldr	r2, [pc, #468]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e01d      	b.n	80026d4 <HAL_RCC_OscConfig+0xb0>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026a0:	d10c      	bne.n	80026bc <HAL_RCC_OscConfig+0x98>
 80026a2:	4b70      	ldr	r3, [pc, #448]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80026a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a6c      	ldr	r2, [pc, #432]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80026b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e00b      	b.n	80026d4 <HAL_RCC_OscConfig+0xb0>
 80026bc:	4b69      	ldr	r3, [pc, #420]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a68      	ldr	r2, [pc, #416]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80026c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	4b66      	ldr	r3, [pc, #408]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a65      	ldr	r2, [pc, #404]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80026ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d013      	beq.n	8002704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe fa84 	bl	8000be8 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e4:	f7fe fa80 	bl	8000be8 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	@ 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e207      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0xc0>
 8002702:	e014      	b.n	800272e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7fe fa70 	bl	8000be8 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800270c:	f7fe fa6c 	bl	8000be8 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	@ 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e1f3      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271e:	4b51      	ldr	r3, [pc, #324]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0xe8>
 800272a:	e000      	b.n	800272e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d063      	beq.n	8002802 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800273a:	4b4a      	ldr	r3, [pc, #296]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002746:	4b47      	ldr	r3, [pc, #284]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800274e:	2b08      	cmp	r3, #8
 8002750:	d11c      	bne.n	800278c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002752:	4b44      	ldr	r3, [pc, #272]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d116      	bne.n	800278c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275e:	4b41      	ldr	r3, [pc, #260]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <HAL_RCC_OscConfig+0x152>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d001      	beq.n	8002776 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e1c7      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002776:	4b3b      	ldr	r3, [pc, #236]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4937      	ldr	r1, [pc, #220]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278a:	e03a      	b.n	8002802 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d020      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002794:	4b34      	ldr	r3, [pc, #208]	@ (8002868 <HAL_RCC_OscConfig+0x244>)
 8002796:	2201      	movs	r2, #1
 8002798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7fe fa25 	bl	8000be8 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a2:	f7fe fa21 	bl	8000be8 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e1a8      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c0:	4b28      	ldr	r3, [pc, #160]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4925      	ldr	r1, [pc, #148]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	600b      	str	r3, [r1, #0]
 80027d4:	e015      	b.n	8002802 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027d6:	4b24      	ldr	r3, [pc, #144]	@ (8002868 <HAL_RCC_OscConfig+0x244>)
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe fa04 	bl	8000be8 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e4:	f7fe fa00 	bl	8000be8 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e187      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d036      	beq.n	800287c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d016      	beq.n	8002844 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002816:	4b15      	ldr	r3, [pc, #84]	@ (800286c <HAL_RCC_OscConfig+0x248>)
 8002818:	2201      	movs	r2, #1
 800281a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281c:	f7fe f9e4 	bl	8000be8 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002824:	f7fe f9e0 	bl	8000be8 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e167      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002836:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <HAL_RCC_OscConfig+0x240>)
 8002838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x200>
 8002842:	e01b      	b.n	800287c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002844:	4b09      	ldr	r3, [pc, #36]	@ (800286c <HAL_RCC_OscConfig+0x248>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284a:	f7fe f9cd 	bl	8000be8 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002850:	e00e      	b.n	8002870 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002852:	f7fe f9c9 	bl	8000be8 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d907      	bls.n	8002870 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e150      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
 8002864:	40023800 	.word	0x40023800
 8002868:	42470000 	.word	0x42470000
 800286c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002870:	4b88      	ldr	r3, [pc, #544]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1ea      	bne.n	8002852 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 8097 	beq.w	80029b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800288a:	2300      	movs	r3, #0
 800288c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288e:	4b81      	ldr	r3, [pc, #516]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10f      	bne.n	80028ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	4b7d      	ldr	r3, [pc, #500]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 80028a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b6:	2301      	movs	r3, #1
 80028b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ba:	4b77      	ldr	r3, [pc, #476]	@ (8002a98 <HAL_RCC_OscConfig+0x474>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d118      	bne.n	80028f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c6:	4b74      	ldr	r3, [pc, #464]	@ (8002a98 <HAL_RCC_OscConfig+0x474>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a73      	ldr	r2, [pc, #460]	@ (8002a98 <HAL_RCC_OscConfig+0x474>)
 80028cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d2:	f7fe f989 	bl	8000be8 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028da:	f7fe f985 	bl	8000be8 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e10c      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002a98 <HAL_RCC_OscConfig+0x474>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d106      	bne.n	800290e <HAL_RCC_OscConfig+0x2ea>
 8002900:	4b64      	ldr	r3, [pc, #400]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002904:	4a63      	ldr	r2, [pc, #396]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6713      	str	r3, [r2, #112]	@ 0x70
 800290c:	e01c      	b.n	8002948 <HAL_RCC_OscConfig+0x324>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b05      	cmp	r3, #5
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x30c>
 8002916:	4b5f      	ldr	r3, [pc, #380]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291a:	4a5e      	ldr	r2, [pc, #376]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	6713      	str	r3, [r2, #112]	@ 0x70
 8002922:	4b5c      	ldr	r3, [pc, #368]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002926:	4a5b      	ldr	r2, [pc, #364]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6713      	str	r3, [r2, #112]	@ 0x70
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0x324>
 8002930:	4b58      	ldr	r3, [pc, #352]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002934:	4a57      	ldr	r2, [pc, #348]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	6713      	str	r3, [r2, #112]	@ 0x70
 800293c:	4b55      	ldr	r3, [pc, #340]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002940:	4a54      	ldr	r2, [pc, #336]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002942:	f023 0304 	bic.w	r3, r3, #4
 8002946:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d015      	beq.n	800297c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002950:	f7fe f94a 	bl	8000be8 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002956:	e00a      	b.n	800296e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7fe f946 	bl	8000be8 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e0cb      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296e:	4b49      	ldr	r3, [pc, #292]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0ee      	beq.n	8002958 <HAL_RCC_OscConfig+0x334>
 800297a:	e014      	b.n	80029a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297c:	f7fe f934 	bl	8000be8 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002982:	e00a      	b.n	800299a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002984:	f7fe f930 	bl	8000be8 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e0b5      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1ee      	bne.n	8002984 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d105      	bne.n	80029b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ac:	4b39      	ldr	r3, [pc, #228]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 80029ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b0:	4a38      	ldr	r2, [pc, #224]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 80029b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80a1 	beq.w	8002b04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029c2:	4b34      	ldr	r3, [pc, #208]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d05c      	beq.n	8002a88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d141      	bne.n	8002a5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d6:	4b31      	ldr	r3, [pc, #196]	@ (8002a9c <HAL_RCC_OscConfig+0x478>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7fe f904 	bl	8000be8 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e4:	f7fe f900 	bl	8000be8 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e087      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f6:	4b27      	ldr	r3, [pc, #156]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	019b      	lsls	r3, r3, #6
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a18:	085b      	lsrs	r3, r3, #1
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	041b      	lsls	r3, r3, #16
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a24:	061b      	lsls	r3, r3, #24
 8002a26:	491b      	ldr	r1, [pc, #108]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a9c <HAL_RCC_OscConfig+0x478>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a32:	f7fe f8d9 	bl	8000be8 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3a:	f7fe f8d5 	bl	8000be8 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e05c      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4c:	4b11      	ldr	r3, [pc, #68]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x416>
 8002a58:	e054      	b.n	8002b04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5a:	4b10      	ldr	r3, [pc, #64]	@ (8002a9c <HAL_RCC_OscConfig+0x478>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fe f8c2 	bl	8000be8 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a68:	f7fe f8be 	bl	8000be8 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e045      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7a:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x444>
 8002a86:	e03d      	b.n	8002b04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d107      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e038      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40007000 	.word	0x40007000
 8002a9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b10 <HAL_RCC_OscConfig+0x4ec>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d028      	beq.n	8002b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d121      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d11a      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ad6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d111      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d107      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800

08002b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0cc      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b28:	4b68      	ldr	r3, [pc, #416]	@ (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d90c      	bls.n	8002b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b65      	ldr	r3, [pc, #404]	@ (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3e:	4b63      	ldr	r3, [pc, #396]	@ (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0b8      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d020      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b68:	4b59      	ldr	r3, [pc, #356]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4a58      	ldr	r2, [pc, #352]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b80:	4b53      	ldr	r3, [pc, #332]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4a52      	ldr	r2, [pc, #328]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b8c:	4b50      	ldr	r3, [pc, #320]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	494d      	ldr	r1, [pc, #308]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d044      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d107      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	4b47      	ldr	r3, [pc, #284]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d119      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e07f      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d003      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e06f      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be2:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e067      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bf2:	4b37      	ldr	r3, [pc, #220]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f023 0203 	bic.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	4934      	ldr	r1, [pc, #208]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c04:	f7fd fff0 	bl	8000be8 <HAL_GetTick>
 8002c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0c:	f7fd ffec 	bl	8000be8 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e04f      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 020c 	and.w	r2, r3, #12
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d1eb      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c34:	4b25      	ldr	r3, [pc, #148]	@ (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d20c      	bcs.n	8002c5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b20      	ldr	r3, [pc, #128]	@ (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e032      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c68:	4b19      	ldr	r3, [pc, #100]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4916      	ldr	r1, [pc, #88]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d009      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c86:	4b12      	ldr	r3, [pc, #72]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	490e      	ldr	r1, [pc, #56]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c9a:	f000 f821 	bl	8002ce0 <HAL_RCC_GetSysClockFreq>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	490a      	ldr	r1, [pc, #40]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	5ccb      	ldrb	r3, [r1, r3]
 8002cae:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb2:	4a09      	ldr	r2, [pc, #36]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cb6:	4b09      	ldr	r3, [pc, #36]	@ (8002cdc <HAL_RCC_ClockConfig+0x1c8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fd ff50 	bl	8000b60 <HAL_InitTick>

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023c00 	.word	0x40023c00
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	080031e0 	.word	0x080031e0
 8002cd8:	20000000 	.word	0x20000000
 8002cdc:	20000004 	.word	0x20000004

08002ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce4:	b094      	sub	sp, #80	@ 0x50
 8002ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cec:	2300      	movs	r3, #0
 8002cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cf8:	4b79      	ldr	r3, [pc, #484]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 030c 	and.w	r3, r3, #12
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d00d      	beq.n	8002d20 <HAL_RCC_GetSysClockFreq+0x40>
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	f200 80e1 	bhi.w	8002ecc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x34>
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d003      	beq.n	8002d1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d12:	e0db      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d14:	4b73      	ldr	r3, [pc, #460]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d16:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002d18:	e0db      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d1a:	4b73      	ldr	r3, [pc, #460]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d1e:	e0d8      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d20:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d28:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d2a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d063      	beq.n	8002dfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d36:	4b6a      	ldr	r3, [pc, #424]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	099b      	lsrs	r3, r3, #6
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d52:	4622      	mov	r2, r4
 8002d54:	462b      	mov	r3, r5
 8002d56:	f04f 0000 	mov.w	r0, #0
 8002d5a:	f04f 0100 	mov.w	r1, #0
 8002d5e:	0159      	lsls	r1, r3, #5
 8002d60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d64:	0150      	lsls	r0, r2, #5
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4621      	mov	r1, r4
 8002d6c:	1a51      	subs	r1, r2, r1
 8002d6e:	6139      	str	r1, [r7, #16]
 8002d70:	4629      	mov	r1, r5
 8002d72:	eb63 0301 	sbc.w	r3, r3, r1
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d84:	4659      	mov	r1, fp
 8002d86:	018b      	lsls	r3, r1, #6
 8002d88:	4651      	mov	r1, sl
 8002d8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d8e:	4651      	mov	r1, sl
 8002d90:	018a      	lsls	r2, r1, #6
 8002d92:	4651      	mov	r1, sl
 8002d94:	ebb2 0801 	subs.w	r8, r2, r1
 8002d98:	4659      	mov	r1, fp
 8002d9a:	eb63 0901 	sbc.w	r9, r3, r1
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002db2:	4690      	mov	r8, r2
 8002db4:	4699      	mov	r9, r3
 8002db6:	4623      	mov	r3, r4
 8002db8:	eb18 0303 	adds.w	r3, r8, r3
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	462b      	mov	r3, r5
 8002dc0:	eb49 0303 	adc.w	r3, r9, r3
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	024b      	lsls	r3, r1, #9
 8002dd6:	4621      	mov	r1, r4
 8002dd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ddc:	4621      	mov	r1, r4
 8002dde:	024a      	lsls	r2, r1, #9
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002de6:	2200      	movs	r2, #0
 8002de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002df0:	f7fd f9ea 	bl	80001c8 <__aeabi_uldivmod>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4613      	mov	r3, r2
 8002dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dfc:	e058      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dfe:	4b38      	ldr	r3, [pc, #224]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	099b      	lsrs	r3, r3, #6
 8002e04:	2200      	movs	r2, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	4611      	mov	r1, r2
 8002e0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e0e:	623b      	str	r3, [r7, #32]
 8002e10:	2300      	movs	r3, #0
 8002e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e18:	4642      	mov	r2, r8
 8002e1a:	464b      	mov	r3, r9
 8002e1c:	f04f 0000 	mov.w	r0, #0
 8002e20:	f04f 0100 	mov.w	r1, #0
 8002e24:	0159      	lsls	r1, r3, #5
 8002e26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e2a:	0150      	lsls	r0, r2, #5
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4641      	mov	r1, r8
 8002e32:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e36:	4649      	mov	r1, r9
 8002e38:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e50:	ebb2 040a 	subs.w	r4, r2, sl
 8002e54:	eb63 050b 	sbc.w	r5, r3, fp
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	00eb      	lsls	r3, r5, #3
 8002e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e66:	00e2      	lsls	r2, r4, #3
 8002e68:	4614      	mov	r4, r2
 8002e6a:	461d      	mov	r5, r3
 8002e6c:	4643      	mov	r3, r8
 8002e6e:	18e3      	adds	r3, r4, r3
 8002e70:	603b      	str	r3, [r7, #0]
 8002e72:	464b      	mov	r3, r9
 8002e74:	eb45 0303 	adc.w	r3, r5, r3
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e86:	4629      	mov	r1, r5
 8002e88:	028b      	lsls	r3, r1, #10
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e90:	4621      	mov	r1, r4
 8002e92:	028a      	lsls	r2, r1, #10
 8002e94:	4610      	mov	r0, r2
 8002e96:	4619      	mov	r1, r3
 8002e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	61fa      	str	r2, [r7, #28]
 8002ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ea4:	f7fd f990 	bl	80001c8 <__aeabi_uldivmod>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4613      	mov	r3, r2
 8002eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	0c1b      	lsrs	r3, r3, #16
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	3301      	adds	r3, #1
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002ec0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eca:	e002      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ecc:	4b05      	ldr	r3, [pc, #20]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ece:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3750      	adds	r7, #80	@ 0x50
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	00f42400 	.word	0x00f42400
 8002ee8:	007a1200 	.word	0x007a1200

08002eec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d105      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d035      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f14:	4b62      	ldr	r3, [pc, #392]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f1a:	f7fd fe65 	bl	8000be8 <HAL_GetTick>
 8002f1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f22:	f7fd fe61 	bl	8000be8 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e0b0      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f34:	4b5b      	ldr	r3, [pc, #364]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f0      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	019a      	lsls	r2, r3, #6
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	071b      	lsls	r3, r3, #28
 8002f4c:	4955      	ldr	r1, [pc, #340]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f54:	4b52      	ldr	r3, [pc, #328]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f5a:	f7fd fe45 	bl	8000be8 <HAL_GetTick>
 8002f5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f60:	e008      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f62:	f7fd fe41 	bl	8000be8 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e090      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f74:	4b4b      	ldr	r3, [pc, #300]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 8083 	beq.w	8003094 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	4b44      	ldr	r3, [pc, #272]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	4a43      	ldr	r2, [pc, #268]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f9e:	4b41      	ldr	r3, [pc, #260]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002faa:	4b3f      	ldr	r3, [pc, #252]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a3e      	ldr	r2, [pc, #248]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fb6:	f7fd fe17 	bl	8000be8 <HAL_GetTick>
 8002fba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002fbe:	f7fd fe13 	bl	8000be8 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e062      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fd0:	4b35      	ldr	r3, [pc, #212]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fdc:	4b31      	ldr	r3, [pc, #196]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fe4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d02f      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d028      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003002:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003004:	4b29      	ldr	r3, [pc, #164]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800300a:	4b28      	ldr	r3, [pc, #160]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003010:	4a24      	ldr	r2, [pc, #144]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003016:	4b23      	ldr	r3, [pc, #140]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b01      	cmp	r3, #1
 8003020:	d114      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003022:	f7fd fde1 	bl	8000be8 <HAL_GetTick>
 8003026:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003028:	e00a      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fd fddd 	bl	8000be8 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e02a      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003040:	4b18      	ldr	r3, [pc, #96]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0ee      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003054:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003058:	d10d      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800305a:	4b12      	ldr	r3, [pc, #72]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800306a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800306e:	490d      	ldr	r1, [pc, #52]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003070:	4313      	orrs	r3, r2
 8003072:	608b      	str	r3, [r1, #8]
 8003074:	e005      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003076:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	4a0a      	ldr	r2, [pc, #40]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800307c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003080:	6093      	str	r3, [r2, #8]
 8003082:	4b08      	ldr	r3, [pc, #32]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003084:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308e:	4905      	ldr	r1, [pc, #20]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003090:	4313      	orrs	r3, r2
 8003092:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	42470068 	.word	0x42470068
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40007000 	.word	0x40007000
 80030ac:	42470e40 	.word	0x42470e40

080030b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d13f      	bne.n	800314e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80030ce:	4b24      	ldr	r3, [pc, #144]	@ (8003160 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d006      	beq.n	80030ec <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030e4:	d12f      	bne.n	8003146 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80030e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003164 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80030e8:	617b      	str	r3, [r7, #20]
          break;
 80030ea:	e02f      	b.n	800314c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80030ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003160 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030f8:	d108      	bne.n	800310c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80030fa:	4b19      	ldr	r3, [pc, #100]	@ (8003160 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003102:	4a19      	ldr	r2, [pc, #100]	@ (8003168 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	e007      	b.n	800311c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800310c:	4b14      	ldr	r3, [pc, #80]	@ (8003160 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003114:	4a15      	ldr	r2, [pc, #84]	@ (800316c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003116:	fbb2 f3f3 	udiv	r3, r2, r3
 800311a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800311c:	4b10      	ldr	r3, [pc, #64]	@ (8003160 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800311e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003122:	099b      	lsrs	r3, r3, #6
 8003124:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	fb02 f303 	mul.w	r3, r2, r3
 800312e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003130:	4b0b      	ldr	r3, [pc, #44]	@ (8003160 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003136:	0f1b      	lsrs	r3, r3, #28
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003142:	617b      	str	r3, [r7, #20]
          break;
 8003144:	e002      	b.n	800314c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
          break;
 800314a:	bf00      	nop
        }
      }
      break;
 800314c:	e000      	b.n	8003150 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 800314e:	bf00      	nop
    }
  }
  return frequency;
 8003150:	697b      	ldr	r3, [r7, #20]
}
 8003152:	4618      	mov	r0, r3
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800
 8003164:	00bb8000 	.word	0x00bb8000
 8003168:	007a1200 	.word	0x007a1200
 800316c:	00f42400 	.word	0x00f42400

08003170 <memset>:
 8003170:	4402      	add	r2, r0
 8003172:	4603      	mov	r3, r0
 8003174:	4293      	cmp	r3, r2
 8003176:	d100      	bne.n	800317a <memset+0xa>
 8003178:	4770      	bx	lr
 800317a:	f803 1b01 	strb.w	r1, [r3], #1
 800317e:	e7f9      	b.n	8003174 <memset+0x4>

08003180 <__libc_init_array>:
 8003180:	b570      	push	{r4, r5, r6, lr}
 8003182:	4d0d      	ldr	r5, [pc, #52]	@ (80031b8 <__libc_init_array+0x38>)
 8003184:	4c0d      	ldr	r4, [pc, #52]	@ (80031bc <__libc_init_array+0x3c>)
 8003186:	1b64      	subs	r4, r4, r5
 8003188:	10a4      	asrs	r4, r4, #2
 800318a:	2600      	movs	r6, #0
 800318c:	42a6      	cmp	r6, r4
 800318e:	d109      	bne.n	80031a4 <__libc_init_array+0x24>
 8003190:	4d0b      	ldr	r5, [pc, #44]	@ (80031c0 <__libc_init_array+0x40>)
 8003192:	4c0c      	ldr	r4, [pc, #48]	@ (80031c4 <__libc_init_array+0x44>)
 8003194:	f000 f818 	bl	80031c8 <_init>
 8003198:	1b64      	subs	r4, r4, r5
 800319a:	10a4      	asrs	r4, r4, #2
 800319c:	2600      	movs	r6, #0
 800319e:	42a6      	cmp	r6, r4
 80031a0:	d105      	bne.n	80031ae <__libc_init_array+0x2e>
 80031a2:	bd70      	pop	{r4, r5, r6, pc}
 80031a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031a8:	4798      	blx	r3
 80031aa:	3601      	adds	r6, #1
 80031ac:	e7ee      	b.n	800318c <__libc_init_array+0xc>
 80031ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b2:	4798      	blx	r3
 80031b4:	3601      	adds	r6, #1
 80031b6:	e7f2      	b.n	800319e <__libc_init_array+0x1e>
 80031b8:	08003200 	.word	0x08003200
 80031bc:	08003200 	.word	0x08003200
 80031c0:	08003200 	.word	0x08003200
 80031c4:	08003204 	.word	0x08003204

080031c8 <_init>:
 80031c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ca:	bf00      	nop
 80031cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ce:	bc08      	pop	{r3}
 80031d0:	469e      	mov	lr, r3
 80031d2:	4770      	bx	lr

080031d4 <_fini>:
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d6:	bf00      	nop
 80031d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031da:	bc08      	pop	{r3}
 80031dc:	469e      	mov	lr, r3
 80031de:	4770      	bx	lr
