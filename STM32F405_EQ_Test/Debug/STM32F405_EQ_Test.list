
STM32F405_EQ_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005040  08005040  00006040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005230  08005230  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005230  08005230  00006230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005238  08005238  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005238  08005238  00006238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800523c  0800523c  0000623c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005240  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          0000055c  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000568  20000568  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007480  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b55  00000000  00000000  0000e4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e0  00000000  00000000  00010018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000515  00000000  00000000  000106f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e93d  00000000  00000000  00010c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009c8b  00000000  00000000  0002f54a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b7af2  00000000  00000000  000391d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f0cc7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d88  00000000  00000000  000f0d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000f2a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005028 	.word	0x08005028

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005028 	.word	0x08005028

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b96a 	b.w	8000e50 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14e      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	458c      	cmp	ip, r1
 8000ba4:	4686      	mov	lr, r0
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	d962      	bls.n	8000c72 <__udivmoddi4+0xde>
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f f68c 	uxth.w	r6, ip
 8000bca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bda:	fb04 f106 	mul.w	r1, r4, r6
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bea:	f080 8112 	bcs.w	8000e12 <__udivmoddi4+0x27e>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 810f 	bls.w	8000e12 <__udivmoddi4+0x27e>
 8000bf4:	3c02      	subs	r4, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a59      	subs	r1, r3, r1
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c02:	fb07 1110 	mls	r1, r7, r0, r1
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb00 f606 	mul.w	r6, r0, r6
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x94>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1a:	f080 80fc 	bcs.w	8000e16 <__udivmoddi4+0x282>
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	f240 80f9 	bls.w	8000e16 <__udivmoddi4+0x282>
 8000c24:	4463      	add	r3, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	1b9b      	subs	r3, r3, r6
 8000c2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c2e:	2100      	movs	r1, #0
 8000c30:	b11d      	cbz	r5, 8000c3a <__udivmoddi4+0xa6>
 8000c32:	40d3      	lsrs	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d905      	bls.n	8000c4e <__udivmoddi4+0xba>
 8000c42:	b10d      	cbz	r5, 8000c48 <__udivmoddi4+0xb4>
 8000c44:	e9c5 0100 	strd	r0, r1, [r5]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e7f5      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c4e:	fab3 f183 	clz	r1, r3
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d146      	bne.n	8000ce4 <__udivmoddi4+0x150>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xcc>
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	f0c0 80f0 	bcc.w	8000e40 <__udivmoddi4+0x2ac>
 8000c60:	1a86      	subs	r6, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d0e6      	beq.n	8000c3a <__udivmoddi4+0xa6>
 8000c6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c70:	e7e3      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	f040 8090 	bne.w	8000d98 <__udivmoddi4+0x204>
 8000c78:	eba1 040c 	sub.w	r4, r1, ip
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	fa1f f78c 	uxth.w	r7, ip
 8000c84:	2101      	movs	r1, #1
 8000c86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c96:	fb07 f006 	mul.w	r0, r7, r6
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x11c>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x11a>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f200 80cd 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000cae:	4626      	mov	r6, r4
 8000cb0:	1a1c      	subs	r4, r3, r0
 8000cb2:	fa1f f38e 	uxth.w	r3, lr
 8000cb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cba:	fb08 4410 	mls	r4, r8, r0, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb00 f707 	mul.w	r7, r0, r7
 8000cc6:	429f      	cmp	r7, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x148>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x146>
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	f200 80b0 	bhi.w	8000e3a <__udivmoddi4+0x2a6>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	1bdb      	subs	r3, r3, r7
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	e7a5      	b.n	8000c30 <__udivmoddi4+0x9c>
 8000ce4:	f1c1 0620 	rsb	r6, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 f706 	lsr.w	r7, r2, r6
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf8:	ea43 030c 	orr.w	r3, r3, ip
 8000cfc:	40f4      	lsrs	r4, r6
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	0c38      	lsrs	r0, r7, #16
 8000d04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d08:	fbb4 fef0 	udiv	lr, r4, r0
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fb00 441e 	mls	r4, r0, lr, r4
 8000d14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d18:	fb0e f90c 	mul.w	r9, lr, ip
 8000d1c:	45a1      	cmp	r9, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x1a6>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d2a:	f080 8084 	bcs.w	8000e36 <__udivmoddi4+0x2a2>
 8000d2e:	45a1      	cmp	r9, r4
 8000d30:	f240 8081 	bls.w	8000e36 <__udivmoddi4+0x2a2>
 8000d34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	eba4 0409 	sub.w	r4, r4, r9
 8000d3e:	fa1f f983 	uxth.w	r9, r3
 8000d42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d46:	fb00 4413 	mls	r4, r0, r3, r4
 8000d4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x1d2>
 8000d56:	193c      	adds	r4, r7, r4
 8000d58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d5c:	d267      	bcs.n	8000e2e <__udivmoddi4+0x29a>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	d965      	bls.n	8000e2e <__udivmoddi4+0x29a>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	429c      	cmp	r4, r3
 8000d74:	46ce      	mov	lr, r9
 8000d76:	469c      	mov	ip, r3
 8000d78:	d351      	bcc.n	8000e1e <__udivmoddi4+0x28a>
 8000d7a:	d04e      	beq.n	8000e1a <__udivmoddi4+0x286>
 8000d7c:	b155      	cbz	r5, 8000d94 <__udivmoddi4+0x200>
 8000d7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d82:	eb64 040c 	sbc.w	r4, r4, ip
 8000d86:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8a:	40cb      	lsrs	r3, r1
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	40cc      	lsrs	r4, r1
 8000d90:	e9c5 6400 	strd	r6, r4, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	e750      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa24 f303 	lsr.w	r3, r4, r3
 8000da8:	4094      	lsls	r4, r2
 8000daa:	430c      	orrs	r4, r1
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc6:	fb00 f107 	mul.w	r1, r0, r7
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x24c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dd6:	d22c      	bcs.n	8000e32 <__udivmoddi4+0x29e>
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d92a      	bls.n	8000e32 <__udivmoddi4+0x29e>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df0:	fb01 f307 	mul.w	r3, r1, r7
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x276>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e00:	d213      	bcs.n	8000e2a <__udivmoddi4+0x296>
 8000e02:	42a3      	cmp	r3, r4
 8000e04:	d911      	bls.n	8000e2a <__udivmoddi4+0x296>
 8000e06:	3902      	subs	r1, #2
 8000e08:	4464      	add	r4, ip
 8000e0a:	1ae4      	subs	r4, r4, r3
 8000e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e10:	e739      	b.n	8000c86 <__udivmoddi4+0xf2>
 8000e12:	4604      	mov	r4, r0
 8000e14:	e6f0      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e16:	4608      	mov	r0, r1
 8000e18:	e706      	b.n	8000c28 <__udivmoddi4+0x94>
 8000e1a:	45c8      	cmp	r8, r9
 8000e1c:	d2ae      	bcs.n	8000d7c <__udivmoddi4+0x1e8>
 8000e1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7a8      	b.n	8000d7c <__udivmoddi4+0x1e8>
 8000e2a:	4631      	mov	r1, r6
 8000e2c:	e7ed      	b.n	8000e0a <__udivmoddi4+0x276>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	e799      	b.n	8000d66 <__udivmoddi4+0x1d2>
 8000e32:	4630      	mov	r0, r6
 8000e34:	e7d4      	b.n	8000de0 <__udivmoddi4+0x24c>
 8000e36:	46d6      	mov	lr, sl
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1a6>
 8000e3a:	4463      	add	r3, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e74d      	b.n	8000cdc <__udivmoddi4+0x148>
 8000e40:	4606      	mov	r6, r0
 8000e42:	4623      	mov	r3, r4
 8000e44:	4608      	mov	r0, r1
 8000e46:	e70f      	b.n	8000c68 <__udivmoddi4+0xd4>
 8000e48:	3e02      	subs	r6, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	e730      	b.n	8000cb0 <__udivmoddi4+0x11c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e58:	f000 fcfe 	bl	8001858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5c:	f000 f82c 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e60:	f000 f8ec 	bl	800103c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e64:	f000 f8c2 	bl	8000fec <MX_DMA_Init>
  MX_I2S2_Init();
 8000e68:	f000 f890 	bl	8000f8c <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  peaking_filter_init(&filt, 96000.0f);
 8000e6c:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8000e98 <main+0x44>
 8000e70:	480a      	ldr	r0, [pc, #40]	@ (8000e9c <main+0x48>)
 8000e72:	f000 f9e7 	bl	8001244 <peaking_filter_init>
  peaking_filter_set_params(&filt, 500.0f, 100.0f, 0.1f);
 8000e76:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 8000ea0 <main+0x4c>
 8000e7a:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8000ea4 <main+0x50>
 8000e7e:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8000ea8 <main+0x54>
 8000e82:	4806      	ldr	r0, [pc, #24]	@ (8000e9c <main+0x48>)
 8000e84:	f000 fa18 	bl	80012b8 <peaking_filter_set_params>
  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, 4);
 8000e88:	2304      	movs	r3, #4
 8000e8a:	4a08      	ldr	r2, [pc, #32]	@ (8000eac <main+0x58>)
 8000e8c:	4908      	ldr	r1, [pc, #32]	@ (8000eb0 <main+0x5c>)
 8000e8e:	4809      	ldr	r0, [pc, #36]	@ (8000eb4 <main+0x60>)
 8000e90:	f001 fdd2 	bl	8002a38 <HAL_I2SEx_TransmitReceive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <main+0x40>
 8000e98:	47bb8000 	.word	0x47bb8000
 8000e9c:	20000530 	.word	0x20000530
 8000ea0:	3dcccccd 	.word	0x3dcccccd
 8000ea4:	42c80000 	.word	0x42c80000
 8000ea8:	43fa0000 	.word	0x43fa0000
 8000eac:	20000130 	.word	0x20000130
 8000eb0:	20000330 	.word	0x20000330
 8000eb4:	20000028 	.word	0x20000028

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b094      	sub	sp, #80	@ 0x50
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	2230      	movs	r2, #48	@ 0x30
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 fff0 	bl	8003eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	4b28      	ldr	r3, [pc, #160]	@ (8000f84 <SystemClock_Config+0xcc>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee4:	4a27      	ldr	r2, [pc, #156]	@ (8000f84 <SystemClock_Config+0xcc>)
 8000ee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eec:	4b25      	ldr	r3, [pc, #148]	@ (8000f84 <SystemClock_Config+0xcc>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef8:	2300      	movs	r3, #0
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	4b22      	ldr	r3, [pc, #136]	@ (8000f88 <SystemClock_Config+0xd0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a21      	ldr	r2, [pc, #132]	@ (8000f88 <SystemClock_Config+0xd0>)
 8000f02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <SystemClock_Config+0xd0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f14:	2301      	movs	r3, #1
 8000f16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f2c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f36:	2304      	movs	r3, #4
 8000f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3a:	f107 0320 	add.w	r3, r7, #32
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 fa0e 	bl	8003360 <HAL_RCC_OscConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f4a:	f000 f975 	bl	8001238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4e:	230f      	movs	r3, #15
 8000f50:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f52:	2302      	movs	r3, #2
 8000f54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f5a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	2105      	movs	r1, #5
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 fc6f 	bl	8003850 <HAL_RCC_ClockConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f78:	f000 f95e 	bl	8001238 <Error_Handler>
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	3750      	adds	r7, #80	@ 0x50
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40007000 	.word	0x40007000

08000f8c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000f90:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <MX_I2S2_Init+0x54>)
 8000f92:	4a14      	ldr	r2, [pc, #80]	@ (8000fe4 <MX_I2S2_Init+0x58>)
 8000f94:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000f96:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <MX_I2S2_Init+0x54>)
 8000f98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f9c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <MX_I2S2_Init+0x54>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <MX_I2S2_Init+0x54>)
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000faa:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe0 <MX_I2S2_Init+0x54>)
 8000fac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fb0:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <MX_I2S2_Init+0x54>)
 8000fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe8 <MX_I2S2_Init+0x5c>)
 8000fb6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <MX_I2S2_Init+0x54>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <MX_I2S2_Init+0x54>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <MX_I2S2_Init+0x54>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <MX_I2S2_Init+0x54>)
 8000fcc:	f001 faee 	bl	80025ac <HAL_I2S_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000fd6:	f000 f92f 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000028 	.word	0x20000028
 8000fe4:	40003800 	.word	0x40003800
 8000fe8:	00017700 	.word	0x00017700

08000fec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <MX_DMA_Init+0x4c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	@ (8001038 <MX_DMA_Init+0x4c>)
 8000ffc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <MX_DMA_Init+0x4c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	200e      	movs	r0, #14
 8001014:	f000 fd6d 	bl	8001af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001018:	200e      	movs	r0, #14
 800101a:	f000 fd86 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	200f      	movs	r0, #15
 8001024:	f000 fd65 	bl	8001af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001028:	200f      	movs	r0, #15
 800102a:	f000 fd7e 	bl	8001b2a <HAL_NVIC_EnableIRQ>

}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800

0800103c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	@ 0x28
 8001040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	4b26      	ldr	r3, [pc, #152]	@ (80010f0 <MX_GPIO_Init+0xb4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a25      	ldr	r2, [pc, #148]	@ (80010f0 <MX_GPIO_Init+0xb4>)
 800105c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b23      	ldr	r3, [pc, #140]	@ (80010f0 <MX_GPIO_Init+0xb4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <MX_GPIO_Init+0xb4>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	4a1e      	ldr	r2, [pc, #120]	@ (80010f0 <MX_GPIO_Init+0xb4>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	6313      	str	r3, [r2, #48]	@ 0x30
 800107e:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <MX_GPIO_Init+0xb4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <MX_GPIO_Init+0xb4>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a17      	ldr	r2, [pc, #92]	@ (80010f0 <MX_GPIO_Init+0xb4>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <MX_GPIO_Init+0xb4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <MX_GPIO_Init+0xb4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	4a10      	ldr	r2, [pc, #64]	@ (80010f0 <MX_GPIO_Init+0xb4>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <MX_GPIO_Init+0xb4>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2104      	movs	r1, #4
 80010c6:	480b      	ldr	r0, [pc, #44]	@ (80010f4 <MX_GPIO_Init+0xb8>)
 80010c8:	f001 fa56 	bl	8002578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010cc:	2304      	movs	r3, #4
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_GPIO_Init+0xb8>)
 80010e4:	f001 f8ac 	bl	8002240 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	@ 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020400 	.word	0x40020400

080010f8 <HAL_I2SEx_TxRxHalfCpltCallback>:
  rout_z1 = outSampleF;

  return (int) outSampleF;
}

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    // Restore signed 24-bit sample from 16-bit buffers
    int rSample = (int) (rxBuf[0]<<16) | rxBuf[1];
 8001100:	4b22      	ldr	r3, [pc, #136]	@ (800118c <HAL_I2SEx_TxRxHalfCpltCallback+0x94>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	041b      	lsls	r3, r3, #16
 8001106:	4a21      	ldr	r2, [pc, #132]	@ (800118c <HAL_I2SEx_TxRxHalfCpltCallback+0x94>)
 8001108:	8852      	ldrh	r2, [r2, #2]
 800110a:	4313      	orrs	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
    int lSample = (int) (rxBuf[2]<<16) | rxBuf[3];
 800110e:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <HAL_I2SEx_TxRxHalfCpltCallback+0x94>)
 8001110:	889b      	ldrh	r3, [r3, #4]
 8001112:	041b      	lsls	r3, r3, #16
 8001114:	4a1d      	ldr	r2, [pc, #116]	@ (800118c <HAL_I2SEx_TxRxHalfCpltCallback+0x94>)
 8001116:	88d2      	ldrh	r2, [r2, #6]
 8001118:	4313      	orrs	r3, r2
 800111a:	60bb      	str	r3, [r7, #8]

    // test peaking filter
    lSample = peaking_filter_update(&filt, lSample);
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001126:	eeb0 0a67 	vmov.f32	s0, s15
 800112a:	4819      	ldr	r0, [pc, #100]	@ (8001190 <HAL_I2SEx_TxRxHalfCpltCallback+0x98>)
 800112c:	f000 f994 	bl	8001458 <peaking_filter_update>
 8001130:	eef0 7a40 	vmov.f32	s15, s0
 8001134:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001138:	ee17 3a90 	vmov	r3, s15
 800113c:	60bb      	str	r3, [r7, #8]
    rSample = peaking_filter_update(&filt, rSample);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001148:	eeb0 0a67 	vmov.f32	s0, s15
 800114c:	4810      	ldr	r0, [pc, #64]	@ (8001190 <HAL_I2SEx_TxRxHalfCpltCallback+0x98>)
 800114e:	f000 f983 	bl	8001458 <peaking_filter_update>
 8001152:	eef0 7a40 	vmov.f32	s15, s0
 8001156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800115a:	ee17 3a90 	vmov	r3, s15
 800115e:	60fb      	str	r3, [r7, #12]
    //     txBuf[i * 2] = (int)(filteredOutputs[i] >> 16) & 0xFFFF;
    //     txBuf[i * 2 + 1] = (int)filteredOutputs[i] & 0xFFFF;
    // }

    //restore to buffer
    txBuf[0] = (lSample>>16)&0xFFFF;
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	0c1b      	lsrs	r3, r3, #16
 8001164:	b29a      	uxth	r2, r3
 8001166:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <HAL_I2SEx_TxRxHalfCpltCallback+0x9c>)
 8001168:	801a      	strh	r2, [r3, #0]
    txBuf[1] = lSample&0xFFFF;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <HAL_I2SEx_TxRxHalfCpltCallback+0x9c>)
 8001170:	805a      	strh	r2, [r3, #2]
    txBuf[2] = (rSample>>16)&0xFFFF;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	0c1b      	lsrs	r3, r3, #16
 8001176:	b29a      	uxth	r2, r3
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_I2SEx_TxRxHalfCpltCallback+0x9c>)
 800117a:	809a      	strh	r2, [r3, #4]
    txBuf[3] = rSample&0xFFFF;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	b29a      	uxth	r2, r3
 8001180:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <HAL_I2SEx_TxRxHalfCpltCallback+0x9c>)
 8001182:	80da      	strh	r2, [r3, #6]
}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000130 	.word	0x20000130
 8001190:	20000530 	.word	0x20000530
 8001194:	20000330 	.word	0x20000330

08001198 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    // Restore signed 24-bit sample from 16-bit buffers
    int rSample = (int) (rxBuf[4]<<16) | rxBuf[5];
 80011a0:	4b22      	ldr	r3, [pc, #136]	@ (800122c <HAL_I2SEx_TxRxCpltCallback+0x94>)
 80011a2:	891b      	ldrh	r3, [r3, #8]
 80011a4:	041b      	lsls	r3, r3, #16
 80011a6:	4a21      	ldr	r2, [pc, #132]	@ (800122c <HAL_I2SEx_TxRxCpltCallback+0x94>)
 80011a8:	8952      	ldrh	r2, [r2, #10]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
    int lSample = (int) (rxBuf[6]<<16) | rxBuf[7];
 80011ae:	4b1f      	ldr	r3, [pc, #124]	@ (800122c <HAL_I2SEx_TxRxCpltCallback+0x94>)
 80011b0:	899b      	ldrh	r3, [r3, #12]
 80011b2:	041b      	lsls	r3, r3, #16
 80011b4:	4a1d      	ldr	r2, [pc, #116]	@ (800122c <HAL_I2SEx_TxRxCpltCallback+0x94>)
 80011b6:	89d2      	ldrh	r2, [r2, #14]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]

    // test peaking filter
    lSample = peaking_filter_update(&filt, lSample);
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ca:	4819      	ldr	r0, [pc, #100]	@ (8001230 <HAL_I2SEx_TxRxCpltCallback+0x98>)
 80011cc:	f000 f944 	bl	8001458 <peaking_filter_update>
 80011d0:	eef0 7a40 	vmov.f32	s15, s0
 80011d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d8:	ee17 3a90 	vmov	r3, s15
 80011dc:	60bb      	str	r3, [r7, #8]
    rSample = peaking_filter_update(&filt, rSample);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	eeb0 0a67 	vmov.f32	s0, s15
 80011ec:	4810      	ldr	r0, [pc, #64]	@ (8001230 <HAL_I2SEx_TxRxCpltCallback+0x98>)
 80011ee:	f000 f933 	bl	8001458 <peaking_filter_update>
 80011f2:	eef0 7a40 	vmov.f32	s15, s0
 80011f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011fa:	ee17 3a90 	vmov	r3, s15
 80011fe:	60fb      	str	r3, [r7, #12]
    //     txBuf[i * 2 + 4] = (int)(filteredOutputs[i] >> 16) & 0xFFFF;
    //     txBuf[i * 2 + 5] = (int)filteredOutputs[i] & 0xFFFF;
    // }

    //restore to buffer
    txBuf[4] = (lSample>>16)&0xFFFF;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	0c1b      	lsrs	r3, r3, #16
 8001204:	b29a      	uxth	r2, r3
 8001206:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <HAL_I2SEx_TxRxCpltCallback+0x9c>)
 8001208:	811a      	strh	r2, [r3, #8]
    txBuf[5] = lSample&0xFFFF;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	b29a      	uxth	r2, r3
 800120e:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <HAL_I2SEx_TxRxCpltCallback+0x9c>)
 8001210:	815a      	strh	r2, [r3, #10]
    txBuf[6] = (rSample>>16)&0xFFFF;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	0c1b      	lsrs	r3, r3, #16
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_I2SEx_TxRxCpltCallback+0x9c>)
 800121a:	819a      	strh	r2, [r3, #12]
    txBuf[7] = rSample&0xFFFF;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	b29a      	uxth	r2, r3
 8001220:	4b04      	ldr	r3, [pc, #16]	@ (8001234 <HAL_I2SEx_TxRxCpltCallback+0x9c>)
 8001222:	81da      	strh	r2, [r3, #14]
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000130 	.word	0x20000130
 8001230:	20000530 	.word	0x20000530
 8001234:	20000330 	.word	0x20000330

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <Error_Handler+0x8>

08001244 <peaking_filter_init>:

#define _USE_MATH_DEFINES
#include "peaking_filter.h"
//#include <stdio.h>

void peaking_filter_init(peaking_filter *filt, float sample_rate) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	ed87 0a00 	vstr	s0, [r7]
    // Compute the sample time
    filt -> sample_time = 1.0f / sample_rate;
 8001250:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001254:	ed97 7a00 	vldr	s14, [r7]
 8001258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	edc3 7a00 	vstr	s15, [r3]

    // Clear filter memory
    for (uint8_t n = 0; n < 3; n++) {
 8001262:	2300      	movs	r3, #0
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	e012      	b.n	800128e <peaking_filter_init+0x4a>
        filt -> x[n] = 0.0f;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	3304      	adds	r3, #4
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
        filt -> y[n] = 0.0f;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	3304      	adds	r3, #4
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
    for (uint8_t n = 0; n < 3; n++) {
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	3301      	adds	r3, #1
 800128c:	73fb      	strb	r3, [r7, #15]
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d9e9      	bls.n	8001268 <peaking_filter_init+0x24>
    }

    // Calculate default filter coefficients (All-pass filter)
    peaking_filter_set_params(filt, 1.0f, 0.0f, 1.0f);
 8001294:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001298:	eddf 0a05 	vldr	s1, [pc, #20]	@ 80012b0 <peaking_filter_init+0x6c>
 800129c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 f809 	bl	80012b8 <peaking_filter_set_params>
}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
	...

080012b8 <peaking_filter_set_params>:

void peaking_filter_set_params(peaking_filter *filt, float center_freq, float bandwidth, float boostcut) {
 80012b8:	b5b0      	push	{r4, r5, r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80012c4:	edc7 0a01 	vstr	s1, [r7, #4]
 80012c8:	ed87 1a00 	vstr	s2, [r7]
    // Convert Hz to rad/s (Pre-warping cutoff frequency for bilinear transform)
    float wcT = 2.0f * tan(M_PI * center_freq * filt -> sample_time);
 80012cc:	68b8      	ldr	r0, [r7, #8]
 80012ce:	f7ff f8df 	bl	8000490 <__aeabi_f2d>
 80012d2:	a35f      	add	r3, pc, #380	@ (adr r3, 8001450 <peaking_filter_set_params+0x198>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7ff f932 	bl	8000540 <__aeabi_dmul>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4614      	mov	r4, r2
 80012e2:	461d      	mov	r5, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f8d1 	bl	8000490 <__aeabi_f2d>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4620      	mov	r0, r4
 80012f4:	4629      	mov	r1, r5
 80012f6:	f7ff f923 	bl	8000540 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	ec43 2b17 	vmov	d7, r2, r3
 8001302:	eeb0 0a47 	vmov.f32	s0, s14
 8001306:	eef0 0a67 	vmov.f32	s1, s15
 800130a:	f002 fdfd 	bl	8003f08 <tan>
 800130e:	ec51 0b10 	vmov	r0, r1, d0
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	f7fe ff5d 	bl	80001d4 <__adddf3>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff fbcf 	bl	8000ac4 <__aeabi_d2f>
 8001326:	4603      	mov	r3, r0
 8001328:	617b      	str	r3, [r7, #20]
    
    // Compute Quality factor (Q = fc / BW)
    float Q = center_freq / bandwidth;
 800132a:	edd7 6a02 	vldr	s13, [r7, #8]
 800132e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001336:	edc7 7a04 	vstr	s15, [r7, #16]

    // Compute filter coefficients
    filt -> a[0] = 4.0f + 2.0f * (boostcut / Q) * wcT + wcT * wcT;
 800133a:	edd7 6a00 	vldr	s13, [r7]
 800133e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001346:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800134a:	edd7 7a05 	vldr	s15, [r7, #20]
 800134e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001352:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800135a:	edd7 7a05 	vldr	s15, [r7, #20]
 800135e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	edc3 7a07 	vstr	s15, [r3, #28]
    filt -> a[1] = 2.0f * wcT * wcT - 8.0f;
 800136c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001370:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001374:	edd7 7a05 	vldr	s15, [r7, #20]
 8001378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137c:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001380:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	edc3 7a08 	vstr	s15, [r3, #32]
    filt -> a[2] = 4.0f - 2.0f * (boostcut / Q) * wcT + wcT * wcT;
 800138a:	edd7 6a00 	vldr	s13, [r7]
 800138e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001396:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800139a:	edd7 7a05 	vldr	s15, [r7, #20]
 800139e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80013a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    filt -> b[0] = 1.0f / (4.0f + 2.0f / Q * wcT + wcT * wcT);
 80013bc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80013c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80013cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80013d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80013dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80013e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    filt -> b[1] = -(2.0f * wcT * wcT - 8.0f);
 80013f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80013f6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80013fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80013fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001402:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001406:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800140a:	eef1 7a67 	vneg.f32	s15, s15
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    filt -> b[2] = -(4.0f - 2.0f / Q * wcT + wcT * wcT);
 8001414:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001418:	edd7 7a04 	vldr	s15, [r7, #16]
 800141c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001420:	edd7 7a05 	vldr	s15, [r7, #20]
 8001424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001428:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800142c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001430:	edd7 7a05 	vldr	s15, [r7, #20]
 8001434:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143c:	eef1 7a67 	vneg.f32	s15, s15
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bdb0      	pop	{r4, r5, r7, pc}
 800144e:	bf00      	nop
 8001450:	54442d18 	.word	0x54442d18
 8001454:	400921fb 	.word	0x400921fb

08001458 <peaking_filter_update>:

float peaking_filter_update(peaking_filter *filt, float in) {
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	ed87 0a00 	vstr	s0, [r7]
    // Update filter memory
    filt -> x[2] = filt -> x[1];
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	60da      	str	r2, [r3, #12]
    filt -> x[1] = filt -> x[0];
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	609a      	str	r2, [r3, #8]
    filt -> x[0] = in;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	605a      	str	r2, [r3, #4]
    filt -> y[2] = filt -> y[1];
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695a      	ldr	r2, [r3, #20]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	619a      	str	r2, [r3, #24]
    filt -> y[1] = filt -> y[0];
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691a      	ldr	r2, [r3, #16]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	615a      	str	r2, [r3, #20]

    // Compute filter output
    filt -> y[0] = (filt -> a[0] * filt -> x[0] + filt -> a[1] * filt -> x[1] + filt -> a[2] * filt -> x[2] + (filt -> b[1] * filt -> y[1] + filt -> b[2] * filt -> y[2])) * filt -> b[0];
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edd3 7a01 	vldr	s15, [r3, #4]
 8001496:	ee27 7a27 	vmul.f32	s14, s14, s15
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	edd3 6a08 	vldr	s13, [r3, #32]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80014a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80014ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80014ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	ed93 6a0c 	vldr	s12, [r3, #48]	@ 0x30
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	edd3 7a06 	vldr	s15, [r3, #24]
 80014de:	ee66 7a27 	vmul.f32	s15, s12, s15
 80014e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80014e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80014f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	edc3 7a04 	vstr	s15, [r3, #16]
    
    // Print coefficients
//    printf("a0: %f, a1: %f, a2: %f, b0: %f, b1: %f, b2: %f\n", filt -> a[0], filt -> a[1], filt -> a[2], filt -> b[0], filt -> b[1], filt -> b[2]);
    return filt -> y[0];
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	ee07 3a90 	vmov	s15, r3
}
 8001502:	eeb0 0a67 	vmov.f32	s0, s15
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <HAL_MspInit+0x4c>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	4a0f      	ldr	r2, [pc, #60]	@ (800155c <HAL_MspInit+0x4c>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001524:	6453      	str	r3, [r2, #68]	@ 0x44
 8001526:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <HAL_MspInit+0x4c>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	4b09      	ldr	r3, [pc, #36]	@ (800155c <HAL_MspInit+0x4c>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	4a08      	ldr	r2, [pc, #32]	@ (800155c <HAL_MspInit+0x4c>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001540:	6413      	str	r3, [r2, #64]	@ 0x40
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_MspInit+0x4c>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08e      	sub	sp, #56	@ 0x38
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a6b      	ldr	r2, [pc, #428]	@ (8001738 <HAL_I2S_MspInit+0x1d8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	f040 80cf 	bne.w	8001730 <HAL_I2S_MspInit+0x1d0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001592:	2301      	movs	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001596:	23c0      	movs	r3, #192	@ 0xc0
 8001598:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800159a:	2302      	movs	r3, #2
 800159c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 fb40 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80015ae:	f7ff fe43 	bl	8001238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b61      	ldr	r3, [pc, #388]	@ (800173c <HAL_I2S_MspInit+0x1dc>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	4a60      	ldr	r2, [pc, #384]	@ (800173c <HAL_I2S_MspInit+0x1dc>)
 80015bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c2:	4b5e      	ldr	r3, [pc, #376]	@ (800173c <HAL_I2S_MspInit+0x1dc>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b5a      	ldr	r3, [pc, #360]	@ (800173c <HAL_I2S_MspInit+0x1dc>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4a59      	ldr	r2, [pc, #356]	@ (800173c <HAL_I2S_MspInit+0x1dc>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4b57      	ldr	r3, [pc, #348]	@ (800173c <HAL_I2S_MspInit+0x1dc>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b53      	ldr	r3, [pc, #332]	@ (800173c <HAL_I2S_MspInit+0x1dc>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a52      	ldr	r2, [pc, #328]	@ (800173c <HAL_I2S_MspInit+0x1dc>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b50      	ldr	r3, [pc, #320]	@ (800173c <HAL_I2S_MspInit+0x1dc>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001606:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001618:	2305      	movs	r3, #5
 800161a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	4847      	ldr	r0, [pc, #284]	@ (8001740 <HAL_I2S_MspInit+0x1e0>)
 8001624:	f000 fe0c 	bl	8002240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001628:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800163a:	2306      	movs	r3, #6
 800163c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001642:	4619      	mov	r1, r3
 8001644:	483e      	ldr	r0, [pc, #248]	@ (8001740 <HAL_I2S_MspInit+0x1e0>)
 8001646:	f000 fdfb 	bl	8002240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800164a:	2340      	movs	r3, #64	@ 0x40
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800165a:	2305      	movs	r3, #5
 800165c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001662:	4619      	mov	r1, r3
 8001664:	4837      	ldr	r0, [pc, #220]	@ (8001744 <HAL_I2S_MspInit+0x1e4>)
 8001666:	f000 fdeb 	bl	8002240 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 800166a:	4b37      	ldr	r3, [pc, #220]	@ (8001748 <HAL_I2S_MspInit+0x1e8>)
 800166c:	4a37      	ldr	r2, [pc, #220]	@ (800174c <HAL_I2S_MspInit+0x1ec>)
 800166e:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001670:	4b35      	ldr	r3, [pc, #212]	@ (8001748 <HAL_I2S_MspInit+0x1e8>)
 8001672:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001676:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001678:	4b33      	ldr	r3, [pc, #204]	@ (8001748 <HAL_I2S_MspInit+0x1e8>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800167e:	4b32      	ldr	r3, [pc, #200]	@ (8001748 <HAL_I2S_MspInit+0x1e8>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001684:	4b30      	ldr	r3, [pc, #192]	@ (8001748 <HAL_I2S_MspInit+0x1e8>)
 8001686:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800168a:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800168c:	4b2e      	ldr	r3, [pc, #184]	@ (8001748 <HAL_I2S_MspInit+0x1e8>)
 800168e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001692:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001694:	4b2c      	ldr	r3, [pc, #176]	@ (8001748 <HAL_I2S_MspInit+0x1e8>)
 8001696:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800169a:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 800169c:	4b2a      	ldr	r3, [pc, #168]	@ (8001748 <HAL_I2S_MspInit+0x1e8>)
 800169e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016a2:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80016a4:	4b28      	ldr	r3, [pc, #160]	@ (8001748 <HAL_I2S_MspInit+0x1e8>)
 80016a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016aa:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ac:	4b26      	ldr	r3, [pc, #152]	@ (8001748 <HAL_I2S_MspInit+0x1e8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 80016b2:	4825      	ldr	r0, [pc, #148]	@ (8001748 <HAL_I2S_MspInit+0x1e8>)
 80016b4:	f000 fa54 	bl	8001b60 <HAL_DMA_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 80016be:	f7ff fdbb 	bl	8001238 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a20      	ldr	r2, [pc, #128]	@ (8001748 <HAL_I2S_MspInit+0x1e8>)
 80016c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001748 <HAL_I2S_MspInit+0x1e8>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80016ce:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <HAL_I2S_MspInit+0x1f0>)
 80016d0:	4a20      	ldr	r2, [pc, #128]	@ (8001754 <HAL_I2S_MspInit+0x1f4>)
 80016d2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80016d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <HAL_I2S_MspInit+0x1f0>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016da:	4b1d      	ldr	r3, [pc, #116]	@ (8001750 <HAL_I2S_MspInit+0x1f0>)
 80016dc:	2240      	movs	r2, #64	@ 0x40
 80016de:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <HAL_I2S_MspInit+0x1f0>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001750 <HAL_I2S_MspInit+0x1f0>)
 80016e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ec:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ee:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <HAL_I2S_MspInit+0x1f0>)
 80016f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016f4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016f6:	4b16      	ldr	r3, [pc, #88]	@ (8001750 <HAL_I2S_MspInit+0x1f0>)
 80016f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016fc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80016fe:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <HAL_I2S_MspInit+0x1f0>)
 8001700:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001704:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001706:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <HAL_I2S_MspInit+0x1f0>)
 8001708:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800170c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <HAL_I2S_MspInit+0x1f0>)
 8001710:	2200      	movs	r2, #0
 8001712:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001714:	480e      	ldr	r0, [pc, #56]	@ (8001750 <HAL_I2S_MspInit+0x1f0>)
 8001716:	f000 fa23 	bl	8001b60 <HAL_DMA_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 8001720:	f7ff fd8a 	bl	8001238 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <HAL_I2S_MspInit+0x1f0>)
 8001728:	639a      	str	r2, [r3, #56]	@ 0x38
 800172a:	4a09      	ldr	r2, [pc, #36]	@ (8001750 <HAL_I2S_MspInit+0x1f0>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001730:	bf00      	nop
 8001732:	3738      	adds	r7, #56	@ 0x38
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40003800 	.word	0x40003800
 800173c:	40023800 	.word	0x40023800
 8001740:	40020400 	.word	0x40020400
 8001744:	40020800 	.word	0x40020800
 8001748:	20000070 	.word	0x20000070
 800174c:	40026058 	.word	0x40026058
 8001750:	200000d0 	.word	0x200000d0
 8001754:	40026070 	.word	0x40026070

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <NMI_Handler+0x4>

08001760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <MemManage_Handler+0x4>

08001770 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <UsageFault_Handler+0x4>

08001780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ae:	f000 f8a5 	bl	80018fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <DMA1_Stream3_IRQHandler+0x10>)
 80017be:	f000 fad5 	bl	8001d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000070 	.word	0x20000070

080017cc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80017d0:	4802      	ldr	r0, [pc, #8]	@ (80017dc <DMA1_Stream4_IRQHandler+0x10>)
 80017d2:	f000 facb 	bl	8001d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200000d0 	.word	0x200000d0

080017e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <SystemInit+0x20>)
 80017e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ea:	4a05      	ldr	r2, [pc, #20]	@ (8001800 <SystemInit+0x20>)
 80017ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001804:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800183c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001808:	f7ff ffea 	bl	80017e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800180c:	480c      	ldr	r0, [pc, #48]	@ (8001840 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800180e:	490d      	ldr	r1, [pc, #52]	@ (8001844 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001810:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001814:	e002      	b.n	800181c <LoopCopyDataInit>

08001816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181a:	3304      	adds	r3, #4

0800181c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800181c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001820:	d3f9      	bcc.n	8001816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001822:	4a0a      	ldr	r2, [pc, #40]	@ (800184c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001824:	4c0a      	ldr	r4, [pc, #40]	@ (8001850 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001828:	e001      	b.n	800182e <LoopFillZerobss>

0800182a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800182c:	3204      	adds	r2, #4

0800182e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001830:	d3fb      	bcc.n	800182a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001832:	f002 fb43 	bl	8003ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001836:	f7ff fb0d 	bl	8000e54 <main>
  bx  lr    
 800183a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800183c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001844:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001848:	08005240 	.word	0x08005240
  ldr r2, =_sbss
 800184c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001850:	20000568 	.word	0x20000568

08001854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001854:	e7fe      	b.n	8001854 <ADC_IRQHandler>
	...

08001858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800185c:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0d      	ldr	r2, [pc, #52]	@ (8001898 <HAL_Init+0x40>)
 8001862:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <HAL_Init+0x40>)
 800186e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001874:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <HAL_Init+0x40>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a07      	ldr	r2, [pc, #28]	@ (8001898 <HAL_Init+0x40>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001880:	2003      	movs	r0, #3
 8001882:	f000 f92b 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001886:	200f      	movs	r0, #15
 8001888:	f000 f808 	bl	800189c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800188c:	f7ff fe40 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023c00 	.word	0x40023c00

0800189c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_InitTick+0x54>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <HAL_InitTick+0x58>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f943 	bl	8001b46 <HAL_SYSTICK_Config>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00e      	b.n	80018e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b0f      	cmp	r3, #15
 80018ce:	d80a      	bhi.n	80018e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d0:	2200      	movs	r2, #0
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f000 f90b 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018dc:	4a06      	ldr	r2, [pc, #24]	@ (80018f8 <HAL_InitTick+0x5c>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e000      	b.n	80018e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000008 	.word	0x20000008
 80018f8:	20000004 	.word	0x20000004

080018fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <HAL_IncTick+0x20>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_IncTick+0x24>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4413      	add	r3, r2
 800190c:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <HAL_IncTick+0x24>)
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000008 	.word	0x20000008
 8001920:	20000564 	.word	0x20000564

08001924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return uwTick;
 8001928:	4b03      	ldr	r3, [pc, #12]	@ (8001938 <HAL_GetTick+0x14>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000564 	.word	0x20000564

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800196c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196e:	4a04      	ldr	r2, [pc, #16]	@ (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	60d3      	str	r3, [r2, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	@ (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	db0b      	blt.n	80019ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	f003 021f 	and.w	r2, r3, #31
 80019b8:	4907      	ldr	r1, [pc, #28]	@ (80019d8 <__NVIC_EnableIRQ+0x38>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	2001      	movs	r0, #1
 80019c2:	fa00 f202 	lsl.w	r2, r0, r2
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000e100 	.word	0xe000e100

080019dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db0a      	blt.n	8001a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	@ (8001a28 <__NVIC_SetPriority+0x4c>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a04:	e00a      	b.n	8001a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4908      	ldr	r1, [pc, #32]	@ (8001a2c <__NVIC_SetPriority+0x50>)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	3b04      	subs	r3, #4
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	761a      	strb	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	@ 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
         );
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	@ 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff8e 	bl	80019dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	@ (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff29 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff3e 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff8e 	bl	8001a30 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5d 	bl	80019dc <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff31 	bl	80019a0 <__NVIC_EnableIRQ>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ffa2 	bl	8001a98 <SysTick_Config>
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b6c:	f7ff feda 	bl	8001924 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e099      	b.n	8001cb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0201 	bic.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b9c:	e00f      	b.n	8001bbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b9e:	f7ff fec1 	bl	8001924 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b05      	cmp	r3, #5
 8001baa:	d908      	bls.n	8001bbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e078      	b.n	8001cb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1e8      	bne.n	8001b9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	4b38      	ldr	r3, [pc, #224]	@ (8001cb8 <HAL_DMA_Init+0x158>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d107      	bne.n	8001c28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c20:	4313      	orrs	r3, r2
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f023 0307 	bic.w	r3, r3, #7
 8001c3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d117      	bne.n	8001c82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00e      	beq.n	8001c82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 fa6f 	bl	8002148 <DMA_CheckFifoParam>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2240      	movs	r2, #64	@ 0x40
 8001c74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e016      	b.n	8001cb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 fa26 	bl	80020dc <DMA_CalcBaseAndBitshift>
 8001c90:	4603      	mov	r3, r0
 8001c92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c98:	223f      	movs	r2, #63	@ 0x3f
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	f010803f 	.word	0xf010803f

08001cbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d101      	bne.n	8001ce2 <HAL_DMA_Start_IT+0x26>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e040      	b.n	8001d64 <HAL_DMA_Start_IT+0xa8>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d12f      	bne.n	8001d56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 f9b8 	bl	8002080 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d14:	223f      	movs	r2, #63	@ 0x3f
 8001d16:	409a      	lsls	r2, r3
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0216 	orr.w	r2, r2, #22
 8001d2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d007      	beq.n	8001d44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0208 	orr.w	r2, r2, #8
 8001d42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	e005      	b.n	8001d62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d78:	4b8e      	ldr	r3, [pc, #568]	@ (8001fb4 <HAL_DMA_IRQHandler+0x248>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a8e      	ldr	r2, [pc, #568]	@ (8001fb8 <HAL_DMA_IRQHandler+0x24c>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0a9b      	lsrs	r3, r3, #10
 8001d84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d96:	2208      	movs	r2, #8
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d01a      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0204 	bic.w	r2, r2, #4
 8001dbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd0:	f043 0201 	orr.w	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ddc:	2201      	movs	r2, #1
 8001dde:	409a      	lsls	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d012      	beq.n	8001e0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00b      	beq.n	8001e0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e06:	f043 0202 	orr.w	r2, r3, #2
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e12:	2204      	movs	r2, #4
 8001e14:	409a      	lsls	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d012      	beq.n	8001e44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00b      	beq.n	8001e44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e30:	2204      	movs	r2, #4
 8001e32:	409a      	lsls	r2, r3
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3c:	f043 0204 	orr.w	r2, r3, #4
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e48:	2210      	movs	r2, #16
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d043      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d03c      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e66:	2210      	movs	r2, #16
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d018      	beq.n	8001eae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d108      	bne.n	8001e9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d024      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	4798      	blx	r3
 8001e9a:	e01f      	b.n	8001edc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d01b      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	4798      	blx	r3
 8001eac:	e016      	b.n	8001edc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d107      	bne.n	8001ecc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0208 	bic.w	r2, r2, #8
 8001eca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 808f 	beq.w	800200c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 8087 	beq.w	800200c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f02:	2220      	movs	r2, #32
 8001f04:	409a      	lsls	r2, r3
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b05      	cmp	r3, #5
 8001f14:	d136      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0216 	bic.w	r2, r2, #22
 8001f24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d103      	bne.n	8001f46 <HAL_DMA_IRQHandler+0x1da>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0208 	bic.w	r2, r2, #8
 8001f54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5a:	223f      	movs	r2, #63	@ 0x3f
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d07e      	beq.n	8002078 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	4798      	blx	r3
        }
        return;
 8001f82:	e079      	b.n	8002078 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d01d      	beq.n	8001fce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10d      	bne.n	8001fbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d031      	beq.n	800200c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	4798      	blx	r3
 8001fb0:	e02c      	b.n	800200c <HAL_DMA_IRQHandler+0x2a0>
 8001fb2:	bf00      	nop
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d023      	beq.n	800200c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4798      	blx	r3
 8001fcc:	e01e      	b.n	800200c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10f      	bne.n	8001ffc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0210 	bic.w	r2, r2, #16
 8001fea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002010:	2b00      	cmp	r3, #0
 8002012:	d032      	beq.n	800207a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d022      	beq.n	8002066 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2205      	movs	r2, #5
 8002024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	3301      	adds	r3, #1
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	429a      	cmp	r2, r3
 8002042:	d307      	bcc.n	8002054 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f2      	bne.n	8002038 <HAL_DMA_IRQHandler+0x2cc>
 8002052:	e000      	b.n	8002056 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002054:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4798      	blx	r3
 8002076:	e000      	b.n	800207a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002078:	bf00      	nop
    }
  }
}
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800209c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b40      	cmp	r3, #64	@ 0x40
 80020ac:	d108      	bne.n	80020c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020be:	e007      	b.n	80020d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	60da      	str	r2, [r3, #12]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	3b10      	subs	r3, #16
 80020ec:	4a14      	ldr	r2, [pc, #80]	@ (8002140 <DMA_CalcBaseAndBitshift+0x64>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	091b      	lsrs	r3, r3, #4
 80020f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020f6:	4a13      	ldr	r2, [pc, #76]	@ (8002144 <DMA_CalcBaseAndBitshift+0x68>)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d909      	bls.n	800211e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002112:	f023 0303 	bic.w	r3, r3, #3
 8002116:	1d1a      	adds	r2, r3, #4
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	659a      	str	r2, [r3, #88]	@ 0x58
 800211c:	e007      	b.n	800212e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002126:	f023 0303 	bic.w	r3, r3, #3
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	aaaaaaab 	.word	0xaaaaaaab
 8002144:	08005050 	.word	0x08005050

08002148 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002158:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d11f      	bne.n	80021a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d856      	bhi.n	8002216 <DMA_CheckFifoParam+0xce>
 8002168:	a201      	add	r2, pc, #4	@ (adr r2, 8002170 <DMA_CheckFifoParam+0x28>)
 800216a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216e:	bf00      	nop
 8002170:	08002181 	.word	0x08002181
 8002174:	08002193 	.word	0x08002193
 8002178:	08002181 	.word	0x08002181
 800217c:	08002217 	.word	0x08002217
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002184:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d046      	beq.n	800221a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002190:	e043      	b.n	800221a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002196:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800219a:	d140      	bne.n	800221e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a0:	e03d      	b.n	800221e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021aa:	d121      	bne.n	80021f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d837      	bhi.n	8002222 <DMA_CheckFifoParam+0xda>
 80021b2:	a201      	add	r2, pc, #4	@ (adr r2, 80021b8 <DMA_CheckFifoParam+0x70>)
 80021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b8:	080021c9 	.word	0x080021c9
 80021bc:	080021cf 	.word	0x080021cf
 80021c0:	080021c9 	.word	0x080021c9
 80021c4:	080021e1 	.word	0x080021e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
      break;
 80021cc:	e030      	b.n	8002230 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d025      	beq.n	8002226 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021de:	e022      	b.n	8002226 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021e8:	d11f      	bne.n	800222a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021ee:	e01c      	b.n	800222a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d903      	bls.n	80021fe <DMA_CheckFifoParam+0xb6>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d003      	beq.n	8002204 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021fc:	e018      	b.n	8002230 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
      break;
 8002202:	e015      	b.n	8002230 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002208:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00e      	beq.n	800222e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
      break;
 8002214:	e00b      	b.n	800222e <DMA_CheckFifoParam+0xe6>
      break;
 8002216:	bf00      	nop
 8002218:	e00a      	b.n	8002230 <DMA_CheckFifoParam+0xe8>
      break;
 800221a:	bf00      	nop
 800221c:	e008      	b.n	8002230 <DMA_CheckFifoParam+0xe8>
      break;
 800221e:	bf00      	nop
 8002220:	e006      	b.n	8002230 <DMA_CheckFifoParam+0xe8>
      break;
 8002222:	bf00      	nop
 8002224:	e004      	b.n	8002230 <DMA_CheckFifoParam+0xe8>
      break;
 8002226:	bf00      	nop
 8002228:	e002      	b.n	8002230 <DMA_CheckFifoParam+0xe8>
      break;   
 800222a:	bf00      	nop
 800222c:	e000      	b.n	8002230 <DMA_CheckFifoParam+0xe8>
      break;
 800222e:	bf00      	nop
    }
  } 
  
  return status; 
 8002230:	7bfb      	ldrb	r3, [r7, #15]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	@ 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	e16b      	b.n	8002534 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800225c:	2201      	movs	r2, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	429a      	cmp	r2, r3
 8002276:	f040 815a 	bne.w	800252e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d005      	beq.n	8002292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800228e:	2b02      	cmp	r3, #2
 8002290:	d130      	bne.n	80022f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	2203      	movs	r2, #3
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c8:	2201      	movs	r2, #1
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	f003 0201 	and.w	r2, r3, #1
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d017      	beq.n	8002330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d123      	bne.n	8002384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	08da      	lsrs	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3208      	adds	r2, #8
 8002344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	220f      	movs	r2, #15
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	69b9      	ldr	r1, [r7, #24]
 8002380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0203 	and.w	r2, r3, #3
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80b4 	beq.w	800252e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b60      	ldr	r3, [pc, #384]	@ (800254c <HAL_GPIO_Init+0x30c>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	4a5f      	ldr	r2, [pc, #380]	@ (800254c <HAL_GPIO_Init+0x30c>)
 80023d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023d6:	4b5d      	ldr	r3, [pc, #372]	@ (800254c <HAL_GPIO_Init+0x30c>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002550 <HAL_GPIO_Init+0x310>)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	3302      	adds	r3, #2
 80023ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	220f      	movs	r2, #15
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a52      	ldr	r2, [pc, #328]	@ (8002554 <HAL_GPIO_Init+0x314>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d02b      	beq.n	8002466 <HAL_GPIO_Init+0x226>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a51      	ldr	r2, [pc, #324]	@ (8002558 <HAL_GPIO_Init+0x318>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d025      	beq.n	8002462 <HAL_GPIO_Init+0x222>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a50      	ldr	r2, [pc, #320]	@ (800255c <HAL_GPIO_Init+0x31c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d01f      	beq.n	800245e <HAL_GPIO_Init+0x21e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4f      	ldr	r2, [pc, #316]	@ (8002560 <HAL_GPIO_Init+0x320>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d019      	beq.n	800245a <HAL_GPIO_Init+0x21a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4e      	ldr	r2, [pc, #312]	@ (8002564 <HAL_GPIO_Init+0x324>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d013      	beq.n	8002456 <HAL_GPIO_Init+0x216>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a4d      	ldr	r2, [pc, #308]	@ (8002568 <HAL_GPIO_Init+0x328>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00d      	beq.n	8002452 <HAL_GPIO_Init+0x212>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4c      	ldr	r2, [pc, #304]	@ (800256c <HAL_GPIO_Init+0x32c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d007      	beq.n	800244e <HAL_GPIO_Init+0x20e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4b      	ldr	r2, [pc, #300]	@ (8002570 <HAL_GPIO_Init+0x330>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_GPIO_Init+0x20a>
 8002446:	2307      	movs	r3, #7
 8002448:	e00e      	b.n	8002468 <HAL_GPIO_Init+0x228>
 800244a:	2308      	movs	r3, #8
 800244c:	e00c      	b.n	8002468 <HAL_GPIO_Init+0x228>
 800244e:	2306      	movs	r3, #6
 8002450:	e00a      	b.n	8002468 <HAL_GPIO_Init+0x228>
 8002452:	2305      	movs	r3, #5
 8002454:	e008      	b.n	8002468 <HAL_GPIO_Init+0x228>
 8002456:	2304      	movs	r3, #4
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x228>
 800245a:	2303      	movs	r3, #3
 800245c:	e004      	b.n	8002468 <HAL_GPIO_Init+0x228>
 800245e:	2302      	movs	r3, #2
 8002460:	e002      	b.n	8002468 <HAL_GPIO_Init+0x228>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_GPIO_Init+0x228>
 8002466:	2300      	movs	r3, #0
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	f002 0203 	and.w	r2, r2, #3
 800246e:	0092      	lsls	r2, r2, #2
 8002470:	4093      	lsls	r3, r2
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002478:	4935      	ldr	r1, [pc, #212]	@ (8002550 <HAL_GPIO_Init+0x310>)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	3302      	adds	r3, #2
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002486:	4b3b      	ldr	r3, [pc, #236]	@ (8002574 <HAL_GPIO_Init+0x334>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024aa:	4a32      	ldr	r2, [pc, #200]	@ (8002574 <HAL_GPIO_Init+0x334>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b0:	4b30      	ldr	r3, [pc, #192]	@ (8002574 <HAL_GPIO_Init+0x334>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d4:	4a27      	ldr	r2, [pc, #156]	@ (8002574 <HAL_GPIO_Init+0x334>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024da:	4b26      	ldr	r3, [pc, #152]	@ (8002574 <HAL_GPIO_Init+0x334>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002574 <HAL_GPIO_Init+0x334>)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002504:	4b1b      	ldr	r3, [pc, #108]	@ (8002574 <HAL_GPIO_Init+0x334>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002528:	4a12      	ldr	r2, [pc, #72]	@ (8002574 <HAL_GPIO_Init+0x334>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3301      	adds	r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b0f      	cmp	r3, #15
 8002538:	f67f ae90 	bls.w	800225c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	3724      	adds	r7, #36	@ 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	40013800 	.word	0x40013800
 8002554:	40020000 	.word	0x40020000
 8002558:	40020400 	.word	0x40020400
 800255c:	40020800 	.word	0x40020800
 8002560:	40020c00 	.word	0x40020c00
 8002564:	40021000 	.word	0x40021000
 8002568:	40021400 	.word	0x40021400
 800256c:	40021800 	.word	0x40021800
 8002570:	40021c00 	.word	0x40021c00
 8002574:	40013c00 	.word	0x40013c00

08002578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]
 8002584:	4613      	mov	r3, r2
 8002586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002588:	787b      	ldrb	r3, [r7, #1]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002594:	e003      	b.n	800259e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002596:	887b      	ldrh	r3, [r7, #2]
 8002598:	041a      	lsls	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	619a      	str	r2, [r3, #24]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e128      	b.n	8002810 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d109      	bne.n	80025de <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a90      	ldr	r2, [pc, #576]	@ (8002818 <HAL_I2S_Init+0x26c>)
 80025d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7fe ffc1 	bl	8001560 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2202      	movs	r2, #2
 80025e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80025f4:	f023 030f 	bic.w	r3, r3, #15
 80025f8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2202      	movs	r2, #2
 8002600:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d060      	beq.n	80026cc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d102      	bne.n	8002618 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002612:	2310      	movs	r3, #16
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	e001      	b.n	800261c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002618:	2320      	movs	r3, #32
 800261a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b20      	cmp	r3, #32
 8002622:	d802      	bhi.n	800262a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800262a:	2001      	movs	r0, #1
 800262c:	f001 fbde 	bl	8003dec <HAL_RCCEx_GetPeriphCLKFreq>
 8002630:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800263a:	d125      	bne.n	8002688 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d010      	beq.n	8002666 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	fbb2 f2f3 	udiv	r2, r2, r3
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	461a      	mov	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002660:	3305      	adds	r3, #5
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	e01f      	b.n	80026a6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	461a      	mov	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002682:	3305      	adds	r3, #5
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	e00e      	b.n	80026a6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	461a      	mov	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a2:	3305      	adds	r3, #5
 80026a4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4a5c      	ldr	r2, [pc, #368]	@ (800281c <HAL_I2S_Init+0x270>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	08db      	lsrs	r3, r3, #3
 80026b0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	085b      	lsrs	r3, r3, #1
 80026c2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	e003      	b.n	80026d4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80026cc:	2302      	movs	r3, #2
 80026ce:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d902      	bls.n	80026e0 <HAL_I2S_Init+0x134>
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	2bff      	cmp	r3, #255	@ 0xff
 80026de:	d907      	bls.n	80026f0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e4:	f043 0210 	orr.w	r2, r3, #16
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e08f      	b.n	8002810 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	ea42 0103 	orr.w	r1, r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	430a      	orrs	r2, r1
 8002702:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800270e:	f023 030f 	bic.w	r3, r3, #15
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6851      	ldr	r1, [r2, #4]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6892      	ldr	r2, [r2, #8]
 800271a:	4311      	orrs	r1, r2
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	68d2      	ldr	r2, [r2, #12]
 8002720:	4311      	orrs	r1, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6992      	ldr	r2, [r2, #24]
 8002726:	430a      	orrs	r2, r1
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002732:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d161      	bne.n	8002800 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a38      	ldr	r2, [pc, #224]	@ (8002820 <HAL_I2S_Init+0x274>)
 8002740:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a37      	ldr	r2, [pc, #220]	@ (8002824 <HAL_I2S_Init+0x278>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d101      	bne.n	8002750 <HAL_I2S_Init+0x1a4>
 800274c:	4b36      	ldr	r3, [pc, #216]	@ (8002828 <HAL_I2S_Init+0x27c>)
 800274e:	e001      	b.n	8002754 <HAL_I2S_Init+0x1a8>
 8002750:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	4932      	ldr	r1, [pc, #200]	@ (8002824 <HAL_I2S_Init+0x278>)
 800275c:	428a      	cmp	r2, r1
 800275e:	d101      	bne.n	8002764 <HAL_I2S_Init+0x1b8>
 8002760:	4a31      	ldr	r2, [pc, #196]	@ (8002828 <HAL_I2S_Init+0x27c>)
 8002762:	e001      	b.n	8002768 <HAL_I2S_Init+0x1bc>
 8002764:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002768:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800276c:	f023 030f 	bic.w	r3, r3, #15
 8002770:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a2b      	ldr	r2, [pc, #172]	@ (8002824 <HAL_I2S_Init+0x278>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d101      	bne.n	8002780 <HAL_I2S_Init+0x1d4>
 800277c:	4b2a      	ldr	r3, [pc, #168]	@ (8002828 <HAL_I2S_Init+0x27c>)
 800277e:	e001      	b.n	8002784 <HAL_I2S_Init+0x1d8>
 8002780:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002784:	2202      	movs	r2, #2
 8002786:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a25      	ldr	r2, [pc, #148]	@ (8002824 <HAL_I2S_Init+0x278>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d101      	bne.n	8002796 <HAL_I2S_Init+0x1ea>
 8002792:	4b25      	ldr	r3, [pc, #148]	@ (8002828 <HAL_I2S_Init+0x27c>)
 8002794:	e001      	b.n	800279a <HAL_I2S_Init+0x1ee>
 8002796:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027a6:	d003      	beq.n	80027b0 <HAL_I2S_Init+0x204>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d103      	bne.n	80027b8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80027b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	e001      	b.n	80027bc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80027c6:	4313      	orrs	r3, r2
 80027c8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80027d0:	4313      	orrs	r3, r2
 80027d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80027da:	4313      	orrs	r3, r2
 80027dc:	b29a      	uxth	r2, r3
 80027de:	897b      	ldrh	r3, [r7, #10]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027e8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002824 <HAL_I2S_Init+0x278>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d101      	bne.n	80027f8 <HAL_I2S_Init+0x24c>
 80027f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002828 <HAL_I2S_Init+0x27c>)
 80027f6:	e001      	b.n	80027fc <HAL_I2S_Init+0x250>
 80027f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027fc:	897a      	ldrh	r2, [r7, #10]
 80027fe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	08002923 	.word	0x08002923
 800281c:	cccccccd 	.word	0xcccccccd
 8002820:	08002d4d 	.word	0x08002d4d
 8002824:	40003800 	.word	0x40003800
 8002828:	40003400 	.word	0x40003400

0800282c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002874:	881a      	ldrh	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	1c9a      	adds	r2, r3, #2
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002898:	b29b      	uxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10e      	bne.n	80028bc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80028ac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ffb8 	bl	800282c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d6:	b292      	uxth	r2, r2
 80028d8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028de:	1c9a      	adds	r2, r3, #2
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10e      	bne.n	800291a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800290a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff ff93 	bl	8002840 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b086      	sub	sp, #24
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b04      	cmp	r3, #4
 800293c:	d13a      	bne.n	80029b4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b01      	cmp	r3, #1
 8002946:	d109      	bne.n	800295c <I2S_IRQHandler+0x3a>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002952:	2b40      	cmp	r3, #64	@ 0x40
 8002954:	d102      	bne.n	800295c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff ffb4 	bl	80028c4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002962:	2b40      	cmp	r3, #64	@ 0x40
 8002964:	d126      	bne.n	80029b4 <I2S_IRQHandler+0x92>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b20      	cmp	r3, #32
 8002972:	d11f      	bne.n	80029b4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002982:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002984:	2300      	movs	r3, #0
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a6:	f043 0202 	orr.w	r2, r3, #2
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ff50 	bl	8002854 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d136      	bne.n	8002a2e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d109      	bne.n	80029de <I2S_IRQHandler+0xbc>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d4:	2b80      	cmp	r3, #128	@ 0x80
 80029d6:	d102      	bne.n	80029de <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff ff45 	bl	8002868 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d122      	bne.n	8002a2e <I2S_IRQHandler+0x10c>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	d11b      	bne.n	8002a2e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a04:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a20:	f043 0204 	orr.w	r2, r3, #4
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff ff13 	bl	8002854 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a2e:	bf00      	nop
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d002      	beq.n	8002a64 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a62:	e160      	b.n	8002d26 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002a70:	887b      	ldrh	r3, [r7, #2]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e15a      	b.n	8002d30 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e152      	b.n	8002d30 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  hi2s->pTxBuffPtr = pTxData;
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d002      	beq.n	8002ab6 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d114      	bne.n	8002ae0 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8002ab6:	887b      	ldrh	r3, [r7, #2]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002ac0:	887b      	ldrh	r3, [r7, #2]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002aca:	887b      	ldrh	r3, [r7, #2]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002ad4:	887b      	ldrh	r3, [r7, #2]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	865a      	strh	r2, [r3, #50]	@ 0x32
 8002ade:	e00b      	b.n	8002af8 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	887a      	ldrh	r2, [r7, #2]
 8002ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	887a      	ldrh	r2, [r7, #2]
 8002aea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = Size;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	887a      	ldrh	r2, [r7, #2]
 8002af0:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	887a      	ldrh	r2, [r7, #2]
 8002af6:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2205      	movs	r2, #5
 8002b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b0a:	4a8b      	ldr	r2, [pc, #556]	@ (8002d38 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002b0c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b12:	4a8a      	ldr	r2, [pc, #552]	@ (8002d3c <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002b14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1a:	4a89      	ldr	r2, [pc, #548]	@ (8002d40 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002b1c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b22:	2200      	movs	r2, #0
 8002b24:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b32:	4a83      	ldr	r2, [pc, #524]	@ (8002d40 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002b34:	64da      	str	r2, [r3, #76]	@ 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b40:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b48:	d002      	beq.n	8002b50 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d16b      	bne.n	8002c28 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a79      	ldr	r2, [pc, #484]	@ (8002d44 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d101      	bne.n	8002b66 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8002b62:	4b79      	ldr	r3, [pc, #484]	@ (8002d48 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002b64:	e001      	b.n	8002b6a <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8002b66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b6a:	330c      	adds	r3, #12
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	f7ff f8a0 	bl	8001cbc <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a70      	ldr	r2, [pc, #448]	@ (8002d44 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8002b86:	4b70      	ldr	r3, [pc, #448]	@ (8002d48 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002b88:	e001      	b.n	8002b8e <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002b8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	496b      	ldr	r1, [pc, #428]	@ (8002d44 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002b96:	428b      	cmp	r3, r1
 8002b98:	d101      	bne.n	8002b9e <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002b9a:	4b6b      	ldr	r3, [pc, #428]	@ (8002d48 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002b9c:	e001      	b.n	8002ba2 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002b9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002ba8:	f107 0308 	add.w	r3, r7, #8
 8002bac:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	6819      	ldr	r1, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	330c      	adds	r3, #12
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	f7ff f87a 	bl	8001cbc <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0202 	orr.w	r2, r2, #2
 8002bd6:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002be6:	f000 809e 	beq.w	8002d26 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a55      	ldr	r2, [pc, #340]	@ (8002d44 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d101      	bne.n	8002bf8 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002bf4:	4b54      	ldr	r3, [pc, #336]	@ (8002d48 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002bf6:	e001      	b.n	8002bfc <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002bf8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bfc:	69da      	ldr	r2, [r3, #28]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4950      	ldr	r1, [pc, #320]	@ (8002d44 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002c04:	428b      	cmp	r3, r1
 8002c06:	d101      	bne.n	8002c0c <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002c08:	4b4f      	ldr	r3, [pc, #316]	@ (8002d48 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002c0a:	e001      	b.n	8002c10 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002c0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c14:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69da      	ldr	r2, [r3, #28]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c24:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002c26:	e07e      	b.n	8002d26 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c36:	d10a      	bne.n	8002c4e <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c38:	2300      	movs	r3, #0
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002c4e:	f107 0308 	add.w	r3, r7, #8
 8002c52:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	6819      	ldr	r1, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a38      	ldr	r2, [pc, #224]	@ (8002d44 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d101      	bne.n	8002c6a <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8002c66:	4b38      	ldr	r3, [pc, #224]	@ (8002d48 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002c68:	e001      	b.n	8002c6e <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002c6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c6e:	330c      	adds	r3, #12
 8002c70:	461a      	mov	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f7ff f820 	bl	8001cbc <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a30      	ldr	r2, [pc, #192]	@ (8002d44 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8002c86:	4b30      	ldr	r3, [pc, #192]	@ (8002d48 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002c88:	e001      	b.n	8002c8e <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002c8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	492b      	ldr	r1, [pc, #172]	@ (8002d44 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002c96:	428b      	cmp	r3, r1
 8002c98:	d101      	bne.n	8002c9e <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8002d48 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002c9c:	e001      	b.n	8002ca2 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002c9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ca2:	f042 0202 	orr.w	r2, r2, #2
 8002ca6:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002ca8:	1d3b      	adds	r3, r7, #4
 8002caa:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	330c      	adds	r3, #12
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	f7fe fffb 	bl	8001cbc <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ce4:	d01e      	beq.n	8002d24 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a16      	ldr	r2, [pc, #88]	@ (8002d44 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d101      	bne.n	8002cf4 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002cf0:	4b15      	ldr	r3, [pc, #84]	@ (8002d48 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002cf2:	e001      	b.n	8002cf8 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002cf4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4911      	ldr	r1, [pc, #68]	@ (8002d44 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002d00:	428b      	cmp	r3, r1
 8002d02:	d101      	bne.n	8002d08 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002d04:	4b10      	ldr	r3, [pc, #64]	@ (8002d48 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002d06:	e001      	b.n	8002d0c <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002d08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d10:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69da      	ldr	r2, [r3, #28]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d20:	61da      	str	r2, [r3, #28]
 8002d22:	e000      	b.n	8002d26 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002d24:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return errorcode;
 8002d2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3720      	adds	r7, #32
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	08002ff5 	.word	0x08002ff5
 8002d3c:	08003011 	.word	0x08003011
 8002d40:	080030e9 	.word	0x080030e9
 8002d44:	40003800 	.word	0x40003800
 8002d48:	40003400 	.word	0x40003400

08002d4c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a92      	ldr	r2, [pc, #584]	@ (8002fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002d66:	4b92      	ldr	r3, [pc, #584]	@ (8002fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d68:	e001      	b.n	8002d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002d6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a8b      	ldr	r2, [pc, #556]	@ (8002fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d101      	bne.n	8002d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002d84:	4b8a      	ldr	r3, [pc, #552]	@ (8002fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d86:	e001      	b.n	8002d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002d88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d98:	d004      	beq.n	8002da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f040 8099 	bne.w	8002ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d107      	bne.n	8002dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f9d5 	bl	8003168 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d107      	bne.n	8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fa78 	bl	80032c8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dde:	2b40      	cmp	r3, #64	@ 0x40
 8002de0:	d13a      	bne.n	8002e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d035      	beq.n	8002e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a6e      	ldr	r2, [pc, #440]	@ (8002fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d101      	bne.n	8002dfa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002df6:	4b6e      	ldr	r3, [pc, #440]	@ (8002fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002df8:	e001      	b.n	8002dfe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002dfa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4969      	ldr	r1, [pc, #420]	@ (8002fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e06:	428b      	cmp	r3, r1
 8002e08:	d101      	bne.n	8002e0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002e0a:	4b69      	ldr	r3, [pc, #420]	@ (8002fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e0c:	e001      	b.n	8002e12 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002e0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e12:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e16:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e26:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4a:	f043 0202 	orr.w	r2, r3, #2
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff fcfe 	bl	8002854 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	f040 80c3 	bne.w	8002fea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80bd 	beq.w	8002fea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e7e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a49      	ldr	r2, [pc, #292]	@ (8002fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d101      	bne.n	8002e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002e8a:	4b49      	ldr	r3, [pc, #292]	@ (8002fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e8c:	e001      	b.n	8002e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002e8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4944      	ldr	r1, [pc, #272]	@ (8002fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e9a:	428b      	cmp	r3, r1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002e9e:	4b44      	ldr	r3, [pc, #272]	@ (8002fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ea0:	e001      	b.n	8002ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002ea2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ea6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002eaa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	f043 0204 	orr.w	r2, r3, #4
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff fcc0 	bl	8002854 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ed4:	e089      	b.n	8002fea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d107      	bne.n	8002ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f96e 	bl	80031cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d107      	bne.n	8002f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f9ad 	bl	8003264 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f10:	2b40      	cmp	r3, #64	@ 0x40
 8002f12:	d12f      	bne.n	8002f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d02a      	beq.n	8002f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f2c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1e      	ldr	r2, [pc, #120]	@ (8002fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d101      	bne.n	8002f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002f38:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f3a:	e001      	b.n	8002f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002f3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4919      	ldr	r1, [pc, #100]	@ (8002fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f48:	428b      	cmp	r3, r1
 8002f4a:	d101      	bne.n	8002f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002f4c:	4b18      	ldr	r3, [pc, #96]	@ (8002fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f4e:	e001      	b.n	8002f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002f50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002f58:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f66:	f043 0202 	orr.w	r2, r3, #2
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff fc70 	bl	8002854 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d136      	bne.n	8002fec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d031      	beq.n	8002fec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a07      	ldr	r2, [pc, #28]	@ (8002fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002f92:	4b07      	ldr	r3, [pc, #28]	@ (8002fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f94:	e001      	b.n	8002f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002f96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4902      	ldr	r1, [pc, #8]	@ (8002fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fa2:	428b      	cmp	r3, r1
 8002fa4:	d106      	bne.n	8002fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002fa6:	4b02      	ldr	r3, [pc, #8]	@ (8002fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fa8:	e006      	b.n	8002fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002faa:	bf00      	nop
 8002fac:	40003800 	.word	0x40003800
 8002fb0:	40003400 	.word	0x40003400
 8002fb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fb8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002fbc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002fcc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fda:	f043 0204 	orr.w	r2, r3, #4
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff fc36 	bl	8002854 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fe8:	e000      	b.n	8002fec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002fea:	bf00      	nop
}
 8002fec:	bf00      	nop
 8002fee:	3720      	adds	r7, #32
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003000:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f7fe f878 	bl	80010f8 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301c:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d155      	bne.n	80030d2 <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003034:	d006      	beq.n	8003044 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003040:	2b00      	cmp	r3, #0
 8003042:	d11e      	bne.n	8003082 <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a25      	ldr	r2, [pc, #148]	@ (80030e0 <I2SEx_TxRxDMACplt+0xd0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d101      	bne.n	8003052 <I2SEx_TxRxDMACplt+0x42>
 800304e:	4b25      	ldr	r3, [pc, #148]	@ (80030e4 <I2SEx_TxRxDMACplt+0xd4>)
 8003050:	e001      	b.n	8003056 <I2SEx_TxRxDMACplt+0x46>
 8003052:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4920      	ldr	r1, [pc, #128]	@ (80030e0 <I2SEx_TxRxDMACplt+0xd0>)
 800305e:	428b      	cmp	r3, r1
 8003060:	d101      	bne.n	8003066 <I2SEx_TxRxDMACplt+0x56>
 8003062:	4b20      	ldr	r3, [pc, #128]	@ (80030e4 <I2SEx_TxRxDMACplt+0xd4>)
 8003064:	e001      	b.n	800306a <I2SEx_TxRxDMACplt+0x5a>
 8003066:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800306a:	f022 0201 	bic.w	r2, r2, #1
 800306e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0202 	bic.w	r2, r2, #2
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	e01d      	b.n	80030be <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0201 	bic.w	r2, r2, #1
 8003090:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a12      	ldr	r2, [pc, #72]	@ (80030e0 <I2SEx_TxRxDMACplt+0xd0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d101      	bne.n	80030a0 <I2SEx_TxRxDMACplt+0x90>
 800309c:	4b11      	ldr	r3, [pc, #68]	@ (80030e4 <I2SEx_TxRxDMACplt+0xd4>)
 800309e:	e001      	b.n	80030a4 <I2SEx_TxRxDMACplt+0x94>
 80030a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	490d      	ldr	r1, [pc, #52]	@ (80030e0 <I2SEx_TxRxDMACplt+0xd0>)
 80030ac:	428b      	cmp	r3, r1
 80030ae:	d101      	bne.n	80030b4 <I2SEx_TxRxDMACplt+0xa4>
 80030b0:	4b0c      	ldr	r3, [pc, #48]	@ (80030e4 <I2SEx_TxRxDMACplt+0xd4>)
 80030b2:	e001      	b.n	80030b8 <I2SEx_TxRxDMACplt+0xa8>
 80030b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030b8:	f022 0202 	bic.w	r2, r2, #2
 80030bc:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->TxXferCount = 0U;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f7fe f860 	bl	8001198 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80030d8:	bf00      	nop
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40003800 	.word	0x40003800
 80030e4:	40003400 	.word	0x40003400

080030e8 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f4:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0203 	bic.w	r2, r2, #3
 8003104:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a15      	ldr	r2, [pc, #84]	@ (8003160 <I2SEx_TxRxDMAError+0x78>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d101      	bne.n	8003114 <I2SEx_TxRxDMAError+0x2c>
 8003110:	4b14      	ldr	r3, [pc, #80]	@ (8003164 <I2SEx_TxRxDMAError+0x7c>)
 8003112:	e001      	b.n	8003118 <I2SEx_TxRxDMAError+0x30>
 8003114:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4910      	ldr	r1, [pc, #64]	@ (8003160 <I2SEx_TxRxDMAError+0x78>)
 8003120:	428b      	cmp	r3, r1
 8003122:	d101      	bne.n	8003128 <I2SEx_TxRxDMAError+0x40>
 8003124:	4b0f      	ldr	r3, [pc, #60]	@ (8003164 <I2SEx_TxRxDMAError+0x7c>)
 8003126:	e001      	b.n	800312c <I2SEx_TxRxDMAError+0x44>
 8003128:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800312c:	f022 0203 	bic.w	r2, r2, #3
 8003130:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314a:	f043 0208 	orr.w	r2, r3, #8
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f7ff fb7e 	bl	8002854 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40003800 	.word	0x40003800
 8003164:	40003400 	.word	0x40003400

08003168 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	1c99      	adds	r1, r3, #2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6251      	str	r1, [r2, #36]	@ 0x24
 800317a:	881a      	ldrh	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d113      	bne.n	80031c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80031a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d106      	bne.n	80031c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7fd ffeb 	bl	8001198 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d8:	1c99      	adds	r1, r3, #2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6251      	str	r1, [r2, #36]	@ 0x24
 80031de:	8819      	ldrh	r1, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1d      	ldr	r2, [pc, #116]	@ (800325c <I2SEx_TxISR_I2SExt+0x90>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <I2SEx_TxISR_I2SExt+0x22>
 80031ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003260 <I2SEx_TxISR_I2SExt+0x94>)
 80031ec:	e001      	b.n	80031f2 <I2SEx_TxISR_I2SExt+0x26>
 80031ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031f2:	460a      	mov	r2, r1
 80031f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d121      	bne.n	8003252 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a12      	ldr	r2, [pc, #72]	@ (800325c <I2SEx_TxISR_I2SExt+0x90>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d101      	bne.n	800321c <I2SEx_TxISR_I2SExt+0x50>
 8003218:	4b11      	ldr	r3, [pc, #68]	@ (8003260 <I2SEx_TxISR_I2SExt+0x94>)
 800321a:	e001      	b.n	8003220 <I2SEx_TxISR_I2SExt+0x54>
 800321c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	490d      	ldr	r1, [pc, #52]	@ (800325c <I2SEx_TxISR_I2SExt+0x90>)
 8003228:	428b      	cmp	r3, r1
 800322a:	d101      	bne.n	8003230 <I2SEx_TxISR_I2SExt+0x64>
 800322c:	4b0c      	ldr	r3, [pc, #48]	@ (8003260 <I2SEx_TxISR_I2SExt+0x94>)
 800322e:	e001      	b.n	8003234 <I2SEx_TxISR_I2SExt+0x68>
 8003230:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003234:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003238:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d106      	bne.n	8003252 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7fd ffa3 	bl	8001198 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40003800 	.word	0x40003800
 8003260:	40003400 	.word	0x40003400

08003264 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68d8      	ldr	r0, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003276:	1c99      	adds	r1, r3, #2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800327c:	b282      	uxth	r2, r0
 800327e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d113      	bne.n	80032c0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032a6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fd ff6c 	bl	8001198 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a20      	ldr	r2, [pc, #128]	@ (8003358 <I2SEx_RxISR_I2SExt+0x90>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d101      	bne.n	80032de <I2SEx_RxISR_I2SExt+0x16>
 80032da:	4b20      	ldr	r3, [pc, #128]	@ (800335c <I2SEx_RxISR_I2SExt+0x94>)
 80032dc:	e001      	b.n	80032e2 <I2SEx_RxISR_I2SExt+0x1a>
 80032de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032e2:	68d8      	ldr	r0, [r3, #12]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e8:	1c99      	adds	r1, r3, #2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80032ee:	b282      	uxth	r2, r0
 80032f0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d121      	bne.n	800334e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a12      	ldr	r2, [pc, #72]	@ (8003358 <I2SEx_RxISR_I2SExt+0x90>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d101      	bne.n	8003318 <I2SEx_RxISR_I2SExt+0x50>
 8003314:	4b11      	ldr	r3, [pc, #68]	@ (800335c <I2SEx_RxISR_I2SExt+0x94>)
 8003316:	e001      	b.n	800331c <I2SEx_RxISR_I2SExt+0x54>
 8003318:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	490d      	ldr	r1, [pc, #52]	@ (8003358 <I2SEx_RxISR_I2SExt+0x90>)
 8003324:	428b      	cmp	r3, r1
 8003326:	d101      	bne.n	800332c <I2SEx_RxISR_I2SExt+0x64>
 8003328:	4b0c      	ldr	r3, [pc, #48]	@ (800335c <I2SEx_RxISR_I2SExt+0x94>)
 800332a:	e001      	b.n	8003330 <I2SEx_RxISR_I2SExt+0x68>
 800332c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003330:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003334:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d106      	bne.n	800334e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7fd ff25 	bl	8001198 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40003800 	.word	0x40003800
 800335c:	40003400 	.word	0x40003400

08003360 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e267      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d075      	beq.n	800346a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800337e:	4b88      	ldr	r3, [pc, #544]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b04      	cmp	r3, #4
 8003388:	d00c      	beq.n	80033a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800338a:	4b85      	ldr	r3, [pc, #532]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003392:	2b08      	cmp	r3, #8
 8003394:	d112      	bne.n	80033bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003396:	4b82      	ldr	r3, [pc, #520]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800339e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033a2:	d10b      	bne.n	80033bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a4:	4b7e      	ldr	r3, [pc, #504]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d05b      	beq.n	8003468 <HAL_RCC_OscConfig+0x108>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d157      	bne.n	8003468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e242      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033c4:	d106      	bne.n	80033d4 <HAL_RCC_OscConfig+0x74>
 80033c6:	4b76      	ldr	r3, [pc, #472]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a75      	ldr	r2, [pc, #468]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e01d      	b.n	8003410 <HAL_RCC_OscConfig+0xb0>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x98>
 80033de:	4b70      	ldr	r3, [pc, #448]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a6f      	ldr	r2, [pc, #444]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80033e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	4b6d      	ldr	r3, [pc, #436]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a6c      	ldr	r2, [pc, #432]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80033f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	e00b      	b.n	8003410 <HAL_RCC_OscConfig+0xb0>
 80033f8:	4b69      	ldr	r3, [pc, #420]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a68      	ldr	r2, [pc, #416]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80033fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	4b66      	ldr	r3, [pc, #408]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a65      	ldr	r2, [pc, #404]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 800340a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800340e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d013      	beq.n	8003440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003418:	f7fe fa84 	bl	8001924 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003420:	f7fe fa80 	bl	8001924 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b64      	cmp	r3, #100	@ 0x64
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e207      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	4b5b      	ldr	r3, [pc, #364]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCC_OscConfig+0xc0>
 800343e:	e014      	b.n	800346a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fe fa70 	bl	8001924 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003448:	f7fe fa6c 	bl	8001924 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	@ 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e1f3      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345a:	4b51      	ldr	r3, [pc, #324]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0xe8>
 8003466:	e000      	b.n	800346a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d063      	beq.n	800353e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003476:	4b4a      	ldr	r3, [pc, #296]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003482:	4b47      	ldr	r3, [pc, #284]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800348a:	2b08      	cmp	r3, #8
 800348c:	d11c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800348e:	4b44      	ldr	r3, [pc, #272]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d116      	bne.n	80034c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349a:	4b41      	ldr	r3, [pc, #260]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_RCC_OscConfig+0x152>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d001      	beq.n	80034b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e1c7      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b2:	4b3b      	ldr	r3, [pc, #236]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4937      	ldr	r1, [pc, #220]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c6:	e03a      	b.n	800353e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d020      	beq.n	8003512 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d0:	4b34      	ldr	r3, [pc, #208]	@ (80035a4 <HAL_RCC_OscConfig+0x244>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d6:	f7fe fa25 	bl	8001924 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034de:	f7fe fa21 	bl	8001924 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e1a8      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f0:	4b2b      	ldr	r3, [pc, #172]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fc:	4b28      	ldr	r3, [pc, #160]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	4925      	ldr	r1, [pc, #148]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]
 8003510:	e015      	b.n	800353e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003512:	4b24      	ldr	r3, [pc, #144]	@ (80035a4 <HAL_RCC_OscConfig+0x244>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fe fa04 	bl	8001924 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003520:	f7fe fa00 	bl	8001924 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e187      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003532:	4b1b      	ldr	r3, [pc, #108]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d036      	beq.n	80035b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d016      	beq.n	8003580 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003552:	4b15      	ldr	r3, [pc, #84]	@ (80035a8 <HAL_RCC_OscConfig+0x248>)
 8003554:	2201      	movs	r2, #1
 8003556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003558:	f7fe f9e4 	bl	8001924 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003560:	f7fe f9e0 	bl	8001924 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e167      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	4b0b      	ldr	r3, [pc, #44]	@ (80035a0 <HAL_RCC_OscConfig+0x240>)
 8003574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0x200>
 800357e:	e01b      	b.n	80035b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003580:	4b09      	ldr	r3, [pc, #36]	@ (80035a8 <HAL_RCC_OscConfig+0x248>)
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003586:	f7fe f9cd 	bl	8001924 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358c:	e00e      	b.n	80035ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800358e:	f7fe f9c9 	bl	8001924 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d907      	bls.n	80035ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e150      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
 80035a0:	40023800 	.word	0x40023800
 80035a4:	42470000 	.word	0x42470000
 80035a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ac:	4b88      	ldr	r3, [pc, #544]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80035ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1ea      	bne.n	800358e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8097 	beq.w	80036f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c6:	2300      	movs	r3, #0
 80035c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ca:	4b81      	ldr	r3, [pc, #516]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10f      	bne.n	80035f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	4b7d      	ldr	r3, [pc, #500]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	4a7c      	ldr	r2, [pc, #496]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80035e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80035e6:	4b7a      	ldr	r3, [pc, #488]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f2:	2301      	movs	r3, #1
 80035f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f6:	4b77      	ldr	r3, [pc, #476]	@ (80037d4 <HAL_RCC_OscConfig+0x474>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d118      	bne.n	8003634 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003602:	4b74      	ldr	r3, [pc, #464]	@ (80037d4 <HAL_RCC_OscConfig+0x474>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a73      	ldr	r2, [pc, #460]	@ (80037d4 <HAL_RCC_OscConfig+0x474>)
 8003608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800360c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360e:	f7fe f989 	bl	8001924 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003616:	f7fe f985 	bl	8001924 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e10c      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	4b6a      	ldr	r3, [pc, #424]	@ (80037d4 <HAL_RCC_OscConfig+0x474>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d106      	bne.n	800364a <HAL_RCC_OscConfig+0x2ea>
 800363c:	4b64      	ldr	r3, [pc, #400]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003640:	4a63      	ldr	r2, [pc, #396]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	6713      	str	r3, [r2, #112]	@ 0x70
 8003648:	e01c      	b.n	8003684 <HAL_RCC_OscConfig+0x324>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2b05      	cmp	r3, #5
 8003650:	d10c      	bne.n	800366c <HAL_RCC_OscConfig+0x30c>
 8003652:	4b5f      	ldr	r3, [pc, #380]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003656:	4a5e      	ldr	r2, [pc, #376]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 8003658:	f043 0304 	orr.w	r3, r3, #4
 800365c:	6713      	str	r3, [r2, #112]	@ 0x70
 800365e:	4b5c      	ldr	r3, [pc, #368]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003662:	4a5b      	ldr	r2, [pc, #364]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	6713      	str	r3, [r2, #112]	@ 0x70
 800366a:	e00b      	b.n	8003684 <HAL_RCC_OscConfig+0x324>
 800366c:	4b58      	ldr	r3, [pc, #352]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003670:	4a57      	ldr	r2, [pc, #348]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 8003672:	f023 0301 	bic.w	r3, r3, #1
 8003676:	6713      	str	r3, [r2, #112]	@ 0x70
 8003678:	4b55      	ldr	r3, [pc, #340]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 800367a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367c:	4a54      	ldr	r2, [pc, #336]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 800367e:	f023 0304 	bic.w	r3, r3, #4
 8003682:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d015      	beq.n	80036b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368c:	f7fe f94a 	bl	8001924 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003692:	e00a      	b.n	80036aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003694:	f7fe f946 	bl	8001924 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e0cb      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036aa:	4b49      	ldr	r3, [pc, #292]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0ee      	beq.n	8003694 <HAL_RCC_OscConfig+0x334>
 80036b6:	e014      	b.n	80036e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b8:	f7fe f934 	bl	8001924 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c0:	f7fe f930 	bl	8001924 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e0b5      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d6:	4b3e      	ldr	r3, [pc, #248]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1ee      	bne.n	80036c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036e2:	7dfb      	ldrb	r3, [r7, #23]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d105      	bne.n	80036f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e8:	4b39      	ldr	r3, [pc, #228]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80036ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ec:	4a38      	ldr	r2, [pc, #224]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80036ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80a1 	beq.w	8003840 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036fe:	4b34      	ldr	r3, [pc, #208]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b08      	cmp	r3, #8
 8003708:	d05c      	beq.n	80037c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d141      	bne.n	8003796 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003712:	4b31      	ldr	r3, [pc, #196]	@ (80037d8 <HAL_RCC_OscConfig+0x478>)
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fe f904 	bl	8001924 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003720:	f7fe f900 	bl	8001924 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e087      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003732:	4b27      	ldr	r3, [pc, #156]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	019b      	lsls	r3, r3, #6
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003754:	085b      	lsrs	r3, r3, #1
 8003756:	3b01      	subs	r3, #1
 8003758:	041b      	lsls	r3, r3, #16
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003760:	061b      	lsls	r3, r3, #24
 8003762:	491b      	ldr	r1, [pc, #108]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 8003764:	4313      	orrs	r3, r2
 8003766:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003768:	4b1b      	ldr	r3, [pc, #108]	@ (80037d8 <HAL_RCC_OscConfig+0x478>)
 800376a:	2201      	movs	r2, #1
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376e:	f7fe f8d9 	bl	8001924 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003776:	f7fe f8d5 	bl	8001924 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e05c      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003788:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x416>
 8003794:	e054      	b.n	8003840 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003796:	4b10      	ldr	r3, [pc, #64]	@ (80037d8 <HAL_RCC_OscConfig+0x478>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7fe f8c2 	bl	8001924 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a4:	f7fe f8be 	bl	8001924 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e045      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	4b06      	ldr	r3, [pc, #24]	@ (80037d0 <HAL_RCC_OscConfig+0x470>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x444>
 80037c2:	e03d      	b.n	8003840 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d107      	bne.n	80037dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e038      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40007000 	.word	0x40007000
 80037d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037dc:	4b1b      	ldr	r3, [pc, #108]	@ (800384c <HAL_RCC_OscConfig+0x4ec>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d028      	beq.n	800383c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d121      	bne.n	800383c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003802:	429a      	cmp	r2, r3
 8003804:	d11a      	bne.n	800383c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800380c:	4013      	ands	r3, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003812:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003814:	4293      	cmp	r3, r2
 8003816:	d111      	bne.n	800383c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	3b01      	subs	r3, #1
 8003826:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d107      	bne.n	800383c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003836:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d001      	beq.n	8003840 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40023800 	.word	0x40023800

08003850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0cc      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003864:	4b68      	ldr	r3, [pc, #416]	@ (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d90c      	bls.n	800388c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b65      	ldr	r3, [pc, #404]	@ (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b63      	ldr	r3, [pc, #396]	@ (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0b8      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d020      	beq.n	80038da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a4:	4b59      	ldr	r3, [pc, #356]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	4a58      	ldr	r2, [pc, #352]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038bc:	4b53      	ldr	r3, [pc, #332]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a52      	ldr	r2, [pc, #328]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c8:	4b50      	ldr	r3, [pc, #320]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	494d      	ldr	r1, [pc, #308]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d044      	beq.n	8003970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d107      	bne.n	80038fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ee:	4b47      	ldr	r3, [pc, #284]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d119      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e07f      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d003      	beq.n	800390e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800390a:	2b03      	cmp	r3, #3
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e06f      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e067      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392e:	4b37      	ldr	r3, [pc, #220]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f023 0203 	bic.w	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4934      	ldr	r1, [pc, #208]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	4313      	orrs	r3, r2
 800393e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003940:	f7fd fff0 	bl	8001924 <HAL_GetTick>
 8003944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	e00a      	b.n	800395e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003948:	f7fd ffec 	bl	8001924 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e04f      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	4b2b      	ldr	r3, [pc, #172]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 020c 	and.w	r2, r3, #12
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	429a      	cmp	r2, r3
 800396e:	d1eb      	bne.n	8003948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003970:	4b25      	ldr	r3, [pc, #148]	@ (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d20c      	bcs.n	8003998 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b22      	ldr	r3, [pc, #136]	@ (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003986:	4b20      	ldr	r3, [pc, #128]	@ (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e032      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a4:	4b19      	ldr	r3, [pc, #100]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4916      	ldr	r1, [pc, #88]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039c2:	4b12      	ldr	r3, [pc, #72]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	490e      	ldr	r1, [pc, #56]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039d6:	f000 f821 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 80039da:	4602      	mov	r2, r0
 80039dc:	4b0b      	ldr	r3, [pc, #44]	@ (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	490a      	ldr	r1, [pc, #40]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 80039e8:	5ccb      	ldrb	r3, [r1, r3]
 80039ea:	fa22 f303 	lsr.w	r3, r2, r3
 80039ee:	4a09      	ldr	r2, [pc, #36]	@ (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039f2:	4b09      	ldr	r3, [pc, #36]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fd ff50 	bl	800189c <HAL_InitTick>

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40023c00 	.word	0x40023c00
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	08005040 	.word	0x08005040
 8003a14:	20000000 	.word	0x20000000
 8003a18:	20000004 	.word	0x20000004

08003a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a20:	b094      	sub	sp, #80	@ 0x50
 8003a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a28:	2300      	movs	r3, #0
 8003a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a34:	4b79      	ldr	r3, [pc, #484]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 030c 	and.w	r3, r3, #12
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d00d      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0x40>
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	f200 80e1 	bhi.w	8003c08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0x34>
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d003      	beq.n	8003a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a4e:	e0db      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a50:	4b73      	ldr	r3, [pc, #460]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a52:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003a54:	e0db      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a56:	4b73      	ldr	r3, [pc, #460]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a5a:	e0d8      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a5c:	4b6f      	ldr	r3, [pc, #444]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a64:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a66:	4b6d      	ldr	r3, [pc, #436]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d063      	beq.n	8003b3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a72:	4b6a      	ldr	r3, [pc, #424]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	099b      	lsrs	r3, r3, #6
 8003a78:	2200      	movs	r2, #0
 8003a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a84:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a86:	2300      	movs	r3, #0
 8003a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a8e:	4622      	mov	r2, r4
 8003a90:	462b      	mov	r3, r5
 8003a92:	f04f 0000 	mov.w	r0, #0
 8003a96:	f04f 0100 	mov.w	r1, #0
 8003a9a:	0159      	lsls	r1, r3, #5
 8003a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa0:	0150      	lsls	r0, r2, #5
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	1a51      	subs	r1, r2, r1
 8003aaa:	6139      	str	r1, [r7, #16]
 8003aac:	4629      	mov	r1, r5
 8003aae:	eb63 0301 	sbc.w	r3, r3, r1
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ac0:	4659      	mov	r1, fp
 8003ac2:	018b      	lsls	r3, r1, #6
 8003ac4:	4651      	mov	r1, sl
 8003ac6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aca:	4651      	mov	r1, sl
 8003acc:	018a      	lsls	r2, r1, #6
 8003ace:	4651      	mov	r1, sl
 8003ad0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ad4:	4659      	mov	r1, fp
 8003ad6:	eb63 0901 	sbc.w	r9, r3, r1
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aee:	4690      	mov	r8, r2
 8003af0:	4699      	mov	r9, r3
 8003af2:	4623      	mov	r3, r4
 8003af4:	eb18 0303 	adds.w	r3, r8, r3
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	462b      	mov	r3, r5
 8003afc:	eb49 0303 	adc.w	r3, r9, r3
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b0e:	4629      	mov	r1, r5
 8003b10:	024b      	lsls	r3, r1, #9
 8003b12:	4621      	mov	r1, r4
 8003b14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b18:	4621      	mov	r1, r4
 8003b1a:	024a      	lsls	r2, r1, #9
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b22:	2200      	movs	r2, #0
 8003b24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b2c:	f7fd f81a 	bl	8000b64 <__aeabi_uldivmod>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4613      	mov	r3, r2
 8003b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b38:	e058      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3a:	4b38      	ldr	r3, [pc, #224]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	099b      	lsrs	r3, r3, #6
 8003b40:	2200      	movs	r2, #0
 8003b42:	4618      	mov	r0, r3
 8003b44:	4611      	mov	r1, r2
 8003b46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b4a:	623b      	str	r3, [r7, #32]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b54:	4642      	mov	r2, r8
 8003b56:	464b      	mov	r3, r9
 8003b58:	f04f 0000 	mov.w	r0, #0
 8003b5c:	f04f 0100 	mov.w	r1, #0
 8003b60:	0159      	lsls	r1, r3, #5
 8003b62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b66:	0150      	lsls	r0, r2, #5
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4641      	mov	r1, r8
 8003b6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b72:	4649      	mov	r1, r9
 8003b74:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b8c:	ebb2 040a 	subs.w	r4, r2, sl
 8003b90:	eb63 050b 	sbc.w	r5, r3, fp
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	00eb      	lsls	r3, r5, #3
 8003b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ba2:	00e2      	lsls	r2, r4, #3
 8003ba4:	4614      	mov	r4, r2
 8003ba6:	461d      	mov	r5, r3
 8003ba8:	4643      	mov	r3, r8
 8003baa:	18e3      	adds	r3, r4, r3
 8003bac:	603b      	str	r3, [r7, #0]
 8003bae:	464b      	mov	r3, r9
 8003bb0:	eb45 0303 	adc.w	r3, r5, r3
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	028b      	lsls	r3, r1, #10
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bcc:	4621      	mov	r1, r4
 8003bce:	028a      	lsls	r2, r1, #10
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	61fa      	str	r2, [r7, #28]
 8003bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be0:	f7fc ffc0 	bl	8000b64 <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4613      	mov	r3, r2
 8003bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bec:	4b0b      	ldr	r3, [pc, #44]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	0c1b      	lsrs	r3, r3, #16
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003bfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c06:	e002      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c08:	4b05      	ldr	r3, [pc, #20]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3750      	adds	r7, #80	@ 0x50
 8003c14:	46bd      	mov	sp, r7
 8003c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	00f42400 	.word	0x00f42400
 8003c24:	007a1200 	.word	0x007a1200

08003c28 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d105      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d035      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c50:	4b62      	ldr	r3, [pc, #392]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c56:	f7fd fe65 	bl	8001924 <HAL_GetTick>
 8003c5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c5e:	f7fd fe61 	bl	8001924 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e0b0      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c70:	4b5b      	ldr	r3, [pc, #364]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f0      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	019a      	lsls	r2, r3, #6
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	071b      	lsls	r3, r3, #28
 8003c88:	4955      	ldr	r1, [pc, #340]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c90:	4b52      	ldr	r3, [pc, #328]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c96:	f7fd fe45 	bl	8001924 <HAL_GetTick>
 8003c9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c9e:	f7fd fe41 	bl	8001924 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e090      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cb0:	4b4b      	ldr	r3, [pc, #300]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 8083 	beq.w	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	4b44      	ldr	r3, [pc, #272]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	4a43      	ldr	r2, [pc, #268]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cda:	4b41      	ldr	r3, [pc, #260]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ce6:	4b3f      	ldr	r3, [pc, #252]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a3e      	ldr	r2, [pc, #248]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cf0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003cf2:	f7fd fe17 	bl	8001924 <HAL_GetTick>
 8003cf6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003cfa:	f7fd fe13 	bl	8001924 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e062      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d0c:	4b35      	ldr	r3, [pc, #212]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d18:	4b31      	ldr	r3, [pc, #196]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d20:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d02f      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d028      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d36:	4b2a      	ldr	r3, [pc, #168]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d3e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d40:	4b29      	ldr	r3, [pc, #164]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d46:	4b28      	ldr	r3, [pc, #160]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d4c:	4a24      	ldr	r2, [pc, #144]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d52:	4b23      	ldr	r3, [pc, #140]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d114      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d5e:	f7fd fde1 	bl	8001924 <HAL_GetTick>
 8003d62:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d64:	e00a      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d66:	f7fd fddd 	bl	8001924 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e02a      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7c:	4b18      	ldr	r3, [pc, #96]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0ee      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d94:	d10d      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003d96:	4b12      	ldr	r3, [pc, #72]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003da6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003daa:	490d      	ldr	r1, [pc, #52]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	608b      	str	r3, [r1, #8]
 8003db0:	e005      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003db2:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	4a0a      	ldr	r2, [pc, #40]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003db8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003dbc:	6093      	str	r3, [r2, #8]
 8003dbe:	4b08      	ldr	r3, [pc, #32]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dc0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dca:	4905      	ldr	r1, [pc, #20]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	42470068 	.word	0x42470068
 8003de0:	40023800 	.word	0x40023800
 8003de4:	40007000 	.word	0x40007000
 8003de8:	42470e40 	.word	0x42470e40

08003dec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d13f      	bne.n	8003e8a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003e0a:	4b24      	ldr	r3, [pc, #144]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d006      	beq.n	8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e20:	d12f      	bne.n	8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e22:	4b1f      	ldr	r3, [pc, #124]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003e24:	617b      	str	r3, [r7, #20]
          break;
 8003e26:	e02f      	b.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e28:	4b1c      	ldr	r3, [pc, #112]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e34:	d108      	bne.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e36:	4b19      	ldr	r3, [pc, #100]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e3e:	4a19      	ldr	r2, [pc, #100]	@ (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	e007      	b.n	8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e48:	4b14      	ldr	r3, [pc, #80]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e50:	4a15      	ldr	r2, [pc, #84]	@ (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003e58:	4b10      	ldr	r3, [pc, #64]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e5e:	099b      	lsrs	r3, r3, #6
 8003e60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	fb02 f303 	mul.w	r3, r2, r3
 8003e6a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e72:	0f1b      	lsrs	r3, r3, #28
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7e:	617b      	str	r3, [r7, #20]
          break;
 8003e80:	e002      	b.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
          break;
 8003e86:	bf00      	nop
        }
      }
      break;
 8003e88:	e000      	b.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8003e8a:	bf00      	nop
    }
  }
  return frequency;
 8003e8c:	697b      	ldr	r3, [r7, #20]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	00bb8000 	.word	0x00bb8000
 8003ea4:	007a1200 	.word	0x007a1200
 8003ea8:	00f42400 	.word	0x00f42400

08003eac <memset>:
 8003eac:	4402      	add	r2, r0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d100      	bne.n	8003eb6 <memset+0xa>
 8003eb4:	4770      	bx	lr
 8003eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eba:	e7f9      	b.n	8003eb0 <memset+0x4>

08003ebc <__libc_init_array>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	4d0d      	ldr	r5, [pc, #52]	@ (8003ef4 <__libc_init_array+0x38>)
 8003ec0:	4c0d      	ldr	r4, [pc, #52]	@ (8003ef8 <__libc_init_array+0x3c>)
 8003ec2:	1b64      	subs	r4, r4, r5
 8003ec4:	10a4      	asrs	r4, r4, #2
 8003ec6:	2600      	movs	r6, #0
 8003ec8:	42a6      	cmp	r6, r4
 8003eca:	d109      	bne.n	8003ee0 <__libc_init_array+0x24>
 8003ecc:	4d0b      	ldr	r5, [pc, #44]	@ (8003efc <__libc_init_array+0x40>)
 8003ece:	4c0c      	ldr	r4, [pc, #48]	@ (8003f00 <__libc_init_array+0x44>)
 8003ed0:	f001 f8aa 	bl	8005028 <_init>
 8003ed4:	1b64      	subs	r4, r4, r5
 8003ed6:	10a4      	asrs	r4, r4, #2
 8003ed8:	2600      	movs	r6, #0
 8003eda:	42a6      	cmp	r6, r4
 8003edc:	d105      	bne.n	8003eea <__libc_init_array+0x2e>
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
 8003ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee4:	4798      	blx	r3
 8003ee6:	3601      	adds	r6, #1
 8003ee8:	e7ee      	b.n	8003ec8 <__libc_init_array+0xc>
 8003eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eee:	4798      	blx	r3
 8003ef0:	3601      	adds	r6, #1
 8003ef2:	e7f2      	b.n	8003eda <__libc_init_array+0x1e>
 8003ef4:	08005238 	.word	0x08005238
 8003ef8:	08005238 	.word	0x08005238
 8003efc:	08005238 	.word	0x08005238
 8003f00:	0800523c 	.word	0x0800523c
 8003f04:	00000000 	.word	0x00000000

08003f08 <tan>:
 8003f08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f0a:	ec53 2b10 	vmov	r2, r3, d0
 8003f0e:	4816      	ldr	r0, [pc, #88]	@ (8003f68 <tan+0x60>)
 8003f10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003f14:	4281      	cmp	r1, r0
 8003f16:	d807      	bhi.n	8003f28 <tan+0x20>
 8003f18:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8003f60 <tan+0x58>
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	b005      	add	sp, #20
 8003f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f24:	f000 b824 	b.w	8003f70 <__kernel_tan>
 8003f28:	4810      	ldr	r0, [pc, #64]	@ (8003f6c <tan+0x64>)
 8003f2a:	4281      	cmp	r1, r0
 8003f2c:	d908      	bls.n	8003f40 <tan+0x38>
 8003f2e:	4610      	mov	r0, r2
 8003f30:	4619      	mov	r1, r3
 8003f32:	f7fc f94d 	bl	80001d0 <__aeabi_dsub>
 8003f36:	ec41 0b10 	vmov	d0, r0, r1
 8003f3a:	b005      	add	sp, #20
 8003f3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f40:	4668      	mov	r0, sp
 8003f42:	f000 fa19 	bl	8004378 <__ieee754_rem_pio2>
 8003f46:	0040      	lsls	r0, r0, #1
 8003f48:	f000 0002 	and.w	r0, r0, #2
 8003f4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003f50:	ed9d 0b00 	vldr	d0, [sp]
 8003f54:	f1c0 0001 	rsb	r0, r0, #1
 8003f58:	f000 f80a 	bl	8003f70 <__kernel_tan>
 8003f5c:	e7ed      	b.n	8003f3a <tan+0x32>
 8003f5e:	bf00      	nop
	...
 8003f68:	3fe921fb 	.word	0x3fe921fb
 8003f6c:	7fefffff 	.word	0x7fefffff

08003f70 <__kernel_tan>:
 8003f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f74:	ec5b ab10 	vmov	sl, fp, d0
 8003f78:	4bdb      	ldr	r3, [pc, #876]	@ (80042e8 <__kernel_tan+0x378>)
 8003f7a:	b089      	sub	sp, #36	@ 0x24
 8003f7c:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 8003f80:	429f      	cmp	r7, r3
 8003f82:	ec59 8b11 	vmov	r8, r9, d1
 8003f86:	4606      	mov	r6, r0
 8003f88:	f8cd b008 	str.w	fp, [sp, #8]
 8003f8c:	d85d      	bhi.n	800404a <__kernel_tan+0xda>
 8003f8e:	4650      	mov	r0, sl
 8003f90:	4659      	mov	r1, fp
 8003f92:	f7fc fd6f 	bl	8000a74 <__aeabi_d2iz>
 8003f96:	4605      	mov	r5, r0
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	d17c      	bne.n	8004096 <__kernel_tan+0x126>
 8003f9c:	1c73      	adds	r3, r6, #1
 8003f9e:	4652      	mov	r2, sl
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	433b      	orrs	r3, r7
 8003fa4:	d110      	bne.n	8003fc8 <__kernel_tan+0x58>
 8003fa6:	ec4b ab10 	vmov	d0, sl, fp
 8003faa:	f000 fbe1 	bl	8004770 <fabs>
 8003fae:	49cf      	ldr	r1, [pc, #828]	@ (80042ec <__kernel_tan+0x37c>)
 8003fb0:	ec53 2b10 	vmov	r2, r3, d0
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	f7fc fbed 	bl	8000794 <__aeabi_ddiv>
 8003fba:	4682      	mov	sl, r0
 8003fbc:	468b      	mov	fp, r1
 8003fbe:	ec4b ab10 	vmov	d0, sl, fp
 8003fc2:	b009      	add	sp, #36	@ 0x24
 8003fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc8:	2e01      	cmp	r6, #1
 8003fca:	d0f8      	beq.n	8003fbe <__kernel_tan+0x4e>
 8003fcc:	4642      	mov	r2, r8
 8003fce:	464b      	mov	r3, r9
 8003fd0:	4650      	mov	r0, sl
 8003fd2:	4659      	mov	r1, fp
 8003fd4:	f7fc f8fe 	bl	80001d4 <__adddf3>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	460f      	mov	r7, r1
 8003fde:	2000      	movs	r0, #0
 8003fe0:	49c3      	ldr	r1, [pc, #780]	@ (80042f0 <__kernel_tan+0x380>)
 8003fe2:	f7fc fbd7 	bl	8000794 <__aeabi_ddiv>
 8003fe6:	e9cd 0100 	strd	r0, r1, [sp]
 8003fea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003fee:	462e      	mov	r6, r5
 8003ff0:	4652      	mov	r2, sl
 8003ff2:	462c      	mov	r4, r5
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	461d      	mov	r5, r3
 8003ff8:	4639      	mov	r1, r7
 8003ffa:	465b      	mov	r3, fp
 8003ffc:	f7fc f8e8 	bl	80001d0 <__aeabi_dsub>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4640      	mov	r0, r8
 8004006:	4649      	mov	r1, r9
 8004008:	f7fc f8e2 	bl	80001d0 <__aeabi_dsub>
 800400c:	4632      	mov	r2, r6
 800400e:	462b      	mov	r3, r5
 8004010:	f7fc fa96 	bl	8000540 <__aeabi_dmul>
 8004014:	4632      	mov	r2, r6
 8004016:	4682      	mov	sl, r0
 8004018:	468b      	mov	fp, r1
 800401a:	462b      	mov	r3, r5
 800401c:	4630      	mov	r0, r6
 800401e:	4639      	mov	r1, r7
 8004020:	f7fc fa8e 	bl	8000540 <__aeabi_dmul>
 8004024:	4bb1      	ldr	r3, [pc, #708]	@ (80042ec <__kernel_tan+0x37c>)
 8004026:	2200      	movs	r2, #0
 8004028:	f7fc f8d4 	bl	80001d4 <__adddf3>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4650      	mov	r0, sl
 8004032:	4659      	mov	r1, fp
 8004034:	f7fc f8ce 	bl	80001d4 <__adddf3>
 8004038:	e9dd 2300 	ldrd	r2, r3, [sp]
 800403c:	f7fc fa80 	bl	8000540 <__aeabi_dmul>
 8004040:	4622      	mov	r2, r4
 8004042:	462b      	mov	r3, r5
 8004044:	f7fc f8c6 	bl	80001d4 <__adddf3>
 8004048:	e7b7      	b.n	8003fba <__kernel_tan+0x4a>
 800404a:	4baa      	ldr	r3, [pc, #680]	@ (80042f4 <__kernel_tan+0x384>)
 800404c:	429f      	cmp	r7, r3
 800404e:	d922      	bls.n	8004096 <__kernel_tan+0x126>
 8004050:	9b02      	ldr	r3, [sp, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	da05      	bge.n	8004062 <__kernel_tan+0xf2>
 8004056:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800405a:	469b      	mov	fp, r3
 800405c:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004060:	4699      	mov	r9, r3
 8004062:	4652      	mov	r2, sl
 8004064:	465b      	mov	r3, fp
 8004066:	a182      	add	r1, pc, #520	@ (adr r1, 8004270 <__kernel_tan+0x300>)
 8004068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800406c:	f7fc f8b0 	bl	80001d0 <__aeabi_dsub>
 8004070:	4642      	mov	r2, r8
 8004072:	464b      	mov	r3, r9
 8004074:	4604      	mov	r4, r0
 8004076:	460d      	mov	r5, r1
 8004078:	a17f      	add	r1, pc, #508	@ (adr r1, 8004278 <__kernel_tan+0x308>)
 800407a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800407e:	f7fc f8a7 	bl	80001d0 <__aeabi_dsub>
 8004082:	4622      	mov	r2, r4
 8004084:	462b      	mov	r3, r5
 8004086:	f7fc f8a5 	bl	80001d4 <__adddf3>
 800408a:	f04f 0800 	mov.w	r8, #0
 800408e:	4682      	mov	sl, r0
 8004090:	468b      	mov	fp, r1
 8004092:	f04f 0900 	mov.w	r9, #0
 8004096:	4652      	mov	r2, sl
 8004098:	465b      	mov	r3, fp
 800409a:	4650      	mov	r0, sl
 800409c:	4659      	mov	r1, fp
 800409e:	f7fc fa4f 	bl	8000540 <__aeabi_dmul>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	e9cd 2300 	strd	r2, r3, [sp]
 80040aa:	f7fc fa49 	bl	8000540 <__aeabi_dmul>
 80040ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80040b2:	4604      	mov	r4, r0
 80040b4:	460d      	mov	r5, r1
 80040b6:	4650      	mov	r0, sl
 80040b8:	4659      	mov	r1, fp
 80040ba:	f7fc fa41 	bl	8000540 <__aeabi_dmul>
 80040be:	a370      	add	r3, pc, #448	@ (adr r3, 8004280 <__kernel_tan+0x310>)
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040c8:	4620      	mov	r0, r4
 80040ca:	4629      	mov	r1, r5
 80040cc:	f7fc fa38 	bl	8000540 <__aeabi_dmul>
 80040d0:	a36d      	add	r3, pc, #436	@ (adr r3, 8004288 <__kernel_tan+0x318>)
 80040d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d6:	f7fc f87d 	bl	80001d4 <__adddf3>
 80040da:	4622      	mov	r2, r4
 80040dc:	462b      	mov	r3, r5
 80040de:	f7fc fa2f 	bl	8000540 <__aeabi_dmul>
 80040e2:	a36b      	add	r3, pc, #428	@ (adr r3, 8004290 <__kernel_tan+0x320>)
 80040e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e8:	f7fc f874 	bl	80001d4 <__adddf3>
 80040ec:	4622      	mov	r2, r4
 80040ee:	462b      	mov	r3, r5
 80040f0:	f7fc fa26 	bl	8000540 <__aeabi_dmul>
 80040f4:	a368      	add	r3, pc, #416	@ (adr r3, 8004298 <__kernel_tan+0x328>)
 80040f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fa:	f7fc f86b 	bl	80001d4 <__adddf3>
 80040fe:	4622      	mov	r2, r4
 8004100:	462b      	mov	r3, r5
 8004102:	f7fc fa1d 	bl	8000540 <__aeabi_dmul>
 8004106:	a366      	add	r3, pc, #408	@ (adr r3, 80042a0 <__kernel_tan+0x330>)
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f7fc f862 	bl	80001d4 <__adddf3>
 8004110:	4622      	mov	r2, r4
 8004112:	462b      	mov	r3, r5
 8004114:	f7fc fa14 	bl	8000540 <__aeabi_dmul>
 8004118:	a363      	add	r3, pc, #396	@ (adr r3, 80042a8 <__kernel_tan+0x338>)
 800411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411e:	f7fc f859 	bl	80001d4 <__adddf3>
 8004122:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004126:	f7fc fa0b 	bl	8000540 <__aeabi_dmul>
 800412a:	a361      	add	r3, pc, #388	@ (adr r3, 80042b0 <__kernel_tan+0x340>)
 800412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004130:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004134:	4620      	mov	r0, r4
 8004136:	4629      	mov	r1, r5
 8004138:	f7fc fa02 	bl	8000540 <__aeabi_dmul>
 800413c:	a35e      	add	r3, pc, #376	@ (adr r3, 80042b8 <__kernel_tan+0x348>)
 800413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004142:	f7fc f847 	bl	80001d4 <__adddf3>
 8004146:	4622      	mov	r2, r4
 8004148:	462b      	mov	r3, r5
 800414a:	f7fc f9f9 	bl	8000540 <__aeabi_dmul>
 800414e:	a35c      	add	r3, pc, #368	@ (adr r3, 80042c0 <__kernel_tan+0x350>)
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	f7fc f83e 	bl	80001d4 <__adddf3>
 8004158:	4622      	mov	r2, r4
 800415a:	462b      	mov	r3, r5
 800415c:	f7fc f9f0 	bl	8000540 <__aeabi_dmul>
 8004160:	a359      	add	r3, pc, #356	@ (adr r3, 80042c8 <__kernel_tan+0x358>)
 8004162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004166:	f7fc f835 	bl	80001d4 <__adddf3>
 800416a:	4622      	mov	r2, r4
 800416c:	462b      	mov	r3, r5
 800416e:	f7fc f9e7 	bl	8000540 <__aeabi_dmul>
 8004172:	a357      	add	r3, pc, #348	@ (adr r3, 80042d0 <__kernel_tan+0x360>)
 8004174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004178:	f7fc f82c 	bl	80001d4 <__adddf3>
 800417c:	4622      	mov	r2, r4
 800417e:	462b      	mov	r3, r5
 8004180:	f7fc f9de 	bl	8000540 <__aeabi_dmul>
 8004184:	a354      	add	r3, pc, #336	@ (adr r3, 80042d8 <__kernel_tan+0x368>)
 8004186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418a:	f7fc f823 	bl	80001d4 <__adddf3>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004196:	f7fc f81d 	bl	80001d4 <__adddf3>
 800419a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800419e:	f7fc f9cf 	bl	8000540 <__aeabi_dmul>
 80041a2:	4642      	mov	r2, r8
 80041a4:	464b      	mov	r3, r9
 80041a6:	f7fc f815 	bl	80001d4 <__adddf3>
 80041aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041ae:	f7fc f9c7 	bl	8000540 <__aeabi_dmul>
 80041b2:	4642      	mov	r2, r8
 80041b4:	464b      	mov	r3, r9
 80041b6:	f7fc f80d 	bl	80001d4 <__adddf3>
 80041ba:	a349      	add	r3, pc, #292	@ (adr r3, 80042e0 <__kernel_tan+0x370>)
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	4604      	mov	r4, r0
 80041c2:	460d      	mov	r5, r1
 80041c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041c8:	f7fc f9ba 	bl	8000540 <__aeabi_dmul>
 80041cc:	4622      	mov	r2, r4
 80041ce:	462b      	mov	r3, r5
 80041d0:	f7fc f800 	bl	80001d4 <__adddf3>
 80041d4:	e9cd 0100 	strd	r0, r1, [sp]
 80041d8:	460b      	mov	r3, r1
 80041da:	4602      	mov	r2, r0
 80041dc:	4659      	mov	r1, fp
 80041de:	4650      	mov	r0, sl
 80041e0:	f7fb fff8 	bl	80001d4 <__adddf3>
 80041e4:	4b43      	ldr	r3, [pc, #268]	@ (80042f4 <__kernel_tan+0x384>)
 80041e6:	429f      	cmp	r7, r3
 80041e8:	4604      	mov	r4, r0
 80041ea:	460d      	mov	r5, r1
 80041ec:	f240 8084 	bls.w	80042f8 <__kernel_tan+0x388>
 80041f0:	4630      	mov	r0, r6
 80041f2:	f7fc f93b 	bl	800046c <__aeabi_i2d>
 80041f6:	4622      	mov	r2, r4
 80041f8:	4680      	mov	r8, r0
 80041fa:	4689      	mov	r9, r1
 80041fc:	462b      	mov	r3, r5
 80041fe:	4620      	mov	r0, r4
 8004200:	4629      	mov	r1, r5
 8004202:	f7fc f99d 	bl	8000540 <__aeabi_dmul>
 8004206:	4642      	mov	r2, r8
 8004208:	4606      	mov	r6, r0
 800420a:	460f      	mov	r7, r1
 800420c:	464b      	mov	r3, r9
 800420e:	4620      	mov	r0, r4
 8004210:	4629      	mov	r1, r5
 8004212:	f7fb ffdf 	bl	80001d4 <__adddf3>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4630      	mov	r0, r6
 800421c:	4639      	mov	r1, r7
 800421e:	f7fc fab9 	bl	8000794 <__aeabi_ddiv>
 8004222:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004226:	f7fb ffd3 	bl	80001d0 <__aeabi_dsub>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4650      	mov	r0, sl
 8004230:	4659      	mov	r1, fp
 8004232:	f7fb ffcd 	bl	80001d0 <__aeabi_dsub>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	f7fb ffcb 	bl	80001d4 <__adddf3>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4640      	mov	r0, r8
 8004244:	4649      	mov	r1, r9
 8004246:	f7fb ffc3 	bl	80001d0 <__aeabi_dsub>
 800424a:	9b02      	ldr	r3, [sp, #8]
 800424c:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8004250:	f00a 0a02 	and.w	sl, sl, #2
 8004254:	4604      	mov	r4, r0
 8004256:	f1ca 0001 	rsb	r0, sl, #1
 800425a:	460d      	mov	r5, r1
 800425c:	f7fc f906 	bl	800046c <__aeabi_i2d>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4620      	mov	r0, r4
 8004266:	4629      	mov	r1, r5
 8004268:	f7fc f96a 	bl	8000540 <__aeabi_dmul>
 800426c:	e6a5      	b.n	8003fba <__kernel_tan+0x4a>
 800426e:	bf00      	nop
 8004270:	54442d18 	.word	0x54442d18
 8004274:	3fe921fb 	.word	0x3fe921fb
 8004278:	33145c07 	.word	0x33145c07
 800427c:	3c81a626 	.word	0x3c81a626
 8004280:	74bf7ad4 	.word	0x74bf7ad4
 8004284:	3efb2a70 	.word	0x3efb2a70
 8004288:	32f0a7e9 	.word	0x32f0a7e9
 800428c:	3f12b80f 	.word	0x3f12b80f
 8004290:	1a8d1068 	.word	0x1a8d1068
 8004294:	3f3026f7 	.word	0x3f3026f7
 8004298:	fee08315 	.word	0xfee08315
 800429c:	3f57dbc8 	.word	0x3f57dbc8
 80042a0:	e96e8493 	.word	0xe96e8493
 80042a4:	3f8226e3 	.word	0x3f8226e3
 80042a8:	1bb341fe 	.word	0x1bb341fe
 80042ac:	3faba1ba 	.word	0x3faba1ba
 80042b0:	db605373 	.word	0xdb605373
 80042b4:	bef375cb 	.word	0xbef375cb
 80042b8:	a03792a6 	.word	0xa03792a6
 80042bc:	3f147e88 	.word	0x3f147e88
 80042c0:	f2f26501 	.word	0xf2f26501
 80042c4:	3f4344d8 	.word	0x3f4344d8
 80042c8:	c9560328 	.word	0xc9560328
 80042cc:	3f6d6d22 	.word	0x3f6d6d22
 80042d0:	8406d637 	.word	0x8406d637
 80042d4:	3f9664f4 	.word	0x3f9664f4
 80042d8:	1110fe7a 	.word	0x1110fe7a
 80042dc:	3fc11111 	.word	0x3fc11111
 80042e0:	55555563 	.word	0x55555563
 80042e4:	3fd55555 	.word	0x3fd55555
 80042e8:	3e2fffff 	.word	0x3e2fffff
 80042ec:	3ff00000 	.word	0x3ff00000
 80042f0:	bff00000 	.word	0xbff00000
 80042f4:	3fe59427 	.word	0x3fe59427
 80042f8:	2e01      	cmp	r6, #1
 80042fa:	d033      	beq.n	8004364 <__kernel_tan+0x3f4>
 80042fc:	f04f 0800 	mov.w	r8, #0
 8004300:	4689      	mov	r9, r1
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	2000      	movs	r0, #0
 8004308:	4918      	ldr	r1, [pc, #96]	@ (800436c <__kernel_tan+0x3fc>)
 800430a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800430e:	f7fc fa41 	bl	8000794 <__aeabi_ddiv>
 8004312:	4652      	mov	r2, sl
 8004314:	460f      	mov	r7, r1
 8004316:	465b      	mov	r3, fp
 8004318:	4606      	mov	r6, r0
 800431a:	460d      	mov	r5, r1
 800431c:	4640      	mov	r0, r8
 800431e:	4649      	mov	r1, r9
 8004320:	f7fb ff56 	bl	80001d0 <__aeabi_dsub>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	e9dd 0100 	ldrd	r0, r1, [sp]
 800432c:	f7fb ff50 	bl	80001d0 <__aeabi_dsub>
 8004330:	4642      	mov	r2, r8
 8004332:	463b      	mov	r3, r7
 8004334:	f7fc f904 	bl	8000540 <__aeabi_dmul>
 8004338:	4642      	mov	r2, r8
 800433a:	4682      	mov	sl, r0
 800433c:	468b      	mov	fp, r1
 800433e:	463b      	mov	r3, r7
 8004340:	4640      	mov	r0, r8
 8004342:	4649      	mov	r1, r9
 8004344:	f7fc f8fc 	bl	8000540 <__aeabi_dmul>
 8004348:	4b09      	ldr	r3, [pc, #36]	@ (8004370 <__kernel_tan+0x400>)
 800434a:	2200      	movs	r2, #0
 800434c:	f7fb ff42 	bl	80001d4 <__adddf3>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4650      	mov	r0, sl
 8004356:	4659      	mov	r1, fp
 8004358:	f7fb ff3c 	bl	80001d4 <__adddf3>
 800435c:	4644      	mov	r4, r8
 800435e:	4632      	mov	r2, r6
 8004360:	463b      	mov	r3, r7
 8004362:	e66b      	b.n	800403c <__kernel_tan+0xcc>
 8004364:	4682      	mov	sl, r0
 8004366:	468b      	mov	fp, r1
 8004368:	e629      	b.n	8003fbe <__kernel_tan+0x4e>
 800436a:	bf00      	nop
 800436c:	bff00000 	.word	0xbff00000
 8004370:	3ff00000 	.word	0x3ff00000
 8004374:	00000000 	.word	0x00000000

08004378 <__ieee754_rem_pio2>:
 8004378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437c:	ec57 6b10 	vmov	r6, r7, d0
 8004380:	4bc5      	ldr	r3, [pc, #788]	@ (8004698 <__ieee754_rem_pio2+0x320>)
 8004382:	b08d      	sub	sp, #52	@ 0x34
 8004384:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004388:	4598      	cmp	r8, r3
 800438a:	4604      	mov	r4, r0
 800438c:	9704      	str	r7, [sp, #16]
 800438e:	d807      	bhi.n	80043a0 <__ieee754_rem_pio2+0x28>
 8004390:	2200      	movs	r2, #0
 8004392:	2300      	movs	r3, #0
 8004394:	ed80 0b00 	vstr	d0, [r0]
 8004398:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800439c:	2500      	movs	r5, #0
 800439e:	e028      	b.n	80043f2 <__ieee754_rem_pio2+0x7a>
 80043a0:	4bbe      	ldr	r3, [pc, #760]	@ (800469c <__ieee754_rem_pio2+0x324>)
 80043a2:	4598      	cmp	r8, r3
 80043a4:	d878      	bhi.n	8004498 <__ieee754_rem_pio2+0x120>
 80043a6:	9b04      	ldr	r3, [sp, #16]
 80043a8:	4dbd      	ldr	r5, [pc, #756]	@ (80046a0 <__ieee754_rem_pio2+0x328>)
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	4630      	mov	r0, r6
 80043ae:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004660 <__ieee754_rem_pio2+0x2e8>)
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	4639      	mov	r1, r7
 80043b6:	dd38      	ble.n	800442a <__ieee754_rem_pio2+0xb2>
 80043b8:	f7fb ff0a 	bl	80001d0 <__aeabi_dsub>
 80043bc:	45a8      	cmp	r8, r5
 80043be:	4606      	mov	r6, r0
 80043c0:	460f      	mov	r7, r1
 80043c2:	d01a      	beq.n	80043fa <__ieee754_rem_pio2+0x82>
 80043c4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8004668 <__ieee754_rem_pio2+0x2f0>)
 80043c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ca:	f7fb ff01 	bl	80001d0 <__aeabi_dsub>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4680      	mov	r8, r0
 80043d4:	4689      	mov	r9, r1
 80043d6:	4630      	mov	r0, r6
 80043d8:	4639      	mov	r1, r7
 80043da:	f7fb fef9 	bl	80001d0 <__aeabi_dsub>
 80043de:	a3a2      	add	r3, pc, #648	@ (adr r3, 8004668 <__ieee754_rem_pio2+0x2f0>)
 80043e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e4:	f7fb fef4 	bl	80001d0 <__aeabi_dsub>
 80043e8:	e9c4 8900 	strd	r8, r9, [r4]
 80043ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80043f0:	2501      	movs	r5, #1
 80043f2:	4628      	mov	r0, r5
 80043f4:	b00d      	add	sp, #52	@ 0x34
 80043f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043fa:	a39d      	add	r3, pc, #628	@ (adr r3, 8004670 <__ieee754_rem_pio2+0x2f8>)
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	f7fb fee6 	bl	80001d0 <__aeabi_dsub>
 8004404:	a39c      	add	r3, pc, #624	@ (adr r3, 8004678 <__ieee754_rem_pio2+0x300>)
 8004406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440a:	4606      	mov	r6, r0
 800440c:	460f      	mov	r7, r1
 800440e:	f7fb fedf 	bl	80001d0 <__aeabi_dsub>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4680      	mov	r8, r0
 8004418:	4689      	mov	r9, r1
 800441a:	4630      	mov	r0, r6
 800441c:	4639      	mov	r1, r7
 800441e:	f7fb fed7 	bl	80001d0 <__aeabi_dsub>
 8004422:	a395      	add	r3, pc, #596	@ (adr r3, 8004678 <__ieee754_rem_pio2+0x300>)
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	e7dc      	b.n	80043e4 <__ieee754_rem_pio2+0x6c>
 800442a:	f7fb fed3 	bl	80001d4 <__adddf3>
 800442e:	45a8      	cmp	r8, r5
 8004430:	4606      	mov	r6, r0
 8004432:	460f      	mov	r7, r1
 8004434:	d018      	beq.n	8004468 <__ieee754_rem_pio2+0xf0>
 8004436:	a38c      	add	r3, pc, #560	@ (adr r3, 8004668 <__ieee754_rem_pio2+0x2f0>)
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f7fb feca 	bl	80001d4 <__adddf3>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4680      	mov	r8, r0
 8004446:	4689      	mov	r9, r1
 8004448:	4630      	mov	r0, r6
 800444a:	4639      	mov	r1, r7
 800444c:	f7fb fec0 	bl	80001d0 <__aeabi_dsub>
 8004450:	a385      	add	r3, pc, #532	@ (adr r3, 8004668 <__ieee754_rem_pio2+0x2f0>)
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	f7fb febd 	bl	80001d4 <__adddf3>
 800445a:	f04f 35ff 	mov.w	r5, #4294967295
 800445e:	e9c4 8900 	strd	r8, r9, [r4]
 8004462:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004466:	e7c4      	b.n	80043f2 <__ieee754_rem_pio2+0x7a>
 8004468:	a381      	add	r3, pc, #516	@ (adr r3, 8004670 <__ieee754_rem_pio2+0x2f8>)
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	f7fb feb1 	bl	80001d4 <__adddf3>
 8004472:	a381      	add	r3, pc, #516	@ (adr r3, 8004678 <__ieee754_rem_pio2+0x300>)
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	4606      	mov	r6, r0
 800447a:	460f      	mov	r7, r1
 800447c:	f7fb feaa 	bl	80001d4 <__adddf3>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4680      	mov	r8, r0
 8004486:	4689      	mov	r9, r1
 8004488:	4630      	mov	r0, r6
 800448a:	4639      	mov	r1, r7
 800448c:	f7fb fea0 	bl	80001d0 <__aeabi_dsub>
 8004490:	a379      	add	r3, pc, #484	@ (adr r3, 8004678 <__ieee754_rem_pio2+0x300>)
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	e7de      	b.n	8004456 <__ieee754_rem_pio2+0xde>
 8004498:	4b82      	ldr	r3, [pc, #520]	@ (80046a4 <__ieee754_rem_pio2+0x32c>)
 800449a:	4598      	cmp	r8, r3
 800449c:	f200 80d1 	bhi.w	8004642 <__ieee754_rem_pio2+0x2ca>
 80044a0:	f000 f966 	bl	8004770 <fabs>
 80044a4:	ec57 6b10 	vmov	r6, r7, d0
 80044a8:	a375      	add	r3, pc, #468	@ (adr r3, 8004680 <__ieee754_rem_pio2+0x308>)
 80044aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ae:	4630      	mov	r0, r6
 80044b0:	4639      	mov	r1, r7
 80044b2:	f7fc f845 	bl	8000540 <__aeabi_dmul>
 80044b6:	4b7c      	ldr	r3, [pc, #496]	@ (80046a8 <__ieee754_rem_pio2+0x330>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	f7fb fe8b 	bl	80001d4 <__adddf3>
 80044be:	f7fc fad9 	bl	8000a74 <__aeabi_d2iz>
 80044c2:	4605      	mov	r5, r0
 80044c4:	f7fb ffd2 	bl	800046c <__aeabi_i2d>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044d0:	a363      	add	r3, pc, #396	@ (adr r3, 8004660 <__ieee754_rem_pio2+0x2e8>)
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f7fc f833 	bl	8000540 <__aeabi_dmul>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4630      	mov	r0, r6
 80044e0:	4639      	mov	r1, r7
 80044e2:	f7fb fe75 	bl	80001d0 <__aeabi_dsub>
 80044e6:	a360      	add	r3, pc, #384	@ (adr r3, 8004668 <__ieee754_rem_pio2+0x2f0>)
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	4682      	mov	sl, r0
 80044ee:	468b      	mov	fp, r1
 80044f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044f4:	f7fc f824 	bl	8000540 <__aeabi_dmul>
 80044f8:	2d1f      	cmp	r5, #31
 80044fa:	4606      	mov	r6, r0
 80044fc:	460f      	mov	r7, r1
 80044fe:	dc0c      	bgt.n	800451a <__ieee754_rem_pio2+0x1a2>
 8004500:	4b6a      	ldr	r3, [pc, #424]	@ (80046ac <__ieee754_rem_pio2+0x334>)
 8004502:	1e6a      	subs	r2, r5, #1
 8004504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004508:	4543      	cmp	r3, r8
 800450a:	d006      	beq.n	800451a <__ieee754_rem_pio2+0x1a2>
 800450c:	4632      	mov	r2, r6
 800450e:	463b      	mov	r3, r7
 8004510:	4650      	mov	r0, sl
 8004512:	4659      	mov	r1, fp
 8004514:	f7fb fe5c 	bl	80001d0 <__aeabi_dsub>
 8004518:	e00e      	b.n	8004538 <__ieee754_rem_pio2+0x1c0>
 800451a:	463b      	mov	r3, r7
 800451c:	4632      	mov	r2, r6
 800451e:	4650      	mov	r0, sl
 8004520:	4659      	mov	r1, fp
 8004522:	f7fb fe55 	bl	80001d0 <__aeabi_dsub>
 8004526:	ea4f 5328 	mov.w	r3, r8, asr #20
 800452a:	9305      	str	r3, [sp, #20]
 800452c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004530:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004534:	2b10      	cmp	r3, #16
 8004536:	dc02      	bgt.n	800453e <__ieee754_rem_pio2+0x1c6>
 8004538:	e9c4 0100 	strd	r0, r1, [r4]
 800453c:	e039      	b.n	80045b2 <__ieee754_rem_pio2+0x23a>
 800453e:	a34c      	add	r3, pc, #304	@ (adr r3, 8004670 <__ieee754_rem_pio2+0x2f8>)
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004548:	f7fb fffa 	bl	8000540 <__aeabi_dmul>
 800454c:	4606      	mov	r6, r0
 800454e:	460f      	mov	r7, r1
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4650      	mov	r0, sl
 8004556:	4659      	mov	r1, fp
 8004558:	f7fb fe3a 	bl	80001d0 <__aeabi_dsub>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4680      	mov	r8, r0
 8004562:	4689      	mov	r9, r1
 8004564:	4650      	mov	r0, sl
 8004566:	4659      	mov	r1, fp
 8004568:	f7fb fe32 	bl	80001d0 <__aeabi_dsub>
 800456c:	4632      	mov	r2, r6
 800456e:	463b      	mov	r3, r7
 8004570:	f7fb fe2e 	bl	80001d0 <__aeabi_dsub>
 8004574:	a340      	add	r3, pc, #256	@ (adr r3, 8004678 <__ieee754_rem_pio2+0x300>)
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	4606      	mov	r6, r0
 800457c:	460f      	mov	r7, r1
 800457e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004582:	f7fb ffdd 	bl	8000540 <__aeabi_dmul>
 8004586:	4632      	mov	r2, r6
 8004588:	463b      	mov	r3, r7
 800458a:	f7fb fe21 	bl	80001d0 <__aeabi_dsub>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4606      	mov	r6, r0
 8004594:	460f      	mov	r7, r1
 8004596:	4640      	mov	r0, r8
 8004598:	4649      	mov	r1, r9
 800459a:	f7fb fe19 	bl	80001d0 <__aeabi_dsub>
 800459e:	9a05      	ldr	r2, [sp, #20]
 80045a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b31      	cmp	r3, #49	@ 0x31
 80045a8:	dc20      	bgt.n	80045ec <__ieee754_rem_pio2+0x274>
 80045aa:	e9c4 0100 	strd	r0, r1, [r4]
 80045ae:	46c2      	mov	sl, r8
 80045b0:	46cb      	mov	fp, r9
 80045b2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80045b6:	4650      	mov	r0, sl
 80045b8:	4642      	mov	r2, r8
 80045ba:	464b      	mov	r3, r9
 80045bc:	4659      	mov	r1, fp
 80045be:	f7fb fe07 	bl	80001d0 <__aeabi_dsub>
 80045c2:	463b      	mov	r3, r7
 80045c4:	4632      	mov	r2, r6
 80045c6:	f7fb fe03 	bl	80001d0 <__aeabi_dsub>
 80045ca:	9b04      	ldr	r3, [sp, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80045d2:	f6bf af0e 	bge.w	80043f2 <__ieee754_rem_pio2+0x7a>
 80045d6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80045da:	6063      	str	r3, [r4, #4]
 80045dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80045e0:	f8c4 8000 	str.w	r8, [r4]
 80045e4:	60a0      	str	r0, [r4, #8]
 80045e6:	60e3      	str	r3, [r4, #12]
 80045e8:	426d      	negs	r5, r5
 80045ea:	e702      	b.n	80043f2 <__ieee754_rem_pio2+0x7a>
 80045ec:	a326      	add	r3, pc, #152	@ (adr r3, 8004688 <__ieee754_rem_pio2+0x310>)
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045f6:	f7fb ffa3 	bl	8000540 <__aeabi_dmul>
 80045fa:	4606      	mov	r6, r0
 80045fc:	460f      	mov	r7, r1
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	4640      	mov	r0, r8
 8004604:	4649      	mov	r1, r9
 8004606:	f7fb fde3 	bl	80001d0 <__aeabi_dsub>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	4682      	mov	sl, r0
 8004610:	468b      	mov	fp, r1
 8004612:	4640      	mov	r0, r8
 8004614:	4649      	mov	r1, r9
 8004616:	f7fb fddb 	bl	80001d0 <__aeabi_dsub>
 800461a:	4632      	mov	r2, r6
 800461c:	463b      	mov	r3, r7
 800461e:	f7fb fdd7 	bl	80001d0 <__aeabi_dsub>
 8004622:	a31b      	add	r3, pc, #108	@ (adr r3, 8004690 <__ieee754_rem_pio2+0x318>)
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	4606      	mov	r6, r0
 800462a:	460f      	mov	r7, r1
 800462c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004630:	f7fb ff86 	bl	8000540 <__aeabi_dmul>
 8004634:	4632      	mov	r2, r6
 8004636:	463b      	mov	r3, r7
 8004638:	f7fb fdca 	bl	80001d0 <__aeabi_dsub>
 800463c:	4606      	mov	r6, r0
 800463e:	460f      	mov	r7, r1
 8004640:	e764      	b.n	800450c <__ieee754_rem_pio2+0x194>
 8004642:	4b1b      	ldr	r3, [pc, #108]	@ (80046b0 <__ieee754_rem_pio2+0x338>)
 8004644:	4598      	cmp	r8, r3
 8004646:	d935      	bls.n	80046b4 <__ieee754_rem_pio2+0x33c>
 8004648:	4632      	mov	r2, r6
 800464a:	463b      	mov	r3, r7
 800464c:	4630      	mov	r0, r6
 800464e:	4639      	mov	r1, r7
 8004650:	f7fb fdbe 	bl	80001d0 <__aeabi_dsub>
 8004654:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004658:	e9c4 0100 	strd	r0, r1, [r4]
 800465c:	e69e      	b.n	800439c <__ieee754_rem_pio2+0x24>
 800465e:	bf00      	nop
 8004660:	54400000 	.word	0x54400000
 8004664:	3ff921fb 	.word	0x3ff921fb
 8004668:	1a626331 	.word	0x1a626331
 800466c:	3dd0b461 	.word	0x3dd0b461
 8004670:	1a600000 	.word	0x1a600000
 8004674:	3dd0b461 	.word	0x3dd0b461
 8004678:	2e037073 	.word	0x2e037073
 800467c:	3ba3198a 	.word	0x3ba3198a
 8004680:	6dc9c883 	.word	0x6dc9c883
 8004684:	3fe45f30 	.word	0x3fe45f30
 8004688:	2e000000 	.word	0x2e000000
 800468c:	3ba3198a 	.word	0x3ba3198a
 8004690:	252049c1 	.word	0x252049c1
 8004694:	397b839a 	.word	0x397b839a
 8004698:	3fe921fb 	.word	0x3fe921fb
 800469c:	4002d97b 	.word	0x4002d97b
 80046a0:	3ff921fb 	.word	0x3ff921fb
 80046a4:	413921fb 	.word	0x413921fb
 80046a8:	3fe00000 	.word	0x3fe00000
 80046ac:	08005058 	.word	0x08005058
 80046b0:	7fefffff 	.word	0x7fefffff
 80046b4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80046b8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80046bc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80046c0:	4630      	mov	r0, r6
 80046c2:	460f      	mov	r7, r1
 80046c4:	f7fc f9d6 	bl	8000a74 <__aeabi_d2iz>
 80046c8:	f7fb fed0 	bl	800046c <__aeabi_i2d>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4630      	mov	r0, r6
 80046d2:	4639      	mov	r1, r7
 80046d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80046d8:	f7fb fd7a 	bl	80001d0 <__aeabi_dsub>
 80046dc:	4b22      	ldr	r3, [pc, #136]	@ (8004768 <__ieee754_rem_pio2+0x3f0>)
 80046de:	2200      	movs	r2, #0
 80046e0:	f7fb ff2e 	bl	8000540 <__aeabi_dmul>
 80046e4:	460f      	mov	r7, r1
 80046e6:	4606      	mov	r6, r0
 80046e8:	f7fc f9c4 	bl	8000a74 <__aeabi_d2iz>
 80046ec:	f7fb febe 	bl	800046c <__aeabi_i2d>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4630      	mov	r0, r6
 80046f6:	4639      	mov	r1, r7
 80046f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80046fc:	f7fb fd68 	bl	80001d0 <__aeabi_dsub>
 8004700:	4b19      	ldr	r3, [pc, #100]	@ (8004768 <__ieee754_rem_pio2+0x3f0>)
 8004702:	2200      	movs	r2, #0
 8004704:	f7fb ff1c 	bl	8000540 <__aeabi_dmul>
 8004708:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800470c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004710:	f04f 0803 	mov.w	r8, #3
 8004714:	2600      	movs	r6, #0
 8004716:	2700      	movs	r7, #0
 8004718:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800471c:	4632      	mov	r2, r6
 800471e:	463b      	mov	r3, r7
 8004720:	46c2      	mov	sl, r8
 8004722:	f108 38ff 	add.w	r8, r8, #4294967295
 8004726:	f7fc f973 	bl	8000a10 <__aeabi_dcmpeq>
 800472a:	2800      	cmp	r0, #0
 800472c:	d1f4      	bne.n	8004718 <__ieee754_rem_pio2+0x3a0>
 800472e:	4b0f      	ldr	r3, [pc, #60]	@ (800476c <__ieee754_rem_pio2+0x3f4>)
 8004730:	9301      	str	r3, [sp, #4]
 8004732:	2302      	movs	r3, #2
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	462a      	mov	r2, r5
 8004738:	4653      	mov	r3, sl
 800473a:	4621      	mov	r1, r4
 800473c:	a806      	add	r0, sp, #24
 800473e:	f000 f81f 	bl	8004780 <__kernel_rem_pio2>
 8004742:	9b04      	ldr	r3, [sp, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	4605      	mov	r5, r0
 8004748:	f6bf ae53 	bge.w	80043f2 <__ieee754_rem_pio2+0x7a>
 800474c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004750:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004754:	e9c4 2300 	strd	r2, r3, [r4]
 8004758:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800475c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004760:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004764:	e740      	b.n	80045e8 <__ieee754_rem_pio2+0x270>
 8004766:	bf00      	nop
 8004768:	41700000 	.word	0x41700000
 800476c:	080050d8 	.word	0x080050d8

08004770 <fabs>:
 8004770:	ec51 0b10 	vmov	r0, r1, d0
 8004774:	4602      	mov	r2, r0
 8004776:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800477a:	ec43 2b10 	vmov	d0, r2, r3
 800477e:	4770      	bx	lr

08004780 <__kernel_rem_pio2>:
 8004780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004784:	ed2d 8b02 	vpush	{d8}
 8004788:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800478c:	f112 0f14 	cmn.w	r2, #20
 8004790:	9306      	str	r3, [sp, #24]
 8004792:	9104      	str	r1, [sp, #16]
 8004794:	4bbe      	ldr	r3, [pc, #760]	@ (8004a90 <__kernel_rem_pio2+0x310>)
 8004796:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8004798:	9008      	str	r0, [sp, #32]
 800479a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	9b06      	ldr	r3, [sp, #24]
 80047a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80047a6:	bfa8      	it	ge
 80047a8:	1ed4      	subge	r4, r2, #3
 80047aa:	9305      	str	r3, [sp, #20]
 80047ac:	bfb2      	itee	lt
 80047ae:	2400      	movlt	r4, #0
 80047b0:	2318      	movge	r3, #24
 80047b2:	fb94 f4f3 	sdivge	r4, r4, r3
 80047b6:	f06f 0317 	mvn.w	r3, #23
 80047ba:	fb04 3303 	mla	r3, r4, r3, r3
 80047be:	eb03 0b02 	add.w	fp, r3, r2
 80047c2:	9b00      	ldr	r3, [sp, #0]
 80047c4:	9a05      	ldr	r2, [sp, #20]
 80047c6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8004a80 <__kernel_rem_pio2+0x300>
 80047ca:	eb03 0802 	add.w	r8, r3, r2
 80047ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80047d0:	1aa7      	subs	r7, r4, r2
 80047d2:	ae20      	add	r6, sp, #128	@ 0x80
 80047d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80047d8:	2500      	movs	r5, #0
 80047da:	4545      	cmp	r5, r8
 80047dc:	dd13      	ble.n	8004806 <__kernel_rem_pio2+0x86>
 80047de:	9b06      	ldr	r3, [sp, #24]
 80047e0:	aa20      	add	r2, sp, #128	@ 0x80
 80047e2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80047e6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80047ea:	f04f 0800 	mov.w	r8, #0
 80047ee:	9b00      	ldr	r3, [sp, #0]
 80047f0:	4598      	cmp	r8, r3
 80047f2:	dc31      	bgt.n	8004858 <__kernel_rem_pio2+0xd8>
 80047f4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8004a80 <__kernel_rem_pio2+0x300>
 80047f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004800:	462f      	mov	r7, r5
 8004802:	2600      	movs	r6, #0
 8004804:	e01b      	b.n	800483e <__kernel_rem_pio2+0xbe>
 8004806:	42ef      	cmn	r7, r5
 8004808:	d407      	bmi.n	800481a <__kernel_rem_pio2+0x9a>
 800480a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800480e:	f7fb fe2d 	bl	800046c <__aeabi_i2d>
 8004812:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004816:	3501      	adds	r5, #1
 8004818:	e7df      	b.n	80047da <__kernel_rem_pio2+0x5a>
 800481a:	ec51 0b18 	vmov	r0, r1, d8
 800481e:	e7f8      	b.n	8004812 <__kernel_rem_pio2+0x92>
 8004820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004824:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004828:	f7fb fe8a 	bl	8000540 <__aeabi_dmul>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004834:	f7fb fcce 	bl	80001d4 <__adddf3>
 8004838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800483c:	3601      	adds	r6, #1
 800483e:	9b05      	ldr	r3, [sp, #20]
 8004840:	429e      	cmp	r6, r3
 8004842:	f1a7 0708 	sub.w	r7, r7, #8
 8004846:	ddeb      	ble.n	8004820 <__kernel_rem_pio2+0xa0>
 8004848:	ed9d 7b02 	vldr	d7, [sp, #8]
 800484c:	f108 0801 	add.w	r8, r8, #1
 8004850:	ecaa 7b02 	vstmia	sl!, {d7}
 8004854:	3508      	adds	r5, #8
 8004856:	e7ca      	b.n	80047ee <__kernel_rem_pio2+0x6e>
 8004858:	9b00      	ldr	r3, [sp, #0]
 800485a:	f8dd 8000 	ldr.w	r8, [sp]
 800485e:	aa0c      	add	r2, sp, #48	@ 0x30
 8004860:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004864:	930a      	str	r3, [sp, #40]	@ 0x28
 8004866:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004868:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800486c:	9309      	str	r3, [sp, #36]	@ 0x24
 800486e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8004872:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004874:	ab98      	add	r3, sp, #608	@ 0x260
 8004876:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800487a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800487e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004882:	ac0c      	add	r4, sp, #48	@ 0x30
 8004884:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004886:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800488a:	46a1      	mov	r9, r4
 800488c:	46c2      	mov	sl, r8
 800488e:	f1ba 0f00 	cmp.w	sl, #0
 8004892:	f1a5 0508 	sub.w	r5, r5, #8
 8004896:	dc77      	bgt.n	8004988 <__kernel_rem_pio2+0x208>
 8004898:	4658      	mov	r0, fp
 800489a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800489e:	f000 fac7 	bl	8004e30 <scalbn>
 80048a2:	ec57 6b10 	vmov	r6, r7, d0
 80048a6:	2200      	movs	r2, #0
 80048a8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80048ac:	4630      	mov	r0, r6
 80048ae:	4639      	mov	r1, r7
 80048b0:	f7fb fe46 	bl	8000540 <__aeabi_dmul>
 80048b4:	ec41 0b10 	vmov	d0, r0, r1
 80048b8:	f000 fb3a 	bl	8004f30 <floor>
 80048bc:	4b75      	ldr	r3, [pc, #468]	@ (8004a94 <__kernel_rem_pio2+0x314>)
 80048be:	ec51 0b10 	vmov	r0, r1, d0
 80048c2:	2200      	movs	r2, #0
 80048c4:	f7fb fe3c 	bl	8000540 <__aeabi_dmul>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4630      	mov	r0, r6
 80048ce:	4639      	mov	r1, r7
 80048d0:	f7fb fc7e 	bl	80001d0 <__aeabi_dsub>
 80048d4:	460f      	mov	r7, r1
 80048d6:	4606      	mov	r6, r0
 80048d8:	f7fc f8cc 	bl	8000a74 <__aeabi_d2iz>
 80048dc:	9002      	str	r0, [sp, #8]
 80048de:	f7fb fdc5 	bl	800046c <__aeabi_i2d>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4630      	mov	r0, r6
 80048e8:	4639      	mov	r1, r7
 80048ea:	f7fb fc71 	bl	80001d0 <__aeabi_dsub>
 80048ee:	f1bb 0f00 	cmp.w	fp, #0
 80048f2:	4606      	mov	r6, r0
 80048f4:	460f      	mov	r7, r1
 80048f6:	dd6c      	ble.n	80049d2 <__kernel_rem_pio2+0x252>
 80048f8:	f108 31ff 	add.w	r1, r8, #4294967295
 80048fc:	ab0c      	add	r3, sp, #48	@ 0x30
 80048fe:	9d02      	ldr	r5, [sp, #8]
 8004900:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004904:	f1cb 0018 	rsb	r0, fp, #24
 8004908:	fa43 f200 	asr.w	r2, r3, r0
 800490c:	4415      	add	r5, r2
 800490e:	4082      	lsls	r2, r0
 8004910:	1a9b      	subs	r3, r3, r2
 8004912:	aa0c      	add	r2, sp, #48	@ 0x30
 8004914:	9502      	str	r5, [sp, #8]
 8004916:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800491a:	f1cb 0217 	rsb	r2, fp, #23
 800491e:	fa43 f902 	asr.w	r9, r3, r2
 8004922:	f1b9 0f00 	cmp.w	r9, #0
 8004926:	dd64      	ble.n	80049f2 <__kernel_rem_pio2+0x272>
 8004928:	9b02      	ldr	r3, [sp, #8]
 800492a:	2200      	movs	r2, #0
 800492c:	3301      	adds	r3, #1
 800492e:	9302      	str	r3, [sp, #8]
 8004930:	4615      	mov	r5, r2
 8004932:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8004936:	4590      	cmp	r8, r2
 8004938:	f300 80b8 	bgt.w	8004aac <__kernel_rem_pio2+0x32c>
 800493c:	f1bb 0f00 	cmp.w	fp, #0
 8004940:	dd07      	ble.n	8004952 <__kernel_rem_pio2+0x1d2>
 8004942:	f1bb 0f01 	cmp.w	fp, #1
 8004946:	f000 80bf 	beq.w	8004ac8 <__kernel_rem_pio2+0x348>
 800494a:	f1bb 0f02 	cmp.w	fp, #2
 800494e:	f000 80c6 	beq.w	8004ade <__kernel_rem_pio2+0x35e>
 8004952:	f1b9 0f02 	cmp.w	r9, #2
 8004956:	d14c      	bne.n	80049f2 <__kernel_rem_pio2+0x272>
 8004958:	4632      	mov	r2, r6
 800495a:	463b      	mov	r3, r7
 800495c:	494e      	ldr	r1, [pc, #312]	@ (8004a98 <__kernel_rem_pio2+0x318>)
 800495e:	2000      	movs	r0, #0
 8004960:	f7fb fc36 	bl	80001d0 <__aeabi_dsub>
 8004964:	4606      	mov	r6, r0
 8004966:	460f      	mov	r7, r1
 8004968:	2d00      	cmp	r5, #0
 800496a:	d042      	beq.n	80049f2 <__kernel_rem_pio2+0x272>
 800496c:	4658      	mov	r0, fp
 800496e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8004a88 <__kernel_rem_pio2+0x308>
 8004972:	f000 fa5d 	bl	8004e30 <scalbn>
 8004976:	4630      	mov	r0, r6
 8004978:	4639      	mov	r1, r7
 800497a:	ec53 2b10 	vmov	r2, r3, d0
 800497e:	f7fb fc27 	bl	80001d0 <__aeabi_dsub>
 8004982:	4606      	mov	r6, r0
 8004984:	460f      	mov	r7, r1
 8004986:	e034      	b.n	80049f2 <__kernel_rem_pio2+0x272>
 8004988:	4b44      	ldr	r3, [pc, #272]	@ (8004a9c <__kernel_rem_pio2+0x31c>)
 800498a:	2200      	movs	r2, #0
 800498c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004990:	f7fb fdd6 	bl	8000540 <__aeabi_dmul>
 8004994:	f7fc f86e 	bl	8000a74 <__aeabi_d2iz>
 8004998:	f7fb fd68 	bl	800046c <__aeabi_i2d>
 800499c:	4b40      	ldr	r3, [pc, #256]	@ (8004aa0 <__kernel_rem_pio2+0x320>)
 800499e:	2200      	movs	r2, #0
 80049a0:	4606      	mov	r6, r0
 80049a2:	460f      	mov	r7, r1
 80049a4:	f7fb fdcc 	bl	8000540 <__aeabi_dmul>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049b0:	f7fb fc0e 	bl	80001d0 <__aeabi_dsub>
 80049b4:	f7fc f85e 	bl	8000a74 <__aeabi_d2iz>
 80049b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80049bc:	f849 0b04 	str.w	r0, [r9], #4
 80049c0:	4639      	mov	r1, r7
 80049c2:	4630      	mov	r0, r6
 80049c4:	f7fb fc06 	bl	80001d4 <__adddf3>
 80049c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049d0:	e75d      	b.n	800488e <__kernel_rem_pio2+0x10e>
 80049d2:	d107      	bne.n	80049e4 <__kernel_rem_pio2+0x264>
 80049d4:	f108 33ff 	add.w	r3, r8, #4294967295
 80049d8:	aa0c      	add	r2, sp, #48	@ 0x30
 80049da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049de:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80049e2:	e79e      	b.n	8004922 <__kernel_rem_pio2+0x1a2>
 80049e4:	4b2f      	ldr	r3, [pc, #188]	@ (8004aa4 <__kernel_rem_pio2+0x324>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	f7fc f830 	bl	8000a4c <__aeabi_dcmpge>
 80049ec:	2800      	cmp	r0, #0
 80049ee:	d143      	bne.n	8004a78 <__kernel_rem_pio2+0x2f8>
 80049f0:	4681      	mov	r9, r0
 80049f2:	2200      	movs	r2, #0
 80049f4:	2300      	movs	r3, #0
 80049f6:	4630      	mov	r0, r6
 80049f8:	4639      	mov	r1, r7
 80049fa:	f7fc f809 	bl	8000a10 <__aeabi_dcmpeq>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	f000 80bf 	beq.w	8004b82 <__kernel_rem_pio2+0x402>
 8004a04:	f108 33ff 	add.w	r3, r8, #4294967295
 8004a08:	2200      	movs	r2, #0
 8004a0a:	9900      	ldr	r1, [sp, #0]
 8004a0c:	428b      	cmp	r3, r1
 8004a0e:	da6e      	bge.n	8004aee <__kernel_rem_pio2+0x36e>
 8004a10:	2a00      	cmp	r2, #0
 8004a12:	f000 8089 	beq.w	8004b28 <__kernel_rem_pio2+0x3a8>
 8004a16:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8004a1c:	f1ab 0b18 	sub.w	fp, fp, #24
 8004a20:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f6      	beq.n	8004a16 <__kernel_rem_pio2+0x296>
 8004a28:	4658      	mov	r0, fp
 8004a2a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8004a88 <__kernel_rem_pio2+0x308>
 8004a2e:	f000 f9ff 	bl	8004e30 <scalbn>
 8004a32:	f108 0301 	add.w	r3, r8, #1
 8004a36:	00da      	lsls	r2, r3, #3
 8004a38:	9205      	str	r2, [sp, #20]
 8004a3a:	ec55 4b10 	vmov	r4, r5, d0
 8004a3e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8004a40:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8004a9c <__kernel_rem_pio2+0x31c>
 8004a44:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8004a48:	4646      	mov	r6, r8
 8004a4a:	f04f 0a00 	mov.w	sl, #0
 8004a4e:	2e00      	cmp	r6, #0
 8004a50:	f280 80cf 	bge.w	8004bf2 <__kernel_rem_pio2+0x472>
 8004a54:	4644      	mov	r4, r8
 8004a56:	2c00      	cmp	r4, #0
 8004a58:	f2c0 80fd 	blt.w	8004c56 <__kernel_rem_pio2+0x4d6>
 8004a5c:	4b12      	ldr	r3, [pc, #72]	@ (8004aa8 <__kernel_rem_pio2+0x328>)
 8004a5e:	461f      	mov	r7, r3
 8004a60:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004a62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a66:	9306      	str	r3, [sp, #24]
 8004a68:	f04f 0a00 	mov.w	sl, #0
 8004a6c:	f04f 0b00 	mov.w	fp, #0
 8004a70:	2600      	movs	r6, #0
 8004a72:	eba8 0504 	sub.w	r5, r8, r4
 8004a76:	e0e2      	b.n	8004c3e <__kernel_rem_pio2+0x4be>
 8004a78:	f04f 0902 	mov.w	r9, #2
 8004a7c:	e754      	b.n	8004928 <__kernel_rem_pio2+0x1a8>
 8004a7e:	bf00      	nop
	...
 8004a8c:	3ff00000 	.word	0x3ff00000
 8004a90:	08005220 	.word	0x08005220
 8004a94:	40200000 	.word	0x40200000
 8004a98:	3ff00000 	.word	0x3ff00000
 8004a9c:	3e700000 	.word	0x3e700000
 8004aa0:	41700000 	.word	0x41700000
 8004aa4:	3fe00000 	.word	0x3fe00000
 8004aa8:	080051e0 	.word	0x080051e0
 8004aac:	f854 3b04 	ldr.w	r3, [r4], #4
 8004ab0:	b945      	cbnz	r5, 8004ac4 <__kernel_rem_pio2+0x344>
 8004ab2:	b123      	cbz	r3, 8004abe <__kernel_rem_pio2+0x33e>
 8004ab4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004ab8:	f844 3c04 	str.w	r3, [r4, #-4]
 8004abc:	2301      	movs	r3, #1
 8004abe:	3201      	adds	r2, #1
 8004ac0:	461d      	mov	r5, r3
 8004ac2:	e738      	b.n	8004936 <__kernel_rem_pio2+0x1b6>
 8004ac4:	1acb      	subs	r3, r1, r3
 8004ac6:	e7f7      	b.n	8004ab8 <__kernel_rem_pio2+0x338>
 8004ac8:	f108 32ff 	add.w	r2, r8, #4294967295
 8004acc:	ab0c      	add	r3, sp, #48	@ 0x30
 8004ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ad2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004ad6:	a90c      	add	r1, sp, #48	@ 0x30
 8004ad8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004adc:	e739      	b.n	8004952 <__kernel_rem_pio2+0x1d2>
 8004ade:	f108 32ff 	add.w	r2, r8, #4294967295
 8004ae2:	ab0c      	add	r3, sp, #48	@ 0x30
 8004ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ae8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004aec:	e7f3      	b.n	8004ad6 <__kernel_rem_pio2+0x356>
 8004aee:	a90c      	add	r1, sp, #48	@ 0x30
 8004af0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	430a      	orrs	r2, r1
 8004af8:	e787      	b.n	8004a0a <__kernel_rem_pio2+0x28a>
 8004afa:	3401      	adds	r4, #1
 8004afc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004b00:	2a00      	cmp	r2, #0
 8004b02:	d0fa      	beq.n	8004afa <__kernel_rem_pio2+0x37a>
 8004b04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b06:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004b0a:	eb0d 0503 	add.w	r5, sp, r3
 8004b0e:	9b06      	ldr	r3, [sp, #24]
 8004b10:	aa20      	add	r2, sp, #128	@ 0x80
 8004b12:	4443      	add	r3, r8
 8004b14:	f108 0701 	add.w	r7, r8, #1
 8004b18:	3d98      	subs	r5, #152	@ 0x98
 8004b1a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8004b1e:	4444      	add	r4, r8
 8004b20:	42bc      	cmp	r4, r7
 8004b22:	da04      	bge.n	8004b2e <__kernel_rem_pio2+0x3ae>
 8004b24:	46a0      	mov	r8, r4
 8004b26:	e6a2      	b.n	800486e <__kernel_rem_pio2+0xee>
 8004b28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b2a:	2401      	movs	r4, #1
 8004b2c:	e7e6      	b.n	8004afc <__kernel_rem_pio2+0x37c>
 8004b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b30:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8004b34:	f7fb fc9a 	bl	800046c <__aeabi_i2d>
 8004b38:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8004e00 <__kernel_rem_pio2+0x680>
 8004b3c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004b40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004b44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b48:	46b2      	mov	sl, r6
 8004b4a:	f04f 0800 	mov.w	r8, #0
 8004b4e:	9b05      	ldr	r3, [sp, #20]
 8004b50:	4598      	cmp	r8, r3
 8004b52:	dd05      	ble.n	8004b60 <__kernel_rem_pio2+0x3e0>
 8004b54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b58:	3701      	adds	r7, #1
 8004b5a:	eca5 7b02 	vstmia	r5!, {d7}
 8004b5e:	e7df      	b.n	8004b20 <__kernel_rem_pio2+0x3a0>
 8004b60:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8004b64:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004b68:	f7fb fcea 	bl	8000540 <__aeabi_dmul>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b74:	f7fb fb2e 	bl	80001d4 <__adddf3>
 8004b78:	f108 0801 	add.w	r8, r8, #1
 8004b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b80:	e7e5      	b.n	8004b4e <__kernel_rem_pio2+0x3ce>
 8004b82:	f1cb 0000 	rsb	r0, fp, #0
 8004b86:	ec47 6b10 	vmov	d0, r6, r7
 8004b8a:	f000 f951 	bl	8004e30 <scalbn>
 8004b8e:	ec55 4b10 	vmov	r4, r5, d0
 8004b92:	4b9d      	ldr	r3, [pc, #628]	@ (8004e08 <__kernel_rem_pio2+0x688>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	4620      	mov	r0, r4
 8004b98:	4629      	mov	r1, r5
 8004b9a:	f7fb ff57 	bl	8000a4c <__aeabi_dcmpge>
 8004b9e:	b300      	cbz	r0, 8004be2 <__kernel_rem_pio2+0x462>
 8004ba0:	4b9a      	ldr	r3, [pc, #616]	@ (8004e0c <__kernel_rem_pio2+0x68c>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	f7fb fcca 	bl	8000540 <__aeabi_dmul>
 8004bac:	f7fb ff62 	bl	8000a74 <__aeabi_d2iz>
 8004bb0:	4606      	mov	r6, r0
 8004bb2:	f7fb fc5b 	bl	800046c <__aeabi_i2d>
 8004bb6:	4b94      	ldr	r3, [pc, #592]	@ (8004e08 <__kernel_rem_pio2+0x688>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f7fb fcc1 	bl	8000540 <__aeabi_dmul>
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f7fb fb03 	bl	80001d0 <__aeabi_dsub>
 8004bca:	f7fb ff53 	bl	8000a74 <__aeabi_d2iz>
 8004bce:	ab0c      	add	r3, sp, #48	@ 0x30
 8004bd0:	f10b 0b18 	add.w	fp, fp, #24
 8004bd4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004bd8:	f108 0801 	add.w	r8, r8, #1
 8004bdc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8004be0:	e722      	b.n	8004a28 <__kernel_rem_pio2+0x2a8>
 8004be2:	4620      	mov	r0, r4
 8004be4:	4629      	mov	r1, r5
 8004be6:	f7fb ff45 	bl	8000a74 <__aeabi_d2iz>
 8004bea:	ab0c      	add	r3, sp, #48	@ 0x30
 8004bec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004bf0:	e71a      	b.n	8004a28 <__kernel_rem_pio2+0x2a8>
 8004bf2:	ab0c      	add	r3, sp, #48	@ 0x30
 8004bf4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004bf8:	f7fb fc38 	bl	800046c <__aeabi_i2d>
 8004bfc:	4622      	mov	r2, r4
 8004bfe:	462b      	mov	r3, r5
 8004c00:	f7fb fc9e 	bl	8000540 <__aeabi_dmul>
 8004c04:	4652      	mov	r2, sl
 8004c06:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8004c0a:	465b      	mov	r3, fp
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	4629      	mov	r1, r5
 8004c10:	f7fb fc96 	bl	8000540 <__aeabi_dmul>
 8004c14:	3e01      	subs	r6, #1
 8004c16:	4604      	mov	r4, r0
 8004c18:	460d      	mov	r5, r1
 8004c1a:	e718      	b.n	8004a4e <__kernel_rem_pio2+0x2ce>
 8004c1c:	9906      	ldr	r1, [sp, #24]
 8004c1e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8004c22:	9106      	str	r1, [sp, #24]
 8004c24:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004c28:	f7fb fc8a 	bl	8000540 <__aeabi_dmul>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4650      	mov	r0, sl
 8004c32:	4659      	mov	r1, fp
 8004c34:	f7fb face 	bl	80001d4 <__adddf3>
 8004c38:	3601      	adds	r6, #1
 8004c3a:	4682      	mov	sl, r0
 8004c3c:	468b      	mov	fp, r1
 8004c3e:	9b00      	ldr	r3, [sp, #0]
 8004c40:	429e      	cmp	r6, r3
 8004c42:	dc01      	bgt.n	8004c48 <__kernel_rem_pio2+0x4c8>
 8004c44:	42b5      	cmp	r5, r6
 8004c46:	dae9      	bge.n	8004c1c <__kernel_rem_pio2+0x49c>
 8004c48:	ab48      	add	r3, sp, #288	@ 0x120
 8004c4a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004c4e:	e9c5 ab00 	strd	sl, fp, [r5]
 8004c52:	3c01      	subs	r4, #1
 8004c54:	e6ff      	b.n	8004a56 <__kernel_rem_pio2+0x2d6>
 8004c56:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	dc0b      	bgt.n	8004c74 <__kernel_rem_pio2+0x4f4>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	dc39      	bgt.n	8004cd4 <__kernel_rem_pio2+0x554>
 8004c60:	d05d      	beq.n	8004d1e <__kernel_rem_pio2+0x59e>
 8004c62:	9b02      	ldr	r3, [sp, #8]
 8004c64:	f003 0007 	and.w	r0, r3, #7
 8004c68:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8004c6c:	ecbd 8b02 	vpop	{d8}
 8004c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c74:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d1f3      	bne.n	8004c62 <__kernel_rem_pio2+0x4e2>
 8004c7a:	9b05      	ldr	r3, [sp, #20]
 8004c7c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004c80:	eb0d 0403 	add.w	r4, sp, r3
 8004c84:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004c88:	4625      	mov	r5, r4
 8004c8a:	46c2      	mov	sl, r8
 8004c8c:	f1ba 0f00 	cmp.w	sl, #0
 8004c90:	f1a5 0508 	sub.w	r5, r5, #8
 8004c94:	dc6b      	bgt.n	8004d6e <__kernel_rem_pio2+0x5ee>
 8004c96:	4645      	mov	r5, r8
 8004c98:	2d01      	cmp	r5, #1
 8004c9a:	f1a4 0408 	sub.w	r4, r4, #8
 8004c9e:	f300 8087 	bgt.w	8004db0 <__kernel_rem_pio2+0x630>
 8004ca2:	9c05      	ldr	r4, [sp, #20]
 8004ca4:	ab48      	add	r3, sp, #288	@ 0x120
 8004ca6:	441c      	add	r4, r3
 8004ca8:	2000      	movs	r0, #0
 8004caa:	2100      	movs	r1, #0
 8004cac:	f1b8 0f01 	cmp.w	r8, #1
 8004cb0:	f300 809c 	bgt.w	8004dec <__kernel_rem_pio2+0x66c>
 8004cb4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8004cb8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8004cbc:	f1b9 0f00 	cmp.w	r9, #0
 8004cc0:	f040 80a6 	bne.w	8004e10 <__kernel_rem_pio2+0x690>
 8004cc4:	9b04      	ldr	r3, [sp, #16]
 8004cc6:	e9c3 7800 	strd	r7, r8, [r3]
 8004cca:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004cce:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004cd2:	e7c6      	b.n	8004c62 <__kernel_rem_pio2+0x4e2>
 8004cd4:	9d05      	ldr	r5, [sp, #20]
 8004cd6:	ab48      	add	r3, sp, #288	@ 0x120
 8004cd8:	441d      	add	r5, r3
 8004cda:	4644      	mov	r4, r8
 8004cdc:	2000      	movs	r0, #0
 8004cde:	2100      	movs	r1, #0
 8004ce0:	2c00      	cmp	r4, #0
 8004ce2:	da35      	bge.n	8004d50 <__kernel_rem_pio2+0x5d0>
 8004ce4:	f1b9 0f00 	cmp.w	r9, #0
 8004ce8:	d038      	beq.n	8004d5c <__kernel_rem_pio2+0x5dc>
 8004cea:	4602      	mov	r2, r0
 8004cec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004cf0:	9c04      	ldr	r4, [sp, #16]
 8004cf2:	e9c4 2300 	strd	r2, r3, [r4]
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004cfe:	f7fb fa67 	bl	80001d0 <__aeabi_dsub>
 8004d02:	ad4a      	add	r5, sp, #296	@ 0x128
 8004d04:	2401      	movs	r4, #1
 8004d06:	45a0      	cmp	r8, r4
 8004d08:	da2b      	bge.n	8004d62 <__kernel_rem_pio2+0x5e2>
 8004d0a:	f1b9 0f00 	cmp.w	r9, #0
 8004d0e:	d002      	beq.n	8004d16 <__kernel_rem_pio2+0x596>
 8004d10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004d14:	4619      	mov	r1, r3
 8004d16:	9b04      	ldr	r3, [sp, #16]
 8004d18:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004d1c:	e7a1      	b.n	8004c62 <__kernel_rem_pio2+0x4e2>
 8004d1e:	9c05      	ldr	r4, [sp, #20]
 8004d20:	ab48      	add	r3, sp, #288	@ 0x120
 8004d22:	441c      	add	r4, r3
 8004d24:	2000      	movs	r0, #0
 8004d26:	2100      	movs	r1, #0
 8004d28:	f1b8 0f00 	cmp.w	r8, #0
 8004d2c:	da09      	bge.n	8004d42 <__kernel_rem_pio2+0x5c2>
 8004d2e:	f1b9 0f00 	cmp.w	r9, #0
 8004d32:	d002      	beq.n	8004d3a <__kernel_rem_pio2+0x5ba>
 8004d34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004d38:	4619      	mov	r1, r3
 8004d3a:	9b04      	ldr	r3, [sp, #16]
 8004d3c:	e9c3 0100 	strd	r0, r1, [r3]
 8004d40:	e78f      	b.n	8004c62 <__kernel_rem_pio2+0x4e2>
 8004d42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004d46:	f7fb fa45 	bl	80001d4 <__adddf3>
 8004d4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d4e:	e7eb      	b.n	8004d28 <__kernel_rem_pio2+0x5a8>
 8004d50:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004d54:	f7fb fa3e 	bl	80001d4 <__adddf3>
 8004d58:	3c01      	subs	r4, #1
 8004d5a:	e7c1      	b.n	8004ce0 <__kernel_rem_pio2+0x560>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	e7c6      	b.n	8004cf0 <__kernel_rem_pio2+0x570>
 8004d62:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004d66:	f7fb fa35 	bl	80001d4 <__adddf3>
 8004d6a:	3401      	adds	r4, #1
 8004d6c:	e7cb      	b.n	8004d06 <__kernel_rem_pio2+0x586>
 8004d6e:	ed95 7b00 	vldr	d7, [r5]
 8004d72:	ed8d 7b00 	vstr	d7, [sp]
 8004d76:	ed95 7b02 	vldr	d7, [r5, #8]
 8004d7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d7e:	ec53 2b17 	vmov	r2, r3, d7
 8004d82:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004d86:	f7fb fa25 	bl	80001d4 <__adddf3>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4606      	mov	r6, r0
 8004d90:	460f      	mov	r7, r1
 8004d92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d96:	f7fb fa1b 	bl	80001d0 <__aeabi_dsub>
 8004d9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d9e:	f7fb fa19 	bl	80001d4 <__adddf3>
 8004da2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004da6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004daa:	e9c5 6700 	strd	r6, r7, [r5]
 8004dae:	e76d      	b.n	8004c8c <__kernel_rem_pio2+0x50c>
 8004db0:	ed94 7b00 	vldr	d7, [r4]
 8004db4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004db8:	ec51 0b17 	vmov	r0, r1, d7
 8004dbc:	4652      	mov	r2, sl
 8004dbe:	465b      	mov	r3, fp
 8004dc0:	ed8d 7b00 	vstr	d7, [sp]
 8004dc4:	f7fb fa06 	bl	80001d4 <__adddf3>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4606      	mov	r6, r0
 8004dce:	460f      	mov	r7, r1
 8004dd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004dd4:	f7fb f9fc 	bl	80001d0 <__aeabi_dsub>
 8004dd8:	4652      	mov	r2, sl
 8004dda:	465b      	mov	r3, fp
 8004ddc:	f7fb f9fa 	bl	80001d4 <__adddf3>
 8004de0:	3d01      	subs	r5, #1
 8004de2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004de6:	e9c4 6700 	strd	r6, r7, [r4]
 8004dea:	e755      	b.n	8004c98 <__kernel_rem_pio2+0x518>
 8004dec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004df0:	f7fb f9f0 	bl	80001d4 <__adddf3>
 8004df4:	f108 38ff 	add.w	r8, r8, #4294967295
 8004df8:	e758      	b.n	8004cac <__kernel_rem_pio2+0x52c>
 8004dfa:	bf00      	nop
 8004dfc:	f3af 8000 	nop.w
	...
 8004e08:	41700000 	.word	0x41700000
 8004e0c:	3e700000 	.word	0x3e700000
 8004e10:	9b04      	ldr	r3, [sp, #16]
 8004e12:	9a04      	ldr	r2, [sp, #16]
 8004e14:	601f      	str	r7, [r3, #0]
 8004e16:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8004e1a:	605c      	str	r4, [r3, #4]
 8004e1c:	609d      	str	r5, [r3, #8]
 8004e1e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004e22:	60d3      	str	r3, [r2, #12]
 8004e24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004e28:	6110      	str	r0, [r2, #16]
 8004e2a:	6153      	str	r3, [r2, #20]
 8004e2c:	e719      	b.n	8004c62 <__kernel_rem_pio2+0x4e2>
 8004e2e:	bf00      	nop

08004e30 <scalbn>:
 8004e30:	b570      	push	{r4, r5, r6, lr}
 8004e32:	ec55 4b10 	vmov	r4, r5, d0
 8004e36:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004e3a:	4606      	mov	r6, r0
 8004e3c:	462b      	mov	r3, r5
 8004e3e:	b991      	cbnz	r1, 8004e66 <scalbn+0x36>
 8004e40:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004e44:	4323      	orrs	r3, r4
 8004e46:	d03d      	beq.n	8004ec4 <scalbn+0x94>
 8004e48:	4b35      	ldr	r3, [pc, #212]	@ (8004f20 <scalbn+0xf0>)
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f7fb fb76 	bl	8000540 <__aeabi_dmul>
 8004e54:	4b33      	ldr	r3, [pc, #204]	@ (8004f24 <scalbn+0xf4>)
 8004e56:	429e      	cmp	r6, r3
 8004e58:	4604      	mov	r4, r0
 8004e5a:	460d      	mov	r5, r1
 8004e5c:	da0f      	bge.n	8004e7e <scalbn+0x4e>
 8004e5e:	a328      	add	r3, pc, #160	@ (adr r3, 8004f00 <scalbn+0xd0>)
 8004e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e64:	e01e      	b.n	8004ea4 <scalbn+0x74>
 8004e66:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004e6a:	4291      	cmp	r1, r2
 8004e6c:	d10b      	bne.n	8004e86 <scalbn+0x56>
 8004e6e:	4622      	mov	r2, r4
 8004e70:	4620      	mov	r0, r4
 8004e72:	4629      	mov	r1, r5
 8004e74:	f7fb f9ae 	bl	80001d4 <__adddf3>
 8004e78:	4604      	mov	r4, r0
 8004e7a:	460d      	mov	r5, r1
 8004e7c:	e022      	b.n	8004ec4 <scalbn+0x94>
 8004e7e:	460b      	mov	r3, r1
 8004e80:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004e84:	3936      	subs	r1, #54	@ 0x36
 8004e86:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004e8a:	4296      	cmp	r6, r2
 8004e8c:	dd0d      	ble.n	8004eaa <scalbn+0x7a>
 8004e8e:	2d00      	cmp	r5, #0
 8004e90:	a11d      	add	r1, pc, #116	@ (adr r1, 8004f08 <scalbn+0xd8>)
 8004e92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e96:	da02      	bge.n	8004e9e <scalbn+0x6e>
 8004e98:	a11d      	add	r1, pc, #116	@ (adr r1, 8004f10 <scalbn+0xe0>)
 8004e9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e9e:	a31a      	add	r3, pc, #104	@ (adr r3, 8004f08 <scalbn+0xd8>)
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	f7fb fb4c 	bl	8000540 <__aeabi_dmul>
 8004ea8:	e7e6      	b.n	8004e78 <scalbn+0x48>
 8004eaa:	1872      	adds	r2, r6, r1
 8004eac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004eb0:	428a      	cmp	r2, r1
 8004eb2:	dcec      	bgt.n	8004e8e <scalbn+0x5e>
 8004eb4:	2a00      	cmp	r2, #0
 8004eb6:	dd08      	ble.n	8004eca <scalbn+0x9a>
 8004eb8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004ebc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004ec0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004ec4:	ec45 4b10 	vmov	d0, r4, r5
 8004ec8:	bd70      	pop	{r4, r5, r6, pc}
 8004eca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004ece:	da08      	bge.n	8004ee2 <scalbn+0xb2>
 8004ed0:	2d00      	cmp	r5, #0
 8004ed2:	a10b      	add	r1, pc, #44	@ (adr r1, 8004f00 <scalbn+0xd0>)
 8004ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ed8:	dac1      	bge.n	8004e5e <scalbn+0x2e>
 8004eda:	a10f      	add	r1, pc, #60	@ (adr r1, 8004f18 <scalbn+0xe8>)
 8004edc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ee0:	e7bd      	b.n	8004e5e <scalbn+0x2e>
 8004ee2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004ee6:	3236      	adds	r2, #54	@ 0x36
 8004ee8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004eec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8004f28 <scalbn+0xf8>)
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	e7d4      	b.n	8004ea4 <scalbn+0x74>
 8004efa:	bf00      	nop
 8004efc:	f3af 8000 	nop.w
 8004f00:	c2f8f359 	.word	0xc2f8f359
 8004f04:	01a56e1f 	.word	0x01a56e1f
 8004f08:	8800759c 	.word	0x8800759c
 8004f0c:	7e37e43c 	.word	0x7e37e43c
 8004f10:	8800759c 	.word	0x8800759c
 8004f14:	fe37e43c 	.word	0xfe37e43c
 8004f18:	c2f8f359 	.word	0xc2f8f359
 8004f1c:	81a56e1f 	.word	0x81a56e1f
 8004f20:	43500000 	.word	0x43500000
 8004f24:	ffff3cb0 	.word	0xffff3cb0
 8004f28:	3c900000 	.word	0x3c900000
 8004f2c:	00000000 	.word	0x00000000

08004f30 <floor>:
 8004f30:	ec51 0b10 	vmov	r0, r1, d0
 8004f34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004f40:	2e13      	cmp	r6, #19
 8004f42:	460c      	mov	r4, r1
 8004f44:	4605      	mov	r5, r0
 8004f46:	4680      	mov	r8, r0
 8004f48:	dc34      	bgt.n	8004fb4 <floor+0x84>
 8004f4a:	2e00      	cmp	r6, #0
 8004f4c:	da17      	bge.n	8004f7e <floor+0x4e>
 8004f4e:	a332      	add	r3, pc, #200	@ (adr r3, 8005018 <floor+0xe8>)
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	f7fb f93e 	bl	80001d4 <__adddf3>
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f7fb fd80 	bl	8000a60 <__aeabi_dcmpgt>
 8004f60:	b150      	cbz	r0, 8004f78 <floor+0x48>
 8004f62:	2c00      	cmp	r4, #0
 8004f64:	da55      	bge.n	8005012 <floor+0xe2>
 8004f66:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004f6a:	432c      	orrs	r4, r5
 8004f6c:	2500      	movs	r5, #0
 8004f6e:	42ac      	cmp	r4, r5
 8004f70:	4c2b      	ldr	r4, [pc, #172]	@ (8005020 <floor+0xf0>)
 8004f72:	bf08      	it	eq
 8004f74:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004f78:	4621      	mov	r1, r4
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	e023      	b.n	8004fc6 <floor+0x96>
 8004f7e:	4f29      	ldr	r7, [pc, #164]	@ (8005024 <floor+0xf4>)
 8004f80:	4137      	asrs	r7, r6
 8004f82:	ea01 0307 	and.w	r3, r1, r7
 8004f86:	4303      	orrs	r3, r0
 8004f88:	d01d      	beq.n	8004fc6 <floor+0x96>
 8004f8a:	a323      	add	r3, pc, #140	@ (adr r3, 8005018 <floor+0xe8>)
 8004f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f90:	f7fb f920 	bl	80001d4 <__adddf3>
 8004f94:	2200      	movs	r2, #0
 8004f96:	2300      	movs	r3, #0
 8004f98:	f7fb fd62 	bl	8000a60 <__aeabi_dcmpgt>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d0eb      	beq.n	8004f78 <floor+0x48>
 8004fa0:	2c00      	cmp	r4, #0
 8004fa2:	bfbe      	ittt	lt
 8004fa4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004fa8:	4133      	asrlt	r3, r6
 8004faa:	18e4      	addlt	r4, r4, r3
 8004fac:	ea24 0407 	bic.w	r4, r4, r7
 8004fb0:	2500      	movs	r5, #0
 8004fb2:	e7e1      	b.n	8004f78 <floor+0x48>
 8004fb4:	2e33      	cmp	r6, #51	@ 0x33
 8004fb6:	dd0a      	ble.n	8004fce <floor+0x9e>
 8004fb8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004fbc:	d103      	bne.n	8004fc6 <floor+0x96>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	f7fb f907 	bl	80001d4 <__adddf3>
 8004fc6:	ec41 0b10 	vmov	d0, r0, r1
 8004fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fce:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004fd2:	f04f 37ff 	mov.w	r7, #4294967295
 8004fd6:	40df      	lsrs	r7, r3
 8004fd8:	4207      	tst	r7, r0
 8004fda:	d0f4      	beq.n	8004fc6 <floor+0x96>
 8004fdc:	a30e      	add	r3, pc, #56	@ (adr r3, 8005018 <floor+0xe8>)
 8004fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe2:	f7fb f8f7 	bl	80001d4 <__adddf3>
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f7fb fd39 	bl	8000a60 <__aeabi_dcmpgt>
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	d0c2      	beq.n	8004f78 <floor+0x48>
 8004ff2:	2c00      	cmp	r4, #0
 8004ff4:	da0a      	bge.n	800500c <floor+0xdc>
 8004ff6:	2e14      	cmp	r6, #20
 8004ff8:	d101      	bne.n	8004ffe <floor+0xce>
 8004ffa:	3401      	adds	r4, #1
 8004ffc:	e006      	b.n	800500c <floor+0xdc>
 8004ffe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005002:	2301      	movs	r3, #1
 8005004:	40b3      	lsls	r3, r6
 8005006:	441d      	add	r5, r3
 8005008:	4545      	cmp	r5, r8
 800500a:	d3f6      	bcc.n	8004ffa <floor+0xca>
 800500c:	ea25 0507 	bic.w	r5, r5, r7
 8005010:	e7b2      	b.n	8004f78 <floor+0x48>
 8005012:	2500      	movs	r5, #0
 8005014:	462c      	mov	r4, r5
 8005016:	e7af      	b.n	8004f78 <floor+0x48>
 8005018:	8800759c 	.word	0x8800759c
 800501c:	7e37e43c 	.word	0x7e37e43c
 8005020:	bff00000 	.word	0xbff00000
 8005024:	000fffff 	.word	0x000fffff

08005028 <_init>:
 8005028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502a:	bf00      	nop
 800502c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502e:	bc08      	pop	{r3}
 8005030:	469e      	mov	lr, r3
 8005032:	4770      	bx	lr

08005034 <_fini>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	bf00      	nop
 8005038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503a:	bc08      	pop	{r3}
 800503c:	469e      	mov	lr, r3
 800503e:	4770      	bx	lr
