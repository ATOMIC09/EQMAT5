
STM32_EQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048dc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004a64  08004a64  00005a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a90  08004a90  0000607c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a90  08004a90  00005a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a98  08004a98  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a98  08004a98  00005a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a9c  08004a9c  00005a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08004aa0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000607c  2**0
                  CONTENTS
 10 .bss          00000308  2000007c  2000007c  0000607c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000384  20000384  0000607c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b1dc  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ff1  00000000  00000000  00011288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000990  00000000  00000000  00013280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000745  00000000  00000000  00013c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f8bc  00000000  00000000  00014355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cca0  00000000  00000000  00033c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb8c2  00000000  00000000  000408b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fc173  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c2c  00000000  00000000  000fc1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000fede4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a4c 	.word	0x08004a4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08004a4c 	.word	0x08004a4c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fc56 	bl	8000d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f82a 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f914 	bl	80006f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004c8:	f000 f8ea 	bl	80006a0 <MX_DMA_Init>
  MX_I2S2_Init();
 80004cc:	f000 f88e 	bl	80005ec <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80004d0:	f000 f8bc 	bl	800064c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_data, sizeof(rx_data));
 80004d4:	2246      	movs	r2, #70	@ 0x46
 80004d6:	490b      	ldr	r1, [pc, #44]	@ (8000504 <main+0x4c>)
 80004d8:	480b      	ldr	r0, [pc, #44]	@ (8000508 <main+0x50>)
 80004da:	f002 fe90 	bl	80031fe <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart1, tx_buffer, sizeof(tx_buffer), 10);
 80004de:	230a      	movs	r3, #10
 80004e0:	2211      	movs	r2, #17
 80004e2:	490a      	ldr	r1, [pc, #40]	@ (800050c <main+0x54>)
 80004e4:	4808      	ldr	r0, [pc, #32]	@ (8000508 <main+0x50>)
 80004e6:	f002 fdff 	bl	80030e8 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    printf("Hello World\n");
 80004ea:	4809      	ldr	r0, [pc, #36]	@ (8000510 <main+0x58>)
 80004ec:	f003 ff1a 	bl	8004324 <puts>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80004f0:	2104      	movs	r1, #4
 80004f2:	4808      	ldr	r0, [pc, #32]	@ (8000514 <main+0x5c>)
 80004f4:	f001 fb13 	bl	8001b1e <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 80004f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004fc:	f000 fca8 	bl	8000e50 <HAL_Delay>
  {
 8000500:	bf00      	nop
 8000502:	e7f2      	b.n	80004ea <main+0x32>
 8000504:	200001e8 	.word	0x200001e8
 8000508:	200001a0 	.word	0x200001a0
 800050c:	20000000 	.word	0x20000000
 8000510:	08004a64 	.word	0x08004a64
 8000514:	40020400 	.word	0x40020400

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	@ 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	@ 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f003 ffdc 	bl	80044e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b28      	ldr	r3, [pc, #160]	@ (80005e4 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000544:	4a27      	ldr	r2, [pc, #156]	@ (80005e4 <SystemClock_Config+0xcc>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	@ 0x40
 800054c:	4b25      	ldr	r3, [pc, #148]	@ (80005e4 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b22      	ldr	r3, [pc, #136]	@ (80005e8 <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a21      	ldr	r2, [pc, #132]	@ (80005e8 <SystemClock_Config+0xd0>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1f      	ldr	r3, [pc, #124]	@ (80005e8 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800057c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000588:	2308      	movs	r3, #8
 800058a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800058c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000590:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000596:	2304      	movs	r3, #4
 8000598:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 ff78 	bl	8002494 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005aa:	f000 f911 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2302      	movs	r3, #2
 80005b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	2105      	movs	r1, #5
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 f9d9 	bl	8002984 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005d8:	f000 f8fa 	bl	80007d0 <Error_Handler>
  }
}
 80005dc:	bf00      	nop
 80005de:	3750      	adds	r7, #80	@ 0x50
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80005f0:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <MX_I2S2_Init+0x54>)
 80005f2:	4a14      	ldr	r2, [pc, #80]	@ (8000644 <MX_I2S2_Init+0x58>)
 80005f4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80005f6:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <MX_I2S2_Init+0x54>)
 80005f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005fc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80005fe:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <MX_I2S2_Init+0x54>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000604:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <MX_I2S2_Init+0x54>)
 8000606:	2203      	movs	r2, #3
 8000608:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800060a:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <MX_I2S2_Init+0x54>)
 800060c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000610:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000612:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <MX_I2S2_Init+0x54>)
 8000614:	4a0c      	ldr	r2, [pc, #48]	@ (8000648 <MX_I2S2_Init+0x5c>)
 8000616:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000618:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <MX_I2S2_Init+0x54>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800061e:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <MX_I2S2_Init+0x54>)
 8000620:	2200      	movs	r2, #0
 8000622:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <MX_I2S2_Init+0x54>)
 8000626:	2201      	movs	r2, #1
 8000628:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_I2S2_Init+0x54>)
 800062c:	f001 fa92 	bl	8001b54 <HAL_I2S_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000636:	f000 f8cb 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000098 	.word	0x20000098
 8000644:	40003800 	.word	0x40003800
 8000648:	00017700 	.word	0x00017700

0800064c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000650:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_USART1_UART_Init+0x4c>)
 8000652:	4a12      	ldr	r2, [pc, #72]	@ (800069c <MX_USART1_UART_Init+0x50>)
 8000654:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000656:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <MX_USART1_UART_Init+0x4c>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <MX_USART1_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <MX_USART1_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	@ (8000698 <MX_USART1_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <MX_USART1_UART_Init+0x4c>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <MX_USART1_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <MX_USART1_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	@ (8000698 <MX_USART1_UART_Init+0x4c>)
 8000684:	f002 fce0 	bl	8003048 <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800068e:	f000 f89f 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200001a0 	.word	0x200001a0
 800069c:	40011000 	.word	0x40011000

080006a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <MX_DMA_Init+0x4c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a0f      	ldr	r2, [pc, #60]	@ (80006ec <MX_DMA_Init+0x4c>)
 80006b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <MX_DMA_Init+0x4c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	200e      	movs	r0, #14
 80006c8:	f000 fcc1 	bl	800104e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80006cc:	200e      	movs	r0, #14
 80006ce:	f000 fcda 	bl	8001086 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	200f      	movs	r0, #15
 80006d8:	f000 fcb9 	bl	800104e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80006dc:	200f      	movs	r0, #15
 80006de:	f000 fcd2 	bl	8001086 <HAL_NVIC_EnableIRQ>

}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	@ 0x28
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <MX_GPIO_Init+0xb4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a25      	ldr	r2, [pc, #148]	@ (80007a4 <MX_GPIO_Init+0xb4>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <MX_GPIO_Init+0xb4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <MX_GPIO_Init+0xb4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a1e      	ldr	r2, [pc, #120]	@ (80007a4 <MX_GPIO_Init+0xb4>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <MX_GPIO_Init+0xb4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <MX_GPIO_Init+0xb4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a17      	ldr	r2, [pc, #92]	@ (80007a4 <MX_GPIO_Init+0xb4>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <MX_GPIO_Init+0xb4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_GPIO_Init+0xb4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a10      	ldr	r2, [pc, #64]	@ (80007a4 <MX_GPIO_Init+0xb4>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_GPIO_Init+0xb4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2104      	movs	r1, #4
 800077a:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <MX_GPIO_Init+0xb8>)
 800077c:	f001 f9b6 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000780:	2304      	movs	r3, #4
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <MX_GPIO_Init+0xb8>)
 8000798:	f001 f80c 	bl	80017b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	@ 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020400 	.word	0x40020400

080007ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  HAL_UART_Transmit(&huart1, rx_data, sizeof(rx_data), 10);
 80007b4:	230a      	movs	r3, #10
 80007b6:	2246      	movs	r2, #70	@ 0x46
 80007b8:	4903      	ldr	r1, [pc, #12]	@ (80007c8 <HAL_UART_RxCpltCallback+0x1c>)
 80007ba:	4804      	ldr	r0, [pc, #16]	@ (80007cc <HAL_UART_RxCpltCallback+0x20>)
 80007bc:	f002 fc94 	bl	80030e8 <HAL_UART_Transmit>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200001e8 	.word	0x200001e8
 80007cc:	200001a0 	.word	0x200001a0

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <Error_Handler+0x8>

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <HAL_MspInit+0x4c>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000828 <HAL_MspInit+0x4c>)
 80007ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <HAL_MspInit+0x4c>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <HAL_MspInit+0x4c>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000806:	4a08      	ldr	r2, [pc, #32]	@ (8000828 <HAL_MspInit+0x4c>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800080c:	6413      	str	r3, [r2, #64]	@ 0x40
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <HAL_MspInit+0x4c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08e      	sub	sp, #56	@ 0x38
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a6b      	ldr	r2, [pc, #428]	@ (8000a04 <HAL_I2S_MspInit+0x1d8>)
 8000858:	4293      	cmp	r3, r2
 800085a:	f040 80cf 	bne.w	80009fc <HAL_I2S_MspInit+0x1d0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800085e:	2301      	movs	r3, #1
 8000860:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000862:	23c0      	movs	r3, #192	@ 0xc0
 8000864:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000866:	2302      	movs	r3, #2
 8000868:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4618      	mov	r0, r3
 8000870:	f002 faa8 	bl	8002dc4 <HAL_RCCEx_PeriphCLKConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800087a:	f7ff ffa9 	bl	80007d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b61      	ldr	r3, [pc, #388]	@ (8000a08 <HAL_I2S_MspInit+0x1dc>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000886:	4a60      	ldr	r2, [pc, #384]	@ (8000a08 <HAL_I2S_MspInit+0x1dc>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088c:	6413      	str	r3, [r2, #64]	@ 0x40
 800088e:	4b5e      	ldr	r3, [pc, #376]	@ (8000a08 <HAL_I2S_MspInit+0x1dc>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b5a      	ldr	r3, [pc, #360]	@ (8000a08 <HAL_I2S_MspInit+0x1dc>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a59      	ldr	r2, [pc, #356]	@ (8000a08 <HAL_I2S_MspInit+0x1dc>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b57      	ldr	r3, [pc, #348]	@ (8000a08 <HAL_I2S_MspInit+0x1dc>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b53      	ldr	r3, [pc, #332]	@ (8000a08 <HAL_I2S_MspInit+0x1dc>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a52      	ldr	r2, [pc, #328]	@ (8000a08 <HAL_I2S_MspInit+0x1dc>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b50      	ldr	r3, [pc, #320]	@ (8000a08 <HAL_I2S_MspInit+0x1dc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80008d2:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e4:	2305      	movs	r3, #5
 80008e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ec:	4619      	mov	r1, r3
 80008ee:	4847      	ldr	r0, [pc, #284]	@ (8000a0c <HAL_I2S_MspInit+0x1e0>)
 80008f0:	f000 ff60 	bl	80017b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000906:	2306      	movs	r3, #6
 8000908:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090e:	4619      	mov	r1, r3
 8000910:	483e      	ldr	r0, [pc, #248]	@ (8000a0c <HAL_I2S_MspInit+0x1e0>)
 8000912:	f000 ff4f 	bl	80017b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000916:	2340      	movs	r3, #64	@ 0x40
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000926:	2305      	movs	r3, #5
 8000928:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092e:	4619      	mov	r1, r3
 8000930:	4837      	ldr	r0, [pc, #220]	@ (8000a10 <HAL_I2S_MspInit+0x1e4>)
 8000932:	f000 ff3f 	bl	80017b4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000936:	4b37      	ldr	r3, [pc, #220]	@ (8000a14 <HAL_I2S_MspInit+0x1e8>)
 8000938:	4a37      	ldr	r2, [pc, #220]	@ (8000a18 <HAL_I2S_MspInit+0x1ec>)
 800093a:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 800093c:	4b35      	ldr	r3, [pc, #212]	@ (8000a14 <HAL_I2S_MspInit+0x1e8>)
 800093e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000942:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000944:	4b33      	ldr	r3, [pc, #204]	@ (8000a14 <HAL_I2S_MspInit+0x1e8>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800094a:	4b32      	ldr	r3, [pc, #200]	@ (8000a14 <HAL_I2S_MspInit+0x1e8>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000950:	4b30      	ldr	r3, [pc, #192]	@ (8000a14 <HAL_I2S_MspInit+0x1e8>)
 8000952:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000956:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000958:	4b2e      	ldr	r3, [pc, #184]	@ (8000a14 <HAL_I2S_MspInit+0x1e8>)
 800095a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800095e:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000960:	4b2c      	ldr	r3, [pc, #176]	@ (8000a14 <HAL_I2S_MspInit+0x1e8>)
 8000962:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000966:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000968:	4b2a      	ldr	r3, [pc, #168]	@ (8000a14 <HAL_I2S_MspInit+0x1e8>)
 800096a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800096e:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000970:	4b28      	ldr	r3, [pc, #160]	@ (8000a14 <HAL_I2S_MspInit+0x1e8>)
 8000972:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000976:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000978:	4b26      	ldr	r3, [pc, #152]	@ (8000a14 <HAL_I2S_MspInit+0x1e8>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 800097e:	4825      	ldr	r0, [pc, #148]	@ (8000a14 <HAL_I2S_MspInit+0x1e8>)
 8000980:	f000 fb9c 	bl	80010bc <HAL_DMA_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 800098a:	f7ff ff21 	bl	80007d0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a20      	ldr	r2, [pc, #128]	@ (8000a14 <HAL_I2S_MspInit+0x1e8>)
 8000992:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000994:	4a1f      	ldr	r2, [pc, #124]	@ (8000a14 <HAL_I2S_MspInit+0x1e8>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800099a:	4b20      	ldr	r3, [pc, #128]	@ (8000a1c <HAL_I2S_MspInit+0x1f0>)
 800099c:	4a20      	ldr	r2, [pc, #128]	@ (8000a20 <HAL_I2S_MspInit+0x1f4>)
 800099e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80009a0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a1c <HAL_I2S_MspInit+0x1f0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a1c <HAL_I2S_MspInit+0x1f0>)
 80009a8:	2240      	movs	r2, #64	@ 0x40
 80009aa:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <HAL_I2S_MspInit+0x1f0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <HAL_I2S_MspInit+0x1f0>)
 80009b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009b8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009ba:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <HAL_I2S_MspInit+0x1f0>)
 80009bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009c0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009c2:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <HAL_I2S_MspInit+0x1f0>)
 80009c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009c8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <HAL_I2S_MspInit+0x1f0>)
 80009cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009d0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <HAL_I2S_MspInit+0x1f0>)
 80009d4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009d8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009da:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <HAL_I2S_MspInit+0x1f0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80009e0:	480e      	ldr	r0, [pc, #56]	@ (8000a1c <HAL_I2S_MspInit+0x1f0>)
 80009e2:	f000 fb6b 	bl	80010bc <HAL_DMA_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 80009ec:	f7ff fef0 	bl	80007d0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <HAL_I2S_MspInit+0x1f0>)
 80009f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80009f6:	4a09      	ldr	r2, [pc, #36]	@ (8000a1c <HAL_I2S_MspInit+0x1f0>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80009fc:	bf00      	nop
 80009fe:	3738      	adds	r7, #56	@ 0x38
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40003800 	.word	0x40003800
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020400 	.word	0x40020400
 8000a10:	40020800 	.word	0x40020800
 8000a14:	200000e0 	.word	0x200000e0
 8000a18:	40026058 	.word	0x40026058
 8000a1c:	20000140 	.word	0x20000140
 8000a20:	40026070 	.word	0x40026070

08000a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	@ 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab8 <HAL_UART_MspInit+0x94>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d134      	bne.n	8000ab0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <HAL_UART_MspInit+0x98>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8000abc <HAL_UART_MspInit+0x98>)
 8000a50:	f043 0310 	orr.w	r3, r3, #16
 8000a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a56:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <HAL_UART_MspInit+0x98>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5a:	f003 0310 	and.w	r3, r3, #16
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <HAL_UART_MspInit+0x98>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a14      	ldr	r2, [pc, #80]	@ (8000abc <HAL_UART_MspInit+0x98>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <HAL_UART_MspInit+0x98>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a7e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a90:	2307      	movs	r3, #7
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4809      	ldr	r0, [pc, #36]	@ (8000ac0 <HAL_UART_MspInit+0x9c>)
 8000a9c:	f000 fe8a 	bl	80017b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2025      	movs	r0, #37	@ 0x25
 8000aa6:	f000 fad2 	bl	800104e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000aaa:	2025      	movs	r0, #37	@ 0x25
 8000aac:	f000 faeb 	bl	8001086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	@ 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40011000 	.word	0x40011000
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020000 	.word	0x40020000

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <NMI_Handler+0x4>

08000acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <MemManage_Handler+0x4>

08000adc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1a:	f000 f979 	bl	8000e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000b28:	4802      	ldr	r0, [pc, #8]	@ (8000b34 <DMA1_Stream3_IRQHandler+0x10>)
 8000b2a:	f000 fc07 	bl	800133c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200000e0 	.word	0x200000e0

08000b38 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000b3c:	4802      	ldr	r0, [pc, #8]	@ (8000b48 <DMA1_Stream4_IRQHandler+0x10>)
 8000b3e:	f000 fbfd 	bl	800133c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000140 	.word	0x20000140

08000b4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b50:	4802      	ldr	r0, [pc, #8]	@ (8000b5c <USART1_IRQHandler+0x10>)
 8000b52:	f002 fb79 	bl	8003248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200001a0 	.word	0x200001a0

08000b60 <ITM_SendChar>:
#define DEMCR                 *((volatile uint32_t*) 0xE000EDFCU)
#define ITM_STIMULUS_PORT0    *((volatile uint32_t*) 0xE00000000)

/* Debug function for printf used in __write() */
void ITM_SendChar(uint8_t ch)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
	// Enable TRCENA
	DEMCR |= (1<<24);
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <ITM_SendChar+0x48>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba8 <ITM_SendChar+0x48>)
 8000b70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b74:	6013      	str	r3, [r2, #0]

	// Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 8000b76:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6013      	str	r3, [r2, #0]

	// Read FIFO status in bit[0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000b86:	bf00      	nop
 8000b88:	2300      	movs	r3, #0
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d0f9      	beq.n	8000b88 <ITM_SendChar+0x28>

	// Write to ITM Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 8000b94:	2200      	movs	r2, #0
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	6013      	str	r3, [r2, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000edfc 	.word	0xe000edfc

08000bac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	e00a      	b.n	8000bd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bbe:	f3af 8000 	nop.w
 8000bc2:	4601      	mov	r1, r0
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	1c5a      	adds	r2, r3, #1
 8000bc8:	60ba      	str	r2, [r7, #8]
 8000bca:	b2ca      	uxtb	r2, r1
 8000bcc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	697a      	ldr	r2, [r7, #20]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	dbf0      	blt.n	8000bbe <_read+0x12>
  }

  return len;
 8000bdc:	687b      	ldr	r3, [r7, #4]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b086      	sub	sp, #24
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	e009      	b.n	8000c0c <_write+0x26>
  {
//    __io_putchar(*ptr++);
	ITM_SendChar(*ptr++);
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	60ba      	str	r2, [r7, #8]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ffad 	bl	8000b60 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	dbf1      	blt.n	8000bf8 <_write+0x12>
  }
  return len;
 8000c14:	687b      	ldr	r3, [r7, #4]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <_close>:

int _close(int file)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
 8000c3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c46:	605a      	str	r2, [r3, #4]
  return 0;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <_isatty>:

int _isatty(int file)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c90:	4a14      	ldr	r2, [pc, #80]	@ (8000ce4 <_sbrk+0x5c>)
 8000c92:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <_sbrk+0x60>)
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c9c:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d102      	bne.n	8000caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <_sbrk+0x64>)
 8000ca6:	4a12      	ldr	r2, [pc, #72]	@ (8000cf0 <_sbrk+0x68>)
 8000ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000caa:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d207      	bcs.n	8000cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb8:	f003 fc62 	bl	8004580 <__errno>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	e009      	b.n	8000cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cce:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4a05      	ldr	r2, [pc, #20]	@ (8000cec <_sbrk+0x64>)
 8000cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cda:	68fb      	ldr	r3, [r7, #12]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20020000 	.word	0x20020000
 8000ce8:	00000400 	.word	0x00000400
 8000cec:	20000230 	.word	0x20000230
 8000cf0:	20000388 	.word	0x20000388

08000cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <SystemInit+0x20>)
 8000cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cfe:	4a05      	ldr	r2, [pc, #20]	@ (8000d14 <SystemInit+0x20>)
 8000d00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d1c:	f7ff ffea 	bl	8000cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d20:	480c      	ldr	r0, [pc, #48]	@ (8000d54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d22:	490d      	ldr	r1, [pc, #52]	@ (8000d58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d24:	4a0d      	ldr	r2, [pc, #52]	@ (8000d5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d38:	4c0a      	ldr	r4, [pc, #40]	@ (8000d64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d46:	f003 fc21 	bl	800458c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4a:	f7ff fbb5 	bl	80004b8 <main>
  bx  lr    
 8000d4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d58:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d5c:	08004aa0 	.word	0x08004aa0
  ldr r2, =_sbss
 8000d60:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d64:	20000384 	.word	0x20000384

08000d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC_IRQHandler>
	...

08000d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d70:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0d      	ldr	r2, [pc, #52]	@ (8000dac <HAL_Init+0x40>)
 8000d76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <HAL_Init+0x40>)
 8000d82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	@ (8000dac <HAL_Init+0x40>)
 8000d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f94f 	bl	8001038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f000 f808 	bl	8000db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f7ff fd1c 	bl	80007dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023c00 	.word	0x40023c00

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <HAL_InitTick+0x54>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <HAL_InitTick+0x58>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f967 	bl	80010a2 <HAL_SYSTICK_Config>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00e      	b.n	8000dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d80a      	bhi.n	8000dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de4:	2200      	movs	r2, #0
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f000 f92f 	bl	800104e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df0:	4a06      	ldr	r2, [pc, #24]	@ (8000e0c <HAL_InitTick+0x5c>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000014 	.word	0x20000014
 8000e08:	2000001c 	.word	0x2000001c
 8000e0c:	20000018 	.word	0x20000018

08000e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	2000001c 	.word	0x2000001c
 8000e34:	20000234 	.word	0x20000234

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	@ (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000234 	.word	0x20000234

08000e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e58:	f7ff ffee 	bl	8000e38 <HAL_GetTick>
 8000e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e68:	d005      	beq.n	8000e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <HAL_Delay+0x44>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e76:	bf00      	nop
 8000e78:	f7ff ffde 	bl	8000e38 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d8f7      	bhi.n	8000e78 <HAL_Delay+0x28>
  {
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000001c 	.word	0x2000001c

08000e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eca:	4a04      	ldr	r2, [pc, #16]	@ (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	60d3      	str	r3, [r2, #12]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee4:	4b04      	ldr	r3, [pc, #16]	@ (8000ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	f003 0307 	and.w	r3, r3, #7
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	db0b      	blt.n	8000f26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f003 021f 	and.w	r2, r3, #31
 8000f14:	4907      	ldr	r1, [pc, #28]	@ (8000f34 <__NVIC_EnableIRQ+0x38>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	095b      	lsrs	r3, r3, #5
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000e100 	.word	0xe000e100

08000f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	db0a      	blt.n	8000f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	490c      	ldr	r1, [pc, #48]	@ (8000f84 <__NVIC_SetPriority+0x4c>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	0112      	lsls	r2, r2, #4
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f60:	e00a      	b.n	8000f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4908      	ldr	r1, [pc, #32]	@ (8000f88 <__NVIC_SetPriority+0x50>)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	f003 030f 	and.w	r3, r3, #15
 8000f6e:	3b04      	subs	r3, #4
 8000f70:	0112      	lsls	r2, r2, #4
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	440b      	add	r3, r1
 8000f76:	761a      	strb	r2, [r3, #24]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000e100 	.word	0xe000e100
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	@ 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f1c3 0307 	rsb	r3, r3, #7
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	bf28      	it	cs
 8000faa:	2304      	movcs	r3, #4
 8000fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	2b06      	cmp	r3, #6
 8000fb4:	d902      	bls.n	8000fbc <NVIC_EncodePriority+0x30>
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3b03      	subs	r3, #3
 8000fba:	e000      	b.n	8000fbe <NVIC_EncodePriority+0x32>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	401a      	ands	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	43d9      	mvns	r1, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	4313      	orrs	r3, r2
         );
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3724      	adds	r7, #36	@ 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001004:	d301      	bcc.n	800100a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001006:	2301      	movs	r3, #1
 8001008:	e00f      	b.n	800102a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100a:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <SysTick_Config+0x40>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001012:	210f      	movs	r1, #15
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f7ff ff8e 	bl	8000f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <SysTick_Config+0x40>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001022:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <SysTick_Config+0x40>)
 8001024:	2207      	movs	r2, #7
 8001026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	e000e010 	.word	0xe000e010

08001038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ff29 	bl	8000e98 <__NVIC_SetPriorityGrouping>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001060:	f7ff ff3e 	bl	8000ee0 <__NVIC_GetPriorityGrouping>
 8001064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	6978      	ldr	r0, [r7, #20]
 800106c:	f7ff ff8e 	bl	8000f8c <NVIC_EncodePriority>
 8001070:	4602      	mov	r2, r0
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff5d 	bl	8000f38 <__NVIC_SetPriority>
}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff31 	bl	8000efc <__NVIC_EnableIRQ>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffa2 	bl	8000ff4 <SysTick_Config>
 80010b0:	4603      	mov	r3, r0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010c8:	f7ff feb6 	bl	8000e38 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e099      	b.n	800120c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2202      	movs	r2, #2
 80010dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0201 	bic.w	r2, r2, #1
 80010f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010f8:	e00f      	b.n	800111a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010fa:	f7ff fe9d 	bl	8000e38 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b05      	cmp	r3, #5
 8001106:	d908      	bls.n	800111a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2220      	movs	r2, #32
 800110c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2203      	movs	r2, #3
 8001112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e078      	b.n	800120c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1e8      	bne.n	80010fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	4b38      	ldr	r3, [pc, #224]	@ (8001214 <HAL_DMA_Init+0x158>)
 8001134:	4013      	ands	r3, r2
 8001136:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001146:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001152:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800115e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4313      	orrs	r3, r2
 800116a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001170:	2b04      	cmp	r3, #4
 8001172:	d107      	bne.n	8001184 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117c:	4313      	orrs	r3, r2
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	4313      	orrs	r3, r2
 8001182:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f023 0307 	bic.w	r3, r3, #7
 800119a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d117      	bne.n	80011de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00e      	beq.n	80011de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 fa7b 	bl	80016bc <DMA_CheckFifoParam>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d008      	beq.n	80011de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2240      	movs	r2, #64	@ 0x40
 80011d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80011da:	2301      	movs	r3, #1
 80011dc:	e016      	b.n	800120c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 fa32 	bl	8001650 <DMA_CalcBaseAndBitshift>
 80011ec:	4603      	mov	r3, r0
 80011ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011f4:	223f      	movs	r2, #63	@ 0x3f
 80011f6:	409a      	lsls	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	f010803f 	.word	0xf010803f

08001218 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001224:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001226:	f7ff fe07 	bl	8000e38 <HAL_GetTick>
 800122a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d008      	beq.n	800124a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2280      	movs	r2, #128	@ 0x80
 800123c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e052      	b.n	80012f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0216 	bic.w	r2, r2, #22
 8001258:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	695a      	ldr	r2, [r3, #20]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001268:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	2b00      	cmp	r3, #0
 8001270:	d103      	bne.n	800127a <HAL_DMA_Abort+0x62>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001276:	2b00      	cmp	r3, #0
 8001278:	d007      	beq.n	800128a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0208 	bic.w	r2, r2, #8
 8001288:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0201 	bic.w	r2, r2, #1
 8001298:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800129a:	e013      	b.n	80012c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800129c:	f7ff fdcc 	bl	8000e38 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b05      	cmp	r3, #5
 80012a8:	d90c      	bls.n	80012c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2220      	movs	r2, #32
 80012ae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2203      	movs	r2, #3
 80012b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e015      	b.n	80012f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1e4      	bne.n	800129c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012d6:	223f      	movs	r2, #63	@ 0x3f
 80012d8:	409a      	lsls	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d004      	beq.n	8001316 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2280      	movs	r2, #128	@ 0x80
 8001310:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e00c      	b.n	8001330 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2205      	movs	r2, #5
 800131a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0201 	bic.w	r2, r2, #1
 800132c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001348:	4b8e      	ldr	r3, [pc, #568]	@ (8001584 <HAL_DMA_IRQHandler+0x248>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a8e      	ldr	r2, [pc, #568]	@ (8001588 <HAL_DMA_IRQHandler+0x24c>)
 800134e:	fba2 2303 	umull	r2, r3, r2, r3
 8001352:	0a9b      	lsrs	r3, r3, #10
 8001354:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001366:	2208      	movs	r2, #8
 8001368:	409a      	lsls	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4013      	ands	r3, r2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d01a      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	2b00      	cmp	r3, #0
 800137e:	d013      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0204 	bic.w	r2, r2, #4
 800138e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001394:	2208      	movs	r2, #8
 8001396:	409a      	lsls	r2, r3
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013a0:	f043 0201 	orr.w	r2, r3, #1
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ac:	2201      	movs	r2, #1
 80013ae:	409a      	lsls	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d012      	beq.n	80013de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ca:	2201      	movs	r2, #1
 80013cc:	409a      	lsls	r2, r3
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013d6:	f043 0202 	orr.w	r2, r3, #2
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e2:	2204      	movs	r2, #4
 80013e4:	409a      	lsls	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d012      	beq.n	8001414 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00b      	beq.n	8001414 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001400:	2204      	movs	r2, #4
 8001402:	409a      	lsls	r2, r3
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800140c:	f043 0204 	orr.w	r2, r3, #4
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001418:	2210      	movs	r2, #16
 800141a:	409a      	lsls	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4013      	ands	r3, r2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d043      	beq.n	80014ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d03c      	beq.n	80014ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001436:	2210      	movs	r2, #16
 8001438:	409a      	lsls	r2, r3
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d018      	beq.n	800147e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d108      	bne.n	800146c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	2b00      	cmp	r3, #0
 8001460:	d024      	beq.n	80014ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	4798      	blx	r3
 800146a:	e01f      	b.n	80014ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001470:	2b00      	cmp	r3, #0
 8001472:	d01b      	beq.n	80014ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	4798      	blx	r3
 800147c:	e016      	b.n	80014ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001488:	2b00      	cmp	r3, #0
 800148a:	d107      	bne.n	800149c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0208 	bic.w	r2, r2, #8
 800149a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b0:	2220      	movs	r2, #32
 80014b2:	409a      	lsls	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4013      	ands	r3, r2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 808f 	beq.w	80015dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 8087 	beq.w	80015dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014d2:	2220      	movs	r2, #32
 80014d4:	409a      	lsls	r2, r3
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b05      	cmp	r3, #5
 80014e4:	d136      	bne.n	8001554 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0216 	bic.w	r2, r2, #22
 80014f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	695a      	ldr	r2, [r3, #20]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001504:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	2b00      	cmp	r3, #0
 800150c:	d103      	bne.n	8001516 <HAL_DMA_IRQHandler+0x1da>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0208 	bic.w	r2, r2, #8
 8001524:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800152a:	223f      	movs	r2, #63	@ 0x3f
 800152c:	409a      	lsls	r2, r3
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001546:	2b00      	cmp	r3, #0
 8001548:	d07e      	beq.n	8001648 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	4798      	blx	r3
        }
        return;
 8001552:	e079      	b.n	8001648 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d01d      	beq.n	800159e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10d      	bne.n	800158c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001574:	2b00      	cmp	r3, #0
 8001576:	d031      	beq.n	80015dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	4798      	blx	r3
 8001580:	e02c      	b.n	80015dc <HAL_DMA_IRQHandler+0x2a0>
 8001582:	bf00      	nop
 8001584:	20000014 	.word	0x20000014
 8001588:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001590:	2b00      	cmp	r3, #0
 8001592:	d023      	beq.n	80015dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	4798      	blx	r3
 800159c:	e01e      	b.n	80015dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10f      	bne.n	80015cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0210 	bic.w	r2, r2, #16
 80015ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d032      	beq.n	800164a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d022      	beq.n	8001636 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2205      	movs	r2, #5
 80015f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0201 	bic.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	3301      	adds	r3, #1
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	429a      	cmp	r2, r3
 8001612:	d307      	bcc.n	8001624 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f2      	bne.n	8001608 <HAL_DMA_IRQHandler+0x2cc>
 8001622:	e000      	b.n	8001626 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001624:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163a:	2b00      	cmp	r3, #0
 800163c:	d005      	beq.n	800164a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	4798      	blx	r3
 8001646:	e000      	b.n	800164a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001648:	bf00      	nop
    }
  }
}
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	3b10      	subs	r3, #16
 8001660:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <DMA_CalcBaseAndBitshift+0x64>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800166a:	4a13      	ldr	r2, [pc, #76]	@ (80016b8 <DMA_CalcBaseAndBitshift+0x68>)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4413      	add	r3, r2
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b03      	cmp	r3, #3
 800167c:	d909      	bls.n	8001692 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001686:	f023 0303 	bic.w	r3, r3, #3
 800168a:	1d1a      	adds	r2, r3, #4
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001690:	e007      	b.n	80016a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800169a:	f023 0303 	bic.w	r3, r3, #3
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	aaaaaaab 	.word	0xaaaaaaab
 80016b8:	08004a88 	.word	0x08004a88

080016bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d11f      	bne.n	8001716 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d856      	bhi.n	800178a <DMA_CheckFifoParam+0xce>
 80016dc:	a201      	add	r2, pc, #4	@ (adr r2, 80016e4 <DMA_CheckFifoParam+0x28>)
 80016de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e2:	bf00      	nop
 80016e4:	080016f5 	.word	0x080016f5
 80016e8:	08001707 	.word	0x08001707
 80016ec:	080016f5 	.word	0x080016f5
 80016f0:	0800178b 	.word	0x0800178b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d046      	beq.n	800178e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001704:	e043      	b.n	800178e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800170e:	d140      	bne.n	8001792 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001714:	e03d      	b.n	8001792 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800171e:	d121      	bne.n	8001764 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2b03      	cmp	r3, #3
 8001724:	d837      	bhi.n	8001796 <DMA_CheckFifoParam+0xda>
 8001726:	a201      	add	r2, pc, #4	@ (adr r2, 800172c <DMA_CheckFifoParam+0x70>)
 8001728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172c:	0800173d 	.word	0x0800173d
 8001730:	08001743 	.word	0x08001743
 8001734:	0800173d 	.word	0x0800173d
 8001738:	08001755 	.word	0x08001755
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
      break;
 8001740:	e030      	b.n	80017a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001746:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d025      	beq.n	800179a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001752:	e022      	b.n	800179a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001758:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800175c:	d11f      	bne.n	800179e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001762:	e01c      	b.n	800179e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d903      	bls.n	8001772 <DMA_CheckFifoParam+0xb6>
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b03      	cmp	r3, #3
 800176e:	d003      	beq.n	8001778 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001770:	e018      	b.n	80017a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
      break;
 8001776:	e015      	b.n	80017a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800177c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00e      	beq.n	80017a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
      break;
 8001788:	e00b      	b.n	80017a2 <DMA_CheckFifoParam+0xe6>
      break;
 800178a:	bf00      	nop
 800178c:	e00a      	b.n	80017a4 <DMA_CheckFifoParam+0xe8>
      break;
 800178e:	bf00      	nop
 8001790:	e008      	b.n	80017a4 <DMA_CheckFifoParam+0xe8>
      break;
 8001792:	bf00      	nop
 8001794:	e006      	b.n	80017a4 <DMA_CheckFifoParam+0xe8>
      break;
 8001796:	bf00      	nop
 8001798:	e004      	b.n	80017a4 <DMA_CheckFifoParam+0xe8>
      break;
 800179a:	bf00      	nop
 800179c:	e002      	b.n	80017a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800179e:	bf00      	nop
 80017a0:	e000      	b.n	80017a4 <DMA_CheckFifoParam+0xe8>
      break;
 80017a2:	bf00      	nop
    }
  } 
  
  return status; 
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	@ 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	e16b      	b.n	8001aa8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017d0:	2201      	movs	r2, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	f040 815a 	bne.w	8001aa2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d005      	beq.n	8001806 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001802:	2b02      	cmp	r3, #2
 8001804:	d130      	bne.n	8001868 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	2203      	movs	r2, #3
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800183c:	2201      	movs	r2, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 0201 	and.w	r2, r3, #1
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b03      	cmp	r3, #3
 8001872:	d017      	beq.n	80018a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d123      	bne.n	80018f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	08da      	lsrs	r2, r3, #3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3208      	adds	r2, #8
 80018b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	69b9      	ldr	r1, [r7, #24]
 80018f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2203      	movs	r2, #3
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0203 	and.w	r2, r3, #3
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80b4 	beq.w	8001aa2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b60      	ldr	r3, [pc, #384]	@ (8001ac0 <HAL_GPIO_Init+0x30c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	4a5f      	ldr	r2, [pc, #380]	@ (8001ac0 <HAL_GPIO_Init+0x30c>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001948:	6453      	str	r3, [r2, #68]	@ 0x44
 800194a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ac0 <HAL_GPIO_Init+0x30c>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001956:	4a5b      	ldr	r2, [pc, #364]	@ (8001ac4 <HAL_GPIO_Init+0x310>)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	3302      	adds	r3, #2
 800195e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a52      	ldr	r2, [pc, #328]	@ (8001ac8 <HAL_GPIO_Init+0x314>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d02b      	beq.n	80019da <HAL_GPIO_Init+0x226>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a51      	ldr	r2, [pc, #324]	@ (8001acc <HAL_GPIO_Init+0x318>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d025      	beq.n	80019d6 <HAL_GPIO_Init+0x222>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a50      	ldr	r2, [pc, #320]	@ (8001ad0 <HAL_GPIO_Init+0x31c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d01f      	beq.n	80019d2 <HAL_GPIO_Init+0x21e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4f      	ldr	r2, [pc, #316]	@ (8001ad4 <HAL_GPIO_Init+0x320>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d019      	beq.n	80019ce <HAL_GPIO_Init+0x21a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ad8 <HAL_GPIO_Init+0x324>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <HAL_GPIO_Init+0x216>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4d      	ldr	r2, [pc, #308]	@ (8001adc <HAL_GPIO_Init+0x328>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00d      	beq.n	80019c6 <HAL_GPIO_Init+0x212>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a4c      	ldr	r2, [pc, #304]	@ (8001ae0 <HAL_GPIO_Init+0x32c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d007      	beq.n	80019c2 <HAL_GPIO_Init+0x20e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ae4 <HAL_GPIO_Init+0x330>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d101      	bne.n	80019be <HAL_GPIO_Init+0x20a>
 80019ba:	2307      	movs	r3, #7
 80019bc:	e00e      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019be:	2308      	movs	r3, #8
 80019c0:	e00c      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019c2:	2306      	movs	r3, #6
 80019c4:	e00a      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019c6:	2305      	movs	r3, #5
 80019c8:	e008      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019ca:	2304      	movs	r3, #4
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019ce:	2303      	movs	r3, #3
 80019d0:	e004      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e002      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019da:	2300      	movs	r3, #0
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	f002 0203 	and.w	r2, r2, #3
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	4093      	lsls	r3, r2
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ec:	4935      	ldr	r1, [pc, #212]	@ (8001ac4 <HAL_GPIO_Init+0x310>)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019fa:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae8 <HAL_GPIO_Init+0x334>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a1e:	4a32      	ldr	r2, [pc, #200]	@ (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a24:	4b30      	ldr	r3, [pc, #192]	@ (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a48:	4a27      	ldr	r2, [pc, #156]	@ (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a72:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a9c:	4a12      	ldr	r2, [pc, #72]	@ (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b0f      	cmp	r3, #15
 8001aac:	f67f ae90 	bls.w	80017d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3724      	adds	r7, #36	@ 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40013800 	.word	0x40013800
 8001ac8:	40020000 	.word	0x40020000
 8001acc:	40020400 	.word	0x40020400
 8001ad0:	40020800 	.word	0x40020800
 8001ad4:	40020c00 	.word	0x40020c00
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40021400 	.word	0x40021400
 8001ae0:	40021800 	.word	0x40021800
 8001ae4:	40021c00 	.word	0x40021c00
 8001ae8:	40013c00 	.word	0x40013c00

08001aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
 8001af8:	4613      	mov	r3, r2
 8001afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001afc:	787b      	ldrb	r3, [r7, #1]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b08:	e003      	b.n	8001b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b0a:	887b      	ldrh	r3, [r7, #2]
 8001b0c:	041a      	lsls	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	619a      	str	r2, [r3, #24]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b085      	sub	sp, #20
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	460b      	mov	r3, r1
 8001b28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b30:	887a      	ldrh	r2, [r7, #2]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4013      	ands	r3, r2
 8001b36:	041a      	lsls	r2, r3, #16
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	887b      	ldrh	r3, [r7, #2]
 8001b3e:	400b      	ands	r3, r1
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	619a      	str	r2, [r3, #24]
}
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e128      	b.n	8001db8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a90      	ldr	r2, [pc, #576]	@ (8001dc0 <HAL_I2S_Init+0x26c>)
 8001b7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7fe fe53 	bl	800082c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001b9c:	f023 030f 	bic.w	r3, r3, #15
 8001ba0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d060      	beq.n	8001c74 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d102      	bne.n	8001bc0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001bba:	2310      	movs	r3, #16
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e001      	b.n	8001bc4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001bc0:	2320      	movs	r3, #32
 8001bc2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d802      	bhi.n	8001bd2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f001 f9d8 	bl	8002f88 <HAL_RCCEx_GetPeriphCLKFreq>
 8001bd8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001be2:	d125      	bne.n	8001c30 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d010      	beq.n	8001c0e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	461a      	mov	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	3305      	adds	r3, #5
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	e01f      	b.n	8001c4e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	461a      	mov	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	3305      	adds	r3, #5
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	e00e      	b.n	8001c4e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	461a      	mov	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	3305      	adds	r3, #5
 8001c4c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4a5c      	ldr	r2, [pc, #368]	@ (8001dc4 <HAL_I2S_Init+0x270>)
 8001c52:	fba2 2303 	umull	r2, r3, r2, r3
 8001c56:	08db      	lsrs	r3, r3, #3
 8001c58:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	085b      	lsrs	r3, r3, #1
 8001c6a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	61bb      	str	r3, [r7, #24]
 8001c72:	e003      	b.n	8001c7c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d902      	bls.n	8001c88 <HAL_I2S_Init+0x134>
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	2bff      	cmp	r3, #255	@ 0xff
 8001c86:	d907      	bls.n	8001c98 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8c:	f043 0210 	orr.w	r2, r3, #16
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e08f      	b.n	8001db8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	ea42 0103 	orr.w	r1, r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001cb6:	f023 030f 	bic.w	r3, r3, #15
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6851      	ldr	r1, [r2, #4]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6892      	ldr	r2, [r2, #8]
 8001cc2:	4311      	orrs	r1, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	68d2      	ldr	r2, [r2, #12]
 8001cc8:	4311      	orrs	r1, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6992      	ldr	r2, [r2, #24]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cda:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d161      	bne.n	8001da8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a38      	ldr	r2, [pc, #224]	@ (8001dc8 <HAL_I2S_Init+0x274>)
 8001ce8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a37      	ldr	r2, [pc, #220]	@ (8001dcc <HAL_I2S_Init+0x278>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d101      	bne.n	8001cf8 <HAL_I2S_Init+0x1a4>
 8001cf4:	4b36      	ldr	r3, [pc, #216]	@ (8001dd0 <HAL_I2S_Init+0x27c>)
 8001cf6:	e001      	b.n	8001cfc <HAL_I2S_Init+0x1a8>
 8001cf8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	4932      	ldr	r1, [pc, #200]	@ (8001dcc <HAL_I2S_Init+0x278>)
 8001d04:	428a      	cmp	r2, r1
 8001d06:	d101      	bne.n	8001d0c <HAL_I2S_Init+0x1b8>
 8001d08:	4a31      	ldr	r2, [pc, #196]	@ (8001dd0 <HAL_I2S_Init+0x27c>)
 8001d0a:	e001      	b.n	8001d10 <HAL_I2S_Init+0x1bc>
 8001d0c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001d10:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001d14:	f023 030f 	bic.w	r3, r3, #15
 8001d18:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a2b      	ldr	r2, [pc, #172]	@ (8001dcc <HAL_I2S_Init+0x278>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d101      	bne.n	8001d28 <HAL_I2S_Init+0x1d4>
 8001d24:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <HAL_I2S_Init+0x27c>)
 8001d26:	e001      	b.n	8001d2c <HAL_I2S_Init+0x1d8>
 8001d28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a25      	ldr	r2, [pc, #148]	@ (8001dcc <HAL_I2S_Init+0x278>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_I2S_Init+0x1ea>
 8001d3a:	4b25      	ldr	r3, [pc, #148]	@ (8001dd0 <HAL_I2S_Init+0x27c>)
 8001d3c:	e001      	b.n	8001d42 <HAL_I2S_Init+0x1ee>
 8001d3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d4e:	d003      	beq.n	8001d58 <HAL_I2S_Init+0x204>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d103      	bne.n	8001d60 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001d58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	e001      	b.n	8001d64 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d82:	4313      	orrs	r3, r2
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	897b      	ldrh	r3, [r7, #10]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d90:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a0d      	ldr	r2, [pc, #52]	@ (8001dcc <HAL_I2S_Init+0x278>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_I2S_Init+0x24c>
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <HAL_I2S_Init+0x27c>)
 8001d9e:	e001      	b.n	8001da4 <HAL_I2S_Init+0x250>
 8001da0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001da4:	897a      	ldrh	r2, [r7, #10]
 8001da6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3720      	adds	r7, #32
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	08001ecb 	.word	0x08001ecb
 8001dc4:	cccccccd 	.word	0xcccccccd
 8001dc8:	08001fe1 	.word	0x08001fe1
 8001dcc:	40003800 	.word	0x40003800
 8001dd0:	40003400 	.word	0x40003400

08001dd4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	881a      	ldrh	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e28:	1c9a      	adds	r2, r3, #2
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	3b01      	subs	r3, #1
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10e      	bne.n	8001e64 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001e54:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ffb8 	bl	8001dd4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7e:	b292      	uxth	r2, r2
 8001e80:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e86:	1c9a      	adds	r2, r3, #2
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10e      	bne.n	8001ec2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001eb2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff93 	bl	8001de8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d13a      	bne.n	8001f5c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d109      	bne.n	8001f04 <I2S_IRQHandler+0x3a>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001efa:	2b40      	cmp	r3, #64	@ 0x40
 8001efc:	d102      	bne.n	8001f04 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffb4 	bl	8001e6c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f0a:	2b40      	cmp	r3, #64	@ 0x40
 8001f0c:	d126      	bne.n	8001f5c <I2S_IRQHandler+0x92>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	d11f      	bne.n	8001f5c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f2a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	f043 0202 	orr.w	r2, r3, #2
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ff50 	bl	8001dfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d136      	bne.n	8001fd6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d109      	bne.n	8001f86 <I2S_IRQHandler+0xbc>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f7c:	2b80      	cmp	r3, #128	@ 0x80
 8001f7e:	d102      	bne.n	8001f86 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff45 	bl	8001e10 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d122      	bne.n	8001fd6 <I2S_IRQHandler+0x10c>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	2b20      	cmp	r3, #32
 8001f9c:	d11b      	bne.n	8001fd6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001fac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc8:	f043 0204 	orr.w	r2, r3, #4
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff13 	bl	8001dfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a92      	ldr	r2, [pc, #584]	@ (8002240 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d101      	bne.n	8001ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001ffa:	4b92      	ldr	r3, [pc, #584]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ffc:	e001      	b.n	8002002 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001ffe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a8b      	ldr	r2, [pc, #556]	@ (8002240 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002018:	4b8a      	ldr	r3, [pc, #552]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800201a:	e001      	b.n	8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800201c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800202c:	d004      	beq.n	8002038 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 8099 	bne.w	800216a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b02      	cmp	r3, #2
 8002040:	d107      	bne.n	8002052 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f925 	bl	800229c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	d107      	bne.n	800206c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f9c8 	bl	80023fc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002072:	2b40      	cmp	r3, #64	@ 0x40
 8002074:	d13a      	bne.n	80020ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	2b00      	cmp	r3, #0
 800207e:	d035      	beq.n	80020ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a6e      	ldr	r2, [pc, #440]	@ (8002240 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800208a:	4b6e      	ldr	r3, [pc, #440]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800208c:	e001      	b.n	8002092 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800208e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4969      	ldr	r1, [pc, #420]	@ (8002240 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800209a:	428b      	cmp	r3, r1
 800209c:	d101      	bne.n	80020a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800209e:	4b69      	ldr	r3, [pc, #420]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020a0:	e001      	b.n	80020a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80020a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80020aa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80020ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	f043 0202 	orr.w	r2, r3, #2
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff fe88 	bl	8001dfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	f040 80c3 	bne.w	800227e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 80bd 	beq.w	800227e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002112:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a49      	ldr	r2, [pc, #292]	@ (8002240 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d101      	bne.n	8002122 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800211e:	4b49      	ldr	r3, [pc, #292]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002120:	e001      	b.n	8002126 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002122:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4944      	ldr	r1, [pc, #272]	@ (8002240 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800212e:	428b      	cmp	r3, r1
 8002130:	d101      	bne.n	8002136 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002132:	4b44      	ldr	r3, [pc, #272]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002134:	e001      	b.n	800213a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002136:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800213a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800213e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	f043 0204 	orr.w	r2, r3, #4
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff fe4a 	bl	8001dfc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002168:	e089      	b.n	800227e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b02      	cmp	r3, #2
 8002172:	d107      	bne.n	8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f8be 	bl	8002300 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b01      	cmp	r3, #1
 800218c:	d107      	bne.n	800219e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f8fd 	bl	8002398 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a4:	2b40      	cmp	r3, #64	@ 0x40
 80021a6:	d12f      	bne.n	8002208 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d02a      	beq.n	8002208 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80021c0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002240 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d101      	bne.n	80021d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80021cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021ce:	e001      	b.n	80021d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80021d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4919      	ldr	r1, [pc, #100]	@ (8002240 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021dc:	428b      	cmp	r3, r1
 80021de:	d101      	bne.n	80021e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80021e0:	4b18      	ldr	r3, [pc, #96]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021e2:	e001      	b.n	80021e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80021e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80021ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fa:	f043 0202 	orr.w	r2, r3, #2
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff fdfa 	bl	8001dfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b08      	cmp	r3, #8
 8002210:	d136      	bne.n	8002280 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b00      	cmp	r3, #0
 800221a:	d031      	beq.n	8002280 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a07      	ldr	r2, [pc, #28]	@ (8002240 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d101      	bne.n	800222a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002226:	4b07      	ldr	r3, [pc, #28]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002228:	e001      	b.n	800222e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800222a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4902      	ldr	r1, [pc, #8]	@ (8002240 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002236:	428b      	cmp	r3, r1
 8002238:	d106      	bne.n	8002248 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800223a:	4b02      	ldr	r3, [pc, #8]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800223c:	e006      	b.n	800224c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800223e:	bf00      	nop
 8002240:	40003800 	.word	0x40003800
 8002244:	40003400 	.word	0x40003400
 8002248:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800224c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002250:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002260:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	f043 0204 	orr.w	r2, r3, #4
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff fdc0 	bl	8001dfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800227c:	e000      	b.n	8002280 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800227e:	bf00      	nop
}
 8002280:	bf00      	nop
 8002282:	3720      	adds	r7, #32
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	1c99      	adds	r1, r3, #2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6251      	str	r1, [r2, #36]	@ 0x24
 80022ae:	881a      	ldrh	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d113      	bne.n	80022f6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80022dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d106      	bne.n	80022f6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ffc9 	bl	8002288 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	1c99      	adds	r1, r3, #2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6251      	str	r1, [r2, #36]	@ 0x24
 8002312:	8819      	ldrh	r1, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a1d      	ldr	r2, [pc, #116]	@ (8002390 <I2SEx_TxISR_I2SExt+0x90>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <I2SEx_TxISR_I2SExt+0x22>
 800231e:	4b1d      	ldr	r3, [pc, #116]	@ (8002394 <I2SEx_TxISR_I2SExt+0x94>)
 8002320:	e001      	b.n	8002326 <I2SEx_TxISR_I2SExt+0x26>
 8002322:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002326:	460a      	mov	r2, r1
 8002328:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d121      	bne.n	8002386 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a12      	ldr	r2, [pc, #72]	@ (8002390 <I2SEx_TxISR_I2SExt+0x90>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d101      	bne.n	8002350 <I2SEx_TxISR_I2SExt+0x50>
 800234c:	4b11      	ldr	r3, [pc, #68]	@ (8002394 <I2SEx_TxISR_I2SExt+0x94>)
 800234e:	e001      	b.n	8002354 <I2SEx_TxISR_I2SExt+0x54>
 8002350:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	490d      	ldr	r1, [pc, #52]	@ (8002390 <I2SEx_TxISR_I2SExt+0x90>)
 800235c:	428b      	cmp	r3, r1
 800235e:	d101      	bne.n	8002364 <I2SEx_TxISR_I2SExt+0x64>
 8002360:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <I2SEx_TxISR_I2SExt+0x94>)
 8002362:	e001      	b.n	8002368 <I2SEx_TxISR_I2SExt+0x68>
 8002364:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002368:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800236c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d106      	bne.n	8002386 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff ff81 	bl	8002288 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40003800 	.word	0x40003800
 8002394:	40003400 	.word	0x40003400

08002398 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68d8      	ldr	r0, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023aa:	1c99      	adds	r1, r3, #2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80023b0:	b282      	uxth	r2, r0
 80023b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d113      	bne.n	80023f4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80023da:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ff4a 	bl	8002288 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a20      	ldr	r2, [pc, #128]	@ (800248c <I2SEx_RxISR_I2SExt+0x90>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <I2SEx_RxISR_I2SExt+0x16>
 800240e:	4b20      	ldr	r3, [pc, #128]	@ (8002490 <I2SEx_RxISR_I2SExt+0x94>)
 8002410:	e001      	b.n	8002416 <I2SEx_RxISR_I2SExt+0x1a>
 8002412:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002416:	68d8      	ldr	r0, [r3, #12]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241c:	1c99      	adds	r1, r3, #2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002422:	b282      	uxth	r2, r0
 8002424:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002438:	b29b      	uxth	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d121      	bne.n	8002482 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a12      	ldr	r2, [pc, #72]	@ (800248c <I2SEx_RxISR_I2SExt+0x90>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d101      	bne.n	800244c <I2SEx_RxISR_I2SExt+0x50>
 8002448:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <I2SEx_RxISR_I2SExt+0x94>)
 800244a:	e001      	b.n	8002450 <I2SEx_RxISR_I2SExt+0x54>
 800244c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	490d      	ldr	r1, [pc, #52]	@ (800248c <I2SEx_RxISR_I2SExt+0x90>)
 8002458:	428b      	cmp	r3, r1
 800245a:	d101      	bne.n	8002460 <I2SEx_RxISR_I2SExt+0x64>
 800245c:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <I2SEx_RxISR_I2SExt+0x94>)
 800245e:	e001      	b.n	8002464 <I2SEx_RxISR_I2SExt+0x68>
 8002460:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002464:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002468:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d106      	bne.n	8002482 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff ff03 	bl	8002288 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40003800 	.word	0x40003800
 8002490:	40003400 	.word	0x40003400

08002494 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e267      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d075      	beq.n	800259e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b2:	4b88      	ldr	r3, [pc, #544]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d00c      	beq.n	80024d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024be:	4b85      	ldr	r3, [pc, #532]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d112      	bne.n	80024f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ca:	4b82      	ldr	r3, [pc, #520]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024d6:	d10b      	bne.n	80024f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	4b7e      	ldr	r3, [pc, #504]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d05b      	beq.n	800259c <HAL_RCC_OscConfig+0x108>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d157      	bne.n	800259c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e242      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024f8:	d106      	bne.n	8002508 <HAL_RCC_OscConfig+0x74>
 80024fa:	4b76      	ldr	r3, [pc, #472]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a75      	ldr	r2, [pc, #468]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e01d      	b.n	8002544 <HAL_RCC_OscConfig+0xb0>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x98>
 8002512:	4b70      	ldr	r3, [pc, #448]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a6f      	ldr	r2, [pc, #444]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b6d      	ldr	r3, [pc, #436]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a6c      	ldr	r2, [pc, #432]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0xb0>
 800252c:	4b69      	ldr	r3, [pc, #420]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a68      	ldr	r2, [pc, #416]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b66      	ldr	r3, [pc, #408]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a65      	ldr	r2, [pc, #404]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 800253e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7fe fc74 	bl	8000e38 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002554:	f7fe fc70 	bl	8000e38 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	@ 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e207      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b5b      	ldr	r3, [pc, #364]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0xc0>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7fe fc60 	bl	8000e38 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257c:	f7fe fc5c 	bl	8000e38 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	@ 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e1f3      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	4b51      	ldr	r3, [pc, #324]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0xe8>
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d063      	beq.n	8002672 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025aa:	4b4a      	ldr	r3, [pc, #296]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b6:	4b47      	ldr	r3, [pc, #284]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d11c      	bne.n	80025fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c2:	4b44      	ldr	r3, [pc, #272]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d116      	bne.n	80025fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	4b41      	ldr	r3, [pc, #260]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_RCC_OscConfig+0x152>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e1c7      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	4b3b      	ldr	r3, [pc, #236]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4937      	ldr	r1, [pc, #220]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	e03a      	b.n	8002672 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002604:	4b34      	ldr	r3, [pc, #208]	@ (80026d8 <HAL_RCC_OscConfig+0x244>)
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260a:	f7fe fc15 	bl	8000e38 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002612:	f7fe fc11 	bl	8000e38 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e1a8      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	4b2b      	ldr	r3, [pc, #172]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b28      	ldr	r3, [pc, #160]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4925      	ldr	r1, [pc, #148]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
 8002644:	e015      	b.n	8002672 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002646:	4b24      	ldr	r3, [pc, #144]	@ (80026d8 <HAL_RCC_OscConfig+0x244>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fbf4 	bl	8000e38 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002654:	f7fe fbf0 	bl	8000e38 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e187      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	4b1b      	ldr	r3, [pc, #108]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d036      	beq.n	80026ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d016      	beq.n	80026b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002686:	4b15      	ldr	r3, [pc, #84]	@ (80026dc <HAL_RCC_OscConfig+0x248>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe fbd4 	bl	8000e38 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002694:	f7fe fbd0 	bl	8000e38 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e167      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <HAL_RCC_OscConfig+0x240>)
 80026a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x200>
 80026b2:	e01b      	b.n	80026ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b4:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <HAL_RCC_OscConfig+0x248>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ba:	f7fe fbbd 	bl	8000e38 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c0:	e00e      	b.n	80026e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c2:	f7fe fbb9 	bl	8000e38 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d907      	bls.n	80026e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e150      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
 80026d4:	40023800 	.word	0x40023800
 80026d8:	42470000 	.word	0x42470000
 80026dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	4b88      	ldr	r3, [pc, #544]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 80026e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1ea      	bne.n	80026c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8097 	beq.w	8002828 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fe:	4b81      	ldr	r3, [pc, #516]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10f      	bne.n	800272a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	4b7d      	ldr	r3, [pc, #500]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	4a7c      	ldr	r2, [pc, #496]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	@ 0x40
 800271a:	4b7a      	ldr	r3, [pc, #488]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002726:	2301      	movs	r3, #1
 8002728:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272a:	4b77      	ldr	r3, [pc, #476]	@ (8002908 <HAL_RCC_OscConfig+0x474>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d118      	bne.n	8002768 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002736:	4b74      	ldr	r3, [pc, #464]	@ (8002908 <HAL_RCC_OscConfig+0x474>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a73      	ldr	r2, [pc, #460]	@ (8002908 <HAL_RCC_OscConfig+0x474>)
 800273c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002742:	f7fe fb79 	bl	8000e38 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274a:	f7fe fb75 	bl	8000e38 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e10c      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	4b6a      	ldr	r3, [pc, #424]	@ (8002908 <HAL_RCC_OscConfig+0x474>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x2ea>
 8002770:	4b64      	ldr	r3, [pc, #400]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002774:	4a63      	ldr	r2, [pc, #396]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6713      	str	r3, [r2, #112]	@ 0x70
 800277c:	e01c      	b.n	80027b8 <HAL_RCC_OscConfig+0x324>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b05      	cmp	r3, #5
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x30c>
 8002786:	4b5f      	ldr	r3, [pc, #380]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278a:	4a5e      	ldr	r2, [pc, #376]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	6713      	str	r3, [r2, #112]	@ 0x70
 8002792:	4b5c      	ldr	r3, [pc, #368]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002796:	4a5b      	ldr	r2, [pc, #364]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6713      	str	r3, [r2, #112]	@ 0x70
 800279e:	e00b      	b.n	80027b8 <HAL_RCC_OscConfig+0x324>
 80027a0:	4b58      	ldr	r3, [pc, #352]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a4:	4a57      	ldr	r2, [pc, #348]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ac:	4b55      	ldr	r3, [pc, #340]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b0:	4a54      	ldr	r2, [pc, #336]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 80027b2:	f023 0304 	bic.w	r3, r3, #4
 80027b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d015      	beq.n	80027ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7fe fb3a 	bl	8000e38 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f7fe fb36 	bl	8000e38 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e0cb      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027de:	4b49      	ldr	r3, [pc, #292]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0ee      	beq.n	80027c8 <HAL_RCC_OscConfig+0x334>
 80027ea:	e014      	b.n	8002816 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ec:	f7fe fb24 	bl	8000e38 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f2:	e00a      	b.n	800280a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f4:	f7fe fb20 	bl	8000e38 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e0b5      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280a:	4b3e      	ldr	r3, [pc, #248]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1ee      	bne.n	80027f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002816:	7dfb      	ldrb	r3, [r7, #23]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d105      	bne.n	8002828 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281c:	4b39      	ldr	r3, [pc, #228]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	4a38      	ldr	r2, [pc, #224]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 8002822:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002826:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80a1 	beq.w	8002974 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002832:	4b34      	ldr	r3, [pc, #208]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b08      	cmp	r3, #8
 800283c:	d05c      	beq.n	80028f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d141      	bne.n	80028ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002846:	4b31      	ldr	r3, [pc, #196]	@ (800290c <HAL_RCC_OscConfig+0x478>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe faf4 	bl	8000e38 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe faf0 	bl	8000e38 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e087      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	4b27      	ldr	r3, [pc, #156]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69da      	ldr	r2, [r3, #28]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	019b      	lsls	r3, r3, #6
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	3b01      	subs	r3, #1
 800288c:	041b      	lsls	r3, r3, #16
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002894:	061b      	lsls	r3, r3, #24
 8002896:	491b      	ldr	r1, [pc, #108]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289c:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <HAL_RCC_OscConfig+0x478>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7fe fac9 	bl	8000e38 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028aa:	f7fe fac5 	bl	8000e38 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e05c      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028bc:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x416>
 80028c8:	e054      	b.n	8002974 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ca:	4b10      	ldr	r3, [pc, #64]	@ (800290c <HAL_RCC_OscConfig+0x478>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7fe fab2 	bl	8000e38 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d8:	f7fe faae 	bl	8000e38 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e045      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ea:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <HAL_RCC_OscConfig+0x470>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x444>
 80028f6:	e03d      	b.n	8002974 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e038      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
 8002904:	40023800 	.word	0x40023800
 8002908:	40007000 	.word	0x40007000
 800290c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002910:	4b1b      	ldr	r3, [pc, #108]	@ (8002980 <HAL_RCC_OscConfig+0x4ec>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d028      	beq.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d121      	bne.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d11a      	bne.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002940:	4013      	ands	r3, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002946:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002948:	4293      	cmp	r3, r2
 800294a:	d111      	bne.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002956:	085b      	lsrs	r3, r3, #1
 8002958:	3b01      	subs	r3, #1
 800295a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d107      	bne.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800

08002984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0cc      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002998:	4b68      	ldr	r3, [pc, #416]	@ (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d90c      	bls.n	80029c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b65      	ldr	r3, [pc, #404]	@ (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b63      	ldr	r3, [pc, #396]	@ (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0b8      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d8:	4b59      	ldr	r3, [pc, #356]	@ (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4a58      	ldr	r2, [pc, #352]	@ (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f0:	4b53      	ldr	r3, [pc, #332]	@ (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a52      	ldr	r2, [pc, #328]	@ (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b50      	ldr	r3, [pc, #320]	@ (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	494d      	ldr	r1, [pc, #308]	@ (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d044      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b47      	ldr	r3, [pc, #284]	@ (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d119      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e07f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d003      	beq.n	8002a42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	4b3f      	ldr	r3, [pc, #252]	@ (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e06f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a52:	4b3b      	ldr	r3, [pc, #236]	@ (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e067      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a62:	4b37      	ldr	r3, [pc, #220]	@ (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f023 0203 	bic.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4934      	ldr	r1, [pc, #208]	@ (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a74:	f7fe f9e0 	bl	8000e38 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7fe f9dc 	bl	8000e38 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e04f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	4b2b      	ldr	r3, [pc, #172]	@ (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 020c 	and.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1eb      	bne.n	8002a7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b25      	ldr	r3, [pc, #148]	@ (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d20c      	bcs.n	8002acc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b22      	ldr	r3, [pc, #136]	@ (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b20      	ldr	r3, [pc, #128]	@ (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e032      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad8:	4b19      	ldr	r3, [pc, #100]	@ (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4916      	ldr	r1, [pc, #88]	@ (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af6:	4b12      	ldr	r3, [pc, #72]	@ (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	490e      	ldr	r1, [pc, #56]	@ (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b0a:	f000 f821 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	490a      	ldr	r1, [pc, #40]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	5ccb      	ldrb	r3, [r1, r3]
 8002b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b22:	4a09      	ldr	r2, [pc, #36]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b26:	4b09      	ldr	r3, [pc, #36]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe f940 	bl	8000db0 <HAL_InitTick>

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023c00 	.word	0x40023c00
 8002b40:	40023800 	.word	0x40023800
 8002b44:	08004a70 	.word	0x08004a70
 8002b48:	20000014 	.word	0x20000014
 8002b4c:	20000018 	.word	0x20000018

08002b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b54:	b094      	sub	sp, #80	@ 0x50
 8002b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b60:	2300      	movs	r3, #0
 8002b62:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b68:	4b79      	ldr	r3, [pc, #484]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d00d      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0x40>
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	f200 80e1 	bhi.w	8002d3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x34>
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b82:	e0db      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b84:	4b73      	ldr	r3, [pc, #460]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b86:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002b88:	e0db      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b8a:	4b73      	ldr	r3, [pc, #460]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b8e:	e0d8      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b90:	4b6f      	ldr	r3, [pc, #444]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b98:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b9a:	4b6d      	ldr	r3, [pc, #436]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d063      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba6:	4b6a      	ldr	r3, [pc, #424]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	099b      	lsrs	r3, r3, #6
 8002bac:	2200      	movs	r2, #0
 8002bae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bba:	2300      	movs	r3, #0
 8002bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bc2:	4622      	mov	r2, r4
 8002bc4:	462b      	mov	r3, r5
 8002bc6:	f04f 0000 	mov.w	r0, #0
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	0159      	lsls	r1, r3, #5
 8002bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd4:	0150      	lsls	r0, r2, #5
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4621      	mov	r1, r4
 8002bdc:	1a51      	subs	r1, r2, r1
 8002bde:	6139      	str	r1, [r7, #16]
 8002be0:	4629      	mov	r1, r5
 8002be2:	eb63 0301 	sbc.w	r3, r3, r1
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bf4:	4659      	mov	r1, fp
 8002bf6:	018b      	lsls	r3, r1, #6
 8002bf8:	4651      	mov	r1, sl
 8002bfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bfe:	4651      	mov	r1, sl
 8002c00:	018a      	lsls	r2, r1, #6
 8002c02:	4651      	mov	r1, sl
 8002c04:	ebb2 0801 	subs.w	r8, r2, r1
 8002c08:	4659      	mov	r1, fp
 8002c0a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c22:	4690      	mov	r8, r2
 8002c24:	4699      	mov	r9, r3
 8002c26:	4623      	mov	r3, r4
 8002c28:	eb18 0303 	adds.w	r3, r8, r3
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	462b      	mov	r3, r5
 8002c30:	eb49 0303 	adc.w	r3, r9, r3
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c42:	4629      	mov	r1, r5
 8002c44:	024b      	lsls	r3, r1, #9
 8002c46:	4621      	mov	r1, r4
 8002c48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	024a      	lsls	r2, r1, #9
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c56:	2200      	movs	r2, #0
 8002c58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c60:	f7fd fab2 	bl	80001c8 <__aeabi_uldivmod>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4613      	mov	r3, r2
 8002c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c6c:	e058      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6e:	4b38      	ldr	r3, [pc, #224]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	099b      	lsrs	r3, r3, #6
 8002c74:	2200      	movs	r2, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	4611      	mov	r1, r2
 8002c7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c7e:	623b      	str	r3, [r7, #32]
 8002c80:	2300      	movs	r3, #0
 8002c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c88:	4642      	mov	r2, r8
 8002c8a:	464b      	mov	r3, r9
 8002c8c:	f04f 0000 	mov.w	r0, #0
 8002c90:	f04f 0100 	mov.w	r1, #0
 8002c94:	0159      	lsls	r1, r3, #5
 8002c96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c9a:	0150      	lsls	r0, r2, #5
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4641      	mov	r1, r8
 8002ca2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cc0:	ebb2 040a 	subs.w	r4, r2, sl
 8002cc4:	eb63 050b 	sbc.w	r5, r3, fp
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	00eb      	lsls	r3, r5, #3
 8002cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cd6:	00e2      	lsls	r2, r4, #3
 8002cd8:	4614      	mov	r4, r2
 8002cda:	461d      	mov	r5, r3
 8002cdc:	4643      	mov	r3, r8
 8002cde:	18e3      	adds	r3, r4, r3
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	464b      	mov	r3, r9
 8002ce4:	eb45 0303 	adc.w	r3, r5, r3
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	028b      	lsls	r3, r1, #10
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d00:	4621      	mov	r1, r4
 8002d02:	028a      	lsls	r2, r1, #10
 8002d04:	4610      	mov	r0, r2
 8002d06:	4619      	mov	r1, r3
 8002d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	61fa      	str	r2, [r7, #28]
 8002d10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d14:	f7fd fa58 	bl	80001c8 <__aeabi_uldivmod>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d20:	4b0b      	ldr	r3, [pc, #44]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	0c1b      	lsrs	r3, r3, #16
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002d30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d3a:	e002      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d3c:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3750      	adds	r7, #80	@ 0x50
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800
 8002d54:	00f42400 	.word	0x00f42400
 8002d58:	007a1200 	.word	0x007a1200

08002d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d60:	4b03      	ldr	r3, [pc, #12]	@ (8002d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d62:	681b      	ldr	r3, [r3, #0]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000014 	.word	0x20000014

08002d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d78:	f7ff fff0 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	0a9b      	lsrs	r3, r3, #10
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	4903      	ldr	r1, [pc, #12]	@ (8002d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d8a:	5ccb      	ldrb	r3, [r1, r3]
 8002d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40023800 	.word	0x40023800
 8002d98:	08004a80 	.word	0x08004a80

08002d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002da0:	f7ff ffdc 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b05      	ldr	r3, [pc, #20]	@ (8002dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	0b5b      	lsrs	r3, r3, #13
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	4903      	ldr	r1, [pc, #12]	@ (8002dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	08004a80 	.word	0x08004a80

08002dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d035      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002dec:	4b62      	ldr	r3, [pc, #392]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002df2:	f7fe f821 	bl	8000e38 <HAL_GetTick>
 8002df6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002dfa:	f7fe f81d 	bl	8000e38 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e0b0      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e0c:	4b5b      	ldr	r3, [pc, #364]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f0      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	019a      	lsls	r2, r3, #6
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	071b      	lsls	r3, r3, #28
 8002e24:	4955      	ldr	r1, [pc, #340]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e2c:	4b52      	ldr	r3, [pc, #328]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e32:	f7fe f801 	bl	8000e38 <HAL_GetTick>
 8002e36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e3a:	f7fd fffd 	bl	8000e38 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e090      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8083 	beq.w	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	4b44      	ldr	r3, [pc, #272]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	4a43      	ldr	r2, [pc, #268]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e76:	4b41      	ldr	r3, [pc, #260]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e82:	4b3f      	ldr	r3, [pc, #252]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a3e      	ldr	r2, [pc, #248]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e8e:	f7fd ffd3 	bl	8000e38 <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e96:	f7fd ffcf 	bl	8000e38 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e062      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ea8:	4b35      	ldr	r3, [pc, #212]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eb4:	4b31      	ldr	r3, [pc, #196]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ebc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d02f      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d028      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eda:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002edc:	4b29      	ldr	r3, [pc, #164]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ee2:	4b28      	ldr	r3, [pc, #160]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ee8:	4a24      	ldr	r2, [pc, #144]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002eee:	4b23      	ldr	r3, [pc, #140]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d114      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002efa:	f7fd ff9d 	bl	8000e38 <HAL_GetTick>
 8002efe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f00:	e00a      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7fd ff99 	bl	8000e38 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e02a      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f18:	4b18      	ldr	r3, [pc, #96]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0ee      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f30:	d10d      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002f32:	4b12      	ldr	r3, [pc, #72]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002f42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f46:	490d      	ldr	r1, [pc, #52]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	608b      	str	r3, [r1, #8]
 8002f4c:	e005      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	4a0a      	ldr	r2, [pc, #40]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f54:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002f58:	6093      	str	r3, [r2, #8]
 8002f5a:	4b08      	ldr	r3, [pc, #32]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f5c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f66:	4905      	ldr	r1, [pc, #20]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	42470068 	.word	0x42470068
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40007000 	.word	0x40007000
 8002f84:	42470e40 	.word	0x42470e40

08002f88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d13f      	bne.n	8003026 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002fa6:	4b24      	ldr	r3, [pc, #144]	@ (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d006      	beq.n	8002fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fbc:	d12f      	bne.n	800301e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800303c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002fc0:	617b      	str	r3, [r7, #20]
          break;
 8002fc2:	e02f      	b.n	8003024 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fd0:	d108      	bne.n	8002fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002fd2:	4b19      	ldr	r3, [pc, #100]	@ (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fda:	4a19      	ldr	r2, [pc, #100]	@ (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	e007      	b.n	8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002fe4:	4b14      	ldr	r3, [pc, #80]	@ (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fec:	4a15      	ldr	r2, [pc, #84]	@ (8003044 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002ff4:	4b10      	ldr	r3, [pc, #64]	@ (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ffa:	099b      	lsrs	r3, r3, #6
 8002ffc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	fb02 f303 	mul.w	r3, r2, r3
 8003006:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003008:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800300a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800300e:	0f1b      	lsrs	r3, r3, #28
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	fbb2 f3f3 	udiv	r3, r2, r3
 800301a:	617b      	str	r3, [r7, #20]
          break;
 800301c:	e002      	b.n	8003024 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
          break;
 8003022:	bf00      	nop
        }
      }
      break;
 8003024:	e000      	b.n	8003028 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8003026:	bf00      	nop
    }
  }
  return frequency;
 8003028:	697b      	ldr	r3, [r7, #20]
}
 800302a:	4618      	mov	r0, r3
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40023800 	.word	0x40023800
 800303c:	00bb8000 	.word	0x00bb8000
 8003040:	007a1200 	.word	0x007a1200
 8003044:	00f42400 	.word	0x00f42400

08003048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e042      	b.n	80030e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fd fcd8 	bl	8000a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2224      	movs	r2, #36	@ 0x24
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800308a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fdbd 	bl	8003c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	@ 0x28
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b20      	cmp	r3, #32
 8003106:	d175      	bne.n	80031f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_UART_Transmit+0x2c>
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e06e      	b.n	80031f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2221      	movs	r2, #33	@ 0x21
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003126:	f7fd fe87 	bl	8000e38 <HAL_GetTick>
 800312a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	88fa      	ldrh	r2, [r7, #6]
 8003130:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	88fa      	ldrh	r2, [r7, #6]
 8003136:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003140:	d108      	bne.n	8003154 <HAL_UART_Transmit+0x6c>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d104      	bne.n	8003154 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	61bb      	str	r3, [r7, #24]
 8003152:	e003      	b.n	800315c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003158:	2300      	movs	r3, #0
 800315a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800315c:	e02e      	b.n	80031bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2200      	movs	r2, #0
 8003166:	2180      	movs	r1, #128	@ 0x80
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fb1f 	bl	80037ac <UART_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e03a      	b.n	80031f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10b      	bne.n	800319e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003194:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	3302      	adds	r3, #2
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	e007      	b.n	80031ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	3301      	adds	r3, #1
 80031ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1cb      	bne.n	800315e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2200      	movs	r2, #0
 80031ce:	2140      	movs	r1, #64	@ 0x40
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 faeb 	bl	80037ac <UART_WaitOnFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e006      	b.n	80031f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	e000      	b.n	80031f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031f4:	2302      	movs	r3, #2
  }
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3720      	adds	r7, #32
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	4613      	mov	r3, r2
 800320a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b20      	cmp	r3, #32
 8003216:	d112      	bne.n	800323e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_UART_Receive_IT+0x26>
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e00b      	b.n	8003240 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	461a      	mov	r2, r3
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 fb12 	bl	800385e <UART_Start_Receive_IT>
 800323a:	4603      	mov	r3, r0
 800323c:	e000      	b.n	8003240 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800323e:	2302      	movs	r3, #2
  }
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b0ba      	sub	sp, #232	@ 0xe8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800326e:	2300      	movs	r3, #0
 8003270:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003274:	2300      	movs	r3, #0
 8003276:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800327a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003286:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10f      	bne.n	80032ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800328e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b00      	cmp	r3, #0
 8003298:	d009      	beq.n	80032ae <HAL_UART_IRQHandler+0x66>
 800329a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fbf2 	bl	8003a90 <UART_Receive_IT>
      return;
 80032ac:	e25b      	b.n	8003766 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80de 	beq.w	8003474 <HAL_UART_IRQHandler+0x22c>
 80032b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d106      	bne.n	80032d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80d1 	beq.w	8003474 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_UART_IRQHandler+0xae>
 80032de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	f043 0201 	orr.w	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_UART_IRQHandler+0xd2>
 8003302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003312:	f043 0202 	orr.w	r2, r3, #2
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800331a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <HAL_UART_IRQHandler+0xf6>
 8003326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003336:	f043 0204 	orr.w	r2, r3, #4
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800333e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d011      	beq.n	800336e <HAL_UART_IRQHandler+0x126>
 800334a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d105      	bne.n	8003362 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003366:	f043 0208 	orr.w	r2, r3, #8
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 81f2 	beq.w	800375c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_UART_IRQHandler+0x14e>
 8003384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fb7d 	bl	8003a90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a0:	2b40      	cmp	r3, #64	@ 0x40
 80033a2:	bf0c      	ite	eq
 80033a4:	2301      	moveq	r3, #1
 80033a6:	2300      	movne	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <HAL_UART_IRQHandler+0x17a>
 80033ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d04f      	beq.n	8003462 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fa85 	bl	80038d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d2:	2b40      	cmp	r3, #64	@ 0x40
 80033d4:	d141      	bne.n	800345a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3314      	adds	r3, #20
 80033dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033e4:	e853 3f00 	ldrex	r3, [r3]
 80033e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80033ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3314      	adds	r3, #20
 80033fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003402:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003406:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800340e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800341a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1d9      	bne.n	80033d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d013      	beq.n	8003452 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342e:	4a7e      	ldr	r2, [pc, #504]	@ (8003628 <HAL_UART_IRQHandler+0x3e0>)
 8003430:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd ff5e 	bl	80012f8 <HAL_DMA_Abort_IT>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d016      	beq.n	8003470 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800344c:	4610      	mov	r0, r2
 800344e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003450:	e00e      	b.n	8003470 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f994 	bl	8003780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003458:	e00a      	b.n	8003470 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f990 	bl	8003780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003460:	e006      	b.n	8003470 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f98c 	bl	8003780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800346e:	e175      	b.n	800375c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003470:	bf00      	nop
    return;
 8003472:	e173      	b.n	800375c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003478:	2b01      	cmp	r3, #1
 800347a:	f040 814f 	bne.w	800371c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800347e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 8148 	beq.w	800371c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800348c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 8141 	beq.w	800371c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800349a:	2300      	movs	r3, #0
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ba:	2b40      	cmp	r3, #64	@ 0x40
 80034bc:	f040 80b6 	bne.w	800362c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8145 	beq.w	8003760 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034de:	429a      	cmp	r2, r3
 80034e0:	f080 813e 	bcs.w	8003760 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034f6:	f000 8088 	beq.w	800360a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	330c      	adds	r3, #12
 8003500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003504:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003508:	e853 3f00 	ldrex	r3, [r3]
 800350c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003510:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003518:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	330c      	adds	r3, #12
 8003522:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003526:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800352a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003532:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800353e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1d9      	bne.n	80034fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3314      	adds	r3, #20
 800354c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003550:	e853 3f00 	ldrex	r3, [r3]
 8003554:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003556:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3314      	adds	r3, #20
 8003566:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800356a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800356e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003570:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003572:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003576:	e841 2300 	strex	r3, r2, [r1]
 800357a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800357c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1e1      	bne.n	8003546 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3314      	adds	r3, #20
 8003588:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800358c:	e853 3f00 	ldrex	r3, [r3]
 8003590:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003594:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003598:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3314      	adds	r3, #20
 80035a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80035a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80035ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80035ae:	e841 2300 	strex	r3, r2, [r1]
 80035b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80035b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1e3      	bne.n	8003582 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035d2:	e853 3f00 	ldrex	r3, [r3]
 80035d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80035d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035da:	f023 0310 	bic.w	r3, r3, #16
 80035de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	330c      	adds	r3, #12
 80035e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80035ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80035ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035f4:	e841 2300 	strex	r3, r2, [r1]
 80035f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80035fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e3      	bne.n	80035c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003604:	4618      	mov	r0, r3
 8003606:	f7fd fe07 	bl	8001218 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2202      	movs	r2, #2
 800360e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003618:	b29b      	uxth	r3, r3
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	b29b      	uxth	r3, r3
 800361e:	4619      	mov	r1, r3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f8b7 	bl	8003794 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003626:	e09b      	b.n	8003760 <HAL_UART_IRQHandler+0x518>
 8003628:	08003999 	.word	0x08003999
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003634:	b29b      	uxth	r3, r3
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 808e 	beq.w	8003764 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003648:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 8089 	beq.w	8003764 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	330c      	adds	r3, #12
 8003658:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003664:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003668:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003676:	647a      	str	r2, [r7, #68]	@ 0x44
 8003678:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800367c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1e3      	bne.n	8003652 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3314      	adds	r3, #20
 8003690:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	e853 3f00 	ldrex	r3, [r3]
 8003698:	623b      	str	r3, [r7, #32]
   return(result);
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3314      	adds	r3, #20
 80036aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80036ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80036b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036b6:	e841 2300 	strex	r3, r2, [r1]
 80036ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e3      	bne.n	800368a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	330c      	adds	r3, #12
 80036d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	60fb      	str	r3, [r7, #12]
   return(result);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0310 	bic.w	r3, r3, #16
 80036e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	330c      	adds	r3, #12
 80036f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80036f4:	61fa      	str	r2, [r7, #28]
 80036f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	69b9      	ldr	r1, [r7, #24]
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	617b      	str	r3, [r7, #20]
   return(result);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e3      	bne.n	80036d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800370e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003712:	4619      	mov	r1, r3
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f83d 	bl	8003794 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800371a:	e023      	b.n	8003764 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800371c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003724:	2b00      	cmp	r3, #0
 8003726:	d009      	beq.n	800373c <HAL_UART_IRQHandler+0x4f4>
 8003728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800372c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f943 	bl	80039c0 <UART_Transmit_IT>
    return;
 800373a:	e014      	b.n	8003766 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800373c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00e      	beq.n	8003766 <HAL_UART_IRQHandler+0x51e>
 8003748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800374c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f983 	bl	8003a60 <UART_EndTransmit_IT>
    return;
 800375a:	e004      	b.n	8003766 <HAL_UART_IRQHandler+0x51e>
    return;
 800375c:	bf00      	nop
 800375e:	e002      	b.n	8003766 <HAL_UART_IRQHandler+0x51e>
      return;
 8003760:	bf00      	nop
 8003762:	e000      	b.n	8003766 <HAL_UART_IRQHandler+0x51e>
      return;
 8003764:	bf00      	nop
  }
}
 8003766:	37e8      	adds	r7, #232	@ 0xe8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037bc:	e03b      	b.n	8003836 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d037      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c6:	f7fd fb37 	bl	8000e38 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	6a3a      	ldr	r2, [r7, #32]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d302      	bcc.n	80037dc <UART_WaitOnFlagUntilTimeout+0x30>
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e03a      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d023      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b80      	cmp	r3, #128	@ 0x80
 80037f2:	d020      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b40      	cmp	r3, #64	@ 0x40
 80037f8:	d01d      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b08      	cmp	r3, #8
 8003806:	d116      	bne.n	8003836 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f857 	bl	80038d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2208      	movs	r2, #8
 8003828:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e00f      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4013      	ands	r3, r2
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	429a      	cmp	r2, r3
 8003844:	bf0c      	ite	eq
 8003846:	2301      	moveq	r3, #1
 8003848:	2300      	movne	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	429a      	cmp	r2, r3
 8003852:	d0b4      	beq.n	80037be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800385e:	b480      	push	{r7}
 8003860:	b085      	sub	sp, #20
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	4613      	mov	r3, r2
 800386a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	88fa      	ldrh	r2, [r7, #6]
 8003876:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	88fa      	ldrh	r2, [r7, #6]
 800387c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2222      	movs	r2, #34	@ 0x22
 8003888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d007      	beq.n	80038a4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038a2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0220 	orr.w	r2, r2, #32
 80038c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b095      	sub	sp, #84	@ 0x54
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	330c      	adds	r3, #12
 80038e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e4:	e853 3f00 	ldrex	r3, [r3]
 80038e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	330c      	adds	r3, #12
 80038f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80038fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003900:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e5      	bne.n	80038da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3314      	adds	r3, #20
 8003914:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	61fb      	str	r3, [r7, #28]
   return(result);
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3314      	adds	r3, #20
 800392c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800392e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003930:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003932:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003934:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003936:	e841 2300 	strex	r3, r2, [r1]
 800393a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e5      	bne.n	800390e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003946:	2b01      	cmp	r3, #1
 8003948:	d119      	bne.n	800397e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	330c      	adds	r3, #12
 8003950:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	60bb      	str	r3, [r7, #8]
   return(result);
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f023 0310 	bic.w	r3, r3, #16
 8003960:	647b      	str	r3, [r7, #68]	@ 0x44
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	330c      	adds	r3, #12
 8003968:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800396a:	61ba      	str	r2, [r7, #24]
 800396c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	6979      	ldr	r1, [r7, #20]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	613b      	str	r3, [r7, #16]
   return(result);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e5      	bne.n	800394a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800398c:	bf00      	nop
 800398e:	3754      	adds	r7, #84	@ 0x54
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f7ff fee4 	bl	8003780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b21      	cmp	r3, #33	@ 0x21
 80039d2:	d13e      	bne.n	8003a52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039dc:	d114      	bne.n	8003a08 <UART_Transmit_IT+0x48>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d110      	bne.n	8003a08 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	1c9a      	adds	r2, r3, #2
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	621a      	str	r2, [r3, #32]
 8003a06:	e008      	b.n	8003a1a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	1c59      	adds	r1, r3, #1
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6211      	str	r1, [r2, #32]
 8003a12:	781a      	ldrb	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	4619      	mov	r1, r3
 8003a28:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10f      	bne.n	8003a4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	e000      	b.n	8003a54 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a52:	2302      	movs	r3, #2
  }
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff fe73 	bl	800376c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08c      	sub	sp, #48	@ 0x30
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b22      	cmp	r3, #34	@ 0x22
 8003aa2:	f040 80ae 	bne.w	8003c02 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aae:	d117      	bne.n	8003ae0 <UART_Receive_IT+0x50>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d113      	bne.n	8003ae0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad8:	1c9a      	adds	r2, r3, #2
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ade:	e026      	b.n	8003b2e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003af2:	d007      	beq.n	8003b04 <UART_Receive_IT+0x74>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <UART_Receive_IT+0x82>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d106      	bne.n	8003b12 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	e008      	b.n	8003b24 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b22:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d15d      	bne.n	8003bfe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0220 	bic.w	r2, r2, #32
 8003b50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0201 	bic.w	r2, r2, #1
 8003b70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d135      	bne.n	8003bf4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	330c      	adds	r3, #12
 8003b94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f023 0310 	bic.w	r3, r3, #16
 8003ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	330c      	adds	r3, #12
 8003bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bae:	623a      	str	r2, [r7, #32]
 8003bb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	69f9      	ldr	r1, [r7, #28]
 8003bb4:	6a3a      	ldr	r2, [r7, #32]
 8003bb6:	e841 2300 	strex	r3, r2, [r1]
 8003bba:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e5      	bne.n	8003b8e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	d10a      	bne.n	8003be6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff fdd1 	bl	8003794 <HAL_UARTEx_RxEventCallback>
 8003bf2:	e002      	b.n	8003bfa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7fc fdd9 	bl	80007ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e002      	b.n	8003c04 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e000      	b.n	8003c04 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
  }
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3730      	adds	r7, #48	@ 0x30
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c10:	b0c0      	sub	sp, #256	@ 0x100
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c28:	68d9      	ldr	r1, [r3, #12]
 8003c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	ea40 0301 	orr.w	r3, r0, r1
 8003c34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003c64:	f021 010c 	bic.w	r1, r1, #12
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c72:	430b      	orrs	r3, r1
 8003c74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c86:	6999      	ldr	r1, [r3, #24]
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	ea40 0301 	orr.w	r3, r0, r1
 8003c92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	4b8f      	ldr	r3, [pc, #572]	@ (8003ed8 <UART_SetConfig+0x2cc>)
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d005      	beq.n	8003cac <UART_SetConfig+0xa0>
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4b8d      	ldr	r3, [pc, #564]	@ (8003edc <UART_SetConfig+0x2d0>)
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d104      	bne.n	8003cb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cac:	f7ff f876 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
 8003cb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003cb4:	e003      	b.n	8003cbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cb6:	f7ff f85d 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8003cba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cc8:	f040 810c 	bne.w	8003ee4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cd6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003cda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003cde:	4622      	mov	r2, r4
 8003ce0:	462b      	mov	r3, r5
 8003ce2:	1891      	adds	r1, r2, r2
 8003ce4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ce6:	415b      	adcs	r3, r3
 8003ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003cee:	4621      	mov	r1, r4
 8003cf0:	eb12 0801 	adds.w	r8, r2, r1
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	eb43 0901 	adc.w	r9, r3, r1
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d0e:	4690      	mov	r8, r2
 8003d10:	4699      	mov	r9, r3
 8003d12:	4623      	mov	r3, r4
 8003d14:	eb18 0303 	adds.w	r3, r8, r3
 8003d18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d1c:	462b      	mov	r3, r5
 8003d1e:	eb49 0303 	adc.w	r3, r9, r3
 8003d22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	18db      	adds	r3, r3, r3
 8003d3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d40:	4613      	mov	r3, r2
 8003d42:	eb42 0303 	adc.w	r3, r2, r3
 8003d46:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003d4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003d50:	f7fc fa3a 	bl	80001c8 <__aeabi_uldivmod>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4b61      	ldr	r3, [pc, #388]	@ (8003ee0 <UART_SetConfig+0x2d4>)
 8003d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	011c      	lsls	r4, r3, #4
 8003d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003d70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003d74:	4642      	mov	r2, r8
 8003d76:	464b      	mov	r3, r9
 8003d78:	1891      	adds	r1, r2, r2
 8003d7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d7c:	415b      	adcs	r3, r3
 8003d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d84:	4641      	mov	r1, r8
 8003d86:	eb12 0a01 	adds.w	sl, r2, r1
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	eb43 0b01 	adc.w	fp, r3, r1
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003da0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003da4:	4692      	mov	sl, r2
 8003da6:	469b      	mov	fp, r3
 8003da8:	4643      	mov	r3, r8
 8003daa:	eb1a 0303 	adds.w	r3, sl, r3
 8003dae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003db2:	464b      	mov	r3, r9
 8003db4:	eb4b 0303 	adc.w	r3, fp, r3
 8003db8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dc8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003dcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	18db      	adds	r3, r3, r3
 8003dd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	eb42 0303 	adc.w	r3, r2, r3
 8003ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003de2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003de6:	f7fc f9ef 	bl	80001c8 <__aeabi_uldivmod>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4611      	mov	r1, r2
 8003df0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ee0 <UART_SetConfig+0x2d4>)
 8003df2:	fba3 2301 	umull	r2, r3, r3, r1
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	2264      	movs	r2, #100	@ 0x64
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	1acb      	subs	r3, r1, r3
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e06:	4b36      	ldr	r3, [pc, #216]	@ (8003ee0 <UART_SetConfig+0x2d4>)
 8003e08:	fba3 2302 	umull	r2, r3, r3, r2
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e14:	441c      	add	r4, r3
 8003e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e20:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e28:	4642      	mov	r2, r8
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	1891      	adds	r1, r2, r2
 8003e2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e30:	415b      	adcs	r3, r3
 8003e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e38:	4641      	mov	r1, r8
 8003e3a:	1851      	adds	r1, r2, r1
 8003e3c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e3e:	4649      	mov	r1, r9
 8003e40:	414b      	adcs	r3, r1
 8003e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003e50:	4659      	mov	r1, fp
 8003e52:	00cb      	lsls	r3, r1, #3
 8003e54:	4651      	mov	r1, sl
 8003e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e5a:	4651      	mov	r1, sl
 8003e5c:	00ca      	lsls	r2, r1, #3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	4619      	mov	r1, r3
 8003e62:	4603      	mov	r3, r0
 8003e64:	4642      	mov	r2, r8
 8003e66:	189b      	adds	r3, r3, r2
 8003e68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e6c:	464b      	mov	r3, r9
 8003e6e:	460a      	mov	r2, r1
 8003e70:	eb42 0303 	adc.w	r3, r2, r3
 8003e74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e84:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003e88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	18db      	adds	r3, r3, r3
 8003e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e92:	4613      	mov	r3, r2
 8003e94:	eb42 0303 	adc.w	r3, r2, r3
 8003e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003ea2:	f7fc f991 	bl	80001c8 <__aeabi_uldivmod>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <UART_SetConfig+0x2d4>)
 8003eac:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	2164      	movs	r1, #100	@ 0x64
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	3332      	adds	r3, #50	@ 0x32
 8003ebe:	4a08      	ldr	r2, [pc, #32]	@ (8003ee0 <UART_SetConfig+0x2d4>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	f003 0207 	and.w	r2, r3, #7
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4422      	add	r2, r4
 8003ed2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ed4:	e106      	b.n	80040e4 <UART_SetConfig+0x4d8>
 8003ed6:	bf00      	nop
 8003ed8:	40011000 	.word	0x40011000
 8003edc:	40011400 	.word	0x40011400
 8003ee0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ee4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003eee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ef2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ef6:	4642      	mov	r2, r8
 8003ef8:	464b      	mov	r3, r9
 8003efa:	1891      	adds	r1, r2, r2
 8003efc:	6239      	str	r1, [r7, #32]
 8003efe:	415b      	adcs	r3, r3
 8003f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f06:	4641      	mov	r1, r8
 8003f08:	1854      	adds	r4, r2, r1
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	eb43 0501 	adc.w	r5, r3, r1
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	00eb      	lsls	r3, r5, #3
 8003f1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f1e:	00e2      	lsls	r2, r4, #3
 8003f20:	4614      	mov	r4, r2
 8003f22:	461d      	mov	r5, r3
 8003f24:	4643      	mov	r3, r8
 8003f26:	18e3      	adds	r3, r4, r3
 8003f28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f2c:	464b      	mov	r3, r9
 8003f2e:	eb45 0303 	adc.w	r3, r5, r3
 8003f32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f52:	4629      	mov	r1, r5
 8003f54:	008b      	lsls	r3, r1, #2
 8003f56:	4621      	mov	r1, r4
 8003f58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	008a      	lsls	r2, r1, #2
 8003f60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003f64:	f7fc f930 	bl	80001c8 <__aeabi_uldivmod>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4b60      	ldr	r3, [pc, #384]	@ (80040f0 <UART_SetConfig+0x4e4>)
 8003f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	011c      	lsls	r4, r3, #4
 8003f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003f88:	4642      	mov	r2, r8
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	1891      	adds	r1, r2, r2
 8003f8e:	61b9      	str	r1, [r7, #24]
 8003f90:	415b      	adcs	r3, r3
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f98:	4641      	mov	r1, r8
 8003f9a:	1851      	adds	r1, r2, r1
 8003f9c:	6139      	str	r1, [r7, #16]
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	414b      	adcs	r3, r1
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fb0:	4659      	mov	r1, fp
 8003fb2:	00cb      	lsls	r3, r1, #3
 8003fb4:	4651      	mov	r1, sl
 8003fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fba:	4651      	mov	r1, sl
 8003fbc:	00ca      	lsls	r2, r1, #3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4642      	mov	r2, r8
 8003fc6:	189b      	adds	r3, r3, r2
 8003fc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fcc:	464b      	mov	r3, r9
 8003fce:	460a      	mov	r2, r1
 8003fd0:	eb42 0303 	adc.w	r3, r2, r3
 8003fd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003fe2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	008b      	lsls	r3, r1, #2
 8003ff4:	4641      	mov	r1, r8
 8003ff6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	008a      	lsls	r2, r1, #2
 8003ffe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004002:	f7fc f8e1 	bl	80001c8 <__aeabi_uldivmod>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4611      	mov	r1, r2
 800400c:	4b38      	ldr	r3, [pc, #224]	@ (80040f0 <UART_SetConfig+0x4e4>)
 800400e:	fba3 2301 	umull	r2, r3, r3, r1
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	2264      	movs	r2, #100	@ 0x64
 8004016:	fb02 f303 	mul.w	r3, r2, r3
 800401a:	1acb      	subs	r3, r1, r3
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	3332      	adds	r3, #50	@ 0x32
 8004020:	4a33      	ldr	r2, [pc, #204]	@ (80040f0 <UART_SetConfig+0x4e4>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800402c:	441c      	add	r4, r3
 800402e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004032:	2200      	movs	r2, #0
 8004034:	673b      	str	r3, [r7, #112]	@ 0x70
 8004036:	677a      	str	r2, [r7, #116]	@ 0x74
 8004038:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800403c:	4642      	mov	r2, r8
 800403e:	464b      	mov	r3, r9
 8004040:	1891      	adds	r1, r2, r2
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	415b      	adcs	r3, r3
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800404c:	4641      	mov	r1, r8
 800404e:	1851      	adds	r1, r2, r1
 8004050:	6039      	str	r1, [r7, #0]
 8004052:	4649      	mov	r1, r9
 8004054:	414b      	adcs	r3, r1
 8004056:	607b      	str	r3, [r7, #4]
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004064:	4659      	mov	r1, fp
 8004066:	00cb      	lsls	r3, r1, #3
 8004068:	4651      	mov	r1, sl
 800406a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800406e:	4651      	mov	r1, sl
 8004070:	00ca      	lsls	r2, r1, #3
 8004072:	4610      	mov	r0, r2
 8004074:	4619      	mov	r1, r3
 8004076:	4603      	mov	r3, r0
 8004078:	4642      	mov	r2, r8
 800407a:	189b      	adds	r3, r3, r2
 800407c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800407e:	464b      	mov	r3, r9
 8004080:	460a      	mov	r2, r1
 8004082:	eb42 0303 	adc.w	r3, r2, r3
 8004086:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	663b      	str	r3, [r7, #96]	@ 0x60
 8004092:	667a      	str	r2, [r7, #100]	@ 0x64
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80040a0:	4649      	mov	r1, r9
 80040a2:	008b      	lsls	r3, r1, #2
 80040a4:	4641      	mov	r1, r8
 80040a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040aa:	4641      	mov	r1, r8
 80040ac:	008a      	lsls	r2, r1, #2
 80040ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80040b2:	f7fc f889 	bl	80001c8 <__aeabi_uldivmod>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4b0d      	ldr	r3, [pc, #52]	@ (80040f0 <UART_SetConfig+0x4e4>)
 80040bc:	fba3 1302 	umull	r1, r3, r3, r2
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	2164      	movs	r1, #100	@ 0x64
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	3332      	adds	r3, #50	@ 0x32
 80040ce:	4a08      	ldr	r2, [pc, #32]	@ (80040f0 <UART_SetConfig+0x4e4>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	f003 020f 	and.w	r2, r3, #15
 80040da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4422      	add	r2, r4
 80040e2:	609a      	str	r2, [r3, #8]
}
 80040e4:	bf00      	nop
 80040e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80040ea:	46bd      	mov	sp, r7
 80040ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040f0:	51eb851f 	.word	0x51eb851f

080040f4 <std>:
 80040f4:	2300      	movs	r3, #0
 80040f6:	b510      	push	{r4, lr}
 80040f8:	4604      	mov	r4, r0
 80040fa:	e9c0 3300 	strd	r3, r3, [r0]
 80040fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004102:	6083      	str	r3, [r0, #8]
 8004104:	8181      	strh	r1, [r0, #12]
 8004106:	6643      	str	r3, [r0, #100]	@ 0x64
 8004108:	81c2      	strh	r2, [r0, #14]
 800410a:	6183      	str	r3, [r0, #24]
 800410c:	4619      	mov	r1, r3
 800410e:	2208      	movs	r2, #8
 8004110:	305c      	adds	r0, #92	@ 0x5c
 8004112:	f000 f9e7 	bl	80044e4 <memset>
 8004116:	4b0d      	ldr	r3, [pc, #52]	@ (800414c <std+0x58>)
 8004118:	6263      	str	r3, [r4, #36]	@ 0x24
 800411a:	4b0d      	ldr	r3, [pc, #52]	@ (8004150 <std+0x5c>)
 800411c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800411e:	4b0d      	ldr	r3, [pc, #52]	@ (8004154 <std+0x60>)
 8004120:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004122:	4b0d      	ldr	r3, [pc, #52]	@ (8004158 <std+0x64>)
 8004124:	6323      	str	r3, [r4, #48]	@ 0x30
 8004126:	4b0d      	ldr	r3, [pc, #52]	@ (800415c <std+0x68>)
 8004128:	6224      	str	r4, [r4, #32]
 800412a:	429c      	cmp	r4, r3
 800412c:	d006      	beq.n	800413c <std+0x48>
 800412e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004132:	4294      	cmp	r4, r2
 8004134:	d002      	beq.n	800413c <std+0x48>
 8004136:	33d0      	adds	r3, #208	@ 0xd0
 8004138:	429c      	cmp	r4, r3
 800413a:	d105      	bne.n	8004148 <std+0x54>
 800413c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004144:	f000 ba46 	b.w	80045d4 <__retarget_lock_init_recursive>
 8004148:	bd10      	pop	{r4, pc}
 800414a:	bf00      	nop
 800414c:	08004335 	.word	0x08004335
 8004150:	08004357 	.word	0x08004357
 8004154:	0800438f 	.word	0x0800438f
 8004158:	080043b3 	.word	0x080043b3
 800415c:	20000238 	.word	0x20000238

08004160 <stdio_exit_handler>:
 8004160:	4a02      	ldr	r2, [pc, #8]	@ (800416c <stdio_exit_handler+0xc>)
 8004162:	4903      	ldr	r1, [pc, #12]	@ (8004170 <stdio_exit_handler+0x10>)
 8004164:	4803      	ldr	r0, [pc, #12]	@ (8004174 <stdio_exit_handler+0x14>)
 8004166:	f000 b869 	b.w	800423c <_fwalk_sglue>
 800416a:	bf00      	nop
 800416c:	20000020 	.word	0x20000020
 8004170:	080048d5 	.word	0x080048d5
 8004174:	20000030 	.word	0x20000030

08004178 <cleanup_stdio>:
 8004178:	6841      	ldr	r1, [r0, #4]
 800417a:	4b0c      	ldr	r3, [pc, #48]	@ (80041ac <cleanup_stdio+0x34>)
 800417c:	4299      	cmp	r1, r3
 800417e:	b510      	push	{r4, lr}
 8004180:	4604      	mov	r4, r0
 8004182:	d001      	beq.n	8004188 <cleanup_stdio+0x10>
 8004184:	f000 fba6 	bl	80048d4 <_fflush_r>
 8004188:	68a1      	ldr	r1, [r4, #8]
 800418a:	4b09      	ldr	r3, [pc, #36]	@ (80041b0 <cleanup_stdio+0x38>)
 800418c:	4299      	cmp	r1, r3
 800418e:	d002      	beq.n	8004196 <cleanup_stdio+0x1e>
 8004190:	4620      	mov	r0, r4
 8004192:	f000 fb9f 	bl	80048d4 <_fflush_r>
 8004196:	68e1      	ldr	r1, [r4, #12]
 8004198:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <cleanup_stdio+0x3c>)
 800419a:	4299      	cmp	r1, r3
 800419c:	d004      	beq.n	80041a8 <cleanup_stdio+0x30>
 800419e:	4620      	mov	r0, r4
 80041a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041a4:	f000 bb96 	b.w	80048d4 <_fflush_r>
 80041a8:	bd10      	pop	{r4, pc}
 80041aa:	bf00      	nop
 80041ac:	20000238 	.word	0x20000238
 80041b0:	200002a0 	.word	0x200002a0
 80041b4:	20000308 	.word	0x20000308

080041b8 <global_stdio_init.part.0>:
 80041b8:	b510      	push	{r4, lr}
 80041ba:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <global_stdio_init.part.0+0x30>)
 80041bc:	4c0b      	ldr	r4, [pc, #44]	@ (80041ec <global_stdio_init.part.0+0x34>)
 80041be:	4a0c      	ldr	r2, [pc, #48]	@ (80041f0 <global_stdio_init.part.0+0x38>)
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	4620      	mov	r0, r4
 80041c4:	2200      	movs	r2, #0
 80041c6:	2104      	movs	r1, #4
 80041c8:	f7ff ff94 	bl	80040f4 <std>
 80041cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80041d0:	2201      	movs	r2, #1
 80041d2:	2109      	movs	r1, #9
 80041d4:	f7ff ff8e 	bl	80040f4 <std>
 80041d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041dc:	2202      	movs	r2, #2
 80041de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041e2:	2112      	movs	r1, #18
 80041e4:	f7ff bf86 	b.w	80040f4 <std>
 80041e8:	20000370 	.word	0x20000370
 80041ec:	20000238 	.word	0x20000238
 80041f0:	08004161 	.word	0x08004161

080041f4 <__sfp_lock_acquire>:
 80041f4:	4801      	ldr	r0, [pc, #4]	@ (80041fc <__sfp_lock_acquire+0x8>)
 80041f6:	f000 b9ee 	b.w	80045d6 <__retarget_lock_acquire_recursive>
 80041fa:	bf00      	nop
 80041fc:	20000379 	.word	0x20000379

08004200 <__sfp_lock_release>:
 8004200:	4801      	ldr	r0, [pc, #4]	@ (8004208 <__sfp_lock_release+0x8>)
 8004202:	f000 b9e9 	b.w	80045d8 <__retarget_lock_release_recursive>
 8004206:	bf00      	nop
 8004208:	20000379 	.word	0x20000379

0800420c <__sinit>:
 800420c:	b510      	push	{r4, lr}
 800420e:	4604      	mov	r4, r0
 8004210:	f7ff fff0 	bl	80041f4 <__sfp_lock_acquire>
 8004214:	6a23      	ldr	r3, [r4, #32]
 8004216:	b11b      	cbz	r3, 8004220 <__sinit+0x14>
 8004218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800421c:	f7ff bff0 	b.w	8004200 <__sfp_lock_release>
 8004220:	4b04      	ldr	r3, [pc, #16]	@ (8004234 <__sinit+0x28>)
 8004222:	6223      	str	r3, [r4, #32]
 8004224:	4b04      	ldr	r3, [pc, #16]	@ (8004238 <__sinit+0x2c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f5      	bne.n	8004218 <__sinit+0xc>
 800422c:	f7ff ffc4 	bl	80041b8 <global_stdio_init.part.0>
 8004230:	e7f2      	b.n	8004218 <__sinit+0xc>
 8004232:	bf00      	nop
 8004234:	08004179 	.word	0x08004179
 8004238:	20000370 	.word	0x20000370

0800423c <_fwalk_sglue>:
 800423c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004240:	4607      	mov	r7, r0
 8004242:	4688      	mov	r8, r1
 8004244:	4614      	mov	r4, r2
 8004246:	2600      	movs	r6, #0
 8004248:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800424c:	f1b9 0901 	subs.w	r9, r9, #1
 8004250:	d505      	bpl.n	800425e <_fwalk_sglue+0x22>
 8004252:	6824      	ldr	r4, [r4, #0]
 8004254:	2c00      	cmp	r4, #0
 8004256:	d1f7      	bne.n	8004248 <_fwalk_sglue+0xc>
 8004258:	4630      	mov	r0, r6
 800425a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800425e:	89ab      	ldrh	r3, [r5, #12]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d907      	bls.n	8004274 <_fwalk_sglue+0x38>
 8004264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004268:	3301      	adds	r3, #1
 800426a:	d003      	beq.n	8004274 <_fwalk_sglue+0x38>
 800426c:	4629      	mov	r1, r5
 800426e:	4638      	mov	r0, r7
 8004270:	47c0      	blx	r8
 8004272:	4306      	orrs	r6, r0
 8004274:	3568      	adds	r5, #104	@ 0x68
 8004276:	e7e9      	b.n	800424c <_fwalk_sglue+0x10>

08004278 <_puts_r>:
 8004278:	6a03      	ldr	r3, [r0, #32]
 800427a:	b570      	push	{r4, r5, r6, lr}
 800427c:	6884      	ldr	r4, [r0, #8]
 800427e:	4605      	mov	r5, r0
 8004280:	460e      	mov	r6, r1
 8004282:	b90b      	cbnz	r3, 8004288 <_puts_r+0x10>
 8004284:	f7ff ffc2 	bl	800420c <__sinit>
 8004288:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800428a:	07db      	lsls	r3, r3, #31
 800428c:	d405      	bmi.n	800429a <_puts_r+0x22>
 800428e:	89a3      	ldrh	r3, [r4, #12]
 8004290:	0598      	lsls	r0, r3, #22
 8004292:	d402      	bmi.n	800429a <_puts_r+0x22>
 8004294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004296:	f000 f99e 	bl	80045d6 <__retarget_lock_acquire_recursive>
 800429a:	89a3      	ldrh	r3, [r4, #12]
 800429c:	0719      	lsls	r1, r3, #28
 800429e:	d502      	bpl.n	80042a6 <_puts_r+0x2e>
 80042a0:	6923      	ldr	r3, [r4, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d135      	bne.n	8004312 <_puts_r+0x9a>
 80042a6:	4621      	mov	r1, r4
 80042a8:	4628      	mov	r0, r5
 80042aa:	f000 f8c5 	bl	8004438 <__swsetup_r>
 80042ae:	b380      	cbz	r0, 8004312 <_puts_r+0x9a>
 80042b0:	f04f 35ff 	mov.w	r5, #4294967295
 80042b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042b6:	07da      	lsls	r2, r3, #31
 80042b8:	d405      	bmi.n	80042c6 <_puts_r+0x4e>
 80042ba:	89a3      	ldrh	r3, [r4, #12]
 80042bc:	059b      	lsls	r3, r3, #22
 80042be:	d402      	bmi.n	80042c6 <_puts_r+0x4e>
 80042c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042c2:	f000 f989 	bl	80045d8 <__retarget_lock_release_recursive>
 80042c6:	4628      	mov	r0, r5
 80042c8:	bd70      	pop	{r4, r5, r6, pc}
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	da04      	bge.n	80042d8 <_puts_r+0x60>
 80042ce:	69a2      	ldr	r2, [r4, #24]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	dc17      	bgt.n	8004304 <_puts_r+0x8c>
 80042d4:	290a      	cmp	r1, #10
 80042d6:	d015      	beq.n	8004304 <_puts_r+0x8c>
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	6022      	str	r2, [r4, #0]
 80042de:	7019      	strb	r1, [r3, #0]
 80042e0:	68a3      	ldr	r3, [r4, #8]
 80042e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042e6:	3b01      	subs	r3, #1
 80042e8:	60a3      	str	r3, [r4, #8]
 80042ea:	2900      	cmp	r1, #0
 80042ec:	d1ed      	bne.n	80042ca <_puts_r+0x52>
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	da11      	bge.n	8004316 <_puts_r+0x9e>
 80042f2:	4622      	mov	r2, r4
 80042f4:	210a      	movs	r1, #10
 80042f6:	4628      	mov	r0, r5
 80042f8:	f000 f85f 	bl	80043ba <__swbuf_r>
 80042fc:	3001      	adds	r0, #1
 80042fe:	d0d7      	beq.n	80042b0 <_puts_r+0x38>
 8004300:	250a      	movs	r5, #10
 8004302:	e7d7      	b.n	80042b4 <_puts_r+0x3c>
 8004304:	4622      	mov	r2, r4
 8004306:	4628      	mov	r0, r5
 8004308:	f000 f857 	bl	80043ba <__swbuf_r>
 800430c:	3001      	adds	r0, #1
 800430e:	d1e7      	bne.n	80042e0 <_puts_r+0x68>
 8004310:	e7ce      	b.n	80042b0 <_puts_r+0x38>
 8004312:	3e01      	subs	r6, #1
 8004314:	e7e4      	b.n	80042e0 <_puts_r+0x68>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	6022      	str	r2, [r4, #0]
 800431c:	220a      	movs	r2, #10
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	e7ee      	b.n	8004300 <_puts_r+0x88>
	...

08004324 <puts>:
 8004324:	4b02      	ldr	r3, [pc, #8]	@ (8004330 <puts+0xc>)
 8004326:	4601      	mov	r1, r0
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	f7ff bfa5 	b.w	8004278 <_puts_r>
 800432e:	bf00      	nop
 8004330:	2000002c 	.word	0x2000002c

08004334 <__sread>:
 8004334:	b510      	push	{r4, lr}
 8004336:	460c      	mov	r4, r1
 8004338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800433c:	f000 f8fc 	bl	8004538 <_read_r>
 8004340:	2800      	cmp	r0, #0
 8004342:	bfab      	itete	ge
 8004344:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004346:	89a3      	ldrhlt	r3, [r4, #12]
 8004348:	181b      	addge	r3, r3, r0
 800434a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800434e:	bfac      	ite	ge
 8004350:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004352:	81a3      	strhlt	r3, [r4, #12]
 8004354:	bd10      	pop	{r4, pc}

08004356 <__swrite>:
 8004356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800435a:	461f      	mov	r7, r3
 800435c:	898b      	ldrh	r3, [r1, #12]
 800435e:	05db      	lsls	r3, r3, #23
 8004360:	4605      	mov	r5, r0
 8004362:	460c      	mov	r4, r1
 8004364:	4616      	mov	r6, r2
 8004366:	d505      	bpl.n	8004374 <__swrite+0x1e>
 8004368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800436c:	2302      	movs	r3, #2
 800436e:	2200      	movs	r2, #0
 8004370:	f000 f8d0 	bl	8004514 <_lseek_r>
 8004374:	89a3      	ldrh	r3, [r4, #12]
 8004376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800437a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800437e:	81a3      	strh	r3, [r4, #12]
 8004380:	4632      	mov	r2, r6
 8004382:	463b      	mov	r3, r7
 8004384:	4628      	mov	r0, r5
 8004386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800438a:	f000 b8e7 	b.w	800455c <_write_r>

0800438e <__sseek>:
 800438e:	b510      	push	{r4, lr}
 8004390:	460c      	mov	r4, r1
 8004392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004396:	f000 f8bd 	bl	8004514 <_lseek_r>
 800439a:	1c43      	adds	r3, r0, #1
 800439c:	89a3      	ldrh	r3, [r4, #12]
 800439e:	bf15      	itete	ne
 80043a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043aa:	81a3      	strheq	r3, [r4, #12]
 80043ac:	bf18      	it	ne
 80043ae:	81a3      	strhne	r3, [r4, #12]
 80043b0:	bd10      	pop	{r4, pc}

080043b2 <__sclose>:
 80043b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b6:	f000 b89d 	b.w	80044f4 <_close_r>

080043ba <__swbuf_r>:
 80043ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043bc:	460e      	mov	r6, r1
 80043be:	4614      	mov	r4, r2
 80043c0:	4605      	mov	r5, r0
 80043c2:	b118      	cbz	r0, 80043cc <__swbuf_r+0x12>
 80043c4:	6a03      	ldr	r3, [r0, #32]
 80043c6:	b90b      	cbnz	r3, 80043cc <__swbuf_r+0x12>
 80043c8:	f7ff ff20 	bl	800420c <__sinit>
 80043cc:	69a3      	ldr	r3, [r4, #24]
 80043ce:	60a3      	str	r3, [r4, #8]
 80043d0:	89a3      	ldrh	r3, [r4, #12]
 80043d2:	071a      	lsls	r2, r3, #28
 80043d4:	d501      	bpl.n	80043da <__swbuf_r+0x20>
 80043d6:	6923      	ldr	r3, [r4, #16]
 80043d8:	b943      	cbnz	r3, 80043ec <__swbuf_r+0x32>
 80043da:	4621      	mov	r1, r4
 80043dc:	4628      	mov	r0, r5
 80043de:	f000 f82b 	bl	8004438 <__swsetup_r>
 80043e2:	b118      	cbz	r0, 80043ec <__swbuf_r+0x32>
 80043e4:	f04f 37ff 	mov.w	r7, #4294967295
 80043e8:	4638      	mov	r0, r7
 80043ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	6922      	ldr	r2, [r4, #16]
 80043f0:	1a98      	subs	r0, r3, r2
 80043f2:	6963      	ldr	r3, [r4, #20]
 80043f4:	b2f6      	uxtb	r6, r6
 80043f6:	4283      	cmp	r3, r0
 80043f8:	4637      	mov	r7, r6
 80043fa:	dc05      	bgt.n	8004408 <__swbuf_r+0x4e>
 80043fc:	4621      	mov	r1, r4
 80043fe:	4628      	mov	r0, r5
 8004400:	f000 fa68 	bl	80048d4 <_fflush_r>
 8004404:	2800      	cmp	r0, #0
 8004406:	d1ed      	bne.n	80043e4 <__swbuf_r+0x2a>
 8004408:	68a3      	ldr	r3, [r4, #8]
 800440a:	3b01      	subs	r3, #1
 800440c:	60a3      	str	r3, [r4, #8]
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	6022      	str	r2, [r4, #0]
 8004414:	701e      	strb	r6, [r3, #0]
 8004416:	6962      	ldr	r2, [r4, #20]
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	429a      	cmp	r2, r3
 800441c:	d004      	beq.n	8004428 <__swbuf_r+0x6e>
 800441e:	89a3      	ldrh	r3, [r4, #12]
 8004420:	07db      	lsls	r3, r3, #31
 8004422:	d5e1      	bpl.n	80043e8 <__swbuf_r+0x2e>
 8004424:	2e0a      	cmp	r6, #10
 8004426:	d1df      	bne.n	80043e8 <__swbuf_r+0x2e>
 8004428:	4621      	mov	r1, r4
 800442a:	4628      	mov	r0, r5
 800442c:	f000 fa52 	bl	80048d4 <_fflush_r>
 8004430:	2800      	cmp	r0, #0
 8004432:	d0d9      	beq.n	80043e8 <__swbuf_r+0x2e>
 8004434:	e7d6      	b.n	80043e4 <__swbuf_r+0x2a>
	...

08004438 <__swsetup_r>:
 8004438:	b538      	push	{r3, r4, r5, lr}
 800443a:	4b29      	ldr	r3, [pc, #164]	@ (80044e0 <__swsetup_r+0xa8>)
 800443c:	4605      	mov	r5, r0
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	460c      	mov	r4, r1
 8004442:	b118      	cbz	r0, 800444c <__swsetup_r+0x14>
 8004444:	6a03      	ldr	r3, [r0, #32]
 8004446:	b90b      	cbnz	r3, 800444c <__swsetup_r+0x14>
 8004448:	f7ff fee0 	bl	800420c <__sinit>
 800444c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004450:	0719      	lsls	r1, r3, #28
 8004452:	d422      	bmi.n	800449a <__swsetup_r+0x62>
 8004454:	06da      	lsls	r2, r3, #27
 8004456:	d407      	bmi.n	8004468 <__swsetup_r+0x30>
 8004458:	2209      	movs	r2, #9
 800445a:	602a      	str	r2, [r5, #0]
 800445c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004460:	81a3      	strh	r3, [r4, #12]
 8004462:	f04f 30ff 	mov.w	r0, #4294967295
 8004466:	e033      	b.n	80044d0 <__swsetup_r+0x98>
 8004468:	0758      	lsls	r0, r3, #29
 800446a:	d512      	bpl.n	8004492 <__swsetup_r+0x5a>
 800446c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800446e:	b141      	cbz	r1, 8004482 <__swsetup_r+0x4a>
 8004470:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004474:	4299      	cmp	r1, r3
 8004476:	d002      	beq.n	800447e <__swsetup_r+0x46>
 8004478:	4628      	mov	r0, r5
 800447a:	f000 f8af 	bl	80045dc <_free_r>
 800447e:	2300      	movs	r3, #0
 8004480:	6363      	str	r3, [r4, #52]	@ 0x34
 8004482:	89a3      	ldrh	r3, [r4, #12]
 8004484:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004488:	81a3      	strh	r3, [r4, #12]
 800448a:	2300      	movs	r3, #0
 800448c:	6063      	str	r3, [r4, #4]
 800448e:	6923      	ldr	r3, [r4, #16]
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	89a3      	ldrh	r3, [r4, #12]
 8004494:	f043 0308 	orr.w	r3, r3, #8
 8004498:	81a3      	strh	r3, [r4, #12]
 800449a:	6923      	ldr	r3, [r4, #16]
 800449c:	b94b      	cbnz	r3, 80044b2 <__swsetup_r+0x7a>
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80044a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044a8:	d003      	beq.n	80044b2 <__swsetup_r+0x7a>
 80044aa:	4621      	mov	r1, r4
 80044ac:	4628      	mov	r0, r5
 80044ae:	f000 fa5f 	bl	8004970 <__smakebuf_r>
 80044b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044b6:	f013 0201 	ands.w	r2, r3, #1
 80044ba:	d00a      	beq.n	80044d2 <__swsetup_r+0x9a>
 80044bc:	2200      	movs	r2, #0
 80044be:	60a2      	str	r2, [r4, #8]
 80044c0:	6962      	ldr	r2, [r4, #20]
 80044c2:	4252      	negs	r2, r2
 80044c4:	61a2      	str	r2, [r4, #24]
 80044c6:	6922      	ldr	r2, [r4, #16]
 80044c8:	b942      	cbnz	r2, 80044dc <__swsetup_r+0xa4>
 80044ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80044ce:	d1c5      	bne.n	800445c <__swsetup_r+0x24>
 80044d0:	bd38      	pop	{r3, r4, r5, pc}
 80044d2:	0799      	lsls	r1, r3, #30
 80044d4:	bf58      	it	pl
 80044d6:	6962      	ldrpl	r2, [r4, #20]
 80044d8:	60a2      	str	r2, [r4, #8]
 80044da:	e7f4      	b.n	80044c6 <__swsetup_r+0x8e>
 80044dc:	2000      	movs	r0, #0
 80044de:	e7f7      	b.n	80044d0 <__swsetup_r+0x98>
 80044e0:	2000002c 	.word	0x2000002c

080044e4 <memset>:
 80044e4:	4402      	add	r2, r0
 80044e6:	4603      	mov	r3, r0
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d100      	bne.n	80044ee <memset+0xa>
 80044ec:	4770      	bx	lr
 80044ee:	f803 1b01 	strb.w	r1, [r3], #1
 80044f2:	e7f9      	b.n	80044e8 <memset+0x4>

080044f4 <_close_r>:
 80044f4:	b538      	push	{r3, r4, r5, lr}
 80044f6:	4d06      	ldr	r5, [pc, #24]	@ (8004510 <_close_r+0x1c>)
 80044f8:	2300      	movs	r3, #0
 80044fa:	4604      	mov	r4, r0
 80044fc:	4608      	mov	r0, r1
 80044fe:	602b      	str	r3, [r5, #0]
 8004500:	f7fc fb8d 	bl	8000c1e <_close>
 8004504:	1c43      	adds	r3, r0, #1
 8004506:	d102      	bne.n	800450e <_close_r+0x1a>
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	b103      	cbz	r3, 800450e <_close_r+0x1a>
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	bd38      	pop	{r3, r4, r5, pc}
 8004510:	20000374 	.word	0x20000374

08004514 <_lseek_r>:
 8004514:	b538      	push	{r3, r4, r5, lr}
 8004516:	4d07      	ldr	r5, [pc, #28]	@ (8004534 <_lseek_r+0x20>)
 8004518:	4604      	mov	r4, r0
 800451a:	4608      	mov	r0, r1
 800451c:	4611      	mov	r1, r2
 800451e:	2200      	movs	r2, #0
 8004520:	602a      	str	r2, [r5, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	f7fc fba2 	bl	8000c6c <_lseek>
 8004528:	1c43      	adds	r3, r0, #1
 800452a:	d102      	bne.n	8004532 <_lseek_r+0x1e>
 800452c:	682b      	ldr	r3, [r5, #0]
 800452e:	b103      	cbz	r3, 8004532 <_lseek_r+0x1e>
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	bd38      	pop	{r3, r4, r5, pc}
 8004534:	20000374 	.word	0x20000374

08004538 <_read_r>:
 8004538:	b538      	push	{r3, r4, r5, lr}
 800453a:	4d07      	ldr	r5, [pc, #28]	@ (8004558 <_read_r+0x20>)
 800453c:	4604      	mov	r4, r0
 800453e:	4608      	mov	r0, r1
 8004540:	4611      	mov	r1, r2
 8004542:	2200      	movs	r2, #0
 8004544:	602a      	str	r2, [r5, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	f7fc fb30 	bl	8000bac <_read>
 800454c:	1c43      	adds	r3, r0, #1
 800454e:	d102      	bne.n	8004556 <_read_r+0x1e>
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	b103      	cbz	r3, 8004556 <_read_r+0x1e>
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	bd38      	pop	{r3, r4, r5, pc}
 8004558:	20000374 	.word	0x20000374

0800455c <_write_r>:
 800455c:	b538      	push	{r3, r4, r5, lr}
 800455e:	4d07      	ldr	r5, [pc, #28]	@ (800457c <_write_r+0x20>)
 8004560:	4604      	mov	r4, r0
 8004562:	4608      	mov	r0, r1
 8004564:	4611      	mov	r1, r2
 8004566:	2200      	movs	r2, #0
 8004568:	602a      	str	r2, [r5, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	f7fc fb3b 	bl	8000be6 <_write>
 8004570:	1c43      	adds	r3, r0, #1
 8004572:	d102      	bne.n	800457a <_write_r+0x1e>
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	b103      	cbz	r3, 800457a <_write_r+0x1e>
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	bd38      	pop	{r3, r4, r5, pc}
 800457c:	20000374 	.word	0x20000374

08004580 <__errno>:
 8004580:	4b01      	ldr	r3, [pc, #4]	@ (8004588 <__errno+0x8>)
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	2000002c 	.word	0x2000002c

0800458c <__libc_init_array>:
 800458c:	b570      	push	{r4, r5, r6, lr}
 800458e:	4d0d      	ldr	r5, [pc, #52]	@ (80045c4 <__libc_init_array+0x38>)
 8004590:	4c0d      	ldr	r4, [pc, #52]	@ (80045c8 <__libc_init_array+0x3c>)
 8004592:	1b64      	subs	r4, r4, r5
 8004594:	10a4      	asrs	r4, r4, #2
 8004596:	2600      	movs	r6, #0
 8004598:	42a6      	cmp	r6, r4
 800459a:	d109      	bne.n	80045b0 <__libc_init_array+0x24>
 800459c:	4d0b      	ldr	r5, [pc, #44]	@ (80045cc <__libc_init_array+0x40>)
 800459e:	4c0c      	ldr	r4, [pc, #48]	@ (80045d0 <__libc_init_array+0x44>)
 80045a0:	f000 fa54 	bl	8004a4c <_init>
 80045a4:	1b64      	subs	r4, r4, r5
 80045a6:	10a4      	asrs	r4, r4, #2
 80045a8:	2600      	movs	r6, #0
 80045aa:	42a6      	cmp	r6, r4
 80045ac:	d105      	bne.n	80045ba <__libc_init_array+0x2e>
 80045ae:	bd70      	pop	{r4, r5, r6, pc}
 80045b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b4:	4798      	blx	r3
 80045b6:	3601      	adds	r6, #1
 80045b8:	e7ee      	b.n	8004598 <__libc_init_array+0xc>
 80045ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80045be:	4798      	blx	r3
 80045c0:	3601      	adds	r6, #1
 80045c2:	e7f2      	b.n	80045aa <__libc_init_array+0x1e>
 80045c4:	08004a98 	.word	0x08004a98
 80045c8:	08004a98 	.word	0x08004a98
 80045cc:	08004a98 	.word	0x08004a98
 80045d0:	08004a9c 	.word	0x08004a9c

080045d4 <__retarget_lock_init_recursive>:
 80045d4:	4770      	bx	lr

080045d6 <__retarget_lock_acquire_recursive>:
 80045d6:	4770      	bx	lr

080045d8 <__retarget_lock_release_recursive>:
 80045d8:	4770      	bx	lr
	...

080045dc <_free_r>:
 80045dc:	b538      	push	{r3, r4, r5, lr}
 80045de:	4605      	mov	r5, r0
 80045e0:	2900      	cmp	r1, #0
 80045e2:	d041      	beq.n	8004668 <_free_r+0x8c>
 80045e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045e8:	1f0c      	subs	r4, r1, #4
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	bfb8      	it	lt
 80045ee:	18e4      	addlt	r4, r4, r3
 80045f0:	f000 f8e0 	bl	80047b4 <__malloc_lock>
 80045f4:	4a1d      	ldr	r2, [pc, #116]	@ (800466c <_free_r+0x90>)
 80045f6:	6813      	ldr	r3, [r2, #0]
 80045f8:	b933      	cbnz	r3, 8004608 <_free_r+0x2c>
 80045fa:	6063      	str	r3, [r4, #4]
 80045fc:	6014      	str	r4, [r2, #0]
 80045fe:	4628      	mov	r0, r5
 8004600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004604:	f000 b8dc 	b.w	80047c0 <__malloc_unlock>
 8004608:	42a3      	cmp	r3, r4
 800460a:	d908      	bls.n	800461e <_free_r+0x42>
 800460c:	6820      	ldr	r0, [r4, #0]
 800460e:	1821      	adds	r1, r4, r0
 8004610:	428b      	cmp	r3, r1
 8004612:	bf01      	itttt	eq
 8004614:	6819      	ldreq	r1, [r3, #0]
 8004616:	685b      	ldreq	r3, [r3, #4]
 8004618:	1809      	addeq	r1, r1, r0
 800461a:	6021      	streq	r1, [r4, #0]
 800461c:	e7ed      	b.n	80045fa <_free_r+0x1e>
 800461e:	461a      	mov	r2, r3
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	b10b      	cbz	r3, 8004628 <_free_r+0x4c>
 8004624:	42a3      	cmp	r3, r4
 8004626:	d9fa      	bls.n	800461e <_free_r+0x42>
 8004628:	6811      	ldr	r1, [r2, #0]
 800462a:	1850      	adds	r0, r2, r1
 800462c:	42a0      	cmp	r0, r4
 800462e:	d10b      	bne.n	8004648 <_free_r+0x6c>
 8004630:	6820      	ldr	r0, [r4, #0]
 8004632:	4401      	add	r1, r0
 8004634:	1850      	adds	r0, r2, r1
 8004636:	4283      	cmp	r3, r0
 8004638:	6011      	str	r1, [r2, #0]
 800463a:	d1e0      	bne.n	80045fe <_free_r+0x22>
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	6053      	str	r3, [r2, #4]
 8004642:	4408      	add	r0, r1
 8004644:	6010      	str	r0, [r2, #0]
 8004646:	e7da      	b.n	80045fe <_free_r+0x22>
 8004648:	d902      	bls.n	8004650 <_free_r+0x74>
 800464a:	230c      	movs	r3, #12
 800464c:	602b      	str	r3, [r5, #0]
 800464e:	e7d6      	b.n	80045fe <_free_r+0x22>
 8004650:	6820      	ldr	r0, [r4, #0]
 8004652:	1821      	adds	r1, r4, r0
 8004654:	428b      	cmp	r3, r1
 8004656:	bf04      	itt	eq
 8004658:	6819      	ldreq	r1, [r3, #0]
 800465a:	685b      	ldreq	r3, [r3, #4]
 800465c:	6063      	str	r3, [r4, #4]
 800465e:	bf04      	itt	eq
 8004660:	1809      	addeq	r1, r1, r0
 8004662:	6021      	streq	r1, [r4, #0]
 8004664:	6054      	str	r4, [r2, #4]
 8004666:	e7ca      	b.n	80045fe <_free_r+0x22>
 8004668:	bd38      	pop	{r3, r4, r5, pc}
 800466a:	bf00      	nop
 800466c:	20000380 	.word	0x20000380

08004670 <sbrk_aligned>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	4e0f      	ldr	r6, [pc, #60]	@ (80046b0 <sbrk_aligned+0x40>)
 8004674:	460c      	mov	r4, r1
 8004676:	6831      	ldr	r1, [r6, #0]
 8004678:	4605      	mov	r5, r0
 800467a:	b911      	cbnz	r1, 8004682 <sbrk_aligned+0x12>
 800467c:	f000 f9d6 	bl	8004a2c <_sbrk_r>
 8004680:	6030      	str	r0, [r6, #0]
 8004682:	4621      	mov	r1, r4
 8004684:	4628      	mov	r0, r5
 8004686:	f000 f9d1 	bl	8004a2c <_sbrk_r>
 800468a:	1c43      	adds	r3, r0, #1
 800468c:	d103      	bne.n	8004696 <sbrk_aligned+0x26>
 800468e:	f04f 34ff 	mov.w	r4, #4294967295
 8004692:	4620      	mov	r0, r4
 8004694:	bd70      	pop	{r4, r5, r6, pc}
 8004696:	1cc4      	adds	r4, r0, #3
 8004698:	f024 0403 	bic.w	r4, r4, #3
 800469c:	42a0      	cmp	r0, r4
 800469e:	d0f8      	beq.n	8004692 <sbrk_aligned+0x22>
 80046a0:	1a21      	subs	r1, r4, r0
 80046a2:	4628      	mov	r0, r5
 80046a4:	f000 f9c2 	bl	8004a2c <_sbrk_r>
 80046a8:	3001      	adds	r0, #1
 80046aa:	d1f2      	bne.n	8004692 <sbrk_aligned+0x22>
 80046ac:	e7ef      	b.n	800468e <sbrk_aligned+0x1e>
 80046ae:	bf00      	nop
 80046b0:	2000037c 	.word	0x2000037c

080046b4 <_malloc_r>:
 80046b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046b8:	1ccd      	adds	r5, r1, #3
 80046ba:	f025 0503 	bic.w	r5, r5, #3
 80046be:	3508      	adds	r5, #8
 80046c0:	2d0c      	cmp	r5, #12
 80046c2:	bf38      	it	cc
 80046c4:	250c      	movcc	r5, #12
 80046c6:	2d00      	cmp	r5, #0
 80046c8:	4606      	mov	r6, r0
 80046ca:	db01      	blt.n	80046d0 <_malloc_r+0x1c>
 80046cc:	42a9      	cmp	r1, r5
 80046ce:	d904      	bls.n	80046da <_malloc_r+0x26>
 80046d0:	230c      	movs	r3, #12
 80046d2:	6033      	str	r3, [r6, #0]
 80046d4:	2000      	movs	r0, #0
 80046d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047b0 <_malloc_r+0xfc>
 80046de:	f000 f869 	bl	80047b4 <__malloc_lock>
 80046e2:	f8d8 3000 	ldr.w	r3, [r8]
 80046e6:	461c      	mov	r4, r3
 80046e8:	bb44      	cbnz	r4, 800473c <_malloc_r+0x88>
 80046ea:	4629      	mov	r1, r5
 80046ec:	4630      	mov	r0, r6
 80046ee:	f7ff ffbf 	bl	8004670 <sbrk_aligned>
 80046f2:	1c43      	adds	r3, r0, #1
 80046f4:	4604      	mov	r4, r0
 80046f6:	d158      	bne.n	80047aa <_malloc_r+0xf6>
 80046f8:	f8d8 4000 	ldr.w	r4, [r8]
 80046fc:	4627      	mov	r7, r4
 80046fe:	2f00      	cmp	r7, #0
 8004700:	d143      	bne.n	800478a <_malloc_r+0xd6>
 8004702:	2c00      	cmp	r4, #0
 8004704:	d04b      	beq.n	800479e <_malloc_r+0xea>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	4639      	mov	r1, r7
 800470a:	4630      	mov	r0, r6
 800470c:	eb04 0903 	add.w	r9, r4, r3
 8004710:	f000 f98c 	bl	8004a2c <_sbrk_r>
 8004714:	4581      	cmp	r9, r0
 8004716:	d142      	bne.n	800479e <_malloc_r+0xea>
 8004718:	6821      	ldr	r1, [r4, #0]
 800471a:	1a6d      	subs	r5, r5, r1
 800471c:	4629      	mov	r1, r5
 800471e:	4630      	mov	r0, r6
 8004720:	f7ff ffa6 	bl	8004670 <sbrk_aligned>
 8004724:	3001      	adds	r0, #1
 8004726:	d03a      	beq.n	800479e <_malloc_r+0xea>
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	442b      	add	r3, r5
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	f8d8 3000 	ldr.w	r3, [r8]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	bb62      	cbnz	r2, 8004790 <_malloc_r+0xdc>
 8004736:	f8c8 7000 	str.w	r7, [r8]
 800473a:	e00f      	b.n	800475c <_malloc_r+0xa8>
 800473c:	6822      	ldr	r2, [r4, #0]
 800473e:	1b52      	subs	r2, r2, r5
 8004740:	d420      	bmi.n	8004784 <_malloc_r+0xd0>
 8004742:	2a0b      	cmp	r2, #11
 8004744:	d917      	bls.n	8004776 <_malloc_r+0xc2>
 8004746:	1961      	adds	r1, r4, r5
 8004748:	42a3      	cmp	r3, r4
 800474a:	6025      	str	r5, [r4, #0]
 800474c:	bf18      	it	ne
 800474e:	6059      	strne	r1, [r3, #4]
 8004750:	6863      	ldr	r3, [r4, #4]
 8004752:	bf08      	it	eq
 8004754:	f8c8 1000 	streq.w	r1, [r8]
 8004758:	5162      	str	r2, [r4, r5]
 800475a:	604b      	str	r3, [r1, #4]
 800475c:	4630      	mov	r0, r6
 800475e:	f000 f82f 	bl	80047c0 <__malloc_unlock>
 8004762:	f104 000b 	add.w	r0, r4, #11
 8004766:	1d23      	adds	r3, r4, #4
 8004768:	f020 0007 	bic.w	r0, r0, #7
 800476c:	1ac2      	subs	r2, r0, r3
 800476e:	bf1c      	itt	ne
 8004770:	1a1b      	subne	r3, r3, r0
 8004772:	50a3      	strne	r3, [r4, r2]
 8004774:	e7af      	b.n	80046d6 <_malloc_r+0x22>
 8004776:	6862      	ldr	r2, [r4, #4]
 8004778:	42a3      	cmp	r3, r4
 800477a:	bf0c      	ite	eq
 800477c:	f8c8 2000 	streq.w	r2, [r8]
 8004780:	605a      	strne	r2, [r3, #4]
 8004782:	e7eb      	b.n	800475c <_malloc_r+0xa8>
 8004784:	4623      	mov	r3, r4
 8004786:	6864      	ldr	r4, [r4, #4]
 8004788:	e7ae      	b.n	80046e8 <_malloc_r+0x34>
 800478a:	463c      	mov	r4, r7
 800478c:	687f      	ldr	r7, [r7, #4]
 800478e:	e7b6      	b.n	80046fe <_malloc_r+0x4a>
 8004790:	461a      	mov	r2, r3
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	42a3      	cmp	r3, r4
 8004796:	d1fb      	bne.n	8004790 <_malloc_r+0xdc>
 8004798:	2300      	movs	r3, #0
 800479a:	6053      	str	r3, [r2, #4]
 800479c:	e7de      	b.n	800475c <_malloc_r+0xa8>
 800479e:	230c      	movs	r3, #12
 80047a0:	6033      	str	r3, [r6, #0]
 80047a2:	4630      	mov	r0, r6
 80047a4:	f000 f80c 	bl	80047c0 <__malloc_unlock>
 80047a8:	e794      	b.n	80046d4 <_malloc_r+0x20>
 80047aa:	6005      	str	r5, [r0, #0]
 80047ac:	e7d6      	b.n	800475c <_malloc_r+0xa8>
 80047ae:	bf00      	nop
 80047b0:	20000380 	.word	0x20000380

080047b4 <__malloc_lock>:
 80047b4:	4801      	ldr	r0, [pc, #4]	@ (80047bc <__malloc_lock+0x8>)
 80047b6:	f7ff bf0e 	b.w	80045d6 <__retarget_lock_acquire_recursive>
 80047ba:	bf00      	nop
 80047bc:	20000378 	.word	0x20000378

080047c0 <__malloc_unlock>:
 80047c0:	4801      	ldr	r0, [pc, #4]	@ (80047c8 <__malloc_unlock+0x8>)
 80047c2:	f7ff bf09 	b.w	80045d8 <__retarget_lock_release_recursive>
 80047c6:	bf00      	nop
 80047c8:	20000378 	.word	0x20000378

080047cc <__sflush_r>:
 80047cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047d4:	0716      	lsls	r6, r2, #28
 80047d6:	4605      	mov	r5, r0
 80047d8:	460c      	mov	r4, r1
 80047da:	d454      	bmi.n	8004886 <__sflush_r+0xba>
 80047dc:	684b      	ldr	r3, [r1, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	dc02      	bgt.n	80047e8 <__sflush_r+0x1c>
 80047e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	dd48      	ble.n	800487a <__sflush_r+0xae>
 80047e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047ea:	2e00      	cmp	r6, #0
 80047ec:	d045      	beq.n	800487a <__sflush_r+0xae>
 80047ee:	2300      	movs	r3, #0
 80047f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80047f4:	682f      	ldr	r7, [r5, #0]
 80047f6:	6a21      	ldr	r1, [r4, #32]
 80047f8:	602b      	str	r3, [r5, #0]
 80047fa:	d030      	beq.n	800485e <__sflush_r+0x92>
 80047fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80047fe:	89a3      	ldrh	r3, [r4, #12]
 8004800:	0759      	lsls	r1, r3, #29
 8004802:	d505      	bpl.n	8004810 <__sflush_r+0x44>
 8004804:	6863      	ldr	r3, [r4, #4]
 8004806:	1ad2      	subs	r2, r2, r3
 8004808:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800480a:	b10b      	cbz	r3, 8004810 <__sflush_r+0x44>
 800480c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800480e:	1ad2      	subs	r2, r2, r3
 8004810:	2300      	movs	r3, #0
 8004812:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004814:	6a21      	ldr	r1, [r4, #32]
 8004816:	4628      	mov	r0, r5
 8004818:	47b0      	blx	r6
 800481a:	1c43      	adds	r3, r0, #1
 800481c:	89a3      	ldrh	r3, [r4, #12]
 800481e:	d106      	bne.n	800482e <__sflush_r+0x62>
 8004820:	6829      	ldr	r1, [r5, #0]
 8004822:	291d      	cmp	r1, #29
 8004824:	d82b      	bhi.n	800487e <__sflush_r+0xb2>
 8004826:	4a2a      	ldr	r2, [pc, #168]	@ (80048d0 <__sflush_r+0x104>)
 8004828:	410a      	asrs	r2, r1
 800482a:	07d6      	lsls	r6, r2, #31
 800482c:	d427      	bmi.n	800487e <__sflush_r+0xb2>
 800482e:	2200      	movs	r2, #0
 8004830:	6062      	str	r2, [r4, #4]
 8004832:	04d9      	lsls	r1, r3, #19
 8004834:	6922      	ldr	r2, [r4, #16]
 8004836:	6022      	str	r2, [r4, #0]
 8004838:	d504      	bpl.n	8004844 <__sflush_r+0x78>
 800483a:	1c42      	adds	r2, r0, #1
 800483c:	d101      	bne.n	8004842 <__sflush_r+0x76>
 800483e:	682b      	ldr	r3, [r5, #0]
 8004840:	b903      	cbnz	r3, 8004844 <__sflush_r+0x78>
 8004842:	6560      	str	r0, [r4, #84]	@ 0x54
 8004844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004846:	602f      	str	r7, [r5, #0]
 8004848:	b1b9      	cbz	r1, 800487a <__sflush_r+0xae>
 800484a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800484e:	4299      	cmp	r1, r3
 8004850:	d002      	beq.n	8004858 <__sflush_r+0x8c>
 8004852:	4628      	mov	r0, r5
 8004854:	f7ff fec2 	bl	80045dc <_free_r>
 8004858:	2300      	movs	r3, #0
 800485a:	6363      	str	r3, [r4, #52]	@ 0x34
 800485c:	e00d      	b.n	800487a <__sflush_r+0xae>
 800485e:	2301      	movs	r3, #1
 8004860:	4628      	mov	r0, r5
 8004862:	47b0      	blx	r6
 8004864:	4602      	mov	r2, r0
 8004866:	1c50      	adds	r0, r2, #1
 8004868:	d1c9      	bne.n	80047fe <__sflush_r+0x32>
 800486a:	682b      	ldr	r3, [r5, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0c6      	beq.n	80047fe <__sflush_r+0x32>
 8004870:	2b1d      	cmp	r3, #29
 8004872:	d001      	beq.n	8004878 <__sflush_r+0xac>
 8004874:	2b16      	cmp	r3, #22
 8004876:	d11e      	bne.n	80048b6 <__sflush_r+0xea>
 8004878:	602f      	str	r7, [r5, #0]
 800487a:	2000      	movs	r0, #0
 800487c:	e022      	b.n	80048c4 <__sflush_r+0xf8>
 800487e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004882:	b21b      	sxth	r3, r3
 8004884:	e01b      	b.n	80048be <__sflush_r+0xf2>
 8004886:	690f      	ldr	r7, [r1, #16]
 8004888:	2f00      	cmp	r7, #0
 800488a:	d0f6      	beq.n	800487a <__sflush_r+0xae>
 800488c:	0793      	lsls	r3, r2, #30
 800488e:	680e      	ldr	r6, [r1, #0]
 8004890:	bf08      	it	eq
 8004892:	694b      	ldreq	r3, [r1, #20]
 8004894:	600f      	str	r7, [r1, #0]
 8004896:	bf18      	it	ne
 8004898:	2300      	movne	r3, #0
 800489a:	eba6 0807 	sub.w	r8, r6, r7
 800489e:	608b      	str	r3, [r1, #8]
 80048a0:	f1b8 0f00 	cmp.w	r8, #0
 80048a4:	dde9      	ble.n	800487a <__sflush_r+0xae>
 80048a6:	6a21      	ldr	r1, [r4, #32]
 80048a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80048aa:	4643      	mov	r3, r8
 80048ac:	463a      	mov	r2, r7
 80048ae:	4628      	mov	r0, r5
 80048b0:	47b0      	blx	r6
 80048b2:	2800      	cmp	r0, #0
 80048b4:	dc08      	bgt.n	80048c8 <__sflush_r+0xfc>
 80048b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048be:	81a3      	strh	r3, [r4, #12]
 80048c0:	f04f 30ff 	mov.w	r0, #4294967295
 80048c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048c8:	4407      	add	r7, r0
 80048ca:	eba8 0800 	sub.w	r8, r8, r0
 80048ce:	e7e7      	b.n	80048a0 <__sflush_r+0xd4>
 80048d0:	dfbffffe 	.word	0xdfbffffe

080048d4 <_fflush_r>:
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	690b      	ldr	r3, [r1, #16]
 80048d8:	4605      	mov	r5, r0
 80048da:	460c      	mov	r4, r1
 80048dc:	b913      	cbnz	r3, 80048e4 <_fflush_r+0x10>
 80048de:	2500      	movs	r5, #0
 80048e0:	4628      	mov	r0, r5
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
 80048e4:	b118      	cbz	r0, 80048ee <_fflush_r+0x1a>
 80048e6:	6a03      	ldr	r3, [r0, #32]
 80048e8:	b90b      	cbnz	r3, 80048ee <_fflush_r+0x1a>
 80048ea:	f7ff fc8f 	bl	800420c <__sinit>
 80048ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f3      	beq.n	80048de <_fflush_r+0xa>
 80048f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80048f8:	07d0      	lsls	r0, r2, #31
 80048fa:	d404      	bmi.n	8004906 <_fflush_r+0x32>
 80048fc:	0599      	lsls	r1, r3, #22
 80048fe:	d402      	bmi.n	8004906 <_fflush_r+0x32>
 8004900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004902:	f7ff fe68 	bl	80045d6 <__retarget_lock_acquire_recursive>
 8004906:	4628      	mov	r0, r5
 8004908:	4621      	mov	r1, r4
 800490a:	f7ff ff5f 	bl	80047cc <__sflush_r>
 800490e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004910:	07da      	lsls	r2, r3, #31
 8004912:	4605      	mov	r5, r0
 8004914:	d4e4      	bmi.n	80048e0 <_fflush_r+0xc>
 8004916:	89a3      	ldrh	r3, [r4, #12]
 8004918:	059b      	lsls	r3, r3, #22
 800491a:	d4e1      	bmi.n	80048e0 <_fflush_r+0xc>
 800491c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800491e:	f7ff fe5b 	bl	80045d8 <__retarget_lock_release_recursive>
 8004922:	e7dd      	b.n	80048e0 <_fflush_r+0xc>

08004924 <__swhatbuf_r>:
 8004924:	b570      	push	{r4, r5, r6, lr}
 8004926:	460c      	mov	r4, r1
 8004928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800492c:	2900      	cmp	r1, #0
 800492e:	b096      	sub	sp, #88	@ 0x58
 8004930:	4615      	mov	r5, r2
 8004932:	461e      	mov	r6, r3
 8004934:	da0d      	bge.n	8004952 <__swhatbuf_r+0x2e>
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800493c:	f04f 0100 	mov.w	r1, #0
 8004940:	bf14      	ite	ne
 8004942:	2340      	movne	r3, #64	@ 0x40
 8004944:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004948:	2000      	movs	r0, #0
 800494a:	6031      	str	r1, [r6, #0]
 800494c:	602b      	str	r3, [r5, #0]
 800494e:	b016      	add	sp, #88	@ 0x58
 8004950:	bd70      	pop	{r4, r5, r6, pc}
 8004952:	466a      	mov	r2, sp
 8004954:	f000 f848 	bl	80049e8 <_fstat_r>
 8004958:	2800      	cmp	r0, #0
 800495a:	dbec      	blt.n	8004936 <__swhatbuf_r+0x12>
 800495c:	9901      	ldr	r1, [sp, #4]
 800495e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004962:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004966:	4259      	negs	r1, r3
 8004968:	4159      	adcs	r1, r3
 800496a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800496e:	e7eb      	b.n	8004948 <__swhatbuf_r+0x24>

08004970 <__smakebuf_r>:
 8004970:	898b      	ldrh	r3, [r1, #12]
 8004972:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004974:	079d      	lsls	r5, r3, #30
 8004976:	4606      	mov	r6, r0
 8004978:	460c      	mov	r4, r1
 800497a:	d507      	bpl.n	800498c <__smakebuf_r+0x1c>
 800497c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	6123      	str	r3, [r4, #16]
 8004984:	2301      	movs	r3, #1
 8004986:	6163      	str	r3, [r4, #20]
 8004988:	b003      	add	sp, #12
 800498a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800498c:	ab01      	add	r3, sp, #4
 800498e:	466a      	mov	r2, sp
 8004990:	f7ff ffc8 	bl	8004924 <__swhatbuf_r>
 8004994:	9f00      	ldr	r7, [sp, #0]
 8004996:	4605      	mov	r5, r0
 8004998:	4639      	mov	r1, r7
 800499a:	4630      	mov	r0, r6
 800499c:	f7ff fe8a 	bl	80046b4 <_malloc_r>
 80049a0:	b948      	cbnz	r0, 80049b6 <__smakebuf_r+0x46>
 80049a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a6:	059a      	lsls	r2, r3, #22
 80049a8:	d4ee      	bmi.n	8004988 <__smakebuf_r+0x18>
 80049aa:	f023 0303 	bic.w	r3, r3, #3
 80049ae:	f043 0302 	orr.w	r3, r3, #2
 80049b2:	81a3      	strh	r3, [r4, #12]
 80049b4:	e7e2      	b.n	800497c <__smakebuf_r+0xc>
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	6020      	str	r0, [r4, #0]
 80049ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049be:	81a3      	strh	r3, [r4, #12]
 80049c0:	9b01      	ldr	r3, [sp, #4]
 80049c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80049c6:	b15b      	cbz	r3, 80049e0 <__smakebuf_r+0x70>
 80049c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049cc:	4630      	mov	r0, r6
 80049ce:	f000 f81d 	bl	8004a0c <_isatty_r>
 80049d2:	b128      	cbz	r0, 80049e0 <__smakebuf_r+0x70>
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	431d      	orrs	r5, r3
 80049e4:	81a5      	strh	r5, [r4, #12]
 80049e6:	e7cf      	b.n	8004988 <__smakebuf_r+0x18>

080049e8 <_fstat_r>:
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	4d07      	ldr	r5, [pc, #28]	@ (8004a08 <_fstat_r+0x20>)
 80049ec:	2300      	movs	r3, #0
 80049ee:	4604      	mov	r4, r0
 80049f0:	4608      	mov	r0, r1
 80049f2:	4611      	mov	r1, r2
 80049f4:	602b      	str	r3, [r5, #0]
 80049f6:	f7fc f91e 	bl	8000c36 <_fstat>
 80049fa:	1c43      	adds	r3, r0, #1
 80049fc:	d102      	bne.n	8004a04 <_fstat_r+0x1c>
 80049fe:	682b      	ldr	r3, [r5, #0]
 8004a00:	b103      	cbz	r3, 8004a04 <_fstat_r+0x1c>
 8004a02:	6023      	str	r3, [r4, #0]
 8004a04:	bd38      	pop	{r3, r4, r5, pc}
 8004a06:	bf00      	nop
 8004a08:	20000374 	.word	0x20000374

08004a0c <_isatty_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	4d06      	ldr	r5, [pc, #24]	@ (8004a28 <_isatty_r+0x1c>)
 8004a10:	2300      	movs	r3, #0
 8004a12:	4604      	mov	r4, r0
 8004a14:	4608      	mov	r0, r1
 8004a16:	602b      	str	r3, [r5, #0]
 8004a18:	f7fc f91d 	bl	8000c56 <_isatty>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d102      	bne.n	8004a26 <_isatty_r+0x1a>
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	b103      	cbz	r3, 8004a26 <_isatty_r+0x1a>
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	20000374 	.word	0x20000374

08004a2c <_sbrk_r>:
 8004a2c:	b538      	push	{r3, r4, r5, lr}
 8004a2e:	4d06      	ldr	r5, [pc, #24]	@ (8004a48 <_sbrk_r+0x1c>)
 8004a30:	2300      	movs	r3, #0
 8004a32:	4604      	mov	r4, r0
 8004a34:	4608      	mov	r0, r1
 8004a36:	602b      	str	r3, [r5, #0]
 8004a38:	f7fc f926 	bl	8000c88 <_sbrk>
 8004a3c:	1c43      	adds	r3, r0, #1
 8004a3e:	d102      	bne.n	8004a46 <_sbrk_r+0x1a>
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	b103      	cbz	r3, 8004a46 <_sbrk_r+0x1a>
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	bd38      	pop	{r3, r4, r5, pc}
 8004a48:	20000374 	.word	0x20000374

08004a4c <_init>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	bf00      	nop
 8004a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a52:	bc08      	pop	{r3}
 8004a54:	469e      	mov	lr, r3
 8004a56:	4770      	bx	lr

08004a58 <_fini>:
 8004a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5a:	bf00      	nop
 8004a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5e:	bc08      	pop	{r3}
 8004a60:	469e      	mov	lr, r3
 8004a62:	4770      	bx	lr
