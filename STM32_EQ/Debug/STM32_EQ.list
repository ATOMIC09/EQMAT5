
STM32_EQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ea0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005030  08005030  00006030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005098  08005098  0000707c  2**0
                  CONTENTS
  4 .ARM          00000008  08005098  08005098  00006098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050a0  080050a0  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050a0  080050a0  000060a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050a4  080050a4  000060a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080050a8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000707c  2**0
                  CONTENTS
 10 .bss          00000304  2000007c  2000007c  0000707c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000380  20000380  0000707c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b450  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ae  00000000  00000000  000124fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  000145b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074b  00000000  00000000  00014f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f8bc  00000000  00000000  00015693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ccf2  00000000  00000000  00034f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb909  00000000  00000000  00041c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fd54a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d88  00000000  00000000  000fd590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00100318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005018 	.word	0x08005018

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005018 	.word	0x08005018

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000568:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800056c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	2b00      	cmp	r3, #0
 8000576:	d013      	beq.n	80005a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000580:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00b      	beq.n	80005a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000588:	e000      	b.n	800058c <ITM_SendChar+0x2c>
    {
      __NOP();
 800058a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800058c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f9      	beq.n	800058a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000596:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005a0:	687b      	ldr	r3, [r7, #4]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
	...

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fc3c 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f826 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f910 	bl	80007e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c0:	f000 f8e6 	bl	8000790 <MX_DMA_Init>
  MX_I2S2_Init();
 80005c4:	f000 f88a 	bl	80006dc <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80005c8:	f000 f8b8 	bl	800073c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  
  HAL_UART_Transmit(&huart1, tx_buffer, sizeof(tx_buffer), 10);
 80005cc:	230a      	movs	r3, #10
 80005ce:	2211      	movs	r2, #17
 80005d0:	4909      	ldr	r1, [pc, #36]	@ (80005f8 <main+0x48>)
 80005d2:	480a      	ldr	r0, [pc, #40]	@ (80005fc <main+0x4c>)
 80005d4:	f002 fdea 	bl	80031ac <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 80005d8:	2244      	movs	r2, #68	@ 0x44
 80005da:	4909      	ldr	r1, [pc, #36]	@ (8000600 <main+0x50>)
 80005dc:	4807      	ldr	r0, [pc, #28]	@ (80005fc <main+0x4c>)
 80005de:	f002 fe70 	bl	80032c2 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80005e2:	2104      	movs	r1, #4
 80005e4:	4807      	ldr	r0, [pc, #28]	@ (8000604 <main+0x54>)
 80005e6:	f001 fafc 	bl	8001be2 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 80005ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ee:	f000 fc91 	bl	8000f14 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80005f2:	bf00      	nop
 80005f4:	e7f5      	b.n	80005e2 <main+0x32>
 80005f6:	bf00      	nop
 80005f8:	20000000 	.word	0x20000000
 80005fc:	200001a0 	.word	0x200001a0
 8000600:	200001e8 	.word	0x200001e8
 8000604:	40020400 	.word	0x40020400

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	@ 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fee5 	bl	80043e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	@ 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	@ (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	@ (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800066c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800067c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000680:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000686:	2304      	movs	r3, #4
 8000688:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	4618      	mov	r0, r3
 8000690:	f001 ff62 	bl	8002558 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800069a:	f000 f93d 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2105      	movs	r1, #5
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 f9c3 	bl	8002a48 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006c8:	f000 f926 	bl	8000918 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3750      	adds	r7, #80	@ 0x50
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <MX_I2S2_Init+0x54>)
 80006e2:	4a14      	ldr	r2, [pc, #80]	@ (8000734 <MX_I2S2_Init+0x58>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006e6:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_I2S2_Init+0x54>)
 80006e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ec:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ee:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <MX_I2S2_Init+0x54>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_I2S2_Init+0x54>)
 80006f6:	2203      	movs	r2, #3
 80006f8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <MX_I2S2_Init+0x54>)
 80006fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000700:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000702:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <MX_I2S2_Init+0x54>)
 8000704:	4a0c      	ldr	r2, [pc, #48]	@ (8000738 <MX_I2S2_Init+0x5c>)
 8000706:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000708:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_I2S2_Init+0x54>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800070e:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <MX_I2S2_Init+0x54>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <MX_I2S2_Init+0x54>)
 8000716:	2201      	movs	r2, #1
 8000718:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	@ (8000730 <MX_I2S2_Init+0x54>)
 800071c:	f001 fa7c 	bl	8001c18 <HAL_I2S_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000726:	f000 f8f7 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000098 	.word	0x20000098
 8000734:	40003800 	.word	0x40003800
 8000738:	00017700 	.word	0x00017700

0800073c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_USART1_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	@ (800078c <MX_USART1_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <MX_USART1_UART_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_USART1_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MX_USART1_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <MX_USART1_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_USART1_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <MX_USART1_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_USART1_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_USART1_UART_Init+0x4c>)
 8000774:	f002 fcca 	bl	800310c <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f8cb 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200001a0 	.word	0x200001a0
 800078c:	40011000 	.word	0x40011000

08000790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_DMA_Init+0x4c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a0f      	ldr	r2, [pc, #60]	@ (80007dc <MX_DMA_Init+0x4c>)
 80007a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <MX_DMA_Init+0x4c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	200e      	movs	r0, #14
 80007b8:	f000 fcab 	bl	8001112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80007bc:	200e      	movs	r0, #14
 80007be:	f000 fcc4 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	200f      	movs	r0, #15
 80007c8:	f000 fca3 	bl	8001112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007cc:	200f      	movs	r0, #15
 80007ce:	f000 fcbc 	bl	800114a <HAL_NVIC_EnableIRQ>

}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	@ 0x28
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <MX_GPIO_Init+0xb4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a25      	ldr	r2, [pc, #148]	@ (8000894 <MX_GPIO_Init+0xb4>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <MX_GPIO_Init+0xb4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <MX_GPIO_Init+0xb4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a1e      	ldr	r2, [pc, #120]	@ (8000894 <MX_GPIO_Init+0xb4>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <MX_GPIO_Init+0xb4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <MX_GPIO_Init+0xb4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a17      	ldr	r2, [pc, #92]	@ (8000894 <MX_GPIO_Init+0xb4>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <MX_GPIO_Init+0xb4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_GPIO_Init+0xb4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a10      	ldr	r2, [pc, #64]	@ (8000894 <MX_GPIO_Init+0xb4>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_GPIO_Init+0xb4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2104      	movs	r1, #4
 800086a:	480b      	ldr	r0, [pc, #44]	@ (8000898 <MX_GPIO_Init+0xb8>)
 800086c:	f001 f9a0 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000870:	2304      	movs	r3, #4
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4804      	ldr	r0, [pc, #16]	@ (8000898 <MX_GPIO_Init+0xb8>)
 8000888:	f000 fff6 	bl	8001878 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	@ 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	40020400 	.word	0x40020400

0800089c <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	e009      	b.n	80008c2 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	1c5a      	adds	r2, r3, #1
 80008b2:	60ba      	str	r2, [r7, #8]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe52 	bl	8000560 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	3301      	adds	r3, #1
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	697a      	ldr	r2, [r7, #20]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	dbf1      	blt.n	80008ae <_write+0x12>
  }
  return len;
 80008ca:	687b      	ldr	r3, [r7, #4]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer)); // Start the next receive
 80008dc:	2244      	movs	r2, #68	@ 0x44
 80008de:	490b      	ldr	r1, [pc, #44]	@ (800090c <HAL_UART_RxCpltCallback+0x38>)
 80008e0:	480b      	ldr	r0, [pc, #44]	@ (8000910 <HAL_UART_RxCpltCallback+0x3c>)
 80008e2:	f002 fcee 	bl	80032c2 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart1, rx_buffer, sizeof(rx_buffer), 10); // Echo the received data
 80008e6:	230a      	movs	r3, #10
 80008e8:	2244      	movs	r2, #68	@ 0x44
 80008ea:	4908      	ldr	r1, [pc, #32]	@ (800090c <HAL_UART_RxCpltCallback+0x38>)
 80008ec:	4808      	ldr	r0, [pc, #32]	@ (8000910 <HAL_UART_RxCpltCallback+0x3c>)
 80008ee:	f002 fc5d 	bl	80031ac <HAL_UART_Transmit>
  printf("Received UART: %s\n", rx_buffer); // Print the received data to serial
 80008f2:	4906      	ldr	r1, [pc, #24]	@ (800090c <HAL_UART_RxCpltCallback+0x38>)
 80008f4:	4807      	ldr	r0, [pc, #28]	@ (8000914 <HAL_UART_RxCpltCallback+0x40>)
 80008f6:	f003 fd21 	bl	800433c <iprintf>
  memset(rx_buffer, 0, sizeof(rx_buffer)); // Clear the buffer
 80008fa:	2244      	movs	r2, #68	@ 0x44
 80008fc:	2100      	movs	r1, #0
 80008fe:	4803      	ldr	r0, [pc, #12]	@ (800090c <HAL_UART_RxCpltCallback+0x38>)
 8000900:	f003 fd71 	bl	80043e6 <memset>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200001e8 	.word	0x200001e8
 8000910:	200001a0 	.word	0x200001a0
 8000914:	08005030 	.word	0x08005030

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <Error_Handler+0x8>

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000932:	4a0f      	ldr	r2, [pc, #60]	@ (8000970 <HAL_MspInit+0x4c>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000938:	6453      	str	r3, [r2, #68]	@ 0x44
 800093a:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <HAL_MspInit+0x4c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <HAL_MspInit+0x4c>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	@ 0x40
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	@ 0x38
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a6b      	ldr	r2, [pc, #428]	@ (8000b4c <HAL_I2S_MspInit+0x1d8>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	f040 80cf 	bne.w	8000b44 <HAL_I2S_MspInit+0x1d0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009a6:	2301      	movs	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80009aa:	23c0      	movs	r3, #192	@ 0xc0
 80009ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 fa66 	bl	8002e88 <HAL_RCCEx_PeriphCLKConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80009c2:	f7ff ffa9 	bl	8000918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b61      	ldr	r3, [pc, #388]	@ (8000b50 <HAL_I2S_MspInit+0x1dc>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ce:	4a60      	ldr	r2, [pc, #384]	@ (8000b50 <HAL_I2S_MspInit+0x1dc>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d6:	4b5e      	ldr	r3, [pc, #376]	@ (8000b50 <HAL_I2S_MspInit+0x1dc>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b5a      	ldr	r3, [pc, #360]	@ (8000b50 <HAL_I2S_MspInit+0x1dc>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a59      	ldr	r2, [pc, #356]	@ (8000b50 <HAL_I2S_MspInit+0x1dc>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b57      	ldr	r3, [pc, #348]	@ (8000b50 <HAL_I2S_MspInit+0x1dc>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	4b53      	ldr	r3, [pc, #332]	@ (8000b50 <HAL_I2S_MspInit+0x1dc>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a52      	ldr	r2, [pc, #328]	@ (8000b50 <HAL_I2S_MspInit+0x1dc>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b50      	ldr	r3, [pc, #320]	@ (8000b50 <HAL_I2S_MspInit+0x1dc>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000a1a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a34:	4619      	mov	r1, r3
 8000a36:	4847      	ldr	r0, [pc, #284]	@ (8000b54 <HAL_I2S_MspInit+0x1e0>)
 8000a38:	f000 ff1e 	bl	8001878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000a4e:	2306      	movs	r3, #6
 8000a50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	483e      	ldr	r0, [pc, #248]	@ (8000b54 <HAL_I2S_MspInit+0x1e0>)
 8000a5a:	f000 ff0d 	bl	8001878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a5e:	2340      	movs	r3, #64	@ 0x40
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a6e:	2305      	movs	r3, #5
 8000a70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a76:	4619      	mov	r1, r3
 8000a78:	4837      	ldr	r0, [pc, #220]	@ (8000b58 <HAL_I2S_MspInit+0x1e4>)
 8000a7a:	f000 fefd 	bl	8001878 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000a7e:	4b37      	ldr	r3, [pc, #220]	@ (8000b5c <HAL_I2S_MspInit+0x1e8>)
 8000a80:	4a37      	ldr	r2, [pc, #220]	@ (8000b60 <HAL_I2S_MspInit+0x1ec>)
 8000a82:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000a84:	4b35      	ldr	r3, [pc, #212]	@ (8000b5c <HAL_I2S_MspInit+0x1e8>)
 8000a86:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000a8a:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a8c:	4b33      	ldr	r3, [pc, #204]	@ (8000b5c <HAL_I2S_MspInit+0x1e8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a92:	4b32      	ldr	r3, [pc, #200]	@ (8000b5c <HAL_I2S_MspInit+0x1e8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a98:	4b30      	ldr	r3, [pc, #192]	@ (8000b5c <HAL_I2S_MspInit+0x1e8>)
 8000a9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a9e:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b5c <HAL_I2S_MspInit+0x1e8>)
 8000aa2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000aa6:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b5c <HAL_I2S_MspInit+0x1e8>)
 8000aaa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aae:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b5c <HAL_I2S_MspInit+0x1e8>)
 8000ab2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ab6:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ab8:	4b28      	ldr	r3, [pc, #160]	@ (8000b5c <HAL_I2S_MspInit+0x1e8>)
 8000aba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000abe:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ac0:	4b26      	ldr	r3, [pc, #152]	@ (8000b5c <HAL_I2S_MspInit+0x1e8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000ac6:	4825      	ldr	r0, [pc, #148]	@ (8000b5c <HAL_I2S_MspInit+0x1e8>)
 8000ac8:	f000 fb5a 	bl	8001180 <HAL_DMA_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 8000ad2:	f7ff ff21 	bl	8000918 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a20      	ldr	r2, [pc, #128]	@ (8000b5c <HAL_I2S_MspInit+0x1e8>)
 8000ada:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000adc:	4a1f      	ldr	r2, [pc, #124]	@ (8000b5c <HAL_I2S_MspInit+0x1e8>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000ae2:	4b20      	ldr	r3, [pc, #128]	@ (8000b64 <HAL_I2S_MspInit+0x1f0>)
 8000ae4:	4a20      	ldr	r2, [pc, #128]	@ (8000b68 <HAL_I2S_MspInit+0x1f4>)
 8000ae6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b64 <HAL_I2S_MspInit+0x1f0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aee:	4b1d      	ldr	r3, [pc, #116]	@ (8000b64 <HAL_I2S_MspInit+0x1f0>)
 8000af0:	2240      	movs	r2, #64	@ 0x40
 8000af2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b64 <HAL_I2S_MspInit+0x1f0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <HAL_I2S_MspInit+0x1f0>)
 8000afc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b00:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b02:	4b18      	ldr	r3, [pc, #96]	@ (8000b64 <HAL_I2S_MspInit+0x1f0>)
 8000b04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b08:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <HAL_I2S_MspInit+0x1f0>)
 8000b0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b10:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000b12:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <HAL_I2S_MspInit+0x1f0>)
 8000b14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b18:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_I2S_MspInit+0x1f0>)
 8000b1c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b20:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <HAL_I2S_MspInit+0x1f0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000b28:	480e      	ldr	r0, [pc, #56]	@ (8000b64 <HAL_I2S_MspInit+0x1f0>)
 8000b2a:	f000 fb29 	bl	8001180 <HAL_DMA_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 8000b34:	f7ff fef0 	bl	8000918 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <HAL_I2S_MspInit+0x1f0>)
 8000b3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b3e:	4a09      	ldr	r2, [pc, #36]	@ (8000b64 <HAL_I2S_MspInit+0x1f0>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b44:	bf00      	nop
 8000b46:	3738      	adds	r7, #56	@ 0x38
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40003800 	.word	0x40003800
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020400 	.word	0x40020400
 8000b58:	40020800 	.word	0x40020800
 8000b5c:	200000e0 	.word	0x200000e0
 8000b60:	40026058 	.word	0x40026058
 8000b64:	20000140 	.word	0x20000140
 8000b68:	40026070 	.word	0x40026070

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	@ 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a1d      	ldr	r2, [pc, #116]	@ (8000c00 <HAL_UART_MspInit+0x94>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d134      	bne.n	8000bf8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <HAL_UART_MspInit+0x98>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	4a1b      	ldr	r2, [pc, #108]	@ (8000c04 <HAL_UART_MspInit+0x98>)
 8000b98:	f043 0310 	orr.w	r3, r3, #16
 8000b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b9e:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <HAL_UART_MspInit+0x98>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba2:	f003 0310 	and.w	r3, r3, #16
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <HAL_UART_MspInit+0x98>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a14      	ldr	r2, [pc, #80]	@ (8000c04 <HAL_UART_MspInit+0x98>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <HAL_UART_MspInit+0x98>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bc6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bd8:	2307      	movs	r3, #7
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4809      	ldr	r0, [pc, #36]	@ (8000c08 <HAL_UART_MspInit+0x9c>)
 8000be4:	f000 fe48 	bl	8001878 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	2025      	movs	r0, #37	@ 0x25
 8000bee:	f000 fa90 	bl	8001112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bf2:	2025      	movs	r0, #37	@ 0x25
 8000bf4:	f000 faa9 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	@ 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40011000 	.word	0x40011000
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <NMI_Handler+0x4>

08000c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <MemManage_Handler+0x4>

08000c24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c62:	f000 f937 	bl	8000ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000c70:	4802      	ldr	r0, [pc, #8]	@ (8000c7c <DMA1_Stream3_IRQHandler+0x10>)
 8000c72:	f000 fbc5 	bl	8001400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200000e0 	.word	0x200000e0

08000c80 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000c84:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <DMA1_Stream4_IRQHandler+0x10>)
 8000c86:	f000 fbbb 	bl	8001400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000140 	.word	0x20000140

08000c94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <USART1_IRQHandler+0x10>)
 8000c9a:	f002 fb37 	bl	800330c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200001a0 	.word	0x200001a0

08000ca8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	e00a      	b.n	8000cd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cba:	f3af 8000 	nop.w
 8000cbe:	4601      	mov	r1, r0
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	60ba      	str	r2, [r7, #8]
 8000cc6:	b2ca      	uxtb	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	dbf0      	blt.n	8000cba <_read+0x12>
  }

  return len;
 8000cd8:	687b      	ldr	r3, [r7, #4]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <_isatty>:

int _isatty(int file)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d54:	4a14      	ldr	r2, [pc, #80]	@ (8000da8 <_sbrk+0x5c>)
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <_sbrk+0x60>)
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d60:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d68:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <_sbrk+0x64>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	@ (8000db4 <_sbrk+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6e:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d207      	bcs.n	8000d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d7c:	f003 fb82 	bl	8004484 <__errno>
 8000d80:	4603      	mov	r3, r0
 8000d82:	220c      	movs	r2, #12
 8000d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	e009      	b.n	8000da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d92:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a05      	ldr	r2, [pc, #20]	@ (8000db0 <_sbrk+0x64>)
 8000d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20020000 	.word	0x20020000
 8000dac:	00000400 	.word	0x00000400
 8000db0:	2000022c 	.word	0x2000022c
 8000db4:	20000380 	.word	0x20000380

08000db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <SystemInit+0x20>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dc2:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <SystemInit+0x20>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000de0:	f7ff ffea 	bl	8000db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de4:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000de6:	490d      	ldr	r1, [pc, #52]	@ (8000e1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f003 fb41 	bl	8004490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fbcf 	bl	80005b0 <main>
  bx  lr    
 8000e12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e20:	080050a8 	.word	0x080050a8
  ldr r2, =_sbss
 8000e24:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e28:	20000380 	.word	0x20000380

08000e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e34:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0d      	ldr	r2, [pc, #52]	@ (8000e70 <HAL_Init+0x40>)
 8000e3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e40:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <HAL_Init+0x40>)
 8000e46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	@ (8000e70 <HAL_Init+0x40>)
 8000e52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 f94f 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5e:	200f      	movs	r0, #15
 8000e60:	f000 f808 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff fd5e 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023c00 	.word	0x40023c00

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <HAL_InitTick+0x54>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <HAL_InitTick+0x58>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f967 	bl	8001166 <HAL_SYSTICK_Config>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00e      	b.n	8000ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d80a      	bhi.n	8000ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f000 f92f 	bl	8001112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb4:	4a06      	ldr	r2, [pc, #24]	@ (8000ed0 <HAL_InitTick+0x5c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000014 	.word	0x20000014
 8000ecc:	2000001c 	.word	0x2000001c
 8000ed0:	20000018 	.word	0x20000018

08000ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_IncTick+0x20>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <HAL_IncTick+0x24>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <HAL_IncTick+0x24>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	2000001c 	.word	0x2000001c
 8000ef8:	20000230 	.word	0x20000230

08000efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b03      	ldr	r3, [pc, #12]	@ (8000f10 <HAL_GetTick+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000230 	.word	0x20000230

08000f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff ffee 	bl	8000efc <HAL_GetTick>
 8000f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f2c:	d005      	beq.n	8000f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <HAL_Delay+0x44>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3a:	bf00      	nop
 8000f3c:	f7ff ffde 	bl	8000efc <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d8f7      	bhi.n	8000f3c <HAL_Delay+0x28>
  {
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	2000001c 	.word	0x2000001c

08000f5c <__NVIC_SetPriorityGrouping>:
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	@ (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	60d3      	str	r3, [r2, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_GetPriorityGrouping>:
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <__NVIC_GetPriorityGrouping+0x18>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	f003 0307 	and.w	r3, r3, #7
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_EnableIRQ>:
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	db0b      	blt.n	8000fea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 021f 	and.w	r2, r3, #31
 8000fd8:	4907      	ldr	r1, [pc, #28]	@ (8000ff8 <__NVIC_EnableIRQ+0x38>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000e100 	.word	0xe000e100

08000ffc <__NVIC_SetPriority>:
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	@ (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	@ (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	@ 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	@ 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <SysTick_Config>:
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f7ff ff8e 	bl	8000ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff29 	bl	8000f5c <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff3e 	bl	8000fa4 <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff8e 	bl	8001050 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5d 	bl	8000ffc <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff31 	bl	8000fc0 <__NVIC_EnableIRQ>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffa2 	bl	80010b8 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff feb6 	bl	8000efc <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e099      	b.n	80012d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2202      	movs	r2, #2
 80011a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0201 	bic.w	r2, r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011bc:	e00f      	b.n	80011de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011be:	f7ff fe9d 	bl	8000efc <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	d908      	bls.n	80011de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2220      	movs	r2, #32
 80011d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2203      	movs	r2, #3
 80011d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e078      	b.n	80012d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1e8      	bne.n	80011be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	4b38      	ldr	r3, [pc, #224]	@ (80012d8 <HAL_DMA_Init+0x158>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800120a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001216:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001222:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	4313      	orrs	r3, r2
 800122e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001234:	2b04      	cmp	r3, #4
 8001236:	d107      	bne.n	8001248 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001240:	4313      	orrs	r3, r2
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4313      	orrs	r3, r2
 8001246:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f023 0307 	bic.w	r3, r3, #7
 800125e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	4313      	orrs	r3, r2
 8001268:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126e:	2b04      	cmp	r3, #4
 8001270:	d117      	bne.n	80012a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4313      	orrs	r3, r2
 800127a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00e      	beq.n	80012a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 fa7b 	bl	8001780 <DMA_CheckFifoParam>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d008      	beq.n	80012a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2240      	movs	r2, #64	@ 0x40
 8001294:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800129e:	2301      	movs	r3, #1
 80012a0:	e016      	b.n	80012d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fa32 	bl	8001714 <DMA_CalcBaseAndBitshift>
 80012b0:	4603      	mov	r3, r0
 80012b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b8:	223f      	movs	r2, #63	@ 0x3f
 80012ba:	409a      	lsls	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	f010803f 	.word	0xf010803f

080012dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012ea:	f7ff fe07 	bl	8000efc <HAL_GetTick>
 80012ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d008      	beq.n	800130e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2280      	movs	r2, #128	@ 0x80
 8001300:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e052      	b.n	80013b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0216 	bic.w	r2, r2, #22
 800131c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	695a      	ldr	r2, [r3, #20]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800132c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	2b00      	cmp	r3, #0
 8001334:	d103      	bne.n	800133e <HAL_DMA_Abort+0x62>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800133a:	2b00      	cmp	r3, #0
 800133c:	d007      	beq.n	800134e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0208 	bic.w	r2, r2, #8
 800134c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0201 	bic.w	r2, r2, #1
 800135c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800135e:	e013      	b.n	8001388 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001360:	f7ff fdcc 	bl	8000efc <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b05      	cmp	r3, #5
 800136c:	d90c      	bls.n	8001388 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2220      	movs	r2, #32
 8001372:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2203      	movs	r2, #3
 8001378:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e015      	b.n	80013b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1e4      	bne.n	8001360 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800139a:	223f      	movs	r2, #63	@ 0x3f
 800139c:	409a      	lsls	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d004      	beq.n	80013da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2280      	movs	r2, #128	@ 0x80
 80013d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00c      	b.n	80013f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2205      	movs	r2, #5
 80013de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0201 	bic.w	r2, r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800140c:	4b8e      	ldr	r3, [pc, #568]	@ (8001648 <HAL_DMA_IRQHandler+0x248>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a8e      	ldr	r2, [pc, #568]	@ (800164c <HAL_DMA_IRQHandler+0x24c>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	0a9b      	lsrs	r3, r3, #10
 8001418:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800142a:	2208      	movs	r2, #8
 800142c:	409a      	lsls	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4013      	ands	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d01a      	beq.n	800146c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	d013      	beq.n	800146c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0204 	bic.w	r2, r2, #4
 8001452:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001458:	2208      	movs	r2, #8
 800145a:	409a      	lsls	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001464:	f043 0201 	orr.w	r2, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001470:	2201      	movs	r2, #1
 8001472:	409a      	lsls	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4013      	ands	r3, r2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d012      	beq.n	80014a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00b      	beq.n	80014a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800148e:	2201      	movs	r2, #1
 8001490:	409a      	lsls	r2, r3
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149a:	f043 0202 	orr.w	r2, r3, #2
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a6:	2204      	movs	r2, #4
 80014a8:	409a      	lsls	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d012      	beq.n	80014d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00b      	beq.n	80014d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c4:	2204      	movs	r2, #4
 80014c6:	409a      	lsls	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d0:	f043 0204 	orr.w	r2, r3, #4
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014dc:	2210      	movs	r2, #16
 80014de:	409a      	lsls	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d043      	beq.n	8001570 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d03c      	beq.n	8001570 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014fa:	2210      	movs	r2, #16
 80014fc:	409a      	lsls	r2, r3
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d018      	beq.n	8001542 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d108      	bne.n	8001530 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	2b00      	cmp	r3, #0
 8001524:	d024      	beq.n	8001570 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	4798      	blx	r3
 800152e:	e01f      	b.n	8001570 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001534:	2b00      	cmp	r3, #0
 8001536:	d01b      	beq.n	8001570 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	4798      	blx	r3
 8001540:	e016      	b.n	8001570 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800154c:	2b00      	cmp	r3, #0
 800154e:	d107      	bne.n	8001560 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0208 	bic.w	r2, r2, #8
 800155e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001574:	2220      	movs	r2, #32
 8001576:	409a      	lsls	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 808f 	beq.w	80016a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 8087 	beq.w	80016a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001596:	2220      	movs	r2, #32
 8001598:	409a      	lsls	r2, r3
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b05      	cmp	r3, #5
 80015a8:	d136      	bne.n	8001618 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0216 	bic.w	r2, r2, #22
 80015b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	695a      	ldr	r2, [r3, #20]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d103      	bne.n	80015da <HAL_DMA_IRQHandler+0x1da>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d007      	beq.n	80015ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0208 	bic.w	r2, r2, #8
 80015e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ee:	223f      	movs	r2, #63	@ 0x3f
 80015f0:	409a      	lsls	r2, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800160a:	2b00      	cmp	r3, #0
 800160c:	d07e      	beq.n	800170c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	4798      	blx	r3
        }
        return;
 8001616:	e079      	b.n	800170c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d01d      	beq.n	8001662 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10d      	bne.n	8001650 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001638:	2b00      	cmp	r3, #0
 800163a:	d031      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	4798      	blx	r3
 8001644:	e02c      	b.n	80016a0 <HAL_DMA_IRQHandler+0x2a0>
 8001646:	bf00      	nop
 8001648:	20000014 	.word	0x20000014
 800164c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001654:	2b00      	cmp	r3, #0
 8001656:	d023      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	4798      	blx	r3
 8001660:	e01e      	b.n	80016a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10f      	bne.n	8001690 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0210 	bic.w	r2, r2, #16
 800167e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d032      	beq.n	800170e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d022      	beq.n	80016fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2205      	movs	r2, #5
 80016b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0201 	bic.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	3301      	adds	r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d307      	bcc.n	80016e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f2      	bne.n	80016cc <HAL_DMA_IRQHandler+0x2cc>
 80016e6:	e000      	b.n	80016ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80016e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	4798      	blx	r3
 800170a:	e000      	b.n	800170e <HAL_DMA_IRQHandler+0x30e>
        return;
 800170c:	bf00      	nop
    }
  }
}
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	3b10      	subs	r3, #16
 8001724:	4a14      	ldr	r2, [pc, #80]	@ (8001778 <DMA_CalcBaseAndBitshift+0x64>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800172e:	4a13      	ldr	r2, [pc, #76]	@ (800177c <DMA_CalcBaseAndBitshift+0x68>)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d909      	bls.n	8001756 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800174a:	f023 0303 	bic.w	r3, r3, #3
 800174e:	1d1a      	adds	r2, r3, #4
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	659a      	str	r2, [r3, #88]	@ 0x58
 8001754:	e007      	b.n	8001766 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800175e:	f023 0303 	bic.w	r3, r3, #3
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800176a:	4618      	mov	r0, r3
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	aaaaaaab 	.word	0xaaaaaaab
 800177c:	0800505c 	.word	0x0800505c

08001780 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001790:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d11f      	bne.n	80017da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2b03      	cmp	r3, #3
 800179e:	d856      	bhi.n	800184e <DMA_CheckFifoParam+0xce>
 80017a0:	a201      	add	r2, pc, #4	@ (adr r2, 80017a8 <DMA_CheckFifoParam+0x28>)
 80017a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a6:	bf00      	nop
 80017a8:	080017b9 	.word	0x080017b9
 80017ac:	080017cb 	.word	0x080017cb
 80017b0:	080017b9 	.word	0x080017b9
 80017b4:	0800184f 	.word	0x0800184f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d046      	beq.n	8001852 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017c8:	e043      	b.n	8001852 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80017d2:	d140      	bne.n	8001856 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017d8:	e03d      	b.n	8001856 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017e2:	d121      	bne.n	8001828 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d837      	bhi.n	800185a <DMA_CheckFifoParam+0xda>
 80017ea:	a201      	add	r2, pc, #4	@ (adr r2, 80017f0 <DMA_CheckFifoParam+0x70>)
 80017ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f0:	08001801 	.word	0x08001801
 80017f4:	08001807 	.word	0x08001807
 80017f8:	08001801 	.word	0x08001801
 80017fc:	08001819 	.word	0x08001819
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
      break;
 8001804:	e030      	b.n	8001868 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d025      	beq.n	800185e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001816:	e022      	b.n	800185e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800181c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001820:	d11f      	bne.n	8001862 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001826:	e01c      	b.n	8001862 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d903      	bls.n	8001836 <DMA_CheckFifoParam+0xb6>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d003      	beq.n	800183c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001834:	e018      	b.n	8001868 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	73fb      	strb	r3, [r7, #15]
      break;
 800183a:	e015      	b.n	8001868 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001840:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00e      	beq.n	8001866 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
      break;
 800184c:	e00b      	b.n	8001866 <DMA_CheckFifoParam+0xe6>
      break;
 800184e:	bf00      	nop
 8001850:	e00a      	b.n	8001868 <DMA_CheckFifoParam+0xe8>
      break;
 8001852:	bf00      	nop
 8001854:	e008      	b.n	8001868 <DMA_CheckFifoParam+0xe8>
      break;
 8001856:	bf00      	nop
 8001858:	e006      	b.n	8001868 <DMA_CheckFifoParam+0xe8>
      break;
 800185a:	bf00      	nop
 800185c:	e004      	b.n	8001868 <DMA_CheckFifoParam+0xe8>
      break;
 800185e:	bf00      	nop
 8001860:	e002      	b.n	8001868 <DMA_CheckFifoParam+0xe8>
      break;   
 8001862:	bf00      	nop
 8001864:	e000      	b.n	8001868 <DMA_CheckFifoParam+0xe8>
      break;
 8001866:	bf00      	nop
    }
  } 
  
  return status; 
 8001868:	7bfb      	ldrb	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop

08001878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	@ 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	e16b      	b.n	8001b6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001894:	2201      	movs	r2, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	f040 815a 	bne.w	8001b66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d005      	beq.n	80018ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d130      	bne.n	800192c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001900:	2201      	movs	r2, #1
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	f003 0201 	and.w	r2, r3, #1
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b03      	cmp	r3, #3
 8001936:	d017      	beq.n	8001968 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d123      	bne.n	80019bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	08da      	lsrs	r2, r3, #3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3208      	adds	r2, #8
 800197c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	220f      	movs	r2, #15
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	08da      	lsrs	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3208      	adds	r2, #8
 80019b6:	69b9      	ldr	r1, [r7, #24]
 80019b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	2203      	movs	r2, #3
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0203 	and.w	r2, r3, #3
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80b4 	beq.w	8001b66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b60      	ldr	r3, [pc, #384]	@ (8001b84 <HAL_GPIO_Init+0x30c>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	4a5f      	ldr	r2, [pc, #380]	@ (8001b84 <HAL_GPIO_Init+0x30c>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001b84 <HAL_GPIO_Init+0x30c>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a1a:	4a5b      	ldr	r2, [pc, #364]	@ (8001b88 <HAL_GPIO_Init+0x310>)
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	3302      	adds	r3, #2
 8001a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	220f      	movs	r2, #15
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a52      	ldr	r2, [pc, #328]	@ (8001b8c <HAL_GPIO_Init+0x314>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d02b      	beq.n	8001a9e <HAL_GPIO_Init+0x226>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a51      	ldr	r2, [pc, #324]	@ (8001b90 <HAL_GPIO_Init+0x318>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d025      	beq.n	8001a9a <HAL_GPIO_Init+0x222>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a50      	ldr	r2, [pc, #320]	@ (8001b94 <HAL_GPIO_Init+0x31c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d01f      	beq.n	8001a96 <HAL_GPIO_Init+0x21e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4f      	ldr	r2, [pc, #316]	@ (8001b98 <HAL_GPIO_Init+0x320>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d019      	beq.n	8001a92 <HAL_GPIO_Init+0x21a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4e      	ldr	r2, [pc, #312]	@ (8001b9c <HAL_GPIO_Init+0x324>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d013      	beq.n	8001a8e <HAL_GPIO_Init+0x216>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4d      	ldr	r2, [pc, #308]	@ (8001ba0 <HAL_GPIO_Init+0x328>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00d      	beq.n	8001a8a <HAL_GPIO_Init+0x212>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4c      	ldr	r2, [pc, #304]	@ (8001ba4 <HAL_GPIO_Init+0x32c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d007      	beq.n	8001a86 <HAL_GPIO_Init+0x20e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4b      	ldr	r2, [pc, #300]	@ (8001ba8 <HAL_GPIO_Init+0x330>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_GPIO_Init+0x20a>
 8001a7e:	2307      	movs	r3, #7
 8001a80:	e00e      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a82:	2308      	movs	r3, #8
 8001a84:	e00c      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a86:	2306      	movs	r3, #6
 8001a88:	e00a      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	e008      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a8e:	2304      	movs	r3, #4
 8001a90:	e006      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a92:	2303      	movs	r3, #3
 8001a94:	e004      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e002      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	69fa      	ldr	r2, [r7, #28]
 8001aa2:	f002 0203 	and.w	r2, r2, #3
 8001aa6:	0092      	lsls	r2, r2, #2
 8001aa8:	4093      	lsls	r3, r2
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab0:	4935      	ldr	r1, [pc, #212]	@ (8001b88 <HAL_GPIO_Init+0x310>)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001abe:	4b3b      	ldr	r3, [pc, #236]	@ (8001bac <HAL_GPIO_Init+0x334>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ae2:	4a32      	ldr	r2, [pc, #200]	@ (8001bac <HAL_GPIO_Init+0x334>)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae8:	4b30      	ldr	r3, [pc, #192]	@ (8001bac <HAL_GPIO_Init+0x334>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b0c:	4a27      	ldr	r2, [pc, #156]	@ (8001bac <HAL_GPIO_Init+0x334>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b12:	4b26      	ldr	r3, [pc, #152]	@ (8001bac <HAL_GPIO_Init+0x334>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b36:	4a1d      	ldr	r2, [pc, #116]	@ (8001bac <HAL_GPIO_Init+0x334>)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <HAL_GPIO_Init+0x334>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b60:	4a12      	ldr	r2, [pc, #72]	@ (8001bac <HAL_GPIO_Init+0x334>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	2b0f      	cmp	r3, #15
 8001b70:	f67f ae90 	bls.w	8001894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3724      	adds	r7, #36	@ 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40013800 	.word	0x40013800
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40020400 	.word	0x40020400
 8001b94:	40020800 	.word	0x40020800
 8001b98:	40020c00 	.word	0x40020c00
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40021400 	.word	0x40021400
 8001ba4:	40021800 	.word	0x40021800
 8001ba8:	40021c00 	.word	0x40021c00
 8001bac:	40013c00 	.word	0x40013c00

08001bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc0:	787b      	ldrb	r3, [r7, #1]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bcc:	e003      	b.n	8001bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bce:	887b      	ldrh	r3, [r7, #2]
 8001bd0:	041a      	lsls	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	619a      	str	r2, [r3, #24]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b085      	sub	sp, #20
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bf4:	887a      	ldrh	r2, [r7, #2]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	041a      	lsls	r2, r3, #16
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	400b      	ands	r3, r1
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	619a      	str	r2, [r3, #24]
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e128      	b.n	8001e7c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a90      	ldr	r2, [pc, #576]	@ (8001e84 <HAL_I2S_Init+0x26c>)
 8001c42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7fe fe95 	bl	8000974 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001c60:	f023 030f 	bic.w	r3, r3, #15
 8001c64:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d060      	beq.n	8001d38 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001c7e:	2310      	movs	r3, #16
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e001      	b.n	8001c88 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001c84:	2320      	movs	r3, #32
 8001c86:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b20      	cmp	r3, #32
 8001c8e:	d802      	bhi.n	8001c96 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001c96:	2001      	movs	r0, #1
 8001c98:	f001 f9d8 	bl	800304c <HAL_RCCEx_GetPeriphCLKFreq>
 8001c9c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ca6:	d125      	bne.n	8001cf4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d010      	beq.n	8001cd2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ccc:	3305      	adds	r3, #5
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	e01f      	b.n	8001d12 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cee:	3305      	adds	r3, #5
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	e00e      	b.n	8001d12 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	461a      	mov	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0e:	3305      	adds	r3, #5
 8001d10:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4a5c      	ldr	r2, [pc, #368]	@ (8001e88 <HAL_I2S_Init+0x270>)
 8001d16:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1a:	08db      	lsrs	r3, r3, #3
 8001d1c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	085b      	lsrs	r3, r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	e003      	b.n	8001d40 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d902      	bls.n	8001d4c <HAL_I2S_Init+0x134>
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	2bff      	cmp	r3, #255	@ 0xff
 8001d4a:	d907      	bls.n	8001d5c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d50:	f043 0210 	orr.w	r2, r3, #16
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e08f      	b.n	8001e7c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	ea42 0103 	orr.w	r1, r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001d7a:	f023 030f 	bic.w	r3, r3, #15
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6851      	ldr	r1, [r2, #4]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6892      	ldr	r2, [r2, #8]
 8001d86:	4311      	orrs	r1, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	68d2      	ldr	r2, [r2, #12]
 8001d8c:	4311      	orrs	r1, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6992      	ldr	r2, [r2, #24]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d9e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d161      	bne.n	8001e6c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a38      	ldr	r2, [pc, #224]	@ (8001e8c <HAL_I2S_Init+0x274>)
 8001dac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a37      	ldr	r2, [pc, #220]	@ (8001e90 <HAL_I2S_Init+0x278>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d101      	bne.n	8001dbc <HAL_I2S_Init+0x1a4>
 8001db8:	4b36      	ldr	r3, [pc, #216]	@ (8001e94 <HAL_I2S_Init+0x27c>)
 8001dba:	e001      	b.n	8001dc0 <HAL_I2S_Init+0x1a8>
 8001dbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	4932      	ldr	r1, [pc, #200]	@ (8001e90 <HAL_I2S_Init+0x278>)
 8001dc8:	428a      	cmp	r2, r1
 8001dca:	d101      	bne.n	8001dd0 <HAL_I2S_Init+0x1b8>
 8001dcc:	4a31      	ldr	r2, [pc, #196]	@ (8001e94 <HAL_I2S_Init+0x27c>)
 8001dce:	e001      	b.n	8001dd4 <HAL_I2S_Init+0x1bc>
 8001dd0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001dd4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001dd8:	f023 030f 	bic.w	r3, r3, #15
 8001ddc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a2b      	ldr	r2, [pc, #172]	@ (8001e90 <HAL_I2S_Init+0x278>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d101      	bne.n	8001dec <HAL_I2S_Init+0x1d4>
 8001de8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e94 <HAL_I2S_Init+0x27c>)
 8001dea:	e001      	b.n	8001df0 <HAL_I2S_Init+0x1d8>
 8001dec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001df0:	2202      	movs	r2, #2
 8001df2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a25      	ldr	r2, [pc, #148]	@ (8001e90 <HAL_I2S_Init+0x278>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d101      	bne.n	8001e02 <HAL_I2S_Init+0x1ea>
 8001dfe:	4b25      	ldr	r3, [pc, #148]	@ (8001e94 <HAL_I2S_Init+0x27c>)
 8001e00:	e001      	b.n	8001e06 <HAL_I2S_Init+0x1ee>
 8001e02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e12:	d003      	beq.n	8001e1c <HAL_I2S_Init+0x204>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d103      	bne.n	8001e24 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001e1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	e001      	b.n	8001e28 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001e32:	4313      	orrs	r3, r2
 8001e34:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001e46:	4313      	orrs	r3, r2
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	897b      	ldrh	r3, [r7, #10]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e54:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001e90 <HAL_I2S_Init+0x278>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d101      	bne.n	8001e64 <HAL_I2S_Init+0x24c>
 8001e60:	4b0c      	ldr	r3, [pc, #48]	@ (8001e94 <HAL_I2S_Init+0x27c>)
 8001e62:	e001      	b.n	8001e68 <HAL_I2S_Init+0x250>
 8001e64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e68:	897a      	ldrh	r2, [r7, #10]
 8001e6a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3720      	adds	r7, #32
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	08001f8f 	.word	0x08001f8f
 8001e88:	cccccccd 	.word	0xcccccccd
 8001e8c:	080020a5 	.word	0x080020a5
 8001e90:	40003800 	.word	0x40003800
 8001e94:	40003400 	.word	0x40003400

08001e98 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	881a      	ldrh	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eec:	1c9a      	adds	r2, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10e      	bne.n	8001f28 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001f18:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ffb8 	bl	8001e98 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f42:	b292      	uxth	r2, r2
 8001f44:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4a:	1c9a      	adds	r2, r3, #2
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10e      	bne.n	8001f86 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f76:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff93 	bl	8001eac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d13a      	bne.n	8002020 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d109      	bne.n	8001fc8 <I2S_IRQHandler+0x3a>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fbe:	2b40      	cmp	r3, #64	@ 0x40
 8001fc0:	d102      	bne.n	8001fc8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ffb4 	bl	8001f30 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fce:	2b40      	cmp	r3, #64	@ 0x40
 8001fd0:	d126      	bne.n	8002020 <I2S_IRQHandler+0x92>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d11f      	bne.n	8002020 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001fee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	f043 0202 	orr.w	r2, r3, #2
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ff50 	bl	8001ec0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b03      	cmp	r3, #3
 800202a:	d136      	bne.n	800209a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b02      	cmp	r3, #2
 8002034:	d109      	bne.n	800204a <I2S_IRQHandler+0xbc>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002040:	2b80      	cmp	r3, #128	@ 0x80
 8002042:	d102      	bne.n	800204a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff45 	bl	8001ed4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b08      	cmp	r3, #8
 8002052:	d122      	bne.n	800209a <I2S_IRQHandler+0x10c>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b20      	cmp	r3, #32
 8002060:	d11b      	bne.n	800209a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002070:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208c:	f043 0204 	orr.w	r2, r3, #4
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ff13 	bl	8001ec0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a92      	ldr	r2, [pc, #584]	@ (8002304 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80020be:	4b92      	ldr	r3, [pc, #584]	@ (8002308 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020c0:	e001      	b.n	80020c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80020c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a8b      	ldr	r2, [pc, #556]	@ (8002304 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d101      	bne.n	80020e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80020dc:	4b8a      	ldr	r3, [pc, #552]	@ (8002308 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020de:	e001      	b.n	80020e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80020e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020f0:	d004      	beq.n	80020fc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 8099 	bne.w	800222e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b02      	cmp	r3, #2
 8002104:	d107      	bne.n	8002116 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f925 	bl	8002360 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d107      	bne.n	8002130 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f9c8 	bl	80024c0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002136:	2b40      	cmp	r3, #64	@ 0x40
 8002138:	d13a      	bne.n	80021b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	f003 0320 	and.w	r3, r3, #32
 8002140:	2b00      	cmp	r3, #0
 8002142:	d035      	beq.n	80021b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a6e      	ldr	r2, [pc, #440]	@ (8002304 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800214e:	4b6e      	ldr	r3, [pc, #440]	@ (8002308 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002150:	e001      	b.n	8002156 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002152:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4969      	ldr	r1, [pc, #420]	@ (8002304 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800215e:	428b      	cmp	r3, r1
 8002160:	d101      	bne.n	8002166 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002162:	4b69      	ldr	r3, [pc, #420]	@ (8002308 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002164:	e001      	b.n	800216a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002166:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800216a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800216e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800217e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a2:	f043 0202 	orr.w	r2, r3, #2
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fe88 	bl	8001ec0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	f040 80c3 	bne.w	8002342 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 80bd 	beq.w	8002342 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80021d6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a49      	ldr	r2, [pc, #292]	@ (8002304 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021e4:	e001      	b.n	80021ea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80021e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4944      	ldr	r1, [pc, #272]	@ (8002304 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021f2:	428b      	cmp	r3, r1
 80021f4:	d101      	bne.n	80021fa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80021f6:	4b44      	ldr	r3, [pc, #272]	@ (8002308 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021f8:	e001      	b.n	80021fe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80021fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002202:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	f043 0204 	orr.w	r2, r3, #4
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff fe4a 	bl	8001ec0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800222c:	e089      	b.n	8002342 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b02      	cmp	r3, #2
 8002236:	d107      	bne.n	8002248 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f8be 	bl	80023c4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b01      	cmp	r3, #1
 8002250:	d107      	bne.n	8002262 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f8fd 	bl	800245c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002268:	2b40      	cmp	r3, #64	@ 0x40
 800226a:	d12f      	bne.n	80022cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b00      	cmp	r3, #0
 8002274:	d02a      	beq.n	80022cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002284:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1e      	ldr	r2, [pc, #120]	@ (8002304 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d101      	bne.n	8002294 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002290:	4b1d      	ldr	r3, [pc, #116]	@ (8002308 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002292:	e001      	b.n	8002298 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002294:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4919      	ldr	r1, [pc, #100]	@ (8002304 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022a0:	428b      	cmp	r3, r1
 80022a2:	d101      	bne.n	80022a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80022a4:	4b18      	ldr	r3, [pc, #96]	@ (8002308 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022a6:	e001      	b.n	80022ac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80022a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80022b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022be:	f043 0202 	orr.w	r2, r3, #2
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff fdfa 	bl	8001ec0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d136      	bne.n	8002344 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d031      	beq.n	8002344 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a07      	ldr	r2, [pc, #28]	@ (8002304 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80022ea:	4b07      	ldr	r3, [pc, #28]	@ (8002308 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022ec:	e001      	b.n	80022f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80022ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4902      	ldr	r1, [pc, #8]	@ (8002304 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022fa:	428b      	cmp	r3, r1
 80022fc:	d106      	bne.n	800230c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80022fe:	4b02      	ldr	r3, [pc, #8]	@ (8002308 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002300:	e006      	b.n	8002310 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002302:	bf00      	nop
 8002304:	40003800 	.word	0x40003800
 8002308:	40003400 	.word	0x40003400
 800230c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002310:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002314:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002324:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	f043 0204 	orr.w	r2, r3, #4
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff fdc0 	bl	8001ec0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002340:	e000      	b.n	8002344 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002342:	bf00      	nop
}
 8002344:	bf00      	nop
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236c:	1c99      	adds	r1, r3, #2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6251      	str	r1, [r2, #36]	@ 0x24
 8002372:	881a      	ldrh	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d113      	bne.n	80023ba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80023a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d106      	bne.n	80023ba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ffc9 	bl	800234c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d0:	1c99      	adds	r1, r3, #2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6251      	str	r1, [r2, #36]	@ 0x24
 80023d6:	8819      	ldrh	r1, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002454 <I2SEx_TxISR_I2SExt+0x90>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d101      	bne.n	80023e6 <I2SEx_TxISR_I2SExt+0x22>
 80023e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002458 <I2SEx_TxISR_I2SExt+0x94>)
 80023e4:	e001      	b.n	80023ea <I2SEx_TxISR_I2SExt+0x26>
 80023e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023ea:	460a      	mov	r2, r1
 80023ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d121      	bne.n	800244a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a12      	ldr	r2, [pc, #72]	@ (8002454 <I2SEx_TxISR_I2SExt+0x90>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d101      	bne.n	8002414 <I2SEx_TxISR_I2SExt+0x50>
 8002410:	4b11      	ldr	r3, [pc, #68]	@ (8002458 <I2SEx_TxISR_I2SExt+0x94>)
 8002412:	e001      	b.n	8002418 <I2SEx_TxISR_I2SExt+0x54>
 8002414:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	490d      	ldr	r1, [pc, #52]	@ (8002454 <I2SEx_TxISR_I2SExt+0x90>)
 8002420:	428b      	cmp	r3, r1
 8002422:	d101      	bne.n	8002428 <I2SEx_TxISR_I2SExt+0x64>
 8002424:	4b0c      	ldr	r3, [pc, #48]	@ (8002458 <I2SEx_TxISR_I2SExt+0x94>)
 8002426:	e001      	b.n	800242c <I2SEx_TxISR_I2SExt+0x68>
 8002428:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800242c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002430:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d106      	bne.n	800244a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff ff81 	bl	800234c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40003800 	.word	0x40003800
 8002458:	40003400 	.word	0x40003400

0800245c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68d8      	ldr	r0, [r3, #12]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246e:	1c99      	adds	r1, r3, #2
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002474:	b282      	uxth	r2, r0
 8002476:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d113      	bne.n	80024b8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800249e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ff4a 	bl	800234c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a20      	ldr	r2, [pc, #128]	@ (8002550 <I2SEx_RxISR_I2SExt+0x90>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d101      	bne.n	80024d6 <I2SEx_RxISR_I2SExt+0x16>
 80024d2:	4b20      	ldr	r3, [pc, #128]	@ (8002554 <I2SEx_RxISR_I2SExt+0x94>)
 80024d4:	e001      	b.n	80024da <I2SEx_RxISR_I2SExt+0x1a>
 80024d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80024da:	68d8      	ldr	r0, [r3, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e0:	1c99      	adds	r1, r3, #2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80024e6:	b282      	uxth	r2, r0
 80024e8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d121      	bne.n	8002546 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a12      	ldr	r2, [pc, #72]	@ (8002550 <I2SEx_RxISR_I2SExt+0x90>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d101      	bne.n	8002510 <I2SEx_RxISR_I2SExt+0x50>
 800250c:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <I2SEx_RxISR_I2SExt+0x94>)
 800250e:	e001      	b.n	8002514 <I2SEx_RxISR_I2SExt+0x54>
 8002510:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	490d      	ldr	r1, [pc, #52]	@ (8002550 <I2SEx_RxISR_I2SExt+0x90>)
 800251c:	428b      	cmp	r3, r1
 800251e:	d101      	bne.n	8002524 <I2SEx_RxISR_I2SExt+0x64>
 8002520:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <I2SEx_RxISR_I2SExt+0x94>)
 8002522:	e001      	b.n	8002528 <I2SEx_RxISR_I2SExt+0x68>
 8002524:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002528:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800252c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d106      	bne.n	8002546 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff03 	bl	800234c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40003800 	.word	0x40003800
 8002554:	40003400 	.word	0x40003400

08002558 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e267      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d075      	beq.n	8002662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002576:	4b88      	ldr	r3, [pc, #544]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b04      	cmp	r3, #4
 8002580:	d00c      	beq.n	800259c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002582:	4b85      	ldr	r3, [pc, #532]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800258a:	2b08      	cmp	r3, #8
 800258c:	d112      	bne.n	80025b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800258e:	4b82      	ldr	r3, [pc, #520]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002596:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800259a:	d10b      	bne.n	80025b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	4b7e      	ldr	r3, [pc, #504]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d05b      	beq.n	8002660 <HAL_RCC_OscConfig+0x108>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d157      	bne.n	8002660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e242      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025bc:	d106      	bne.n	80025cc <HAL_RCC_OscConfig+0x74>
 80025be:	4b76      	ldr	r3, [pc, #472]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a75      	ldr	r2, [pc, #468]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	e01d      	b.n	8002608 <HAL_RCC_OscConfig+0xb0>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x98>
 80025d6:	4b70      	ldr	r3, [pc, #448]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a6f      	ldr	r2, [pc, #444]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 80025dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a6c      	ldr	r2, [pc, #432]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 80025e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e00b      	b.n	8002608 <HAL_RCC_OscConfig+0xb0>
 80025f0:	4b69      	ldr	r3, [pc, #420]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a68      	ldr	r2, [pc, #416]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 80025f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	4b66      	ldr	r3, [pc, #408]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a65      	ldr	r2, [pc, #404]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 8002602:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d013      	beq.n	8002638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7fe fc74 	bl	8000efc <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002618:	f7fe fc70 	bl	8000efc <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	@ 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e207      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b5b      	ldr	r3, [pc, #364]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0xc0>
 8002636:	e014      	b.n	8002662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7fe fc60 	bl	8000efc <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002640:	f7fe fc5c 	bl	8000efc <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	@ 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e1f3      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002652:	4b51      	ldr	r3, [pc, #324]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0xe8>
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d063      	beq.n	8002736 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800266e:	4b4a      	ldr	r3, [pc, #296]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267a:	4b47      	ldr	r3, [pc, #284]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002682:	2b08      	cmp	r3, #8
 8002684:	d11c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002686:	4b44      	ldr	r3, [pc, #272]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d116      	bne.n	80026c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002692:	4b41      	ldr	r3, [pc, #260]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_RCC_OscConfig+0x152>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d001      	beq.n	80026aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e1c7      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4937      	ldr	r1, [pc, #220]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026be:	e03a      	b.n	8002736 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d020      	beq.n	800270a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c8:	4b34      	ldr	r3, [pc, #208]	@ (800279c <HAL_RCC_OscConfig+0x244>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7fe fc15 	bl	8000efc <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d6:	f7fe fc11 	bl	8000efc <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e1a8      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f4:	4b28      	ldr	r3, [pc, #160]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4925      	ldr	r1, [pc, #148]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]
 8002708:	e015      	b.n	8002736 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270a:	4b24      	ldr	r3, [pc, #144]	@ (800279c <HAL_RCC_OscConfig+0x244>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fbf4 	bl	8000efc <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002718:	f7fe fbf0 	bl	8000efc <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e187      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272a:	4b1b      	ldr	r3, [pc, #108]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d036      	beq.n	80027b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d016      	beq.n	8002778 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800274a:	4b15      	ldr	r3, [pc, #84]	@ (80027a0 <HAL_RCC_OscConfig+0x248>)
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7fe fbd4 	bl	8000efc <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002758:	f7fe fbd0 	bl	8000efc <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e167      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276a:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <HAL_RCC_OscConfig+0x240>)
 800276c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x200>
 8002776:	e01b      	b.n	80027b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002778:	4b09      	ldr	r3, [pc, #36]	@ (80027a0 <HAL_RCC_OscConfig+0x248>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277e:	f7fe fbbd 	bl	8000efc <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	e00e      	b.n	80027a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002786:	f7fe fbb9 	bl	8000efc <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d907      	bls.n	80027a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e150      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
 8002798:	40023800 	.word	0x40023800
 800279c:	42470000 	.word	0x42470000
 80027a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a4:	4b88      	ldr	r3, [pc, #544]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1ea      	bne.n	8002786 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8097 	beq.w	80028ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c2:	4b81      	ldr	r3, [pc, #516]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10f      	bne.n	80027ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	4b7d      	ldr	r3, [pc, #500]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	4a7c      	ldr	r2, [pc, #496]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80027de:	4b7a      	ldr	r3, [pc, #488]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ea:	2301      	movs	r3, #1
 80027ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	4b77      	ldr	r3, [pc, #476]	@ (80029cc <HAL_RCC_OscConfig+0x474>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d118      	bne.n	800282c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027fa:	4b74      	ldr	r3, [pc, #464]	@ (80029cc <HAL_RCC_OscConfig+0x474>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a73      	ldr	r2, [pc, #460]	@ (80029cc <HAL_RCC_OscConfig+0x474>)
 8002800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002806:	f7fe fb79 	bl	8000efc <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280e:	f7fe fb75 	bl	8000efc <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e10c      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002820:	4b6a      	ldr	r3, [pc, #424]	@ (80029cc <HAL_RCC_OscConfig+0x474>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x2ea>
 8002834:	4b64      	ldr	r3, [pc, #400]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002838:	4a63      	ldr	r2, [pc, #396]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002840:	e01c      	b.n	800287c <HAL_RCC_OscConfig+0x324>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b05      	cmp	r3, #5
 8002848:	d10c      	bne.n	8002864 <HAL_RCC_OscConfig+0x30c>
 800284a:	4b5f      	ldr	r3, [pc, #380]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284e:	4a5e      	ldr	r2, [pc, #376]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002850:	f043 0304 	orr.w	r3, r3, #4
 8002854:	6713      	str	r3, [r2, #112]	@ 0x70
 8002856:	4b5c      	ldr	r3, [pc, #368]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285a:	4a5b      	ldr	r2, [pc, #364]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6713      	str	r3, [r2, #112]	@ 0x70
 8002862:	e00b      	b.n	800287c <HAL_RCC_OscConfig+0x324>
 8002864:	4b58      	ldr	r3, [pc, #352]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002868:	4a57      	ldr	r2, [pc, #348]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002870:	4b55      	ldr	r3, [pc, #340]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002874:	4a54      	ldr	r2, [pc, #336]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002876:	f023 0304 	bic.w	r3, r3, #4
 800287a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d015      	beq.n	80028b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7fe fb3a 	bl	8000efc <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288c:	f7fe fb36 	bl	8000efc <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e0cb      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a2:	4b49      	ldr	r3, [pc, #292]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0ee      	beq.n	800288c <HAL_RCC_OscConfig+0x334>
 80028ae:	e014      	b.n	80028da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b0:	f7fe fb24 	bl	8000efc <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b8:	f7fe fb20 	bl	8000efc <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e0b5      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ce:	4b3e      	ldr	r3, [pc, #248]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1ee      	bne.n	80028b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028da:	7dfb      	ldrb	r3, [r7, #23]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d105      	bne.n	80028ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e0:	4b39      	ldr	r3, [pc, #228]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e4:	4a38      	ldr	r2, [pc, #224]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80a1 	beq.w	8002a38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028f6:	4b34      	ldr	r3, [pc, #208]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d05c      	beq.n	80029bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d141      	bne.n	800298e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290a:	4b31      	ldr	r3, [pc, #196]	@ (80029d0 <HAL_RCC_OscConfig+0x478>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe faf4 	bl	8000efc <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe faf0 	bl	8000efc <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e087      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	4b27      	ldr	r3, [pc, #156]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	019b      	lsls	r3, r3, #6
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	3b01      	subs	r3, #1
 8002950:	041b      	lsls	r3, r3, #16
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002958:	061b      	lsls	r3, r3, #24
 800295a:	491b      	ldr	r1, [pc, #108]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 800295c:	4313      	orrs	r3, r2
 800295e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002960:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <HAL_RCC_OscConfig+0x478>)
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002966:	f7fe fac9 	bl	8000efc <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800296e:	f7fe fac5 	bl	8000efc <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e05c      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002980:	4b11      	ldr	r3, [pc, #68]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x416>
 800298c:	e054      	b.n	8002a38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298e:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <HAL_RCC_OscConfig+0x478>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7fe fab2 	bl	8000efc <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299c:	f7fe faae 	bl	8000efc <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e045      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <HAL_RCC_OscConfig+0x470>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x444>
 80029ba:	e03d      	b.n	8002a38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d107      	bne.n	80029d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e038      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40007000 	.word	0x40007000
 80029d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a44 <HAL_RCC_OscConfig+0x4ec>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d028      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d121      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d11a      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a04:	4013      	ands	r3, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d111      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1a:	085b      	lsrs	r3, r3, #1
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800

08002a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0cc      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b68      	ldr	r3, [pc, #416]	@ (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d90c      	bls.n	8002a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b65      	ldr	r3, [pc, #404]	@ (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	4b63      	ldr	r3, [pc, #396]	@ (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0b8      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d020      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a9c:	4b59      	ldr	r3, [pc, #356]	@ (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4a58      	ldr	r2, [pc, #352]	@ (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab4:	4b53      	ldr	r3, [pc, #332]	@ (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a52      	ldr	r2, [pc, #328]	@ (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac0:	4b50      	ldr	r3, [pc, #320]	@ (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	494d      	ldr	r1, [pc, #308]	@ (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d044      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	4b47      	ldr	r3, [pc, #284]	@ (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d119      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e07f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d003      	beq.n	8002b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b06:	4b3f      	ldr	r3, [pc, #252]	@ (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e06f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b16:	4b3b      	ldr	r3, [pc, #236]	@ (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e067      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b26:	4b37      	ldr	r3, [pc, #220]	@ (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4934      	ldr	r1, [pc, #208]	@ (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b38:	f7fe f9e0 	bl	8000efc <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b40:	f7fe f9dc 	bl	8000efc <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e04f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	4b2b      	ldr	r3, [pc, #172]	@ (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 020c 	and.w	r2, r3, #12
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1eb      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b68:	4b25      	ldr	r3, [pc, #148]	@ (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d20c      	bcs.n	8002b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b22      	ldr	r3, [pc, #136]	@ (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b20      	ldr	r3, [pc, #128]	@ (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e032      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b9c:	4b19      	ldr	r3, [pc, #100]	@ (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4916      	ldr	r1, [pc, #88]	@ (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bba:	4b12      	ldr	r3, [pc, #72]	@ (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	490e      	ldr	r1, [pc, #56]	@ (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bce:	f000 f821 	bl	8002c14 <HAL_RCC_GetSysClockFreq>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	490a      	ldr	r1, [pc, #40]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	5ccb      	ldrb	r3, [r1, r3]
 8002be2:	fa22 f303 	lsr.w	r3, r2, r3
 8002be6:	4a09      	ldr	r2, [pc, #36]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bea:	4b09      	ldr	r3, [pc, #36]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe f940 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023c00 	.word	0x40023c00
 8002c04:	40023800 	.word	0x40023800
 8002c08:	08005044 	.word	0x08005044
 8002c0c:	20000014 	.word	0x20000014
 8002c10:	20000018 	.word	0x20000018

08002c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c18:	b094      	sub	sp, #80	@ 0x50
 8002c1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c20:	2300      	movs	r3, #0
 8002c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c24:	2300      	movs	r3, #0
 8002c26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c2c:	4b79      	ldr	r3, [pc, #484]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 030c 	and.w	r3, r3, #12
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d00d      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x40>
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	f200 80e1 	bhi.w	8002e00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x34>
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d003      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c46:	e0db      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c48:	4b73      	ldr	r3, [pc, #460]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002c4c:	e0db      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c4e:	4b73      	ldr	r3, [pc, #460]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x208>)
 8002c50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c52:	e0d8      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c54:	4b6f      	ldr	r3, [pc, #444]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d063      	beq.n	8002d32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	099b      	lsrs	r3, r3, #6
 8002c70:	2200      	movs	r2, #0
 8002c72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c7e:	2300      	movs	r3, #0
 8002c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c86:	4622      	mov	r2, r4
 8002c88:	462b      	mov	r3, r5
 8002c8a:	f04f 0000 	mov.w	r0, #0
 8002c8e:	f04f 0100 	mov.w	r1, #0
 8002c92:	0159      	lsls	r1, r3, #5
 8002c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c98:	0150      	lsls	r0, r2, #5
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	1a51      	subs	r1, r2, r1
 8002ca2:	6139      	str	r1, [r7, #16]
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cb8:	4659      	mov	r1, fp
 8002cba:	018b      	lsls	r3, r1, #6
 8002cbc:	4651      	mov	r1, sl
 8002cbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cc2:	4651      	mov	r1, sl
 8002cc4:	018a      	lsls	r2, r1, #6
 8002cc6:	4651      	mov	r1, sl
 8002cc8:	ebb2 0801 	subs.w	r8, r2, r1
 8002ccc:	4659      	mov	r1, fp
 8002cce:	eb63 0901 	sbc.w	r9, r3, r1
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ce6:	4690      	mov	r8, r2
 8002ce8:	4699      	mov	r9, r3
 8002cea:	4623      	mov	r3, r4
 8002cec:	eb18 0303 	adds.w	r3, r8, r3
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	462b      	mov	r3, r5
 8002cf4:	eb49 0303 	adc.w	r3, r9, r3
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d06:	4629      	mov	r1, r5
 8002d08:	024b      	lsls	r3, r1, #9
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d10:	4621      	mov	r1, r4
 8002d12:	024a      	lsls	r2, r1, #9
 8002d14:	4610      	mov	r0, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d24:	f7fd faa4 	bl	8000270 <__aeabi_uldivmod>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d30:	e058      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d32:	4b38      	ldr	r3, [pc, #224]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	099b      	lsrs	r3, r3, #6
 8002d38:	2200      	movs	r2, #0
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d42:	623b      	str	r3, [r7, #32]
 8002d44:	2300      	movs	r3, #0
 8002d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d4c:	4642      	mov	r2, r8
 8002d4e:	464b      	mov	r3, r9
 8002d50:	f04f 0000 	mov.w	r0, #0
 8002d54:	f04f 0100 	mov.w	r1, #0
 8002d58:	0159      	lsls	r1, r3, #5
 8002d5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d5e:	0150      	lsls	r0, r2, #5
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4641      	mov	r1, r8
 8002d66:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d6a:	4649      	mov	r1, r9
 8002d6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d84:	ebb2 040a 	subs.w	r4, r2, sl
 8002d88:	eb63 050b 	sbc.w	r5, r3, fp
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	00eb      	lsls	r3, r5, #3
 8002d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d9a:	00e2      	lsls	r2, r4, #3
 8002d9c:	4614      	mov	r4, r2
 8002d9e:	461d      	mov	r5, r3
 8002da0:	4643      	mov	r3, r8
 8002da2:	18e3      	adds	r3, r4, r3
 8002da4:	603b      	str	r3, [r7, #0]
 8002da6:	464b      	mov	r3, r9
 8002da8:	eb45 0303 	adc.w	r3, r5, r3
 8002dac:	607b      	str	r3, [r7, #4]
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dba:	4629      	mov	r1, r5
 8002dbc:	028b      	lsls	r3, r1, #10
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	028a      	lsls	r2, r1, #10
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dce:	2200      	movs	r2, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	61fa      	str	r2, [r7, #28]
 8002dd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dd8:	f7fd fa4a 	bl	8000270 <__aeabi_uldivmod>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4613      	mov	r3, r2
 8002de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	0c1b      	lsrs	r3, r3, #16
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	3301      	adds	r3, #1
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002df4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002df6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dfe:	e002      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e00:	4b05      	ldr	r3, [pc, #20]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3750      	adds	r7, #80	@ 0x50
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800
 8002e18:	00f42400 	.word	0x00f42400
 8002e1c:	007a1200 	.word	0x007a1200

08002e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e24:	4b03      	ldr	r3, [pc, #12]	@ (8002e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000014 	.word	0x20000014

08002e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e3c:	f7ff fff0 	bl	8002e20 <HAL_RCC_GetHCLKFreq>
 8002e40:	4602      	mov	r2, r0
 8002e42:	4b05      	ldr	r3, [pc, #20]	@ (8002e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	0a9b      	lsrs	r3, r3, #10
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	4903      	ldr	r1, [pc, #12]	@ (8002e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e4e:	5ccb      	ldrb	r3, [r1, r3]
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	08005054 	.word	0x08005054

08002e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e64:	f7ff ffdc 	bl	8002e20 <HAL_RCC_GetHCLKFreq>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	0b5b      	lsrs	r3, r3, #13
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	4903      	ldr	r1, [pc, #12]	@ (8002e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e76:	5ccb      	ldrb	r3, [r1, r3]
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40023800 	.word	0x40023800
 8002e84:	08005054 	.word	0x08005054

08002e88 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d105      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d035      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002eb0:	4b62      	ldr	r3, [pc, #392]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002eb6:	f7fe f821 	bl	8000efc <HAL_GetTick>
 8002eba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ebe:	f7fe f81d 	bl	8000efc <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e0b0      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ed0:	4b5b      	ldr	r3, [pc, #364]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f0      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	019a      	lsls	r2, r3, #6
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	071b      	lsls	r3, r3, #28
 8002ee8:	4955      	ldr	r1, [pc, #340]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ef0:	4b52      	ldr	r3, [pc, #328]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ef6:	f7fe f801 	bl	8000efc <HAL_GetTick>
 8002efa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002efe:	f7fd fffd 	bl	8000efc <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e090      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f10:	4b4b      	ldr	r3, [pc, #300]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8083 	beq.w	8003030 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	4b44      	ldr	r3, [pc, #272]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	4a43      	ldr	r2, [pc, #268]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f3a:	4b41      	ldr	r3, [pc, #260]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f46:	4b3f      	ldr	r3, [pc, #252]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a3e      	ldr	r2, [pc, #248]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f52:	f7fd ffd3 	bl	8000efc <HAL_GetTick>
 8002f56:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f58:	e008      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f5a:	f7fd ffcf 	bl	8000efc <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e062      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f6c:	4b35      	ldr	r3, [pc, #212]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f78:	4b31      	ldr	r3, [pc, #196]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f80:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d02f      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d028      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f96:	4b2a      	ldr	r3, [pc, #168]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f9e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fa0:	4b29      	ldr	r3, [pc, #164]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fa6:	4b28      	ldr	r3, [pc, #160]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002fac:	4a24      	ldr	r2, [pc, #144]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fb2:	4b23      	ldr	r3, [pc, #140]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d114      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7fd ff9d 	bl	8000efc <HAL_GetTick>
 8002fc2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fd ff99 	bl	8000efc <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e02a      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	4b18      	ldr	r3, [pc, #96]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ee      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ff0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ff4:	d10d      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002ff6:	4b12      	ldr	r3, [pc, #72]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003006:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800300a:	490d      	ldr	r1, [pc, #52]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800300c:	4313      	orrs	r3, r2
 800300e:	608b      	str	r3, [r1, #8]
 8003010:	e005      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003012:	4b0b      	ldr	r3, [pc, #44]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	4a0a      	ldr	r2, [pc, #40]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003018:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800301c:	6093      	str	r3, [r2, #8]
 800301e:	4b08      	ldr	r3, [pc, #32]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003020:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302a:	4905      	ldr	r1, [pc, #20]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800302c:	4313      	orrs	r3, r2
 800302e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	42470068 	.word	0x42470068
 8003040:	40023800 	.word	0x40023800
 8003044:	40007000 	.word	0x40007000
 8003048:	42470e40 	.word	0x42470e40

0800304c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d13f      	bne.n	80030ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800306a:	4b24      	ldr	r3, [pc, #144]	@ (80030fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d006      	beq.n	8003088 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003080:	d12f      	bne.n	80030e2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003082:	4b1f      	ldr	r3, [pc, #124]	@ (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003084:	617b      	str	r3, [r7, #20]
          break;
 8003086:	e02f      	b.n	80030e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003088:	4b1c      	ldr	r3, [pc, #112]	@ (80030fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003090:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003094:	d108      	bne.n	80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003096:	4b19      	ldr	r3, [pc, #100]	@ (80030fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800309e:	4a19      	ldr	r2, [pc, #100]	@ (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	e007      	b.n	80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80030a8:	4b14      	ldr	r3, [pc, #80]	@ (80030fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030b0:	4a15      	ldr	r2, [pc, #84]	@ (8003108 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80030b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80030b8:	4b10      	ldr	r3, [pc, #64]	@ (80030fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80030ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030be:	099b      	lsrs	r3, r3, #6
 80030c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	fb02 f303 	mul.w	r3, r2, r3
 80030ca:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80030ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030d2:	0f1b      	lsrs	r3, r3, #28
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	fbb2 f3f3 	udiv	r3, r2, r3
 80030de:	617b      	str	r3, [r7, #20]
          break;
 80030e0:	e002      	b.n	80030e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
          break;
 80030e6:	bf00      	nop
        }
      }
      break;
 80030e8:	e000      	b.n	80030ec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80030ea:	bf00      	nop
    }
  }
  return frequency;
 80030ec:	697b      	ldr	r3, [r7, #20]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	00bb8000 	.word	0x00bb8000
 8003104:	007a1200 	.word	0x007a1200
 8003108:	00f42400 	.word	0x00f42400

0800310c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e042      	b.n	80031a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fd fd1a 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2224      	movs	r2, #36	@ 0x24
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800314e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 fdbd 	bl	8003cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003164:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695a      	ldr	r2, [r3, #20]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003174:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003184:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	@ 0x28
 80031b0:	af02      	add	r7, sp, #8
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d175      	bne.n	80032b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <HAL_UART_Transmit+0x2c>
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e06e      	b.n	80032ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2221      	movs	r2, #33	@ 0x21
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ea:	f7fd fe87 	bl	8000efc <HAL_GetTick>
 80031ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	88fa      	ldrh	r2, [r7, #6]
 80031f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	88fa      	ldrh	r2, [r7, #6]
 80031fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003204:	d108      	bne.n	8003218 <HAL_UART_Transmit+0x6c>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d104      	bne.n	8003218 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	61bb      	str	r3, [r7, #24]
 8003216:	e003      	b.n	8003220 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800321c:	2300      	movs	r3, #0
 800321e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003220:	e02e      	b.n	8003280 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2200      	movs	r2, #0
 800322a:	2180      	movs	r1, #128	@ 0x80
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fb1f 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e03a      	b.n	80032ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10b      	bne.n	8003262 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003258:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	3302      	adds	r3, #2
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	e007      	b.n	8003272 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	781a      	ldrb	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	3301      	adds	r3, #1
 8003270:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1cb      	bne.n	8003222 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2200      	movs	r2, #0
 8003292:	2140      	movs	r1, #64	@ 0x40
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 faeb 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e006      	b.n	80032ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e000      	b.n	80032ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80032b8:	2302      	movs	r3, #2
  }
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3720      	adds	r7, #32
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	4613      	mov	r3, r2
 80032ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d112      	bne.n	8003302 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_UART_Receive_IT+0x26>
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e00b      	b.n	8003304 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	461a      	mov	r2, r3
 80032f6:	68b9      	ldr	r1, [r7, #8]
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fb12 	bl	8003922 <UART_Start_Receive_IT>
 80032fe:	4603      	mov	r3, r0
 8003300:	e000      	b.n	8003304 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003302:	2302      	movs	r3, #2
  }
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b0ba      	sub	sp, #232	@ 0xe8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003332:	2300      	movs	r3, #0
 8003334:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003338:	2300      	movs	r3, #0
 800333a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800333e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800334a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10f      	bne.n	8003372 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <HAL_UART_IRQHandler+0x66>
 800335e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fbf2 	bl	8003b54 <UART_Receive_IT>
      return;
 8003370:	e25b      	b.n	800382a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003372:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 80de 	beq.w	8003538 <HAL_UART_IRQHandler+0x22c>
 800337c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d106      	bne.n	8003396 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800338c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80d1 	beq.w	8003538 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00b      	beq.n	80033ba <HAL_UART_IRQHandler+0xae>
 80033a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00b      	beq.n	80033de <HAL_UART_IRQHandler+0xd2>
 80033c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d6:	f043 0202 	orr.w	r2, r3, #2
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00b      	beq.n	8003402 <HAL_UART_IRQHandler+0xf6>
 80033ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fa:	f043 0204 	orr.w	r2, r3, #4
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d011      	beq.n	8003432 <HAL_UART_IRQHandler+0x126>
 800340e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b00      	cmp	r3, #0
 8003418:	d105      	bne.n	8003426 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800341a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342a:	f043 0208 	orr.w	r2, r3, #8
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 81f2 	beq.w	8003820 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800343c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_UART_IRQHandler+0x14e>
 8003448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fb7d 	bl	8003b54 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003464:	2b40      	cmp	r3, #64	@ 0x40
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d103      	bne.n	8003486 <HAL_UART_IRQHandler+0x17a>
 800347e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d04f      	beq.n	8003526 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fa85 	bl	8003996 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003496:	2b40      	cmp	r3, #64	@ 0x40
 8003498:	d141      	bne.n	800351e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3314      	adds	r3, #20
 80034a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80034b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3314      	adds	r3, #20
 80034c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80034ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80034d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80034de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1d9      	bne.n	800349a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d013      	beq.n	8003516 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f2:	4a7e      	ldr	r2, [pc, #504]	@ (80036ec <HAL_UART_IRQHandler+0x3e0>)
 80034f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fd ff5e 	bl	80013bc <HAL_DMA_Abort_IT>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d016      	beq.n	8003534 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003510:	4610      	mov	r0, r2
 8003512:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003514:	e00e      	b.n	8003534 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f994 	bl	8003844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351c:	e00a      	b.n	8003534 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f990 	bl	8003844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003524:	e006      	b.n	8003534 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f98c 	bl	8003844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003532:	e175      	b.n	8003820 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003534:	bf00      	nop
    return;
 8003536:	e173      	b.n	8003820 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353c:	2b01      	cmp	r3, #1
 800353e:	f040 814f 	bne.w	80037e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8148 	beq.w	80037e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8141 	beq.w	80037e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357e:	2b40      	cmp	r3, #64	@ 0x40
 8003580:	f040 80b6 	bne.w	80036f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003590:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 8145 	beq.w	8003824 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800359e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035a2:	429a      	cmp	r2, r3
 80035a4:	f080 813e 	bcs.w	8003824 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035ba:	f000 8088 	beq.w	80036ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	330c      	adds	r3, #12
 80035c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035cc:	e853 3f00 	ldrex	r3, [r3]
 80035d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80035d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	330c      	adds	r3, #12
 80035e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80035ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80035f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80035fa:	e841 2300 	strex	r3, r2, [r1]
 80035fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003602:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1d9      	bne.n	80035be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3314      	adds	r3, #20
 8003610:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003612:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800361a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3314      	adds	r3, #20
 800362a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800362e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003632:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003634:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003636:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003640:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e1      	bne.n	800360a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3314      	adds	r3, #20
 800364c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003650:	e853 3f00 	ldrex	r3, [r3]
 8003654:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003656:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800365c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3314      	adds	r3, #20
 8003666:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800366a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800366c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003670:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003672:	e841 2300 	strex	r3, r2, [r1]
 8003676:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003678:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e3      	bne.n	8003646 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	330c      	adds	r3, #12
 8003692:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003696:	e853 3f00 	ldrex	r3, [r3]
 800369a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800369c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800369e:	f023 0310 	bic.w	r3, r3, #16
 80036a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	330c      	adds	r3, #12
 80036ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80036b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036b8:	e841 2300 	strex	r3, r2, [r1]
 80036bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80036be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e3      	bne.n	800368c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fd fe07 	bl	80012dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2202      	movs	r2, #2
 80036d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036dc:	b29b      	uxth	r3, r3
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	4619      	mov	r1, r3
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f8b7 	bl	8003858 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036ea:	e09b      	b.n	8003824 <HAL_UART_IRQHandler+0x518>
 80036ec:	08003a5d 	.word	0x08003a5d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 808e 	beq.w	8003828 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800370c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 8089 	beq.w	8003828 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	330c      	adds	r3, #12
 800371c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003720:	e853 3f00 	ldrex	r3, [r3]
 8003724:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003728:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800372c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	330c      	adds	r3, #12
 8003736:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800373a:	647a      	str	r2, [r7, #68]	@ 0x44
 800373c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003740:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003742:	e841 2300 	strex	r3, r2, [r1]
 8003746:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1e3      	bne.n	8003716 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3314      	adds	r3, #20
 8003754:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003758:	e853 3f00 	ldrex	r3, [r3]
 800375c:	623b      	str	r3, [r7, #32]
   return(result);
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	f023 0301 	bic.w	r3, r3, #1
 8003764:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3314      	adds	r3, #20
 800376e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003772:	633a      	str	r2, [r7, #48]	@ 0x30
 8003774:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e3      	bne.n	800374e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	330c      	adds	r3, #12
 800379a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0310 	bic.w	r3, r3, #16
 80037aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	330c      	adds	r3, #12
 80037b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80037b8:	61fa      	str	r2, [r7, #28]
 80037ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	69b9      	ldr	r1, [r7, #24]
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	e841 2300 	strex	r3, r2, [r1]
 80037c4:	617b      	str	r3, [r7, #20]
   return(result);
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e3      	bne.n	8003794 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037d6:	4619      	mov	r1, r3
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f83d 	bl	8003858 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037de:	e023      	b.n	8003828 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d009      	beq.n	8003800 <HAL_UART_IRQHandler+0x4f4>
 80037ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f943 	bl	8003a84 <UART_Transmit_IT>
    return;
 80037fe:	e014      	b.n	800382a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00e      	beq.n	800382a <HAL_UART_IRQHandler+0x51e>
 800380c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f983 	bl	8003b24 <UART_EndTransmit_IT>
    return;
 800381e:	e004      	b.n	800382a <HAL_UART_IRQHandler+0x51e>
    return;
 8003820:	bf00      	nop
 8003822:	e002      	b.n	800382a <HAL_UART_IRQHandler+0x51e>
      return;
 8003824:	bf00      	nop
 8003826:	e000      	b.n	800382a <HAL_UART_IRQHandler+0x51e>
      return;
 8003828:	bf00      	nop
  }
}
 800382a:	37e8      	adds	r7, #232	@ 0xe8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003880:	e03b      	b.n	80038fa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d037      	beq.n	80038fa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7fd fb37 	bl	8000efc <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	6a3a      	ldr	r2, [r7, #32]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e03a      	b.n	800391a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d023      	beq.n	80038fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b80      	cmp	r3, #128	@ 0x80
 80038b6:	d020      	beq.n	80038fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b40      	cmp	r3, #64	@ 0x40
 80038bc:	d01d      	beq.n	80038fa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d116      	bne.n	80038fa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f857 	bl	8003996 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2208      	movs	r2, #8
 80038ec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e00f      	b.n	800391a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4013      	ands	r3, r2
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	bf0c      	ite	eq
 800390a:	2301      	moveq	r3, #1
 800390c:	2300      	movne	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	429a      	cmp	r2, r3
 8003916:	d0b4      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003922:	b480      	push	{r7}
 8003924:	b085      	sub	sp, #20
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	4613      	mov	r3, r2
 800392e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	88fa      	ldrh	r2, [r7, #6]
 800393a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	88fa      	ldrh	r2, [r7, #6]
 8003940:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2222      	movs	r2, #34	@ 0x22
 800394c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d007      	beq.n	8003968 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003966:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0220 	orr.w	r2, r2, #32
 8003986:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003996:	b480      	push	{r7}
 8003998:	b095      	sub	sp, #84	@ 0x54
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a8:	e853 3f00 	ldrex	r3, [r3]
 80039ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	330c      	adds	r3, #12
 80039bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039be:	643a      	str	r2, [r7, #64]	@ 0x40
 80039c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039c6:	e841 2300 	strex	r3, r2, [r1]
 80039ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1e5      	bne.n	800399e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3314      	adds	r3, #20
 80039d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	e853 3f00 	ldrex	r3, [r3]
 80039e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f023 0301 	bic.w	r3, r3, #1
 80039e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3314      	adds	r3, #20
 80039f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e5      	bne.n	80039d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d119      	bne.n	8003a42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	330c      	adds	r3, #12
 8003a14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	e853 3f00 	ldrex	r3, [r3]
 8003a1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f023 0310 	bic.w	r3, r3, #16
 8003a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a2e:	61ba      	str	r2, [r7, #24]
 8003a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	6979      	ldr	r1, [r7, #20]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	e841 2300 	strex	r3, r2, [r1]
 8003a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e5      	bne.n	8003a0e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a50:	bf00      	nop
 8003a52:	3754      	adds	r7, #84	@ 0x54
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f7ff fee4 	bl	8003844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a7c:	bf00      	nop
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b21      	cmp	r3, #33	@ 0x21
 8003a96:	d13e      	bne.n	8003b16 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa0:	d114      	bne.n	8003acc <UART_Transmit_IT+0x48>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d110      	bne.n	8003acc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003abe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	1c9a      	adds	r2, r3, #2
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	621a      	str	r2, [r3, #32]
 8003aca:	e008      	b.n	8003ade <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	1c59      	adds	r1, r3, #1
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6211      	str	r1, [r2, #32]
 8003ad6:	781a      	ldrb	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	4619      	mov	r1, r3
 8003aec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10f      	bne.n	8003b12 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	e000      	b.n	8003b18 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b16:	2302      	movs	r3, #2
  }
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b3a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff fe73 	bl	8003830 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08c      	sub	sp, #48	@ 0x30
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b22      	cmp	r3, #34	@ 0x22
 8003b66:	f040 80ae 	bne.w	8003cc6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b72:	d117      	bne.n	8003ba4 <UART_Receive_IT+0x50>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d113      	bne.n	8003ba4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b84:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9c:	1c9a      	adds	r2, r3, #2
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ba2:	e026      	b.n	8003bf2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb6:	d007      	beq.n	8003bc8 <UART_Receive_IT+0x74>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <UART_Receive_IT+0x82>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d106      	bne.n	8003bd6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	e008      	b.n	8003be8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	4619      	mov	r1, r3
 8003c00:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d15d      	bne.n	8003cc2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0220 	bic.w	r2, r2, #32
 8003c14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695a      	ldr	r2, [r3, #20]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0201 	bic.w	r2, r2, #1
 8003c34:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d135      	bne.n	8003cb8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	613b      	str	r3, [r7, #16]
   return(result);
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f023 0310 	bic.w	r3, r3, #16
 8003c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	330c      	adds	r3, #12
 8003c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c72:	623a      	str	r2, [r7, #32]
 8003c74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	69f9      	ldr	r1, [r7, #28]
 8003c78:	6a3a      	ldr	r2, [r7, #32]
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e5      	bne.n	8003c52 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d10a      	bne.n	8003caa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff fdd1 	bl	8003858 <HAL_UARTEx_RxEventCallback>
 8003cb6:	e002      	b.n	8003cbe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7fc fe0b 	bl	80008d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e002      	b.n	8003cc8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e000      	b.n	8003cc8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003cc6:	2302      	movs	r3, #2
  }
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3730      	adds	r7, #48	@ 0x30
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cd4:	b0c0      	sub	sp, #256	@ 0x100
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cec:	68d9      	ldr	r1, [r3, #12]
 8003cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	ea40 0301 	orr.w	r3, r0, r1
 8003cf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d28:	f021 010c 	bic.w	r1, r1, #12
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d36:	430b      	orrs	r3, r1
 8003d38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4a:	6999      	ldr	r1, [r3, #24]
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	ea40 0301 	orr.w	r3, r0, r1
 8003d56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	4b8f      	ldr	r3, [pc, #572]	@ (8003f9c <UART_SetConfig+0x2cc>)
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d005      	beq.n	8003d70 <UART_SetConfig+0xa0>
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4b8d      	ldr	r3, [pc, #564]	@ (8003fa0 <UART_SetConfig+0x2d0>)
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d104      	bne.n	8003d7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d70:	f7ff f876 	bl	8002e60 <HAL_RCC_GetPCLK2Freq>
 8003d74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d78:	e003      	b.n	8003d82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d7a:	f7ff f85d 	bl	8002e38 <HAL_RCC_GetPCLK1Freq>
 8003d7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d8c:	f040 810c 	bne.w	8003fa8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003da2:	4622      	mov	r2, r4
 8003da4:	462b      	mov	r3, r5
 8003da6:	1891      	adds	r1, r2, r2
 8003da8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003daa:	415b      	adcs	r3, r3
 8003dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003db2:	4621      	mov	r1, r4
 8003db4:	eb12 0801 	adds.w	r8, r2, r1
 8003db8:	4629      	mov	r1, r5
 8003dba:	eb43 0901 	adc.w	r9, r3, r1
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dd2:	4690      	mov	r8, r2
 8003dd4:	4699      	mov	r9, r3
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	eb18 0303 	adds.w	r3, r8, r3
 8003ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003de0:	462b      	mov	r3, r5
 8003de2:	eb49 0303 	adc.w	r3, r9, r3
 8003de6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003df6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003dfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dfe:	460b      	mov	r3, r1
 8003e00:	18db      	adds	r3, r3, r3
 8003e02:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e04:	4613      	mov	r3, r2
 8003e06:	eb42 0303 	adc.w	r3, r2, r3
 8003e0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e14:	f7fc fa2c 	bl	8000270 <__aeabi_uldivmod>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4b61      	ldr	r3, [pc, #388]	@ (8003fa4 <UART_SetConfig+0x2d4>)
 8003e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	011c      	lsls	r4, r3, #4
 8003e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e38:	4642      	mov	r2, r8
 8003e3a:	464b      	mov	r3, r9
 8003e3c:	1891      	adds	r1, r2, r2
 8003e3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e40:	415b      	adcs	r3, r3
 8003e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e48:	4641      	mov	r1, r8
 8003e4a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e4e:	4649      	mov	r1, r9
 8003e50:	eb43 0b01 	adc.w	fp, r3, r1
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e68:	4692      	mov	sl, r2
 8003e6a:	469b      	mov	fp, r3
 8003e6c:	4643      	mov	r3, r8
 8003e6e:	eb1a 0303 	adds.w	r3, sl, r3
 8003e72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e76:	464b      	mov	r3, r9
 8003e78:	eb4b 0303 	adc.w	r3, fp, r3
 8003e7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e94:	460b      	mov	r3, r1
 8003e96:	18db      	adds	r3, r3, r3
 8003e98:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ea0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ea2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ea6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003eaa:	f7fc f9e1 	bl	8000270 <__aeabi_uldivmod>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa4 <UART_SetConfig+0x2d4>)
 8003eb6:	fba3 2301 	umull	r2, r3, r3, r1
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	2264      	movs	r2, #100	@ 0x64
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	1acb      	subs	r3, r1, r3
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003eca:	4b36      	ldr	r3, [pc, #216]	@ (8003fa4 <UART_SetConfig+0x2d4>)
 8003ecc:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ed8:	441c      	add	r4, r3
 8003eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ee4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ee8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003eec:	4642      	mov	r2, r8
 8003eee:	464b      	mov	r3, r9
 8003ef0:	1891      	adds	r1, r2, r2
 8003ef2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ef4:	415b      	adcs	r3, r3
 8003ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ef8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003efc:	4641      	mov	r1, r8
 8003efe:	1851      	adds	r1, r2, r1
 8003f00:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f02:	4649      	mov	r1, r9
 8003f04:	414b      	adcs	r3, r1
 8003f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f14:	4659      	mov	r1, fp
 8003f16:	00cb      	lsls	r3, r1, #3
 8003f18:	4651      	mov	r1, sl
 8003f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f1e:	4651      	mov	r1, sl
 8003f20:	00ca      	lsls	r2, r1, #3
 8003f22:	4610      	mov	r0, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	4603      	mov	r3, r0
 8003f28:	4642      	mov	r2, r8
 8003f2a:	189b      	adds	r3, r3, r2
 8003f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f30:	464b      	mov	r3, r9
 8003f32:	460a      	mov	r2, r1
 8003f34:	eb42 0303 	adc.w	r3, r2, r3
 8003f38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f50:	460b      	mov	r3, r1
 8003f52:	18db      	adds	r3, r3, r3
 8003f54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f56:	4613      	mov	r3, r2
 8003f58:	eb42 0303 	adc.w	r3, r2, r3
 8003f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f66:	f7fc f983 	bl	8000270 <__aeabi_uldivmod>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa4 <UART_SetConfig+0x2d4>)
 8003f70:	fba3 1302 	umull	r1, r3, r3, r2
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	2164      	movs	r1, #100	@ 0x64
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	3332      	adds	r3, #50	@ 0x32
 8003f82:	4a08      	ldr	r2, [pc, #32]	@ (8003fa4 <UART_SetConfig+0x2d4>)
 8003f84:	fba2 2303 	umull	r2, r3, r2, r3
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	f003 0207 	and.w	r2, r3, #7
 8003f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4422      	add	r2, r4
 8003f96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f98:	e106      	b.n	80041a8 <UART_SetConfig+0x4d8>
 8003f9a:	bf00      	nop
 8003f9c:	40011000 	.word	0x40011000
 8003fa0:	40011400 	.word	0x40011400
 8003fa4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fac:	2200      	movs	r2, #0
 8003fae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003fb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003fba:	4642      	mov	r2, r8
 8003fbc:	464b      	mov	r3, r9
 8003fbe:	1891      	adds	r1, r2, r2
 8003fc0:	6239      	str	r1, [r7, #32]
 8003fc2:	415b      	adcs	r3, r3
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fca:	4641      	mov	r1, r8
 8003fcc:	1854      	adds	r4, r2, r1
 8003fce:	4649      	mov	r1, r9
 8003fd0:	eb43 0501 	adc.w	r5, r3, r1
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	00eb      	lsls	r3, r5, #3
 8003fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fe2:	00e2      	lsls	r2, r4, #3
 8003fe4:	4614      	mov	r4, r2
 8003fe6:	461d      	mov	r5, r3
 8003fe8:	4643      	mov	r3, r8
 8003fea:	18e3      	adds	r3, r4, r3
 8003fec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ff0:	464b      	mov	r3, r9
 8003ff2:	eb45 0303 	adc.w	r3, r5, r3
 8003ff6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004006:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004016:	4629      	mov	r1, r5
 8004018:	008b      	lsls	r3, r1, #2
 800401a:	4621      	mov	r1, r4
 800401c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004020:	4621      	mov	r1, r4
 8004022:	008a      	lsls	r2, r1, #2
 8004024:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004028:	f7fc f922 	bl	8000270 <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4b60      	ldr	r3, [pc, #384]	@ (80041b4 <UART_SetConfig+0x4e4>)
 8004032:	fba3 2302 	umull	r2, r3, r3, r2
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	011c      	lsls	r4, r3, #4
 800403a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800403e:	2200      	movs	r2, #0
 8004040:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004044:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004048:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800404c:	4642      	mov	r2, r8
 800404e:	464b      	mov	r3, r9
 8004050:	1891      	adds	r1, r2, r2
 8004052:	61b9      	str	r1, [r7, #24]
 8004054:	415b      	adcs	r3, r3
 8004056:	61fb      	str	r3, [r7, #28]
 8004058:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800405c:	4641      	mov	r1, r8
 800405e:	1851      	adds	r1, r2, r1
 8004060:	6139      	str	r1, [r7, #16]
 8004062:	4649      	mov	r1, r9
 8004064:	414b      	adcs	r3, r1
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004074:	4659      	mov	r1, fp
 8004076:	00cb      	lsls	r3, r1, #3
 8004078:	4651      	mov	r1, sl
 800407a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800407e:	4651      	mov	r1, sl
 8004080:	00ca      	lsls	r2, r1, #3
 8004082:	4610      	mov	r0, r2
 8004084:	4619      	mov	r1, r3
 8004086:	4603      	mov	r3, r0
 8004088:	4642      	mov	r2, r8
 800408a:	189b      	adds	r3, r3, r2
 800408c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004090:	464b      	mov	r3, r9
 8004092:	460a      	mov	r2, r1
 8004094:	eb42 0303 	adc.w	r3, r2, r3
 8004098:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80040b4:	4649      	mov	r1, r9
 80040b6:	008b      	lsls	r3, r1, #2
 80040b8:	4641      	mov	r1, r8
 80040ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040be:	4641      	mov	r1, r8
 80040c0:	008a      	lsls	r2, r1, #2
 80040c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040c6:	f7fc f8d3 	bl	8000270 <__aeabi_uldivmod>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4611      	mov	r1, r2
 80040d0:	4b38      	ldr	r3, [pc, #224]	@ (80041b4 <UART_SetConfig+0x4e4>)
 80040d2:	fba3 2301 	umull	r2, r3, r3, r1
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	2264      	movs	r2, #100	@ 0x64
 80040da:	fb02 f303 	mul.w	r3, r2, r3
 80040de:	1acb      	subs	r3, r1, r3
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	3332      	adds	r3, #50	@ 0x32
 80040e4:	4a33      	ldr	r2, [pc, #204]	@ (80041b4 <UART_SetConfig+0x4e4>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040f0:	441c      	add	r4, r3
 80040f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040f6:	2200      	movs	r2, #0
 80040f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80040fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80040fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004100:	4642      	mov	r2, r8
 8004102:	464b      	mov	r3, r9
 8004104:	1891      	adds	r1, r2, r2
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	415b      	adcs	r3, r3
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004110:	4641      	mov	r1, r8
 8004112:	1851      	adds	r1, r2, r1
 8004114:	6039      	str	r1, [r7, #0]
 8004116:	4649      	mov	r1, r9
 8004118:	414b      	adcs	r3, r1
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004128:	4659      	mov	r1, fp
 800412a:	00cb      	lsls	r3, r1, #3
 800412c:	4651      	mov	r1, sl
 800412e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004132:	4651      	mov	r1, sl
 8004134:	00ca      	lsls	r2, r1, #3
 8004136:	4610      	mov	r0, r2
 8004138:	4619      	mov	r1, r3
 800413a:	4603      	mov	r3, r0
 800413c:	4642      	mov	r2, r8
 800413e:	189b      	adds	r3, r3, r2
 8004140:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004142:	464b      	mov	r3, r9
 8004144:	460a      	mov	r2, r1
 8004146:	eb42 0303 	adc.w	r3, r2, r3
 800414a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	663b      	str	r3, [r7, #96]	@ 0x60
 8004156:	667a      	str	r2, [r7, #100]	@ 0x64
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004164:	4649      	mov	r1, r9
 8004166:	008b      	lsls	r3, r1, #2
 8004168:	4641      	mov	r1, r8
 800416a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800416e:	4641      	mov	r1, r8
 8004170:	008a      	lsls	r2, r1, #2
 8004172:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004176:	f7fc f87b 	bl	8000270 <__aeabi_uldivmod>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4b0d      	ldr	r3, [pc, #52]	@ (80041b4 <UART_SetConfig+0x4e4>)
 8004180:	fba3 1302 	umull	r1, r3, r3, r2
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	2164      	movs	r1, #100	@ 0x64
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	3332      	adds	r3, #50	@ 0x32
 8004192:	4a08      	ldr	r2, [pc, #32]	@ (80041b4 <UART_SetConfig+0x4e4>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	f003 020f 	and.w	r2, r3, #15
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4422      	add	r2, r4
 80041a6:	609a      	str	r2, [r3, #8]
}
 80041a8:	bf00      	nop
 80041aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80041ae:	46bd      	mov	sp, r7
 80041b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041b4:	51eb851f 	.word	0x51eb851f

080041b8 <std>:
 80041b8:	2300      	movs	r3, #0
 80041ba:	b510      	push	{r4, lr}
 80041bc:	4604      	mov	r4, r0
 80041be:	e9c0 3300 	strd	r3, r3, [r0]
 80041c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041c6:	6083      	str	r3, [r0, #8]
 80041c8:	8181      	strh	r1, [r0, #12]
 80041ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80041cc:	81c2      	strh	r2, [r0, #14]
 80041ce:	6183      	str	r3, [r0, #24]
 80041d0:	4619      	mov	r1, r3
 80041d2:	2208      	movs	r2, #8
 80041d4:	305c      	adds	r0, #92	@ 0x5c
 80041d6:	f000 f906 	bl	80043e6 <memset>
 80041da:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <std+0x58>)
 80041dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80041de:	4b0d      	ldr	r3, [pc, #52]	@ (8004214 <std+0x5c>)
 80041e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004218 <std+0x60>)
 80041e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041e6:	4b0d      	ldr	r3, [pc, #52]	@ (800421c <std+0x64>)
 80041e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80041ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004220 <std+0x68>)
 80041ec:	6224      	str	r4, [r4, #32]
 80041ee:	429c      	cmp	r4, r3
 80041f0:	d006      	beq.n	8004200 <std+0x48>
 80041f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041f6:	4294      	cmp	r4, r2
 80041f8:	d002      	beq.n	8004200 <std+0x48>
 80041fa:	33d0      	adds	r3, #208	@ 0xd0
 80041fc:	429c      	cmp	r4, r3
 80041fe:	d105      	bne.n	800420c <std+0x54>
 8004200:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004208:	f000 b966 	b.w	80044d8 <__retarget_lock_init_recursive>
 800420c:	bd10      	pop	{r4, pc}
 800420e:	bf00      	nop
 8004210:	08004361 	.word	0x08004361
 8004214:	08004383 	.word	0x08004383
 8004218:	080043bb 	.word	0x080043bb
 800421c:	080043df 	.word	0x080043df
 8004220:	20000234 	.word	0x20000234

08004224 <stdio_exit_handler>:
 8004224:	4a02      	ldr	r2, [pc, #8]	@ (8004230 <stdio_exit_handler+0xc>)
 8004226:	4903      	ldr	r1, [pc, #12]	@ (8004234 <stdio_exit_handler+0x10>)
 8004228:	4803      	ldr	r0, [pc, #12]	@ (8004238 <stdio_exit_handler+0x14>)
 800422a:	f000 b869 	b.w	8004300 <_fwalk_sglue>
 800422e:	bf00      	nop
 8004230:	20000020 	.word	0x20000020
 8004234:	08004d79 	.word	0x08004d79
 8004238:	20000030 	.word	0x20000030

0800423c <cleanup_stdio>:
 800423c:	6841      	ldr	r1, [r0, #4]
 800423e:	4b0c      	ldr	r3, [pc, #48]	@ (8004270 <cleanup_stdio+0x34>)
 8004240:	4299      	cmp	r1, r3
 8004242:	b510      	push	{r4, lr}
 8004244:	4604      	mov	r4, r0
 8004246:	d001      	beq.n	800424c <cleanup_stdio+0x10>
 8004248:	f000 fd96 	bl	8004d78 <_fflush_r>
 800424c:	68a1      	ldr	r1, [r4, #8]
 800424e:	4b09      	ldr	r3, [pc, #36]	@ (8004274 <cleanup_stdio+0x38>)
 8004250:	4299      	cmp	r1, r3
 8004252:	d002      	beq.n	800425a <cleanup_stdio+0x1e>
 8004254:	4620      	mov	r0, r4
 8004256:	f000 fd8f 	bl	8004d78 <_fflush_r>
 800425a:	68e1      	ldr	r1, [r4, #12]
 800425c:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <cleanup_stdio+0x3c>)
 800425e:	4299      	cmp	r1, r3
 8004260:	d004      	beq.n	800426c <cleanup_stdio+0x30>
 8004262:	4620      	mov	r0, r4
 8004264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004268:	f000 bd86 	b.w	8004d78 <_fflush_r>
 800426c:	bd10      	pop	{r4, pc}
 800426e:	bf00      	nop
 8004270:	20000234 	.word	0x20000234
 8004274:	2000029c 	.word	0x2000029c
 8004278:	20000304 	.word	0x20000304

0800427c <global_stdio_init.part.0>:
 800427c:	b510      	push	{r4, lr}
 800427e:	4b0b      	ldr	r3, [pc, #44]	@ (80042ac <global_stdio_init.part.0+0x30>)
 8004280:	4c0b      	ldr	r4, [pc, #44]	@ (80042b0 <global_stdio_init.part.0+0x34>)
 8004282:	4a0c      	ldr	r2, [pc, #48]	@ (80042b4 <global_stdio_init.part.0+0x38>)
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	4620      	mov	r0, r4
 8004288:	2200      	movs	r2, #0
 800428a:	2104      	movs	r1, #4
 800428c:	f7ff ff94 	bl	80041b8 <std>
 8004290:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004294:	2201      	movs	r2, #1
 8004296:	2109      	movs	r1, #9
 8004298:	f7ff ff8e 	bl	80041b8 <std>
 800429c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80042a0:	2202      	movs	r2, #2
 80042a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042a6:	2112      	movs	r1, #18
 80042a8:	f7ff bf86 	b.w	80041b8 <std>
 80042ac:	2000036c 	.word	0x2000036c
 80042b0:	20000234 	.word	0x20000234
 80042b4:	08004225 	.word	0x08004225

080042b8 <__sfp_lock_acquire>:
 80042b8:	4801      	ldr	r0, [pc, #4]	@ (80042c0 <__sfp_lock_acquire+0x8>)
 80042ba:	f000 b90e 	b.w	80044da <__retarget_lock_acquire_recursive>
 80042be:	bf00      	nop
 80042c0:	20000375 	.word	0x20000375

080042c4 <__sfp_lock_release>:
 80042c4:	4801      	ldr	r0, [pc, #4]	@ (80042cc <__sfp_lock_release+0x8>)
 80042c6:	f000 b909 	b.w	80044dc <__retarget_lock_release_recursive>
 80042ca:	bf00      	nop
 80042cc:	20000375 	.word	0x20000375

080042d0 <__sinit>:
 80042d0:	b510      	push	{r4, lr}
 80042d2:	4604      	mov	r4, r0
 80042d4:	f7ff fff0 	bl	80042b8 <__sfp_lock_acquire>
 80042d8:	6a23      	ldr	r3, [r4, #32]
 80042da:	b11b      	cbz	r3, 80042e4 <__sinit+0x14>
 80042dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042e0:	f7ff bff0 	b.w	80042c4 <__sfp_lock_release>
 80042e4:	4b04      	ldr	r3, [pc, #16]	@ (80042f8 <__sinit+0x28>)
 80042e6:	6223      	str	r3, [r4, #32]
 80042e8:	4b04      	ldr	r3, [pc, #16]	@ (80042fc <__sinit+0x2c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f5      	bne.n	80042dc <__sinit+0xc>
 80042f0:	f7ff ffc4 	bl	800427c <global_stdio_init.part.0>
 80042f4:	e7f2      	b.n	80042dc <__sinit+0xc>
 80042f6:	bf00      	nop
 80042f8:	0800423d 	.word	0x0800423d
 80042fc:	2000036c 	.word	0x2000036c

08004300 <_fwalk_sglue>:
 8004300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004304:	4607      	mov	r7, r0
 8004306:	4688      	mov	r8, r1
 8004308:	4614      	mov	r4, r2
 800430a:	2600      	movs	r6, #0
 800430c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004310:	f1b9 0901 	subs.w	r9, r9, #1
 8004314:	d505      	bpl.n	8004322 <_fwalk_sglue+0x22>
 8004316:	6824      	ldr	r4, [r4, #0]
 8004318:	2c00      	cmp	r4, #0
 800431a:	d1f7      	bne.n	800430c <_fwalk_sglue+0xc>
 800431c:	4630      	mov	r0, r6
 800431e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004322:	89ab      	ldrh	r3, [r5, #12]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d907      	bls.n	8004338 <_fwalk_sglue+0x38>
 8004328:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800432c:	3301      	adds	r3, #1
 800432e:	d003      	beq.n	8004338 <_fwalk_sglue+0x38>
 8004330:	4629      	mov	r1, r5
 8004332:	4638      	mov	r0, r7
 8004334:	47c0      	blx	r8
 8004336:	4306      	orrs	r6, r0
 8004338:	3568      	adds	r5, #104	@ 0x68
 800433a:	e7e9      	b.n	8004310 <_fwalk_sglue+0x10>

0800433c <iprintf>:
 800433c:	b40f      	push	{r0, r1, r2, r3}
 800433e:	b507      	push	{r0, r1, r2, lr}
 8004340:	4906      	ldr	r1, [pc, #24]	@ (800435c <iprintf+0x20>)
 8004342:	ab04      	add	r3, sp, #16
 8004344:	6808      	ldr	r0, [r1, #0]
 8004346:	f853 2b04 	ldr.w	r2, [r3], #4
 800434a:	6881      	ldr	r1, [r0, #8]
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	f000 f9e9 	bl	8004724 <_vfiprintf_r>
 8004352:	b003      	add	sp, #12
 8004354:	f85d eb04 	ldr.w	lr, [sp], #4
 8004358:	b004      	add	sp, #16
 800435a:	4770      	bx	lr
 800435c:	2000002c 	.word	0x2000002c

08004360 <__sread>:
 8004360:	b510      	push	{r4, lr}
 8004362:	460c      	mov	r4, r1
 8004364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004368:	f000 f868 	bl	800443c <_read_r>
 800436c:	2800      	cmp	r0, #0
 800436e:	bfab      	itete	ge
 8004370:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004372:	89a3      	ldrhlt	r3, [r4, #12]
 8004374:	181b      	addge	r3, r3, r0
 8004376:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800437a:	bfac      	ite	ge
 800437c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800437e:	81a3      	strhlt	r3, [r4, #12]
 8004380:	bd10      	pop	{r4, pc}

08004382 <__swrite>:
 8004382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004386:	461f      	mov	r7, r3
 8004388:	898b      	ldrh	r3, [r1, #12]
 800438a:	05db      	lsls	r3, r3, #23
 800438c:	4605      	mov	r5, r0
 800438e:	460c      	mov	r4, r1
 8004390:	4616      	mov	r6, r2
 8004392:	d505      	bpl.n	80043a0 <__swrite+0x1e>
 8004394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004398:	2302      	movs	r3, #2
 800439a:	2200      	movs	r2, #0
 800439c:	f000 f83c 	bl	8004418 <_lseek_r>
 80043a0:	89a3      	ldrh	r3, [r4, #12]
 80043a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043aa:	81a3      	strh	r3, [r4, #12]
 80043ac:	4632      	mov	r2, r6
 80043ae:	463b      	mov	r3, r7
 80043b0:	4628      	mov	r0, r5
 80043b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043b6:	f000 b853 	b.w	8004460 <_write_r>

080043ba <__sseek>:
 80043ba:	b510      	push	{r4, lr}
 80043bc:	460c      	mov	r4, r1
 80043be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c2:	f000 f829 	bl	8004418 <_lseek_r>
 80043c6:	1c43      	adds	r3, r0, #1
 80043c8:	89a3      	ldrh	r3, [r4, #12]
 80043ca:	bf15      	itete	ne
 80043cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043d6:	81a3      	strheq	r3, [r4, #12]
 80043d8:	bf18      	it	ne
 80043da:	81a3      	strhne	r3, [r4, #12]
 80043dc:	bd10      	pop	{r4, pc}

080043de <__sclose>:
 80043de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e2:	f000 b809 	b.w	80043f8 <_close_r>

080043e6 <memset>:
 80043e6:	4402      	add	r2, r0
 80043e8:	4603      	mov	r3, r0
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d100      	bne.n	80043f0 <memset+0xa>
 80043ee:	4770      	bx	lr
 80043f0:	f803 1b01 	strb.w	r1, [r3], #1
 80043f4:	e7f9      	b.n	80043ea <memset+0x4>
	...

080043f8 <_close_r>:
 80043f8:	b538      	push	{r3, r4, r5, lr}
 80043fa:	4d06      	ldr	r5, [pc, #24]	@ (8004414 <_close_r+0x1c>)
 80043fc:	2300      	movs	r3, #0
 80043fe:	4604      	mov	r4, r0
 8004400:	4608      	mov	r0, r1
 8004402:	602b      	str	r3, [r5, #0]
 8004404:	f7fc fc6d 	bl	8000ce2 <_close>
 8004408:	1c43      	adds	r3, r0, #1
 800440a:	d102      	bne.n	8004412 <_close_r+0x1a>
 800440c:	682b      	ldr	r3, [r5, #0]
 800440e:	b103      	cbz	r3, 8004412 <_close_r+0x1a>
 8004410:	6023      	str	r3, [r4, #0]
 8004412:	bd38      	pop	{r3, r4, r5, pc}
 8004414:	20000370 	.word	0x20000370

08004418 <_lseek_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4d07      	ldr	r5, [pc, #28]	@ (8004438 <_lseek_r+0x20>)
 800441c:	4604      	mov	r4, r0
 800441e:	4608      	mov	r0, r1
 8004420:	4611      	mov	r1, r2
 8004422:	2200      	movs	r2, #0
 8004424:	602a      	str	r2, [r5, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	f7fc fc82 	bl	8000d30 <_lseek>
 800442c:	1c43      	adds	r3, r0, #1
 800442e:	d102      	bne.n	8004436 <_lseek_r+0x1e>
 8004430:	682b      	ldr	r3, [r5, #0]
 8004432:	b103      	cbz	r3, 8004436 <_lseek_r+0x1e>
 8004434:	6023      	str	r3, [r4, #0]
 8004436:	bd38      	pop	{r3, r4, r5, pc}
 8004438:	20000370 	.word	0x20000370

0800443c <_read_r>:
 800443c:	b538      	push	{r3, r4, r5, lr}
 800443e:	4d07      	ldr	r5, [pc, #28]	@ (800445c <_read_r+0x20>)
 8004440:	4604      	mov	r4, r0
 8004442:	4608      	mov	r0, r1
 8004444:	4611      	mov	r1, r2
 8004446:	2200      	movs	r2, #0
 8004448:	602a      	str	r2, [r5, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	f7fc fc2c 	bl	8000ca8 <_read>
 8004450:	1c43      	adds	r3, r0, #1
 8004452:	d102      	bne.n	800445a <_read_r+0x1e>
 8004454:	682b      	ldr	r3, [r5, #0]
 8004456:	b103      	cbz	r3, 800445a <_read_r+0x1e>
 8004458:	6023      	str	r3, [r4, #0]
 800445a:	bd38      	pop	{r3, r4, r5, pc}
 800445c:	20000370 	.word	0x20000370

08004460 <_write_r>:
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	4d07      	ldr	r5, [pc, #28]	@ (8004480 <_write_r+0x20>)
 8004464:	4604      	mov	r4, r0
 8004466:	4608      	mov	r0, r1
 8004468:	4611      	mov	r1, r2
 800446a:	2200      	movs	r2, #0
 800446c:	602a      	str	r2, [r5, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	f7fc fa14 	bl	800089c <_write>
 8004474:	1c43      	adds	r3, r0, #1
 8004476:	d102      	bne.n	800447e <_write_r+0x1e>
 8004478:	682b      	ldr	r3, [r5, #0]
 800447a:	b103      	cbz	r3, 800447e <_write_r+0x1e>
 800447c:	6023      	str	r3, [r4, #0]
 800447e:	bd38      	pop	{r3, r4, r5, pc}
 8004480:	20000370 	.word	0x20000370

08004484 <__errno>:
 8004484:	4b01      	ldr	r3, [pc, #4]	@ (800448c <__errno+0x8>)
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	2000002c 	.word	0x2000002c

08004490 <__libc_init_array>:
 8004490:	b570      	push	{r4, r5, r6, lr}
 8004492:	4d0d      	ldr	r5, [pc, #52]	@ (80044c8 <__libc_init_array+0x38>)
 8004494:	4c0d      	ldr	r4, [pc, #52]	@ (80044cc <__libc_init_array+0x3c>)
 8004496:	1b64      	subs	r4, r4, r5
 8004498:	10a4      	asrs	r4, r4, #2
 800449a:	2600      	movs	r6, #0
 800449c:	42a6      	cmp	r6, r4
 800449e:	d109      	bne.n	80044b4 <__libc_init_array+0x24>
 80044a0:	4d0b      	ldr	r5, [pc, #44]	@ (80044d0 <__libc_init_array+0x40>)
 80044a2:	4c0c      	ldr	r4, [pc, #48]	@ (80044d4 <__libc_init_array+0x44>)
 80044a4:	f000 fdb8 	bl	8005018 <_init>
 80044a8:	1b64      	subs	r4, r4, r5
 80044aa:	10a4      	asrs	r4, r4, #2
 80044ac:	2600      	movs	r6, #0
 80044ae:	42a6      	cmp	r6, r4
 80044b0:	d105      	bne.n	80044be <__libc_init_array+0x2e>
 80044b2:	bd70      	pop	{r4, r5, r6, pc}
 80044b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b8:	4798      	blx	r3
 80044ba:	3601      	adds	r6, #1
 80044bc:	e7ee      	b.n	800449c <__libc_init_array+0xc>
 80044be:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c2:	4798      	blx	r3
 80044c4:	3601      	adds	r6, #1
 80044c6:	e7f2      	b.n	80044ae <__libc_init_array+0x1e>
 80044c8:	080050a0 	.word	0x080050a0
 80044cc:	080050a0 	.word	0x080050a0
 80044d0:	080050a0 	.word	0x080050a0
 80044d4:	080050a4 	.word	0x080050a4

080044d8 <__retarget_lock_init_recursive>:
 80044d8:	4770      	bx	lr

080044da <__retarget_lock_acquire_recursive>:
 80044da:	4770      	bx	lr

080044dc <__retarget_lock_release_recursive>:
 80044dc:	4770      	bx	lr
	...

080044e0 <_free_r>:
 80044e0:	b538      	push	{r3, r4, r5, lr}
 80044e2:	4605      	mov	r5, r0
 80044e4:	2900      	cmp	r1, #0
 80044e6:	d041      	beq.n	800456c <_free_r+0x8c>
 80044e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044ec:	1f0c      	subs	r4, r1, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	bfb8      	it	lt
 80044f2:	18e4      	addlt	r4, r4, r3
 80044f4:	f000 f8e0 	bl	80046b8 <__malloc_lock>
 80044f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004570 <_free_r+0x90>)
 80044fa:	6813      	ldr	r3, [r2, #0]
 80044fc:	b933      	cbnz	r3, 800450c <_free_r+0x2c>
 80044fe:	6063      	str	r3, [r4, #4]
 8004500:	6014      	str	r4, [r2, #0]
 8004502:	4628      	mov	r0, r5
 8004504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004508:	f000 b8dc 	b.w	80046c4 <__malloc_unlock>
 800450c:	42a3      	cmp	r3, r4
 800450e:	d908      	bls.n	8004522 <_free_r+0x42>
 8004510:	6820      	ldr	r0, [r4, #0]
 8004512:	1821      	adds	r1, r4, r0
 8004514:	428b      	cmp	r3, r1
 8004516:	bf01      	itttt	eq
 8004518:	6819      	ldreq	r1, [r3, #0]
 800451a:	685b      	ldreq	r3, [r3, #4]
 800451c:	1809      	addeq	r1, r1, r0
 800451e:	6021      	streq	r1, [r4, #0]
 8004520:	e7ed      	b.n	80044fe <_free_r+0x1e>
 8004522:	461a      	mov	r2, r3
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	b10b      	cbz	r3, 800452c <_free_r+0x4c>
 8004528:	42a3      	cmp	r3, r4
 800452a:	d9fa      	bls.n	8004522 <_free_r+0x42>
 800452c:	6811      	ldr	r1, [r2, #0]
 800452e:	1850      	adds	r0, r2, r1
 8004530:	42a0      	cmp	r0, r4
 8004532:	d10b      	bne.n	800454c <_free_r+0x6c>
 8004534:	6820      	ldr	r0, [r4, #0]
 8004536:	4401      	add	r1, r0
 8004538:	1850      	adds	r0, r2, r1
 800453a:	4283      	cmp	r3, r0
 800453c:	6011      	str	r1, [r2, #0]
 800453e:	d1e0      	bne.n	8004502 <_free_r+0x22>
 8004540:	6818      	ldr	r0, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	6053      	str	r3, [r2, #4]
 8004546:	4408      	add	r0, r1
 8004548:	6010      	str	r0, [r2, #0]
 800454a:	e7da      	b.n	8004502 <_free_r+0x22>
 800454c:	d902      	bls.n	8004554 <_free_r+0x74>
 800454e:	230c      	movs	r3, #12
 8004550:	602b      	str	r3, [r5, #0]
 8004552:	e7d6      	b.n	8004502 <_free_r+0x22>
 8004554:	6820      	ldr	r0, [r4, #0]
 8004556:	1821      	adds	r1, r4, r0
 8004558:	428b      	cmp	r3, r1
 800455a:	bf04      	itt	eq
 800455c:	6819      	ldreq	r1, [r3, #0]
 800455e:	685b      	ldreq	r3, [r3, #4]
 8004560:	6063      	str	r3, [r4, #4]
 8004562:	bf04      	itt	eq
 8004564:	1809      	addeq	r1, r1, r0
 8004566:	6021      	streq	r1, [r4, #0]
 8004568:	6054      	str	r4, [r2, #4]
 800456a:	e7ca      	b.n	8004502 <_free_r+0x22>
 800456c:	bd38      	pop	{r3, r4, r5, pc}
 800456e:	bf00      	nop
 8004570:	2000037c 	.word	0x2000037c

08004574 <sbrk_aligned>:
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	4e0f      	ldr	r6, [pc, #60]	@ (80045b4 <sbrk_aligned+0x40>)
 8004578:	460c      	mov	r4, r1
 800457a:	6831      	ldr	r1, [r6, #0]
 800457c:	4605      	mov	r5, r0
 800457e:	b911      	cbnz	r1, 8004586 <sbrk_aligned+0x12>
 8004580:	f000 fcb6 	bl	8004ef0 <_sbrk_r>
 8004584:	6030      	str	r0, [r6, #0]
 8004586:	4621      	mov	r1, r4
 8004588:	4628      	mov	r0, r5
 800458a:	f000 fcb1 	bl	8004ef0 <_sbrk_r>
 800458e:	1c43      	adds	r3, r0, #1
 8004590:	d103      	bne.n	800459a <sbrk_aligned+0x26>
 8004592:	f04f 34ff 	mov.w	r4, #4294967295
 8004596:	4620      	mov	r0, r4
 8004598:	bd70      	pop	{r4, r5, r6, pc}
 800459a:	1cc4      	adds	r4, r0, #3
 800459c:	f024 0403 	bic.w	r4, r4, #3
 80045a0:	42a0      	cmp	r0, r4
 80045a2:	d0f8      	beq.n	8004596 <sbrk_aligned+0x22>
 80045a4:	1a21      	subs	r1, r4, r0
 80045a6:	4628      	mov	r0, r5
 80045a8:	f000 fca2 	bl	8004ef0 <_sbrk_r>
 80045ac:	3001      	adds	r0, #1
 80045ae:	d1f2      	bne.n	8004596 <sbrk_aligned+0x22>
 80045b0:	e7ef      	b.n	8004592 <sbrk_aligned+0x1e>
 80045b2:	bf00      	nop
 80045b4:	20000378 	.word	0x20000378

080045b8 <_malloc_r>:
 80045b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045bc:	1ccd      	adds	r5, r1, #3
 80045be:	f025 0503 	bic.w	r5, r5, #3
 80045c2:	3508      	adds	r5, #8
 80045c4:	2d0c      	cmp	r5, #12
 80045c6:	bf38      	it	cc
 80045c8:	250c      	movcc	r5, #12
 80045ca:	2d00      	cmp	r5, #0
 80045cc:	4606      	mov	r6, r0
 80045ce:	db01      	blt.n	80045d4 <_malloc_r+0x1c>
 80045d0:	42a9      	cmp	r1, r5
 80045d2:	d904      	bls.n	80045de <_malloc_r+0x26>
 80045d4:	230c      	movs	r3, #12
 80045d6:	6033      	str	r3, [r6, #0]
 80045d8:	2000      	movs	r0, #0
 80045da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046b4 <_malloc_r+0xfc>
 80045e2:	f000 f869 	bl	80046b8 <__malloc_lock>
 80045e6:	f8d8 3000 	ldr.w	r3, [r8]
 80045ea:	461c      	mov	r4, r3
 80045ec:	bb44      	cbnz	r4, 8004640 <_malloc_r+0x88>
 80045ee:	4629      	mov	r1, r5
 80045f0:	4630      	mov	r0, r6
 80045f2:	f7ff ffbf 	bl	8004574 <sbrk_aligned>
 80045f6:	1c43      	adds	r3, r0, #1
 80045f8:	4604      	mov	r4, r0
 80045fa:	d158      	bne.n	80046ae <_malloc_r+0xf6>
 80045fc:	f8d8 4000 	ldr.w	r4, [r8]
 8004600:	4627      	mov	r7, r4
 8004602:	2f00      	cmp	r7, #0
 8004604:	d143      	bne.n	800468e <_malloc_r+0xd6>
 8004606:	2c00      	cmp	r4, #0
 8004608:	d04b      	beq.n	80046a2 <_malloc_r+0xea>
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	4639      	mov	r1, r7
 800460e:	4630      	mov	r0, r6
 8004610:	eb04 0903 	add.w	r9, r4, r3
 8004614:	f000 fc6c 	bl	8004ef0 <_sbrk_r>
 8004618:	4581      	cmp	r9, r0
 800461a:	d142      	bne.n	80046a2 <_malloc_r+0xea>
 800461c:	6821      	ldr	r1, [r4, #0]
 800461e:	1a6d      	subs	r5, r5, r1
 8004620:	4629      	mov	r1, r5
 8004622:	4630      	mov	r0, r6
 8004624:	f7ff ffa6 	bl	8004574 <sbrk_aligned>
 8004628:	3001      	adds	r0, #1
 800462a:	d03a      	beq.n	80046a2 <_malloc_r+0xea>
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	442b      	add	r3, r5
 8004630:	6023      	str	r3, [r4, #0]
 8004632:	f8d8 3000 	ldr.w	r3, [r8]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	bb62      	cbnz	r2, 8004694 <_malloc_r+0xdc>
 800463a:	f8c8 7000 	str.w	r7, [r8]
 800463e:	e00f      	b.n	8004660 <_malloc_r+0xa8>
 8004640:	6822      	ldr	r2, [r4, #0]
 8004642:	1b52      	subs	r2, r2, r5
 8004644:	d420      	bmi.n	8004688 <_malloc_r+0xd0>
 8004646:	2a0b      	cmp	r2, #11
 8004648:	d917      	bls.n	800467a <_malloc_r+0xc2>
 800464a:	1961      	adds	r1, r4, r5
 800464c:	42a3      	cmp	r3, r4
 800464e:	6025      	str	r5, [r4, #0]
 8004650:	bf18      	it	ne
 8004652:	6059      	strne	r1, [r3, #4]
 8004654:	6863      	ldr	r3, [r4, #4]
 8004656:	bf08      	it	eq
 8004658:	f8c8 1000 	streq.w	r1, [r8]
 800465c:	5162      	str	r2, [r4, r5]
 800465e:	604b      	str	r3, [r1, #4]
 8004660:	4630      	mov	r0, r6
 8004662:	f000 f82f 	bl	80046c4 <__malloc_unlock>
 8004666:	f104 000b 	add.w	r0, r4, #11
 800466a:	1d23      	adds	r3, r4, #4
 800466c:	f020 0007 	bic.w	r0, r0, #7
 8004670:	1ac2      	subs	r2, r0, r3
 8004672:	bf1c      	itt	ne
 8004674:	1a1b      	subne	r3, r3, r0
 8004676:	50a3      	strne	r3, [r4, r2]
 8004678:	e7af      	b.n	80045da <_malloc_r+0x22>
 800467a:	6862      	ldr	r2, [r4, #4]
 800467c:	42a3      	cmp	r3, r4
 800467e:	bf0c      	ite	eq
 8004680:	f8c8 2000 	streq.w	r2, [r8]
 8004684:	605a      	strne	r2, [r3, #4]
 8004686:	e7eb      	b.n	8004660 <_malloc_r+0xa8>
 8004688:	4623      	mov	r3, r4
 800468a:	6864      	ldr	r4, [r4, #4]
 800468c:	e7ae      	b.n	80045ec <_malloc_r+0x34>
 800468e:	463c      	mov	r4, r7
 8004690:	687f      	ldr	r7, [r7, #4]
 8004692:	e7b6      	b.n	8004602 <_malloc_r+0x4a>
 8004694:	461a      	mov	r2, r3
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	42a3      	cmp	r3, r4
 800469a:	d1fb      	bne.n	8004694 <_malloc_r+0xdc>
 800469c:	2300      	movs	r3, #0
 800469e:	6053      	str	r3, [r2, #4]
 80046a0:	e7de      	b.n	8004660 <_malloc_r+0xa8>
 80046a2:	230c      	movs	r3, #12
 80046a4:	6033      	str	r3, [r6, #0]
 80046a6:	4630      	mov	r0, r6
 80046a8:	f000 f80c 	bl	80046c4 <__malloc_unlock>
 80046ac:	e794      	b.n	80045d8 <_malloc_r+0x20>
 80046ae:	6005      	str	r5, [r0, #0]
 80046b0:	e7d6      	b.n	8004660 <_malloc_r+0xa8>
 80046b2:	bf00      	nop
 80046b4:	2000037c 	.word	0x2000037c

080046b8 <__malloc_lock>:
 80046b8:	4801      	ldr	r0, [pc, #4]	@ (80046c0 <__malloc_lock+0x8>)
 80046ba:	f7ff bf0e 	b.w	80044da <__retarget_lock_acquire_recursive>
 80046be:	bf00      	nop
 80046c0:	20000374 	.word	0x20000374

080046c4 <__malloc_unlock>:
 80046c4:	4801      	ldr	r0, [pc, #4]	@ (80046cc <__malloc_unlock+0x8>)
 80046c6:	f7ff bf09 	b.w	80044dc <__retarget_lock_release_recursive>
 80046ca:	bf00      	nop
 80046cc:	20000374 	.word	0x20000374

080046d0 <__sfputc_r>:
 80046d0:	6893      	ldr	r3, [r2, #8]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	b410      	push	{r4}
 80046d8:	6093      	str	r3, [r2, #8]
 80046da:	da08      	bge.n	80046ee <__sfputc_r+0x1e>
 80046dc:	6994      	ldr	r4, [r2, #24]
 80046de:	42a3      	cmp	r3, r4
 80046e0:	db01      	blt.n	80046e6 <__sfputc_r+0x16>
 80046e2:	290a      	cmp	r1, #10
 80046e4:	d103      	bne.n	80046ee <__sfputc_r+0x1e>
 80046e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046ea:	f000 bb6d 	b.w	8004dc8 <__swbuf_r>
 80046ee:	6813      	ldr	r3, [r2, #0]
 80046f0:	1c58      	adds	r0, r3, #1
 80046f2:	6010      	str	r0, [r2, #0]
 80046f4:	7019      	strb	r1, [r3, #0]
 80046f6:	4608      	mov	r0, r1
 80046f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <__sfputs_r>:
 80046fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004700:	4606      	mov	r6, r0
 8004702:	460f      	mov	r7, r1
 8004704:	4614      	mov	r4, r2
 8004706:	18d5      	adds	r5, r2, r3
 8004708:	42ac      	cmp	r4, r5
 800470a:	d101      	bne.n	8004710 <__sfputs_r+0x12>
 800470c:	2000      	movs	r0, #0
 800470e:	e007      	b.n	8004720 <__sfputs_r+0x22>
 8004710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004714:	463a      	mov	r2, r7
 8004716:	4630      	mov	r0, r6
 8004718:	f7ff ffda 	bl	80046d0 <__sfputc_r>
 800471c:	1c43      	adds	r3, r0, #1
 800471e:	d1f3      	bne.n	8004708 <__sfputs_r+0xa>
 8004720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004724 <_vfiprintf_r>:
 8004724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004728:	460d      	mov	r5, r1
 800472a:	b09d      	sub	sp, #116	@ 0x74
 800472c:	4614      	mov	r4, r2
 800472e:	4698      	mov	r8, r3
 8004730:	4606      	mov	r6, r0
 8004732:	b118      	cbz	r0, 800473c <_vfiprintf_r+0x18>
 8004734:	6a03      	ldr	r3, [r0, #32]
 8004736:	b90b      	cbnz	r3, 800473c <_vfiprintf_r+0x18>
 8004738:	f7ff fdca 	bl	80042d0 <__sinit>
 800473c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800473e:	07d9      	lsls	r1, r3, #31
 8004740:	d405      	bmi.n	800474e <_vfiprintf_r+0x2a>
 8004742:	89ab      	ldrh	r3, [r5, #12]
 8004744:	059a      	lsls	r2, r3, #22
 8004746:	d402      	bmi.n	800474e <_vfiprintf_r+0x2a>
 8004748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800474a:	f7ff fec6 	bl	80044da <__retarget_lock_acquire_recursive>
 800474e:	89ab      	ldrh	r3, [r5, #12]
 8004750:	071b      	lsls	r3, r3, #28
 8004752:	d501      	bpl.n	8004758 <_vfiprintf_r+0x34>
 8004754:	692b      	ldr	r3, [r5, #16]
 8004756:	b99b      	cbnz	r3, 8004780 <_vfiprintf_r+0x5c>
 8004758:	4629      	mov	r1, r5
 800475a:	4630      	mov	r0, r6
 800475c:	f000 fb72 	bl	8004e44 <__swsetup_r>
 8004760:	b170      	cbz	r0, 8004780 <_vfiprintf_r+0x5c>
 8004762:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004764:	07dc      	lsls	r4, r3, #31
 8004766:	d504      	bpl.n	8004772 <_vfiprintf_r+0x4e>
 8004768:	f04f 30ff 	mov.w	r0, #4294967295
 800476c:	b01d      	add	sp, #116	@ 0x74
 800476e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004772:	89ab      	ldrh	r3, [r5, #12]
 8004774:	0598      	lsls	r0, r3, #22
 8004776:	d4f7      	bmi.n	8004768 <_vfiprintf_r+0x44>
 8004778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800477a:	f7ff feaf 	bl	80044dc <__retarget_lock_release_recursive>
 800477e:	e7f3      	b.n	8004768 <_vfiprintf_r+0x44>
 8004780:	2300      	movs	r3, #0
 8004782:	9309      	str	r3, [sp, #36]	@ 0x24
 8004784:	2320      	movs	r3, #32
 8004786:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800478a:	f8cd 800c 	str.w	r8, [sp, #12]
 800478e:	2330      	movs	r3, #48	@ 0x30
 8004790:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004940 <_vfiprintf_r+0x21c>
 8004794:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004798:	f04f 0901 	mov.w	r9, #1
 800479c:	4623      	mov	r3, r4
 800479e:	469a      	mov	sl, r3
 80047a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047a4:	b10a      	cbz	r2, 80047aa <_vfiprintf_r+0x86>
 80047a6:	2a25      	cmp	r2, #37	@ 0x25
 80047a8:	d1f9      	bne.n	800479e <_vfiprintf_r+0x7a>
 80047aa:	ebba 0b04 	subs.w	fp, sl, r4
 80047ae:	d00b      	beq.n	80047c8 <_vfiprintf_r+0xa4>
 80047b0:	465b      	mov	r3, fp
 80047b2:	4622      	mov	r2, r4
 80047b4:	4629      	mov	r1, r5
 80047b6:	4630      	mov	r0, r6
 80047b8:	f7ff ffa1 	bl	80046fe <__sfputs_r>
 80047bc:	3001      	adds	r0, #1
 80047be:	f000 80a7 	beq.w	8004910 <_vfiprintf_r+0x1ec>
 80047c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047c4:	445a      	add	r2, fp
 80047c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80047c8:	f89a 3000 	ldrb.w	r3, [sl]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 809f 	beq.w	8004910 <_vfiprintf_r+0x1ec>
 80047d2:	2300      	movs	r3, #0
 80047d4:	f04f 32ff 	mov.w	r2, #4294967295
 80047d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047dc:	f10a 0a01 	add.w	sl, sl, #1
 80047e0:	9304      	str	r3, [sp, #16]
 80047e2:	9307      	str	r3, [sp, #28]
 80047e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80047ea:	4654      	mov	r4, sl
 80047ec:	2205      	movs	r2, #5
 80047ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047f2:	4853      	ldr	r0, [pc, #332]	@ (8004940 <_vfiprintf_r+0x21c>)
 80047f4:	f7fb fcec 	bl	80001d0 <memchr>
 80047f8:	9a04      	ldr	r2, [sp, #16]
 80047fa:	b9d8      	cbnz	r0, 8004834 <_vfiprintf_r+0x110>
 80047fc:	06d1      	lsls	r1, r2, #27
 80047fe:	bf44      	itt	mi
 8004800:	2320      	movmi	r3, #32
 8004802:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004806:	0713      	lsls	r3, r2, #28
 8004808:	bf44      	itt	mi
 800480a:	232b      	movmi	r3, #43	@ 0x2b
 800480c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004810:	f89a 3000 	ldrb.w	r3, [sl]
 8004814:	2b2a      	cmp	r3, #42	@ 0x2a
 8004816:	d015      	beq.n	8004844 <_vfiprintf_r+0x120>
 8004818:	9a07      	ldr	r2, [sp, #28]
 800481a:	4654      	mov	r4, sl
 800481c:	2000      	movs	r0, #0
 800481e:	f04f 0c0a 	mov.w	ip, #10
 8004822:	4621      	mov	r1, r4
 8004824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004828:	3b30      	subs	r3, #48	@ 0x30
 800482a:	2b09      	cmp	r3, #9
 800482c:	d94b      	bls.n	80048c6 <_vfiprintf_r+0x1a2>
 800482e:	b1b0      	cbz	r0, 800485e <_vfiprintf_r+0x13a>
 8004830:	9207      	str	r2, [sp, #28]
 8004832:	e014      	b.n	800485e <_vfiprintf_r+0x13a>
 8004834:	eba0 0308 	sub.w	r3, r0, r8
 8004838:	fa09 f303 	lsl.w	r3, r9, r3
 800483c:	4313      	orrs	r3, r2
 800483e:	9304      	str	r3, [sp, #16]
 8004840:	46a2      	mov	sl, r4
 8004842:	e7d2      	b.n	80047ea <_vfiprintf_r+0xc6>
 8004844:	9b03      	ldr	r3, [sp, #12]
 8004846:	1d19      	adds	r1, r3, #4
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	9103      	str	r1, [sp, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	bfbb      	ittet	lt
 8004850:	425b      	neglt	r3, r3
 8004852:	f042 0202 	orrlt.w	r2, r2, #2
 8004856:	9307      	strge	r3, [sp, #28]
 8004858:	9307      	strlt	r3, [sp, #28]
 800485a:	bfb8      	it	lt
 800485c:	9204      	strlt	r2, [sp, #16]
 800485e:	7823      	ldrb	r3, [r4, #0]
 8004860:	2b2e      	cmp	r3, #46	@ 0x2e
 8004862:	d10a      	bne.n	800487a <_vfiprintf_r+0x156>
 8004864:	7863      	ldrb	r3, [r4, #1]
 8004866:	2b2a      	cmp	r3, #42	@ 0x2a
 8004868:	d132      	bne.n	80048d0 <_vfiprintf_r+0x1ac>
 800486a:	9b03      	ldr	r3, [sp, #12]
 800486c:	1d1a      	adds	r2, r3, #4
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	9203      	str	r2, [sp, #12]
 8004872:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004876:	3402      	adds	r4, #2
 8004878:	9305      	str	r3, [sp, #20]
 800487a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004950 <_vfiprintf_r+0x22c>
 800487e:	7821      	ldrb	r1, [r4, #0]
 8004880:	2203      	movs	r2, #3
 8004882:	4650      	mov	r0, sl
 8004884:	f7fb fca4 	bl	80001d0 <memchr>
 8004888:	b138      	cbz	r0, 800489a <_vfiprintf_r+0x176>
 800488a:	9b04      	ldr	r3, [sp, #16]
 800488c:	eba0 000a 	sub.w	r0, r0, sl
 8004890:	2240      	movs	r2, #64	@ 0x40
 8004892:	4082      	lsls	r2, r0
 8004894:	4313      	orrs	r3, r2
 8004896:	3401      	adds	r4, #1
 8004898:	9304      	str	r3, [sp, #16]
 800489a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800489e:	4829      	ldr	r0, [pc, #164]	@ (8004944 <_vfiprintf_r+0x220>)
 80048a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048a4:	2206      	movs	r2, #6
 80048a6:	f7fb fc93 	bl	80001d0 <memchr>
 80048aa:	2800      	cmp	r0, #0
 80048ac:	d03f      	beq.n	800492e <_vfiprintf_r+0x20a>
 80048ae:	4b26      	ldr	r3, [pc, #152]	@ (8004948 <_vfiprintf_r+0x224>)
 80048b0:	bb1b      	cbnz	r3, 80048fa <_vfiprintf_r+0x1d6>
 80048b2:	9b03      	ldr	r3, [sp, #12]
 80048b4:	3307      	adds	r3, #7
 80048b6:	f023 0307 	bic.w	r3, r3, #7
 80048ba:	3308      	adds	r3, #8
 80048bc:	9303      	str	r3, [sp, #12]
 80048be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048c0:	443b      	add	r3, r7
 80048c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80048c4:	e76a      	b.n	800479c <_vfiprintf_r+0x78>
 80048c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80048ca:	460c      	mov	r4, r1
 80048cc:	2001      	movs	r0, #1
 80048ce:	e7a8      	b.n	8004822 <_vfiprintf_r+0xfe>
 80048d0:	2300      	movs	r3, #0
 80048d2:	3401      	adds	r4, #1
 80048d4:	9305      	str	r3, [sp, #20]
 80048d6:	4619      	mov	r1, r3
 80048d8:	f04f 0c0a 	mov.w	ip, #10
 80048dc:	4620      	mov	r0, r4
 80048de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048e2:	3a30      	subs	r2, #48	@ 0x30
 80048e4:	2a09      	cmp	r2, #9
 80048e6:	d903      	bls.n	80048f0 <_vfiprintf_r+0x1cc>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0c6      	beq.n	800487a <_vfiprintf_r+0x156>
 80048ec:	9105      	str	r1, [sp, #20]
 80048ee:	e7c4      	b.n	800487a <_vfiprintf_r+0x156>
 80048f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80048f4:	4604      	mov	r4, r0
 80048f6:	2301      	movs	r3, #1
 80048f8:	e7f0      	b.n	80048dc <_vfiprintf_r+0x1b8>
 80048fa:	ab03      	add	r3, sp, #12
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	462a      	mov	r2, r5
 8004900:	4b12      	ldr	r3, [pc, #72]	@ (800494c <_vfiprintf_r+0x228>)
 8004902:	a904      	add	r1, sp, #16
 8004904:	4630      	mov	r0, r6
 8004906:	f3af 8000 	nop.w
 800490a:	4607      	mov	r7, r0
 800490c:	1c78      	adds	r0, r7, #1
 800490e:	d1d6      	bne.n	80048be <_vfiprintf_r+0x19a>
 8004910:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004912:	07d9      	lsls	r1, r3, #31
 8004914:	d405      	bmi.n	8004922 <_vfiprintf_r+0x1fe>
 8004916:	89ab      	ldrh	r3, [r5, #12]
 8004918:	059a      	lsls	r2, r3, #22
 800491a:	d402      	bmi.n	8004922 <_vfiprintf_r+0x1fe>
 800491c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800491e:	f7ff fddd 	bl	80044dc <__retarget_lock_release_recursive>
 8004922:	89ab      	ldrh	r3, [r5, #12]
 8004924:	065b      	lsls	r3, r3, #25
 8004926:	f53f af1f 	bmi.w	8004768 <_vfiprintf_r+0x44>
 800492a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800492c:	e71e      	b.n	800476c <_vfiprintf_r+0x48>
 800492e:	ab03      	add	r3, sp, #12
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	462a      	mov	r2, r5
 8004934:	4b05      	ldr	r3, [pc, #20]	@ (800494c <_vfiprintf_r+0x228>)
 8004936:	a904      	add	r1, sp, #16
 8004938:	4630      	mov	r0, r6
 800493a:	f000 f879 	bl	8004a30 <_printf_i>
 800493e:	e7e4      	b.n	800490a <_vfiprintf_r+0x1e6>
 8004940:	08005064 	.word	0x08005064
 8004944:	0800506e 	.word	0x0800506e
 8004948:	00000000 	.word	0x00000000
 800494c:	080046ff 	.word	0x080046ff
 8004950:	0800506a 	.word	0x0800506a

08004954 <_printf_common>:
 8004954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004958:	4616      	mov	r6, r2
 800495a:	4698      	mov	r8, r3
 800495c:	688a      	ldr	r2, [r1, #8]
 800495e:	690b      	ldr	r3, [r1, #16]
 8004960:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004964:	4293      	cmp	r3, r2
 8004966:	bfb8      	it	lt
 8004968:	4613      	movlt	r3, r2
 800496a:	6033      	str	r3, [r6, #0]
 800496c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004970:	4607      	mov	r7, r0
 8004972:	460c      	mov	r4, r1
 8004974:	b10a      	cbz	r2, 800497a <_printf_common+0x26>
 8004976:	3301      	adds	r3, #1
 8004978:	6033      	str	r3, [r6, #0]
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	0699      	lsls	r1, r3, #26
 800497e:	bf42      	ittt	mi
 8004980:	6833      	ldrmi	r3, [r6, #0]
 8004982:	3302      	addmi	r3, #2
 8004984:	6033      	strmi	r3, [r6, #0]
 8004986:	6825      	ldr	r5, [r4, #0]
 8004988:	f015 0506 	ands.w	r5, r5, #6
 800498c:	d106      	bne.n	800499c <_printf_common+0x48>
 800498e:	f104 0a19 	add.w	sl, r4, #25
 8004992:	68e3      	ldr	r3, [r4, #12]
 8004994:	6832      	ldr	r2, [r6, #0]
 8004996:	1a9b      	subs	r3, r3, r2
 8004998:	42ab      	cmp	r3, r5
 800499a:	dc26      	bgt.n	80049ea <_printf_common+0x96>
 800499c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049a0:	6822      	ldr	r2, [r4, #0]
 80049a2:	3b00      	subs	r3, #0
 80049a4:	bf18      	it	ne
 80049a6:	2301      	movne	r3, #1
 80049a8:	0692      	lsls	r2, r2, #26
 80049aa:	d42b      	bmi.n	8004a04 <_printf_common+0xb0>
 80049ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049b0:	4641      	mov	r1, r8
 80049b2:	4638      	mov	r0, r7
 80049b4:	47c8      	blx	r9
 80049b6:	3001      	adds	r0, #1
 80049b8:	d01e      	beq.n	80049f8 <_printf_common+0xa4>
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	6922      	ldr	r2, [r4, #16]
 80049be:	f003 0306 	and.w	r3, r3, #6
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	bf02      	ittt	eq
 80049c6:	68e5      	ldreq	r5, [r4, #12]
 80049c8:	6833      	ldreq	r3, [r6, #0]
 80049ca:	1aed      	subeq	r5, r5, r3
 80049cc:	68a3      	ldr	r3, [r4, #8]
 80049ce:	bf0c      	ite	eq
 80049d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049d4:	2500      	movne	r5, #0
 80049d6:	4293      	cmp	r3, r2
 80049d8:	bfc4      	itt	gt
 80049da:	1a9b      	subgt	r3, r3, r2
 80049dc:	18ed      	addgt	r5, r5, r3
 80049de:	2600      	movs	r6, #0
 80049e0:	341a      	adds	r4, #26
 80049e2:	42b5      	cmp	r5, r6
 80049e4:	d11a      	bne.n	8004a1c <_printf_common+0xc8>
 80049e6:	2000      	movs	r0, #0
 80049e8:	e008      	b.n	80049fc <_printf_common+0xa8>
 80049ea:	2301      	movs	r3, #1
 80049ec:	4652      	mov	r2, sl
 80049ee:	4641      	mov	r1, r8
 80049f0:	4638      	mov	r0, r7
 80049f2:	47c8      	blx	r9
 80049f4:	3001      	adds	r0, #1
 80049f6:	d103      	bne.n	8004a00 <_printf_common+0xac>
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295
 80049fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a00:	3501      	adds	r5, #1
 8004a02:	e7c6      	b.n	8004992 <_printf_common+0x3e>
 8004a04:	18e1      	adds	r1, r4, r3
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	2030      	movs	r0, #48	@ 0x30
 8004a0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a0e:	4422      	add	r2, r4
 8004a10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a18:	3302      	adds	r3, #2
 8004a1a:	e7c7      	b.n	80049ac <_printf_common+0x58>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	4622      	mov	r2, r4
 8004a20:	4641      	mov	r1, r8
 8004a22:	4638      	mov	r0, r7
 8004a24:	47c8      	blx	r9
 8004a26:	3001      	adds	r0, #1
 8004a28:	d0e6      	beq.n	80049f8 <_printf_common+0xa4>
 8004a2a:	3601      	adds	r6, #1
 8004a2c:	e7d9      	b.n	80049e2 <_printf_common+0x8e>
	...

08004a30 <_printf_i>:
 8004a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a34:	7e0f      	ldrb	r7, [r1, #24]
 8004a36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a38:	2f78      	cmp	r7, #120	@ 0x78
 8004a3a:	4691      	mov	r9, r2
 8004a3c:	4680      	mov	r8, r0
 8004a3e:	460c      	mov	r4, r1
 8004a40:	469a      	mov	sl, r3
 8004a42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a46:	d807      	bhi.n	8004a58 <_printf_i+0x28>
 8004a48:	2f62      	cmp	r7, #98	@ 0x62
 8004a4a:	d80a      	bhi.n	8004a62 <_printf_i+0x32>
 8004a4c:	2f00      	cmp	r7, #0
 8004a4e:	f000 80d2 	beq.w	8004bf6 <_printf_i+0x1c6>
 8004a52:	2f58      	cmp	r7, #88	@ 0x58
 8004a54:	f000 80b9 	beq.w	8004bca <_printf_i+0x19a>
 8004a58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a60:	e03a      	b.n	8004ad8 <_printf_i+0xa8>
 8004a62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a66:	2b15      	cmp	r3, #21
 8004a68:	d8f6      	bhi.n	8004a58 <_printf_i+0x28>
 8004a6a:	a101      	add	r1, pc, #4	@ (adr r1, 8004a70 <_printf_i+0x40>)
 8004a6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a70:	08004ac9 	.word	0x08004ac9
 8004a74:	08004add 	.word	0x08004add
 8004a78:	08004a59 	.word	0x08004a59
 8004a7c:	08004a59 	.word	0x08004a59
 8004a80:	08004a59 	.word	0x08004a59
 8004a84:	08004a59 	.word	0x08004a59
 8004a88:	08004add 	.word	0x08004add
 8004a8c:	08004a59 	.word	0x08004a59
 8004a90:	08004a59 	.word	0x08004a59
 8004a94:	08004a59 	.word	0x08004a59
 8004a98:	08004a59 	.word	0x08004a59
 8004a9c:	08004bdd 	.word	0x08004bdd
 8004aa0:	08004b07 	.word	0x08004b07
 8004aa4:	08004b97 	.word	0x08004b97
 8004aa8:	08004a59 	.word	0x08004a59
 8004aac:	08004a59 	.word	0x08004a59
 8004ab0:	08004bff 	.word	0x08004bff
 8004ab4:	08004a59 	.word	0x08004a59
 8004ab8:	08004b07 	.word	0x08004b07
 8004abc:	08004a59 	.word	0x08004a59
 8004ac0:	08004a59 	.word	0x08004a59
 8004ac4:	08004b9f 	.word	0x08004b9f
 8004ac8:	6833      	ldr	r3, [r6, #0]
 8004aca:	1d1a      	adds	r2, r3, #4
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6032      	str	r2, [r6, #0]
 8004ad0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ad4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e09d      	b.n	8004c18 <_printf_i+0x1e8>
 8004adc:	6833      	ldr	r3, [r6, #0]
 8004ade:	6820      	ldr	r0, [r4, #0]
 8004ae0:	1d19      	adds	r1, r3, #4
 8004ae2:	6031      	str	r1, [r6, #0]
 8004ae4:	0606      	lsls	r6, r0, #24
 8004ae6:	d501      	bpl.n	8004aec <_printf_i+0xbc>
 8004ae8:	681d      	ldr	r5, [r3, #0]
 8004aea:	e003      	b.n	8004af4 <_printf_i+0xc4>
 8004aec:	0645      	lsls	r5, r0, #25
 8004aee:	d5fb      	bpl.n	8004ae8 <_printf_i+0xb8>
 8004af0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004af4:	2d00      	cmp	r5, #0
 8004af6:	da03      	bge.n	8004b00 <_printf_i+0xd0>
 8004af8:	232d      	movs	r3, #45	@ 0x2d
 8004afa:	426d      	negs	r5, r5
 8004afc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b00:	4859      	ldr	r0, [pc, #356]	@ (8004c68 <_printf_i+0x238>)
 8004b02:	230a      	movs	r3, #10
 8004b04:	e011      	b.n	8004b2a <_printf_i+0xfa>
 8004b06:	6821      	ldr	r1, [r4, #0]
 8004b08:	6833      	ldr	r3, [r6, #0]
 8004b0a:	0608      	lsls	r0, r1, #24
 8004b0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b10:	d402      	bmi.n	8004b18 <_printf_i+0xe8>
 8004b12:	0649      	lsls	r1, r1, #25
 8004b14:	bf48      	it	mi
 8004b16:	b2ad      	uxthmi	r5, r5
 8004b18:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b1a:	4853      	ldr	r0, [pc, #332]	@ (8004c68 <_printf_i+0x238>)
 8004b1c:	6033      	str	r3, [r6, #0]
 8004b1e:	bf14      	ite	ne
 8004b20:	230a      	movne	r3, #10
 8004b22:	2308      	moveq	r3, #8
 8004b24:	2100      	movs	r1, #0
 8004b26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b2a:	6866      	ldr	r6, [r4, #4]
 8004b2c:	60a6      	str	r6, [r4, #8]
 8004b2e:	2e00      	cmp	r6, #0
 8004b30:	bfa2      	ittt	ge
 8004b32:	6821      	ldrge	r1, [r4, #0]
 8004b34:	f021 0104 	bicge.w	r1, r1, #4
 8004b38:	6021      	strge	r1, [r4, #0]
 8004b3a:	b90d      	cbnz	r5, 8004b40 <_printf_i+0x110>
 8004b3c:	2e00      	cmp	r6, #0
 8004b3e:	d04b      	beq.n	8004bd8 <_printf_i+0x1a8>
 8004b40:	4616      	mov	r6, r2
 8004b42:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b46:	fb03 5711 	mls	r7, r3, r1, r5
 8004b4a:	5dc7      	ldrb	r7, [r0, r7]
 8004b4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b50:	462f      	mov	r7, r5
 8004b52:	42bb      	cmp	r3, r7
 8004b54:	460d      	mov	r5, r1
 8004b56:	d9f4      	bls.n	8004b42 <_printf_i+0x112>
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d10b      	bne.n	8004b74 <_printf_i+0x144>
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	07df      	lsls	r7, r3, #31
 8004b60:	d508      	bpl.n	8004b74 <_printf_i+0x144>
 8004b62:	6923      	ldr	r3, [r4, #16]
 8004b64:	6861      	ldr	r1, [r4, #4]
 8004b66:	4299      	cmp	r1, r3
 8004b68:	bfde      	ittt	le
 8004b6a:	2330      	movle	r3, #48	@ 0x30
 8004b6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b74:	1b92      	subs	r2, r2, r6
 8004b76:	6122      	str	r2, [r4, #16]
 8004b78:	f8cd a000 	str.w	sl, [sp]
 8004b7c:	464b      	mov	r3, r9
 8004b7e:	aa03      	add	r2, sp, #12
 8004b80:	4621      	mov	r1, r4
 8004b82:	4640      	mov	r0, r8
 8004b84:	f7ff fee6 	bl	8004954 <_printf_common>
 8004b88:	3001      	adds	r0, #1
 8004b8a:	d14a      	bne.n	8004c22 <_printf_i+0x1f2>
 8004b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b90:	b004      	add	sp, #16
 8004b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	f043 0320 	orr.w	r3, r3, #32
 8004b9c:	6023      	str	r3, [r4, #0]
 8004b9e:	4833      	ldr	r0, [pc, #204]	@ (8004c6c <_printf_i+0x23c>)
 8004ba0:	2778      	movs	r7, #120	@ 0x78
 8004ba2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	6831      	ldr	r1, [r6, #0]
 8004baa:	061f      	lsls	r7, r3, #24
 8004bac:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bb0:	d402      	bmi.n	8004bb8 <_printf_i+0x188>
 8004bb2:	065f      	lsls	r7, r3, #25
 8004bb4:	bf48      	it	mi
 8004bb6:	b2ad      	uxthmi	r5, r5
 8004bb8:	6031      	str	r1, [r6, #0]
 8004bba:	07d9      	lsls	r1, r3, #31
 8004bbc:	bf44      	itt	mi
 8004bbe:	f043 0320 	orrmi.w	r3, r3, #32
 8004bc2:	6023      	strmi	r3, [r4, #0]
 8004bc4:	b11d      	cbz	r5, 8004bce <_printf_i+0x19e>
 8004bc6:	2310      	movs	r3, #16
 8004bc8:	e7ac      	b.n	8004b24 <_printf_i+0xf4>
 8004bca:	4827      	ldr	r0, [pc, #156]	@ (8004c68 <_printf_i+0x238>)
 8004bcc:	e7e9      	b.n	8004ba2 <_printf_i+0x172>
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	f023 0320 	bic.w	r3, r3, #32
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	e7f6      	b.n	8004bc6 <_printf_i+0x196>
 8004bd8:	4616      	mov	r6, r2
 8004bda:	e7bd      	b.n	8004b58 <_printf_i+0x128>
 8004bdc:	6833      	ldr	r3, [r6, #0]
 8004bde:	6825      	ldr	r5, [r4, #0]
 8004be0:	6961      	ldr	r1, [r4, #20]
 8004be2:	1d18      	adds	r0, r3, #4
 8004be4:	6030      	str	r0, [r6, #0]
 8004be6:	062e      	lsls	r6, r5, #24
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	d501      	bpl.n	8004bf0 <_printf_i+0x1c0>
 8004bec:	6019      	str	r1, [r3, #0]
 8004bee:	e002      	b.n	8004bf6 <_printf_i+0x1c6>
 8004bf0:	0668      	lsls	r0, r5, #25
 8004bf2:	d5fb      	bpl.n	8004bec <_printf_i+0x1bc>
 8004bf4:	8019      	strh	r1, [r3, #0]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	6123      	str	r3, [r4, #16]
 8004bfa:	4616      	mov	r6, r2
 8004bfc:	e7bc      	b.n	8004b78 <_printf_i+0x148>
 8004bfe:	6833      	ldr	r3, [r6, #0]
 8004c00:	1d1a      	adds	r2, r3, #4
 8004c02:	6032      	str	r2, [r6, #0]
 8004c04:	681e      	ldr	r6, [r3, #0]
 8004c06:	6862      	ldr	r2, [r4, #4]
 8004c08:	2100      	movs	r1, #0
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f7fb fae0 	bl	80001d0 <memchr>
 8004c10:	b108      	cbz	r0, 8004c16 <_printf_i+0x1e6>
 8004c12:	1b80      	subs	r0, r0, r6
 8004c14:	6060      	str	r0, [r4, #4]
 8004c16:	6863      	ldr	r3, [r4, #4]
 8004c18:	6123      	str	r3, [r4, #16]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c20:	e7aa      	b.n	8004b78 <_printf_i+0x148>
 8004c22:	6923      	ldr	r3, [r4, #16]
 8004c24:	4632      	mov	r2, r6
 8004c26:	4649      	mov	r1, r9
 8004c28:	4640      	mov	r0, r8
 8004c2a:	47d0      	blx	sl
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	d0ad      	beq.n	8004b8c <_printf_i+0x15c>
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	079b      	lsls	r3, r3, #30
 8004c34:	d413      	bmi.n	8004c5e <_printf_i+0x22e>
 8004c36:	68e0      	ldr	r0, [r4, #12]
 8004c38:	9b03      	ldr	r3, [sp, #12]
 8004c3a:	4298      	cmp	r0, r3
 8004c3c:	bfb8      	it	lt
 8004c3e:	4618      	movlt	r0, r3
 8004c40:	e7a6      	b.n	8004b90 <_printf_i+0x160>
 8004c42:	2301      	movs	r3, #1
 8004c44:	4632      	mov	r2, r6
 8004c46:	4649      	mov	r1, r9
 8004c48:	4640      	mov	r0, r8
 8004c4a:	47d0      	blx	sl
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d09d      	beq.n	8004b8c <_printf_i+0x15c>
 8004c50:	3501      	adds	r5, #1
 8004c52:	68e3      	ldr	r3, [r4, #12]
 8004c54:	9903      	ldr	r1, [sp, #12]
 8004c56:	1a5b      	subs	r3, r3, r1
 8004c58:	42ab      	cmp	r3, r5
 8004c5a:	dcf2      	bgt.n	8004c42 <_printf_i+0x212>
 8004c5c:	e7eb      	b.n	8004c36 <_printf_i+0x206>
 8004c5e:	2500      	movs	r5, #0
 8004c60:	f104 0619 	add.w	r6, r4, #25
 8004c64:	e7f5      	b.n	8004c52 <_printf_i+0x222>
 8004c66:	bf00      	nop
 8004c68:	08005075 	.word	0x08005075
 8004c6c:	08005086 	.word	0x08005086

08004c70 <__sflush_r>:
 8004c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c78:	0716      	lsls	r6, r2, #28
 8004c7a:	4605      	mov	r5, r0
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	d454      	bmi.n	8004d2a <__sflush_r+0xba>
 8004c80:	684b      	ldr	r3, [r1, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	dc02      	bgt.n	8004c8c <__sflush_r+0x1c>
 8004c86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	dd48      	ble.n	8004d1e <__sflush_r+0xae>
 8004c8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c8e:	2e00      	cmp	r6, #0
 8004c90:	d045      	beq.n	8004d1e <__sflush_r+0xae>
 8004c92:	2300      	movs	r3, #0
 8004c94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c98:	682f      	ldr	r7, [r5, #0]
 8004c9a:	6a21      	ldr	r1, [r4, #32]
 8004c9c:	602b      	str	r3, [r5, #0]
 8004c9e:	d030      	beq.n	8004d02 <__sflush_r+0x92>
 8004ca0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	0759      	lsls	r1, r3, #29
 8004ca6:	d505      	bpl.n	8004cb4 <__sflush_r+0x44>
 8004ca8:	6863      	ldr	r3, [r4, #4]
 8004caa:	1ad2      	subs	r2, r2, r3
 8004cac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004cae:	b10b      	cbz	r3, 8004cb4 <__sflush_r+0x44>
 8004cb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cb2:	1ad2      	subs	r2, r2, r3
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004cb8:	6a21      	ldr	r1, [r4, #32]
 8004cba:	4628      	mov	r0, r5
 8004cbc:	47b0      	blx	r6
 8004cbe:	1c43      	adds	r3, r0, #1
 8004cc0:	89a3      	ldrh	r3, [r4, #12]
 8004cc2:	d106      	bne.n	8004cd2 <__sflush_r+0x62>
 8004cc4:	6829      	ldr	r1, [r5, #0]
 8004cc6:	291d      	cmp	r1, #29
 8004cc8:	d82b      	bhi.n	8004d22 <__sflush_r+0xb2>
 8004cca:	4a2a      	ldr	r2, [pc, #168]	@ (8004d74 <__sflush_r+0x104>)
 8004ccc:	410a      	asrs	r2, r1
 8004cce:	07d6      	lsls	r6, r2, #31
 8004cd0:	d427      	bmi.n	8004d22 <__sflush_r+0xb2>
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	6062      	str	r2, [r4, #4]
 8004cd6:	04d9      	lsls	r1, r3, #19
 8004cd8:	6922      	ldr	r2, [r4, #16]
 8004cda:	6022      	str	r2, [r4, #0]
 8004cdc:	d504      	bpl.n	8004ce8 <__sflush_r+0x78>
 8004cde:	1c42      	adds	r2, r0, #1
 8004ce0:	d101      	bne.n	8004ce6 <__sflush_r+0x76>
 8004ce2:	682b      	ldr	r3, [r5, #0]
 8004ce4:	b903      	cbnz	r3, 8004ce8 <__sflush_r+0x78>
 8004ce6:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cea:	602f      	str	r7, [r5, #0]
 8004cec:	b1b9      	cbz	r1, 8004d1e <__sflush_r+0xae>
 8004cee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cf2:	4299      	cmp	r1, r3
 8004cf4:	d002      	beq.n	8004cfc <__sflush_r+0x8c>
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	f7ff fbf2 	bl	80044e0 <_free_r>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d00:	e00d      	b.n	8004d1e <__sflush_r+0xae>
 8004d02:	2301      	movs	r3, #1
 8004d04:	4628      	mov	r0, r5
 8004d06:	47b0      	blx	r6
 8004d08:	4602      	mov	r2, r0
 8004d0a:	1c50      	adds	r0, r2, #1
 8004d0c:	d1c9      	bne.n	8004ca2 <__sflush_r+0x32>
 8004d0e:	682b      	ldr	r3, [r5, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0c6      	beq.n	8004ca2 <__sflush_r+0x32>
 8004d14:	2b1d      	cmp	r3, #29
 8004d16:	d001      	beq.n	8004d1c <__sflush_r+0xac>
 8004d18:	2b16      	cmp	r3, #22
 8004d1a:	d11e      	bne.n	8004d5a <__sflush_r+0xea>
 8004d1c:	602f      	str	r7, [r5, #0]
 8004d1e:	2000      	movs	r0, #0
 8004d20:	e022      	b.n	8004d68 <__sflush_r+0xf8>
 8004d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d26:	b21b      	sxth	r3, r3
 8004d28:	e01b      	b.n	8004d62 <__sflush_r+0xf2>
 8004d2a:	690f      	ldr	r7, [r1, #16]
 8004d2c:	2f00      	cmp	r7, #0
 8004d2e:	d0f6      	beq.n	8004d1e <__sflush_r+0xae>
 8004d30:	0793      	lsls	r3, r2, #30
 8004d32:	680e      	ldr	r6, [r1, #0]
 8004d34:	bf08      	it	eq
 8004d36:	694b      	ldreq	r3, [r1, #20]
 8004d38:	600f      	str	r7, [r1, #0]
 8004d3a:	bf18      	it	ne
 8004d3c:	2300      	movne	r3, #0
 8004d3e:	eba6 0807 	sub.w	r8, r6, r7
 8004d42:	608b      	str	r3, [r1, #8]
 8004d44:	f1b8 0f00 	cmp.w	r8, #0
 8004d48:	dde9      	ble.n	8004d1e <__sflush_r+0xae>
 8004d4a:	6a21      	ldr	r1, [r4, #32]
 8004d4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004d4e:	4643      	mov	r3, r8
 8004d50:	463a      	mov	r2, r7
 8004d52:	4628      	mov	r0, r5
 8004d54:	47b0      	blx	r6
 8004d56:	2800      	cmp	r0, #0
 8004d58:	dc08      	bgt.n	8004d6c <__sflush_r+0xfc>
 8004d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d62:	81a3      	strh	r3, [r4, #12]
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295
 8004d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d6c:	4407      	add	r7, r0
 8004d6e:	eba8 0800 	sub.w	r8, r8, r0
 8004d72:	e7e7      	b.n	8004d44 <__sflush_r+0xd4>
 8004d74:	dfbffffe 	.word	0xdfbffffe

08004d78 <_fflush_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	690b      	ldr	r3, [r1, #16]
 8004d7c:	4605      	mov	r5, r0
 8004d7e:	460c      	mov	r4, r1
 8004d80:	b913      	cbnz	r3, 8004d88 <_fflush_r+0x10>
 8004d82:	2500      	movs	r5, #0
 8004d84:	4628      	mov	r0, r5
 8004d86:	bd38      	pop	{r3, r4, r5, pc}
 8004d88:	b118      	cbz	r0, 8004d92 <_fflush_r+0x1a>
 8004d8a:	6a03      	ldr	r3, [r0, #32]
 8004d8c:	b90b      	cbnz	r3, 8004d92 <_fflush_r+0x1a>
 8004d8e:	f7ff fa9f 	bl	80042d0 <__sinit>
 8004d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f3      	beq.n	8004d82 <_fflush_r+0xa>
 8004d9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d9c:	07d0      	lsls	r0, r2, #31
 8004d9e:	d404      	bmi.n	8004daa <_fflush_r+0x32>
 8004da0:	0599      	lsls	r1, r3, #22
 8004da2:	d402      	bmi.n	8004daa <_fflush_r+0x32>
 8004da4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004da6:	f7ff fb98 	bl	80044da <__retarget_lock_acquire_recursive>
 8004daa:	4628      	mov	r0, r5
 8004dac:	4621      	mov	r1, r4
 8004dae:	f7ff ff5f 	bl	8004c70 <__sflush_r>
 8004db2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004db4:	07da      	lsls	r2, r3, #31
 8004db6:	4605      	mov	r5, r0
 8004db8:	d4e4      	bmi.n	8004d84 <_fflush_r+0xc>
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	059b      	lsls	r3, r3, #22
 8004dbe:	d4e1      	bmi.n	8004d84 <_fflush_r+0xc>
 8004dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dc2:	f7ff fb8b 	bl	80044dc <__retarget_lock_release_recursive>
 8004dc6:	e7dd      	b.n	8004d84 <_fflush_r+0xc>

08004dc8 <__swbuf_r>:
 8004dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dca:	460e      	mov	r6, r1
 8004dcc:	4614      	mov	r4, r2
 8004dce:	4605      	mov	r5, r0
 8004dd0:	b118      	cbz	r0, 8004dda <__swbuf_r+0x12>
 8004dd2:	6a03      	ldr	r3, [r0, #32]
 8004dd4:	b90b      	cbnz	r3, 8004dda <__swbuf_r+0x12>
 8004dd6:	f7ff fa7b 	bl	80042d0 <__sinit>
 8004dda:	69a3      	ldr	r3, [r4, #24]
 8004ddc:	60a3      	str	r3, [r4, #8]
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	071a      	lsls	r2, r3, #28
 8004de2:	d501      	bpl.n	8004de8 <__swbuf_r+0x20>
 8004de4:	6923      	ldr	r3, [r4, #16]
 8004de6:	b943      	cbnz	r3, 8004dfa <__swbuf_r+0x32>
 8004de8:	4621      	mov	r1, r4
 8004dea:	4628      	mov	r0, r5
 8004dec:	f000 f82a 	bl	8004e44 <__swsetup_r>
 8004df0:	b118      	cbz	r0, 8004dfa <__swbuf_r+0x32>
 8004df2:	f04f 37ff 	mov.w	r7, #4294967295
 8004df6:	4638      	mov	r0, r7
 8004df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	6922      	ldr	r2, [r4, #16]
 8004dfe:	1a98      	subs	r0, r3, r2
 8004e00:	6963      	ldr	r3, [r4, #20]
 8004e02:	b2f6      	uxtb	r6, r6
 8004e04:	4283      	cmp	r3, r0
 8004e06:	4637      	mov	r7, r6
 8004e08:	dc05      	bgt.n	8004e16 <__swbuf_r+0x4e>
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f7ff ffb3 	bl	8004d78 <_fflush_r>
 8004e12:	2800      	cmp	r0, #0
 8004e14:	d1ed      	bne.n	8004df2 <__swbuf_r+0x2a>
 8004e16:	68a3      	ldr	r3, [r4, #8]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	60a3      	str	r3, [r4, #8]
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	6022      	str	r2, [r4, #0]
 8004e22:	701e      	strb	r6, [r3, #0]
 8004e24:	6962      	ldr	r2, [r4, #20]
 8004e26:	1c43      	adds	r3, r0, #1
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d004      	beq.n	8004e36 <__swbuf_r+0x6e>
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	07db      	lsls	r3, r3, #31
 8004e30:	d5e1      	bpl.n	8004df6 <__swbuf_r+0x2e>
 8004e32:	2e0a      	cmp	r6, #10
 8004e34:	d1df      	bne.n	8004df6 <__swbuf_r+0x2e>
 8004e36:	4621      	mov	r1, r4
 8004e38:	4628      	mov	r0, r5
 8004e3a:	f7ff ff9d 	bl	8004d78 <_fflush_r>
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	d0d9      	beq.n	8004df6 <__swbuf_r+0x2e>
 8004e42:	e7d6      	b.n	8004df2 <__swbuf_r+0x2a>

08004e44 <__swsetup_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4b29      	ldr	r3, [pc, #164]	@ (8004eec <__swsetup_r+0xa8>)
 8004e48:	4605      	mov	r5, r0
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	b118      	cbz	r0, 8004e58 <__swsetup_r+0x14>
 8004e50:	6a03      	ldr	r3, [r0, #32]
 8004e52:	b90b      	cbnz	r3, 8004e58 <__swsetup_r+0x14>
 8004e54:	f7ff fa3c 	bl	80042d0 <__sinit>
 8004e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e5c:	0719      	lsls	r1, r3, #28
 8004e5e:	d422      	bmi.n	8004ea6 <__swsetup_r+0x62>
 8004e60:	06da      	lsls	r2, r3, #27
 8004e62:	d407      	bmi.n	8004e74 <__swsetup_r+0x30>
 8004e64:	2209      	movs	r2, #9
 8004e66:	602a      	str	r2, [r5, #0]
 8004e68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e6c:	81a3      	strh	r3, [r4, #12]
 8004e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e72:	e033      	b.n	8004edc <__swsetup_r+0x98>
 8004e74:	0758      	lsls	r0, r3, #29
 8004e76:	d512      	bpl.n	8004e9e <__swsetup_r+0x5a>
 8004e78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e7a:	b141      	cbz	r1, 8004e8e <__swsetup_r+0x4a>
 8004e7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e80:	4299      	cmp	r1, r3
 8004e82:	d002      	beq.n	8004e8a <__swsetup_r+0x46>
 8004e84:	4628      	mov	r0, r5
 8004e86:	f7ff fb2b 	bl	80044e0 <_free_r>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e8e:	89a3      	ldrh	r3, [r4, #12]
 8004e90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e94:	81a3      	strh	r3, [r4, #12]
 8004e96:	2300      	movs	r3, #0
 8004e98:	6063      	str	r3, [r4, #4]
 8004e9a:	6923      	ldr	r3, [r4, #16]
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	89a3      	ldrh	r3, [r4, #12]
 8004ea0:	f043 0308 	orr.w	r3, r3, #8
 8004ea4:	81a3      	strh	r3, [r4, #12]
 8004ea6:	6923      	ldr	r3, [r4, #16]
 8004ea8:	b94b      	cbnz	r3, 8004ebe <__swsetup_r+0x7a>
 8004eaa:	89a3      	ldrh	r3, [r4, #12]
 8004eac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eb4:	d003      	beq.n	8004ebe <__swsetup_r+0x7a>
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	4628      	mov	r0, r5
 8004eba:	f000 f84f 	bl	8004f5c <__smakebuf_r>
 8004ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ec2:	f013 0201 	ands.w	r2, r3, #1
 8004ec6:	d00a      	beq.n	8004ede <__swsetup_r+0x9a>
 8004ec8:	2200      	movs	r2, #0
 8004eca:	60a2      	str	r2, [r4, #8]
 8004ecc:	6962      	ldr	r2, [r4, #20]
 8004ece:	4252      	negs	r2, r2
 8004ed0:	61a2      	str	r2, [r4, #24]
 8004ed2:	6922      	ldr	r2, [r4, #16]
 8004ed4:	b942      	cbnz	r2, 8004ee8 <__swsetup_r+0xa4>
 8004ed6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004eda:	d1c5      	bne.n	8004e68 <__swsetup_r+0x24>
 8004edc:	bd38      	pop	{r3, r4, r5, pc}
 8004ede:	0799      	lsls	r1, r3, #30
 8004ee0:	bf58      	it	pl
 8004ee2:	6962      	ldrpl	r2, [r4, #20]
 8004ee4:	60a2      	str	r2, [r4, #8]
 8004ee6:	e7f4      	b.n	8004ed2 <__swsetup_r+0x8e>
 8004ee8:	2000      	movs	r0, #0
 8004eea:	e7f7      	b.n	8004edc <__swsetup_r+0x98>
 8004eec:	2000002c 	.word	0x2000002c

08004ef0 <_sbrk_r>:
 8004ef0:	b538      	push	{r3, r4, r5, lr}
 8004ef2:	4d06      	ldr	r5, [pc, #24]	@ (8004f0c <_sbrk_r+0x1c>)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	4608      	mov	r0, r1
 8004efa:	602b      	str	r3, [r5, #0]
 8004efc:	f7fb ff26 	bl	8000d4c <_sbrk>
 8004f00:	1c43      	adds	r3, r0, #1
 8004f02:	d102      	bne.n	8004f0a <_sbrk_r+0x1a>
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	b103      	cbz	r3, 8004f0a <_sbrk_r+0x1a>
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	bd38      	pop	{r3, r4, r5, pc}
 8004f0c:	20000370 	.word	0x20000370

08004f10 <__swhatbuf_r>:
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	460c      	mov	r4, r1
 8004f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f18:	2900      	cmp	r1, #0
 8004f1a:	b096      	sub	sp, #88	@ 0x58
 8004f1c:	4615      	mov	r5, r2
 8004f1e:	461e      	mov	r6, r3
 8004f20:	da0d      	bge.n	8004f3e <__swhatbuf_r+0x2e>
 8004f22:	89a3      	ldrh	r3, [r4, #12]
 8004f24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f28:	f04f 0100 	mov.w	r1, #0
 8004f2c:	bf14      	ite	ne
 8004f2e:	2340      	movne	r3, #64	@ 0x40
 8004f30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f34:	2000      	movs	r0, #0
 8004f36:	6031      	str	r1, [r6, #0]
 8004f38:	602b      	str	r3, [r5, #0]
 8004f3a:	b016      	add	sp, #88	@ 0x58
 8004f3c:	bd70      	pop	{r4, r5, r6, pc}
 8004f3e:	466a      	mov	r2, sp
 8004f40:	f000 f848 	bl	8004fd4 <_fstat_r>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	dbec      	blt.n	8004f22 <__swhatbuf_r+0x12>
 8004f48:	9901      	ldr	r1, [sp, #4]
 8004f4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004f4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004f52:	4259      	negs	r1, r3
 8004f54:	4159      	adcs	r1, r3
 8004f56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f5a:	e7eb      	b.n	8004f34 <__swhatbuf_r+0x24>

08004f5c <__smakebuf_r>:
 8004f5c:	898b      	ldrh	r3, [r1, #12]
 8004f5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f60:	079d      	lsls	r5, r3, #30
 8004f62:	4606      	mov	r6, r0
 8004f64:	460c      	mov	r4, r1
 8004f66:	d507      	bpl.n	8004f78 <__smakebuf_r+0x1c>
 8004f68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	6123      	str	r3, [r4, #16]
 8004f70:	2301      	movs	r3, #1
 8004f72:	6163      	str	r3, [r4, #20]
 8004f74:	b003      	add	sp, #12
 8004f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f78:	ab01      	add	r3, sp, #4
 8004f7a:	466a      	mov	r2, sp
 8004f7c:	f7ff ffc8 	bl	8004f10 <__swhatbuf_r>
 8004f80:	9f00      	ldr	r7, [sp, #0]
 8004f82:	4605      	mov	r5, r0
 8004f84:	4639      	mov	r1, r7
 8004f86:	4630      	mov	r0, r6
 8004f88:	f7ff fb16 	bl	80045b8 <_malloc_r>
 8004f8c:	b948      	cbnz	r0, 8004fa2 <__smakebuf_r+0x46>
 8004f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f92:	059a      	lsls	r2, r3, #22
 8004f94:	d4ee      	bmi.n	8004f74 <__smakebuf_r+0x18>
 8004f96:	f023 0303 	bic.w	r3, r3, #3
 8004f9a:	f043 0302 	orr.w	r3, r3, #2
 8004f9e:	81a3      	strh	r3, [r4, #12]
 8004fa0:	e7e2      	b.n	8004f68 <__smakebuf_r+0xc>
 8004fa2:	89a3      	ldrh	r3, [r4, #12]
 8004fa4:	6020      	str	r0, [r4, #0]
 8004fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004faa:	81a3      	strh	r3, [r4, #12]
 8004fac:	9b01      	ldr	r3, [sp, #4]
 8004fae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004fb2:	b15b      	cbz	r3, 8004fcc <__smakebuf_r+0x70>
 8004fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fb8:	4630      	mov	r0, r6
 8004fba:	f000 f81d 	bl	8004ff8 <_isatty_r>
 8004fbe:	b128      	cbz	r0, 8004fcc <__smakebuf_r+0x70>
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	f023 0303 	bic.w	r3, r3, #3
 8004fc6:	f043 0301 	orr.w	r3, r3, #1
 8004fca:	81a3      	strh	r3, [r4, #12]
 8004fcc:	89a3      	ldrh	r3, [r4, #12]
 8004fce:	431d      	orrs	r5, r3
 8004fd0:	81a5      	strh	r5, [r4, #12]
 8004fd2:	e7cf      	b.n	8004f74 <__smakebuf_r+0x18>

08004fd4 <_fstat_r>:
 8004fd4:	b538      	push	{r3, r4, r5, lr}
 8004fd6:	4d07      	ldr	r5, [pc, #28]	@ (8004ff4 <_fstat_r+0x20>)
 8004fd8:	2300      	movs	r3, #0
 8004fda:	4604      	mov	r4, r0
 8004fdc:	4608      	mov	r0, r1
 8004fde:	4611      	mov	r1, r2
 8004fe0:	602b      	str	r3, [r5, #0]
 8004fe2:	f7fb fe8a 	bl	8000cfa <_fstat>
 8004fe6:	1c43      	adds	r3, r0, #1
 8004fe8:	d102      	bne.n	8004ff0 <_fstat_r+0x1c>
 8004fea:	682b      	ldr	r3, [r5, #0]
 8004fec:	b103      	cbz	r3, 8004ff0 <_fstat_r+0x1c>
 8004fee:	6023      	str	r3, [r4, #0]
 8004ff0:	bd38      	pop	{r3, r4, r5, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000370 	.word	0x20000370

08004ff8 <_isatty_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	4d06      	ldr	r5, [pc, #24]	@ (8005014 <_isatty_r+0x1c>)
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	4604      	mov	r4, r0
 8005000:	4608      	mov	r0, r1
 8005002:	602b      	str	r3, [r5, #0]
 8005004:	f7fb fe89 	bl	8000d1a <_isatty>
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	d102      	bne.n	8005012 <_isatty_r+0x1a>
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	b103      	cbz	r3, 8005012 <_isatty_r+0x1a>
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	bd38      	pop	{r3, r4, r5, pc}
 8005014:	20000370 	.word	0x20000370

08005018 <_init>:
 8005018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501a:	bf00      	nop
 800501c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501e:	bc08      	pop	{r3}
 8005020:	469e      	mov	lr, r3
 8005022:	4770      	bx	lr

08005024 <_fini>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	bf00      	nop
 8005028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502a:	bc08      	pop	{r3}
 800502c:	469e      	mov	lr, r3
 800502e:	4770      	bx	lr
