
STM32_EQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c68  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08009df8  08009df8  0000adf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a334  0800a334  0000c1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a334  0800a334  0000b334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a33c  0800a33c  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a33c  0800a33c  0000b33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a340  0800a340  0000b340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800a344  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1e8  2**0
                  CONTENTS
 10 .bss          00000340  200001e8  200001e8  0000c1e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000528  20000528  0000c1e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b559  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000209b  00000000  00000000  00017771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  00019810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000752  00000000  00000000  0001a1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fa9f  00000000  00000000  0001a902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cf28  00000000  00000000  0003a3a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb9cd  00000000  00000000  000472c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00102c96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e08  00000000  00000000  00102cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00106ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009de0 	.word	0x08009de0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009de0 	.word	0x08009de0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ff0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d013      	beq.n	8001024 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ffc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001000:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001004:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00b      	beq.n	8001024 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800100c:	e000      	b.n	8001010 <ITM_SendChar+0x2c>
    {
      __NOP();
 800100e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001010:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f9      	beq.n	800100e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800101a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f000 fd64 	bl	8001b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f826 	bl	800108c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f000 f910 	bl	8001264 <MX_GPIO_Init>
  MX_DMA_Init();
 8001044:	f000 f8e6 	bl	8001214 <MX_DMA_Init>
  MX_I2S2_Init();
 8001048:	f000 f88a 	bl	8001160 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800104c:	f000 f8b8 	bl	80011c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  
  HAL_UART_Transmit(&huart1, tx_buffer, sizeof(tx_buffer), 10);
 8001050:	230a      	movs	r3, #10
 8001052:	2211      	movs	r2, #17
 8001054:	4909      	ldr	r1, [pc, #36]	@ (800107c <main+0x48>)
 8001056:	480a      	ldr	r0, [pc, #40]	@ (8001080 <main+0x4c>)
 8001058:	f002 ff12 	bl	8003e80 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 800105c:	2244      	movs	r2, #68	@ 0x44
 800105e:	4909      	ldr	r1, [pc, #36]	@ (8001084 <main+0x50>)
 8001060:	4807      	ldr	r0, [pc, #28]	@ (8001080 <main+0x4c>)
 8001062:	f002 ff98 	bl	8003f96 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001066:	2104      	movs	r1, #4
 8001068:	4807      	ldr	r0, [pc, #28]	@ (8001088 <main+0x54>)
 800106a:	f001 fc24 	bl	80028b6 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 800106e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001072:	f000 fdb9 	bl	8001be8 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001076:	bf00      	nop
 8001078:	e7f5      	b.n	8001066 <main+0x32>
 800107a:	bf00      	nop
 800107c:	20000000 	.word	0x20000000
 8001080:	2000030c 	.word	0x2000030c
 8001084:	20000354 	.word	0x20000354
 8001088:	40020400 	.word	0x40020400

0800108c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b094      	sub	sp, #80	@ 0x50
 8001090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	2230      	movs	r2, #48	@ 0x30
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f004 fec5 	bl	8005e2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	4b28      	ldr	r3, [pc, #160]	@ (8001158 <SystemClock_Config+0xcc>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b8:	4a27      	ldr	r2, [pc, #156]	@ (8001158 <SystemClock_Config+0xcc>)
 80010ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010be:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c0:	4b25      	ldr	r3, [pc, #148]	@ (8001158 <SystemClock_Config+0xcc>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	4b22      	ldr	r3, [pc, #136]	@ (800115c <SystemClock_Config+0xd0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a21      	ldr	r2, [pc, #132]	@ (800115c <SystemClock_Config+0xd0>)
 80010d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <SystemClock_Config+0xd0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e8:	2301      	movs	r3, #1
 80010ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f2:	2302      	movs	r3, #2
 80010f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010fc:	2308      	movs	r3, #8
 80010fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001100:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001104:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001106:	2302      	movs	r3, #2
 8001108:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800110a:	2304      	movs	r3, #4
 800110c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110e:	f107 0320 	add.w	r3, r7, #32
 8001112:	4618      	mov	r0, r3
 8001114:	f002 f88a 	bl	800322c <HAL_RCC_OscConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800111e:	f000 fa43 	bl	80015a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001122:	230f      	movs	r3, #15
 8001124:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001126:	2302      	movs	r3, #2
 8001128:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800112e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001132:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001134:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001138:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	2105      	movs	r1, #5
 8001140:	4618      	mov	r0, r3
 8001142:	f002 faeb 	bl	800371c <HAL_RCC_ClockConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800114c:	f000 fa2c 	bl	80015a8 <Error_Handler>
  }
}
 8001150:	bf00      	nop
 8001152:	3750      	adds	r7, #80	@ 0x50
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001164:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <MX_I2S2_Init+0x54>)
 8001166:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <MX_I2S2_Init+0x58>)
 8001168:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_I2S2_Init+0x54>)
 800116c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001170:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <MX_I2S2_Init+0x54>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_I2S2_Init+0x54>)
 800117a:	2203      	movs	r2, #3
 800117c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800117e:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <MX_I2S2_Init+0x54>)
 8001180:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001184:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001186:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <MX_I2S2_Init+0x54>)
 8001188:	4a0c      	ldr	r2, [pc, #48]	@ (80011bc <MX_I2S2_Init+0x5c>)
 800118a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_I2S2_Init+0x54>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <MX_I2S2_Init+0x54>)
 8001194:	2200      	movs	r2, #0
 8001196:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_I2S2_Init+0x54>)
 800119a:	2201      	movs	r2, #1
 800119c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <MX_I2S2_Init+0x54>)
 80011a0:	f001 fba4 	bl	80028ec <HAL_I2S_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80011aa:	f000 f9fd 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000204 	.word	0x20000204
 80011b8:	40003800 	.word	0x40003800
 80011bc:	00017700 	.word	0x00017700

080011c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_USART1_UART_Init+0x4c>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	@ (8001210 <MX_USART1_UART_Init+0x50>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <MX_USART1_UART_Init+0x4c>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_USART1_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_USART1_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <MX_USART1_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_USART1_UART_Init+0x4c>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <MX_USART1_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_USART1_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_USART1_UART_Init+0x4c>)
 80011f8:	f002 fdf2 	bl	8003de0 <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001202:	f000 f9d1 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000030c 	.word	0x2000030c
 8001210:	40011000 	.word	0x40011000

08001214 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <MX_DMA_Init+0x4c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a0f      	ldr	r2, [pc, #60]	@ (8001260 <MX_DMA_Init+0x4c>)
 8001224:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <MX_DMA_Init+0x4c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	200e      	movs	r0, #14
 800123c:	f000 fdd3 	bl	8001de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001240:	200e      	movs	r0, #14
 8001242:	f000 fdec 	bl	8001e1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	200f      	movs	r0, #15
 800124c:	f000 fdcb 	bl	8001de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001250:	200f      	movs	r0, #15
 8001252:	f000 fde4 	bl	8001e1e <HAL_NVIC_EnableIRQ>

}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800

08001264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b26      	ldr	r3, [pc, #152]	@ (8001318 <MX_GPIO_Init+0xb4>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a25      	ldr	r2, [pc, #148]	@ (8001318 <MX_GPIO_Init+0xb4>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b23      	ldr	r3, [pc, #140]	@ (8001318 <MX_GPIO_Init+0xb4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <MX_GPIO_Init+0xb4>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a1e      	ldr	r2, [pc, #120]	@ (8001318 <MX_GPIO_Init+0xb4>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <MX_GPIO_Init+0xb4>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <MX_GPIO_Init+0xb4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a17      	ldr	r2, [pc, #92]	@ (8001318 <MX_GPIO_Init+0xb4>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <MX_GPIO_Init+0xb4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <MX_GPIO_Init+0xb4>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a10      	ldr	r2, [pc, #64]	@ (8001318 <MX_GPIO_Init+0xb4>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <MX_GPIO_Init+0xb4>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2104      	movs	r1, #4
 80012ee:	480b      	ldr	r0, [pc, #44]	@ (800131c <MX_GPIO_Init+0xb8>)
 80012f0:	f001 fac8 	bl	8002884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012f4:	2304      	movs	r3, #4
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4804      	ldr	r0, [pc, #16]	@ (800131c <MX_GPIO_Init+0xb8>)
 800130c:	f001 f91e 	bl	800254c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	@ 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	40020400 	.word	0x40020400

08001320 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e009      	b.n	8001346 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	60ba      	str	r2, [r7, #8]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fe52 	bl	8000fe4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3301      	adds	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	429a      	cmp	r2, r3
 800134c:	dbf1      	blt.n	8001332 <_write+0x12>
  }
  return len;
 800134e:	687b      	ldr	r3, [r7, #4]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  // HAL_UART_Transmit(&huart1, rx_buffer, sizeof(rx_buffer), 10); // Echo the received data
  printf("Received UART: %s\n", rx_buffer); // Print the received data to serial
 8001360:	490a      	ldr	r1, [pc, #40]	@ (800138c <HAL_UART_RxCpltCallback+0x34>)
 8001362:	480b      	ldr	r0, [pc, #44]	@ (8001390 <HAL_UART_RxCpltCallback+0x38>)
 8001364:	f004 fcc0 	bl	8005ce8 <iprintf>
  parseAndStoreCoeffs(rx_buffer); // Parse the received data and store the coefficients
 8001368:	4808      	ldr	r0, [pc, #32]	@ (800138c <HAL_UART_RxCpltCallback+0x34>)
 800136a:	f000 f815 	bl	8001398 <parseAndStoreCoeffs>
  memset(rx_buffer, 0, sizeof(rx_buffer)); // Clear the buffer
 800136e:	2244      	movs	r2, #68	@ 0x44
 8001370:	2100      	movs	r1, #0
 8001372:	4806      	ldr	r0, [pc, #24]	@ (800138c <HAL_UART_RxCpltCallback+0x34>)
 8001374:	f004 fd59 	bl	8005e2a <memset>
  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer)); // Start the next receive
 8001378:	2244      	movs	r2, #68	@ 0x44
 800137a:	4904      	ldr	r1, [pc, #16]	@ (800138c <HAL_UART_RxCpltCallback+0x34>)
 800137c:	4805      	ldr	r0, [pc, #20]	@ (8001394 <HAL_UART_RxCpltCallback+0x3c>)
 800137e:	f002 fe0a 	bl	8003f96 <HAL_UART_Receive_IT>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000354 	.word	0x20000354
 8001390:	08009df8 	.word	0x08009df8
 8001394:	2000030c 	.word	0x2000030c

08001398 <parseAndStoreCoeffs>:

void parseAndStoreCoeffs(char *rx_buffer) {
 8001398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800139c:	b08c      	sub	sp, #48	@ 0x30
 800139e:	af08      	add	r7, sp, #32
 80013a0:	60f8      	str	r0, [r7, #12]
    // Determine which band the coefficients are for
    if (strncmp(rx_buffer, "Low", 3) == 0) {
 80013a2:	2203      	movs	r2, #3
 80013a4:	4968      	ldr	r1, [pc, #416]	@ (8001548 <parseAndStoreCoeffs+0x1b0>)
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f004 fd47 	bl	8005e3a <strncmp>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d13c      	bne.n	800142c <parseAndStoreCoeffs+0x94>
        sscanf(rx_buffer, "Low %f %f %f %f %f %f", 
 80013b2:	4b66      	ldr	r3, [pc, #408]	@ (800154c <parseAndStoreCoeffs+0x1b4>)
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	4b66      	ldr	r3, [pc, #408]	@ (8001550 <parseAndStoreCoeffs+0x1b8>)
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	4b66      	ldr	r3, [pc, #408]	@ (8001554 <parseAndStoreCoeffs+0x1bc>)
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	4b66      	ldr	r3, [pc, #408]	@ (8001558 <parseAndStoreCoeffs+0x1c0>)
 80013c0:	4a66      	ldr	r2, [pc, #408]	@ (800155c <parseAndStoreCoeffs+0x1c4>)
 80013c2:	4967      	ldr	r1, [pc, #412]	@ (8001560 <parseAndStoreCoeffs+0x1c8>)
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f004 fcc1 	bl	8005d4c <siscanf>
               &lowBandCoeffs.a0, &lowBandCoeffs.a1, &lowBandCoeffs.a2, 
               &lowBandCoeffs.b1, &lowBandCoeffs.b2);
        printf("Parsed Low: %f %f %f %f %f\n", 
               lowBandCoeffs.a0, lowBandCoeffs.a1, lowBandCoeffs.a2, 
 80013ca:	4b64      	ldr	r3, [pc, #400]	@ (800155c <parseAndStoreCoeffs+0x1c4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
        printf("Parsed Low: %f %f %f %f %f\n", 
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8ba 	bl	8000548 <__aeabi_f2d>
 80013d4:	e9c7 0100 	strd	r0, r1, [r7]
               lowBandCoeffs.a0, lowBandCoeffs.a1, lowBandCoeffs.a2, 
 80013d8:	4b60      	ldr	r3, [pc, #384]	@ (800155c <parseAndStoreCoeffs+0x1c4>)
 80013da:	685b      	ldr	r3, [r3, #4]
        printf("Parsed Low: %f %f %f %f %f\n", 
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8b3 	bl	8000548 <__aeabi_f2d>
 80013e2:	4604      	mov	r4, r0
 80013e4:	460d      	mov	r5, r1
               lowBandCoeffs.a0, lowBandCoeffs.a1, lowBandCoeffs.a2, 
 80013e6:	4b5d      	ldr	r3, [pc, #372]	@ (800155c <parseAndStoreCoeffs+0x1c4>)
 80013e8:	689b      	ldr	r3, [r3, #8]
        printf("Parsed Low: %f %f %f %f %f\n", 
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f8ac 	bl	8000548 <__aeabi_f2d>
 80013f0:	4680      	mov	r8, r0
 80013f2:	4689      	mov	r9, r1
               lowBandCoeffs.b1, lowBandCoeffs.b2);
 80013f4:	4b59      	ldr	r3, [pc, #356]	@ (800155c <parseAndStoreCoeffs+0x1c4>)
 80013f6:	68db      	ldr	r3, [r3, #12]
        printf("Parsed Low: %f %f %f %f %f\n", 
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f8a5 	bl	8000548 <__aeabi_f2d>
 80013fe:	4682      	mov	sl, r0
 8001400:	468b      	mov	fp, r1
               lowBandCoeffs.b1, lowBandCoeffs.b2);
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <parseAndStoreCoeffs+0x1c4>)
 8001404:	691b      	ldr	r3, [r3, #16]
        printf("Parsed Low: %f %f %f %f %f\n", 
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f89e 	bl	8000548 <__aeabi_f2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001414:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001418:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800141c:	e9cd 4500 	strd	r4, r5, [sp]
 8001420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001424:	484f      	ldr	r0, [pc, #316]	@ (8001564 <parseAndStoreCoeffs+0x1cc>)
 8001426:	f004 fc5f 	bl	8005ce8 <iprintf>
               &highBandCoeffs.b1, &highBandCoeffs.b2);
        printf("Parsed High: %f %f %f %f %f\n",
                highBandCoeffs.a0, highBandCoeffs.a1, highBandCoeffs.a2, 
                highBandCoeffs.b1, highBandCoeffs.b2);
    }
}
 800142a:	e088      	b.n	800153e <parseAndStoreCoeffs+0x1a6>
    } else if (strncmp(rx_buffer, "Mid", 3) == 0) {
 800142c:	2203      	movs	r2, #3
 800142e:	494e      	ldr	r1, [pc, #312]	@ (8001568 <parseAndStoreCoeffs+0x1d0>)
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f004 fd02 	bl	8005e3a <strncmp>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d13c      	bne.n	80014b6 <parseAndStoreCoeffs+0x11e>
        sscanf(rx_buffer, "Mid %f %f %f %f %f %f", 
 800143c:	4b4b      	ldr	r3, [pc, #300]	@ (800156c <parseAndStoreCoeffs+0x1d4>)
 800143e:	9302      	str	r3, [sp, #8]
 8001440:	4b4b      	ldr	r3, [pc, #300]	@ (8001570 <parseAndStoreCoeffs+0x1d8>)
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	4b4b      	ldr	r3, [pc, #300]	@ (8001574 <parseAndStoreCoeffs+0x1dc>)
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	4b4b      	ldr	r3, [pc, #300]	@ (8001578 <parseAndStoreCoeffs+0x1e0>)
 800144a:	4a4c      	ldr	r2, [pc, #304]	@ (800157c <parseAndStoreCoeffs+0x1e4>)
 800144c:	494c      	ldr	r1, [pc, #304]	@ (8001580 <parseAndStoreCoeffs+0x1e8>)
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f004 fc7c 	bl	8005d4c <siscanf>
                midBandCoeffs.a0, midBandCoeffs.a1, midBandCoeffs.a2, 
 8001454:	4b49      	ldr	r3, [pc, #292]	@ (800157c <parseAndStoreCoeffs+0x1e4>)
 8001456:	681b      	ldr	r3, [r3, #0]
        printf("Parsed Mid: %f %f %f %f %f\n",
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f875 	bl	8000548 <__aeabi_f2d>
 800145e:	e9c7 0100 	strd	r0, r1, [r7]
                midBandCoeffs.a0, midBandCoeffs.a1, midBandCoeffs.a2, 
 8001462:	4b46      	ldr	r3, [pc, #280]	@ (800157c <parseAndStoreCoeffs+0x1e4>)
 8001464:	685b      	ldr	r3, [r3, #4]
        printf("Parsed Mid: %f %f %f %f %f\n",
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f86e 	bl	8000548 <__aeabi_f2d>
 800146c:	4604      	mov	r4, r0
 800146e:	460d      	mov	r5, r1
                midBandCoeffs.a0, midBandCoeffs.a1, midBandCoeffs.a2, 
 8001470:	4b42      	ldr	r3, [pc, #264]	@ (800157c <parseAndStoreCoeffs+0x1e4>)
 8001472:	689b      	ldr	r3, [r3, #8]
        printf("Parsed Mid: %f %f %f %f %f\n",
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f867 	bl	8000548 <__aeabi_f2d>
 800147a:	4680      	mov	r8, r0
 800147c:	4689      	mov	r9, r1
                midBandCoeffs.b1, midBandCoeffs.b2);
 800147e:	4b3f      	ldr	r3, [pc, #252]	@ (800157c <parseAndStoreCoeffs+0x1e4>)
 8001480:	68db      	ldr	r3, [r3, #12]
        printf("Parsed Mid: %f %f %f %f %f\n",
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f860 	bl	8000548 <__aeabi_f2d>
 8001488:	4682      	mov	sl, r0
 800148a:	468b      	mov	fp, r1
                midBandCoeffs.b1, midBandCoeffs.b2);
 800148c:	4b3b      	ldr	r3, [pc, #236]	@ (800157c <parseAndStoreCoeffs+0x1e4>)
 800148e:	691b      	ldr	r3, [r3, #16]
        printf("Parsed Mid: %f %f %f %f %f\n",
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f859 	bl	8000548 <__aeabi_f2d>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800149e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80014a2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80014a6:	e9cd 4500 	strd	r4, r5, [sp]
 80014aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014ae:	4835      	ldr	r0, [pc, #212]	@ (8001584 <parseAndStoreCoeffs+0x1ec>)
 80014b0:	f004 fc1a 	bl	8005ce8 <iprintf>
}
 80014b4:	e043      	b.n	800153e <parseAndStoreCoeffs+0x1a6>
    } else if (strncmp(rx_buffer, "High", 4) == 0) {
 80014b6:	2204      	movs	r2, #4
 80014b8:	4933      	ldr	r1, [pc, #204]	@ (8001588 <parseAndStoreCoeffs+0x1f0>)
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f004 fcbd 	bl	8005e3a <strncmp>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d13b      	bne.n	800153e <parseAndStoreCoeffs+0x1a6>
        sscanf(rx_buffer, "High %f %f %f %f %f %f", 
 80014c6:	4b31      	ldr	r3, [pc, #196]	@ (800158c <parseAndStoreCoeffs+0x1f4>)
 80014c8:	9302      	str	r3, [sp, #8]
 80014ca:	4b31      	ldr	r3, [pc, #196]	@ (8001590 <parseAndStoreCoeffs+0x1f8>)
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	4b31      	ldr	r3, [pc, #196]	@ (8001594 <parseAndStoreCoeffs+0x1fc>)
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	4b31      	ldr	r3, [pc, #196]	@ (8001598 <parseAndStoreCoeffs+0x200>)
 80014d4:	4a31      	ldr	r2, [pc, #196]	@ (800159c <parseAndStoreCoeffs+0x204>)
 80014d6:	4932      	ldr	r1, [pc, #200]	@ (80015a0 <parseAndStoreCoeffs+0x208>)
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f004 fc37 	bl	8005d4c <siscanf>
                highBandCoeffs.a0, highBandCoeffs.a1, highBandCoeffs.a2, 
 80014de:	4b2f      	ldr	r3, [pc, #188]	@ (800159c <parseAndStoreCoeffs+0x204>)
 80014e0:	681b      	ldr	r3, [r3, #0]
        printf("Parsed High: %f %f %f %f %f\n",
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f830 	bl	8000548 <__aeabi_f2d>
 80014e8:	e9c7 0100 	strd	r0, r1, [r7]
                highBandCoeffs.a0, highBandCoeffs.a1, highBandCoeffs.a2, 
 80014ec:	4b2b      	ldr	r3, [pc, #172]	@ (800159c <parseAndStoreCoeffs+0x204>)
 80014ee:	685b      	ldr	r3, [r3, #4]
        printf("Parsed High: %f %f %f %f %f\n",
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f829 	bl	8000548 <__aeabi_f2d>
 80014f6:	4604      	mov	r4, r0
 80014f8:	460d      	mov	r5, r1
                highBandCoeffs.a0, highBandCoeffs.a1, highBandCoeffs.a2, 
 80014fa:	4b28      	ldr	r3, [pc, #160]	@ (800159c <parseAndStoreCoeffs+0x204>)
 80014fc:	689b      	ldr	r3, [r3, #8]
        printf("Parsed High: %f %f %f %f %f\n",
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f822 	bl	8000548 <__aeabi_f2d>
 8001504:	4680      	mov	r8, r0
 8001506:	4689      	mov	r9, r1
                highBandCoeffs.b1, highBandCoeffs.b2);
 8001508:	4b24      	ldr	r3, [pc, #144]	@ (800159c <parseAndStoreCoeffs+0x204>)
 800150a:	68db      	ldr	r3, [r3, #12]
        printf("Parsed High: %f %f %f %f %f\n",
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f81b 	bl	8000548 <__aeabi_f2d>
 8001512:	4682      	mov	sl, r0
 8001514:	468b      	mov	fp, r1
                highBandCoeffs.b1, highBandCoeffs.b2);
 8001516:	4b21      	ldr	r3, [pc, #132]	@ (800159c <parseAndStoreCoeffs+0x204>)
 8001518:	691b      	ldr	r3, [r3, #16]
        printf("Parsed High: %f %f %f %f %f\n",
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff f814 	bl	8000548 <__aeabi_f2d>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001528:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800152c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001530:	e9cd 4500 	strd	r4, r5, [sp]
 8001534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001538:	481a      	ldr	r0, [pc, #104]	@ (80015a4 <parseAndStoreCoeffs+0x20c>)
 800153a:	f004 fbd5 	bl	8005ce8 <iprintf>
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001548:	08009e0c 	.word	0x08009e0c
 800154c:	200003a8 	.word	0x200003a8
 8001550:	200003a4 	.word	0x200003a4
 8001554:	200003a0 	.word	0x200003a0
 8001558:	2000039c 	.word	0x2000039c
 800155c:	20000398 	.word	0x20000398
 8001560:	08009e10 	.word	0x08009e10
 8001564:	08009e28 	.word	0x08009e28
 8001568:	08009e44 	.word	0x08009e44
 800156c:	200003bc 	.word	0x200003bc
 8001570:	200003b8 	.word	0x200003b8
 8001574:	200003b4 	.word	0x200003b4
 8001578:	200003b0 	.word	0x200003b0
 800157c:	200003ac 	.word	0x200003ac
 8001580:	08009e48 	.word	0x08009e48
 8001584:	08009e60 	.word	0x08009e60
 8001588:	08009e7c 	.word	0x08009e7c
 800158c:	200003d0 	.word	0x200003d0
 8001590:	200003cc 	.word	0x200003cc
 8001594:	200003c8 	.word	0x200003c8
 8001598:	200003c4 	.word	0x200003c4
 800159c:	200003c0 	.word	0x200003c0
 80015a0:	08009e84 	.word	0x08009e84
 80015a4:	08009e9c 	.word	0x08009e9c

080015a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ac:	b672      	cpsid	i
}
 80015ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <Error_Handler+0x8>

080015b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <HAL_MspInit+0x4c>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001600 <HAL_MspInit+0x4c>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001600 <HAL_MspInit+0x4c>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <HAL_MspInit+0x4c>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	4a08      	ldr	r2, [pc, #32]	@ (8001600 <HAL_MspInit+0x4c>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e6:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <HAL_MspInit+0x4c>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800

08001604 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08e      	sub	sp, #56	@ 0x38
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6b      	ldr	r2, [pc, #428]	@ (80017dc <HAL_I2S_MspInit+0x1d8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	f040 80cf 	bne.w	80017d4 <HAL_I2S_MspInit+0x1d0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001636:	2301      	movs	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800163a:	23c0      	movs	r3, #192	@ 0xc0
 800163c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800163e:	2302      	movs	r3, #2
 8001640:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4618      	mov	r0, r3
 8001648:	f002 fa88 	bl	8003b5c <HAL_RCCEx_PeriphCLKConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001652:	f7ff ffa9 	bl	80015a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b61      	ldr	r3, [pc, #388]	@ (80017e0 <HAL_I2S_MspInit+0x1dc>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	4a60      	ldr	r2, [pc, #384]	@ (80017e0 <HAL_I2S_MspInit+0x1dc>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001664:	6413      	str	r3, [r2, #64]	@ 0x40
 8001666:	4b5e      	ldr	r3, [pc, #376]	@ (80017e0 <HAL_I2S_MspInit+0x1dc>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b5a      	ldr	r3, [pc, #360]	@ (80017e0 <HAL_I2S_MspInit+0x1dc>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a59      	ldr	r2, [pc, #356]	@ (80017e0 <HAL_I2S_MspInit+0x1dc>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b57      	ldr	r3, [pc, #348]	@ (80017e0 <HAL_I2S_MspInit+0x1dc>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	4b53      	ldr	r3, [pc, #332]	@ (80017e0 <HAL_I2S_MspInit+0x1dc>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a52      	ldr	r2, [pc, #328]	@ (80017e0 <HAL_I2S_MspInit+0x1dc>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b50      	ldr	r3, [pc, #320]	@ (80017e0 <HAL_I2S_MspInit+0x1dc>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80016aa:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016bc:	2305      	movs	r3, #5
 80016be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c4:	4619      	mov	r1, r3
 80016c6:	4847      	ldr	r0, [pc, #284]	@ (80017e4 <HAL_I2S_MspInit+0x1e0>)
 80016c8:	f000 ff40 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80016de:	2306      	movs	r3, #6
 80016e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016e6:	4619      	mov	r1, r3
 80016e8:	483e      	ldr	r0, [pc, #248]	@ (80017e4 <HAL_I2S_MspInit+0x1e0>)
 80016ea:	f000 ff2f 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016ee:	2340      	movs	r3, #64	@ 0x40
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016fe:	2305      	movs	r3, #5
 8001700:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001706:	4619      	mov	r1, r3
 8001708:	4837      	ldr	r0, [pc, #220]	@ (80017e8 <HAL_I2S_MspInit+0x1e4>)
 800170a:	f000 ff1f 	bl	800254c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 800170e:	4b37      	ldr	r3, [pc, #220]	@ (80017ec <HAL_I2S_MspInit+0x1e8>)
 8001710:	4a37      	ldr	r2, [pc, #220]	@ (80017f0 <HAL_I2S_MspInit+0x1ec>)
 8001712:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001714:	4b35      	ldr	r3, [pc, #212]	@ (80017ec <HAL_I2S_MspInit+0x1e8>)
 8001716:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800171a:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800171c:	4b33      	ldr	r3, [pc, #204]	@ (80017ec <HAL_I2S_MspInit+0x1e8>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001722:	4b32      	ldr	r3, [pc, #200]	@ (80017ec <HAL_I2S_MspInit+0x1e8>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001728:	4b30      	ldr	r3, [pc, #192]	@ (80017ec <HAL_I2S_MspInit+0x1e8>)
 800172a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800172e:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001730:	4b2e      	ldr	r3, [pc, #184]	@ (80017ec <HAL_I2S_MspInit+0x1e8>)
 8001732:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001736:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001738:	4b2c      	ldr	r3, [pc, #176]	@ (80017ec <HAL_I2S_MspInit+0x1e8>)
 800173a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800173e:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001740:	4b2a      	ldr	r3, [pc, #168]	@ (80017ec <HAL_I2S_MspInit+0x1e8>)
 8001742:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001746:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001748:	4b28      	ldr	r3, [pc, #160]	@ (80017ec <HAL_I2S_MspInit+0x1e8>)
 800174a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800174e:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001750:	4b26      	ldr	r3, [pc, #152]	@ (80017ec <HAL_I2S_MspInit+0x1e8>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8001756:	4825      	ldr	r0, [pc, #148]	@ (80017ec <HAL_I2S_MspInit+0x1e8>)
 8001758:	f000 fb7c 	bl	8001e54 <HAL_DMA_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 8001762:	f7ff ff21 	bl	80015a8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a20      	ldr	r2, [pc, #128]	@ (80017ec <HAL_I2S_MspInit+0x1e8>)
 800176a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800176c:	4a1f      	ldr	r2, [pc, #124]	@ (80017ec <HAL_I2S_MspInit+0x1e8>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001772:	4b20      	ldr	r3, [pc, #128]	@ (80017f4 <HAL_I2S_MspInit+0x1f0>)
 8001774:	4a20      	ldr	r2, [pc, #128]	@ (80017f8 <HAL_I2S_MspInit+0x1f4>)
 8001776:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001778:	4b1e      	ldr	r3, [pc, #120]	@ (80017f4 <HAL_I2S_MspInit+0x1f0>)
 800177a:	2200      	movs	r2, #0
 800177c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800177e:	4b1d      	ldr	r3, [pc, #116]	@ (80017f4 <HAL_I2S_MspInit+0x1f0>)
 8001780:	2240      	movs	r2, #64	@ 0x40
 8001782:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001784:	4b1b      	ldr	r3, [pc, #108]	@ (80017f4 <HAL_I2S_MspInit+0x1f0>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800178a:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <HAL_I2S_MspInit+0x1f0>)
 800178c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001790:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001792:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <HAL_I2S_MspInit+0x1f0>)
 8001794:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001798:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800179a:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <HAL_I2S_MspInit+0x1f0>)
 800179c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017a0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80017a2:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <HAL_I2S_MspInit+0x1f0>)
 80017a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017a8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80017aa:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <HAL_I2S_MspInit+0x1f0>)
 80017ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017b0:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <HAL_I2S_MspInit+0x1f0>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80017b8:	480e      	ldr	r0, [pc, #56]	@ (80017f4 <HAL_I2S_MspInit+0x1f0>)
 80017ba:	f000 fb4b 	bl	8001e54 <HAL_DMA_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 80017c4:	f7ff fef0 	bl	80015a8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <HAL_I2S_MspInit+0x1f0>)
 80017cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80017ce:	4a09      	ldr	r2, [pc, #36]	@ (80017f4 <HAL_I2S_MspInit+0x1f0>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017d4:	bf00      	nop
 80017d6:	3738      	adds	r7, #56	@ 0x38
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40003800 	.word	0x40003800
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020400 	.word	0x40020400
 80017e8:	40020800 	.word	0x40020800
 80017ec:	2000024c 	.word	0x2000024c
 80017f0:	40026058 	.word	0x40026058
 80017f4:	200002ac 	.word	0x200002ac
 80017f8:	40026070 	.word	0x40026070

080017fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	@ 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a1d      	ldr	r2, [pc, #116]	@ (8001890 <HAL_UART_MspInit+0x94>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d134      	bne.n	8001888 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <HAL_UART_MspInit+0x98>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	4a1b      	ldr	r2, [pc, #108]	@ (8001894 <HAL_UART_MspInit+0x98>)
 8001828:	f043 0310 	orr.w	r3, r3, #16
 800182c:	6453      	str	r3, [r2, #68]	@ 0x44
 800182e:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <HAL_UART_MspInit+0x98>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	f003 0310 	and.w	r3, r3, #16
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <HAL_UART_MspInit+0x98>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a14      	ldr	r2, [pc, #80]	@ (8001894 <HAL_UART_MspInit+0x98>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_UART_MspInit+0x98>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001856:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001868:	2307      	movs	r3, #7
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	4809      	ldr	r0, [pc, #36]	@ (8001898 <HAL_UART_MspInit+0x9c>)
 8001874:	f000 fe6a 	bl	800254c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	2025      	movs	r0, #37	@ 0x25
 800187e:	f000 fab2 	bl	8001de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001882:	2025      	movs	r0, #37	@ 0x25
 8001884:	f000 facb 	bl	8001e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	3728      	adds	r7, #40	@ 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40011000 	.word	0x40011000
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <NMI_Handler+0x4>

080018a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <MemManage_Handler+0x4>

080018b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f2:	f000 f959 	bl	8001ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001900:	4802      	ldr	r0, [pc, #8]	@ (800190c <DMA1_Stream3_IRQHandler+0x10>)
 8001902:	f000 fbe7 	bl	80020d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000024c 	.word	0x2000024c

08001910 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001914:	4802      	ldr	r0, [pc, #8]	@ (8001920 <DMA1_Stream4_IRQHandler+0x10>)
 8001916:	f000 fbdd 	bl	80020d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200002ac 	.word	0x200002ac

08001924 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001928:	4802      	ldr	r0, [pc, #8]	@ (8001934 <USART1_IRQHandler+0x10>)
 800192a:	f002 fb59 	bl	8003fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	2000030c 	.word	0x2000030c

08001938 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return 1;
 800193c:	2301      	movs	r3, #1
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_kill>:

int _kill(int pid, int sig)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001952:	f004 facf 	bl	8005ef4 <__errno>
 8001956:	4603      	mov	r3, r0
 8001958:	2216      	movs	r2, #22
 800195a:	601a      	str	r2, [r3, #0]
  return -1;
 800195c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <_exit>:

void _exit (int status)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001970:	f04f 31ff 	mov.w	r1, #4294967295
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ffe7 	bl	8001948 <_kill>
  while (1) {}    /* Make sure we hang here */
 800197a:	bf00      	nop
 800197c:	e7fd      	b.n	800197a <_exit+0x12>

0800197e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	e00a      	b.n	80019a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001990:	f3af 8000 	nop.w
 8001994:	4601      	mov	r1, r0
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	60ba      	str	r2, [r7, #8]
 800199c:	b2ca      	uxtb	r2, r1
 800199e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3301      	adds	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dbf0      	blt.n	8001990 <_read+0x12>
  }

  return len;
 80019ae:	687b      	ldr	r3, [r7, #4]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019e0:	605a      	str	r2, [r3, #4]
  return 0;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_isatty>:

int _isatty(int file)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019f8:	2301      	movs	r3, #1
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a28:	4a14      	ldr	r2, [pc, #80]	@ (8001a7c <_sbrk+0x5c>)
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <_sbrk+0x60>)
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a34:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <_sbrk+0x64>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	@ (8001a88 <_sbrk+0x68>)
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d207      	bcs.n	8001a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a50:	f004 fa50 	bl	8005ef4 <__errno>
 8001a54:	4603      	mov	r3, r0
 8001a56:	220c      	movs	r2, #12
 8001a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	e009      	b.n	8001a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a60:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a66:	4b07      	ldr	r3, [pc, #28]	@ (8001a84 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	4a05      	ldr	r2, [pc, #20]	@ (8001a84 <_sbrk+0x64>)
 8001a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a72:	68fb      	ldr	r3, [r7, #12]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20020000 	.word	0x20020000
 8001a80:	00000400 	.word	0x00000400
 8001a84:	200003d4 	.word	0x200003d4
 8001a88:	20000528 	.word	0x20000528

08001a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <SystemInit+0x20>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a96:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <SystemInit+0x20>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ab0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ae8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ab4:	f7ff ffea 	bl	8001a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ab8:	480c      	ldr	r0, [pc, #48]	@ (8001aec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aba:	490d      	ldr	r1, [pc, #52]	@ (8001af0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001abc:	4a0d      	ldr	r2, [pc, #52]	@ (8001af4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8001afc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001ade:	f004 fa0f 	bl	8005f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae2:	f7ff faa7 	bl	8001034 <main>
  bx  lr    
 8001ae6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ae8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001af4:	0800a344 	.word	0x0800a344
  ldr r2, =_sbss
 8001af8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001afc:	20000528 	.word	0x20000528

08001b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <ADC_IRQHandler>
	...

08001b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b08:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b44 <HAL_Init+0x40>)
 8001b0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_Init+0x40>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0a      	ldr	r2, [pc, #40]	@ (8001b44 <HAL_Init+0x40>)
 8001b1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <HAL_Init+0x40>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <HAL_Init+0x40>)
 8001b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f000 f94f 	bl	8001dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b32:	200f      	movs	r0, #15
 8001b34:	f000 f808 	bl	8001b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b38:	f7ff fd3c 	bl	80015b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023c00 	.word	0x40023c00

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <HAL_InitTick+0x54>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <HAL_InitTick+0x58>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f967 	bl	8001e3a <HAL_SYSTICK_Config>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00e      	b.n	8001b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b0f      	cmp	r3, #15
 8001b7a:	d80a      	bhi.n	8001b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f000 f92f 	bl	8001de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b88:	4a06      	ldr	r2, [pc, #24]	@ (8001ba4 <HAL_InitTick+0x5c>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e000      	b.n	8001b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000014 	.word	0x20000014
 8001ba0:	2000001c 	.word	0x2000001c
 8001ba4:	20000018 	.word	0x20000018

08001ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_IncTick+0x20>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_IncTick+0x24>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4a04      	ldr	r2, [pc, #16]	@ (8001bcc <HAL_IncTick+0x24>)
 8001bba:	6013      	str	r3, [r2, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	2000001c 	.word	0x2000001c
 8001bcc:	200003d8 	.word	0x200003d8

08001bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	@ (8001be4 <HAL_GetTick+0x14>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	200003d8 	.word	0x200003d8

08001be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff ffee 	bl	8001bd0 <HAL_GetTick>
 8001bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c00:	d005      	beq.n	8001c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c02:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <HAL_Delay+0x44>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c0e:	bf00      	nop
 8001c10:	f7ff ffde 	bl	8001bd0 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d8f7      	bhi.n	8001c10 <HAL_Delay+0x28>
  {
  }
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	2000001c 	.word	0x2000001c

08001c30 <__NVIC_SetPriorityGrouping>:
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c40:	4b0c      	ldr	r3, [pc, #48]	@ (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c62:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	60d3      	str	r3, [r2, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_GetPriorityGrouping>:
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c7c:	4b04      	ldr	r3, [pc, #16]	@ (8001c90 <__NVIC_GetPriorityGrouping+0x18>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	f003 0307 	and.w	r3, r3, #7
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_EnableIRQ>:
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db0b      	blt.n	8001cbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	4907      	ldr	r1, [pc, #28]	@ (8001ccc <__NVIC_EnableIRQ+0x38>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000e100 	.word	0xe000e100

08001cd0 <__NVIC_SetPriority>:
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	db0a      	blt.n	8001cfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	490c      	ldr	r1, [pc, #48]	@ (8001d1c <__NVIC_SetPriority+0x4c>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001cf8:	e00a      	b.n	8001d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4908      	ldr	r1, [pc, #32]	@ (8001d20 <__NVIC_SetPriority+0x50>)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	3b04      	subs	r3, #4
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	761a      	strb	r2, [r3, #24]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000e100 	.word	0xe000e100
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <NVIC_EncodePriority>:
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	@ 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f1c3 0307 	rsb	r3, r3, #7
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	bf28      	it	cs
 8001d42:	2304      	movcs	r3, #4
 8001d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d902      	bls.n	8001d54 <NVIC_EncodePriority+0x30>
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3b03      	subs	r3, #3
 8001d52:	e000      	b.n	8001d56 <NVIC_EncodePriority+0x32>
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43da      	mvns	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	401a      	ands	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	43d9      	mvns	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	4313      	orrs	r3, r2
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	@ 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <SysTick_Config>:
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d9c:	d301      	bcc.n	8001da2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00f      	b.n	8001dc2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dcc <SysTick_Config+0x40>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001daa:	210f      	movs	r1, #15
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f7ff ff8e 	bl	8001cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db4:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <SysTick_Config+0x40>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dba:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <SysTick_Config+0x40>)
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	e000e010 	.word	0xe000e010

08001dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff29 	bl	8001c30 <__NVIC_SetPriorityGrouping>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df8:	f7ff ff3e 	bl	8001c78 <__NVIC_GetPriorityGrouping>
 8001dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff ff8e 	bl	8001d24 <NVIC_EncodePriority>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff5d 	bl	8001cd0 <__NVIC_SetPriority>
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff31 	bl	8001c94 <__NVIC_EnableIRQ>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffa2 	bl	8001d8c <SysTick_Config>
 8001e48:	4603      	mov	r3, r0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff feb6 	bl	8001bd0 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e099      	b.n	8001fa4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0201 	bic.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e90:	e00f      	b.n	8001eb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e92:	f7ff fe9d 	bl	8001bd0 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	d908      	bls.n	8001eb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e078      	b.n	8001fa4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1e8      	bne.n	8001e92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	4b38      	ldr	r3, [pc, #224]	@ (8001fac <HAL_DMA_Init+0x158>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d107      	bne.n	8001f1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f14:	4313      	orrs	r3, r2
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f023 0307 	bic.w	r3, r3, #7
 8001f32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d117      	bne.n	8001f76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00e      	beq.n	8001f76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 fa7b 	bl	8002454 <DMA_CheckFifoParam>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d008      	beq.n	8001f76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2240      	movs	r2, #64	@ 0x40
 8001f68:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f72:	2301      	movs	r3, #1
 8001f74:	e016      	b.n	8001fa4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 fa32 	bl	80023e8 <DMA_CalcBaseAndBitshift>
 8001f84:	4603      	mov	r3, r0
 8001f86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8c:	223f      	movs	r2, #63	@ 0x3f
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	f010803f 	.word	0xf010803f

08001fb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fbe:	f7ff fe07 	bl	8001bd0 <HAL_GetTick>
 8001fc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d008      	beq.n	8001fe2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2280      	movs	r2, #128	@ 0x80
 8001fd4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e052      	b.n	8002088 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0216 	bic.w	r2, r2, #22
 8001ff0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002000:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d103      	bne.n	8002012 <HAL_DMA_Abort+0x62>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0208 	bic.w	r2, r2, #8
 8002020:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0201 	bic.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002032:	e013      	b.n	800205c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002034:	f7ff fdcc 	bl	8001bd0 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b05      	cmp	r3, #5
 8002040:	d90c      	bls.n	800205c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2220      	movs	r2, #32
 8002046:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2203      	movs	r2, #3
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e015      	b.n	8002088 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1e4      	bne.n	8002034 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206e:	223f      	movs	r2, #63	@ 0x3f
 8002070:	409a      	lsls	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d004      	beq.n	80020ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2280      	movs	r2, #128	@ 0x80
 80020a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00c      	b.n	80020c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2205      	movs	r2, #5
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0201 	bic.w	r2, r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020e0:	4b8e      	ldr	r3, [pc, #568]	@ (800231c <HAL_DMA_IRQHandler+0x248>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a8e      	ldr	r2, [pc, #568]	@ (8002320 <HAL_DMA_IRQHandler+0x24c>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	0a9b      	lsrs	r3, r3, #10
 80020ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fe:	2208      	movs	r2, #8
 8002100:	409a      	lsls	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4013      	ands	r3, r2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d01a      	beq.n	8002140 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d013      	beq.n	8002140 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0204 	bic.w	r2, r2, #4
 8002126:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212c:	2208      	movs	r2, #8
 800212e:	409a      	lsls	r2, r3
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002138:	f043 0201 	orr.w	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002144:	2201      	movs	r2, #1
 8002146:	409a      	lsls	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d012      	beq.n	8002176 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00b      	beq.n	8002176 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002162:	2201      	movs	r2, #1
 8002164:	409a      	lsls	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216e:	f043 0202 	orr.w	r2, r3, #2
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217a:	2204      	movs	r2, #4
 800217c:	409a      	lsls	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d012      	beq.n	80021ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00b      	beq.n	80021ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002198:	2204      	movs	r2, #4
 800219a:	409a      	lsls	r2, r3
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a4:	f043 0204 	orr.w	r2, r3, #4
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b0:	2210      	movs	r2, #16
 80021b2:	409a      	lsls	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d043      	beq.n	8002244 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d03c      	beq.n	8002244 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ce:	2210      	movs	r2, #16
 80021d0:	409a      	lsls	r2, r3
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d018      	beq.n	8002216 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d108      	bne.n	8002204 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d024      	beq.n	8002244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
 8002202:	e01f      	b.n	8002244 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01b      	beq.n	8002244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	4798      	blx	r3
 8002214:	e016      	b.n	8002244 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d107      	bne.n	8002234 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0208 	bic.w	r2, r2, #8
 8002232:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002248:	2220      	movs	r2, #32
 800224a:	409a      	lsls	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4013      	ands	r3, r2
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 808f 	beq.w	8002374 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 8087 	beq.w	8002374 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226a:	2220      	movs	r2, #32
 800226c:	409a      	lsls	r2, r3
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b05      	cmp	r3, #5
 800227c:	d136      	bne.n	80022ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0216 	bic.w	r2, r2, #22
 800228c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800229c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d103      	bne.n	80022ae <HAL_DMA_IRQHandler+0x1da>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d007      	beq.n	80022be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0208 	bic.w	r2, r2, #8
 80022bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c2:	223f      	movs	r2, #63	@ 0x3f
 80022c4:	409a      	lsls	r2, r3
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d07e      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	4798      	blx	r3
        }
        return;
 80022ea:	e079      	b.n	80023e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d01d      	beq.n	8002336 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10d      	bne.n	8002324 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230c:	2b00      	cmp	r3, #0
 800230e:	d031      	beq.n	8002374 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	4798      	blx	r3
 8002318:	e02c      	b.n	8002374 <HAL_DMA_IRQHandler+0x2a0>
 800231a:	bf00      	nop
 800231c:	20000014 	.word	0x20000014
 8002320:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002328:	2b00      	cmp	r3, #0
 800232a:	d023      	beq.n	8002374 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4798      	blx	r3
 8002334:	e01e      	b.n	8002374 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10f      	bne.n	8002364 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0210 	bic.w	r2, r2, #16
 8002352:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002378:	2b00      	cmp	r3, #0
 800237a:	d032      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d022      	beq.n	80023ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2205      	movs	r2, #5
 800238c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	3301      	adds	r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d307      	bcc.n	80023bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f2      	bne.n	80023a0 <HAL_DMA_IRQHandler+0x2cc>
 80023ba:	e000      	b.n	80023be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	4798      	blx	r3
 80023de:	e000      	b.n	80023e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80023e0:	bf00      	nop
    }
  }
}
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	3b10      	subs	r3, #16
 80023f8:	4a14      	ldr	r2, [pc, #80]	@ (800244c <DMA_CalcBaseAndBitshift+0x64>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002402:	4a13      	ldr	r2, [pc, #76]	@ (8002450 <DMA_CalcBaseAndBitshift+0x68>)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4413      	add	r3, r2
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d909      	bls.n	800242a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800241e:	f023 0303 	bic.w	r3, r3, #3
 8002422:	1d1a      	adds	r2, r3, #4
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	659a      	str	r2, [r3, #88]	@ 0x58
 8002428:	e007      	b.n	800243a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002432:	f023 0303 	bic.w	r3, r3, #3
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	aaaaaaab 	.word	0xaaaaaaab
 8002450:	08009ee0 	.word	0x08009ee0

08002454 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002464:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d11f      	bne.n	80024ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b03      	cmp	r3, #3
 8002472:	d856      	bhi.n	8002522 <DMA_CheckFifoParam+0xce>
 8002474:	a201      	add	r2, pc, #4	@ (adr r2, 800247c <DMA_CheckFifoParam+0x28>)
 8002476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247a:	bf00      	nop
 800247c:	0800248d 	.word	0x0800248d
 8002480:	0800249f 	.word	0x0800249f
 8002484:	0800248d 	.word	0x0800248d
 8002488:	08002523 	.word	0x08002523
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002490:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d046      	beq.n	8002526 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800249c:	e043      	b.n	8002526 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024a6:	d140      	bne.n	800252a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ac:	e03d      	b.n	800252a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024b6:	d121      	bne.n	80024fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d837      	bhi.n	800252e <DMA_CheckFifoParam+0xda>
 80024be:	a201      	add	r2, pc, #4	@ (adr r2, 80024c4 <DMA_CheckFifoParam+0x70>)
 80024c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c4:	080024d5 	.word	0x080024d5
 80024c8:	080024db 	.word	0x080024db
 80024cc:	080024d5 	.word	0x080024d5
 80024d0:	080024ed 	.word	0x080024ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
      break;
 80024d8:	e030      	b.n	800253c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d025      	beq.n	8002532 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ea:	e022      	b.n	8002532 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024f4:	d11f      	bne.n	8002536 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024fa:	e01c      	b.n	8002536 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d903      	bls.n	800250a <DMA_CheckFifoParam+0xb6>
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b03      	cmp	r3, #3
 8002506:	d003      	beq.n	8002510 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002508:	e018      	b.n	800253c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
      break;
 800250e:	e015      	b.n	800253c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002514:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00e      	beq.n	800253a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
      break;
 8002520:	e00b      	b.n	800253a <DMA_CheckFifoParam+0xe6>
      break;
 8002522:	bf00      	nop
 8002524:	e00a      	b.n	800253c <DMA_CheckFifoParam+0xe8>
      break;
 8002526:	bf00      	nop
 8002528:	e008      	b.n	800253c <DMA_CheckFifoParam+0xe8>
      break;
 800252a:	bf00      	nop
 800252c:	e006      	b.n	800253c <DMA_CheckFifoParam+0xe8>
      break;
 800252e:	bf00      	nop
 8002530:	e004      	b.n	800253c <DMA_CheckFifoParam+0xe8>
      break;
 8002532:	bf00      	nop
 8002534:	e002      	b.n	800253c <DMA_CheckFifoParam+0xe8>
      break;   
 8002536:	bf00      	nop
 8002538:	e000      	b.n	800253c <DMA_CheckFifoParam+0xe8>
      break;
 800253a:	bf00      	nop
    }
  } 
  
  return status; 
 800253c:	7bfb      	ldrb	r3, [r7, #15]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop

0800254c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	@ 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	e16b      	b.n	8002840 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002568:	2201      	movs	r2, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	429a      	cmp	r2, r3
 8002582:	f040 815a 	bne.w	800283a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d005      	beq.n	800259e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259a:	2b02      	cmp	r3, #2
 800259c:	d130      	bne.n	8002600 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	2203      	movs	r2, #3
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d4:	2201      	movs	r2, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 0201 	and.w	r2, r3, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b03      	cmp	r3, #3
 800260a:	d017      	beq.n	800263c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d123      	bne.n	8002690 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	08da      	lsrs	r2, r3, #3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3208      	adds	r2, #8
 8002650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	220f      	movs	r2, #15
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	08da      	lsrs	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3208      	adds	r2, #8
 800268a:	69b9      	ldr	r1, [r7, #24]
 800268c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0203 	and.w	r2, r3, #3
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80b4 	beq.w	800283a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	4b60      	ldr	r3, [pc, #384]	@ (8002858 <HAL_GPIO_Init+0x30c>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026da:	4a5f      	ldr	r2, [pc, #380]	@ (8002858 <HAL_GPIO_Init+0x30c>)
 80026dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002858 <HAL_GPIO_Init+0x30c>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ee:	4a5b      	ldr	r2, [pc, #364]	@ (800285c <HAL_GPIO_Init+0x310>)
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	089b      	lsrs	r3, r3, #2
 80026f4:	3302      	adds	r3, #2
 80026f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	220f      	movs	r2, #15
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a52      	ldr	r2, [pc, #328]	@ (8002860 <HAL_GPIO_Init+0x314>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d02b      	beq.n	8002772 <HAL_GPIO_Init+0x226>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a51      	ldr	r2, [pc, #324]	@ (8002864 <HAL_GPIO_Init+0x318>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d025      	beq.n	800276e <HAL_GPIO_Init+0x222>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a50      	ldr	r2, [pc, #320]	@ (8002868 <HAL_GPIO_Init+0x31c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d01f      	beq.n	800276a <HAL_GPIO_Init+0x21e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4f      	ldr	r2, [pc, #316]	@ (800286c <HAL_GPIO_Init+0x320>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d019      	beq.n	8002766 <HAL_GPIO_Init+0x21a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4e      	ldr	r2, [pc, #312]	@ (8002870 <HAL_GPIO_Init+0x324>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_GPIO_Init+0x216>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4d      	ldr	r2, [pc, #308]	@ (8002874 <HAL_GPIO_Init+0x328>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00d      	beq.n	800275e <HAL_GPIO_Init+0x212>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4c      	ldr	r2, [pc, #304]	@ (8002878 <HAL_GPIO_Init+0x32c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <HAL_GPIO_Init+0x20e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4b      	ldr	r2, [pc, #300]	@ (800287c <HAL_GPIO_Init+0x330>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <HAL_GPIO_Init+0x20a>
 8002752:	2307      	movs	r3, #7
 8002754:	e00e      	b.n	8002774 <HAL_GPIO_Init+0x228>
 8002756:	2308      	movs	r3, #8
 8002758:	e00c      	b.n	8002774 <HAL_GPIO_Init+0x228>
 800275a:	2306      	movs	r3, #6
 800275c:	e00a      	b.n	8002774 <HAL_GPIO_Init+0x228>
 800275e:	2305      	movs	r3, #5
 8002760:	e008      	b.n	8002774 <HAL_GPIO_Init+0x228>
 8002762:	2304      	movs	r3, #4
 8002764:	e006      	b.n	8002774 <HAL_GPIO_Init+0x228>
 8002766:	2303      	movs	r3, #3
 8002768:	e004      	b.n	8002774 <HAL_GPIO_Init+0x228>
 800276a:	2302      	movs	r3, #2
 800276c:	e002      	b.n	8002774 <HAL_GPIO_Init+0x228>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_GPIO_Init+0x228>
 8002772:	2300      	movs	r3, #0
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	f002 0203 	and.w	r2, r2, #3
 800277a:	0092      	lsls	r2, r2, #2
 800277c:	4093      	lsls	r3, r2
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002784:	4935      	ldr	r1, [pc, #212]	@ (800285c <HAL_GPIO_Init+0x310>)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	3302      	adds	r3, #2
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002792:	4b3b      	ldr	r3, [pc, #236]	@ (8002880 <HAL_GPIO_Init+0x334>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027b6:	4a32      	ldr	r2, [pc, #200]	@ (8002880 <HAL_GPIO_Init+0x334>)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027bc:	4b30      	ldr	r3, [pc, #192]	@ (8002880 <HAL_GPIO_Init+0x334>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e0:	4a27      	ldr	r2, [pc, #156]	@ (8002880 <HAL_GPIO_Init+0x334>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027e6:	4b26      	ldr	r3, [pc, #152]	@ (8002880 <HAL_GPIO_Init+0x334>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800280a:	4a1d      	ldr	r2, [pc, #116]	@ (8002880 <HAL_GPIO_Init+0x334>)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002810:	4b1b      	ldr	r3, [pc, #108]	@ (8002880 <HAL_GPIO_Init+0x334>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002834:	4a12      	ldr	r2, [pc, #72]	@ (8002880 <HAL_GPIO_Init+0x334>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3301      	adds	r3, #1
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b0f      	cmp	r3, #15
 8002844:	f67f ae90 	bls.w	8002568 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3724      	adds	r7, #36	@ 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	40013800 	.word	0x40013800
 8002860:	40020000 	.word	0x40020000
 8002864:	40020400 	.word	0x40020400
 8002868:	40020800 	.word	0x40020800
 800286c:	40020c00 	.word	0x40020c00
 8002870:	40021000 	.word	0x40021000
 8002874:	40021400 	.word	0x40021400
 8002878:	40021800 	.word	0x40021800
 800287c:	40021c00 	.word	0x40021c00
 8002880:	40013c00 	.word	0x40013c00

08002884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
 8002890:	4613      	mov	r3, r2
 8002892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002894:	787b      	ldrb	r3, [r7, #1]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800289a:	887a      	ldrh	r2, [r7, #2]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028a0:	e003      	b.n	80028aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028a2:	887b      	ldrh	r3, [r7, #2]
 80028a4:	041a      	lsls	r2, r3, #16
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	619a      	str	r2, [r3, #24]
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028c8:	887a      	ldrh	r2, [r7, #2]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4013      	ands	r3, r2
 80028ce:	041a      	lsls	r2, r3, #16
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	43d9      	mvns	r1, r3
 80028d4:	887b      	ldrh	r3, [r7, #2]
 80028d6:	400b      	ands	r3, r1
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	619a      	str	r2, [r3, #24]
}
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e128      	b.n	8002b50 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d109      	bne.n	800291e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a90      	ldr	r2, [pc, #576]	@ (8002b58 <HAL_I2S_Init+0x26c>)
 8002916:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7fe fe73 	bl	8001604 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2202      	movs	r2, #2
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002934:	f023 030f 	bic.w	r3, r3, #15
 8002938:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2202      	movs	r2, #2
 8002940:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d060      	beq.n	8002a0c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d102      	bne.n	8002958 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002952:	2310      	movs	r3, #16
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e001      	b.n	800295c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002958:	2320      	movs	r3, #32
 800295a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b20      	cmp	r3, #32
 8002962:	d802      	bhi.n	800296a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800296a:	2001      	movs	r0, #1
 800296c:	f001 f9d8 	bl	8003d20 <HAL_RCCEx_GetPeriphCLKFreq>
 8002970:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800297a:	d125      	bne.n	80029c8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d010      	beq.n	80029a6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	fbb2 f2f3 	udiv	r2, r2, r3
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	461a      	mov	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a0:	3305      	adds	r3, #5
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	e01f      	b.n	80029e6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	461a      	mov	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	3305      	adds	r3, #5
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	e00e      	b.n	80029e6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	461a      	mov	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e2:	3305      	adds	r3, #5
 80029e4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4a5c      	ldr	r2, [pc, #368]	@ (8002b5c <HAL_I2S_Init+0x270>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	08db      	lsrs	r3, r3, #3
 80029f0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	e003      	b.n	8002a14 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d902      	bls.n	8002a20 <HAL_I2S_Init+0x134>
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	2bff      	cmp	r3, #255	@ 0xff
 8002a1e:	d907      	bls.n	8002a30 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a24:	f043 0210 	orr.w	r2, r3, #16
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e08f      	b.n	8002b50 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	ea42 0103 	orr.w	r1, r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002a4e:	f023 030f 	bic.w	r3, r3, #15
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6851      	ldr	r1, [r2, #4]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6892      	ldr	r2, [r2, #8]
 8002a5a:	4311      	orrs	r1, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	68d2      	ldr	r2, [r2, #12]
 8002a60:	4311      	orrs	r1, r2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6992      	ldr	r2, [r2, #24]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a72:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d161      	bne.n	8002b40 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a38      	ldr	r2, [pc, #224]	@ (8002b60 <HAL_I2S_Init+0x274>)
 8002a80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a37      	ldr	r2, [pc, #220]	@ (8002b64 <HAL_I2S_Init+0x278>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d101      	bne.n	8002a90 <HAL_I2S_Init+0x1a4>
 8002a8c:	4b36      	ldr	r3, [pc, #216]	@ (8002b68 <HAL_I2S_Init+0x27c>)
 8002a8e:	e001      	b.n	8002a94 <HAL_I2S_Init+0x1a8>
 8002a90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6812      	ldr	r2, [r2, #0]
 8002a9a:	4932      	ldr	r1, [pc, #200]	@ (8002b64 <HAL_I2S_Init+0x278>)
 8002a9c:	428a      	cmp	r2, r1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_I2S_Init+0x1b8>
 8002aa0:	4a31      	ldr	r2, [pc, #196]	@ (8002b68 <HAL_I2S_Init+0x27c>)
 8002aa2:	e001      	b.n	8002aa8 <HAL_I2S_Init+0x1bc>
 8002aa4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002aa8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002aac:	f023 030f 	bic.w	r3, r3, #15
 8002ab0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a2b      	ldr	r2, [pc, #172]	@ (8002b64 <HAL_I2S_Init+0x278>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d101      	bne.n	8002ac0 <HAL_I2S_Init+0x1d4>
 8002abc:	4b2a      	ldr	r3, [pc, #168]	@ (8002b68 <HAL_I2S_Init+0x27c>)
 8002abe:	e001      	b.n	8002ac4 <HAL_I2S_Init+0x1d8>
 8002ac0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a25      	ldr	r2, [pc, #148]	@ (8002b64 <HAL_I2S_Init+0x278>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d101      	bne.n	8002ad6 <HAL_I2S_Init+0x1ea>
 8002ad2:	4b25      	ldr	r3, [pc, #148]	@ (8002b68 <HAL_I2S_Init+0x27c>)
 8002ad4:	e001      	b.n	8002ada <HAL_I2S_Init+0x1ee>
 8002ad6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ae6:	d003      	beq.n	8002af0 <HAL_I2S_Init+0x204>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d103      	bne.n	8002af8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002af0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	e001      	b.n	8002afc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002af8:	2300      	movs	r3, #0
 8002afa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002b06:	4313      	orrs	r3, r2
 8002b08:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002b10:	4313      	orrs	r3, r2
 8002b12:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	897b      	ldrh	r3, [r7, #10]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b28:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002b64 <HAL_I2S_Init+0x278>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d101      	bne.n	8002b38 <HAL_I2S_Init+0x24c>
 8002b34:	4b0c      	ldr	r3, [pc, #48]	@ (8002b68 <HAL_I2S_Init+0x27c>)
 8002b36:	e001      	b.n	8002b3c <HAL_I2S_Init+0x250>
 8002b38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b3c:	897a      	ldrh	r2, [r7, #10]
 8002b3e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3720      	adds	r7, #32
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	08002c63 	.word	0x08002c63
 8002b5c:	cccccccd 	.word	0xcccccccd
 8002b60:	08002d79 	.word	0x08002d79
 8002b64:	40003800 	.word	0x40003800
 8002b68:	40003400 	.word	0x40003400

08002b6c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	881a      	ldrh	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	1c9a      	adds	r2, r3, #2
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10e      	bne.n	8002bfc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002bec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff ffb8 	bl	8002b6c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c16:	b292      	uxth	r2, r2
 8002c18:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1e:	1c9a      	adds	r2, r3, #2
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10e      	bne.n	8002c5a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c4a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff93 	bl	8002b80 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d13a      	bne.n	8002cf4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d109      	bne.n	8002c9c <I2S_IRQHandler+0x3a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c92:	2b40      	cmp	r3, #64	@ 0x40
 8002c94:	d102      	bne.n	8002c9c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff ffb4 	bl	8002c04 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca2:	2b40      	cmp	r3, #64	@ 0x40
 8002ca4:	d126      	bne.n	8002cf4 <I2S_IRQHandler+0x92>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d11f      	bne.n	8002cf4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002cc2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce6:	f043 0202 	orr.w	r2, r3, #2
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff ff50 	bl	8002b94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d136      	bne.n	8002d6e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d109      	bne.n	8002d1e <I2S_IRQHandler+0xbc>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d14:	2b80      	cmp	r3, #128	@ 0x80
 8002d16:	d102      	bne.n	8002d1e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ff45 	bl	8002ba8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d122      	bne.n	8002d6e <I2S_IRQHandler+0x10c>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	d11b      	bne.n	8002d6e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d44:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d60:	f043 0204 	orr.w	r2, r3, #4
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ff13 	bl	8002b94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d6e:	bf00      	nop
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a92      	ldr	r2, [pc, #584]	@ (8002fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d101      	bne.n	8002d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002d92:	4b92      	ldr	r3, [pc, #584]	@ (8002fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d94:	e001      	b.n	8002d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002d96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a8b      	ldr	r2, [pc, #556]	@ (8002fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d101      	bne.n	8002db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002db0:	4b8a      	ldr	r3, [pc, #552]	@ (8002fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002db2:	e001      	b.n	8002db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002db4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dc4:	d004      	beq.n	8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f040 8099 	bne.w	8002f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d107      	bne.n	8002dea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f925 	bl	8003034 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d107      	bne.n	8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f9c8 	bl	8003194 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e0a:	2b40      	cmp	r3, #64	@ 0x40
 8002e0c:	d13a      	bne.n	8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d035      	beq.n	8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a6e      	ldr	r2, [pc, #440]	@ (8002fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d101      	bne.n	8002e26 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002e22:	4b6e      	ldr	r3, [pc, #440]	@ (8002fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e24:	e001      	b.n	8002e2a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002e26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4969      	ldr	r1, [pc, #420]	@ (8002fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e32:	428b      	cmp	r3, r1
 8002e34:	d101      	bne.n	8002e3a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002e36:	4b69      	ldr	r3, [pc, #420]	@ (8002fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e38:	e001      	b.n	8002e3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002e3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e3e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e42:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e52:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e76:	f043 0202 	orr.w	r2, r3, #2
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fe88 	bl	8002b94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	f040 80c3 	bne.w	8003016 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 80bd 	beq.w	8003016 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002eaa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a49      	ldr	r2, [pc, #292]	@ (8002fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d101      	bne.n	8002eba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002eb6:	4b49      	ldr	r3, [pc, #292]	@ (8002fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002eb8:	e001      	b.n	8002ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002eba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4944      	ldr	r1, [pc, #272]	@ (8002fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ec6:	428b      	cmp	r3, r1
 8002ec8:	d101      	bne.n	8002ece <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002eca:	4b44      	ldr	r3, [pc, #272]	@ (8002fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ecc:	e001      	b.n	8002ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002ece:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ed2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ed6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef2:	f043 0204 	orr.w	r2, r3, #4
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff fe4a 	bl	8002b94 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f00:	e089      	b.n	8003016 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d107      	bne.n	8002f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f8be 	bl	8003098 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d107      	bne.n	8002f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f8fd 	bl	8003130 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3c:	2b40      	cmp	r3, #64	@ 0x40
 8002f3e:	d12f      	bne.n	8002fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d02a      	beq.n	8002fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f58:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8002fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d101      	bne.n	8002f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002f64:	4b1d      	ldr	r3, [pc, #116]	@ (8002fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f66:	e001      	b.n	8002f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002f68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4919      	ldr	r1, [pc, #100]	@ (8002fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f74:	428b      	cmp	r3, r1
 8002f76:	d101      	bne.n	8002f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002f78:	4b18      	ldr	r3, [pc, #96]	@ (8002fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f7a:	e001      	b.n	8002f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002f7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f80:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002f84:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f92:	f043 0202 	orr.w	r2, r3, #2
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff fdfa 	bl	8002b94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d136      	bne.n	8003018 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d031      	beq.n	8003018 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a07      	ldr	r2, [pc, #28]	@ (8002fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002fbe:	4b07      	ldr	r3, [pc, #28]	@ (8002fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fc0:	e001      	b.n	8002fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002fc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4902      	ldr	r1, [pc, #8]	@ (8002fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fce:	428b      	cmp	r3, r1
 8002fd0:	d106      	bne.n	8002fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002fd2:	4b02      	ldr	r3, [pc, #8]	@ (8002fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fd4:	e006      	b.n	8002fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002fd6:	bf00      	nop
 8002fd8:	40003800 	.word	0x40003800
 8002fdc:	40003400 	.word	0x40003400
 8002fe0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fe4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002fe8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ff8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003006:	f043 0204 	orr.w	r2, r3, #4
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff fdc0 	bl	8002b94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003014:	e000      	b.n	8003018 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003016:	bf00      	nop
}
 8003018:	bf00      	nop
 800301a:	3720      	adds	r7, #32
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	1c99      	adds	r1, r3, #2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6251      	str	r1, [r2, #36]	@ 0x24
 8003046:	881a      	ldrh	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d113      	bne.n	800308e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003074:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d106      	bne.n	800308e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff ffc9 	bl	8003020 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	1c99      	adds	r1, r3, #2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6251      	str	r1, [r2, #36]	@ 0x24
 80030aa:	8819      	ldrh	r1, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003128 <I2SEx_TxISR_I2SExt+0x90>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d101      	bne.n	80030ba <I2SEx_TxISR_I2SExt+0x22>
 80030b6:	4b1d      	ldr	r3, [pc, #116]	@ (800312c <I2SEx_TxISR_I2SExt+0x94>)
 80030b8:	e001      	b.n	80030be <I2SEx_TxISR_I2SExt+0x26>
 80030ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030be:	460a      	mov	r2, r1
 80030c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d121      	bne.n	800311e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a12      	ldr	r2, [pc, #72]	@ (8003128 <I2SEx_TxISR_I2SExt+0x90>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d101      	bne.n	80030e8 <I2SEx_TxISR_I2SExt+0x50>
 80030e4:	4b11      	ldr	r3, [pc, #68]	@ (800312c <I2SEx_TxISR_I2SExt+0x94>)
 80030e6:	e001      	b.n	80030ec <I2SEx_TxISR_I2SExt+0x54>
 80030e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	490d      	ldr	r1, [pc, #52]	@ (8003128 <I2SEx_TxISR_I2SExt+0x90>)
 80030f4:	428b      	cmp	r3, r1
 80030f6:	d101      	bne.n	80030fc <I2SEx_TxISR_I2SExt+0x64>
 80030f8:	4b0c      	ldr	r3, [pc, #48]	@ (800312c <I2SEx_TxISR_I2SExt+0x94>)
 80030fa:	e001      	b.n	8003100 <I2SEx_TxISR_I2SExt+0x68>
 80030fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003100:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003104:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d106      	bne.n	800311e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7ff ff81 	bl	8003020 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40003800 	.word	0x40003800
 800312c:	40003400 	.word	0x40003400

08003130 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68d8      	ldr	r0, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003142:	1c99      	adds	r1, r3, #2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003148:	b282      	uxth	r2, r0
 800314a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d113      	bne.n	800318c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003172:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ff4a 	bl	8003020 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a20      	ldr	r2, [pc, #128]	@ (8003224 <I2SEx_RxISR_I2SExt+0x90>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d101      	bne.n	80031aa <I2SEx_RxISR_I2SExt+0x16>
 80031a6:	4b20      	ldr	r3, [pc, #128]	@ (8003228 <I2SEx_RxISR_I2SExt+0x94>)
 80031a8:	e001      	b.n	80031ae <I2SEx_RxISR_I2SExt+0x1a>
 80031aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031ae:	68d8      	ldr	r0, [r3, #12]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b4:	1c99      	adds	r1, r3, #2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80031ba:	b282      	uxth	r2, r0
 80031bc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d121      	bne.n	800321a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a12      	ldr	r2, [pc, #72]	@ (8003224 <I2SEx_RxISR_I2SExt+0x90>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d101      	bne.n	80031e4 <I2SEx_RxISR_I2SExt+0x50>
 80031e0:	4b11      	ldr	r3, [pc, #68]	@ (8003228 <I2SEx_RxISR_I2SExt+0x94>)
 80031e2:	e001      	b.n	80031e8 <I2SEx_RxISR_I2SExt+0x54>
 80031e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	490d      	ldr	r1, [pc, #52]	@ (8003224 <I2SEx_RxISR_I2SExt+0x90>)
 80031f0:	428b      	cmp	r3, r1
 80031f2:	d101      	bne.n	80031f8 <I2SEx_RxISR_I2SExt+0x64>
 80031f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003228 <I2SEx_RxISR_I2SExt+0x94>)
 80031f6:	e001      	b.n	80031fc <I2SEx_RxISR_I2SExt+0x68>
 80031f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031fc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003200:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d106      	bne.n	800321a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff ff03 	bl	8003020 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40003800 	.word	0x40003800
 8003228:	40003400 	.word	0x40003400

0800322c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e267      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d075      	beq.n	8003336 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800324a:	4b88      	ldr	r3, [pc, #544]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b04      	cmp	r3, #4
 8003254:	d00c      	beq.n	8003270 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003256:	4b85      	ldr	r3, [pc, #532]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800325e:	2b08      	cmp	r3, #8
 8003260:	d112      	bne.n	8003288 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003262:	4b82      	ldr	r3, [pc, #520]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800326a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800326e:	d10b      	bne.n	8003288 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003270:	4b7e      	ldr	r3, [pc, #504]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d05b      	beq.n	8003334 <HAL_RCC_OscConfig+0x108>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d157      	bne.n	8003334 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e242      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003290:	d106      	bne.n	80032a0 <HAL_RCC_OscConfig+0x74>
 8003292:	4b76      	ldr	r3, [pc, #472]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a75      	ldr	r2, [pc, #468]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e01d      	b.n	80032dc <HAL_RCC_OscConfig+0xb0>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCC_OscConfig+0x98>
 80032aa:	4b70      	ldr	r3, [pc, #448]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a6f      	ldr	r2, [pc, #444]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 80032b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4b6d      	ldr	r3, [pc, #436]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a6c      	ldr	r2, [pc, #432]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 80032bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e00b      	b.n	80032dc <HAL_RCC_OscConfig+0xb0>
 80032c4:	4b69      	ldr	r3, [pc, #420]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a68      	ldr	r2, [pc, #416]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 80032ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	4b66      	ldr	r3, [pc, #408]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a65      	ldr	r2, [pc, #404]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 80032d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fe fc74 	bl	8001bd0 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fe fc70 	bl	8001bd0 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	@ 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e207      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	4b5b      	ldr	r3, [pc, #364]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0xc0>
 800330a:	e014      	b.n	8003336 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7fe fc60 	bl	8001bd0 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003314:	f7fe fc5c 	bl	8001bd0 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	@ 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e1f3      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003326:	4b51      	ldr	r3, [pc, #324]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0xe8>
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d063      	beq.n	800340a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003342:	4b4a      	ldr	r3, [pc, #296]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00b      	beq.n	8003366 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800334e:	4b47      	ldr	r3, [pc, #284]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003356:	2b08      	cmp	r3, #8
 8003358:	d11c      	bne.n	8003394 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800335a:	4b44      	ldr	r3, [pc, #272]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d116      	bne.n	8003394 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003366:	4b41      	ldr	r3, [pc, #260]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <HAL_RCC_OscConfig+0x152>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d001      	beq.n	800337e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e1c7      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337e:	4b3b      	ldr	r3, [pc, #236]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4937      	ldr	r1, [pc, #220]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	e03a      	b.n	800340a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d020      	beq.n	80033de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800339c:	4b34      	ldr	r3, [pc, #208]	@ (8003470 <HAL_RCC_OscConfig+0x244>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a2:	f7fe fc15 	bl	8001bd0 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033aa:	f7fe fc11 	bl	8001bd0 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e1a8      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033bc:	4b2b      	ldr	r3, [pc, #172]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c8:	4b28      	ldr	r3, [pc, #160]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4925      	ldr	r1, [pc, #148]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	600b      	str	r3, [r1, #0]
 80033dc:	e015      	b.n	800340a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033de:	4b24      	ldr	r3, [pc, #144]	@ (8003470 <HAL_RCC_OscConfig+0x244>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7fe fbf4 	bl	8001bd0 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ec:	f7fe fbf0 	bl	8001bd0 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e187      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fe:	4b1b      	ldr	r3, [pc, #108]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d036      	beq.n	8003484 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d016      	beq.n	800344c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341e:	4b15      	ldr	r3, [pc, #84]	@ (8003474 <HAL_RCC_OscConfig+0x248>)
 8003420:	2201      	movs	r2, #1
 8003422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003424:	f7fe fbd4 	bl	8001bd0 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800342c:	f7fe fbd0 	bl	8001bd0 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e167      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343e:	4b0b      	ldr	r3, [pc, #44]	@ (800346c <HAL_RCC_OscConfig+0x240>)
 8003440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x200>
 800344a:	e01b      	b.n	8003484 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800344c:	4b09      	ldr	r3, [pc, #36]	@ (8003474 <HAL_RCC_OscConfig+0x248>)
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003452:	f7fe fbbd 	bl	8001bd0 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003458:	e00e      	b.n	8003478 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800345a:	f7fe fbb9 	bl	8001bd0 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d907      	bls.n	8003478 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e150      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
 800346c:	40023800 	.word	0x40023800
 8003470:	42470000 	.word	0x42470000
 8003474:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003478:	4b88      	ldr	r3, [pc, #544]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 800347a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1ea      	bne.n	800345a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 8097 	beq.w	80035c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003492:	2300      	movs	r3, #0
 8003494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003496:	4b81      	ldr	r3, [pc, #516]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10f      	bne.n	80034c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	4b7d      	ldr	r3, [pc, #500]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	4a7c      	ldr	r2, [pc, #496]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 80034ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034b2:	4b7a      	ldr	r3, [pc, #488]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034be:	2301      	movs	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c2:	4b77      	ldr	r3, [pc, #476]	@ (80036a0 <HAL_RCC_OscConfig+0x474>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d118      	bne.n	8003500 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ce:	4b74      	ldr	r3, [pc, #464]	@ (80036a0 <HAL_RCC_OscConfig+0x474>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a73      	ldr	r2, [pc, #460]	@ (80036a0 <HAL_RCC_OscConfig+0x474>)
 80034d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034da:	f7fe fb79 	bl	8001bd0 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e2:	f7fe fb75 	bl	8001bd0 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e10c      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f4:	4b6a      	ldr	r3, [pc, #424]	@ (80036a0 <HAL_RCC_OscConfig+0x474>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d106      	bne.n	8003516 <HAL_RCC_OscConfig+0x2ea>
 8003508:	4b64      	ldr	r3, [pc, #400]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350c:	4a63      	ldr	r2, [pc, #396]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6713      	str	r3, [r2, #112]	@ 0x70
 8003514:	e01c      	b.n	8003550 <HAL_RCC_OscConfig+0x324>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b05      	cmp	r3, #5
 800351c:	d10c      	bne.n	8003538 <HAL_RCC_OscConfig+0x30c>
 800351e:	4b5f      	ldr	r3, [pc, #380]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003522:	4a5e      	ldr	r2, [pc, #376]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 8003524:	f043 0304 	orr.w	r3, r3, #4
 8003528:	6713      	str	r3, [r2, #112]	@ 0x70
 800352a:	4b5c      	ldr	r3, [pc, #368]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352e:	4a5b      	ldr	r2, [pc, #364]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	6713      	str	r3, [r2, #112]	@ 0x70
 8003536:	e00b      	b.n	8003550 <HAL_RCC_OscConfig+0x324>
 8003538:	4b58      	ldr	r3, [pc, #352]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353c:	4a57      	ldr	r2, [pc, #348]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	6713      	str	r3, [r2, #112]	@ 0x70
 8003544:	4b55      	ldr	r3, [pc, #340]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 8003546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003548:	4a54      	ldr	r2, [pc, #336]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 800354a:	f023 0304 	bic.w	r3, r3, #4
 800354e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d015      	beq.n	8003584 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003558:	f7fe fb3a 	bl	8001bd0 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355e:	e00a      	b.n	8003576 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003560:	f7fe fb36 	bl	8001bd0 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356e:	4293      	cmp	r3, r2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e0cb      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003576:	4b49      	ldr	r3, [pc, #292]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0ee      	beq.n	8003560 <HAL_RCC_OscConfig+0x334>
 8003582:	e014      	b.n	80035ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003584:	f7fe fb24 	bl	8001bd0 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800358c:	f7fe fb20 	bl	8001bd0 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e0b5      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a2:	4b3e      	ldr	r3, [pc, #248]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1ee      	bne.n	800358c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ae:	7dfb      	ldrb	r3, [r7, #23]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d105      	bne.n	80035c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b4:	4b39      	ldr	r3, [pc, #228]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 80035b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b8:	4a38      	ldr	r2, [pc, #224]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 80035ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80a1 	beq.w	800370c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ca:	4b34      	ldr	r3, [pc, #208]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d05c      	beq.n	8003690 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d141      	bne.n	8003662 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035de:	4b31      	ldr	r3, [pc, #196]	@ (80036a4 <HAL_RCC_OscConfig+0x478>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fe faf4 	bl	8001bd0 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ec:	f7fe faf0 	bl	8001bd0 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e087      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fe:	4b27      	ldr	r3, [pc, #156]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69da      	ldr	r2, [r3, #28]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	019b      	lsls	r3, r3, #6
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003620:	085b      	lsrs	r3, r3, #1
 8003622:	3b01      	subs	r3, #1
 8003624:	041b      	lsls	r3, r3, #16
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362c:	061b      	lsls	r3, r3, #24
 800362e:	491b      	ldr	r1, [pc, #108]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 8003630:	4313      	orrs	r3, r2
 8003632:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003634:	4b1b      	ldr	r3, [pc, #108]	@ (80036a4 <HAL_RCC_OscConfig+0x478>)
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363a:	f7fe fac9 	bl	8001bd0 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003642:	f7fe fac5 	bl	8001bd0 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e05c      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003654:	4b11      	ldr	r3, [pc, #68]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x416>
 8003660:	e054      	b.n	800370c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003662:	4b10      	ldr	r3, [pc, #64]	@ (80036a4 <HAL_RCC_OscConfig+0x478>)
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003668:	f7fe fab2 	bl	8001bd0 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003670:	f7fe faae 	bl	8001bd0 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e045      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003682:	4b06      	ldr	r3, [pc, #24]	@ (800369c <HAL_RCC_OscConfig+0x470>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x444>
 800368e:	e03d      	b.n	800370c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e038      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
 800369c:	40023800 	.word	0x40023800
 80036a0:	40007000 	.word	0x40007000
 80036a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003718 <HAL_RCC_OscConfig+0x4ec>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d028      	beq.n	8003708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d121      	bne.n	8003708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d11a      	bne.n	8003708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036d8:	4013      	ands	r3, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d111      	bne.n	8003708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ee:	085b      	lsrs	r3, r3, #1
 80036f0:	3b01      	subs	r3, #1
 80036f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d107      	bne.n	8003708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003702:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800

0800371c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0cc      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003730:	4b68      	ldr	r3, [pc, #416]	@ (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d90c      	bls.n	8003758 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b65      	ldr	r3, [pc, #404]	@ (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b63      	ldr	r3, [pc, #396]	@ (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0b8      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d020      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003770:	4b59      	ldr	r3, [pc, #356]	@ (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a58      	ldr	r2, [pc, #352]	@ (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800377a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003788:	4b53      	ldr	r3, [pc, #332]	@ (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a52      	ldr	r2, [pc, #328]	@ (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003792:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003794:	4b50      	ldr	r3, [pc, #320]	@ (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	494d      	ldr	r1, [pc, #308]	@ (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d044      	beq.n	800383c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b47      	ldr	r3, [pc, #284]	@ (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d119      	bne.n	80037fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e07f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d003      	beq.n	80037da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d107      	bne.n	80037ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037da:	4b3f      	ldr	r3, [pc, #252]	@ (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e06f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ea:	4b3b      	ldr	r3, [pc, #236]	@ (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e067      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037fa:	4b37      	ldr	r3, [pc, #220]	@ (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f023 0203 	bic.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4934      	ldr	r1, [pc, #208]	@ (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	4313      	orrs	r3, r2
 800380a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800380c:	f7fe f9e0 	bl	8001bd0 <HAL_GetTick>
 8003810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003812:	e00a      	b.n	800382a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003814:	f7fe f9dc 	bl	8001bd0 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e04f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382a:	4b2b      	ldr	r3, [pc, #172]	@ (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 020c 	and.w	r2, r3, #12
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	429a      	cmp	r2, r3
 800383a:	d1eb      	bne.n	8003814 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800383c:	4b25      	ldr	r3, [pc, #148]	@ (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d20c      	bcs.n	8003864 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384a:	4b22      	ldr	r3, [pc, #136]	@ (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b20      	ldr	r3, [pc, #128]	@ (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e032      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003870:	4b19      	ldr	r3, [pc, #100]	@ (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4916      	ldr	r1, [pc, #88]	@ (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800388e:	4b12      	ldr	r3, [pc, #72]	@ (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	490e      	ldr	r1, [pc, #56]	@ (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038a2:	f000 f821 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 80038a6:	4602      	mov	r2, r0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	490a      	ldr	r1, [pc, #40]	@ (80038dc <HAL_RCC_ClockConfig+0x1c0>)
 80038b4:	5ccb      	ldrb	r3, [r1, r3]
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	4a09      	ldr	r2, [pc, #36]	@ (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038be:	4b09      	ldr	r3, [pc, #36]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe f940 	bl	8001b48 <HAL_InitTick>

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023c00 	.word	0x40023c00
 80038d8:	40023800 	.word	0x40023800
 80038dc:	08009ec8 	.word	0x08009ec8
 80038e0:	20000014 	.word	0x20000014
 80038e4:	20000018 	.word	0x20000018

080038e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038ec:	b094      	sub	sp, #80	@ 0x50
 80038ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80038f4:	2300      	movs	r3, #0
 80038f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038f8:	2300      	movs	r3, #0
 80038fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003900:	4b79      	ldr	r3, [pc, #484]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 030c 	and.w	r3, r3, #12
 8003908:	2b08      	cmp	r3, #8
 800390a:	d00d      	beq.n	8003928 <HAL_RCC_GetSysClockFreq+0x40>
 800390c:	2b08      	cmp	r3, #8
 800390e:	f200 80e1 	bhi.w	8003ad4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0x34>
 8003916:	2b04      	cmp	r3, #4
 8003918:	d003      	beq.n	8003922 <HAL_RCC_GetSysClockFreq+0x3a>
 800391a:	e0db      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800391c:	4b73      	ldr	r3, [pc, #460]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x204>)
 800391e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003920:	e0db      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003922:	4b73      	ldr	r3, [pc, #460]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003924:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003926:	e0d8      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003928:	4b6f      	ldr	r3, [pc, #444]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003930:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003932:	4b6d      	ldr	r3, [pc, #436]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d063      	beq.n	8003a06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	099b      	lsrs	r3, r3, #6
 8003944:	2200      	movs	r2, #0
 8003946:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003948:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800394a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003950:	633b      	str	r3, [r7, #48]	@ 0x30
 8003952:	2300      	movs	r3, #0
 8003954:	637b      	str	r3, [r7, #52]	@ 0x34
 8003956:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800395a:	4622      	mov	r2, r4
 800395c:	462b      	mov	r3, r5
 800395e:	f04f 0000 	mov.w	r0, #0
 8003962:	f04f 0100 	mov.w	r1, #0
 8003966:	0159      	lsls	r1, r3, #5
 8003968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800396c:	0150      	lsls	r0, r2, #5
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4621      	mov	r1, r4
 8003974:	1a51      	subs	r1, r2, r1
 8003976:	6139      	str	r1, [r7, #16]
 8003978:	4629      	mov	r1, r5
 800397a:	eb63 0301 	sbc.w	r3, r3, r1
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800398c:	4659      	mov	r1, fp
 800398e:	018b      	lsls	r3, r1, #6
 8003990:	4651      	mov	r1, sl
 8003992:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003996:	4651      	mov	r1, sl
 8003998:	018a      	lsls	r2, r1, #6
 800399a:	4651      	mov	r1, sl
 800399c:	ebb2 0801 	subs.w	r8, r2, r1
 80039a0:	4659      	mov	r1, fp
 80039a2:	eb63 0901 	sbc.w	r9, r3, r1
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ba:	4690      	mov	r8, r2
 80039bc:	4699      	mov	r9, r3
 80039be:	4623      	mov	r3, r4
 80039c0:	eb18 0303 	adds.w	r3, r8, r3
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	462b      	mov	r3, r5
 80039c8:	eb49 0303 	adc.w	r3, r9, r3
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039da:	4629      	mov	r1, r5
 80039dc:	024b      	lsls	r3, r1, #9
 80039de:	4621      	mov	r1, r4
 80039e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039e4:	4621      	mov	r1, r4
 80039e6:	024a      	lsls	r2, r1, #9
 80039e8:	4610      	mov	r0, r2
 80039ea:	4619      	mov	r1, r3
 80039ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039ee:	2200      	movs	r2, #0
 80039f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039f8:	f7fd f946 	bl	8000c88 <__aeabi_uldivmod>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4613      	mov	r3, r2
 8003a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a04:	e058      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a06:	4b38      	ldr	r3, [pc, #224]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	099b      	lsrs	r3, r3, #6
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	4611      	mov	r1, r2
 8003a12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a16:	623b      	str	r3, [r7, #32]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a20:	4642      	mov	r2, r8
 8003a22:	464b      	mov	r3, r9
 8003a24:	f04f 0000 	mov.w	r0, #0
 8003a28:	f04f 0100 	mov.w	r1, #0
 8003a2c:	0159      	lsls	r1, r3, #5
 8003a2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a32:	0150      	lsls	r0, r2, #5
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4641      	mov	r1, r8
 8003a3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a3e:	4649      	mov	r1, r9
 8003a40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a58:	ebb2 040a 	subs.w	r4, r2, sl
 8003a5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	00eb      	lsls	r3, r5, #3
 8003a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a6e:	00e2      	lsls	r2, r4, #3
 8003a70:	4614      	mov	r4, r2
 8003a72:	461d      	mov	r5, r3
 8003a74:	4643      	mov	r3, r8
 8003a76:	18e3      	adds	r3, r4, r3
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	eb45 0303 	adc.w	r3, r5, r3
 8003a80:	607b      	str	r3, [r7, #4]
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a8e:	4629      	mov	r1, r5
 8003a90:	028b      	lsls	r3, r1, #10
 8003a92:	4621      	mov	r1, r4
 8003a94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a98:	4621      	mov	r1, r4
 8003a9a:	028a      	lsls	r2, r1, #10
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	61fa      	str	r2, [r7, #28]
 8003aa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aac:	f7fd f8ec 	bl	8000c88 <__aeabi_uldivmod>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003ac8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ad2:	e002      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ad4:	4b05      	ldr	r3, [pc, #20]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x204>)
 8003ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3750      	adds	r7, #80	@ 0x50
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	00f42400 	.word	0x00f42400
 8003af0:	007a1200 	.word	0x007a1200

08003af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af8:	4b03      	ldr	r3, [pc, #12]	@ (8003b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003afa:	681b      	ldr	r3, [r3, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	20000014 	.word	0x20000014

08003b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b10:	f7ff fff0 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b14:	4602      	mov	r2, r0
 8003b16:	4b05      	ldr	r3, [pc, #20]	@ (8003b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	0a9b      	lsrs	r3, r3, #10
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	4903      	ldr	r1, [pc, #12]	@ (8003b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b22:	5ccb      	ldrb	r3, [r1, r3]
 8003b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	08009ed8 	.word	0x08009ed8

08003b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b38:	f7ff ffdc 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4b05      	ldr	r3, [pc, #20]	@ (8003b54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	0b5b      	lsrs	r3, r3, #13
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	4903      	ldr	r1, [pc, #12]	@ (8003b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b4a:	5ccb      	ldrb	r3, [r1, r3]
 8003b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40023800 	.word	0x40023800
 8003b58:	08009ed8 	.word	0x08009ed8

08003b5c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d105      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d035      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b84:	4b62      	ldr	r3, [pc, #392]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b8a:	f7fe f821 	bl	8001bd0 <HAL_GetTick>
 8003b8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b92:	f7fe f81d 	bl	8001bd0 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e0b0      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ba4:	4b5b      	ldr	r3, [pc, #364]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f0      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	019a      	lsls	r2, r3, #6
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	071b      	lsls	r3, r3, #28
 8003bbc:	4955      	ldr	r1, [pc, #340]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bc4:	4b52      	ldr	r3, [pc, #328]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bca:	f7fe f801 	bl	8001bd0 <HAL_GetTick>
 8003bce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bd2:	f7fd fffd 	bl	8001bd0 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e090      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003be4:	4b4b      	ldr	r3, [pc, #300]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 8083 	beq.w	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	4b44      	ldr	r3, [pc, #272]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	4a43      	ldr	r2, [pc, #268]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c0e:	4b41      	ldr	r3, [pc, #260]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a3e      	ldr	r2, [pc, #248]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c26:	f7fd ffd3 	bl	8001bd0 <HAL_GetTick>
 8003c2a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c2e:	f7fd ffcf 	bl	8001bd0 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e062      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c40:	4b35      	ldr	r3, [pc, #212]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c4c:	4b31      	ldr	r3, [pc, #196]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c54:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d02f      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d028      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c72:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c74:	4b29      	ldr	r3, [pc, #164]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c7a:	4b28      	ldr	r3, [pc, #160]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c80:	4a24      	ldr	r2, [pc, #144]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c86:	4b23      	ldr	r3, [pc, #140]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d114      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c92:	f7fd ff9d 	bl	8001bd0 <HAL_GetTick>
 8003c96:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c98:	e00a      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c9a:	f7fd ff99 	bl	8001bd0 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e02a      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb0:	4b18      	ldr	r3, [pc, #96]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0ee      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cc8:	d10d      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003cca:	4b12      	ldr	r3, [pc, #72]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cde:	490d      	ldr	r1, [pc, #52]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	608b      	str	r3, [r1, #8]
 8003ce4:	e005      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	4a0a      	ldr	r2, [pc, #40]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cec:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003cf0:	6093      	str	r3, [r2, #8]
 8003cf2:	4b08      	ldr	r3, [pc, #32]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cf4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfe:	4905      	ldr	r1, [pc, #20]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	42470068 	.word	0x42470068
 8003d14:	40023800 	.word	0x40023800
 8003d18:	40007000 	.word	0x40007000
 8003d1c:	42470e40 	.word	0x42470e40

08003d20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d13f      	bne.n	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003d3e:	4b24      	ldr	r3, [pc, #144]	@ (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d006      	beq.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d54:	d12f      	bne.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003d56:	4b1f      	ldr	r3, [pc, #124]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003d58:	617b      	str	r3, [r7, #20]
          break;
 8003d5a:	e02f      	b.n	8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d68:	d108      	bne.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d6a:	4b19      	ldr	r3, [pc, #100]	@ (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d72:	4a19      	ldr	r2, [pc, #100]	@ (8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	e007      	b.n	8003d8c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d7c:	4b14      	ldr	r3, [pc, #80]	@ (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d84:	4a15      	ldr	r2, [pc, #84]	@ (8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003d8c:	4b10      	ldr	r3, [pc, #64]	@ (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d92:	099b      	lsrs	r3, r3, #6
 8003d94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	fb02 f303 	mul.w	r3, r2, r3
 8003d9e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003da0:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003da6:	0f1b      	lsrs	r3, r3, #28
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db2:	617b      	str	r3, [r7, #20]
          break;
 8003db4:	e002      	b.n	8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
          break;
 8003dba:	bf00      	nop
        }
      }
      break;
 8003dbc:	e000      	b.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8003dbe:	bf00      	nop
    }
  }
  return frequency;
 8003dc0:	697b      	ldr	r3, [r7, #20]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	00bb8000 	.word	0x00bb8000
 8003dd8:	007a1200 	.word	0x007a1200
 8003ddc:	00f42400 	.word	0x00f42400

08003de0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e042      	b.n	8003e78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fd fcf8 	bl	80017fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2224      	movs	r2, #36	@ 0x24
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 fdbd 	bl	80049a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695a      	ldr	r2, [r3, #20]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08a      	sub	sp, #40	@ 0x28
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d175      	bne.n	8003f8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_UART_Transmit+0x2c>
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e06e      	b.n	8003f8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2221      	movs	r2, #33	@ 0x21
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ebe:	f7fd fe87 	bl	8001bd0 <HAL_GetTick>
 8003ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	88fa      	ldrh	r2, [r7, #6]
 8003ec8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	88fa      	ldrh	r2, [r7, #6]
 8003ece:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ed8:	d108      	bne.n	8003eec <HAL_UART_Transmit+0x6c>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d104      	bne.n	8003eec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	e003      	b.n	8003ef4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ef4:	e02e      	b.n	8003f54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2200      	movs	r2, #0
 8003efe:	2180      	movs	r1, #128	@ 0x80
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 fb1f 	bl	8004544 <UART_WaitOnFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e03a      	b.n	8003f8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10b      	bne.n	8003f36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	3302      	adds	r3, #2
 8003f32:	61bb      	str	r3, [r7, #24]
 8003f34:	e007      	b.n	8003f46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	781a      	ldrb	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	3301      	adds	r3, #1
 8003f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1cb      	bne.n	8003ef6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2200      	movs	r2, #0
 8003f66:	2140      	movs	r1, #64	@ 0x40
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 faeb 	bl	8004544 <UART_WaitOnFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d005      	beq.n	8003f80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e006      	b.n	8003f8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	e000      	b.n	8003f8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f8c:	2302      	movs	r3, #2
  }
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3720      	adds	r7, #32
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d112      	bne.n	8003fd6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_UART_Receive_IT+0x26>
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e00b      	b.n	8003fd8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 fb12 	bl	80045f6 <UART_Start_Receive_IT>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	e000      	b.n	8003fd8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
  }
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b0ba      	sub	sp, #232	@ 0xe8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800400c:	2300      	movs	r3, #0
 800400e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800401e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10f      	bne.n	8004046 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d009      	beq.n	8004046 <HAL_UART_IRQHandler+0x66>
 8004032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fbf2 	bl	8004828 <UART_Receive_IT>
      return;
 8004044:	e25b      	b.n	80044fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80de 	beq.w	800420c <HAL_UART_IRQHandler+0x22c>
 8004050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d106      	bne.n	800406a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800405c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004060:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80d1 	beq.w	800420c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800406a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00b      	beq.n	800408e <HAL_UART_IRQHandler+0xae>
 8004076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800407a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004086:	f043 0201 	orr.w	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800408e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00b      	beq.n	80040b2 <HAL_UART_IRQHandler+0xd2>
 800409a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040aa:	f043 0202 	orr.w	r2, r3, #2
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00b      	beq.n	80040d6 <HAL_UART_IRQHandler+0xf6>
 80040be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ce:	f043 0204 	orr.w	r2, r3, #4
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d011      	beq.n	8004106 <HAL_UART_IRQHandler+0x126>
 80040e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d105      	bne.n	80040fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	f043 0208 	orr.w	r2, r3, #8
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 81f2 	beq.w	80044f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <HAL_UART_IRQHandler+0x14e>
 800411c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fb7d 	bl	8004828 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004138:	2b40      	cmp	r3, #64	@ 0x40
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d103      	bne.n	800415a <HAL_UART_IRQHandler+0x17a>
 8004152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004156:	2b00      	cmp	r3, #0
 8004158:	d04f      	beq.n	80041fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 fa85 	bl	800466a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416a:	2b40      	cmp	r3, #64	@ 0x40
 800416c:	d141      	bne.n	80041f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3314      	adds	r3, #20
 8004174:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800417c:	e853 3f00 	ldrex	r3, [r3]
 8004180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004184:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800418c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3314      	adds	r3, #20
 8004196:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800419a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800419e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1d9      	bne.n	800416e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d013      	beq.n	80041ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c6:	4a7e      	ldr	r2, [pc, #504]	@ (80043c0 <HAL_UART_IRQHandler+0x3e0>)
 80041c8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fd ff5e 	bl	8002090 <HAL_DMA_Abort_IT>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d016      	beq.n	8004208 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041e4:	4610      	mov	r0, r2
 80041e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e8:	e00e      	b.n	8004208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f994 	bl	8004518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f0:	e00a      	b.n	8004208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f990 	bl	8004518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f8:	e006      	b.n	8004208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f98c 	bl	8004518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004206:	e175      	b.n	80044f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004208:	bf00      	nop
    return;
 800420a:	e173      	b.n	80044f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004210:	2b01      	cmp	r3, #1
 8004212:	f040 814f 	bne.w	80044b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8148 	beq.w	80044b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8141 	beq.w	80044b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004252:	2b40      	cmp	r3, #64	@ 0x40
 8004254:	f040 80b6 	bne.w	80043c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004264:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 8145 	beq.w	80044f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004276:	429a      	cmp	r2, r3
 8004278:	f080 813e 	bcs.w	80044f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004282:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800428e:	f000 8088 	beq.w	80043a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	330c      	adds	r3, #12
 8004298:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	330c      	adds	r3, #12
 80042ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1d9      	bne.n	8004292 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3314      	adds	r3, #20
 80042e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3314      	adds	r3, #20
 80042fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004302:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004306:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800430a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004314:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e1      	bne.n	80042de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3314      	adds	r3, #20
 8004320:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800432a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800432c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004330:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3314      	adds	r3, #20
 800433a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800433e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004340:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004344:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800434c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e3      	bne.n	800431a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800436a:	e853 3f00 	ldrex	r3, [r3]
 800436e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004370:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004372:	f023 0310 	bic.w	r3, r3, #16
 8004376:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	330c      	adds	r3, #12
 8004380:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004384:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004386:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800438a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004392:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e3      	bne.n	8004360 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439c:	4618      	mov	r0, r3
 800439e:	f7fd fe07 	bl	8001fb0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2202      	movs	r2, #2
 80043a6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	4619      	mov	r1, r3
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f8b7 	bl	800452c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043be:	e09b      	b.n	80044f8 <HAL_UART_IRQHandler+0x518>
 80043c0:	08004731 	.word	0x08004731
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 808e 	beq.w	80044fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8089 	beq.w	80044fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	330c      	adds	r3, #12
 80043f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004400:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	330c      	adds	r3, #12
 800440a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800440e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004410:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004414:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800441c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e3      	bne.n	80043ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3314      	adds	r3, #20
 8004428:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	623b      	str	r3, [r7, #32]
   return(result);
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3314      	adds	r3, #20
 8004442:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004446:	633a      	str	r2, [r7, #48]	@ 0x30
 8004448:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800444c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e3      	bne.n	8004422 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	330c      	adds	r3, #12
 800446e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	60fb      	str	r3, [r7, #12]
   return(result);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0310 	bic.w	r3, r3, #16
 800447e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	330c      	adds	r3, #12
 8004488:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800448c:	61fa      	str	r2, [r7, #28]
 800448e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004490:	69b9      	ldr	r1, [r7, #24]
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	e841 2300 	strex	r3, r2, [r1]
 8004498:	617b      	str	r3, [r7, #20]
   return(result);
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e3      	bne.n	8004468 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044aa:	4619      	mov	r1, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f83d 	bl	800452c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044b2:	e023      	b.n	80044fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d009      	beq.n	80044d4 <HAL_UART_IRQHandler+0x4f4>
 80044c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f943 	bl	8004758 <UART_Transmit_IT>
    return;
 80044d2:	e014      	b.n	80044fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00e      	beq.n	80044fe <HAL_UART_IRQHandler+0x51e>
 80044e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f983 	bl	80047f8 <UART_EndTransmit_IT>
    return;
 80044f2:	e004      	b.n	80044fe <HAL_UART_IRQHandler+0x51e>
    return;
 80044f4:	bf00      	nop
 80044f6:	e002      	b.n	80044fe <HAL_UART_IRQHandler+0x51e>
      return;
 80044f8:	bf00      	nop
 80044fa:	e000      	b.n	80044fe <HAL_UART_IRQHandler+0x51e>
      return;
 80044fc:	bf00      	nop
  }
}
 80044fe:	37e8      	adds	r7, #232	@ 0xe8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	4613      	mov	r3, r2
 8004552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004554:	e03b      	b.n	80045ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455c:	d037      	beq.n	80045ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455e:	f7fd fb37 	bl	8001bd0 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	6a3a      	ldr	r2, [r7, #32]
 800456a:	429a      	cmp	r2, r3
 800456c:	d302      	bcc.n	8004574 <UART_WaitOnFlagUntilTimeout+0x30>
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e03a      	b.n	80045ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b00      	cmp	r3, #0
 8004584:	d023      	beq.n	80045ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b80      	cmp	r3, #128	@ 0x80
 800458a:	d020      	beq.n	80045ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b40      	cmp	r3, #64	@ 0x40
 8004590:	d01d      	beq.n	80045ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b08      	cmp	r3, #8
 800459e:	d116      	bne.n	80045ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f857 	bl	800466a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2208      	movs	r2, #8
 80045c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e00f      	b.n	80045ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4013      	ands	r3, r2
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	429a      	cmp	r2, r3
 80045dc:	bf0c      	ite	eq
 80045de:	2301      	moveq	r3, #1
 80045e0:	2300      	movne	r3, #0
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d0b4      	beq.n	8004556 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b085      	sub	sp, #20
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	4613      	mov	r3, r2
 8004602:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	88fa      	ldrh	r2, [r7, #6]
 800460e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	88fa      	ldrh	r2, [r7, #6]
 8004614:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2222      	movs	r2, #34	@ 0x22
 8004620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d007      	beq.n	800463c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800463a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695a      	ldr	r2, [r3, #20]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0220 	orr.w	r2, r2, #32
 800465a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800466a:	b480      	push	{r7}
 800466c:	b095      	sub	sp, #84	@ 0x54
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	330c      	adds	r3, #12
 8004678:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004684:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004688:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	330c      	adds	r3, #12
 8004690:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004692:	643a      	str	r2, [r7, #64]	@ 0x40
 8004694:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004696:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004698:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e5      	bne.n	8004672 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3314      	adds	r3, #20
 80046ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	f023 0301 	bic.w	r3, r3, #1
 80046bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3314      	adds	r3, #20
 80046c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e5      	bne.n	80046a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d119      	bne.n	8004716 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	330c      	adds	r3, #12
 80046e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f023 0310 	bic.w	r3, r3, #16
 80046f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	330c      	adds	r3, #12
 8004700:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004702:	61ba      	str	r2, [r7, #24]
 8004704:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6979      	ldr	r1, [r7, #20]
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	613b      	str	r3, [r7, #16]
   return(result);
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e5      	bne.n	80046e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004724:	bf00      	nop
 8004726:	3754      	adds	r7, #84	@ 0x54
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f7ff fee4 	bl	8004518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004750:	bf00      	nop
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b21      	cmp	r3, #33	@ 0x21
 800476a:	d13e      	bne.n	80047ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004774:	d114      	bne.n	80047a0 <UART_Transmit_IT+0x48>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d110      	bne.n	80047a0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	461a      	mov	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004792:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	1c9a      	adds	r2, r3, #2
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	621a      	str	r2, [r3, #32]
 800479e:	e008      	b.n	80047b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	1c59      	adds	r1, r3, #1
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6211      	str	r1, [r2, #32]
 80047aa:	781a      	ldrb	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	4619      	mov	r1, r3
 80047c0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10f      	bne.n	80047e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e000      	b.n	80047ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
  }
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800480e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff fe73 	bl	8004504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08c      	sub	sp, #48	@ 0x30
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b22      	cmp	r3, #34	@ 0x22
 800483a:	f040 80ae 	bne.w	800499a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004846:	d117      	bne.n	8004878 <UART_Receive_IT+0x50>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d113      	bne.n	8004878 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004850:	2300      	movs	r3, #0
 8004852:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004858:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	b29b      	uxth	r3, r3
 8004862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004866:	b29a      	uxth	r2, r3
 8004868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004870:	1c9a      	adds	r2, r3, #2
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	629a      	str	r2, [r3, #40]	@ 0x28
 8004876:	e026      	b.n	80048c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800487e:	2300      	movs	r3, #0
 8004880:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800488a:	d007      	beq.n	800489c <UART_Receive_IT+0x74>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <UART_Receive_IT+0x82>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a6:	701a      	strb	r2, [r3, #0]
 80048a8:	e008      	b.n	80048bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	4619      	mov	r1, r3
 80048d4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d15d      	bne.n	8004996 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0220 	bic.w	r2, r2, #32
 80048e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695a      	ldr	r2, [r3, #20]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0201 	bic.w	r2, r2, #1
 8004908:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491c:	2b01      	cmp	r3, #1
 800491e:	d135      	bne.n	800498c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	330c      	adds	r3, #12
 800492c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	613b      	str	r3, [r7, #16]
   return(result);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f023 0310 	bic.w	r3, r3, #16
 800493c:	627b      	str	r3, [r7, #36]	@ 0x24
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004946:	623a      	str	r2, [r7, #32]
 8004948:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	69f9      	ldr	r1, [r7, #28]
 800494c:	6a3a      	ldr	r2, [r7, #32]
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	61bb      	str	r3, [r7, #24]
   return(result);
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e5      	bne.n	8004926 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	2b10      	cmp	r3, #16
 8004966:	d10a      	bne.n	800497e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004968:	2300      	movs	r3, #0
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004982:	4619      	mov	r1, r3
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff fdd1 	bl	800452c <HAL_UARTEx_RxEventCallback>
 800498a:	e002      	b.n	8004992 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7fc fce3 	bl	8001358 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e002      	b.n	800499c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	e000      	b.n	800499c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800499a:	2302      	movs	r3, #2
  }
}
 800499c:	4618      	mov	r0, r3
 800499e:	3730      	adds	r7, #48	@ 0x30
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a8:	b0c0      	sub	sp, #256	@ 0x100
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c0:	68d9      	ldr	r1, [r3, #12]
 80049c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	ea40 0301 	orr.w	r3, r0, r1
 80049cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	431a      	orrs	r2, r3
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80049fc:	f021 010c 	bic.w	r1, r1, #12
 8004a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1e:	6999      	ldr	r1, [r3, #24]
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	ea40 0301 	orr.w	r3, r0, r1
 8004a2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4b8f      	ldr	r3, [pc, #572]	@ (8004c70 <UART_SetConfig+0x2cc>)
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d005      	beq.n	8004a44 <UART_SetConfig+0xa0>
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4b8d      	ldr	r3, [pc, #564]	@ (8004c74 <UART_SetConfig+0x2d0>)
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d104      	bne.n	8004a4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a44:	f7ff f876 	bl	8003b34 <HAL_RCC_GetPCLK2Freq>
 8004a48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a4c:	e003      	b.n	8004a56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a4e:	f7ff f85d 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 8004a52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a60:	f040 810c 	bne.w	8004c7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a76:	4622      	mov	r2, r4
 8004a78:	462b      	mov	r3, r5
 8004a7a:	1891      	adds	r1, r2, r2
 8004a7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a7e:	415b      	adcs	r3, r3
 8004a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a86:	4621      	mov	r1, r4
 8004a88:	eb12 0801 	adds.w	r8, r2, r1
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	eb43 0901 	adc.w	r9, r3, r1
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aa6:	4690      	mov	r8, r2
 8004aa8:	4699      	mov	r9, r3
 8004aaa:	4623      	mov	r3, r4
 8004aac:	eb18 0303 	adds.w	r3, r8, r3
 8004ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	eb49 0303 	adc.w	r3, r9, r3
 8004aba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004aca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ace:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	18db      	adds	r3, r3, r3
 8004ad6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ad8:	4613      	mov	r3, r2
 8004ada:	eb42 0303 	adc.w	r3, r2, r3
 8004ade:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ae0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ae4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ae8:	f7fc f8ce 	bl	8000c88 <__aeabi_uldivmod>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4b61      	ldr	r3, [pc, #388]	@ (8004c78 <UART_SetConfig+0x2d4>)
 8004af2:	fba3 2302 	umull	r2, r3, r3, r2
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	011c      	lsls	r4, r3, #4
 8004afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004afe:	2200      	movs	r2, #0
 8004b00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	464b      	mov	r3, r9
 8004b10:	1891      	adds	r1, r2, r2
 8004b12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b14:	415b      	adcs	r3, r3
 8004b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	eb12 0a01 	adds.w	sl, r2, r1
 8004b22:	4649      	mov	r1, r9
 8004b24:	eb43 0b01 	adc.w	fp, r3, r1
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b3c:	4692      	mov	sl, r2
 8004b3e:	469b      	mov	fp, r3
 8004b40:	4643      	mov	r3, r8
 8004b42:	eb1a 0303 	adds.w	r3, sl, r3
 8004b46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	18db      	adds	r3, r3, r3
 8004b6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b6e:	4613      	mov	r3, r2
 8004b70:	eb42 0303 	adc.w	r3, r2, r3
 8004b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b7e:	f7fc f883 	bl	8000c88 <__aeabi_uldivmod>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4611      	mov	r1, r2
 8004b88:	4b3b      	ldr	r3, [pc, #236]	@ (8004c78 <UART_SetConfig+0x2d4>)
 8004b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	2264      	movs	r2, #100	@ 0x64
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	1acb      	subs	r3, r1, r3
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b9e:	4b36      	ldr	r3, [pc, #216]	@ (8004c78 <UART_SetConfig+0x2d4>)
 8004ba0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ba4:	095b      	lsrs	r3, r3, #5
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004bac:	441c      	add	r4, r3
 8004bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bb8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004bbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004bc0:	4642      	mov	r2, r8
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	1891      	adds	r1, r2, r2
 8004bc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004bc8:	415b      	adcs	r3, r3
 8004bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	1851      	adds	r1, r2, r1
 8004bd4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	414b      	adcs	r3, r1
 8004bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004be8:	4659      	mov	r1, fp
 8004bea:	00cb      	lsls	r3, r1, #3
 8004bec:	4651      	mov	r1, sl
 8004bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bf2:	4651      	mov	r1, sl
 8004bf4:	00ca      	lsls	r2, r1, #3
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	189b      	adds	r3, r3, r2
 8004c00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c04:	464b      	mov	r3, r9
 8004c06:	460a      	mov	r2, r1
 8004c08:	eb42 0303 	adc.w	r3, r2, r3
 8004c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c24:	460b      	mov	r3, r1
 8004c26:	18db      	adds	r3, r3, r3
 8004c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	eb42 0303 	adc.w	r3, r2, r3
 8004c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c3a:	f7fc f825 	bl	8000c88 <__aeabi_uldivmod>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4b0d      	ldr	r3, [pc, #52]	@ (8004c78 <UART_SetConfig+0x2d4>)
 8004c44:	fba3 1302 	umull	r1, r3, r3, r2
 8004c48:	095b      	lsrs	r3, r3, #5
 8004c4a:	2164      	movs	r1, #100	@ 0x64
 8004c4c:	fb01 f303 	mul.w	r3, r1, r3
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	3332      	adds	r3, #50	@ 0x32
 8004c56:	4a08      	ldr	r2, [pc, #32]	@ (8004c78 <UART_SetConfig+0x2d4>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	095b      	lsrs	r3, r3, #5
 8004c5e:	f003 0207 	and.w	r2, r3, #7
 8004c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4422      	add	r2, r4
 8004c6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c6c:	e106      	b.n	8004e7c <UART_SetConfig+0x4d8>
 8004c6e:	bf00      	nop
 8004c70:	40011000 	.word	0x40011000
 8004c74:	40011400 	.word	0x40011400
 8004c78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c80:	2200      	movs	r2, #0
 8004c82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c8e:	4642      	mov	r2, r8
 8004c90:	464b      	mov	r3, r9
 8004c92:	1891      	adds	r1, r2, r2
 8004c94:	6239      	str	r1, [r7, #32]
 8004c96:	415b      	adcs	r3, r3
 8004c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c9e:	4641      	mov	r1, r8
 8004ca0:	1854      	adds	r4, r2, r1
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	eb43 0501 	adc.w	r5, r3, r1
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	00eb      	lsls	r3, r5, #3
 8004cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cb6:	00e2      	lsls	r2, r4, #3
 8004cb8:	4614      	mov	r4, r2
 8004cba:	461d      	mov	r5, r3
 8004cbc:	4643      	mov	r3, r8
 8004cbe:	18e3      	adds	r3, r4, r3
 8004cc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cc4:	464b      	mov	r3, r9
 8004cc6:	eb45 0303 	adc.w	r3, r5, r3
 8004cca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004cea:	4629      	mov	r1, r5
 8004cec:	008b      	lsls	r3, r1, #2
 8004cee:	4621      	mov	r1, r4
 8004cf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	008a      	lsls	r2, r1, #2
 8004cf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004cfc:	f7fb ffc4 	bl	8000c88 <__aeabi_uldivmod>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4b60      	ldr	r3, [pc, #384]	@ (8004e88 <UART_SetConfig+0x4e4>)
 8004d06:	fba3 2302 	umull	r2, r3, r3, r2
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	011c      	lsls	r4, r3, #4
 8004d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d20:	4642      	mov	r2, r8
 8004d22:	464b      	mov	r3, r9
 8004d24:	1891      	adds	r1, r2, r2
 8004d26:	61b9      	str	r1, [r7, #24]
 8004d28:	415b      	adcs	r3, r3
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d30:	4641      	mov	r1, r8
 8004d32:	1851      	adds	r1, r2, r1
 8004d34:	6139      	str	r1, [r7, #16]
 8004d36:	4649      	mov	r1, r9
 8004d38:	414b      	adcs	r3, r1
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d48:	4659      	mov	r1, fp
 8004d4a:	00cb      	lsls	r3, r1, #3
 8004d4c:	4651      	mov	r1, sl
 8004d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d52:	4651      	mov	r1, sl
 8004d54:	00ca      	lsls	r2, r1, #3
 8004d56:	4610      	mov	r0, r2
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	189b      	adds	r3, r3, r2
 8004d60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d64:	464b      	mov	r3, r9
 8004d66:	460a      	mov	r2, r1
 8004d68:	eb42 0303 	adc.w	r3, r2, r3
 8004d6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d88:	4649      	mov	r1, r9
 8004d8a:	008b      	lsls	r3, r1, #2
 8004d8c:	4641      	mov	r1, r8
 8004d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d92:	4641      	mov	r1, r8
 8004d94:	008a      	lsls	r2, r1, #2
 8004d96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d9a:	f7fb ff75 	bl	8000c88 <__aeabi_uldivmod>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4611      	mov	r1, r2
 8004da4:	4b38      	ldr	r3, [pc, #224]	@ (8004e88 <UART_SetConfig+0x4e4>)
 8004da6:	fba3 2301 	umull	r2, r3, r3, r1
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	2264      	movs	r2, #100	@ 0x64
 8004dae:	fb02 f303 	mul.w	r3, r2, r3
 8004db2:	1acb      	subs	r3, r1, r3
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	3332      	adds	r3, #50	@ 0x32
 8004db8:	4a33      	ldr	r2, [pc, #204]	@ (8004e88 <UART_SetConfig+0x4e4>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dc4:	441c      	add	r4, r3
 8004dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dca:	2200      	movs	r2, #0
 8004dcc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004dce:	677a      	str	r2, [r7, #116]	@ 0x74
 8004dd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	464b      	mov	r3, r9
 8004dd8:	1891      	adds	r1, r2, r2
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	415b      	adcs	r3, r3
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004de4:	4641      	mov	r1, r8
 8004de6:	1851      	adds	r1, r2, r1
 8004de8:	6039      	str	r1, [r7, #0]
 8004dea:	4649      	mov	r1, r9
 8004dec:	414b      	adcs	r3, r1
 8004dee:	607b      	str	r3, [r7, #4]
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dfc:	4659      	mov	r1, fp
 8004dfe:	00cb      	lsls	r3, r1, #3
 8004e00:	4651      	mov	r1, sl
 8004e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e06:	4651      	mov	r1, sl
 8004e08:	00ca      	lsls	r2, r1, #3
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4603      	mov	r3, r0
 8004e10:	4642      	mov	r2, r8
 8004e12:	189b      	adds	r3, r3, r2
 8004e14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e16:	464b      	mov	r3, r9
 8004e18:	460a      	mov	r2, r1
 8004e1a:	eb42 0303 	adc.w	r3, r2, r3
 8004e1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e38:	4649      	mov	r1, r9
 8004e3a:	008b      	lsls	r3, r1, #2
 8004e3c:	4641      	mov	r1, r8
 8004e3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e42:	4641      	mov	r1, r8
 8004e44:	008a      	lsls	r2, r1, #2
 8004e46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e4a:	f7fb ff1d 	bl	8000c88 <__aeabi_uldivmod>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	4b0d      	ldr	r3, [pc, #52]	@ (8004e88 <UART_SetConfig+0x4e4>)
 8004e54:	fba3 1302 	umull	r1, r3, r3, r2
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	2164      	movs	r1, #100	@ 0x64
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	3332      	adds	r3, #50	@ 0x32
 8004e66:	4a08      	ldr	r2, [pc, #32]	@ (8004e88 <UART_SetConfig+0x4e4>)
 8004e68:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6c:	095b      	lsrs	r3, r3, #5
 8004e6e:	f003 020f 	and.w	r2, r3, #15
 8004e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4422      	add	r2, r4
 8004e7a:	609a      	str	r2, [r3, #8]
}
 8004e7c:	bf00      	nop
 8004e7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e82:	46bd      	mov	sp, r7
 8004e84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e88:	51eb851f 	.word	0x51eb851f

08004e8c <__cvt>:
 8004e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e90:	ec57 6b10 	vmov	r6, r7, d0
 8004e94:	2f00      	cmp	r7, #0
 8004e96:	460c      	mov	r4, r1
 8004e98:	4619      	mov	r1, r3
 8004e9a:	463b      	mov	r3, r7
 8004e9c:	bfbb      	ittet	lt
 8004e9e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004ea2:	461f      	movlt	r7, r3
 8004ea4:	2300      	movge	r3, #0
 8004ea6:	232d      	movlt	r3, #45	@ 0x2d
 8004ea8:	700b      	strb	r3, [r1, #0]
 8004eaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004eac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004eb0:	4691      	mov	r9, r2
 8004eb2:	f023 0820 	bic.w	r8, r3, #32
 8004eb6:	bfbc      	itt	lt
 8004eb8:	4632      	movlt	r2, r6
 8004eba:	4616      	movlt	r6, r2
 8004ebc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ec0:	d005      	beq.n	8004ece <__cvt+0x42>
 8004ec2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004ec6:	d100      	bne.n	8004eca <__cvt+0x3e>
 8004ec8:	3401      	adds	r4, #1
 8004eca:	2102      	movs	r1, #2
 8004ecc:	e000      	b.n	8004ed0 <__cvt+0x44>
 8004ece:	2103      	movs	r1, #3
 8004ed0:	ab03      	add	r3, sp, #12
 8004ed2:	9301      	str	r3, [sp, #4]
 8004ed4:	ab02      	add	r3, sp, #8
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	ec47 6b10 	vmov	d0, r6, r7
 8004edc:	4653      	mov	r3, sl
 8004ede:	4622      	mov	r2, r4
 8004ee0:	f001 f8c6 	bl	8006070 <_dtoa_r>
 8004ee4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004ee8:	4605      	mov	r5, r0
 8004eea:	d119      	bne.n	8004f20 <__cvt+0x94>
 8004eec:	f019 0f01 	tst.w	r9, #1
 8004ef0:	d00e      	beq.n	8004f10 <__cvt+0x84>
 8004ef2:	eb00 0904 	add.w	r9, r0, r4
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2300      	movs	r3, #0
 8004efa:	4630      	mov	r0, r6
 8004efc:	4639      	mov	r1, r7
 8004efe:	f7fb fde3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f02:	b108      	cbz	r0, 8004f08 <__cvt+0x7c>
 8004f04:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f08:	2230      	movs	r2, #48	@ 0x30
 8004f0a:	9b03      	ldr	r3, [sp, #12]
 8004f0c:	454b      	cmp	r3, r9
 8004f0e:	d31e      	bcc.n	8004f4e <__cvt+0xc2>
 8004f10:	9b03      	ldr	r3, [sp, #12]
 8004f12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f14:	1b5b      	subs	r3, r3, r5
 8004f16:	4628      	mov	r0, r5
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	b004      	add	sp, #16
 8004f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f24:	eb00 0904 	add.w	r9, r0, r4
 8004f28:	d1e5      	bne.n	8004ef6 <__cvt+0x6a>
 8004f2a:	7803      	ldrb	r3, [r0, #0]
 8004f2c:	2b30      	cmp	r3, #48	@ 0x30
 8004f2e:	d10a      	bne.n	8004f46 <__cvt+0xba>
 8004f30:	2200      	movs	r2, #0
 8004f32:	2300      	movs	r3, #0
 8004f34:	4630      	mov	r0, r6
 8004f36:	4639      	mov	r1, r7
 8004f38:	f7fb fdc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f3c:	b918      	cbnz	r0, 8004f46 <__cvt+0xba>
 8004f3e:	f1c4 0401 	rsb	r4, r4, #1
 8004f42:	f8ca 4000 	str.w	r4, [sl]
 8004f46:	f8da 3000 	ldr.w	r3, [sl]
 8004f4a:	4499      	add	r9, r3
 8004f4c:	e7d3      	b.n	8004ef6 <__cvt+0x6a>
 8004f4e:	1c59      	adds	r1, r3, #1
 8004f50:	9103      	str	r1, [sp, #12]
 8004f52:	701a      	strb	r2, [r3, #0]
 8004f54:	e7d9      	b.n	8004f0a <__cvt+0x7e>

08004f56 <__exponent>:
 8004f56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f58:	2900      	cmp	r1, #0
 8004f5a:	bfba      	itte	lt
 8004f5c:	4249      	neglt	r1, r1
 8004f5e:	232d      	movlt	r3, #45	@ 0x2d
 8004f60:	232b      	movge	r3, #43	@ 0x2b
 8004f62:	2909      	cmp	r1, #9
 8004f64:	7002      	strb	r2, [r0, #0]
 8004f66:	7043      	strb	r3, [r0, #1]
 8004f68:	dd29      	ble.n	8004fbe <__exponent+0x68>
 8004f6a:	f10d 0307 	add.w	r3, sp, #7
 8004f6e:	461d      	mov	r5, r3
 8004f70:	270a      	movs	r7, #10
 8004f72:	461a      	mov	r2, r3
 8004f74:	fbb1 f6f7 	udiv	r6, r1, r7
 8004f78:	fb07 1416 	mls	r4, r7, r6, r1
 8004f7c:	3430      	adds	r4, #48	@ 0x30
 8004f7e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004f82:	460c      	mov	r4, r1
 8004f84:	2c63      	cmp	r4, #99	@ 0x63
 8004f86:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f8a:	4631      	mov	r1, r6
 8004f8c:	dcf1      	bgt.n	8004f72 <__exponent+0x1c>
 8004f8e:	3130      	adds	r1, #48	@ 0x30
 8004f90:	1e94      	subs	r4, r2, #2
 8004f92:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004f96:	1c41      	adds	r1, r0, #1
 8004f98:	4623      	mov	r3, r4
 8004f9a:	42ab      	cmp	r3, r5
 8004f9c:	d30a      	bcc.n	8004fb4 <__exponent+0x5e>
 8004f9e:	f10d 0309 	add.w	r3, sp, #9
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	42ac      	cmp	r4, r5
 8004fa6:	bf88      	it	hi
 8004fa8:	2300      	movhi	r3, #0
 8004faa:	3302      	adds	r3, #2
 8004fac:	4403      	add	r3, r0
 8004fae:	1a18      	subs	r0, r3, r0
 8004fb0:	b003      	add	sp, #12
 8004fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fb4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004fb8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004fbc:	e7ed      	b.n	8004f9a <__exponent+0x44>
 8004fbe:	2330      	movs	r3, #48	@ 0x30
 8004fc0:	3130      	adds	r1, #48	@ 0x30
 8004fc2:	7083      	strb	r3, [r0, #2]
 8004fc4:	70c1      	strb	r1, [r0, #3]
 8004fc6:	1d03      	adds	r3, r0, #4
 8004fc8:	e7f1      	b.n	8004fae <__exponent+0x58>
	...

08004fcc <_printf_float>:
 8004fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd0:	b08d      	sub	sp, #52	@ 0x34
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004fd8:	4616      	mov	r6, r2
 8004fda:	461f      	mov	r7, r3
 8004fdc:	4605      	mov	r5, r0
 8004fde:	f000 ff3f 	bl	8005e60 <_localeconv_r>
 8004fe2:	6803      	ldr	r3, [r0, #0]
 8004fe4:	9304      	str	r3, [sp, #16]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fb f942 	bl	8000270 <strlen>
 8004fec:	2300      	movs	r3, #0
 8004fee:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ff4:	9005      	str	r0, [sp, #20]
 8004ff6:	3307      	adds	r3, #7
 8004ff8:	f023 0307 	bic.w	r3, r3, #7
 8004ffc:	f103 0208 	add.w	r2, r3, #8
 8005000:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005004:	f8d4 b000 	ldr.w	fp, [r4]
 8005008:	f8c8 2000 	str.w	r2, [r8]
 800500c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005010:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005014:	9307      	str	r3, [sp, #28]
 8005016:	f8cd 8018 	str.w	r8, [sp, #24]
 800501a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800501e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005022:	4b9c      	ldr	r3, [pc, #624]	@ (8005294 <_printf_float+0x2c8>)
 8005024:	f04f 32ff 	mov.w	r2, #4294967295
 8005028:	f7fb fd80 	bl	8000b2c <__aeabi_dcmpun>
 800502c:	bb70      	cbnz	r0, 800508c <_printf_float+0xc0>
 800502e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005032:	4b98      	ldr	r3, [pc, #608]	@ (8005294 <_printf_float+0x2c8>)
 8005034:	f04f 32ff 	mov.w	r2, #4294967295
 8005038:	f7fb fd5a 	bl	8000af0 <__aeabi_dcmple>
 800503c:	bb30      	cbnz	r0, 800508c <_printf_float+0xc0>
 800503e:	2200      	movs	r2, #0
 8005040:	2300      	movs	r3, #0
 8005042:	4640      	mov	r0, r8
 8005044:	4649      	mov	r1, r9
 8005046:	f7fb fd49 	bl	8000adc <__aeabi_dcmplt>
 800504a:	b110      	cbz	r0, 8005052 <_printf_float+0x86>
 800504c:	232d      	movs	r3, #45	@ 0x2d
 800504e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005052:	4a91      	ldr	r2, [pc, #580]	@ (8005298 <_printf_float+0x2cc>)
 8005054:	4b91      	ldr	r3, [pc, #580]	@ (800529c <_printf_float+0x2d0>)
 8005056:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800505a:	bf94      	ite	ls
 800505c:	4690      	movls	r8, r2
 800505e:	4698      	movhi	r8, r3
 8005060:	2303      	movs	r3, #3
 8005062:	6123      	str	r3, [r4, #16]
 8005064:	f02b 0304 	bic.w	r3, fp, #4
 8005068:	6023      	str	r3, [r4, #0]
 800506a:	f04f 0900 	mov.w	r9, #0
 800506e:	9700      	str	r7, [sp, #0]
 8005070:	4633      	mov	r3, r6
 8005072:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005074:	4621      	mov	r1, r4
 8005076:	4628      	mov	r0, r5
 8005078:	f000 f9d2 	bl	8005420 <_printf_common>
 800507c:	3001      	adds	r0, #1
 800507e:	f040 808d 	bne.w	800519c <_printf_float+0x1d0>
 8005082:	f04f 30ff 	mov.w	r0, #4294967295
 8005086:	b00d      	add	sp, #52	@ 0x34
 8005088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508c:	4642      	mov	r2, r8
 800508e:	464b      	mov	r3, r9
 8005090:	4640      	mov	r0, r8
 8005092:	4649      	mov	r1, r9
 8005094:	f7fb fd4a 	bl	8000b2c <__aeabi_dcmpun>
 8005098:	b140      	cbz	r0, 80050ac <_printf_float+0xe0>
 800509a:	464b      	mov	r3, r9
 800509c:	2b00      	cmp	r3, #0
 800509e:	bfbc      	itt	lt
 80050a0:	232d      	movlt	r3, #45	@ 0x2d
 80050a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80050a6:	4a7e      	ldr	r2, [pc, #504]	@ (80052a0 <_printf_float+0x2d4>)
 80050a8:	4b7e      	ldr	r3, [pc, #504]	@ (80052a4 <_printf_float+0x2d8>)
 80050aa:	e7d4      	b.n	8005056 <_printf_float+0x8a>
 80050ac:	6863      	ldr	r3, [r4, #4]
 80050ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80050b2:	9206      	str	r2, [sp, #24]
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	d13b      	bne.n	8005130 <_printf_float+0x164>
 80050b8:	2306      	movs	r3, #6
 80050ba:	6063      	str	r3, [r4, #4]
 80050bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80050c0:	2300      	movs	r3, #0
 80050c2:	6022      	str	r2, [r4, #0]
 80050c4:	9303      	str	r3, [sp, #12]
 80050c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80050c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80050cc:	ab09      	add	r3, sp, #36	@ 0x24
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	6861      	ldr	r1, [r4, #4]
 80050d2:	ec49 8b10 	vmov	d0, r8, r9
 80050d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80050da:	4628      	mov	r0, r5
 80050dc:	f7ff fed6 	bl	8004e8c <__cvt>
 80050e0:	9b06      	ldr	r3, [sp, #24]
 80050e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80050e4:	2b47      	cmp	r3, #71	@ 0x47
 80050e6:	4680      	mov	r8, r0
 80050e8:	d129      	bne.n	800513e <_printf_float+0x172>
 80050ea:	1cc8      	adds	r0, r1, #3
 80050ec:	db02      	blt.n	80050f4 <_printf_float+0x128>
 80050ee:	6863      	ldr	r3, [r4, #4]
 80050f0:	4299      	cmp	r1, r3
 80050f2:	dd41      	ble.n	8005178 <_printf_float+0x1ac>
 80050f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80050f8:	fa5f fa8a 	uxtb.w	sl, sl
 80050fc:	3901      	subs	r1, #1
 80050fe:	4652      	mov	r2, sl
 8005100:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005104:	9109      	str	r1, [sp, #36]	@ 0x24
 8005106:	f7ff ff26 	bl	8004f56 <__exponent>
 800510a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800510c:	1813      	adds	r3, r2, r0
 800510e:	2a01      	cmp	r2, #1
 8005110:	4681      	mov	r9, r0
 8005112:	6123      	str	r3, [r4, #16]
 8005114:	dc02      	bgt.n	800511c <_printf_float+0x150>
 8005116:	6822      	ldr	r2, [r4, #0]
 8005118:	07d2      	lsls	r2, r2, #31
 800511a:	d501      	bpl.n	8005120 <_printf_float+0x154>
 800511c:	3301      	adds	r3, #1
 800511e:	6123      	str	r3, [r4, #16]
 8005120:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0a2      	beq.n	800506e <_printf_float+0xa2>
 8005128:	232d      	movs	r3, #45	@ 0x2d
 800512a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800512e:	e79e      	b.n	800506e <_printf_float+0xa2>
 8005130:	9a06      	ldr	r2, [sp, #24]
 8005132:	2a47      	cmp	r2, #71	@ 0x47
 8005134:	d1c2      	bne.n	80050bc <_printf_float+0xf0>
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1c0      	bne.n	80050bc <_printf_float+0xf0>
 800513a:	2301      	movs	r3, #1
 800513c:	e7bd      	b.n	80050ba <_printf_float+0xee>
 800513e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005142:	d9db      	bls.n	80050fc <_printf_float+0x130>
 8005144:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005148:	d118      	bne.n	800517c <_printf_float+0x1b0>
 800514a:	2900      	cmp	r1, #0
 800514c:	6863      	ldr	r3, [r4, #4]
 800514e:	dd0b      	ble.n	8005168 <_printf_float+0x19c>
 8005150:	6121      	str	r1, [r4, #16]
 8005152:	b913      	cbnz	r3, 800515a <_printf_float+0x18e>
 8005154:	6822      	ldr	r2, [r4, #0]
 8005156:	07d0      	lsls	r0, r2, #31
 8005158:	d502      	bpl.n	8005160 <_printf_float+0x194>
 800515a:	3301      	adds	r3, #1
 800515c:	440b      	add	r3, r1
 800515e:	6123      	str	r3, [r4, #16]
 8005160:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005162:	f04f 0900 	mov.w	r9, #0
 8005166:	e7db      	b.n	8005120 <_printf_float+0x154>
 8005168:	b913      	cbnz	r3, 8005170 <_printf_float+0x1a4>
 800516a:	6822      	ldr	r2, [r4, #0]
 800516c:	07d2      	lsls	r2, r2, #31
 800516e:	d501      	bpl.n	8005174 <_printf_float+0x1a8>
 8005170:	3302      	adds	r3, #2
 8005172:	e7f4      	b.n	800515e <_printf_float+0x192>
 8005174:	2301      	movs	r3, #1
 8005176:	e7f2      	b.n	800515e <_printf_float+0x192>
 8005178:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800517c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800517e:	4299      	cmp	r1, r3
 8005180:	db05      	blt.n	800518e <_printf_float+0x1c2>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	6121      	str	r1, [r4, #16]
 8005186:	07d8      	lsls	r0, r3, #31
 8005188:	d5ea      	bpl.n	8005160 <_printf_float+0x194>
 800518a:	1c4b      	adds	r3, r1, #1
 800518c:	e7e7      	b.n	800515e <_printf_float+0x192>
 800518e:	2900      	cmp	r1, #0
 8005190:	bfd4      	ite	le
 8005192:	f1c1 0202 	rsble	r2, r1, #2
 8005196:	2201      	movgt	r2, #1
 8005198:	4413      	add	r3, r2
 800519a:	e7e0      	b.n	800515e <_printf_float+0x192>
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	055a      	lsls	r2, r3, #21
 80051a0:	d407      	bmi.n	80051b2 <_printf_float+0x1e6>
 80051a2:	6923      	ldr	r3, [r4, #16]
 80051a4:	4642      	mov	r2, r8
 80051a6:	4631      	mov	r1, r6
 80051a8:	4628      	mov	r0, r5
 80051aa:	47b8      	blx	r7
 80051ac:	3001      	adds	r0, #1
 80051ae:	d12b      	bne.n	8005208 <_printf_float+0x23c>
 80051b0:	e767      	b.n	8005082 <_printf_float+0xb6>
 80051b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051b6:	f240 80dd 	bls.w	8005374 <_printf_float+0x3a8>
 80051ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80051be:	2200      	movs	r2, #0
 80051c0:	2300      	movs	r3, #0
 80051c2:	f7fb fc81 	bl	8000ac8 <__aeabi_dcmpeq>
 80051c6:	2800      	cmp	r0, #0
 80051c8:	d033      	beq.n	8005232 <_printf_float+0x266>
 80051ca:	4a37      	ldr	r2, [pc, #220]	@ (80052a8 <_printf_float+0x2dc>)
 80051cc:	2301      	movs	r3, #1
 80051ce:	4631      	mov	r1, r6
 80051d0:	4628      	mov	r0, r5
 80051d2:	47b8      	blx	r7
 80051d4:	3001      	adds	r0, #1
 80051d6:	f43f af54 	beq.w	8005082 <_printf_float+0xb6>
 80051da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80051de:	4543      	cmp	r3, r8
 80051e0:	db02      	blt.n	80051e8 <_printf_float+0x21c>
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	07d8      	lsls	r0, r3, #31
 80051e6:	d50f      	bpl.n	8005208 <_printf_float+0x23c>
 80051e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051ec:	4631      	mov	r1, r6
 80051ee:	4628      	mov	r0, r5
 80051f0:	47b8      	blx	r7
 80051f2:	3001      	adds	r0, #1
 80051f4:	f43f af45 	beq.w	8005082 <_printf_float+0xb6>
 80051f8:	f04f 0900 	mov.w	r9, #0
 80051fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8005200:	f104 0a1a 	add.w	sl, r4, #26
 8005204:	45c8      	cmp	r8, r9
 8005206:	dc09      	bgt.n	800521c <_printf_float+0x250>
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	079b      	lsls	r3, r3, #30
 800520c:	f100 8103 	bmi.w	8005416 <_printf_float+0x44a>
 8005210:	68e0      	ldr	r0, [r4, #12]
 8005212:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005214:	4298      	cmp	r0, r3
 8005216:	bfb8      	it	lt
 8005218:	4618      	movlt	r0, r3
 800521a:	e734      	b.n	8005086 <_printf_float+0xba>
 800521c:	2301      	movs	r3, #1
 800521e:	4652      	mov	r2, sl
 8005220:	4631      	mov	r1, r6
 8005222:	4628      	mov	r0, r5
 8005224:	47b8      	blx	r7
 8005226:	3001      	adds	r0, #1
 8005228:	f43f af2b 	beq.w	8005082 <_printf_float+0xb6>
 800522c:	f109 0901 	add.w	r9, r9, #1
 8005230:	e7e8      	b.n	8005204 <_printf_float+0x238>
 8005232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005234:	2b00      	cmp	r3, #0
 8005236:	dc39      	bgt.n	80052ac <_printf_float+0x2e0>
 8005238:	4a1b      	ldr	r2, [pc, #108]	@ (80052a8 <_printf_float+0x2dc>)
 800523a:	2301      	movs	r3, #1
 800523c:	4631      	mov	r1, r6
 800523e:	4628      	mov	r0, r5
 8005240:	47b8      	blx	r7
 8005242:	3001      	adds	r0, #1
 8005244:	f43f af1d 	beq.w	8005082 <_printf_float+0xb6>
 8005248:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800524c:	ea59 0303 	orrs.w	r3, r9, r3
 8005250:	d102      	bne.n	8005258 <_printf_float+0x28c>
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	07d9      	lsls	r1, r3, #31
 8005256:	d5d7      	bpl.n	8005208 <_printf_float+0x23c>
 8005258:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800525c:	4631      	mov	r1, r6
 800525e:	4628      	mov	r0, r5
 8005260:	47b8      	blx	r7
 8005262:	3001      	adds	r0, #1
 8005264:	f43f af0d 	beq.w	8005082 <_printf_float+0xb6>
 8005268:	f04f 0a00 	mov.w	sl, #0
 800526c:	f104 0b1a 	add.w	fp, r4, #26
 8005270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005272:	425b      	negs	r3, r3
 8005274:	4553      	cmp	r3, sl
 8005276:	dc01      	bgt.n	800527c <_printf_float+0x2b0>
 8005278:	464b      	mov	r3, r9
 800527a:	e793      	b.n	80051a4 <_printf_float+0x1d8>
 800527c:	2301      	movs	r3, #1
 800527e:	465a      	mov	r2, fp
 8005280:	4631      	mov	r1, r6
 8005282:	4628      	mov	r0, r5
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	f43f aefb 	beq.w	8005082 <_printf_float+0xb6>
 800528c:	f10a 0a01 	add.w	sl, sl, #1
 8005290:	e7ee      	b.n	8005270 <_printf_float+0x2a4>
 8005292:	bf00      	nop
 8005294:	7fefffff 	.word	0x7fefffff
 8005298:	08009ee8 	.word	0x08009ee8
 800529c:	08009eec 	.word	0x08009eec
 80052a0:	08009ef0 	.word	0x08009ef0
 80052a4:	08009ef4 	.word	0x08009ef4
 80052a8:	0800a288 	.word	0x0800a288
 80052ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80052b2:	4553      	cmp	r3, sl
 80052b4:	bfa8      	it	ge
 80052b6:	4653      	movge	r3, sl
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	4699      	mov	r9, r3
 80052bc:	dc36      	bgt.n	800532c <_printf_float+0x360>
 80052be:	f04f 0b00 	mov.w	fp, #0
 80052c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052c6:	f104 021a 	add.w	r2, r4, #26
 80052ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052cc:	9306      	str	r3, [sp, #24]
 80052ce:	eba3 0309 	sub.w	r3, r3, r9
 80052d2:	455b      	cmp	r3, fp
 80052d4:	dc31      	bgt.n	800533a <_printf_float+0x36e>
 80052d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052d8:	459a      	cmp	sl, r3
 80052da:	dc3a      	bgt.n	8005352 <_printf_float+0x386>
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	07da      	lsls	r2, r3, #31
 80052e0:	d437      	bmi.n	8005352 <_printf_float+0x386>
 80052e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052e4:	ebaa 0903 	sub.w	r9, sl, r3
 80052e8:	9b06      	ldr	r3, [sp, #24]
 80052ea:	ebaa 0303 	sub.w	r3, sl, r3
 80052ee:	4599      	cmp	r9, r3
 80052f0:	bfa8      	it	ge
 80052f2:	4699      	movge	r9, r3
 80052f4:	f1b9 0f00 	cmp.w	r9, #0
 80052f8:	dc33      	bgt.n	8005362 <_printf_float+0x396>
 80052fa:	f04f 0800 	mov.w	r8, #0
 80052fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005302:	f104 0b1a 	add.w	fp, r4, #26
 8005306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005308:	ebaa 0303 	sub.w	r3, sl, r3
 800530c:	eba3 0309 	sub.w	r3, r3, r9
 8005310:	4543      	cmp	r3, r8
 8005312:	f77f af79 	ble.w	8005208 <_printf_float+0x23c>
 8005316:	2301      	movs	r3, #1
 8005318:	465a      	mov	r2, fp
 800531a:	4631      	mov	r1, r6
 800531c:	4628      	mov	r0, r5
 800531e:	47b8      	blx	r7
 8005320:	3001      	adds	r0, #1
 8005322:	f43f aeae 	beq.w	8005082 <_printf_float+0xb6>
 8005326:	f108 0801 	add.w	r8, r8, #1
 800532a:	e7ec      	b.n	8005306 <_printf_float+0x33a>
 800532c:	4642      	mov	r2, r8
 800532e:	4631      	mov	r1, r6
 8005330:	4628      	mov	r0, r5
 8005332:	47b8      	blx	r7
 8005334:	3001      	adds	r0, #1
 8005336:	d1c2      	bne.n	80052be <_printf_float+0x2f2>
 8005338:	e6a3      	b.n	8005082 <_printf_float+0xb6>
 800533a:	2301      	movs	r3, #1
 800533c:	4631      	mov	r1, r6
 800533e:	4628      	mov	r0, r5
 8005340:	9206      	str	r2, [sp, #24]
 8005342:	47b8      	blx	r7
 8005344:	3001      	adds	r0, #1
 8005346:	f43f ae9c 	beq.w	8005082 <_printf_float+0xb6>
 800534a:	9a06      	ldr	r2, [sp, #24]
 800534c:	f10b 0b01 	add.w	fp, fp, #1
 8005350:	e7bb      	b.n	80052ca <_printf_float+0x2fe>
 8005352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005356:	4631      	mov	r1, r6
 8005358:	4628      	mov	r0, r5
 800535a:	47b8      	blx	r7
 800535c:	3001      	adds	r0, #1
 800535e:	d1c0      	bne.n	80052e2 <_printf_float+0x316>
 8005360:	e68f      	b.n	8005082 <_printf_float+0xb6>
 8005362:	9a06      	ldr	r2, [sp, #24]
 8005364:	464b      	mov	r3, r9
 8005366:	4442      	add	r2, r8
 8005368:	4631      	mov	r1, r6
 800536a:	4628      	mov	r0, r5
 800536c:	47b8      	blx	r7
 800536e:	3001      	adds	r0, #1
 8005370:	d1c3      	bne.n	80052fa <_printf_float+0x32e>
 8005372:	e686      	b.n	8005082 <_printf_float+0xb6>
 8005374:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005378:	f1ba 0f01 	cmp.w	sl, #1
 800537c:	dc01      	bgt.n	8005382 <_printf_float+0x3b6>
 800537e:	07db      	lsls	r3, r3, #31
 8005380:	d536      	bpl.n	80053f0 <_printf_float+0x424>
 8005382:	2301      	movs	r3, #1
 8005384:	4642      	mov	r2, r8
 8005386:	4631      	mov	r1, r6
 8005388:	4628      	mov	r0, r5
 800538a:	47b8      	blx	r7
 800538c:	3001      	adds	r0, #1
 800538e:	f43f ae78 	beq.w	8005082 <_printf_float+0xb6>
 8005392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005396:	4631      	mov	r1, r6
 8005398:	4628      	mov	r0, r5
 800539a:	47b8      	blx	r7
 800539c:	3001      	adds	r0, #1
 800539e:	f43f ae70 	beq.w	8005082 <_printf_float+0xb6>
 80053a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80053a6:	2200      	movs	r2, #0
 80053a8:	2300      	movs	r3, #0
 80053aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053ae:	f7fb fb8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80053b2:	b9c0      	cbnz	r0, 80053e6 <_printf_float+0x41a>
 80053b4:	4653      	mov	r3, sl
 80053b6:	f108 0201 	add.w	r2, r8, #1
 80053ba:	4631      	mov	r1, r6
 80053bc:	4628      	mov	r0, r5
 80053be:	47b8      	blx	r7
 80053c0:	3001      	adds	r0, #1
 80053c2:	d10c      	bne.n	80053de <_printf_float+0x412>
 80053c4:	e65d      	b.n	8005082 <_printf_float+0xb6>
 80053c6:	2301      	movs	r3, #1
 80053c8:	465a      	mov	r2, fp
 80053ca:	4631      	mov	r1, r6
 80053cc:	4628      	mov	r0, r5
 80053ce:	47b8      	blx	r7
 80053d0:	3001      	adds	r0, #1
 80053d2:	f43f ae56 	beq.w	8005082 <_printf_float+0xb6>
 80053d6:	f108 0801 	add.w	r8, r8, #1
 80053da:	45d0      	cmp	r8, sl
 80053dc:	dbf3      	blt.n	80053c6 <_printf_float+0x3fa>
 80053de:	464b      	mov	r3, r9
 80053e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80053e4:	e6df      	b.n	80051a6 <_printf_float+0x1da>
 80053e6:	f04f 0800 	mov.w	r8, #0
 80053ea:	f104 0b1a 	add.w	fp, r4, #26
 80053ee:	e7f4      	b.n	80053da <_printf_float+0x40e>
 80053f0:	2301      	movs	r3, #1
 80053f2:	4642      	mov	r2, r8
 80053f4:	e7e1      	b.n	80053ba <_printf_float+0x3ee>
 80053f6:	2301      	movs	r3, #1
 80053f8:	464a      	mov	r2, r9
 80053fa:	4631      	mov	r1, r6
 80053fc:	4628      	mov	r0, r5
 80053fe:	47b8      	blx	r7
 8005400:	3001      	adds	r0, #1
 8005402:	f43f ae3e 	beq.w	8005082 <_printf_float+0xb6>
 8005406:	f108 0801 	add.w	r8, r8, #1
 800540a:	68e3      	ldr	r3, [r4, #12]
 800540c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800540e:	1a5b      	subs	r3, r3, r1
 8005410:	4543      	cmp	r3, r8
 8005412:	dcf0      	bgt.n	80053f6 <_printf_float+0x42a>
 8005414:	e6fc      	b.n	8005210 <_printf_float+0x244>
 8005416:	f04f 0800 	mov.w	r8, #0
 800541a:	f104 0919 	add.w	r9, r4, #25
 800541e:	e7f4      	b.n	800540a <_printf_float+0x43e>

08005420 <_printf_common>:
 8005420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005424:	4616      	mov	r6, r2
 8005426:	4698      	mov	r8, r3
 8005428:	688a      	ldr	r2, [r1, #8]
 800542a:	690b      	ldr	r3, [r1, #16]
 800542c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005430:	4293      	cmp	r3, r2
 8005432:	bfb8      	it	lt
 8005434:	4613      	movlt	r3, r2
 8005436:	6033      	str	r3, [r6, #0]
 8005438:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800543c:	4607      	mov	r7, r0
 800543e:	460c      	mov	r4, r1
 8005440:	b10a      	cbz	r2, 8005446 <_printf_common+0x26>
 8005442:	3301      	adds	r3, #1
 8005444:	6033      	str	r3, [r6, #0]
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	0699      	lsls	r1, r3, #26
 800544a:	bf42      	ittt	mi
 800544c:	6833      	ldrmi	r3, [r6, #0]
 800544e:	3302      	addmi	r3, #2
 8005450:	6033      	strmi	r3, [r6, #0]
 8005452:	6825      	ldr	r5, [r4, #0]
 8005454:	f015 0506 	ands.w	r5, r5, #6
 8005458:	d106      	bne.n	8005468 <_printf_common+0x48>
 800545a:	f104 0a19 	add.w	sl, r4, #25
 800545e:	68e3      	ldr	r3, [r4, #12]
 8005460:	6832      	ldr	r2, [r6, #0]
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	42ab      	cmp	r3, r5
 8005466:	dc26      	bgt.n	80054b6 <_printf_common+0x96>
 8005468:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800546c:	6822      	ldr	r2, [r4, #0]
 800546e:	3b00      	subs	r3, #0
 8005470:	bf18      	it	ne
 8005472:	2301      	movne	r3, #1
 8005474:	0692      	lsls	r2, r2, #26
 8005476:	d42b      	bmi.n	80054d0 <_printf_common+0xb0>
 8005478:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800547c:	4641      	mov	r1, r8
 800547e:	4638      	mov	r0, r7
 8005480:	47c8      	blx	r9
 8005482:	3001      	adds	r0, #1
 8005484:	d01e      	beq.n	80054c4 <_printf_common+0xa4>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	6922      	ldr	r2, [r4, #16]
 800548a:	f003 0306 	and.w	r3, r3, #6
 800548e:	2b04      	cmp	r3, #4
 8005490:	bf02      	ittt	eq
 8005492:	68e5      	ldreq	r5, [r4, #12]
 8005494:	6833      	ldreq	r3, [r6, #0]
 8005496:	1aed      	subeq	r5, r5, r3
 8005498:	68a3      	ldr	r3, [r4, #8]
 800549a:	bf0c      	ite	eq
 800549c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054a0:	2500      	movne	r5, #0
 80054a2:	4293      	cmp	r3, r2
 80054a4:	bfc4      	itt	gt
 80054a6:	1a9b      	subgt	r3, r3, r2
 80054a8:	18ed      	addgt	r5, r5, r3
 80054aa:	2600      	movs	r6, #0
 80054ac:	341a      	adds	r4, #26
 80054ae:	42b5      	cmp	r5, r6
 80054b0:	d11a      	bne.n	80054e8 <_printf_common+0xc8>
 80054b2:	2000      	movs	r0, #0
 80054b4:	e008      	b.n	80054c8 <_printf_common+0xa8>
 80054b6:	2301      	movs	r3, #1
 80054b8:	4652      	mov	r2, sl
 80054ba:	4641      	mov	r1, r8
 80054bc:	4638      	mov	r0, r7
 80054be:	47c8      	blx	r9
 80054c0:	3001      	adds	r0, #1
 80054c2:	d103      	bne.n	80054cc <_printf_common+0xac>
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295
 80054c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054cc:	3501      	adds	r5, #1
 80054ce:	e7c6      	b.n	800545e <_printf_common+0x3e>
 80054d0:	18e1      	adds	r1, r4, r3
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	2030      	movs	r0, #48	@ 0x30
 80054d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054da:	4422      	add	r2, r4
 80054dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054e4:	3302      	adds	r3, #2
 80054e6:	e7c7      	b.n	8005478 <_printf_common+0x58>
 80054e8:	2301      	movs	r3, #1
 80054ea:	4622      	mov	r2, r4
 80054ec:	4641      	mov	r1, r8
 80054ee:	4638      	mov	r0, r7
 80054f0:	47c8      	blx	r9
 80054f2:	3001      	adds	r0, #1
 80054f4:	d0e6      	beq.n	80054c4 <_printf_common+0xa4>
 80054f6:	3601      	adds	r6, #1
 80054f8:	e7d9      	b.n	80054ae <_printf_common+0x8e>
	...

080054fc <_printf_i>:
 80054fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005500:	7e0f      	ldrb	r7, [r1, #24]
 8005502:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005504:	2f78      	cmp	r7, #120	@ 0x78
 8005506:	4691      	mov	r9, r2
 8005508:	4680      	mov	r8, r0
 800550a:	460c      	mov	r4, r1
 800550c:	469a      	mov	sl, r3
 800550e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005512:	d807      	bhi.n	8005524 <_printf_i+0x28>
 8005514:	2f62      	cmp	r7, #98	@ 0x62
 8005516:	d80a      	bhi.n	800552e <_printf_i+0x32>
 8005518:	2f00      	cmp	r7, #0
 800551a:	f000 80d2 	beq.w	80056c2 <_printf_i+0x1c6>
 800551e:	2f58      	cmp	r7, #88	@ 0x58
 8005520:	f000 80b9 	beq.w	8005696 <_printf_i+0x19a>
 8005524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005528:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800552c:	e03a      	b.n	80055a4 <_printf_i+0xa8>
 800552e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005532:	2b15      	cmp	r3, #21
 8005534:	d8f6      	bhi.n	8005524 <_printf_i+0x28>
 8005536:	a101      	add	r1, pc, #4	@ (adr r1, 800553c <_printf_i+0x40>)
 8005538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800553c:	08005595 	.word	0x08005595
 8005540:	080055a9 	.word	0x080055a9
 8005544:	08005525 	.word	0x08005525
 8005548:	08005525 	.word	0x08005525
 800554c:	08005525 	.word	0x08005525
 8005550:	08005525 	.word	0x08005525
 8005554:	080055a9 	.word	0x080055a9
 8005558:	08005525 	.word	0x08005525
 800555c:	08005525 	.word	0x08005525
 8005560:	08005525 	.word	0x08005525
 8005564:	08005525 	.word	0x08005525
 8005568:	080056a9 	.word	0x080056a9
 800556c:	080055d3 	.word	0x080055d3
 8005570:	08005663 	.word	0x08005663
 8005574:	08005525 	.word	0x08005525
 8005578:	08005525 	.word	0x08005525
 800557c:	080056cb 	.word	0x080056cb
 8005580:	08005525 	.word	0x08005525
 8005584:	080055d3 	.word	0x080055d3
 8005588:	08005525 	.word	0x08005525
 800558c:	08005525 	.word	0x08005525
 8005590:	0800566b 	.word	0x0800566b
 8005594:	6833      	ldr	r3, [r6, #0]
 8005596:	1d1a      	adds	r2, r3, #4
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6032      	str	r2, [r6, #0]
 800559c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055a4:	2301      	movs	r3, #1
 80055a6:	e09d      	b.n	80056e4 <_printf_i+0x1e8>
 80055a8:	6833      	ldr	r3, [r6, #0]
 80055aa:	6820      	ldr	r0, [r4, #0]
 80055ac:	1d19      	adds	r1, r3, #4
 80055ae:	6031      	str	r1, [r6, #0]
 80055b0:	0606      	lsls	r6, r0, #24
 80055b2:	d501      	bpl.n	80055b8 <_printf_i+0xbc>
 80055b4:	681d      	ldr	r5, [r3, #0]
 80055b6:	e003      	b.n	80055c0 <_printf_i+0xc4>
 80055b8:	0645      	lsls	r5, r0, #25
 80055ba:	d5fb      	bpl.n	80055b4 <_printf_i+0xb8>
 80055bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055c0:	2d00      	cmp	r5, #0
 80055c2:	da03      	bge.n	80055cc <_printf_i+0xd0>
 80055c4:	232d      	movs	r3, #45	@ 0x2d
 80055c6:	426d      	negs	r5, r5
 80055c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055cc:	4859      	ldr	r0, [pc, #356]	@ (8005734 <_printf_i+0x238>)
 80055ce:	230a      	movs	r3, #10
 80055d0:	e011      	b.n	80055f6 <_printf_i+0xfa>
 80055d2:	6821      	ldr	r1, [r4, #0]
 80055d4:	6833      	ldr	r3, [r6, #0]
 80055d6:	0608      	lsls	r0, r1, #24
 80055d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80055dc:	d402      	bmi.n	80055e4 <_printf_i+0xe8>
 80055de:	0649      	lsls	r1, r1, #25
 80055e0:	bf48      	it	mi
 80055e2:	b2ad      	uxthmi	r5, r5
 80055e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80055e6:	4853      	ldr	r0, [pc, #332]	@ (8005734 <_printf_i+0x238>)
 80055e8:	6033      	str	r3, [r6, #0]
 80055ea:	bf14      	ite	ne
 80055ec:	230a      	movne	r3, #10
 80055ee:	2308      	moveq	r3, #8
 80055f0:	2100      	movs	r1, #0
 80055f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055f6:	6866      	ldr	r6, [r4, #4]
 80055f8:	60a6      	str	r6, [r4, #8]
 80055fa:	2e00      	cmp	r6, #0
 80055fc:	bfa2      	ittt	ge
 80055fe:	6821      	ldrge	r1, [r4, #0]
 8005600:	f021 0104 	bicge.w	r1, r1, #4
 8005604:	6021      	strge	r1, [r4, #0]
 8005606:	b90d      	cbnz	r5, 800560c <_printf_i+0x110>
 8005608:	2e00      	cmp	r6, #0
 800560a:	d04b      	beq.n	80056a4 <_printf_i+0x1a8>
 800560c:	4616      	mov	r6, r2
 800560e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005612:	fb03 5711 	mls	r7, r3, r1, r5
 8005616:	5dc7      	ldrb	r7, [r0, r7]
 8005618:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800561c:	462f      	mov	r7, r5
 800561e:	42bb      	cmp	r3, r7
 8005620:	460d      	mov	r5, r1
 8005622:	d9f4      	bls.n	800560e <_printf_i+0x112>
 8005624:	2b08      	cmp	r3, #8
 8005626:	d10b      	bne.n	8005640 <_printf_i+0x144>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	07df      	lsls	r7, r3, #31
 800562c:	d508      	bpl.n	8005640 <_printf_i+0x144>
 800562e:	6923      	ldr	r3, [r4, #16]
 8005630:	6861      	ldr	r1, [r4, #4]
 8005632:	4299      	cmp	r1, r3
 8005634:	bfde      	ittt	le
 8005636:	2330      	movle	r3, #48	@ 0x30
 8005638:	f806 3c01 	strble.w	r3, [r6, #-1]
 800563c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005640:	1b92      	subs	r2, r2, r6
 8005642:	6122      	str	r2, [r4, #16]
 8005644:	f8cd a000 	str.w	sl, [sp]
 8005648:	464b      	mov	r3, r9
 800564a:	aa03      	add	r2, sp, #12
 800564c:	4621      	mov	r1, r4
 800564e:	4640      	mov	r0, r8
 8005650:	f7ff fee6 	bl	8005420 <_printf_common>
 8005654:	3001      	adds	r0, #1
 8005656:	d14a      	bne.n	80056ee <_printf_i+0x1f2>
 8005658:	f04f 30ff 	mov.w	r0, #4294967295
 800565c:	b004      	add	sp, #16
 800565e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	f043 0320 	orr.w	r3, r3, #32
 8005668:	6023      	str	r3, [r4, #0]
 800566a:	4833      	ldr	r0, [pc, #204]	@ (8005738 <_printf_i+0x23c>)
 800566c:	2778      	movs	r7, #120	@ 0x78
 800566e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	6831      	ldr	r1, [r6, #0]
 8005676:	061f      	lsls	r7, r3, #24
 8005678:	f851 5b04 	ldr.w	r5, [r1], #4
 800567c:	d402      	bmi.n	8005684 <_printf_i+0x188>
 800567e:	065f      	lsls	r7, r3, #25
 8005680:	bf48      	it	mi
 8005682:	b2ad      	uxthmi	r5, r5
 8005684:	6031      	str	r1, [r6, #0]
 8005686:	07d9      	lsls	r1, r3, #31
 8005688:	bf44      	itt	mi
 800568a:	f043 0320 	orrmi.w	r3, r3, #32
 800568e:	6023      	strmi	r3, [r4, #0]
 8005690:	b11d      	cbz	r5, 800569a <_printf_i+0x19e>
 8005692:	2310      	movs	r3, #16
 8005694:	e7ac      	b.n	80055f0 <_printf_i+0xf4>
 8005696:	4827      	ldr	r0, [pc, #156]	@ (8005734 <_printf_i+0x238>)
 8005698:	e7e9      	b.n	800566e <_printf_i+0x172>
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	f023 0320 	bic.w	r3, r3, #32
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	e7f6      	b.n	8005692 <_printf_i+0x196>
 80056a4:	4616      	mov	r6, r2
 80056a6:	e7bd      	b.n	8005624 <_printf_i+0x128>
 80056a8:	6833      	ldr	r3, [r6, #0]
 80056aa:	6825      	ldr	r5, [r4, #0]
 80056ac:	6961      	ldr	r1, [r4, #20]
 80056ae:	1d18      	adds	r0, r3, #4
 80056b0:	6030      	str	r0, [r6, #0]
 80056b2:	062e      	lsls	r6, r5, #24
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	d501      	bpl.n	80056bc <_printf_i+0x1c0>
 80056b8:	6019      	str	r1, [r3, #0]
 80056ba:	e002      	b.n	80056c2 <_printf_i+0x1c6>
 80056bc:	0668      	lsls	r0, r5, #25
 80056be:	d5fb      	bpl.n	80056b8 <_printf_i+0x1bc>
 80056c0:	8019      	strh	r1, [r3, #0]
 80056c2:	2300      	movs	r3, #0
 80056c4:	6123      	str	r3, [r4, #16]
 80056c6:	4616      	mov	r6, r2
 80056c8:	e7bc      	b.n	8005644 <_printf_i+0x148>
 80056ca:	6833      	ldr	r3, [r6, #0]
 80056cc:	1d1a      	adds	r2, r3, #4
 80056ce:	6032      	str	r2, [r6, #0]
 80056d0:	681e      	ldr	r6, [r3, #0]
 80056d2:	6862      	ldr	r2, [r4, #4]
 80056d4:	2100      	movs	r1, #0
 80056d6:	4630      	mov	r0, r6
 80056d8:	f7fa fd7a 	bl	80001d0 <memchr>
 80056dc:	b108      	cbz	r0, 80056e2 <_printf_i+0x1e6>
 80056de:	1b80      	subs	r0, r0, r6
 80056e0:	6060      	str	r0, [r4, #4]
 80056e2:	6863      	ldr	r3, [r4, #4]
 80056e4:	6123      	str	r3, [r4, #16]
 80056e6:	2300      	movs	r3, #0
 80056e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056ec:	e7aa      	b.n	8005644 <_printf_i+0x148>
 80056ee:	6923      	ldr	r3, [r4, #16]
 80056f0:	4632      	mov	r2, r6
 80056f2:	4649      	mov	r1, r9
 80056f4:	4640      	mov	r0, r8
 80056f6:	47d0      	blx	sl
 80056f8:	3001      	adds	r0, #1
 80056fa:	d0ad      	beq.n	8005658 <_printf_i+0x15c>
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	079b      	lsls	r3, r3, #30
 8005700:	d413      	bmi.n	800572a <_printf_i+0x22e>
 8005702:	68e0      	ldr	r0, [r4, #12]
 8005704:	9b03      	ldr	r3, [sp, #12]
 8005706:	4298      	cmp	r0, r3
 8005708:	bfb8      	it	lt
 800570a:	4618      	movlt	r0, r3
 800570c:	e7a6      	b.n	800565c <_printf_i+0x160>
 800570e:	2301      	movs	r3, #1
 8005710:	4632      	mov	r2, r6
 8005712:	4649      	mov	r1, r9
 8005714:	4640      	mov	r0, r8
 8005716:	47d0      	blx	sl
 8005718:	3001      	adds	r0, #1
 800571a:	d09d      	beq.n	8005658 <_printf_i+0x15c>
 800571c:	3501      	adds	r5, #1
 800571e:	68e3      	ldr	r3, [r4, #12]
 8005720:	9903      	ldr	r1, [sp, #12]
 8005722:	1a5b      	subs	r3, r3, r1
 8005724:	42ab      	cmp	r3, r5
 8005726:	dcf2      	bgt.n	800570e <_printf_i+0x212>
 8005728:	e7eb      	b.n	8005702 <_printf_i+0x206>
 800572a:	2500      	movs	r5, #0
 800572c:	f104 0619 	add.w	r6, r4, #25
 8005730:	e7f5      	b.n	800571e <_printf_i+0x222>
 8005732:	bf00      	nop
 8005734:	08009ef8 	.word	0x08009ef8
 8005738:	08009f09 	.word	0x08009f09

0800573c <_scanf_float>:
 800573c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005740:	b087      	sub	sp, #28
 8005742:	4617      	mov	r7, r2
 8005744:	9303      	str	r3, [sp, #12]
 8005746:	688b      	ldr	r3, [r1, #8]
 8005748:	1e5a      	subs	r2, r3, #1
 800574a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800574e:	bf81      	itttt	hi
 8005750:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005754:	eb03 0b05 	addhi.w	fp, r3, r5
 8005758:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800575c:	608b      	strhi	r3, [r1, #8]
 800575e:	680b      	ldr	r3, [r1, #0]
 8005760:	460a      	mov	r2, r1
 8005762:	f04f 0500 	mov.w	r5, #0
 8005766:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800576a:	f842 3b1c 	str.w	r3, [r2], #28
 800576e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005772:	4680      	mov	r8, r0
 8005774:	460c      	mov	r4, r1
 8005776:	bf98      	it	ls
 8005778:	f04f 0b00 	movls.w	fp, #0
 800577c:	9201      	str	r2, [sp, #4]
 800577e:	4616      	mov	r6, r2
 8005780:	46aa      	mov	sl, r5
 8005782:	46a9      	mov	r9, r5
 8005784:	9502      	str	r5, [sp, #8]
 8005786:	68a2      	ldr	r2, [r4, #8]
 8005788:	b152      	cbz	r2, 80057a0 <_scanf_float+0x64>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b4e      	cmp	r3, #78	@ 0x4e
 8005790:	d864      	bhi.n	800585c <_scanf_float+0x120>
 8005792:	2b40      	cmp	r3, #64	@ 0x40
 8005794:	d83c      	bhi.n	8005810 <_scanf_float+0xd4>
 8005796:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800579a:	b2c8      	uxtb	r0, r1
 800579c:	280e      	cmp	r0, #14
 800579e:	d93a      	bls.n	8005816 <_scanf_float+0xda>
 80057a0:	f1b9 0f00 	cmp.w	r9, #0
 80057a4:	d003      	beq.n	80057ae <_scanf_float+0x72>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057b2:	f1ba 0f01 	cmp.w	sl, #1
 80057b6:	f200 8117 	bhi.w	80059e8 <_scanf_float+0x2ac>
 80057ba:	9b01      	ldr	r3, [sp, #4]
 80057bc:	429e      	cmp	r6, r3
 80057be:	f200 8108 	bhi.w	80059d2 <_scanf_float+0x296>
 80057c2:	2001      	movs	r0, #1
 80057c4:	b007      	add	sp, #28
 80057c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80057ce:	2a0d      	cmp	r2, #13
 80057d0:	d8e6      	bhi.n	80057a0 <_scanf_float+0x64>
 80057d2:	a101      	add	r1, pc, #4	@ (adr r1, 80057d8 <_scanf_float+0x9c>)
 80057d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80057d8:	0800591f 	.word	0x0800591f
 80057dc:	080057a1 	.word	0x080057a1
 80057e0:	080057a1 	.word	0x080057a1
 80057e4:	080057a1 	.word	0x080057a1
 80057e8:	0800597f 	.word	0x0800597f
 80057ec:	08005957 	.word	0x08005957
 80057f0:	080057a1 	.word	0x080057a1
 80057f4:	080057a1 	.word	0x080057a1
 80057f8:	0800592d 	.word	0x0800592d
 80057fc:	080057a1 	.word	0x080057a1
 8005800:	080057a1 	.word	0x080057a1
 8005804:	080057a1 	.word	0x080057a1
 8005808:	080057a1 	.word	0x080057a1
 800580c:	080058e5 	.word	0x080058e5
 8005810:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005814:	e7db      	b.n	80057ce <_scanf_float+0x92>
 8005816:	290e      	cmp	r1, #14
 8005818:	d8c2      	bhi.n	80057a0 <_scanf_float+0x64>
 800581a:	a001      	add	r0, pc, #4	@ (adr r0, 8005820 <_scanf_float+0xe4>)
 800581c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005820:	080058d5 	.word	0x080058d5
 8005824:	080057a1 	.word	0x080057a1
 8005828:	080058d5 	.word	0x080058d5
 800582c:	0800596b 	.word	0x0800596b
 8005830:	080057a1 	.word	0x080057a1
 8005834:	0800587d 	.word	0x0800587d
 8005838:	080058bb 	.word	0x080058bb
 800583c:	080058bb 	.word	0x080058bb
 8005840:	080058bb 	.word	0x080058bb
 8005844:	080058bb 	.word	0x080058bb
 8005848:	080058bb 	.word	0x080058bb
 800584c:	080058bb 	.word	0x080058bb
 8005850:	080058bb 	.word	0x080058bb
 8005854:	080058bb 	.word	0x080058bb
 8005858:	080058bb 	.word	0x080058bb
 800585c:	2b6e      	cmp	r3, #110	@ 0x6e
 800585e:	d809      	bhi.n	8005874 <_scanf_float+0x138>
 8005860:	2b60      	cmp	r3, #96	@ 0x60
 8005862:	d8b2      	bhi.n	80057ca <_scanf_float+0x8e>
 8005864:	2b54      	cmp	r3, #84	@ 0x54
 8005866:	d07b      	beq.n	8005960 <_scanf_float+0x224>
 8005868:	2b59      	cmp	r3, #89	@ 0x59
 800586a:	d199      	bne.n	80057a0 <_scanf_float+0x64>
 800586c:	2d07      	cmp	r5, #7
 800586e:	d197      	bne.n	80057a0 <_scanf_float+0x64>
 8005870:	2508      	movs	r5, #8
 8005872:	e02c      	b.n	80058ce <_scanf_float+0x192>
 8005874:	2b74      	cmp	r3, #116	@ 0x74
 8005876:	d073      	beq.n	8005960 <_scanf_float+0x224>
 8005878:	2b79      	cmp	r3, #121	@ 0x79
 800587a:	e7f6      	b.n	800586a <_scanf_float+0x12e>
 800587c:	6821      	ldr	r1, [r4, #0]
 800587e:	05c8      	lsls	r0, r1, #23
 8005880:	d51b      	bpl.n	80058ba <_scanf_float+0x17e>
 8005882:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005886:	6021      	str	r1, [r4, #0]
 8005888:	f109 0901 	add.w	r9, r9, #1
 800588c:	f1bb 0f00 	cmp.w	fp, #0
 8005890:	d003      	beq.n	800589a <_scanf_float+0x15e>
 8005892:	3201      	adds	r2, #1
 8005894:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005898:	60a2      	str	r2, [r4, #8]
 800589a:	68a3      	ldr	r3, [r4, #8]
 800589c:	3b01      	subs	r3, #1
 800589e:	60a3      	str	r3, [r4, #8]
 80058a0:	6923      	ldr	r3, [r4, #16]
 80058a2:	3301      	adds	r3, #1
 80058a4:	6123      	str	r3, [r4, #16]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	607b      	str	r3, [r7, #4]
 80058ae:	f340 8087 	ble.w	80059c0 <_scanf_float+0x284>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	3301      	adds	r3, #1
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	e765      	b.n	8005786 <_scanf_float+0x4a>
 80058ba:	eb1a 0105 	adds.w	r1, sl, r5
 80058be:	f47f af6f 	bne.w	80057a0 <_scanf_float+0x64>
 80058c2:	6822      	ldr	r2, [r4, #0]
 80058c4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80058c8:	6022      	str	r2, [r4, #0]
 80058ca:	460d      	mov	r5, r1
 80058cc:	468a      	mov	sl, r1
 80058ce:	f806 3b01 	strb.w	r3, [r6], #1
 80058d2:	e7e2      	b.n	800589a <_scanf_float+0x15e>
 80058d4:	6822      	ldr	r2, [r4, #0]
 80058d6:	0610      	lsls	r0, r2, #24
 80058d8:	f57f af62 	bpl.w	80057a0 <_scanf_float+0x64>
 80058dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058e0:	6022      	str	r2, [r4, #0]
 80058e2:	e7f4      	b.n	80058ce <_scanf_float+0x192>
 80058e4:	f1ba 0f00 	cmp.w	sl, #0
 80058e8:	d10e      	bne.n	8005908 <_scanf_float+0x1cc>
 80058ea:	f1b9 0f00 	cmp.w	r9, #0
 80058ee:	d10e      	bne.n	800590e <_scanf_float+0x1d2>
 80058f0:	6822      	ldr	r2, [r4, #0]
 80058f2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80058f6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80058fa:	d108      	bne.n	800590e <_scanf_float+0x1d2>
 80058fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005900:	6022      	str	r2, [r4, #0]
 8005902:	f04f 0a01 	mov.w	sl, #1
 8005906:	e7e2      	b.n	80058ce <_scanf_float+0x192>
 8005908:	f1ba 0f02 	cmp.w	sl, #2
 800590c:	d055      	beq.n	80059ba <_scanf_float+0x27e>
 800590e:	2d01      	cmp	r5, #1
 8005910:	d002      	beq.n	8005918 <_scanf_float+0x1dc>
 8005912:	2d04      	cmp	r5, #4
 8005914:	f47f af44 	bne.w	80057a0 <_scanf_float+0x64>
 8005918:	3501      	adds	r5, #1
 800591a:	b2ed      	uxtb	r5, r5
 800591c:	e7d7      	b.n	80058ce <_scanf_float+0x192>
 800591e:	f1ba 0f01 	cmp.w	sl, #1
 8005922:	f47f af3d 	bne.w	80057a0 <_scanf_float+0x64>
 8005926:	f04f 0a02 	mov.w	sl, #2
 800592a:	e7d0      	b.n	80058ce <_scanf_float+0x192>
 800592c:	b97d      	cbnz	r5, 800594e <_scanf_float+0x212>
 800592e:	f1b9 0f00 	cmp.w	r9, #0
 8005932:	f47f af38 	bne.w	80057a6 <_scanf_float+0x6a>
 8005936:	6822      	ldr	r2, [r4, #0]
 8005938:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800593c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005940:	f040 8108 	bne.w	8005b54 <_scanf_float+0x418>
 8005944:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005948:	6022      	str	r2, [r4, #0]
 800594a:	2501      	movs	r5, #1
 800594c:	e7bf      	b.n	80058ce <_scanf_float+0x192>
 800594e:	2d03      	cmp	r5, #3
 8005950:	d0e2      	beq.n	8005918 <_scanf_float+0x1dc>
 8005952:	2d05      	cmp	r5, #5
 8005954:	e7de      	b.n	8005914 <_scanf_float+0x1d8>
 8005956:	2d02      	cmp	r5, #2
 8005958:	f47f af22 	bne.w	80057a0 <_scanf_float+0x64>
 800595c:	2503      	movs	r5, #3
 800595e:	e7b6      	b.n	80058ce <_scanf_float+0x192>
 8005960:	2d06      	cmp	r5, #6
 8005962:	f47f af1d 	bne.w	80057a0 <_scanf_float+0x64>
 8005966:	2507      	movs	r5, #7
 8005968:	e7b1      	b.n	80058ce <_scanf_float+0x192>
 800596a:	6822      	ldr	r2, [r4, #0]
 800596c:	0591      	lsls	r1, r2, #22
 800596e:	f57f af17 	bpl.w	80057a0 <_scanf_float+0x64>
 8005972:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005976:	6022      	str	r2, [r4, #0]
 8005978:	f8cd 9008 	str.w	r9, [sp, #8]
 800597c:	e7a7      	b.n	80058ce <_scanf_float+0x192>
 800597e:	6822      	ldr	r2, [r4, #0]
 8005980:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005984:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005988:	d006      	beq.n	8005998 <_scanf_float+0x25c>
 800598a:	0550      	lsls	r0, r2, #21
 800598c:	f57f af08 	bpl.w	80057a0 <_scanf_float+0x64>
 8005990:	f1b9 0f00 	cmp.w	r9, #0
 8005994:	f000 80de 	beq.w	8005b54 <_scanf_float+0x418>
 8005998:	0591      	lsls	r1, r2, #22
 800599a:	bf58      	it	pl
 800599c:	9902      	ldrpl	r1, [sp, #8]
 800599e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80059a2:	bf58      	it	pl
 80059a4:	eba9 0101 	subpl.w	r1, r9, r1
 80059a8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80059ac:	bf58      	it	pl
 80059ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80059b2:	6022      	str	r2, [r4, #0]
 80059b4:	f04f 0900 	mov.w	r9, #0
 80059b8:	e789      	b.n	80058ce <_scanf_float+0x192>
 80059ba:	f04f 0a03 	mov.w	sl, #3
 80059be:	e786      	b.n	80058ce <_scanf_float+0x192>
 80059c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80059c4:	4639      	mov	r1, r7
 80059c6:	4640      	mov	r0, r8
 80059c8:	4798      	blx	r3
 80059ca:	2800      	cmp	r0, #0
 80059cc:	f43f aedb 	beq.w	8005786 <_scanf_float+0x4a>
 80059d0:	e6e6      	b.n	80057a0 <_scanf_float+0x64>
 80059d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80059d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059da:	463a      	mov	r2, r7
 80059dc:	4640      	mov	r0, r8
 80059de:	4798      	blx	r3
 80059e0:	6923      	ldr	r3, [r4, #16]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	6123      	str	r3, [r4, #16]
 80059e6:	e6e8      	b.n	80057ba <_scanf_float+0x7e>
 80059e8:	1e6b      	subs	r3, r5, #1
 80059ea:	2b06      	cmp	r3, #6
 80059ec:	d824      	bhi.n	8005a38 <_scanf_float+0x2fc>
 80059ee:	2d02      	cmp	r5, #2
 80059f0:	d836      	bhi.n	8005a60 <_scanf_float+0x324>
 80059f2:	9b01      	ldr	r3, [sp, #4]
 80059f4:	429e      	cmp	r6, r3
 80059f6:	f67f aee4 	bls.w	80057c2 <_scanf_float+0x86>
 80059fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80059fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a02:	463a      	mov	r2, r7
 8005a04:	4640      	mov	r0, r8
 8005a06:	4798      	blx	r3
 8005a08:	6923      	ldr	r3, [r4, #16]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	6123      	str	r3, [r4, #16]
 8005a0e:	e7f0      	b.n	80059f2 <_scanf_float+0x2b6>
 8005a10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a14:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005a18:	463a      	mov	r2, r7
 8005a1a:	4640      	mov	r0, r8
 8005a1c:	4798      	blx	r3
 8005a1e:	6923      	ldr	r3, [r4, #16]
 8005a20:	3b01      	subs	r3, #1
 8005a22:	6123      	str	r3, [r4, #16]
 8005a24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a28:	fa5f fa8a 	uxtb.w	sl, sl
 8005a2c:	f1ba 0f02 	cmp.w	sl, #2
 8005a30:	d1ee      	bne.n	8005a10 <_scanf_float+0x2d4>
 8005a32:	3d03      	subs	r5, #3
 8005a34:	b2ed      	uxtb	r5, r5
 8005a36:	1b76      	subs	r6, r6, r5
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	05da      	lsls	r2, r3, #23
 8005a3c:	d530      	bpl.n	8005aa0 <_scanf_float+0x364>
 8005a3e:	055b      	lsls	r3, r3, #21
 8005a40:	d511      	bpl.n	8005a66 <_scanf_float+0x32a>
 8005a42:	9b01      	ldr	r3, [sp, #4]
 8005a44:	429e      	cmp	r6, r3
 8005a46:	f67f aebc 	bls.w	80057c2 <_scanf_float+0x86>
 8005a4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a52:	463a      	mov	r2, r7
 8005a54:	4640      	mov	r0, r8
 8005a56:	4798      	blx	r3
 8005a58:	6923      	ldr	r3, [r4, #16]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	6123      	str	r3, [r4, #16]
 8005a5e:	e7f0      	b.n	8005a42 <_scanf_float+0x306>
 8005a60:	46aa      	mov	sl, r5
 8005a62:	46b3      	mov	fp, r6
 8005a64:	e7de      	b.n	8005a24 <_scanf_float+0x2e8>
 8005a66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005a6a:	6923      	ldr	r3, [r4, #16]
 8005a6c:	2965      	cmp	r1, #101	@ 0x65
 8005a6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a72:	f106 35ff 	add.w	r5, r6, #4294967295
 8005a76:	6123      	str	r3, [r4, #16]
 8005a78:	d00c      	beq.n	8005a94 <_scanf_float+0x358>
 8005a7a:	2945      	cmp	r1, #69	@ 0x45
 8005a7c:	d00a      	beq.n	8005a94 <_scanf_float+0x358>
 8005a7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a82:	463a      	mov	r2, r7
 8005a84:	4640      	mov	r0, r8
 8005a86:	4798      	blx	r3
 8005a88:	6923      	ldr	r3, [r4, #16]
 8005a8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	1eb5      	subs	r5, r6, #2
 8005a92:	6123      	str	r3, [r4, #16]
 8005a94:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a98:	463a      	mov	r2, r7
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	4798      	blx	r3
 8005a9e:	462e      	mov	r6, r5
 8005aa0:	6822      	ldr	r2, [r4, #0]
 8005aa2:	f012 0210 	ands.w	r2, r2, #16
 8005aa6:	d001      	beq.n	8005aac <_scanf_float+0x370>
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	e68b      	b.n	80057c4 <_scanf_float+0x88>
 8005aac:	7032      	strb	r2, [r6, #0]
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ab8:	d11c      	bne.n	8005af4 <_scanf_float+0x3b8>
 8005aba:	9b02      	ldr	r3, [sp, #8]
 8005abc:	454b      	cmp	r3, r9
 8005abe:	eba3 0209 	sub.w	r2, r3, r9
 8005ac2:	d123      	bne.n	8005b0c <_scanf_float+0x3d0>
 8005ac4:	9901      	ldr	r1, [sp, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	4640      	mov	r0, r8
 8005aca:	f002 fc49 	bl	8008360 <_strtod_r>
 8005ace:	9b03      	ldr	r3, [sp, #12]
 8005ad0:	6821      	ldr	r1, [r4, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f011 0f02 	tst.w	r1, #2
 8005ad8:	ec57 6b10 	vmov	r6, r7, d0
 8005adc:	f103 0204 	add.w	r2, r3, #4
 8005ae0:	d01f      	beq.n	8005b22 <_scanf_float+0x3e6>
 8005ae2:	9903      	ldr	r1, [sp, #12]
 8005ae4:	600a      	str	r2, [r1, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	e9c3 6700 	strd	r6, r7, [r3]
 8005aec:	68e3      	ldr	r3, [r4, #12]
 8005aee:	3301      	adds	r3, #1
 8005af0:	60e3      	str	r3, [r4, #12]
 8005af2:	e7d9      	b.n	8005aa8 <_scanf_float+0x36c>
 8005af4:	9b04      	ldr	r3, [sp, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0e4      	beq.n	8005ac4 <_scanf_float+0x388>
 8005afa:	9905      	ldr	r1, [sp, #20]
 8005afc:	230a      	movs	r3, #10
 8005afe:	3101      	adds	r1, #1
 8005b00:	4640      	mov	r0, r8
 8005b02:	f002 fcad 	bl	8008460 <_strtol_r>
 8005b06:	9b04      	ldr	r3, [sp, #16]
 8005b08:	9e05      	ldr	r6, [sp, #20]
 8005b0a:	1ac2      	subs	r2, r0, r3
 8005b0c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005b10:	429e      	cmp	r6, r3
 8005b12:	bf28      	it	cs
 8005b14:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005b18:	4910      	ldr	r1, [pc, #64]	@ (8005b5c <_scanf_float+0x420>)
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	f000 f8f6 	bl	8005d0c <siprintf>
 8005b20:	e7d0      	b.n	8005ac4 <_scanf_float+0x388>
 8005b22:	f011 0f04 	tst.w	r1, #4
 8005b26:	9903      	ldr	r1, [sp, #12]
 8005b28:	600a      	str	r2, [r1, #0]
 8005b2a:	d1dc      	bne.n	8005ae6 <_scanf_float+0x3aa>
 8005b2c:	681d      	ldr	r5, [r3, #0]
 8005b2e:	4632      	mov	r2, r6
 8005b30:	463b      	mov	r3, r7
 8005b32:	4630      	mov	r0, r6
 8005b34:	4639      	mov	r1, r7
 8005b36:	f7fa fff9 	bl	8000b2c <__aeabi_dcmpun>
 8005b3a:	b128      	cbz	r0, 8005b48 <_scanf_float+0x40c>
 8005b3c:	4808      	ldr	r0, [pc, #32]	@ (8005b60 <_scanf_float+0x424>)
 8005b3e:	f000 fa07 	bl	8005f50 <nanf>
 8005b42:	ed85 0a00 	vstr	s0, [r5]
 8005b46:	e7d1      	b.n	8005aec <_scanf_float+0x3b0>
 8005b48:	4630      	mov	r0, r6
 8005b4a:	4639      	mov	r1, r7
 8005b4c:	f7fb f84c 	bl	8000be8 <__aeabi_d2f>
 8005b50:	6028      	str	r0, [r5, #0]
 8005b52:	e7cb      	b.n	8005aec <_scanf_float+0x3b0>
 8005b54:	f04f 0900 	mov.w	r9, #0
 8005b58:	e629      	b.n	80057ae <_scanf_float+0x72>
 8005b5a:	bf00      	nop
 8005b5c:	08009f1a 	.word	0x08009f1a
 8005b60:	0800a2d0 	.word	0x0800a2d0

08005b64 <std>:
 8005b64:	2300      	movs	r3, #0
 8005b66:	b510      	push	{r4, lr}
 8005b68:	4604      	mov	r4, r0
 8005b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b72:	6083      	str	r3, [r0, #8]
 8005b74:	8181      	strh	r1, [r0, #12]
 8005b76:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b78:	81c2      	strh	r2, [r0, #14]
 8005b7a:	6183      	str	r3, [r0, #24]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	2208      	movs	r2, #8
 8005b80:	305c      	adds	r0, #92	@ 0x5c
 8005b82:	f000 f952 	bl	8005e2a <memset>
 8005b86:	4b0d      	ldr	r3, [pc, #52]	@ (8005bbc <std+0x58>)
 8005b88:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc0 <std+0x5c>)
 8005b8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc4 <std+0x60>)
 8005b90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b92:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc8 <std+0x64>)
 8005b94:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b96:	4b0d      	ldr	r3, [pc, #52]	@ (8005bcc <std+0x68>)
 8005b98:	6224      	str	r4, [r4, #32]
 8005b9a:	429c      	cmp	r4, r3
 8005b9c:	d006      	beq.n	8005bac <std+0x48>
 8005b9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ba2:	4294      	cmp	r4, r2
 8005ba4:	d002      	beq.n	8005bac <std+0x48>
 8005ba6:	33d0      	adds	r3, #208	@ 0xd0
 8005ba8:	429c      	cmp	r4, r3
 8005baa:	d105      	bne.n	8005bb8 <std+0x54>
 8005bac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bb4:	f000 b9c8 	b.w	8005f48 <__retarget_lock_init_recursive>
 8005bb8:	bd10      	pop	{r4, pc}
 8005bba:	bf00      	nop
 8005bbc:	08005da1 	.word	0x08005da1
 8005bc0:	08005dc7 	.word	0x08005dc7
 8005bc4:	08005dff 	.word	0x08005dff
 8005bc8:	08005e23 	.word	0x08005e23
 8005bcc:	200003dc 	.word	0x200003dc

08005bd0 <stdio_exit_handler>:
 8005bd0:	4a02      	ldr	r2, [pc, #8]	@ (8005bdc <stdio_exit_handler+0xc>)
 8005bd2:	4903      	ldr	r1, [pc, #12]	@ (8005be0 <stdio_exit_handler+0x10>)
 8005bd4:	4803      	ldr	r0, [pc, #12]	@ (8005be4 <stdio_exit_handler+0x14>)
 8005bd6:	f000 b869 	b.w	8005cac <_fwalk_sglue>
 8005bda:	bf00      	nop
 8005bdc:	20000020 	.word	0x20000020
 8005be0:	080090d5 	.word	0x080090d5
 8005be4:	20000030 	.word	0x20000030

08005be8 <cleanup_stdio>:
 8005be8:	6841      	ldr	r1, [r0, #4]
 8005bea:	4b0c      	ldr	r3, [pc, #48]	@ (8005c1c <cleanup_stdio+0x34>)
 8005bec:	4299      	cmp	r1, r3
 8005bee:	b510      	push	{r4, lr}
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	d001      	beq.n	8005bf8 <cleanup_stdio+0x10>
 8005bf4:	f003 fa6e 	bl	80090d4 <_fflush_r>
 8005bf8:	68a1      	ldr	r1, [r4, #8]
 8005bfa:	4b09      	ldr	r3, [pc, #36]	@ (8005c20 <cleanup_stdio+0x38>)
 8005bfc:	4299      	cmp	r1, r3
 8005bfe:	d002      	beq.n	8005c06 <cleanup_stdio+0x1e>
 8005c00:	4620      	mov	r0, r4
 8005c02:	f003 fa67 	bl	80090d4 <_fflush_r>
 8005c06:	68e1      	ldr	r1, [r4, #12]
 8005c08:	4b06      	ldr	r3, [pc, #24]	@ (8005c24 <cleanup_stdio+0x3c>)
 8005c0a:	4299      	cmp	r1, r3
 8005c0c:	d004      	beq.n	8005c18 <cleanup_stdio+0x30>
 8005c0e:	4620      	mov	r0, r4
 8005c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c14:	f003 ba5e 	b.w	80090d4 <_fflush_r>
 8005c18:	bd10      	pop	{r4, pc}
 8005c1a:	bf00      	nop
 8005c1c:	200003dc 	.word	0x200003dc
 8005c20:	20000444 	.word	0x20000444
 8005c24:	200004ac 	.word	0x200004ac

08005c28 <global_stdio_init.part.0>:
 8005c28:	b510      	push	{r4, lr}
 8005c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c58 <global_stdio_init.part.0+0x30>)
 8005c2c:	4c0b      	ldr	r4, [pc, #44]	@ (8005c5c <global_stdio_init.part.0+0x34>)
 8005c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8005c60 <global_stdio_init.part.0+0x38>)
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	4620      	mov	r0, r4
 8005c34:	2200      	movs	r2, #0
 8005c36:	2104      	movs	r1, #4
 8005c38:	f7ff ff94 	bl	8005b64 <std>
 8005c3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c40:	2201      	movs	r2, #1
 8005c42:	2109      	movs	r1, #9
 8005c44:	f7ff ff8e 	bl	8005b64 <std>
 8005c48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c52:	2112      	movs	r1, #18
 8005c54:	f7ff bf86 	b.w	8005b64 <std>
 8005c58:	20000514 	.word	0x20000514
 8005c5c:	200003dc 	.word	0x200003dc
 8005c60:	08005bd1 	.word	0x08005bd1

08005c64 <__sfp_lock_acquire>:
 8005c64:	4801      	ldr	r0, [pc, #4]	@ (8005c6c <__sfp_lock_acquire+0x8>)
 8005c66:	f000 b970 	b.w	8005f4a <__retarget_lock_acquire_recursive>
 8005c6a:	bf00      	nop
 8005c6c:	2000051d 	.word	0x2000051d

08005c70 <__sfp_lock_release>:
 8005c70:	4801      	ldr	r0, [pc, #4]	@ (8005c78 <__sfp_lock_release+0x8>)
 8005c72:	f000 b96b 	b.w	8005f4c <__retarget_lock_release_recursive>
 8005c76:	bf00      	nop
 8005c78:	2000051d 	.word	0x2000051d

08005c7c <__sinit>:
 8005c7c:	b510      	push	{r4, lr}
 8005c7e:	4604      	mov	r4, r0
 8005c80:	f7ff fff0 	bl	8005c64 <__sfp_lock_acquire>
 8005c84:	6a23      	ldr	r3, [r4, #32]
 8005c86:	b11b      	cbz	r3, 8005c90 <__sinit+0x14>
 8005c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c8c:	f7ff bff0 	b.w	8005c70 <__sfp_lock_release>
 8005c90:	4b04      	ldr	r3, [pc, #16]	@ (8005ca4 <__sinit+0x28>)
 8005c92:	6223      	str	r3, [r4, #32]
 8005c94:	4b04      	ldr	r3, [pc, #16]	@ (8005ca8 <__sinit+0x2c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1f5      	bne.n	8005c88 <__sinit+0xc>
 8005c9c:	f7ff ffc4 	bl	8005c28 <global_stdio_init.part.0>
 8005ca0:	e7f2      	b.n	8005c88 <__sinit+0xc>
 8005ca2:	bf00      	nop
 8005ca4:	08005be9 	.word	0x08005be9
 8005ca8:	20000514 	.word	0x20000514

08005cac <_fwalk_sglue>:
 8005cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cb0:	4607      	mov	r7, r0
 8005cb2:	4688      	mov	r8, r1
 8005cb4:	4614      	mov	r4, r2
 8005cb6:	2600      	movs	r6, #0
 8005cb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cbc:	f1b9 0901 	subs.w	r9, r9, #1
 8005cc0:	d505      	bpl.n	8005cce <_fwalk_sglue+0x22>
 8005cc2:	6824      	ldr	r4, [r4, #0]
 8005cc4:	2c00      	cmp	r4, #0
 8005cc6:	d1f7      	bne.n	8005cb8 <_fwalk_sglue+0xc>
 8005cc8:	4630      	mov	r0, r6
 8005cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cce:	89ab      	ldrh	r3, [r5, #12]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d907      	bls.n	8005ce4 <_fwalk_sglue+0x38>
 8005cd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	d003      	beq.n	8005ce4 <_fwalk_sglue+0x38>
 8005cdc:	4629      	mov	r1, r5
 8005cde:	4638      	mov	r0, r7
 8005ce0:	47c0      	blx	r8
 8005ce2:	4306      	orrs	r6, r0
 8005ce4:	3568      	adds	r5, #104	@ 0x68
 8005ce6:	e7e9      	b.n	8005cbc <_fwalk_sglue+0x10>

08005ce8 <iprintf>:
 8005ce8:	b40f      	push	{r0, r1, r2, r3}
 8005cea:	b507      	push	{r0, r1, r2, lr}
 8005cec:	4906      	ldr	r1, [pc, #24]	@ (8005d08 <iprintf+0x20>)
 8005cee:	ab04      	add	r3, sp, #16
 8005cf0:	6808      	ldr	r0, [r1, #0]
 8005cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cf6:	6881      	ldr	r1, [r0, #8]
 8005cf8:	9301      	str	r3, [sp, #4]
 8005cfa:	f002 ff01 	bl	8008b00 <_vfiprintf_r>
 8005cfe:	b003      	add	sp, #12
 8005d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d04:	b004      	add	sp, #16
 8005d06:	4770      	bx	lr
 8005d08:	2000002c 	.word	0x2000002c

08005d0c <siprintf>:
 8005d0c:	b40e      	push	{r1, r2, r3}
 8005d0e:	b500      	push	{lr}
 8005d10:	b09c      	sub	sp, #112	@ 0x70
 8005d12:	ab1d      	add	r3, sp, #116	@ 0x74
 8005d14:	9002      	str	r0, [sp, #8]
 8005d16:	9006      	str	r0, [sp, #24]
 8005d18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d1c:	4809      	ldr	r0, [pc, #36]	@ (8005d44 <siprintf+0x38>)
 8005d1e:	9107      	str	r1, [sp, #28]
 8005d20:	9104      	str	r1, [sp, #16]
 8005d22:	4909      	ldr	r1, [pc, #36]	@ (8005d48 <siprintf+0x3c>)
 8005d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d28:	9105      	str	r1, [sp, #20]
 8005d2a:	6800      	ldr	r0, [r0, #0]
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	a902      	add	r1, sp, #8
 8005d30:	f002 fbf4 	bl	800851c <_svfiprintf_r>
 8005d34:	9b02      	ldr	r3, [sp, #8]
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	b01c      	add	sp, #112	@ 0x70
 8005d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d40:	b003      	add	sp, #12
 8005d42:	4770      	bx	lr
 8005d44:	2000002c 	.word	0x2000002c
 8005d48:	ffff0208 	.word	0xffff0208

08005d4c <siscanf>:
 8005d4c:	b40e      	push	{r1, r2, r3}
 8005d4e:	b530      	push	{r4, r5, lr}
 8005d50:	b09c      	sub	sp, #112	@ 0x70
 8005d52:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005d54:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005d58:	f854 5b04 	ldr.w	r5, [r4], #4
 8005d5c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005d60:	9002      	str	r0, [sp, #8]
 8005d62:	9006      	str	r0, [sp, #24]
 8005d64:	f7fa fa84 	bl	8000270 <strlen>
 8005d68:	4b0b      	ldr	r3, [pc, #44]	@ (8005d98 <siscanf+0x4c>)
 8005d6a:	9003      	str	r0, [sp, #12]
 8005d6c:	9007      	str	r0, [sp, #28]
 8005d6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d70:	480a      	ldr	r0, [pc, #40]	@ (8005d9c <siscanf+0x50>)
 8005d72:	9401      	str	r4, [sp, #4]
 8005d74:	2300      	movs	r3, #0
 8005d76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005d78:	9314      	str	r3, [sp, #80]	@ 0x50
 8005d7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005d7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005d82:	462a      	mov	r2, r5
 8005d84:	4623      	mov	r3, r4
 8005d86:	a902      	add	r1, sp, #8
 8005d88:	6800      	ldr	r0, [r0, #0]
 8005d8a:	f002 fd1b 	bl	80087c4 <__ssvfiscanf_r>
 8005d8e:	b01c      	add	sp, #112	@ 0x70
 8005d90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d94:	b003      	add	sp, #12
 8005d96:	4770      	bx	lr
 8005d98:	08005dc3 	.word	0x08005dc3
 8005d9c:	2000002c 	.word	0x2000002c

08005da0 <__sread>:
 8005da0:	b510      	push	{r4, lr}
 8005da2:	460c      	mov	r4, r1
 8005da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da8:	f000 f880 	bl	8005eac <_read_r>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	bfab      	itete	ge
 8005db0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005db2:	89a3      	ldrhlt	r3, [r4, #12]
 8005db4:	181b      	addge	r3, r3, r0
 8005db6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005dba:	bfac      	ite	ge
 8005dbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005dbe:	81a3      	strhlt	r3, [r4, #12]
 8005dc0:	bd10      	pop	{r4, pc}

08005dc2 <__seofread>:
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	4770      	bx	lr

08005dc6 <__swrite>:
 8005dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dca:	461f      	mov	r7, r3
 8005dcc:	898b      	ldrh	r3, [r1, #12]
 8005dce:	05db      	lsls	r3, r3, #23
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	4616      	mov	r6, r2
 8005dd6:	d505      	bpl.n	8005de4 <__swrite+0x1e>
 8005dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ddc:	2302      	movs	r3, #2
 8005dde:	2200      	movs	r2, #0
 8005de0:	f000 f852 	bl	8005e88 <_lseek_r>
 8005de4:	89a3      	ldrh	r3, [r4, #12]
 8005de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dee:	81a3      	strh	r3, [r4, #12]
 8005df0:	4632      	mov	r2, r6
 8005df2:	463b      	mov	r3, r7
 8005df4:	4628      	mov	r0, r5
 8005df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfa:	f000 b869 	b.w	8005ed0 <_write_r>

08005dfe <__sseek>:
 8005dfe:	b510      	push	{r4, lr}
 8005e00:	460c      	mov	r4, r1
 8005e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e06:	f000 f83f 	bl	8005e88 <_lseek_r>
 8005e0a:	1c43      	adds	r3, r0, #1
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	bf15      	itete	ne
 8005e10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e1a:	81a3      	strheq	r3, [r4, #12]
 8005e1c:	bf18      	it	ne
 8005e1e:	81a3      	strhne	r3, [r4, #12]
 8005e20:	bd10      	pop	{r4, pc}

08005e22 <__sclose>:
 8005e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e26:	f000 b81f 	b.w	8005e68 <_close_r>

08005e2a <memset>:
 8005e2a:	4402      	add	r2, r0
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d100      	bne.n	8005e34 <memset+0xa>
 8005e32:	4770      	bx	lr
 8005e34:	f803 1b01 	strb.w	r1, [r3], #1
 8005e38:	e7f9      	b.n	8005e2e <memset+0x4>

08005e3a <strncmp>:
 8005e3a:	b510      	push	{r4, lr}
 8005e3c:	b16a      	cbz	r2, 8005e5a <strncmp+0x20>
 8005e3e:	3901      	subs	r1, #1
 8005e40:	1884      	adds	r4, r0, r2
 8005e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e46:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d103      	bne.n	8005e56 <strncmp+0x1c>
 8005e4e:	42a0      	cmp	r0, r4
 8005e50:	d001      	beq.n	8005e56 <strncmp+0x1c>
 8005e52:	2a00      	cmp	r2, #0
 8005e54:	d1f5      	bne.n	8005e42 <strncmp+0x8>
 8005e56:	1ad0      	subs	r0, r2, r3
 8005e58:	bd10      	pop	{r4, pc}
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	e7fc      	b.n	8005e58 <strncmp+0x1e>
	...

08005e60 <_localeconv_r>:
 8005e60:	4800      	ldr	r0, [pc, #0]	@ (8005e64 <_localeconv_r+0x4>)
 8005e62:	4770      	bx	lr
 8005e64:	2000016c 	.word	0x2000016c

08005e68 <_close_r>:
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	4d06      	ldr	r5, [pc, #24]	@ (8005e84 <_close_r+0x1c>)
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	4604      	mov	r4, r0
 8005e70:	4608      	mov	r0, r1
 8005e72:	602b      	str	r3, [r5, #0]
 8005e74:	f7fb fda0 	bl	80019b8 <_close>
 8005e78:	1c43      	adds	r3, r0, #1
 8005e7a:	d102      	bne.n	8005e82 <_close_r+0x1a>
 8005e7c:	682b      	ldr	r3, [r5, #0]
 8005e7e:	b103      	cbz	r3, 8005e82 <_close_r+0x1a>
 8005e80:	6023      	str	r3, [r4, #0]
 8005e82:	bd38      	pop	{r3, r4, r5, pc}
 8005e84:	20000518 	.word	0x20000518

08005e88 <_lseek_r>:
 8005e88:	b538      	push	{r3, r4, r5, lr}
 8005e8a:	4d07      	ldr	r5, [pc, #28]	@ (8005ea8 <_lseek_r+0x20>)
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	4608      	mov	r0, r1
 8005e90:	4611      	mov	r1, r2
 8005e92:	2200      	movs	r2, #0
 8005e94:	602a      	str	r2, [r5, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	f7fb fdb5 	bl	8001a06 <_lseek>
 8005e9c:	1c43      	adds	r3, r0, #1
 8005e9e:	d102      	bne.n	8005ea6 <_lseek_r+0x1e>
 8005ea0:	682b      	ldr	r3, [r5, #0]
 8005ea2:	b103      	cbz	r3, 8005ea6 <_lseek_r+0x1e>
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	bd38      	pop	{r3, r4, r5, pc}
 8005ea8:	20000518 	.word	0x20000518

08005eac <_read_r>:
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	4d07      	ldr	r5, [pc, #28]	@ (8005ecc <_read_r+0x20>)
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	4608      	mov	r0, r1
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	602a      	str	r2, [r5, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f7fb fd5f 	bl	800197e <_read>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d102      	bne.n	8005eca <_read_r+0x1e>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	b103      	cbz	r3, 8005eca <_read_r+0x1e>
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	20000518 	.word	0x20000518

08005ed0 <_write_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	4d07      	ldr	r5, [pc, #28]	@ (8005ef0 <_write_r+0x20>)
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	4608      	mov	r0, r1
 8005ed8:	4611      	mov	r1, r2
 8005eda:	2200      	movs	r2, #0
 8005edc:	602a      	str	r2, [r5, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f7fb fa1e 	bl	8001320 <_write>
 8005ee4:	1c43      	adds	r3, r0, #1
 8005ee6:	d102      	bne.n	8005eee <_write_r+0x1e>
 8005ee8:	682b      	ldr	r3, [r5, #0]
 8005eea:	b103      	cbz	r3, 8005eee <_write_r+0x1e>
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	bd38      	pop	{r3, r4, r5, pc}
 8005ef0:	20000518 	.word	0x20000518

08005ef4 <__errno>:
 8005ef4:	4b01      	ldr	r3, [pc, #4]	@ (8005efc <__errno+0x8>)
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	2000002c 	.word	0x2000002c

08005f00 <__libc_init_array>:
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	4d0d      	ldr	r5, [pc, #52]	@ (8005f38 <__libc_init_array+0x38>)
 8005f04:	4c0d      	ldr	r4, [pc, #52]	@ (8005f3c <__libc_init_array+0x3c>)
 8005f06:	1b64      	subs	r4, r4, r5
 8005f08:	10a4      	asrs	r4, r4, #2
 8005f0a:	2600      	movs	r6, #0
 8005f0c:	42a6      	cmp	r6, r4
 8005f0e:	d109      	bne.n	8005f24 <__libc_init_array+0x24>
 8005f10:	4d0b      	ldr	r5, [pc, #44]	@ (8005f40 <__libc_init_array+0x40>)
 8005f12:	4c0c      	ldr	r4, [pc, #48]	@ (8005f44 <__libc_init_array+0x44>)
 8005f14:	f003 ff64 	bl	8009de0 <_init>
 8005f18:	1b64      	subs	r4, r4, r5
 8005f1a:	10a4      	asrs	r4, r4, #2
 8005f1c:	2600      	movs	r6, #0
 8005f1e:	42a6      	cmp	r6, r4
 8005f20:	d105      	bne.n	8005f2e <__libc_init_array+0x2e>
 8005f22:	bd70      	pop	{r4, r5, r6, pc}
 8005f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f28:	4798      	blx	r3
 8005f2a:	3601      	adds	r6, #1
 8005f2c:	e7ee      	b.n	8005f0c <__libc_init_array+0xc>
 8005f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f32:	4798      	blx	r3
 8005f34:	3601      	adds	r6, #1
 8005f36:	e7f2      	b.n	8005f1e <__libc_init_array+0x1e>
 8005f38:	0800a33c 	.word	0x0800a33c
 8005f3c:	0800a33c 	.word	0x0800a33c
 8005f40:	0800a33c 	.word	0x0800a33c
 8005f44:	0800a340 	.word	0x0800a340

08005f48 <__retarget_lock_init_recursive>:
 8005f48:	4770      	bx	lr

08005f4a <__retarget_lock_acquire_recursive>:
 8005f4a:	4770      	bx	lr

08005f4c <__retarget_lock_release_recursive>:
 8005f4c:	4770      	bx	lr
	...

08005f50 <nanf>:
 8005f50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005f58 <nanf+0x8>
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	7fc00000 	.word	0x7fc00000

08005f5c <quorem>:
 8005f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f60:	6903      	ldr	r3, [r0, #16]
 8005f62:	690c      	ldr	r4, [r1, #16]
 8005f64:	42a3      	cmp	r3, r4
 8005f66:	4607      	mov	r7, r0
 8005f68:	db7e      	blt.n	8006068 <quorem+0x10c>
 8005f6a:	3c01      	subs	r4, #1
 8005f6c:	f101 0814 	add.w	r8, r1, #20
 8005f70:	00a3      	lsls	r3, r4, #2
 8005f72:	f100 0514 	add.w	r5, r0, #20
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f7c:	9301      	str	r3, [sp, #4]
 8005f7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f86:	3301      	adds	r3, #1
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f92:	d32e      	bcc.n	8005ff2 <quorem+0x96>
 8005f94:	f04f 0a00 	mov.w	sl, #0
 8005f98:	46c4      	mov	ip, r8
 8005f9a:	46ae      	mov	lr, r5
 8005f9c:	46d3      	mov	fp, sl
 8005f9e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005fa2:	b298      	uxth	r0, r3
 8005fa4:	fb06 a000 	mla	r0, r6, r0, sl
 8005fa8:	0c02      	lsrs	r2, r0, #16
 8005faa:	0c1b      	lsrs	r3, r3, #16
 8005fac:	fb06 2303 	mla	r3, r6, r3, r2
 8005fb0:	f8de 2000 	ldr.w	r2, [lr]
 8005fb4:	b280      	uxth	r0, r0
 8005fb6:	b292      	uxth	r2, r2
 8005fb8:	1a12      	subs	r2, r2, r0
 8005fba:	445a      	add	r2, fp
 8005fbc:	f8de 0000 	ldr.w	r0, [lr]
 8005fc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005fca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005fce:	b292      	uxth	r2, r2
 8005fd0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005fd4:	45e1      	cmp	r9, ip
 8005fd6:	f84e 2b04 	str.w	r2, [lr], #4
 8005fda:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005fde:	d2de      	bcs.n	8005f9e <quorem+0x42>
 8005fe0:	9b00      	ldr	r3, [sp, #0]
 8005fe2:	58eb      	ldr	r3, [r5, r3]
 8005fe4:	b92b      	cbnz	r3, 8005ff2 <quorem+0x96>
 8005fe6:	9b01      	ldr	r3, [sp, #4]
 8005fe8:	3b04      	subs	r3, #4
 8005fea:	429d      	cmp	r5, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	d32f      	bcc.n	8006050 <quorem+0xf4>
 8005ff0:	613c      	str	r4, [r7, #16]
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	f001 f9c4 	bl	8007380 <__mcmp>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	db25      	blt.n	8006048 <quorem+0xec>
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	2000      	movs	r0, #0
 8006000:	f858 2b04 	ldr.w	r2, [r8], #4
 8006004:	f8d1 c000 	ldr.w	ip, [r1]
 8006008:	fa1f fe82 	uxth.w	lr, r2
 800600c:	fa1f f38c 	uxth.w	r3, ip
 8006010:	eba3 030e 	sub.w	r3, r3, lr
 8006014:	4403      	add	r3, r0
 8006016:	0c12      	lsrs	r2, r2, #16
 8006018:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800601c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006020:	b29b      	uxth	r3, r3
 8006022:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006026:	45c1      	cmp	r9, r8
 8006028:	f841 3b04 	str.w	r3, [r1], #4
 800602c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006030:	d2e6      	bcs.n	8006000 <quorem+0xa4>
 8006032:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006036:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800603a:	b922      	cbnz	r2, 8006046 <quorem+0xea>
 800603c:	3b04      	subs	r3, #4
 800603e:	429d      	cmp	r5, r3
 8006040:	461a      	mov	r2, r3
 8006042:	d30b      	bcc.n	800605c <quorem+0x100>
 8006044:	613c      	str	r4, [r7, #16]
 8006046:	3601      	adds	r6, #1
 8006048:	4630      	mov	r0, r6
 800604a:	b003      	add	sp, #12
 800604c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006050:	6812      	ldr	r2, [r2, #0]
 8006052:	3b04      	subs	r3, #4
 8006054:	2a00      	cmp	r2, #0
 8006056:	d1cb      	bne.n	8005ff0 <quorem+0x94>
 8006058:	3c01      	subs	r4, #1
 800605a:	e7c6      	b.n	8005fea <quorem+0x8e>
 800605c:	6812      	ldr	r2, [r2, #0]
 800605e:	3b04      	subs	r3, #4
 8006060:	2a00      	cmp	r2, #0
 8006062:	d1ef      	bne.n	8006044 <quorem+0xe8>
 8006064:	3c01      	subs	r4, #1
 8006066:	e7ea      	b.n	800603e <quorem+0xe2>
 8006068:	2000      	movs	r0, #0
 800606a:	e7ee      	b.n	800604a <quorem+0xee>
 800606c:	0000      	movs	r0, r0
	...

08006070 <_dtoa_r>:
 8006070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006074:	69c7      	ldr	r7, [r0, #28]
 8006076:	b099      	sub	sp, #100	@ 0x64
 8006078:	ed8d 0b02 	vstr	d0, [sp, #8]
 800607c:	ec55 4b10 	vmov	r4, r5, d0
 8006080:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006082:	9109      	str	r1, [sp, #36]	@ 0x24
 8006084:	4683      	mov	fp, r0
 8006086:	920e      	str	r2, [sp, #56]	@ 0x38
 8006088:	9313      	str	r3, [sp, #76]	@ 0x4c
 800608a:	b97f      	cbnz	r7, 80060ac <_dtoa_r+0x3c>
 800608c:	2010      	movs	r0, #16
 800608e:	f000 fdfd 	bl	8006c8c <malloc>
 8006092:	4602      	mov	r2, r0
 8006094:	f8cb 001c 	str.w	r0, [fp, #28]
 8006098:	b920      	cbnz	r0, 80060a4 <_dtoa_r+0x34>
 800609a:	4ba7      	ldr	r3, [pc, #668]	@ (8006338 <_dtoa_r+0x2c8>)
 800609c:	21ef      	movs	r1, #239	@ 0xef
 800609e:	48a7      	ldr	r0, [pc, #668]	@ (800633c <_dtoa_r+0x2cc>)
 80060a0:	f003 f98a 	bl	80093b8 <__assert_func>
 80060a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80060a8:	6007      	str	r7, [r0, #0]
 80060aa:	60c7      	str	r7, [r0, #12]
 80060ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80060b0:	6819      	ldr	r1, [r3, #0]
 80060b2:	b159      	cbz	r1, 80060cc <_dtoa_r+0x5c>
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	604a      	str	r2, [r1, #4]
 80060b8:	2301      	movs	r3, #1
 80060ba:	4093      	lsls	r3, r2
 80060bc:	608b      	str	r3, [r1, #8]
 80060be:	4658      	mov	r0, fp
 80060c0:	f000 feda 	bl	8006e78 <_Bfree>
 80060c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80060c8:	2200      	movs	r2, #0
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	1e2b      	subs	r3, r5, #0
 80060ce:	bfb9      	ittee	lt
 80060d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80060d4:	9303      	strlt	r3, [sp, #12]
 80060d6:	2300      	movge	r3, #0
 80060d8:	6033      	strge	r3, [r6, #0]
 80060da:	9f03      	ldr	r7, [sp, #12]
 80060dc:	4b98      	ldr	r3, [pc, #608]	@ (8006340 <_dtoa_r+0x2d0>)
 80060de:	bfbc      	itt	lt
 80060e0:	2201      	movlt	r2, #1
 80060e2:	6032      	strlt	r2, [r6, #0]
 80060e4:	43bb      	bics	r3, r7
 80060e6:	d112      	bne.n	800610e <_dtoa_r+0x9e>
 80060e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80060ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80060f4:	4323      	orrs	r3, r4
 80060f6:	f000 854d 	beq.w	8006b94 <_dtoa_r+0xb24>
 80060fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80060fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006354 <_dtoa_r+0x2e4>
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 854f 	beq.w	8006ba4 <_dtoa_r+0xb34>
 8006106:	f10a 0303 	add.w	r3, sl, #3
 800610a:	f000 bd49 	b.w	8006ba0 <_dtoa_r+0xb30>
 800610e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006112:	2200      	movs	r2, #0
 8006114:	ec51 0b17 	vmov	r0, r1, d7
 8006118:	2300      	movs	r3, #0
 800611a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800611e:	f7fa fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006122:	4680      	mov	r8, r0
 8006124:	b158      	cbz	r0, 800613e <_dtoa_r+0xce>
 8006126:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006128:	2301      	movs	r3, #1
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800612e:	b113      	cbz	r3, 8006136 <_dtoa_r+0xc6>
 8006130:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006132:	4b84      	ldr	r3, [pc, #528]	@ (8006344 <_dtoa_r+0x2d4>)
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006358 <_dtoa_r+0x2e8>
 800613a:	f000 bd33 	b.w	8006ba4 <_dtoa_r+0xb34>
 800613e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006142:	aa16      	add	r2, sp, #88	@ 0x58
 8006144:	a917      	add	r1, sp, #92	@ 0x5c
 8006146:	4658      	mov	r0, fp
 8006148:	f001 fa3a 	bl	80075c0 <__d2b>
 800614c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006150:	4681      	mov	r9, r0
 8006152:	2e00      	cmp	r6, #0
 8006154:	d077      	beq.n	8006246 <_dtoa_r+0x1d6>
 8006156:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006158:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800615c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006164:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006168:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800616c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006170:	4619      	mov	r1, r3
 8006172:	2200      	movs	r2, #0
 8006174:	4b74      	ldr	r3, [pc, #464]	@ (8006348 <_dtoa_r+0x2d8>)
 8006176:	f7fa f887 	bl	8000288 <__aeabi_dsub>
 800617a:	a369      	add	r3, pc, #420	@ (adr r3, 8006320 <_dtoa_r+0x2b0>)
 800617c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006180:	f7fa fa3a 	bl	80005f8 <__aeabi_dmul>
 8006184:	a368      	add	r3, pc, #416	@ (adr r3, 8006328 <_dtoa_r+0x2b8>)
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	f7fa f87f 	bl	800028c <__adddf3>
 800618e:	4604      	mov	r4, r0
 8006190:	4630      	mov	r0, r6
 8006192:	460d      	mov	r5, r1
 8006194:	f7fa f9c6 	bl	8000524 <__aeabi_i2d>
 8006198:	a365      	add	r3, pc, #404	@ (adr r3, 8006330 <_dtoa_r+0x2c0>)
 800619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619e:	f7fa fa2b 	bl	80005f8 <__aeabi_dmul>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	4620      	mov	r0, r4
 80061a8:	4629      	mov	r1, r5
 80061aa:	f7fa f86f 	bl	800028c <__adddf3>
 80061ae:	4604      	mov	r4, r0
 80061b0:	460d      	mov	r5, r1
 80061b2:	f7fa fcd1 	bl	8000b58 <__aeabi_d2iz>
 80061b6:	2200      	movs	r2, #0
 80061b8:	4607      	mov	r7, r0
 80061ba:	2300      	movs	r3, #0
 80061bc:	4620      	mov	r0, r4
 80061be:	4629      	mov	r1, r5
 80061c0:	f7fa fc8c 	bl	8000adc <__aeabi_dcmplt>
 80061c4:	b140      	cbz	r0, 80061d8 <_dtoa_r+0x168>
 80061c6:	4638      	mov	r0, r7
 80061c8:	f7fa f9ac 	bl	8000524 <__aeabi_i2d>
 80061cc:	4622      	mov	r2, r4
 80061ce:	462b      	mov	r3, r5
 80061d0:	f7fa fc7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80061d4:	b900      	cbnz	r0, 80061d8 <_dtoa_r+0x168>
 80061d6:	3f01      	subs	r7, #1
 80061d8:	2f16      	cmp	r7, #22
 80061da:	d851      	bhi.n	8006280 <_dtoa_r+0x210>
 80061dc:	4b5b      	ldr	r3, [pc, #364]	@ (800634c <_dtoa_r+0x2dc>)
 80061de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061ea:	f7fa fc77 	bl	8000adc <__aeabi_dcmplt>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d048      	beq.n	8006284 <_dtoa_r+0x214>
 80061f2:	3f01      	subs	r7, #1
 80061f4:	2300      	movs	r3, #0
 80061f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80061f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80061fa:	1b9b      	subs	r3, r3, r6
 80061fc:	1e5a      	subs	r2, r3, #1
 80061fe:	bf44      	itt	mi
 8006200:	f1c3 0801 	rsbmi	r8, r3, #1
 8006204:	2300      	movmi	r3, #0
 8006206:	9208      	str	r2, [sp, #32]
 8006208:	bf54      	ite	pl
 800620a:	f04f 0800 	movpl.w	r8, #0
 800620e:	9308      	strmi	r3, [sp, #32]
 8006210:	2f00      	cmp	r7, #0
 8006212:	db39      	blt.n	8006288 <_dtoa_r+0x218>
 8006214:	9b08      	ldr	r3, [sp, #32]
 8006216:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006218:	443b      	add	r3, r7
 800621a:	9308      	str	r3, [sp, #32]
 800621c:	2300      	movs	r3, #0
 800621e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006222:	2b09      	cmp	r3, #9
 8006224:	d864      	bhi.n	80062f0 <_dtoa_r+0x280>
 8006226:	2b05      	cmp	r3, #5
 8006228:	bfc4      	itt	gt
 800622a:	3b04      	subgt	r3, #4
 800622c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800622e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006230:	f1a3 0302 	sub.w	r3, r3, #2
 8006234:	bfcc      	ite	gt
 8006236:	2400      	movgt	r4, #0
 8006238:	2401      	movle	r4, #1
 800623a:	2b03      	cmp	r3, #3
 800623c:	d863      	bhi.n	8006306 <_dtoa_r+0x296>
 800623e:	e8df f003 	tbb	[pc, r3]
 8006242:	372a      	.short	0x372a
 8006244:	5535      	.short	0x5535
 8006246:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800624a:	441e      	add	r6, r3
 800624c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006250:	2b20      	cmp	r3, #32
 8006252:	bfc1      	itttt	gt
 8006254:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006258:	409f      	lslgt	r7, r3
 800625a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800625e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006262:	bfd6      	itet	le
 8006264:	f1c3 0320 	rsble	r3, r3, #32
 8006268:	ea47 0003 	orrgt.w	r0, r7, r3
 800626c:	fa04 f003 	lslle.w	r0, r4, r3
 8006270:	f7fa f948 	bl	8000504 <__aeabi_ui2d>
 8006274:	2201      	movs	r2, #1
 8006276:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800627a:	3e01      	subs	r6, #1
 800627c:	9214      	str	r2, [sp, #80]	@ 0x50
 800627e:	e777      	b.n	8006170 <_dtoa_r+0x100>
 8006280:	2301      	movs	r3, #1
 8006282:	e7b8      	b.n	80061f6 <_dtoa_r+0x186>
 8006284:	9012      	str	r0, [sp, #72]	@ 0x48
 8006286:	e7b7      	b.n	80061f8 <_dtoa_r+0x188>
 8006288:	427b      	negs	r3, r7
 800628a:	930a      	str	r3, [sp, #40]	@ 0x28
 800628c:	2300      	movs	r3, #0
 800628e:	eba8 0807 	sub.w	r8, r8, r7
 8006292:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006294:	e7c4      	b.n	8006220 <_dtoa_r+0x1b0>
 8006296:	2300      	movs	r3, #0
 8006298:	930b      	str	r3, [sp, #44]	@ 0x2c
 800629a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800629c:	2b00      	cmp	r3, #0
 800629e:	dc35      	bgt.n	800630c <_dtoa_r+0x29c>
 80062a0:	2301      	movs	r3, #1
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	9307      	str	r3, [sp, #28]
 80062a6:	461a      	mov	r2, r3
 80062a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80062aa:	e00b      	b.n	80062c4 <_dtoa_r+0x254>
 80062ac:	2301      	movs	r3, #1
 80062ae:	e7f3      	b.n	8006298 <_dtoa_r+0x228>
 80062b0:	2300      	movs	r3, #0
 80062b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	3301      	adds	r3, #1
 80062bc:	2b01      	cmp	r3, #1
 80062be:	9307      	str	r3, [sp, #28]
 80062c0:	bfb8      	it	lt
 80062c2:	2301      	movlt	r3, #1
 80062c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80062c8:	2100      	movs	r1, #0
 80062ca:	2204      	movs	r2, #4
 80062cc:	f102 0514 	add.w	r5, r2, #20
 80062d0:	429d      	cmp	r5, r3
 80062d2:	d91f      	bls.n	8006314 <_dtoa_r+0x2a4>
 80062d4:	6041      	str	r1, [r0, #4]
 80062d6:	4658      	mov	r0, fp
 80062d8:	f000 fd8e 	bl	8006df8 <_Balloc>
 80062dc:	4682      	mov	sl, r0
 80062de:	2800      	cmp	r0, #0
 80062e0:	d13c      	bne.n	800635c <_dtoa_r+0x2ec>
 80062e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006350 <_dtoa_r+0x2e0>)
 80062e4:	4602      	mov	r2, r0
 80062e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80062ea:	e6d8      	b.n	800609e <_dtoa_r+0x2e>
 80062ec:	2301      	movs	r3, #1
 80062ee:	e7e0      	b.n	80062b2 <_dtoa_r+0x242>
 80062f0:	2401      	movs	r4, #1
 80062f2:	2300      	movs	r3, #0
 80062f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80062f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80062f8:	f04f 33ff 	mov.w	r3, #4294967295
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	9307      	str	r3, [sp, #28]
 8006300:	2200      	movs	r2, #0
 8006302:	2312      	movs	r3, #18
 8006304:	e7d0      	b.n	80062a8 <_dtoa_r+0x238>
 8006306:	2301      	movs	r3, #1
 8006308:	930b      	str	r3, [sp, #44]	@ 0x2c
 800630a:	e7f5      	b.n	80062f8 <_dtoa_r+0x288>
 800630c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	9307      	str	r3, [sp, #28]
 8006312:	e7d7      	b.n	80062c4 <_dtoa_r+0x254>
 8006314:	3101      	adds	r1, #1
 8006316:	0052      	lsls	r2, r2, #1
 8006318:	e7d8      	b.n	80062cc <_dtoa_r+0x25c>
 800631a:	bf00      	nop
 800631c:	f3af 8000 	nop.w
 8006320:	636f4361 	.word	0x636f4361
 8006324:	3fd287a7 	.word	0x3fd287a7
 8006328:	8b60c8b3 	.word	0x8b60c8b3
 800632c:	3fc68a28 	.word	0x3fc68a28
 8006330:	509f79fb 	.word	0x509f79fb
 8006334:	3fd34413 	.word	0x3fd34413
 8006338:	08009f2c 	.word	0x08009f2c
 800633c:	08009f43 	.word	0x08009f43
 8006340:	7ff00000 	.word	0x7ff00000
 8006344:	0800a289 	.word	0x0800a289
 8006348:	3ff80000 	.word	0x3ff80000
 800634c:	0800a040 	.word	0x0800a040
 8006350:	08009f9b 	.word	0x08009f9b
 8006354:	08009f28 	.word	0x08009f28
 8006358:	0800a288 	.word	0x0800a288
 800635c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006360:	6018      	str	r0, [r3, #0]
 8006362:	9b07      	ldr	r3, [sp, #28]
 8006364:	2b0e      	cmp	r3, #14
 8006366:	f200 80a4 	bhi.w	80064b2 <_dtoa_r+0x442>
 800636a:	2c00      	cmp	r4, #0
 800636c:	f000 80a1 	beq.w	80064b2 <_dtoa_r+0x442>
 8006370:	2f00      	cmp	r7, #0
 8006372:	dd33      	ble.n	80063dc <_dtoa_r+0x36c>
 8006374:	4bad      	ldr	r3, [pc, #692]	@ (800662c <_dtoa_r+0x5bc>)
 8006376:	f007 020f 	and.w	r2, r7, #15
 800637a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800637e:	ed93 7b00 	vldr	d7, [r3]
 8006382:	05f8      	lsls	r0, r7, #23
 8006384:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006388:	ea4f 1427 	mov.w	r4, r7, asr #4
 800638c:	d516      	bpl.n	80063bc <_dtoa_r+0x34c>
 800638e:	4ba8      	ldr	r3, [pc, #672]	@ (8006630 <_dtoa_r+0x5c0>)
 8006390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006394:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006398:	f7fa fa58 	bl	800084c <__aeabi_ddiv>
 800639c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063a0:	f004 040f 	and.w	r4, r4, #15
 80063a4:	2603      	movs	r6, #3
 80063a6:	4da2      	ldr	r5, [pc, #648]	@ (8006630 <_dtoa_r+0x5c0>)
 80063a8:	b954      	cbnz	r4, 80063c0 <_dtoa_r+0x350>
 80063aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063b2:	f7fa fa4b 	bl	800084c <__aeabi_ddiv>
 80063b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063ba:	e028      	b.n	800640e <_dtoa_r+0x39e>
 80063bc:	2602      	movs	r6, #2
 80063be:	e7f2      	b.n	80063a6 <_dtoa_r+0x336>
 80063c0:	07e1      	lsls	r1, r4, #31
 80063c2:	d508      	bpl.n	80063d6 <_dtoa_r+0x366>
 80063c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80063cc:	f7fa f914 	bl	80005f8 <__aeabi_dmul>
 80063d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063d4:	3601      	adds	r6, #1
 80063d6:	1064      	asrs	r4, r4, #1
 80063d8:	3508      	adds	r5, #8
 80063da:	e7e5      	b.n	80063a8 <_dtoa_r+0x338>
 80063dc:	f000 80d2 	beq.w	8006584 <_dtoa_r+0x514>
 80063e0:	427c      	negs	r4, r7
 80063e2:	4b92      	ldr	r3, [pc, #584]	@ (800662c <_dtoa_r+0x5bc>)
 80063e4:	4d92      	ldr	r5, [pc, #584]	@ (8006630 <_dtoa_r+0x5c0>)
 80063e6:	f004 020f 	and.w	r2, r4, #15
 80063ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063f6:	f7fa f8ff 	bl	80005f8 <__aeabi_dmul>
 80063fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063fe:	1124      	asrs	r4, r4, #4
 8006400:	2300      	movs	r3, #0
 8006402:	2602      	movs	r6, #2
 8006404:	2c00      	cmp	r4, #0
 8006406:	f040 80b2 	bne.w	800656e <_dtoa_r+0x4fe>
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1d3      	bne.n	80063b6 <_dtoa_r+0x346>
 800640e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006410:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 80b7 	beq.w	8006588 <_dtoa_r+0x518>
 800641a:	4b86      	ldr	r3, [pc, #536]	@ (8006634 <_dtoa_r+0x5c4>)
 800641c:	2200      	movs	r2, #0
 800641e:	4620      	mov	r0, r4
 8006420:	4629      	mov	r1, r5
 8006422:	f7fa fb5b 	bl	8000adc <__aeabi_dcmplt>
 8006426:	2800      	cmp	r0, #0
 8006428:	f000 80ae 	beq.w	8006588 <_dtoa_r+0x518>
 800642c:	9b07      	ldr	r3, [sp, #28]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 80aa 	beq.w	8006588 <_dtoa_r+0x518>
 8006434:	9b00      	ldr	r3, [sp, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	dd37      	ble.n	80064aa <_dtoa_r+0x43a>
 800643a:	1e7b      	subs	r3, r7, #1
 800643c:	9304      	str	r3, [sp, #16]
 800643e:	4620      	mov	r0, r4
 8006440:	4b7d      	ldr	r3, [pc, #500]	@ (8006638 <_dtoa_r+0x5c8>)
 8006442:	2200      	movs	r2, #0
 8006444:	4629      	mov	r1, r5
 8006446:	f7fa f8d7 	bl	80005f8 <__aeabi_dmul>
 800644a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800644e:	9c00      	ldr	r4, [sp, #0]
 8006450:	3601      	adds	r6, #1
 8006452:	4630      	mov	r0, r6
 8006454:	f7fa f866 	bl	8000524 <__aeabi_i2d>
 8006458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800645c:	f7fa f8cc 	bl	80005f8 <__aeabi_dmul>
 8006460:	4b76      	ldr	r3, [pc, #472]	@ (800663c <_dtoa_r+0x5cc>)
 8006462:	2200      	movs	r2, #0
 8006464:	f7f9 ff12 	bl	800028c <__adddf3>
 8006468:	4605      	mov	r5, r0
 800646a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800646e:	2c00      	cmp	r4, #0
 8006470:	f040 808d 	bne.w	800658e <_dtoa_r+0x51e>
 8006474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006478:	4b71      	ldr	r3, [pc, #452]	@ (8006640 <_dtoa_r+0x5d0>)
 800647a:	2200      	movs	r2, #0
 800647c:	f7f9 ff04 	bl	8000288 <__aeabi_dsub>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006488:	462a      	mov	r2, r5
 800648a:	4633      	mov	r3, r6
 800648c:	f7fa fb44 	bl	8000b18 <__aeabi_dcmpgt>
 8006490:	2800      	cmp	r0, #0
 8006492:	f040 828b 	bne.w	80069ac <_dtoa_r+0x93c>
 8006496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800649a:	462a      	mov	r2, r5
 800649c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80064a0:	f7fa fb1c 	bl	8000adc <__aeabi_dcmplt>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	f040 8128 	bne.w	80066fa <_dtoa_r+0x68a>
 80064aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80064ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80064b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f2c0 815a 	blt.w	800676e <_dtoa_r+0x6fe>
 80064ba:	2f0e      	cmp	r7, #14
 80064bc:	f300 8157 	bgt.w	800676e <_dtoa_r+0x6fe>
 80064c0:	4b5a      	ldr	r3, [pc, #360]	@ (800662c <_dtoa_r+0x5bc>)
 80064c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80064c6:	ed93 7b00 	vldr	d7, [r3]
 80064ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	ed8d 7b00 	vstr	d7, [sp]
 80064d2:	da03      	bge.n	80064dc <_dtoa_r+0x46c>
 80064d4:	9b07      	ldr	r3, [sp, #28]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f340 8101 	ble.w	80066de <_dtoa_r+0x66e>
 80064dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80064e0:	4656      	mov	r6, sl
 80064e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064e6:	4620      	mov	r0, r4
 80064e8:	4629      	mov	r1, r5
 80064ea:	f7fa f9af 	bl	800084c <__aeabi_ddiv>
 80064ee:	f7fa fb33 	bl	8000b58 <__aeabi_d2iz>
 80064f2:	4680      	mov	r8, r0
 80064f4:	f7fa f816 	bl	8000524 <__aeabi_i2d>
 80064f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064fc:	f7fa f87c 	bl	80005f8 <__aeabi_dmul>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	4620      	mov	r0, r4
 8006506:	4629      	mov	r1, r5
 8006508:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800650c:	f7f9 febc 	bl	8000288 <__aeabi_dsub>
 8006510:	f806 4b01 	strb.w	r4, [r6], #1
 8006514:	9d07      	ldr	r5, [sp, #28]
 8006516:	eba6 040a 	sub.w	r4, r6, sl
 800651a:	42a5      	cmp	r5, r4
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	f040 8117 	bne.w	8006752 <_dtoa_r+0x6e2>
 8006524:	f7f9 feb2 	bl	800028c <__adddf3>
 8006528:	e9dd 2300 	ldrd	r2, r3, [sp]
 800652c:	4604      	mov	r4, r0
 800652e:	460d      	mov	r5, r1
 8006530:	f7fa faf2 	bl	8000b18 <__aeabi_dcmpgt>
 8006534:	2800      	cmp	r0, #0
 8006536:	f040 80f9 	bne.w	800672c <_dtoa_r+0x6bc>
 800653a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800653e:	4620      	mov	r0, r4
 8006540:	4629      	mov	r1, r5
 8006542:	f7fa fac1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006546:	b118      	cbz	r0, 8006550 <_dtoa_r+0x4e0>
 8006548:	f018 0f01 	tst.w	r8, #1
 800654c:	f040 80ee 	bne.w	800672c <_dtoa_r+0x6bc>
 8006550:	4649      	mov	r1, r9
 8006552:	4658      	mov	r0, fp
 8006554:	f000 fc90 	bl	8006e78 <_Bfree>
 8006558:	2300      	movs	r3, #0
 800655a:	7033      	strb	r3, [r6, #0]
 800655c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800655e:	3701      	adds	r7, #1
 8006560:	601f      	str	r7, [r3, #0]
 8006562:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 831d 	beq.w	8006ba4 <_dtoa_r+0xb34>
 800656a:	601e      	str	r6, [r3, #0]
 800656c:	e31a      	b.n	8006ba4 <_dtoa_r+0xb34>
 800656e:	07e2      	lsls	r2, r4, #31
 8006570:	d505      	bpl.n	800657e <_dtoa_r+0x50e>
 8006572:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006576:	f7fa f83f 	bl	80005f8 <__aeabi_dmul>
 800657a:	3601      	adds	r6, #1
 800657c:	2301      	movs	r3, #1
 800657e:	1064      	asrs	r4, r4, #1
 8006580:	3508      	adds	r5, #8
 8006582:	e73f      	b.n	8006404 <_dtoa_r+0x394>
 8006584:	2602      	movs	r6, #2
 8006586:	e742      	b.n	800640e <_dtoa_r+0x39e>
 8006588:	9c07      	ldr	r4, [sp, #28]
 800658a:	9704      	str	r7, [sp, #16]
 800658c:	e761      	b.n	8006452 <_dtoa_r+0x3e2>
 800658e:	4b27      	ldr	r3, [pc, #156]	@ (800662c <_dtoa_r+0x5bc>)
 8006590:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006592:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006596:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800659a:	4454      	add	r4, sl
 800659c:	2900      	cmp	r1, #0
 800659e:	d053      	beq.n	8006648 <_dtoa_r+0x5d8>
 80065a0:	4928      	ldr	r1, [pc, #160]	@ (8006644 <_dtoa_r+0x5d4>)
 80065a2:	2000      	movs	r0, #0
 80065a4:	f7fa f952 	bl	800084c <__aeabi_ddiv>
 80065a8:	4633      	mov	r3, r6
 80065aa:	462a      	mov	r2, r5
 80065ac:	f7f9 fe6c 	bl	8000288 <__aeabi_dsub>
 80065b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80065b4:	4656      	mov	r6, sl
 80065b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ba:	f7fa facd 	bl	8000b58 <__aeabi_d2iz>
 80065be:	4605      	mov	r5, r0
 80065c0:	f7f9 ffb0 	bl	8000524 <__aeabi_i2d>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065cc:	f7f9 fe5c 	bl	8000288 <__aeabi_dsub>
 80065d0:	3530      	adds	r5, #48	@ 0x30
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065da:	f806 5b01 	strb.w	r5, [r6], #1
 80065de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80065e2:	f7fa fa7b 	bl	8000adc <__aeabi_dcmplt>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d171      	bne.n	80066ce <_dtoa_r+0x65e>
 80065ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065ee:	4911      	ldr	r1, [pc, #68]	@ (8006634 <_dtoa_r+0x5c4>)
 80065f0:	2000      	movs	r0, #0
 80065f2:	f7f9 fe49 	bl	8000288 <__aeabi_dsub>
 80065f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80065fa:	f7fa fa6f 	bl	8000adc <__aeabi_dcmplt>
 80065fe:	2800      	cmp	r0, #0
 8006600:	f040 8095 	bne.w	800672e <_dtoa_r+0x6be>
 8006604:	42a6      	cmp	r6, r4
 8006606:	f43f af50 	beq.w	80064aa <_dtoa_r+0x43a>
 800660a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800660e:	4b0a      	ldr	r3, [pc, #40]	@ (8006638 <_dtoa_r+0x5c8>)
 8006610:	2200      	movs	r2, #0
 8006612:	f7f9 fff1 	bl	80005f8 <__aeabi_dmul>
 8006616:	4b08      	ldr	r3, [pc, #32]	@ (8006638 <_dtoa_r+0x5c8>)
 8006618:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800661c:	2200      	movs	r2, #0
 800661e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006622:	f7f9 ffe9 	bl	80005f8 <__aeabi_dmul>
 8006626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800662a:	e7c4      	b.n	80065b6 <_dtoa_r+0x546>
 800662c:	0800a040 	.word	0x0800a040
 8006630:	0800a018 	.word	0x0800a018
 8006634:	3ff00000 	.word	0x3ff00000
 8006638:	40240000 	.word	0x40240000
 800663c:	401c0000 	.word	0x401c0000
 8006640:	40140000 	.word	0x40140000
 8006644:	3fe00000 	.word	0x3fe00000
 8006648:	4631      	mov	r1, r6
 800664a:	4628      	mov	r0, r5
 800664c:	f7f9 ffd4 	bl	80005f8 <__aeabi_dmul>
 8006650:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006654:	9415      	str	r4, [sp, #84]	@ 0x54
 8006656:	4656      	mov	r6, sl
 8006658:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800665c:	f7fa fa7c 	bl	8000b58 <__aeabi_d2iz>
 8006660:	4605      	mov	r5, r0
 8006662:	f7f9 ff5f 	bl	8000524 <__aeabi_i2d>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800666e:	f7f9 fe0b 	bl	8000288 <__aeabi_dsub>
 8006672:	3530      	adds	r5, #48	@ 0x30
 8006674:	f806 5b01 	strb.w	r5, [r6], #1
 8006678:	4602      	mov	r2, r0
 800667a:	460b      	mov	r3, r1
 800667c:	42a6      	cmp	r6, r4
 800667e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006682:	f04f 0200 	mov.w	r2, #0
 8006686:	d124      	bne.n	80066d2 <_dtoa_r+0x662>
 8006688:	4bac      	ldr	r3, [pc, #688]	@ (800693c <_dtoa_r+0x8cc>)
 800668a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800668e:	f7f9 fdfd 	bl	800028c <__adddf3>
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800669a:	f7fa fa3d 	bl	8000b18 <__aeabi_dcmpgt>
 800669e:	2800      	cmp	r0, #0
 80066a0:	d145      	bne.n	800672e <_dtoa_r+0x6be>
 80066a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066a6:	49a5      	ldr	r1, [pc, #660]	@ (800693c <_dtoa_r+0x8cc>)
 80066a8:	2000      	movs	r0, #0
 80066aa:	f7f9 fded 	bl	8000288 <__aeabi_dsub>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066b6:	f7fa fa11 	bl	8000adc <__aeabi_dcmplt>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	f43f aef5 	beq.w	80064aa <_dtoa_r+0x43a>
 80066c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80066c2:	1e73      	subs	r3, r6, #1
 80066c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80066c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80066ca:	2b30      	cmp	r3, #48	@ 0x30
 80066cc:	d0f8      	beq.n	80066c0 <_dtoa_r+0x650>
 80066ce:	9f04      	ldr	r7, [sp, #16]
 80066d0:	e73e      	b.n	8006550 <_dtoa_r+0x4e0>
 80066d2:	4b9b      	ldr	r3, [pc, #620]	@ (8006940 <_dtoa_r+0x8d0>)
 80066d4:	f7f9 ff90 	bl	80005f8 <__aeabi_dmul>
 80066d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066dc:	e7bc      	b.n	8006658 <_dtoa_r+0x5e8>
 80066de:	d10c      	bne.n	80066fa <_dtoa_r+0x68a>
 80066e0:	4b98      	ldr	r3, [pc, #608]	@ (8006944 <_dtoa_r+0x8d4>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066e8:	f7f9 ff86 	bl	80005f8 <__aeabi_dmul>
 80066ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066f0:	f7fa fa08 	bl	8000b04 <__aeabi_dcmpge>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	f000 8157 	beq.w	80069a8 <_dtoa_r+0x938>
 80066fa:	2400      	movs	r4, #0
 80066fc:	4625      	mov	r5, r4
 80066fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006700:	43db      	mvns	r3, r3
 8006702:	9304      	str	r3, [sp, #16]
 8006704:	4656      	mov	r6, sl
 8006706:	2700      	movs	r7, #0
 8006708:	4621      	mov	r1, r4
 800670a:	4658      	mov	r0, fp
 800670c:	f000 fbb4 	bl	8006e78 <_Bfree>
 8006710:	2d00      	cmp	r5, #0
 8006712:	d0dc      	beq.n	80066ce <_dtoa_r+0x65e>
 8006714:	b12f      	cbz	r7, 8006722 <_dtoa_r+0x6b2>
 8006716:	42af      	cmp	r7, r5
 8006718:	d003      	beq.n	8006722 <_dtoa_r+0x6b2>
 800671a:	4639      	mov	r1, r7
 800671c:	4658      	mov	r0, fp
 800671e:	f000 fbab 	bl	8006e78 <_Bfree>
 8006722:	4629      	mov	r1, r5
 8006724:	4658      	mov	r0, fp
 8006726:	f000 fba7 	bl	8006e78 <_Bfree>
 800672a:	e7d0      	b.n	80066ce <_dtoa_r+0x65e>
 800672c:	9704      	str	r7, [sp, #16]
 800672e:	4633      	mov	r3, r6
 8006730:	461e      	mov	r6, r3
 8006732:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006736:	2a39      	cmp	r2, #57	@ 0x39
 8006738:	d107      	bne.n	800674a <_dtoa_r+0x6da>
 800673a:	459a      	cmp	sl, r3
 800673c:	d1f8      	bne.n	8006730 <_dtoa_r+0x6c0>
 800673e:	9a04      	ldr	r2, [sp, #16]
 8006740:	3201      	adds	r2, #1
 8006742:	9204      	str	r2, [sp, #16]
 8006744:	2230      	movs	r2, #48	@ 0x30
 8006746:	f88a 2000 	strb.w	r2, [sl]
 800674a:	781a      	ldrb	r2, [r3, #0]
 800674c:	3201      	adds	r2, #1
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	e7bd      	b.n	80066ce <_dtoa_r+0x65e>
 8006752:	4b7b      	ldr	r3, [pc, #492]	@ (8006940 <_dtoa_r+0x8d0>)
 8006754:	2200      	movs	r2, #0
 8006756:	f7f9 ff4f 	bl	80005f8 <__aeabi_dmul>
 800675a:	2200      	movs	r2, #0
 800675c:	2300      	movs	r3, #0
 800675e:	4604      	mov	r4, r0
 8006760:	460d      	mov	r5, r1
 8006762:	f7fa f9b1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006766:	2800      	cmp	r0, #0
 8006768:	f43f aebb 	beq.w	80064e2 <_dtoa_r+0x472>
 800676c:	e6f0      	b.n	8006550 <_dtoa_r+0x4e0>
 800676e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006770:	2a00      	cmp	r2, #0
 8006772:	f000 80db 	beq.w	800692c <_dtoa_r+0x8bc>
 8006776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006778:	2a01      	cmp	r2, #1
 800677a:	f300 80bf 	bgt.w	80068fc <_dtoa_r+0x88c>
 800677e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006780:	2a00      	cmp	r2, #0
 8006782:	f000 80b7 	beq.w	80068f4 <_dtoa_r+0x884>
 8006786:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800678a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800678c:	4646      	mov	r6, r8
 800678e:	9a08      	ldr	r2, [sp, #32]
 8006790:	2101      	movs	r1, #1
 8006792:	441a      	add	r2, r3
 8006794:	4658      	mov	r0, fp
 8006796:	4498      	add	r8, r3
 8006798:	9208      	str	r2, [sp, #32]
 800679a:	f000 fc6b 	bl	8007074 <__i2b>
 800679e:	4605      	mov	r5, r0
 80067a0:	b15e      	cbz	r6, 80067ba <_dtoa_r+0x74a>
 80067a2:	9b08      	ldr	r3, [sp, #32]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	dd08      	ble.n	80067ba <_dtoa_r+0x74a>
 80067a8:	42b3      	cmp	r3, r6
 80067aa:	9a08      	ldr	r2, [sp, #32]
 80067ac:	bfa8      	it	ge
 80067ae:	4633      	movge	r3, r6
 80067b0:	eba8 0803 	sub.w	r8, r8, r3
 80067b4:	1af6      	subs	r6, r6, r3
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	9308      	str	r3, [sp, #32]
 80067ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067bc:	b1f3      	cbz	r3, 80067fc <_dtoa_r+0x78c>
 80067be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 80b7 	beq.w	8006934 <_dtoa_r+0x8c4>
 80067c6:	b18c      	cbz	r4, 80067ec <_dtoa_r+0x77c>
 80067c8:	4629      	mov	r1, r5
 80067ca:	4622      	mov	r2, r4
 80067cc:	4658      	mov	r0, fp
 80067ce:	f000 fd11 	bl	80071f4 <__pow5mult>
 80067d2:	464a      	mov	r2, r9
 80067d4:	4601      	mov	r1, r0
 80067d6:	4605      	mov	r5, r0
 80067d8:	4658      	mov	r0, fp
 80067da:	f000 fc61 	bl	80070a0 <__multiply>
 80067de:	4649      	mov	r1, r9
 80067e0:	9004      	str	r0, [sp, #16]
 80067e2:	4658      	mov	r0, fp
 80067e4:	f000 fb48 	bl	8006e78 <_Bfree>
 80067e8:	9b04      	ldr	r3, [sp, #16]
 80067ea:	4699      	mov	r9, r3
 80067ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067ee:	1b1a      	subs	r2, r3, r4
 80067f0:	d004      	beq.n	80067fc <_dtoa_r+0x78c>
 80067f2:	4649      	mov	r1, r9
 80067f4:	4658      	mov	r0, fp
 80067f6:	f000 fcfd 	bl	80071f4 <__pow5mult>
 80067fa:	4681      	mov	r9, r0
 80067fc:	2101      	movs	r1, #1
 80067fe:	4658      	mov	r0, fp
 8006800:	f000 fc38 	bl	8007074 <__i2b>
 8006804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006806:	4604      	mov	r4, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 81cf 	beq.w	8006bac <_dtoa_r+0xb3c>
 800680e:	461a      	mov	r2, r3
 8006810:	4601      	mov	r1, r0
 8006812:	4658      	mov	r0, fp
 8006814:	f000 fcee 	bl	80071f4 <__pow5mult>
 8006818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800681a:	2b01      	cmp	r3, #1
 800681c:	4604      	mov	r4, r0
 800681e:	f300 8095 	bgt.w	800694c <_dtoa_r+0x8dc>
 8006822:	9b02      	ldr	r3, [sp, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	f040 8087 	bne.w	8006938 <_dtoa_r+0x8c8>
 800682a:	9b03      	ldr	r3, [sp, #12]
 800682c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006830:	2b00      	cmp	r3, #0
 8006832:	f040 8089 	bne.w	8006948 <_dtoa_r+0x8d8>
 8006836:	9b03      	ldr	r3, [sp, #12]
 8006838:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800683c:	0d1b      	lsrs	r3, r3, #20
 800683e:	051b      	lsls	r3, r3, #20
 8006840:	b12b      	cbz	r3, 800684e <_dtoa_r+0x7de>
 8006842:	9b08      	ldr	r3, [sp, #32]
 8006844:	3301      	adds	r3, #1
 8006846:	9308      	str	r3, [sp, #32]
 8006848:	f108 0801 	add.w	r8, r8, #1
 800684c:	2301      	movs	r3, #1
 800684e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 81b0 	beq.w	8006bb8 <_dtoa_r+0xb48>
 8006858:	6923      	ldr	r3, [r4, #16]
 800685a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800685e:	6918      	ldr	r0, [r3, #16]
 8006860:	f000 fbbc 	bl	8006fdc <__hi0bits>
 8006864:	f1c0 0020 	rsb	r0, r0, #32
 8006868:	9b08      	ldr	r3, [sp, #32]
 800686a:	4418      	add	r0, r3
 800686c:	f010 001f 	ands.w	r0, r0, #31
 8006870:	d077      	beq.n	8006962 <_dtoa_r+0x8f2>
 8006872:	f1c0 0320 	rsb	r3, r0, #32
 8006876:	2b04      	cmp	r3, #4
 8006878:	dd6b      	ble.n	8006952 <_dtoa_r+0x8e2>
 800687a:	9b08      	ldr	r3, [sp, #32]
 800687c:	f1c0 001c 	rsb	r0, r0, #28
 8006880:	4403      	add	r3, r0
 8006882:	4480      	add	r8, r0
 8006884:	4406      	add	r6, r0
 8006886:	9308      	str	r3, [sp, #32]
 8006888:	f1b8 0f00 	cmp.w	r8, #0
 800688c:	dd05      	ble.n	800689a <_dtoa_r+0x82a>
 800688e:	4649      	mov	r1, r9
 8006890:	4642      	mov	r2, r8
 8006892:	4658      	mov	r0, fp
 8006894:	f000 fd08 	bl	80072a8 <__lshift>
 8006898:	4681      	mov	r9, r0
 800689a:	9b08      	ldr	r3, [sp, #32]
 800689c:	2b00      	cmp	r3, #0
 800689e:	dd05      	ble.n	80068ac <_dtoa_r+0x83c>
 80068a0:	4621      	mov	r1, r4
 80068a2:	461a      	mov	r2, r3
 80068a4:	4658      	mov	r0, fp
 80068a6:	f000 fcff 	bl	80072a8 <__lshift>
 80068aa:	4604      	mov	r4, r0
 80068ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d059      	beq.n	8006966 <_dtoa_r+0x8f6>
 80068b2:	4621      	mov	r1, r4
 80068b4:	4648      	mov	r0, r9
 80068b6:	f000 fd63 	bl	8007380 <__mcmp>
 80068ba:	2800      	cmp	r0, #0
 80068bc:	da53      	bge.n	8006966 <_dtoa_r+0x8f6>
 80068be:	1e7b      	subs	r3, r7, #1
 80068c0:	9304      	str	r3, [sp, #16]
 80068c2:	4649      	mov	r1, r9
 80068c4:	2300      	movs	r3, #0
 80068c6:	220a      	movs	r2, #10
 80068c8:	4658      	mov	r0, fp
 80068ca:	f000 faf7 	bl	8006ebc <__multadd>
 80068ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068d0:	4681      	mov	r9, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 8172 	beq.w	8006bbc <_dtoa_r+0xb4c>
 80068d8:	2300      	movs	r3, #0
 80068da:	4629      	mov	r1, r5
 80068dc:	220a      	movs	r2, #10
 80068de:	4658      	mov	r0, fp
 80068e0:	f000 faec 	bl	8006ebc <__multadd>
 80068e4:	9b00      	ldr	r3, [sp, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	4605      	mov	r5, r0
 80068ea:	dc67      	bgt.n	80069bc <_dtoa_r+0x94c>
 80068ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	dc41      	bgt.n	8006976 <_dtoa_r+0x906>
 80068f2:	e063      	b.n	80069bc <_dtoa_r+0x94c>
 80068f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80068f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80068fa:	e746      	b.n	800678a <_dtoa_r+0x71a>
 80068fc:	9b07      	ldr	r3, [sp, #28]
 80068fe:	1e5c      	subs	r4, r3, #1
 8006900:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006902:	42a3      	cmp	r3, r4
 8006904:	bfbf      	itttt	lt
 8006906:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006908:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800690a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800690c:	1ae3      	sublt	r3, r4, r3
 800690e:	bfb4      	ite	lt
 8006910:	18d2      	addlt	r2, r2, r3
 8006912:	1b1c      	subge	r4, r3, r4
 8006914:	9b07      	ldr	r3, [sp, #28]
 8006916:	bfbc      	itt	lt
 8006918:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800691a:	2400      	movlt	r4, #0
 800691c:	2b00      	cmp	r3, #0
 800691e:	bfb5      	itete	lt
 8006920:	eba8 0603 	sublt.w	r6, r8, r3
 8006924:	9b07      	ldrge	r3, [sp, #28]
 8006926:	2300      	movlt	r3, #0
 8006928:	4646      	movge	r6, r8
 800692a:	e730      	b.n	800678e <_dtoa_r+0x71e>
 800692c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800692e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006930:	4646      	mov	r6, r8
 8006932:	e735      	b.n	80067a0 <_dtoa_r+0x730>
 8006934:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006936:	e75c      	b.n	80067f2 <_dtoa_r+0x782>
 8006938:	2300      	movs	r3, #0
 800693a:	e788      	b.n	800684e <_dtoa_r+0x7de>
 800693c:	3fe00000 	.word	0x3fe00000
 8006940:	40240000 	.word	0x40240000
 8006944:	40140000 	.word	0x40140000
 8006948:	9b02      	ldr	r3, [sp, #8]
 800694a:	e780      	b.n	800684e <_dtoa_r+0x7de>
 800694c:	2300      	movs	r3, #0
 800694e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006950:	e782      	b.n	8006858 <_dtoa_r+0x7e8>
 8006952:	d099      	beq.n	8006888 <_dtoa_r+0x818>
 8006954:	9a08      	ldr	r2, [sp, #32]
 8006956:	331c      	adds	r3, #28
 8006958:	441a      	add	r2, r3
 800695a:	4498      	add	r8, r3
 800695c:	441e      	add	r6, r3
 800695e:	9208      	str	r2, [sp, #32]
 8006960:	e792      	b.n	8006888 <_dtoa_r+0x818>
 8006962:	4603      	mov	r3, r0
 8006964:	e7f6      	b.n	8006954 <_dtoa_r+0x8e4>
 8006966:	9b07      	ldr	r3, [sp, #28]
 8006968:	9704      	str	r7, [sp, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	dc20      	bgt.n	80069b0 <_dtoa_r+0x940>
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006972:	2b02      	cmp	r3, #2
 8006974:	dd1e      	ble.n	80069b4 <_dtoa_r+0x944>
 8006976:	9b00      	ldr	r3, [sp, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	f47f aec0 	bne.w	80066fe <_dtoa_r+0x68e>
 800697e:	4621      	mov	r1, r4
 8006980:	2205      	movs	r2, #5
 8006982:	4658      	mov	r0, fp
 8006984:	f000 fa9a 	bl	8006ebc <__multadd>
 8006988:	4601      	mov	r1, r0
 800698a:	4604      	mov	r4, r0
 800698c:	4648      	mov	r0, r9
 800698e:	f000 fcf7 	bl	8007380 <__mcmp>
 8006992:	2800      	cmp	r0, #0
 8006994:	f77f aeb3 	ble.w	80066fe <_dtoa_r+0x68e>
 8006998:	4656      	mov	r6, sl
 800699a:	2331      	movs	r3, #49	@ 0x31
 800699c:	f806 3b01 	strb.w	r3, [r6], #1
 80069a0:	9b04      	ldr	r3, [sp, #16]
 80069a2:	3301      	adds	r3, #1
 80069a4:	9304      	str	r3, [sp, #16]
 80069a6:	e6ae      	b.n	8006706 <_dtoa_r+0x696>
 80069a8:	9c07      	ldr	r4, [sp, #28]
 80069aa:	9704      	str	r7, [sp, #16]
 80069ac:	4625      	mov	r5, r4
 80069ae:	e7f3      	b.n	8006998 <_dtoa_r+0x928>
 80069b0:	9b07      	ldr	r3, [sp, #28]
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 8104 	beq.w	8006bc4 <_dtoa_r+0xb54>
 80069bc:	2e00      	cmp	r6, #0
 80069be:	dd05      	ble.n	80069cc <_dtoa_r+0x95c>
 80069c0:	4629      	mov	r1, r5
 80069c2:	4632      	mov	r2, r6
 80069c4:	4658      	mov	r0, fp
 80069c6:	f000 fc6f 	bl	80072a8 <__lshift>
 80069ca:	4605      	mov	r5, r0
 80069cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d05a      	beq.n	8006a88 <_dtoa_r+0xa18>
 80069d2:	6869      	ldr	r1, [r5, #4]
 80069d4:	4658      	mov	r0, fp
 80069d6:	f000 fa0f 	bl	8006df8 <_Balloc>
 80069da:	4606      	mov	r6, r0
 80069dc:	b928      	cbnz	r0, 80069ea <_dtoa_r+0x97a>
 80069de:	4b84      	ldr	r3, [pc, #528]	@ (8006bf0 <_dtoa_r+0xb80>)
 80069e0:	4602      	mov	r2, r0
 80069e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80069e6:	f7ff bb5a 	b.w	800609e <_dtoa_r+0x2e>
 80069ea:	692a      	ldr	r2, [r5, #16]
 80069ec:	3202      	adds	r2, #2
 80069ee:	0092      	lsls	r2, r2, #2
 80069f0:	f105 010c 	add.w	r1, r5, #12
 80069f4:	300c      	adds	r0, #12
 80069f6:	f002 fcc7 	bl	8009388 <memcpy>
 80069fa:	2201      	movs	r2, #1
 80069fc:	4631      	mov	r1, r6
 80069fe:	4658      	mov	r0, fp
 8006a00:	f000 fc52 	bl	80072a8 <__lshift>
 8006a04:	f10a 0301 	add.w	r3, sl, #1
 8006a08:	9307      	str	r3, [sp, #28]
 8006a0a:	9b00      	ldr	r3, [sp, #0]
 8006a0c:	4453      	add	r3, sl
 8006a0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a10:	9b02      	ldr	r3, [sp, #8]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	462f      	mov	r7, r5
 8006a18:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a1a:	4605      	mov	r5, r0
 8006a1c:	9b07      	ldr	r3, [sp, #28]
 8006a1e:	4621      	mov	r1, r4
 8006a20:	3b01      	subs	r3, #1
 8006a22:	4648      	mov	r0, r9
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	f7ff fa99 	bl	8005f5c <quorem>
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	9002      	str	r0, [sp, #8]
 8006a2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006a32:	4648      	mov	r0, r9
 8006a34:	f000 fca4 	bl	8007380 <__mcmp>
 8006a38:	462a      	mov	r2, r5
 8006a3a:	9008      	str	r0, [sp, #32]
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	4658      	mov	r0, fp
 8006a40:	f000 fcba 	bl	80073b8 <__mdiff>
 8006a44:	68c2      	ldr	r2, [r0, #12]
 8006a46:	4606      	mov	r6, r0
 8006a48:	bb02      	cbnz	r2, 8006a8c <_dtoa_r+0xa1c>
 8006a4a:	4601      	mov	r1, r0
 8006a4c:	4648      	mov	r0, r9
 8006a4e:	f000 fc97 	bl	8007380 <__mcmp>
 8006a52:	4602      	mov	r2, r0
 8006a54:	4631      	mov	r1, r6
 8006a56:	4658      	mov	r0, fp
 8006a58:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a5a:	f000 fa0d 	bl	8006e78 <_Bfree>
 8006a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a62:	9e07      	ldr	r6, [sp, #28]
 8006a64:	ea43 0102 	orr.w	r1, r3, r2
 8006a68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a6a:	4319      	orrs	r1, r3
 8006a6c:	d110      	bne.n	8006a90 <_dtoa_r+0xa20>
 8006a6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a72:	d029      	beq.n	8006ac8 <_dtoa_r+0xa58>
 8006a74:	9b08      	ldr	r3, [sp, #32]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	dd02      	ble.n	8006a80 <_dtoa_r+0xa10>
 8006a7a:	9b02      	ldr	r3, [sp, #8]
 8006a7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006a80:	9b00      	ldr	r3, [sp, #0]
 8006a82:	f883 8000 	strb.w	r8, [r3]
 8006a86:	e63f      	b.n	8006708 <_dtoa_r+0x698>
 8006a88:	4628      	mov	r0, r5
 8006a8a:	e7bb      	b.n	8006a04 <_dtoa_r+0x994>
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	e7e1      	b.n	8006a54 <_dtoa_r+0x9e4>
 8006a90:	9b08      	ldr	r3, [sp, #32]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	db04      	blt.n	8006aa0 <_dtoa_r+0xa30>
 8006a96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a9c:	430b      	orrs	r3, r1
 8006a9e:	d120      	bne.n	8006ae2 <_dtoa_r+0xa72>
 8006aa0:	2a00      	cmp	r2, #0
 8006aa2:	dded      	ble.n	8006a80 <_dtoa_r+0xa10>
 8006aa4:	4649      	mov	r1, r9
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	4658      	mov	r0, fp
 8006aaa:	f000 fbfd 	bl	80072a8 <__lshift>
 8006aae:	4621      	mov	r1, r4
 8006ab0:	4681      	mov	r9, r0
 8006ab2:	f000 fc65 	bl	8007380 <__mcmp>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	dc03      	bgt.n	8006ac2 <_dtoa_r+0xa52>
 8006aba:	d1e1      	bne.n	8006a80 <_dtoa_r+0xa10>
 8006abc:	f018 0f01 	tst.w	r8, #1
 8006ac0:	d0de      	beq.n	8006a80 <_dtoa_r+0xa10>
 8006ac2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ac6:	d1d8      	bne.n	8006a7a <_dtoa_r+0xa0a>
 8006ac8:	9a00      	ldr	r2, [sp, #0]
 8006aca:	2339      	movs	r3, #57	@ 0x39
 8006acc:	7013      	strb	r3, [r2, #0]
 8006ace:	4633      	mov	r3, r6
 8006ad0:	461e      	mov	r6, r3
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006ad8:	2a39      	cmp	r2, #57	@ 0x39
 8006ada:	d052      	beq.n	8006b82 <_dtoa_r+0xb12>
 8006adc:	3201      	adds	r2, #1
 8006ade:	701a      	strb	r2, [r3, #0]
 8006ae0:	e612      	b.n	8006708 <_dtoa_r+0x698>
 8006ae2:	2a00      	cmp	r2, #0
 8006ae4:	dd07      	ble.n	8006af6 <_dtoa_r+0xa86>
 8006ae6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006aea:	d0ed      	beq.n	8006ac8 <_dtoa_r+0xa58>
 8006aec:	9a00      	ldr	r2, [sp, #0]
 8006aee:	f108 0301 	add.w	r3, r8, #1
 8006af2:	7013      	strb	r3, [r2, #0]
 8006af4:	e608      	b.n	8006708 <_dtoa_r+0x698>
 8006af6:	9b07      	ldr	r3, [sp, #28]
 8006af8:	9a07      	ldr	r2, [sp, #28]
 8006afa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006afe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d028      	beq.n	8006b56 <_dtoa_r+0xae6>
 8006b04:	4649      	mov	r1, r9
 8006b06:	2300      	movs	r3, #0
 8006b08:	220a      	movs	r2, #10
 8006b0a:	4658      	mov	r0, fp
 8006b0c:	f000 f9d6 	bl	8006ebc <__multadd>
 8006b10:	42af      	cmp	r7, r5
 8006b12:	4681      	mov	r9, r0
 8006b14:	f04f 0300 	mov.w	r3, #0
 8006b18:	f04f 020a 	mov.w	r2, #10
 8006b1c:	4639      	mov	r1, r7
 8006b1e:	4658      	mov	r0, fp
 8006b20:	d107      	bne.n	8006b32 <_dtoa_r+0xac2>
 8006b22:	f000 f9cb 	bl	8006ebc <__multadd>
 8006b26:	4607      	mov	r7, r0
 8006b28:	4605      	mov	r5, r0
 8006b2a:	9b07      	ldr	r3, [sp, #28]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	9307      	str	r3, [sp, #28]
 8006b30:	e774      	b.n	8006a1c <_dtoa_r+0x9ac>
 8006b32:	f000 f9c3 	bl	8006ebc <__multadd>
 8006b36:	4629      	mov	r1, r5
 8006b38:	4607      	mov	r7, r0
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	220a      	movs	r2, #10
 8006b3e:	4658      	mov	r0, fp
 8006b40:	f000 f9bc 	bl	8006ebc <__multadd>
 8006b44:	4605      	mov	r5, r0
 8006b46:	e7f0      	b.n	8006b2a <_dtoa_r+0xaba>
 8006b48:	9b00      	ldr	r3, [sp, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	bfcc      	ite	gt
 8006b4e:	461e      	movgt	r6, r3
 8006b50:	2601      	movle	r6, #1
 8006b52:	4456      	add	r6, sl
 8006b54:	2700      	movs	r7, #0
 8006b56:	4649      	mov	r1, r9
 8006b58:	2201      	movs	r2, #1
 8006b5a:	4658      	mov	r0, fp
 8006b5c:	f000 fba4 	bl	80072a8 <__lshift>
 8006b60:	4621      	mov	r1, r4
 8006b62:	4681      	mov	r9, r0
 8006b64:	f000 fc0c 	bl	8007380 <__mcmp>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	dcb0      	bgt.n	8006ace <_dtoa_r+0xa5e>
 8006b6c:	d102      	bne.n	8006b74 <_dtoa_r+0xb04>
 8006b6e:	f018 0f01 	tst.w	r8, #1
 8006b72:	d1ac      	bne.n	8006ace <_dtoa_r+0xa5e>
 8006b74:	4633      	mov	r3, r6
 8006b76:	461e      	mov	r6, r3
 8006b78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b7c:	2a30      	cmp	r2, #48	@ 0x30
 8006b7e:	d0fa      	beq.n	8006b76 <_dtoa_r+0xb06>
 8006b80:	e5c2      	b.n	8006708 <_dtoa_r+0x698>
 8006b82:	459a      	cmp	sl, r3
 8006b84:	d1a4      	bne.n	8006ad0 <_dtoa_r+0xa60>
 8006b86:	9b04      	ldr	r3, [sp, #16]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	9304      	str	r3, [sp, #16]
 8006b8c:	2331      	movs	r3, #49	@ 0x31
 8006b8e:	f88a 3000 	strb.w	r3, [sl]
 8006b92:	e5b9      	b.n	8006708 <_dtoa_r+0x698>
 8006b94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006bf4 <_dtoa_r+0xb84>
 8006b9a:	b11b      	cbz	r3, 8006ba4 <_dtoa_r+0xb34>
 8006b9c:	f10a 0308 	add.w	r3, sl, #8
 8006ba0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ba2:	6013      	str	r3, [r2, #0]
 8006ba4:	4650      	mov	r0, sl
 8006ba6:	b019      	add	sp, #100	@ 0x64
 8006ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	f77f ae37 	ble.w	8006822 <_dtoa_r+0x7b2>
 8006bb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bb8:	2001      	movs	r0, #1
 8006bba:	e655      	b.n	8006868 <_dtoa_r+0x7f8>
 8006bbc:	9b00      	ldr	r3, [sp, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f77f aed6 	ble.w	8006970 <_dtoa_r+0x900>
 8006bc4:	4656      	mov	r6, sl
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	4648      	mov	r0, r9
 8006bca:	f7ff f9c7 	bl	8005f5c <quorem>
 8006bce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006bd2:	f806 8b01 	strb.w	r8, [r6], #1
 8006bd6:	9b00      	ldr	r3, [sp, #0]
 8006bd8:	eba6 020a 	sub.w	r2, r6, sl
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	ddb3      	ble.n	8006b48 <_dtoa_r+0xad8>
 8006be0:	4649      	mov	r1, r9
 8006be2:	2300      	movs	r3, #0
 8006be4:	220a      	movs	r2, #10
 8006be6:	4658      	mov	r0, fp
 8006be8:	f000 f968 	bl	8006ebc <__multadd>
 8006bec:	4681      	mov	r9, r0
 8006bee:	e7ea      	b.n	8006bc6 <_dtoa_r+0xb56>
 8006bf0:	08009f9b 	.word	0x08009f9b
 8006bf4:	08009f1f 	.word	0x08009f1f

08006bf8 <_free_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	4605      	mov	r5, r0
 8006bfc:	2900      	cmp	r1, #0
 8006bfe:	d041      	beq.n	8006c84 <_free_r+0x8c>
 8006c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c04:	1f0c      	subs	r4, r1, #4
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	bfb8      	it	lt
 8006c0a:	18e4      	addlt	r4, r4, r3
 8006c0c:	f000 f8e8 	bl	8006de0 <__malloc_lock>
 8006c10:	4a1d      	ldr	r2, [pc, #116]	@ (8006c88 <_free_r+0x90>)
 8006c12:	6813      	ldr	r3, [r2, #0]
 8006c14:	b933      	cbnz	r3, 8006c24 <_free_r+0x2c>
 8006c16:	6063      	str	r3, [r4, #4]
 8006c18:	6014      	str	r4, [r2, #0]
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c20:	f000 b8e4 	b.w	8006dec <__malloc_unlock>
 8006c24:	42a3      	cmp	r3, r4
 8006c26:	d908      	bls.n	8006c3a <_free_r+0x42>
 8006c28:	6820      	ldr	r0, [r4, #0]
 8006c2a:	1821      	adds	r1, r4, r0
 8006c2c:	428b      	cmp	r3, r1
 8006c2e:	bf01      	itttt	eq
 8006c30:	6819      	ldreq	r1, [r3, #0]
 8006c32:	685b      	ldreq	r3, [r3, #4]
 8006c34:	1809      	addeq	r1, r1, r0
 8006c36:	6021      	streq	r1, [r4, #0]
 8006c38:	e7ed      	b.n	8006c16 <_free_r+0x1e>
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	b10b      	cbz	r3, 8006c44 <_free_r+0x4c>
 8006c40:	42a3      	cmp	r3, r4
 8006c42:	d9fa      	bls.n	8006c3a <_free_r+0x42>
 8006c44:	6811      	ldr	r1, [r2, #0]
 8006c46:	1850      	adds	r0, r2, r1
 8006c48:	42a0      	cmp	r0, r4
 8006c4a:	d10b      	bne.n	8006c64 <_free_r+0x6c>
 8006c4c:	6820      	ldr	r0, [r4, #0]
 8006c4e:	4401      	add	r1, r0
 8006c50:	1850      	adds	r0, r2, r1
 8006c52:	4283      	cmp	r3, r0
 8006c54:	6011      	str	r1, [r2, #0]
 8006c56:	d1e0      	bne.n	8006c1a <_free_r+0x22>
 8006c58:	6818      	ldr	r0, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	6053      	str	r3, [r2, #4]
 8006c5e:	4408      	add	r0, r1
 8006c60:	6010      	str	r0, [r2, #0]
 8006c62:	e7da      	b.n	8006c1a <_free_r+0x22>
 8006c64:	d902      	bls.n	8006c6c <_free_r+0x74>
 8006c66:	230c      	movs	r3, #12
 8006c68:	602b      	str	r3, [r5, #0]
 8006c6a:	e7d6      	b.n	8006c1a <_free_r+0x22>
 8006c6c:	6820      	ldr	r0, [r4, #0]
 8006c6e:	1821      	adds	r1, r4, r0
 8006c70:	428b      	cmp	r3, r1
 8006c72:	bf04      	itt	eq
 8006c74:	6819      	ldreq	r1, [r3, #0]
 8006c76:	685b      	ldreq	r3, [r3, #4]
 8006c78:	6063      	str	r3, [r4, #4]
 8006c7a:	bf04      	itt	eq
 8006c7c:	1809      	addeq	r1, r1, r0
 8006c7e:	6021      	streq	r1, [r4, #0]
 8006c80:	6054      	str	r4, [r2, #4]
 8006c82:	e7ca      	b.n	8006c1a <_free_r+0x22>
 8006c84:	bd38      	pop	{r3, r4, r5, pc}
 8006c86:	bf00      	nop
 8006c88:	20000524 	.word	0x20000524

08006c8c <malloc>:
 8006c8c:	4b02      	ldr	r3, [pc, #8]	@ (8006c98 <malloc+0xc>)
 8006c8e:	4601      	mov	r1, r0
 8006c90:	6818      	ldr	r0, [r3, #0]
 8006c92:	f000 b825 	b.w	8006ce0 <_malloc_r>
 8006c96:	bf00      	nop
 8006c98:	2000002c 	.word	0x2000002c

08006c9c <sbrk_aligned>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	4e0f      	ldr	r6, [pc, #60]	@ (8006cdc <sbrk_aligned+0x40>)
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	6831      	ldr	r1, [r6, #0]
 8006ca4:	4605      	mov	r5, r0
 8006ca6:	b911      	cbnz	r1, 8006cae <sbrk_aligned+0x12>
 8006ca8:	f002 fb5e 	bl	8009368 <_sbrk_r>
 8006cac:	6030      	str	r0, [r6, #0]
 8006cae:	4621      	mov	r1, r4
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	f002 fb59 	bl	8009368 <_sbrk_r>
 8006cb6:	1c43      	adds	r3, r0, #1
 8006cb8:	d103      	bne.n	8006cc2 <sbrk_aligned+0x26>
 8006cba:	f04f 34ff 	mov.w	r4, #4294967295
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	bd70      	pop	{r4, r5, r6, pc}
 8006cc2:	1cc4      	adds	r4, r0, #3
 8006cc4:	f024 0403 	bic.w	r4, r4, #3
 8006cc8:	42a0      	cmp	r0, r4
 8006cca:	d0f8      	beq.n	8006cbe <sbrk_aligned+0x22>
 8006ccc:	1a21      	subs	r1, r4, r0
 8006cce:	4628      	mov	r0, r5
 8006cd0:	f002 fb4a 	bl	8009368 <_sbrk_r>
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d1f2      	bne.n	8006cbe <sbrk_aligned+0x22>
 8006cd8:	e7ef      	b.n	8006cba <sbrk_aligned+0x1e>
 8006cda:	bf00      	nop
 8006cdc:	20000520 	.word	0x20000520

08006ce0 <_malloc_r>:
 8006ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce4:	1ccd      	adds	r5, r1, #3
 8006ce6:	f025 0503 	bic.w	r5, r5, #3
 8006cea:	3508      	adds	r5, #8
 8006cec:	2d0c      	cmp	r5, #12
 8006cee:	bf38      	it	cc
 8006cf0:	250c      	movcc	r5, #12
 8006cf2:	2d00      	cmp	r5, #0
 8006cf4:	4606      	mov	r6, r0
 8006cf6:	db01      	blt.n	8006cfc <_malloc_r+0x1c>
 8006cf8:	42a9      	cmp	r1, r5
 8006cfa:	d904      	bls.n	8006d06 <_malloc_r+0x26>
 8006cfc:	230c      	movs	r3, #12
 8006cfe:	6033      	str	r3, [r6, #0]
 8006d00:	2000      	movs	r0, #0
 8006d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ddc <_malloc_r+0xfc>
 8006d0a:	f000 f869 	bl	8006de0 <__malloc_lock>
 8006d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8006d12:	461c      	mov	r4, r3
 8006d14:	bb44      	cbnz	r4, 8006d68 <_malloc_r+0x88>
 8006d16:	4629      	mov	r1, r5
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f7ff ffbf 	bl	8006c9c <sbrk_aligned>
 8006d1e:	1c43      	adds	r3, r0, #1
 8006d20:	4604      	mov	r4, r0
 8006d22:	d158      	bne.n	8006dd6 <_malloc_r+0xf6>
 8006d24:	f8d8 4000 	ldr.w	r4, [r8]
 8006d28:	4627      	mov	r7, r4
 8006d2a:	2f00      	cmp	r7, #0
 8006d2c:	d143      	bne.n	8006db6 <_malloc_r+0xd6>
 8006d2e:	2c00      	cmp	r4, #0
 8006d30:	d04b      	beq.n	8006dca <_malloc_r+0xea>
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	4639      	mov	r1, r7
 8006d36:	4630      	mov	r0, r6
 8006d38:	eb04 0903 	add.w	r9, r4, r3
 8006d3c:	f002 fb14 	bl	8009368 <_sbrk_r>
 8006d40:	4581      	cmp	r9, r0
 8006d42:	d142      	bne.n	8006dca <_malloc_r+0xea>
 8006d44:	6821      	ldr	r1, [r4, #0]
 8006d46:	1a6d      	subs	r5, r5, r1
 8006d48:	4629      	mov	r1, r5
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	f7ff ffa6 	bl	8006c9c <sbrk_aligned>
 8006d50:	3001      	adds	r0, #1
 8006d52:	d03a      	beq.n	8006dca <_malloc_r+0xea>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	442b      	add	r3, r5
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	bb62      	cbnz	r2, 8006dbc <_malloc_r+0xdc>
 8006d62:	f8c8 7000 	str.w	r7, [r8]
 8006d66:	e00f      	b.n	8006d88 <_malloc_r+0xa8>
 8006d68:	6822      	ldr	r2, [r4, #0]
 8006d6a:	1b52      	subs	r2, r2, r5
 8006d6c:	d420      	bmi.n	8006db0 <_malloc_r+0xd0>
 8006d6e:	2a0b      	cmp	r2, #11
 8006d70:	d917      	bls.n	8006da2 <_malloc_r+0xc2>
 8006d72:	1961      	adds	r1, r4, r5
 8006d74:	42a3      	cmp	r3, r4
 8006d76:	6025      	str	r5, [r4, #0]
 8006d78:	bf18      	it	ne
 8006d7a:	6059      	strne	r1, [r3, #4]
 8006d7c:	6863      	ldr	r3, [r4, #4]
 8006d7e:	bf08      	it	eq
 8006d80:	f8c8 1000 	streq.w	r1, [r8]
 8006d84:	5162      	str	r2, [r4, r5]
 8006d86:	604b      	str	r3, [r1, #4]
 8006d88:	4630      	mov	r0, r6
 8006d8a:	f000 f82f 	bl	8006dec <__malloc_unlock>
 8006d8e:	f104 000b 	add.w	r0, r4, #11
 8006d92:	1d23      	adds	r3, r4, #4
 8006d94:	f020 0007 	bic.w	r0, r0, #7
 8006d98:	1ac2      	subs	r2, r0, r3
 8006d9a:	bf1c      	itt	ne
 8006d9c:	1a1b      	subne	r3, r3, r0
 8006d9e:	50a3      	strne	r3, [r4, r2]
 8006da0:	e7af      	b.n	8006d02 <_malloc_r+0x22>
 8006da2:	6862      	ldr	r2, [r4, #4]
 8006da4:	42a3      	cmp	r3, r4
 8006da6:	bf0c      	ite	eq
 8006da8:	f8c8 2000 	streq.w	r2, [r8]
 8006dac:	605a      	strne	r2, [r3, #4]
 8006dae:	e7eb      	b.n	8006d88 <_malloc_r+0xa8>
 8006db0:	4623      	mov	r3, r4
 8006db2:	6864      	ldr	r4, [r4, #4]
 8006db4:	e7ae      	b.n	8006d14 <_malloc_r+0x34>
 8006db6:	463c      	mov	r4, r7
 8006db8:	687f      	ldr	r7, [r7, #4]
 8006dba:	e7b6      	b.n	8006d2a <_malloc_r+0x4a>
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	42a3      	cmp	r3, r4
 8006dc2:	d1fb      	bne.n	8006dbc <_malloc_r+0xdc>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	6053      	str	r3, [r2, #4]
 8006dc8:	e7de      	b.n	8006d88 <_malloc_r+0xa8>
 8006dca:	230c      	movs	r3, #12
 8006dcc:	6033      	str	r3, [r6, #0]
 8006dce:	4630      	mov	r0, r6
 8006dd0:	f000 f80c 	bl	8006dec <__malloc_unlock>
 8006dd4:	e794      	b.n	8006d00 <_malloc_r+0x20>
 8006dd6:	6005      	str	r5, [r0, #0]
 8006dd8:	e7d6      	b.n	8006d88 <_malloc_r+0xa8>
 8006dda:	bf00      	nop
 8006ddc:	20000524 	.word	0x20000524

08006de0 <__malloc_lock>:
 8006de0:	4801      	ldr	r0, [pc, #4]	@ (8006de8 <__malloc_lock+0x8>)
 8006de2:	f7ff b8b2 	b.w	8005f4a <__retarget_lock_acquire_recursive>
 8006de6:	bf00      	nop
 8006de8:	2000051c 	.word	0x2000051c

08006dec <__malloc_unlock>:
 8006dec:	4801      	ldr	r0, [pc, #4]	@ (8006df4 <__malloc_unlock+0x8>)
 8006dee:	f7ff b8ad 	b.w	8005f4c <__retarget_lock_release_recursive>
 8006df2:	bf00      	nop
 8006df4:	2000051c 	.word	0x2000051c

08006df8 <_Balloc>:
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	69c6      	ldr	r6, [r0, #28]
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	460d      	mov	r5, r1
 8006e00:	b976      	cbnz	r6, 8006e20 <_Balloc+0x28>
 8006e02:	2010      	movs	r0, #16
 8006e04:	f7ff ff42 	bl	8006c8c <malloc>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	61e0      	str	r0, [r4, #28]
 8006e0c:	b920      	cbnz	r0, 8006e18 <_Balloc+0x20>
 8006e0e:	4b18      	ldr	r3, [pc, #96]	@ (8006e70 <_Balloc+0x78>)
 8006e10:	4818      	ldr	r0, [pc, #96]	@ (8006e74 <_Balloc+0x7c>)
 8006e12:	216b      	movs	r1, #107	@ 0x6b
 8006e14:	f002 fad0 	bl	80093b8 <__assert_func>
 8006e18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e1c:	6006      	str	r6, [r0, #0]
 8006e1e:	60c6      	str	r6, [r0, #12]
 8006e20:	69e6      	ldr	r6, [r4, #28]
 8006e22:	68f3      	ldr	r3, [r6, #12]
 8006e24:	b183      	cbz	r3, 8006e48 <_Balloc+0x50>
 8006e26:	69e3      	ldr	r3, [r4, #28]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e2e:	b9b8      	cbnz	r0, 8006e60 <_Balloc+0x68>
 8006e30:	2101      	movs	r1, #1
 8006e32:	fa01 f605 	lsl.w	r6, r1, r5
 8006e36:	1d72      	adds	r2, r6, #5
 8006e38:	0092      	lsls	r2, r2, #2
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f002 fada 	bl	80093f4 <_calloc_r>
 8006e40:	b160      	cbz	r0, 8006e5c <_Balloc+0x64>
 8006e42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e46:	e00e      	b.n	8006e66 <_Balloc+0x6e>
 8006e48:	2221      	movs	r2, #33	@ 0x21
 8006e4a:	2104      	movs	r1, #4
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f002 fad1 	bl	80093f4 <_calloc_r>
 8006e52:	69e3      	ldr	r3, [r4, #28]
 8006e54:	60f0      	str	r0, [r6, #12]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e4      	bne.n	8006e26 <_Balloc+0x2e>
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}
 8006e60:	6802      	ldr	r2, [r0, #0]
 8006e62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e66:	2300      	movs	r3, #0
 8006e68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e6c:	e7f7      	b.n	8006e5e <_Balloc+0x66>
 8006e6e:	bf00      	nop
 8006e70:	08009f2c 	.word	0x08009f2c
 8006e74:	08009fac 	.word	0x08009fac

08006e78 <_Bfree>:
 8006e78:	b570      	push	{r4, r5, r6, lr}
 8006e7a:	69c6      	ldr	r6, [r0, #28]
 8006e7c:	4605      	mov	r5, r0
 8006e7e:	460c      	mov	r4, r1
 8006e80:	b976      	cbnz	r6, 8006ea0 <_Bfree+0x28>
 8006e82:	2010      	movs	r0, #16
 8006e84:	f7ff ff02 	bl	8006c8c <malloc>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	61e8      	str	r0, [r5, #28]
 8006e8c:	b920      	cbnz	r0, 8006e98 <_Bfree+0x20>
 8006e8e:	4b09      	ldr	r3, [pc, #36]	@ (8006eb4 <_Bfree+0x3c>)
 8006e90:	4809      	ldr	r0, [pc, #36]	@ (8006eb8 <_Bfree+0x40>)
 8006e92:	218f      	movs	r1, #143	@ 0x8f
 8006e94:	f002 fa90 	bl	80093b8 <__assert_func>
 8006e98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e9c:	6006      	str	r6, [r0, #0]
 8006e9e:	60c6      	str	r6, [r0, #12]
 8006ea0:	b13c      	cbz	r4, 8006eb2 <_Bfree+0x3a>
 8006ea2:	69eb      	ldr	r3, [r5, #28]
 8006ea4:	6862      	ldr	r2, [r4, #4]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006eac:	6021      	str	r1, [r4, #0]
 8006eae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}
 8006eb4:	08009f2c 	.word	0x08009f2c
 8006eb8:	08009fac 	.word	0x08009fac

08006ebc <__multadd>:
 8006ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec0:	690d      	ldr	r5, [r1, #16]
 8006ec2:	4607      	mov	r7, r0
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	461e      	mov	r6, r3
 8006ec8:	f101 0c14 	add.w	ip, r1, #20
 8006ecc:	2000      	movs	r0, #0
 8006ece:	f8dc 3000 	ldr.w	r3, [ip]
 8006ed2:	b299      	uxth	r1, r3
 8006ed4:	fb02 6101 	mla	r1, r2, r1, r6
 8006ed8:	0c1e      	lsrs	r6, r3, #16
 8006eda:	0c0b      	lsrs	r3, r1, #16
 8006edc:	fb02 3306 	mla	r3, r2, r6, r3
 8006ee0:	b289      	uxth	r1, r1
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ee8:	4285      	cmp	r5, r0
 8006eea:	f84c 1b04 	str.w	r1, [ip], #4
 8006eee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ef2:	dcec      	bgt.n	8006ece <__multadd+0x12>
 8006ef4:	b30e      	cbz	r6, 8006f3a <__multadd+0x7e>
 8006ef6:	68a3      	ldr	r3, [r4, #8]
 8006ef8:	42ab      	cmp	r3, r5
 8006efa:	dc19      	bgt.n	8006f30 <__multadd+0x74>
 8006efc:	6861      	ldr	r1, [r4, #4]
 8006efe:	4638      	mov	r0, r7
 8006f00:	3101      	adds	r1, #1
 8006f02:	f7ff ff79 	bl	8006df8 <_Balloc>
 8006f06:	4680      	mov	r8, r0
 8006f08:	b928      	cbnz	r0, 8006f16 <__multadd+0x5a>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f40 <__multadd+0x84>)
 8006f0e:	480d      	ldr	r0, [pc, #52]	@ (8006f44 <__multadd+0x88>)
 8006f10:	21ba      	movs	r1, #186	@ 0xba
 8006f12:	f002 fa51 	bl	80093b8 <__assert_func>
 8006f16:	6922      	ldr	r2, [r4, #16]
 8006f18:	3202      	adds	r2, #2
 8006f1a:	f104 010c 	add.w	r1, r4, #12
 8006f1e:	0092      	lsls	r2, r2, #2
 8006f20:	300c      	adds	r0, #12
 8006f22:	f002 fa31 	bl	8009388 <memcpy>
 8006f26:	4621      	mov	r1, r4
 8006f28:	4638      	mov	r0, r7
 8006f2a:	f7ff ffa5 	bl	8006e78 <_Bfree>
 8006f2e:	4644      	mov	r4, r8
 8006f30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f34:	3501      	adds	r5, #1
 8006f36:	615e      	str	r6, [r3, #20]
 8006f38:	6125      	str	r5, [r4, #16]
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f40:	08009f9b 	.word	0x08009f9b
 8006f44:	08009fac 	.word	0x08009fac

08006f48 <__s2b>:
 8006f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	4615      	mov	r5, r2
 8006f50:	461f      	mov	r7, r3
 8006f52:	2209      	movs	r2, #9
 8006f54:	3308      	adds	r3, #8
 8006f56:	4606      	mov	r6, r0
 8006f58:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	2201      	movs	r2, #1
 8006f60:	429a      	cmp	r2, r3
 8006f62:	db09      	blt.n	8006f78 <__s2b+0x30>
 8006f64:	4630      	mov	r0, r6
 8006f66:	f7ff ff47 	bl	8006df8 <_Balloc>
 8006f6a:	b940      	cbnz	r0, 8006f7e <__s2b+0x36>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	4b19      	ldr	r3, [pc, #100]	@ (8006fd4 <__s2b+0x8c>)
 8006f70:	4819      	ldr	r0, [pc, #100]	@ (8006fd8 <__s2b+0x90>)
 8006f72:	21d3      	movs	r1, #211	@ 0xd3
 8006f74:	f002 fa20 	bl	80093b8 <__assert_func>
 8006f78:	0052      	lsls	r2, r2, #1
 8006f7a:	3101      	adds	r1, #1
 8006f7c:	e7f0      	b.n	8006f60 <__s2b+0x18>
 8006f7e:	9b08      	ldr	r3, [sp, #32]
 8006f80:	6143      	str	r3, [r0, #20]
 8006f82:	2d09      	cmp	r5, #9
 8006f84:	f04f 0301 	mov.w	r3, #1
 8006f88:	6103      	str	r3, [r0, #16]
 8006f8a:	dd16      	ble.n	8006fba <__s2b+0x72>
 8006f8c:	f104 0909 	add.w	r9, r4, #9
 8006f90:	46c8      	mov	r8, r9
 8006f92:	442c      	add	r4, r5
 8006f94:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006f98:	4601      	mov	r1, r0
 8006f9a:	3b30      	subs	r3, #48	@ 0x30
 8006f9c:	220a      	movs	r2, #10
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	f7ff ff8c 	bl	8006ebc <__multadd>
 8006fa4:	45a0      	cmp	r8, r4
 8006fa6:	d1f5      	bne.n	8006f94 <__s2b+0x4c>
 8006fa8:	f1a5 0408 	sub.w	r4, r5, #8
 8006fac:	444c      	add	r4, r9
 8006fae:	1b2d      	subs	r5, r5, r4
 8006fb0:	1963      	adds	r3, r4, r5
 8006fb2:	42bb      	cmp	r3, r7
 8006fb4:	db04      	blt.n	8006fc0 <__s2b+0x78>
 8006fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fba:	340a      	adds	r4, #10
 8006fbc:	2509      	movs	r5, #9
 8006fbe:	e7f6      	b.n	8006fae <__s2b+0x66>
 8006fc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006fc4:	4601      	mov	r1, r0
 8006fc6:	3b30      	subs	r3, #48	@ 0x30
 8006fc8:	220a      	movs	r2, #10
 8006fca:	4630      	mov	r0, r6
 8006fcc:	f7ff ff76 	bl	8006ebc <__multadd>
 8006fd0:	e7ee      	b.n	8006fb0 <__s2b+0x68>
 8006fd2:	bf00      	nop
 8006fd4:	08009f9b 	.word	0x08009f9b
 8006fd8:	08009fac 	.word	0x08009fac

08006fdc <__hi0bits>:
 8006fdc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	bf36      	itet	cc
 8006fe4:	0403      	lslcc	r3, r0, #16
 8006fe6:	2000      	movcs	r0, #0
 8006fe8:	2010      	movcc	r0, #16
 8006fea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fee:	bf3c      	itt	cc
 8006ff0:	021b      	lslcc	r3, r3, #8
 8006ff2:	3008      	addcc	r0, #8
 8006ff4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ff8:	bf3c      	itt	cc
 8006ffa:	011b      	lslcc	r3, r3, #4
 8006ffc:	3004      	addcc	r0, #4
 8006ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007002:	bf3c      	itt	cc
 8007004:	009b      	lslcc	r3, r3, #2
 8007006:	3002      	addcc	r0, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	db05      	blt.n	8007018 <__hi0bits+0x3c>
 800700c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007010:	f100 0001 	add.w	r0, r0, #1
 8007014:	bf08      	it	eq
 8007016:	2020      	moveq	r0, #32
 8007018:	4770      	bx	lr

0800701a <__lo0bits>:
 800701a:	6803      	ldr	r3, [r0, #0]
 800701c:	4602      	mov	r2, r0
 800701e:	f013 0007 	ands.w	r0, r3, #7
 8007022:	d00b      	beq.n	800703c <__lo0bits+0x22>
 8007024:	07d9      	lsls	r1, r3, #31
 8007026:	d421      	bmi.n	800706c <__lo0bits+0x52>
 8007028:	0798      	lsls	r0, r3, #30
 800702a:	bf49      	itett	mi
 800702c:	085b      	lsrmi	r3, r3, #1
 800702e:	089b      	lsrpl	r3, r3, #2
 8007030:	2001      	movmi	r0, #1
 8007032:	6013      	strmi	r3, [r2, #0]
 8007034:	bf5c      	itt	pl
 8007036:	6013      	strpl	r3, [r2, #0]
 8007038:	2002      	movpl	r0, #2
 800703a:	4770      	bx	lr
 800703c:	b299      	uxth	r1, r3
 800703e:	b909      	cbnz	r1, 8007044 <__lo0bits+0x2a>
 8007040:	0c1b      	lsrs	r3, r3, #16
 8007042:	2010      	movs	r0, #16
 8007044:	b2d9      	uxtb	r1, r3
 8007046:	b909      	cbnz	r1, 800704c <__lo0bits+0x32>
 8007048:	3008      	adds	r0, #8
 800704a:	0a1b      	lsrs	r3, r3, #8
 800704c:	0719      	lsls	r1, r3, #28
 800704e:	bf04      	itt	eq
 8007050:	091b      	lsreq	r3, r3, #4
 8007052:	3004      	addeq	r0, #4
 8007054:	0799      	lsls	r1, r3, #30
 8007056:	bf04      	itt	eq
 8007058:	089b      	lsreq	r3, r3, #2
 800705a:	3002      	addeq	r0, #2
 800705c:	07d9      	lsls	r1, r3, #31
 800705e:	d403      	bmi.n	8007068 <__lo0bits+0x4e>
 8007060:	085b      	lsrs	r3, r3, #1
 8007062:	f100 0001 	add.w	r0, r0, #1
 8007066:	d003      	beq.n	8007070 <__lo0bits+0x56>
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	4770      	bx	lr
 800706c:	2000      	movs	r0, #0
 800706e:	4770      	bx	lr
 8007070:	2020      	movs	r0, #32
 8007072:	4770      	bx	lr

08007074 <__i2b>:
 8007074:	b510      	push	{r4, lr}
 8007076:	460c      	mov	r4, r1
 8007078:	2101      	movs	r1, #1
 800707a:	f7ff febd 	bl	8006df8 <_Balloc>
 800707e:	4602      	mov	r2, r0
 8007080:	b928      	cbnz	r0, 800708e <__i2b+0x1a>
 8007082:	4b05      	ldr	r3, [pc, #20]	@ (8007098 <__i2b+0x24>)
 8007084:	4805      	ldr	r0, [pc, #20]	@ (800709c <__i2b+0x28>)
 8007086:	f240 1145 	movw	r1, #325	@ 0x145
 800708a:	f002 f995 	bl	80093b8 <__assert_func>
 800708e:	2301      	movs	r3, #1
 8007090:	6144      	str	r4, [r0, #20]
 8007092:	6103      	str	r3, [r0, #16]
 8007094:	bd10      	pop	{r4, pc}
 8007096:	bf00      	nop
 8007098:	08009f9b 	.word	0x08009f9b
 800709c:	08009fac 	.word	0x08009fac

080070a0 <__multiply>:
 80070a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a4:	4614      	mov	r4, r2
 80070a6:	690a      	ldr	r2, [r1, #16]
 80070a8:	6923      	ldr	r3, [r4, #16]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	bfa8      	it	ge
 80070ae:	4623      	movge	r3, r4
 80070b0:	460f      	mov	r7, r1
 80070b2:	bfa4      	itt	ge
 80070b4:	460c      	movge	r4, r1
 80070b6:	461f      	movge	r7, r3
 80070b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80070bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80070c0:	68a3      	ldr	r3, [r4, #8]
 80070c2:	6861      	ldr	r1, [r4, #4]
 80070c4:	eb0a 0609 	add.w	r6, sl, r9
 80070c8:	42b3      	cmp	r3, r6
 80070ca:	b085      	sub	sp, #20
 80070cc:	bfb8      	it	lt
 80070ce:	3101      	addlt	r1, #1
 80070d0:	f7ff fe92 	bl	8006df8 <_Balloc>
 80070d4:	b930      	cbnz	r0, 80070e4 <__multiply+0x44>
 80070d6:	4602      	mov	r2, r0
 80070d8:	4b44      	ldr	r3, [pc, #272]	@ (80071ec <__multiply+0x14c>)
 80070da:	4845      	ldr	r0, [pc, #276]	@ (80071f0 <__multiply+0x150>)
 80070dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80070e0:	f002 f96a 	bl	80093b8 <__assert_func>
 80070e4:	f100 0514 	add.w	r5, r0, #20
 80070e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80070ec:	462b      	mov	r3, r5
 80070ee:	2200      	movs	r2, #0
 80070f0:	4543      	cmp	r3, r8
 80070f2:	d321      	bcc.n	8007138 <__multiply+0x98>
 80070f4:	f107 0114 	add.w	r1, r7, #20
 80070f8:	f104 0214 	add.w	r2, r4, #20
 80070fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007100:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007104:	9302      	str	r3, [sp, #8]
 8007106:	1b13      	subs	r3, r2, r4
 8007108:	3b15      	subs	r3, #21
 800710a:	f023 0303 	bic.w	r3, r3, #3
 800710e:	3304      	adds	r3, #4
 8007110:	f104 0715 	add.w	r7, r4, #21
 8007114:	42ba      	cmp	r2, r7
 8007116:	bf38      	it	cc
 8007118:	2304      	movcc	r3, #4
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	9b02      	ldr	r3, [sp, #8]
 800711e:	9103      	str	r1, [sp, #12]
 8007120:	428b      	cmp	r3, r1
 8007122:	d80c      	bhi.n	800713e <__multiply+0x9e>
 8007124:	2e00      	cmp	r6, #0
 8007126:	dd03      	ble.n	8007130 <__multiply+0x90>
 8007128:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800712c:	2b00      	cmp	r3, #0
 800712e:	d05b      	beq.n	80071e8 <__multiply+0x148>
 8007130:	6106      	str	r6, [r0, #16]
 8007132:	b005      	add	sp, #20
 8007134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007138:	f843 2b04 	str.w	r2, [r3], #4
 800713c:	e7d8      	b.n	80070f0 <__multiply+0x50>
 800713e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007142:	f1ba 0f00 	cmp.w	sl, #0
 8007146:	d024      	beq.n	8007192 <__multiply+0xf2>
 8007148:	f104 0e14 	add.w	lr, r4, #20
 800714c:	46a9      	mov	r9, r5
 800714e:	f04f 0c00 	mov.w	ip, #0
 8007152:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007156:	f8d9 3000 	ldr.w	r3, [r9]
 800715a:	fa1f fb87 	uxth.w	fp, r7
 800715e:	b29b      	uxth	r3, r3
 8007160:	fb0a 330b 	mla	r3, sl, fp, r3
 8007164:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007168:	f8d9 7000 	ldr.w	r7, [r9]
 800716c:	4463      	add	r3, ip
 800716e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007172:	fb0a c70b 	mla	r7, sl, fp, ip
 8007176:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800717a:	b29b      	uxth	r3, r3
 800717c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007180:	4572      	cmp	r2, lr
 8007182:	f849 3b04 	str.w	r3, [r9], #4
 8007186:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800718a:	d8e2      	bhi.n	8007152 <__multiply+0xb2>
 800718c:	9b01      	ldr	r3, [sp, #4]
 800718e:	f845 c003 	str.w	ip, [r5, r3]
 8007192:	9b03      	ldr	r3, [sp, #12]
 8007194:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007198:	3104      	adds	r1, #4
 800719a:	f1b9 0f00 	cmp.w	r9, #0
 800719e:	d021      	beq.n	80071e4 <__multiply+0x144>
 80071a0:	682b      	ldr	r3, [r5, #0]
 80071a2:	f104 0c14 	add.w	ip, r4, #20
 80071a6:	46ae      	mov	lr, r5
 80071a8:	f04f 0a00 	mov.w	sl, #0
 80071ac:	f8bc b000 	ldrh.w	fp, [ip]
 80071b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80071b4:	fb09 770b 	mla	r7, r9, fp, r7
 80071b8:	4457      	add	r7, sl
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80071c0:	f84e 3b04 	str.w	r3, [lr], #4
 80071c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071cc:	f8be 3000 	ldrh.w	r3, [lr]
 80071d0:	fb09 330a 	mla	r3, r9, sl, r3
 80071d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80071d8:	4562      	cmp	r2, ip
 80071da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071de:	d8e5      	bhi.n	80071ac <__multiply+0x10c>
 80071e0:	9f01      	ldr	r7, [sp, #4]
 80071e2:	51eb      	str	r3, [r5, r7]
 80071e4:	3504      	adds	r5, #4
 80071e6:	e799      	b.n	800711c <__multiply+0x7c>
 80071e8:	3e01      	subs	r6, #1
 80071ea:	e79b      	b.n	8007124 <__multiply+0x84>
 80071ec:	08009f9b 	.word	0x08009f9b
 80071f0:	08009fac 	.word	0x08009fac

080071f4 <__pow5mult>:
 80071f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071f8:	4615      	mov	r5, r2
 80071fa:	f012 0203 	ands.w	r2, r2, #3
 80071fe:	4607      	mov	r7, r0
 8007200:	460e      	mov	r6, r1
 8007202:	d007      	beq.n	8007214 <__pow5mult+0x20>
 8007204:	4c25      	ldr	r4, [pc, #148]	@ (800729c <__pow5mult+0xa8>)
 8007206:	3a01      	subs	r2, #1
 8007208:	2300      	movs	r3, #0
 800720a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800720e:	f7ff fe55 	bl	8006ebc <__multadd>
 8007212:	4606      	mov	r6, r0
 8007214:	10ad      	asrs	r5, r5, #2
 8007216:	d03d      	beq.n	8007294 <__pow5mult+0xa0>
 8007218:	69fc      	ldr	r4, [r7, #28]
 800721a:	b97c      	cbnz	r4, 800723c <__pow5mult+0x48>
 800721c:	2010      	movs	r0, #16
 800721e:	f7ff fd35 	bl	8006c8c <malloc>
 8007222:	4602      	mov	r2, r0
 8007224:	61f8      	str	r0, [r7, #28]
 8007226:	b928      	cbnz	r0, 8007234 <__pow5mult+0x40>
 8007228:	4b1d      	ldr	r3, [pc, #116]	@ (80072a0 <__pow5mult+0xac>)
 800722a:	481e      	ldr	r0, [pc, #120]	@ (80072a4 <__pow5mult+0xb0>)
 800722c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007230:	f002 f8c2 	bl	80093b8 <__assert_func>
 8007234:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007238:	6004      	str	r4, [r0, #0]
 800723a:	60c4      	str	r4, [r0, #12]
 800723c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007240:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007244:	b94c      	cbnz	r4, 800725a <__pow5mult+0x66>
 8007246:	f240 2171 	movw	r1, #625	@ 0x271
 800724a:	4638      	mov	r0, r7
 800724c:	f7ff ff12 	bl	8007074 <__i2b>
 8007250:	2300      	movs	r3, #0
 8007252:	f8c8 0008 	str.w	r0, [r8, #8]
 8007256:	4604      	mov	r4, r0
 8007258:	6003      	str	r3, [r0, #0]
 800725a:	f04f 0900 	mov.w	r9, #0
 800725e:	07eb      	lsls	r3, r5, #31
 8007260:	d50a      	bpl.n	8007278 <__pow5mult+0x84>
 8007262:	4631      	mov	r1, r6
 8007264:	4622      	mov	r2, r4
 8007266:	4638      	mov	r0, r7
 8007268:	f7ff ff1a 	bl	80070a0 <__multiply>
 800726c:	4631      	mov	r1, r6
 800726e:	4680      	mov	r8, r0
 8007270:	4638      	mov	r0, r7
 8007272:	f7ff fe01 	bl	8006e78 <_Bfree>
 8007276:	4646      	mov	r6, r8
 8007278:	106d      	asrs	r5, r5, #1
 800727a:	d00b      	beq.n	8007294 <__pow5mult+0xa0>
 800727c:	6820      	ldr	r0, [r4, #0]
 800727e:	b938      	cbnz	r0, 8007290 <__pow5mult+0x9c>
 8007280:	4622      	mov	r2, r4
 8007282:	4621      	mov	r1, r4
 8007284:	4638      	mov	r0, r7
 8007286:	f7ff ff0b 	bl	80070a0 <__multiply>
 800728a:	6020      	str	r0, [r4, #0]
 800728c:	f8c0 9000 	str.w	r9, [r0]
 8007290:	4604      	mov	r4, r0
 8007292:	e7e4      	b.n	800725e <__pow5mult+0x6a>
 8007294:	4630      	mov	r0, r6
 8007296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800729a:	bf00      	nop
 800729c:	0800a008 	.word	0x0800a008
 80072a0:	08009f2c 	.word	0x08009f2c
 80072a4:	08009fac 	.word	0x08009fac

080072a8 <__lshift>:
 80072a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ac:	460c      	mov	r4, r1
 80072ae:	6849      	ldr	r1, [r1, #4]
 80072b0:	6923      	ldr	r3, [r4, #16]
 80072b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072b6:	68a3      	ldr	r3, [r4, #8]
 80072b8:	4607      	mov	r7, r0
 80072ba:	4691      	mov	r9, r2
 80072bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072c0:	f108 0601 	add.w	r6, r8, #1
 80072c4:	42b3      	cmp	r3, r6
 80072c6:	db0b      	blt.n	80072e0 <__lshift+0x38>
 80072c8:	4638      	mov	r0, r7
 80072ca:	f7ff fd95 	bl	8006df8 <_Balloc>
 80072ce:	4605      	mov	r5, r0
 80072d0:	b948      	cbnz	r0, 80072e6 <__lshift+0x3e>
 80072d2:	4602      	mov	r2, r0
 80072d4:	4b28      	ldr	r3, [pc, #160]	@ (8007378 <__lshift+0xd0>)
 80072d6:	4829      	ldr	r0, [pc, #164]	@ (800737c <__lshift+0xd4>)
 80072d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80072dc:	f002 f86c 	bl	80093b8 <__assert_func>
 80072e0:	3101      	adds	r1, #1
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	e7ee      	b.n	80072c4 <__lshift+0x1c>
 80072e6:	2300      	movs	r3, #0
 80072e8:	f100 0114 	add.w	r1, r0, #20
 80072ec:	f100 0210 	add.w	r2, r0, #16
 80072f0:	4618      	mov	r0, r3
 80072f2:	4553      	cmp	r3, sl
 80072f4:	db33      	blt.n	800735e <__lshift+0xb6>
 80072f6:	6920      	ldr	r0, [r4, #16]
 80072f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072fc:	f104 0314 	add.w	r3, r4, #20
 8007300:	f019 091f 	ands.w	r9, r9, #31
 8007304:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007308:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800730c:	d02b      	beq.n	8007366 <__lshift+0xbe>
 800730e:	f1c9 0e20 	rsb	lr, r9, #32
 8007312:	468a      	mov	sl, r1
 8007314:	2200      	movs	r2, #0
 8007316:	6818      	ldr	r0, [r3, #0]
 8007318:	fa00 f009 	lsl.w	r0, r0, r9
 800731c:	4310      	orrs	r0, r2
 800731e:	f84a 0b04 	str.w	r0, [sl], #4
 8007322:	f853 2b04 	ldr.w	r2, [r3], #4
 8007326:	459c      	cmp	ip, r3
 8007328:	fa22 f20e 	lsr.w	r2, r2, lr
 800732c:	d8f3      	bhi.n	8007316 <__lshift+0x6e>
 800732e:	ebac 0304 	sub.w	r3, ip, r4
 8007332:	3b15      	subs	r3, #21
 8007334:	f023 0303 	bic.w	r3, r3, #3
 8007338:	3304      	adds	r3, #4
 800733a:	f104 0015 	add.w	r0, r4, #21
 800733e:	4584      	cmp	ip, r0
 8007340:	bf38      	it	cc
 8007342:	2304      	movcc	r3, #4
 8007344:	50ca      	str	r2, [r1, r3]
 8007346:	b10a      	cbz	r2, 800734c <__lshift+0xa4>
 8007348:	f108 0602 	add.w	r6, r8, #2
 800734c:	3e01      	subs	r6, #1
 800734e:	4638      	mov	r0, r7
 8007350:	612e      	str	r6, [r5, #16]
 8007352:	4621      	mov	r1, r4
 8007354:	f7ff fd90 	bl	8006e78 <_Bfree>
 8007358:	4628      	mov	r0, r5
 800735a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800735e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007362:	3301      	adds	r3, #1
 8007364:	e7c5      	b.n	80072f2 <__lshift+0x4a>
 8007366:	3904      	subs	r1, #4
 8007368:	f853 2b04 	ldr.w	r2, [r3], #4
 800736c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007370:	459c      	cmp	ip, r3
 8007372:	d8f9      	bhi.n	8007368 <__lshift+0xc0>
 8007374:	e7ea      	b.n	800734c <__lshift+0xa4>
 8007376:	bf00      	nop
 8007378:	08009f9b 	.word	0x08009f9b
 800737c:	08009fac 	.word	0x08009fac

08007380 <__mcmp>:
 8007380:	690a      	ldr	r2, [r1, #16]
 8007382:	4603      	mov	r3, r0
 8007384:	6900      	ldr	r0, [r0, #16]
 8007386:	1a80      	subs	r0, r0, r2
 8007388:	b530      	push	{r4, r5, lr}
 800738a:	d10e      	bne.n	80073aa <__mcmp+0x2a>
 800738c:	3314      	adds	r3, #20
 800738e:	3114      	adds	r1, #20
 8007390:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007394:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007398:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800739c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80073a0:	4295      	cmp	r5, r2
 80073a2:	d003      	beq.n	80073ac <__mcmp+0x2c>
 80073a4:	d205      	bcs.n	80073b2 <__mcmp+0x32>
 80073a6:	f04f 30ff 	mov.w	r0, #4294967295
 80073aa:	bd30      	pop	{r4, r5, pc}
 80073ac:	42a3      	cmp	r3, r4
 80073ae:	d3f3      	bcc.n	8007398 <__mcmp+0x18>
 80073b0:	e7fb      	b.n	80073aa <__mcmp+0x2a>
 80073b2:	2001      	movs	r0, #1
 80073b4:	e7f9      	b.n	80073aa <__mcmp+0x2a>
	...

080073b8 <__mdiff>:
 80073b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073bc:	4689      	mov	r9, r1
 80073be:	4606      	mov	r6, r0
 80073c0:	4611      	mov	r1, r2
 80073c2:	4648      	mov	r0, r9
 80073c4:	4614      	mov	r4, r2
 80073c6:	f7ff ffdb 	bl	8007380 <__mcmp>
 80073ca:	1e05      	subs	r5, r0, #0
 80073cc:	d112      	bne.n	80073f4 <__mdiff+0x3c>
 80073ce:	4629      	mov	r1, r5
 80073d0:	4630      	mov	r0, r6
 80073d2:	f7ff fd11 	bl	8006df8 <_Balloc>
 80073d6:	4602      	mov	r2, r0
 80073d8:	b928      	cbnz	r0, 80073e6 <__mdiff+0x2e>
 80073da:	4b3f      	ldr	r3, [pc, #252]	@ (80074d8 <__mdiff+0x120>)
 80073dc:	f240 2137 	movw	r1, #567	@ 0x237
 80073e0:	483e      	ldr	r0, [pc, #248]	@ (80074dc <__mdiff+0x124>)
 80073e2:	f001 ffe9 	bl	80093b8 <__assert_func>
 80073e6:	2301      	movs	r3, #1
 80073e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073ec:	4610      	mov	r0, r2
 80073ee:	b003      	add	sp, #12
 80073f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f4:	bfbc      	itt	lt
 80073f6:	464b      	movlt	r3, r9
 80073f8:	46a1      	movlt	r9, r4
 80073fa:	4630      	mov	r0, r6
 80073fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007400:	bfba      	itte	lt
 8007402:	461c      	movlt	r4, r3
 8007404:	2501      	movlt	r5, #1
 8007406:	2500      	movge	r5, #0
 8007408:	f7ff fcf6 	bl	8006df8 <_Balloc>
 800740c:	4602      	mov	r2, r0
 800740e:	b918      	cbnz	r0, 8007418 <__mdiff+0x60>
 8007410:	4b31      	ldr	r3, [pc, #196]	@ (80074d8 <__mdiff+0x120>)
 8007412:	f240 2145 	movw	r1, #581	@ 0x245
 8007416:	e7e3      	b.n	80073e0 <__mdiff+0x28>
 8007418:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800741c:	6926      	ldr	r6, [r4, #16]
 800741e:	60c5      	str	r5, [r0, #12]
 8007420:	f109 0310 	add.w	r3, r9, #16
 8007424:	f109 0514 	add.w	r5, r9, #20
 8007428:	f104 0e14 	add.w	lr, r4, #20
 800742c:	f100 0b14 	add.w	fp, r0, #20
 8007430:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007434:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007438:	9301      	str	r3, [sp, #4]
 800743a:	46d9      	mov	r9, fp
 800743c:	f04f 0c00 	mov.w	ip, #0
 8007440:	9b01      	ldr	r3, [sp, #4]
 8007442:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007446:	f853 af04 	ldr.w	sl, [r3, #4]!
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	fa1f f38a 	uxth.w	r3, sl
 8007450:	4619      	mov	r1, r3
 8007452:	b283      	uxth	r3, r0
 8007454:	1acb      	subs	r3, r1, r3
 8007456:	0c00      	lsrs	r0, r0, #16
 8007458:	4463      	add	r3, ip
 800745a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800745e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007462:	b29b      	uxth	r3, r3
 8007464:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007468:	4576      	cmp	r6, lr
 800746a:	f849 3b04 	str.w	r3, [r9], #4
 800746e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007472:	d8e5      	bhi.n	8007440 <__mdiff+0x88>
 8007474:	1b33      	subs	r3, r6, r4
 8007476:	3b15      	subs	r3, #21
 8007478:	f023 0303 	bic.w	r3, r3, #3
 800747c:	3415      	adds	r4, #21
 800747e:	3304      	adds	r3, #4
 8007480:	42a6      	cmp	r6, r4
 8007482:	bf38      	it	cc
 8007484:	2304      	movcc	r3, #4
 8007486:	441d      	add	r5, r3
 8007488:	445b      	add	r3, fp
 800748a:	461e      	mov	r6, r3
 800748c:	462c      	mov	r4, r5
 800748e:	4544      	cmp	r4, r8
 8007490:	d30e      	bcc.n	80074b0 <__mdiff+0xf8>
 8007492:	f108 0103 	add.w	r1, r8, #3
 8007496:	1b49      	subs	r1, r1, r5
 8007498:	f021 0103 	bic.w	r1, r1, #3
 800749c:	3d03      	subs	r5, #3
 800749e:	45a8      	cmp	r8, r5
 80074a0:	bf38      	it	cc
 80074a2:	2100      	movcc	r1, #0
 80074a4:	440b      	add	r3, r1
 80074a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074aa:	b191      	cbz	r1, 80074d2 <__mdiff+0x11a>
 80074ac:	6117      	str	r7, [r2, #16]
 80074ae:	e79d      	b.n	80073ec <__mdiff+0x34>
 80074b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80074b4:	46e6      	mov	lr, ip
 80074b6:	0c08      	lsrs	r0, r1, #16
 80074b8:	fa1c fc81 	uxtah	ip, ip, r1
 80074bc:	4471      	add	r1, lr
 80074be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80074c2:	b289      	uxth	r1, r1
 80074c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80074c8:	f846 1b04 	str.w	r1, [r6], #4
 80074cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074d0:	e7dd      	b.n	800748e <__mdiff+0xd6>
 80074d2:	3f01      	subs	r7, #1
 80074d4:	e7e7      	b.n	80074a6 <__mdiff+0xee>
 80074d6:	bf00      	nop
 80074d8:	08009f9b 	.word	0x08009f9b
 80074dc:	08009fac 	.word	0x08009fac

080074e0 <__ulp>:
 80074e0:	b082      	sub	sp, #8
 80074e2:	ed8d 0b00 	vstr	d0, [sp]
 80074e6:	9a01      	ldr	r2, [sp, #4]
 80074e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007528 <__ulp+0x48>)
 80074ea:	4013      	ands	r3, r2
 80074ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	dc08      	bgt.n	8007506 <__ulp+0x26>
 80074f4:	425b      	negs	r3, r3
 80074f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80074fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80074fe:	da04      	bge.n	800750a <__ulp+0x2a>
 8007500:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007504:	4113      	asrs	r3, r2
 8007506:	2200      	movs	r2, #0
 8007508:	e008      	b.n	800751c <__ulp+0x3c>
 800750a:	f1a2 0314 	sub.w	r3, r2, #20
 800750e:	2b1e      	cmp	r3, #30
 8007510:	bfda      	itte	le
 8007512:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007516:	40da      	lsrle	r2, r3
 8007518:	2201      	movgt	r2, #1
 800751a:	2300      	movs	r3, #0
 800751c:	4619      	mov	r1, r3
 800751e:	4610      	mov	r0, r2
 8007520:	ec41 0b10 	vmov	d0, r0, r1
 8007524:	b002      	add	sp, #8
 8007526:	4770      	bx	lr
 8007528:	7ff00000 	.word	0x7ff00000

0800752c <__b2d>:
 800752c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007530:	6906      	ldr	r6, [r0, #16]
 8007532:	f100 0814 	add.w	r8, r0, #20
 8007536:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800753a:	1f37      	subs	r7, r6, #4
 800753c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007540:	4610      	mov	r0, r2
 8007542:	f7ff fd4b 	bl	8006fdc <__hi0bits>
 8007546:	f1c0 0320 	rsb	r3, r0, #32
 800754a:	280a      	cmp	r0, #10
 800754c:	600b      	str	r3, [r1, #0]
 800754e:	491b      	ldr	r1, [pc, #108]	@ (80075bc <__b2d+0x90>)
 8007550:	dc15      	bgt.n	800757e <__b2d+0x52>
 8007552:	f1c0 0c0b 	rsb	ip, r0, #11
 8007556:	fa22 f30c 	lsr.w	r3, r2, ip
 800755a:	45b8      	cmp	r8, r7
 800755c:	ea43 0501 	orr.w	r5, r3, r1
 8007560:	bf34      	ite	cc
 8007562:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007566:	2300      	movcs	r3, #0
 8007568:	3015      	adds	r0, #21
 800756a:	fa02 f000 	lsl.w	r0, r2, r0
 800756e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007572:	4303      	orrs	r3, r0
 8007574:	461c      	mov	r4, r3
 8007576:	ec45 4b10 	vmov	d0, r4, r5
 800757a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800757e:	45b8      	cmp	r8, r7
 8007580:	bf3a      	itte	cc
 8007582:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007586:	f1a6 0708 	subcc.w	r7, r6, #8
 800758a:	2300      	movcs	r3, #0
 800758c:	380b      	subs	r0, #11
 800758e:	d012      	beq.n	80075b6 <__b2d+0x8a>
 8007590:	f1c0 0120 	rsb	r1, r0, #32
 8007594:	fa23 f401 	lsr.w	r4, r3, r1
 8007598:	4082      	lsls	r2, r0
 800759a:	4322      	orrs	r2, r4
 800759c:	4547      	cmp	r7, r8
 800759e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80075a2:	bf8c      	ite	hi
 80075a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80075a8:	2200      	movls	r2, #0
 80075aa:	4083      	lsls	r3, r0
 80075ac:	40ca      	lsrs	r2, r1
 80075ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80075b2:	4313      	orrs	r3, r2
 80075b4:	e7de      	b.n	8007574 <__b2d+0x48>
 80075b6:	ea42 0501 	orr.w	r5, r2, r1
 80075ba:	e7db      	b.n	8007574 <__b2d+0x48>
 80075bc:	3ff00000 	.word	0x3ff00000

080075c0 <__d2b>:
 80075c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075c4:	460f      	mov	r7, r1
 80075c6:	2101      	movs	r1, #1
 80075c8:	ec59 8b10 	vmov	r8, r9, d0
 80075cc:	4616      	mov	r6, r2
 80075ce:	f7ff fc13 	bl	8006df8 <_Balloc>
 80075d2:	4604      	mov	r4, r0
 80075d4:	b930      	cbnz	r0, 80075e4 <__d2b+0x24>
 80075d6:	4602      	mov	r2, r0
 80075d8:	4b23      	ldr	r3, [pc, #140]	@ (8007668 <__d2b+0xa8>)
 80075da:	4824      	ldr	r0, [pc, #144]	@ (800766c <__d2b+0xac>)
 80075dc:	f240 310f 	movw	r1, #783	@ 0x30f
 80075e0:	f001 feea 	bl	80093b8 <__assert_func>
 80075e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075ec:	b10d      	cbz	r5, 80075f2 <__d2b+0x32>
 80075ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075f2:	9301      	str	r3, [sp, #4]
 80075f4:	f1b8 0300 	subs.w	r3, r8, #0
 80075f8:	d023      	beq.n	8007642 <__d2b+0x82>
 80075fa:	4668      	mov	r0, sp
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	f7ff fd0c 	bl	800701a <__lo0bits>
 8007602:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007606:	b1d0      	cbz	r0, 800763e <__d2b+0x7e>
 8007608:	f1c0 0320 	rsb	r3, r0, #32
 800760c:	fa02 f303 	lsl.w	r3, r2, r3
 8007610:	430b      	orrs	r3, r1
 8007612:	40c2      	lsrs	r2, r0
 8007614:	6163      	str	r3, [r4, #20]
 8007616:	9201      	str	r2, [sp, #4]
 8007618:	9b01      	ldr	r3, [sp, #4]
 800761a:	61a3      	str	r3, [r4, #24]
 800761c:	2b00      	cmp	r3, #0
 800761e:	bf0c      	ite	eq
 8007620:	2201      	moveq	r2, #1
 8007622:	2202      	movne	r2, #2
 8007624:	6122      	str	r2, [r4, #16]
 8007626:	b1a5      	cbz	r5, 8007652 <__d2b+0x92>
 8007628:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800762c:	4405      	add	r5, r0
 800762e:	603d      	str	r5, [r7, #0]
 8007630:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007634:	6030      	str	r0, [r6, #0]
 8007636:	4620      	mov	r0, r4
 8007638:	b003      	add	sp, #12
 800763a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800763e:	6161      	str	r1, [r4, #20]
 8007640:	e7ea      	b.n	8007618 <__d2b+0x58>
 8007642:	a801      	add	r0, sp, #4
 8007644:	f7ff fce9 	bl	800701a <__lo0bits>
 8007648:	9b01      	ldr	r3, [sp, #4]
 800764a:	6163      	str	r3, [r4, #20]
 800764c:	3020      	adds	r0, #32
 800764e:	2201      	movs	r2, #1
 8007650:	e7e8      	b.n	8007624 <__d2b+0x64>
 8007652:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007656:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800765a:	6038      	str	r0, [r7, #0]
 800765c:	6918      	ldr	r0, [r3, #16]
 800765e:	f7ff fcbd 	bl	8006fdc <__hi0bits>
 8007662:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007666:	e7e5      	b.n	8007634 <__d2b+0x74>
 8007668:	08009f9b 	.word	0x08009f9b
 800766c:	08009fac 	.word	0x08009fac

08007670 <__ratio>:
 8007670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007674:	b085      	sub	sp, #20
 8007676:	e9cd 1000 	strd	r1, r0, [sp]
 800767a:	a902      	add	r1, sp, #8
 800767c:	f7ff ff56 	bl	800752c <__b2d>
 8007680:	9800      	ldr	r0, [sp, #0]
 8007682:	a903      	add	r1, sp, #12
 8007684:	ec55 4b10 	vmov	r4, r5, d0
 8007688:	f7ff ff50 	bl	800752c <__b2d>
 800768c:	9b01      	ldr	r3, [sp, #4]
 800768e:	6919      	ldr	r1, [r3, #16]
 8007690:	9b00      	ldr	r3, [sp, #0]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	1ac9      	subs	r1, r1, r3
 8007696:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800769a:	1a9b      	subs	r3, r3, r2
 800769c:	ec5b ab10 	vmov	sl, fp, d0
 80076a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	bfce      	itee	gt
 80076a8:	462a      	movgt	r2, r5
 80076aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80076ae:	465a      	movle	r2, fp
 80076b0:	462f      	mov	r7, r5
 80076b2:	46d9      	mov	r9, fp
 80076b4:	bfcc      	ite	gt
 80076b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80076ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80076be:	464b      	mov	r3, r9
 80076c0:	4652      	mov	r2, sl
 80076c2:	4620      	mov	r0, r4
 80076c4:	4639      	mov	r1, r7
 80076c6:	f7f9 f8c1 	bl	800084c <__aeabi_ddiv>
 80076ca:	ec41 0b10 	vmov	d0, r0, r1
 80076ce:	b005      	add	sp, #20
 80076d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080076d4 <__copybits>:
 80076d4:	3901      	subs	r1, #1
 80076d6:	b570      	push	{r4, r5, r6, lr}
 80076d8:	1149      	asrs	r1, r1, #5
 80076da:	6914      	ldr	r4, [r2, #16]
 80076dc:	3101      	adds	r1, #1
 80076de:	f102 0314 	add.w	r3, r2, #20
 80076e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80076e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80076ea:	1f05      	subs	r5, r0, #4
 80076ec:	42a3      	cmp	r3, r4
 80076ee:	d30c      	bcc.n	800770a <__copybits+0x36>
 80076f0:	1aa3      	subs	r3, r4, r2
 80076f2:	3b11      	subs	r3, #17
 80076f4:	f023 0303 	bic.w	r3, r3, #3
 80076f8:	3211      	adds	r2, #17
 80076fa:	42a2      	cmp	r2, r4
 80076fc:	bf88      	it	hi
 80076fe:	2300      	movhi	r3, #0
 8007700:	4418      	add	r0, r3
 8007702:	2300      	movs	r3, #0
 8007704:	4288      	cmp	r0, r1
 8007706:	d305      	bcc.n	8007714 <__copybits+0x40>
 8007708:	bd70      	pop	{r4, r5, r6, pc}
 800770a:	f853 6b04 	ldr.w	r6, [r3], #4
 800770e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007712:	e7eb      	b.n	80076ec <__copybits+0x18>
 8007714:	f840 3b04 	str.w	r3, [r0], #4
 8007718:	e7f4      	b.n	8007704 <__copybits+0x30>

0800771a <__any_on>:
 800771a:	f100 0214 	add.w	r2, r0, #20
 800771e:	6900      	ldr	r0, [r0, #16]
 8007720:	114b      	asrs	r3, r1, #5
 8007722:	4298      	cmp	r0, r3
 8007724:	b510      	push	{r4, lr}
 8007726:	db11      	blt.n	800774c <__any_on+0x32>
 8007728:	dd0a      	ble.n	8007740 <__any_on+0x26>
 800772a:	f011 011f 	ands.w	r1, r1, #31
 800772e:	d007      	beq.n	8007740 <__any_on+0x26>
 8007730:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007734:	fa24 f001 	lsr.w	r0, r4, r1
 8007738:	fa00 f101 	lsl.w	r1, r0, r1
 800773c:	428c      	cmp	r4, r1
 800773e:	d10b      	bne.n	8007758 <__any_on+0x3e>
 8007740:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007744:	4293      	cmp	r3, r2
 8007746:	d803      	bhi.n	8007750 <__any_on+0x36>
 8007748:	2000      	movs	r0, #0
 800774a:	bd10      	pop	{r4, pc}
 800774c:	4603      	mov	r3, r0
 800774e:	e7f7      	b.n	8007740 <__any_on+0x26>
 8007750:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007754:	2900      	cmp	r1, #0
 8007756:	d0f5      	beq.n	8007744 <__any_on+0x2a>
 8007758:	2001      	movs	r0, #1
 800775a:	e7f6      	b.n	800774a <__any_on+0x30>

0800775c <sulp>:
 800775c:	b570      	push	{r4, r5, r6, lr}
 800775e:	4604      	mov	r4, r0
 8007760:	460d      	mov	r5, r1
 8007762:	ec45 4b10 	vmov	d0, r4, r5
 8007766:	4616      	mov	r6, r2
 8007768:	f7ff feba 	bl	80074e0 <__ulp>
 800776c:	ec51 0b10 	vmov	r0, r1, d0
 8007770:	b17e      	cbz	r6, 8007792 <sulp+0x36>
 8007772:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007776:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800777a:	2b00      	cmp	r3, #0
 800777c:	dd09      	ble.n	8007792 <sulp+0x36>
 800777e:	051b      	lsls	r3, r3, #20
 8007780:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007784:	2400      	movs	r4, #0
 8007786:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800778a:	4622      	mov	r2, r4
 800778c:	462b      	mov	r3, r5
 800778e:	f7f8 ff33 	bl	80005f8 <__aeabi_dmul>
 8007792:	ec41 0b10 	vmov	d0, r0, r1
 8007796:	bd70      	pop	{r4, r5, r6, pc}

08007798 <_strtod_l>:
 8007798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779c:	b09f      	sub	sp, #124	@ 0x7c
 800779e:	460c      	mov	r4, r1
 80077a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80077a2:	2200      	movs	r2, #0
 80077a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80077a6:	9005      	str	r0, [sp, #20]
 80077a8:	f04f 0a00 	mov.w	sl, #0
 80077ac:	f04f 0b00 	mov.w	fp, #0
 80077b0:	460a      	mov	r2, r1
 80077b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80077b4:	7811      	ldrb	r1, [r2, #0]
 80077b6:	292b      	cmp	r1, #43	@ 0x2b
 80077b8:	d04a      	beq.n	8007850 <_strtod_l+0xb8>
 80077ba:	d838      	bhi.n	800782e <_strtod_l+0x96>
 80077bc:	290d      	cmp	r1, #13
 80077be:	d832      	bhi.n	8007826 <_strtod_l+0x8e>
 80077c0:	2908      	cmp	r1, #8
 80077c2:	d832      	bhi.n	800782a <_strtod_l+0x92>
 80077c4:	2900      	cmp	r1, #0
 80077c6:	d03b      	beq.n	8007840 <_strtod_l+0xa8>
 80077c8:	2200      	movs	r2, #0
 80077ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80077cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80077ce:	782a      	ldrb	r2, [r5, #0]
 80077d0:	2a30      	cmp	r2, #48	@ 0x30
 80077d2:	f040 80b3 	bne.w	800793c <_strtod_l+0x1a4>
 80077d6:	786a      	ldrb	r2, [r5, #1]
 80077d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80077dc:	2a58      	cmp	r2, #88	@ 0x58
 80077de:	d16e      	bne.n	80078be <_strtod_l+0x126>
 80077e0:	9302      	str	r3, [sp, #8]
 80077e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077e4:	9301      	str	r3, [sp, #4]
 80077e6:	ab1a      	add	r3, sp, #104	@ 0x68
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	4a8e      	ldr	r2, [pc, #568]	@ (8007a24 <_strtod_l+0x28c>)
 80077ec:	9805      	ldr	r0, [sp, #20]
 80077ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80077f0:	a919      	add	r1, sp, #100	@ 0x64
 80077f2:	f001 fe7b 	bl	80094ec <__gethex>
 80077f6:	f010 060f 	ands.w	r6, r0, #15
 80077fa:	4604      	mov	r4, r0
 80077fc:	d005      	beq.n	800780a <_strtod_l+0x72>
 80077fe:	2e06      	cmp	r6, #6
 8007800:	d128      	bne.n	8007854 <_strtod_l+0xbc>
 8007802:	3501      	adds	r5, #1
 8007804:	2300      	movs	r3, #0
 8007806:	9519      	str	r5, [sp, #100]	@ 0x64
 8007808:	930b      	str	r3, [sp, #44]	@ 0x2c
 800780a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800780c:	2b00      	cmp	r3, #0
 800780e:	f040 858e 	bne.w	800832e <_strtod_l+0xb96>
 8007812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007814:	b1cb      	cbz	r3, 800784a <_strtod_l+0xb2>
 8007816:	4652      	mov	r2, sl
 8007818:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800781c:	ec43 2b10 	vmov	d0, r2, r3
 8007820:	b01f      	add	sp, #124	@ 0x7c
 8007822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007826:	2920      	cmp	r1, #32
 8007828:	d1ce      	bne.n	80077c8 <_strtod_l+0x30>
 800782a:	3201      	adds	r2, #1
 800782c:	e7c1      	b.n	80077b2 <_strtod_l+0x1a>
 800782e:	292d      	cmp	r1, #45	@ 0x2d
 8007830:	d1ca      	bne.n	80077c8 <_strtod_l+0x30>
 8007832:	2101      	movs	r1, #1
 8007834:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007836:	1c51      	adds	r1, r2, #1
 8007838:	9119      	str	r1, [sp, #100]	@ 0x64
 800783a:	7852      	ldrb	r2, [r2, #1]
 800783c:	2a00      	cmp	r2, #0
 800783e:	d1c5      	bne.n	80077cc <_strtod_l+0x34>
 8007840:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007842:	9419      	str	r4, [sp, #100]	@ 0x64
 8007844:	2b00      	cmp	r3, #0
 8007846:	f040 8570 	bne.w	800832a <_strtod_l+0xb92>
 800784a:	4652      	mov	r2, sl
 800784c:	465b      	mov	r3, fp
 800784e:	e7e5      	b.n	800781c <_strtod_l+0x84>
 8007850:	2100      	movs	r1, #0
 8007852:	e7ef      	b.n	8007834 <_strtod_l+0x9c>
 8007854:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007856:	b13a      	cbz	r2, 8007868 <_strtod_l+0xd0>
 8007858:	2135      	movs	r1, #53	@ 0x35
 800785a:	a81c      	add	r0, sp, #112	@ 0x70
 800785c:	f7ff ff3a 	bl	80076d4 <__copybits>
 8007860:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007862:	9805      	ldr	r0, [sp, #20]
 8007864:	f7ff fb08 	bl	8006e78 <_Bfree>
 8007868:	3e01      	subs	r6, #1
 800786a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800786c:	2e04      	cmp	r6, #4
 800786e:	d806      	bhi.n	800787e <_strtod_l+0xe6>
 8007870:	e8df f006 	tbb	[pc, r6]
 8007874:	201d0314 	.word	0x201d0314
 8007878:	14          	.byte	0x14
 8007879:	00          	.byte	0x00
 800787a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800787e:	05e1      	lsls	r1, r4, #23
 8007880:	bf48      	it	mi
 8007882:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007886:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800788a:	0d1b      	lsrs	r3, r3, #20
 800788c:	051b      	lsls	r3, r3, #20
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1bb      	bne.n	800780a <_strtod_l+0x72>
 8007892:	f7fe fb2f 	bl	8005ef4 <__errno>
 8007896:	2322      	movs	r3, #34	@ 0x22
 8007898:	6003      	str	r3, [r0, #0]
 800789a:	e7b6      	b.n	800780a <_strtod_l+0x72>
 800789c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80078a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80078a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80078a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80078ac:	e7e7      	b.n	800787e <_strtod_l+0xe6>
 80078ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007a2c <_strtod_l+0x294>
 80078b2:	e7e4      	b.n	800787e <_strtod_l+0xe6>
 80078b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80078b8:	f04f 3aff 	mov.w	sl, #4294967295
 80078bc:	e7df      	b.n	800787e <_strtod_l+0xe6>
 80078be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078c0:	1c5a      	adds	r2, r3, #1
 80078c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80078c4:	785b      	ldrb	r3, [r3, #1]
 80078c6:	2b30      	cmp	r3, #48	@ 0x30
 80078c8:	d0f9      	beq.n	80078be <_strtod_l+0x126>
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d09d      	beq.n	800780a <_strtod_l+0x72>
 80078ce:	2301      	movs	r3, #1
 80078d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80078d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80078d6:	2300      	movs	r3, #0
 80078d8:	9308      	str	r3, [sp, #32]
 80078da:	930a      	str	r3, [sp, #40]	@ 0x28
 80078dc:	461f      	mov	r7, r3
 80078de:	220a      	movs	r2, #10
 80078e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80078e2:	7805      	ldrb	r5, [r0, #0]
 80078e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80078e8:	b2d9      	uxtb	r1, r3
 80078ea:	2909      	cmp	r1, #9
 80078ec:	d928      	bls.n	8007940 <_strtod_l+0x1a8>
 80078ee:	494e      	ldr	r1, [pc, #312]	@ (8007a28 <_strtod_l+0x290>)
 80078f0:	2201      	movs	r2, #1
 80078f2:	f7fe faa2 	bl	8005e3a <strncmp>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d032      	beq.n	8007960 <_strtod_l+0x1c8>
 80078fa:	2000      	movs	r0, #0
 80078fc:	462a      	mov	r2, r5
 80078fe:	4681      	mov	r9, r0
 8007900:	463d      	mov	r5, r7
 8007902:	4603      	mov	r3, r0
 8007904:	2a65      	cmp	r2, #101	@ 0x65
 8007906:	d001      	beq.n	800790c <_strtod_l+0x174>
 8007908:	2a45      	cmp	r2, #69	@ 0x45
 800790a:	d114      	bne.n	8007936 <_strtod_l+0x19e>
 800790c:	b91d      	cbnz	r5, 8007916 <_strtod_l+0x17e>
 800790e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007910:	4302      	orrs	r2, r0
 8007912:	d095      	beq.n	8007840 <_strtod_l+0xa8>
 8007914:	2500      	movs	r5, #0
 8007916:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007918:	1c62      	adds	r2, r4, #1
 800791a:	9219      	str	r2, [sp, #100]	@ 0x64
 800791c:	7862      	ldrb	r2, [r4, #1]
 800791e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007920:	d077      	beq.n	8007a12 <_strtod_l+0x27a>
 8007922:	2a2d      	cmp	r2, #45	@ 0x2d
 8007924:	d07b      	beq.n	8007a1e <_strtod_l+0x286>
 8007926:	f04f 0c00 	mov.w	ip, #0
 800792a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800792e:	2909      	cmp	r1, #9
 8007930:	f240 8082 	bls.w	8007a38 <_strtod_l+0x2a0>
 8007934:	9419      	str	r4, [sp, #100]	@ 0x64
 8007936:	f04f 0800 	mov.w	r8, #0
 800793a:	e0a2      	b.n	8007a82 <_strtod_l+0x2ea>
 800793c:	2300      	movs	r3, #0
 800793e:	e7c7      	b.n	80078d0 <_strtod_l+0x138>
 8007940:	2f08      	cmp	r7, #8
 8007942:	bfd5      	itete	le
 8007944:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007946:	9908      	ldrgt	r1, [sp, #32]
 8007948:	fb02 3301 	mlale	r3, r2, r1, r3
 800794c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007950:	f100 0001 	add.w	r0, r0, #1
 8007954:	bfd4      	ite	le
 8007956:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007958:	9308      	strgt	r3, [sp, #32]
 800795a:	3701      	adds	r7, #1
 800795c:	9019      	str	r0, [sp, #100]	@ 0x64
 800795e:	e7bf      	b.n	80078e0 <_strtod_l+0x148>
 8007960:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	9219      	str	r2, [sp, #100]	@ 0x64
 8007966:	785a      	ldrb	r2, [r3, #1]
 8007968:	b37f      	cbz	r7, 80079ca <_strtod_l+0x232>
 800796a:	4681      	mov	r9, r0
 800796c:	463d      	mov	r5, r7
 800796e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007972:	2b09      	cmp	r3, #9
 8007974:	d912      	bls.n	800799c <_strtod_l+0x204>
 8007976:	2301      	movs	r3, #1
 8007978:	e7c4      	b.n	8007904 <_strtod_l+0x16c>
 800797a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007980:	785a      	ldrb	r2, [r3, #1]
 8007982:	3001      	adds	r0, #1
 8007984:	2a30      	cmp	r2, #48	@ 0x30
 8007986:	d0f8      	beq.n	800797a <_strtod_l+0x1e2>
 8007988:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800798c:	2b08      	cmp	r3, #8
 800798e:	f200 84d3 	bhi.w	8008338 <_strtod_l+0xba0>
 8007992:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007994:	930c      	str	r3, [sp, #48]	@ 0x30
 8007996:	4681      	mov	r9, r0
 8007998:	2000      	movs	r0, #0
 800799a:	4605      	mov	r5, r0
 800799c:	3a30      	subs	r2, #48	@ 0x30
 800799e:	f100 0301 	add.w	r3, r0, #1
 80079a2:	d02a      	beq.n	80079fa <_strtod_l+0x262>
 80079a4:	4499      	add	r9, r3
 80079a6:	eb00 0c05 	add.w	ip, r0, r5
 80079aa:	462b      	mov	r3, r5
 80079ac:	210a      	movs	r1, #10
 80079ae:	4563      	cmp	r3, ip
 80079b0:	d10d      	bne.n	80079ce <_strtod_l+0x236>
 80079b2:	1c69      	adds	r1, r5, #1
 80079b4:	4401      	add	r1, r0
 80079b6:	4428      	add	r0, r5
 80079b8:	2808      	cmp	r0, #8
 80079ba:	dc16      	bgt.n	80079ea <_strtod_l+0x252>
 80079bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80079be:	230a      	movs	r3, #10
 80079c0:	fb03 2300 	mla	r3, r3, r0, r2
 80079c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80079c6:	2300      	movs	r3, #0
 80079c8:	e018      	b.n	80079fc <_strtod_l+0x264>
 80079ca:	4638      	mov	r0, r7
 80079cc:	e7da      	b.n	8007984 <_strtod_l+0x1ec>
 80079ce:	2b08      	cmp	r3, #8
 80079d0:	f103 0301 	add.w	r3, r3, #1
 80079d4:	dc03      	bgt.n	80079de <_strtod_l+0x246>
 80079d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80079d8:	434e      	muls	r6, r1
 80079da:	960a      	str	r6, [sp, #40]	@ 0x28
 80079dc:	e7e7      	b.n	80079ae <_strtod_l+0x216>
 80079de:	2b10      	cmp	r3, #16
 80079e0:	bfde      	ittt	le
 80079e2:	9e08      	ldrle	r6, [sp, #32]
 80079e4:	434e      	mulle	r6, r1
 80079e6:	9608      	strle	r6, [sp, #32]
 80079e8:	e7e1      	b.n	80079ae <_strtod_l+0x216>
 80079ea:	280f      	cmp	r0, #15
 80079ec:	dceb      	bgt.n	80079c6 <_strtod_l+0x22e>
 80079ee:	9808      	ldr	r0, [sp, #32]
 80079f0:	230a      	movs	r3, #10
 80079f2:	fb03 2300 	mla	r3, r3, r0, r2
 80079f6:	9308      	str	r3, [sp, #32]
 80079f8:	e7e5      	b.n	80079c6 <_strtod_l+0x22e>
 80079fa:	4629      	mov	r1, r5
 80079fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80079fe:	1c50      	adds	r0, r2, #1
 8007a00:	9019      	str	r0, [sp, #100]	@ 0x64
 8007a02:	7852      	ldrb	r2, [r2, #1]
 8007a04:	4618      	mov	r0, r3
 8007a06:	460d      	mov	r5, r1
 8007a08:	e7b1      	b.n	800796e <_strtod_l+0x1d6>
 8007a0a:	f04f 0900 	mov.w	r9, #0
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e77d      	b.n	800790e <_strtod_l+0x176>
 8007a12:	f04f 0c00 	mov.w	ip, #0
 8007a16:	1ca2      	adds	r2, r4, #2
 8007a18:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a1a:	78a2      	ldrb	r2, [r4, #2]
 8007a1c:	e785      	b.n	800792a <_strtod_l+0x192>
 8007a1e:	f04f 0c01 	mov.w	ip, #1
 8007a22:	e7f8      	b.n	8007a16 <_strtod_l+0x27e>
 8007a24:	0800a120 	.word	0x0800a120
 8007a28:	0800a108 	.word	0x0800a108
 8007a2c:	7ff00000 	.word	0x7ff00000
 8007a30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a32:	1c51      	adds	r1, r2, #1
 8007a34:	9119      	str	r1, [sp, #100]	@ 0x64
 8007a36:	7852      	ldrb	r2, [r2, #1]
 8007a38:	2a30      	cmp	r2, #48	@ 0x30
 8007a3a:	d0f9      	beq.n	8007a30 <_strtod_l+0x298>
 8007a3c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007a40:	2908      	cmp	r1, #8
 8007a42:	f63f af78 	bhi.w	8007936 <_strtod_l+0x19e>
 8007a46:	3a30      	subs	r2, #48	@ 0x30
 8007a48:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a4c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007a4e:	f04f 080a 	mov.w	r8, #10
 8007a52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a54:	1c56      	adds	r6, r2, #1
 8007a56:	9619      	str	r6, [sp, #100]	@ 0x64
 8007a58:	7852      	ldrb	r2, [r2, #1]
 8007a5a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007a5e:	f1be 0f09 	cmp.w	lr, #9
 8007a62:	d939      	bls.n	8007ad8 <_strtod_l+0x340>
 8007a64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007a66:	1a76      	subs	r6, r6, r1
 8007a68:	2e08      	cmp	r6, #8
 8007a6a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007a6e:	dc03      	bgt.n	8007a78 <_strtod_l+0x2e0>
 8007a70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007a72:	4588      	cmp	r8, r1
 8007a74:	bfa8      	it	ge
 8007a76:	4688      	movge	r8, r1
 8007a78:	f1bc 0f00 	cmp.w	ip, #0
 8007a7c:	d001      	beq.n	8007a82 <_strtod_l+0x2ea>
 8007a7e:	f1c8 0800 	rsb	r8, r8, #0
 8007a82:	2d00      	cmp	r5, #0
 8007a84:	d14e      	bne.n	8007b24 <_strtod_l+0x38c>
 8007a86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a88:	4308      	orrs	r0, r1
 8007a8a:	f47f aebe 	bne.w	800780a <_strtod_l+0x72>
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f47f aed6 	bne.w	8007840 <_strtod_l+0xa8>
 8007a94:	2a69      	cmp	r2, #105	@ 0x69
 8007a96:	d028      	beq.n	8007aea <_strtod_l+0x352>
 8007a98:	dc25      	bgt.n	8007ae6 <_strtod_l+0x34e>
 8007a9a:	2a49      	cmp	r2, #73	@ 0x49
 8007a9c:	d025      	beq.n	8007aea <_strtod_l+0x352>
 8007a9e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007aa0:	f47f aece 	bne.w	8007840 <_strtod_l+0xa8>
 8007aa4:	499b      	ldr	r1, [pc, #620]	@ (8007d14 <_strtod_l+0x57c>)
 8007aa6:	a819      	add	r0, sp, #100	@ 0x64
 8007aa8:	f001 ff42 	bl	8009930 <__match>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	f43f aec7 	beq.w	8007840 <_strtod_l+0xa8>
 8007ab2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	2b28      	cmp	r3, #40	@ 0x28
 8007ab8:	d12e      	bne.n	8007b18 <_strtod_l+0x380>
 8007aba:	4997      	ldr	r1, [pc, #604]	@ (8007d18 <_strtod_l+0x580>)
 8007abc:	aa1c      	add	r2, sp, #112	@ 0x70
 8007abe:	a819      	add	r0, sp, #100	@ 0x64
 8007ac0:	f001 ff4a 	bl	8009958 <__hexnan>
 8007ac4:	2805      	cmp	r0, #5
 8007ac6:	d127      	bne.n	8007b18 <_strtod_l+0x380>
 8007ac8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007aca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007ace:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007ad2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007ad6:	e698      	b.n	800780a <_strtod_l+0x72>
 8007ad8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007ada:	fb08 2101 	mla	r1, r8, r1, r2
 8007ade:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007ae2:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ae4:	e7b5      	b.n	8007a52 <_strtod_l+0x2ba>
 8007ae6:	2a6e      	cmp	r2, #110	@ 0x6e
 8007ae8:	e7da      	b.n	8007aa0 <_strtod_l+0x308>
 8007aea:	498c      	ldr	r1, [pc, #560]	@ (8007d1c <_strtod_l+0x584>)
 8007aec:	a819      	add	r0, sp, #100	@ 0x64
 8007aee:	f001 ff1f 	bl	8009930 <__match>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	f43f aea4 	beq.w	8007840 <_strtod_l+0xa8>
 8007af8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007afa:	4989      	ldr	r1, [pc, #548]	@ (8007d20 <_strtod_l+0x588>)
 8007afc:	3b01      	subs	r3, #1
 8007afe:	a819      	add	r0, sp, #100	@ 0x64
 8007b00:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b02:	f001 ff15 	bl	8009930 <__match>
 8007b06:	b910      	cbnz	r0, 8007b0e <_strtod_l+0x376>
 8007b08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b0e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007d30 <_strtod_l+0x598>
 8007b12:	f04f 0a00 	mov.w	sl, #0
 8007b16:	e678      	b.n	800780a <_strtod_l+0x72>
 8007b18:	4882      	ldr	r0, [pc, #520]	@ (8007d24 <_strtod_l+0x58c>)
 8007b1a:	f001 fc45 	bl	80093a8 <nan>
 8007b1e:	ec5b ab10 	vmov	sl, fp, d0
 8007b22:	e672      	b.n	800780a <_strtod_l+0x72>
 8007b24:	eba8 0309 	sub.w	r3, r8, r9
 8007b28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b2c:	2f00      	cmp	r7, #0
 8007b2e:	bf08      	it	eq
 8007b30:	462f      	moveq	r7, r5
 8007b32:	2d10      	cmp	r5, #16
 8007b34:	462c      	mov	r4, r5
 8007b36:	bfa8      	it	ge
 8007b38:	2410      	movge	r4, #16
 8007b3a:	f7f8 fce3 	bl	8000504 <__aeabi_ui2d>
 8007b3e:	2d09      	cmp	r5, #9
 8007b40:	4682      	mov	sl, r0
 8007b42:	468b      	mov	fp, r1
 8007b44:	dc13      	bgt.n	8007b6e <_strtod_l+0x3d6>
 8007b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f43f ae5e 	beq.w	800780a <_strtod_l+0x72>
 8007b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b50:	dd78      	ble.n	8007c44 <_strtod_l+0x4ac>
 8007b52:	2b16      	cmp	r3, #22
 8007b54:	dc5f      	bgt.n	8007c16 <_strtod_l+0x47e>
 8007b56:	4974      	ldr	r1, [pc, #464]	@ (8007d28 <_strtod_l+0x590>)
 8007b58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b60:	4652      	mov	r2, sl
 8007b62:	465b      	mov	r3, fp
 8007b64:	f7f8 fd48 	bl	80005f8 <__aeabi_dmul>
 8007b68:	4682      	mov	sl, r0
 8007b6a:	468b      	mov	fp, r1
 8007b6c:	e64d      	b.n	800780a <_strtod_l+0x72>
 8007b6e:	4b6e      	ldr	r3, [pc, #440]	@ (8007d28 <_strtod_l+0x590>)
 8007b70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007b78:	f7f8 fd3e 	bl	80005f8 <__aeabi_dmul>
 8007b7c:	4682      	mov	sl, r0
 8007b7e:	9808      	ldr	r0, [sp, #32]
 8007b80:	468b      	mov	fp, r1
 8007b82:	f7f8 fcbf 	bl	8000504 <__aeabi_ui2d>
 8007b86:	4602      	mov	r2, r0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4650      	mov	r0, sl
 8007b8c:	4659      	mov	r1, fp
 8007b8e:	f7f8 fb7d 	bl	800028c <__adddf3>
 8007b92:	2d0f      	cmp	r5, #15
 8007b94:	4682      	mov	sl, r0
 8007b96:	468b      	mov	fp, r1
 8007b98:	ddd5      	ble.n	8007b46 <_strtod_l+0x3ae>
 8007b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b9c:	1b2c      	subs	r4, r5, r4
 8007b9e:	441c      	add	r4, r3
 8007ba0:	2c00      	cmp	r4, #0
 8007ba2:	f340 8096 	ble.w	8007cd2 <_strtod_l+0x53a>
 8007ba6:	f014 030f 	ands.w	r3, r4, #15
 8007baa:	d00a      	beq.n	8007bc2 <_strtod_l+0x42a>
 8007bac:	495e      	ldr	r1, [pc, #376]	@ (8007d28 <_strtod_l+0x590>)
 8007bae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007bb2:	4652      	mov	r2, sl
 8007bb4:	465b      	mov	r3, fp
 8007bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bba:	f7f8 fd1d 	bl	80005f8 <__aeabi_dmul>
 8007bbe:	4682      	mov	sl, r0
 8007bc0:	468b      	mov	fp, r1
 8007bc2:	f034 040f 	bics.w	r4, r4, #15
 8007bc6:	d073      	beq.n	8007cb0 <_strtod_l+0x518>
 8007bc8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007bcc:	dd48      	ble.n	8007c60 <_strtod_l+0x4c8>
 8007bce:	2400      	movs	r4, #0
 8007bd0:	46a0      	mov	r8, r4
 8007bd2:	940a      	str	r4, [sp, #40]	@ 0x28
 8007bd4:	46a1      	mov	r9, r4
 8007bd6:	9a05      	ldr	r2, [sp, #20]
 8007bd8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007d30 <_strtod_l+0x598>
 8007bdc:	2322      	movs	r3, #34	@ 0x22
 8007bde:	6013      	str	r3, [r2, #0]
 8007be0:	f04f 0a00 	mov.w	sl, #0
 8007be4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f43f ae0f 	beq.w	800780a <_strtod_l+0x72>
 8007bec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007bee:	9805      	ldr	r0, [sp, #20]
 8007bf0:	f7ff f942 	bl	8006e78 <_Bfree>
 8007bf4:	9805      	ldr	r0, [sp, #20]
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	f7ff f93e 	bl	8006e78 <_Bfree>
 8007bfc:	9805      	ldr	r0, [sp, #20]
 8007bfe:	4641      	mov	r1, r8
 8007c00:	f7ff f93a 	bl	8006e78 <_Bfree>
 8007c04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c06:	9805      	ldr	r0, [sp, #20]
 8007c08:	f7ff f936 	bl	8006e78 <_Bfree>
 8007c0c:	9805      	ldr	r0, [sp, #20]
 8007c0e:	4621      	mov	r1, r4
 8007c10:	f7ff f932 	bl	8006e78 <_Bfree>
 8007c14:	e5f9      	b.n	800780a <_strtod_l+0x72>
 8007c16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	dbbc      	blt.n	8007b9a <_strtod_l+0x402>
 8007c20:	4c41      	ldr	r4, [pc, #260]	@ (8007d28 <_strtod_l+0x590>)
 8007c22:	f1c5 050f 	rsb	r5, r5, #15
 8007c26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007c2a:	4652      	mov	r2, sl
 8007c2c:	465b      	mov	r3, fp
 8007c2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c32:	f7f8 fce1 	bl	80005f8 <__aeabi_dmul>
 8007c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c38:	1b5d      	subs	r5, r3, r5
 8007c3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007c3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007c42:	e78f      	b.n	8007b64 <_strtod_l+0x3cc>
 8007c44:	3316      	adds	r3, #22
 8007c46:	dba8      	blt.n	8007b9a <_strtod_l+0x402>
 8007c48:	4b37      	ldr	r3, [pc, #220]	@ (8007d28 <_strtod_l+0x590>)
 8007c4a:	eba9 0808 	sub.w	r8, r9, r8
 8007c4e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007c52:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007c56:	4650      	mov	r0, sl
 8007c58:	4659      	mov	r1, fp
 8007c5a:	f7f8 fdf7 	bl	800084c <__aeabi_ddiv>
 8007c5e:	e783      	b.n	8007b68 <_strtod_l+0x3d0>
 8007c60:	4b32      	ldr	r3, [pc, #200]	@ (8007d2c <_strtod_l+0x594>)
 8007c62:	9308      	str	r3, [sp, #32]
 8007c64:	2300      	movs	r3, #0
 8007c66:	1124      	asrs	r4, r4, #4
 8007c68:	4650      	mov	r0, sl
 8007c6a:	4659      	mov	r1, fp
 8007c6c:	461e      	mov	r6, r3
 8007c6e:	2c01      	cmp	r4, #1
 8007c70:	dc21      	bgt.n	8007cb6 <_strtod_l+0x51e>
 8007c72:	b10b      	cbz	r3, 8007c78 <_strtod_l+0x4e0>
 8007c74:	4682      	mov	sl, r0
 8007c76:	468b      	mov	fp, r1
 8007c78:	492c      	ldr	r1, [pc, #176]	@ (8007d2c <_strtod_l+0x594>)
 8007c7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007c7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007c82:	4652      	mov	r2, sl
 8007c84:	465b      	mov	r3, fp
 8007c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c8a:	f7f8 fcb5 	bl	80005f8 <__aeabi_dmul>
 8007c8e:	4b28      	ldr	r3, [pc, #160]	@ (8007d30 <_strtod_l+0x598>)
 8007c90:	460a      	mov	r2, r1
 8007c92:	400b      	ands	r3, r1
 8007c94:	4927      	ldr	r1, [pc, #156]	@ (8007d34 <_strtod_l+0x59c>)
 8007c96:	428b      	cmp	r3, r1
 8007c98:	4682      	mov	sl, r0
 8007c9a:	d898      	bhi.n	8007bce <_strtod_l+0x436>
 8007c9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007ca0:	428b      	cmp	r3, r1
 8007ca2:	bf86      	itte	hi
 8007ca4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007d38 <_strtod_l+0x5a0>
 8007ca8:	f04f 3aff 	movhi.w	sl, #4294967295
 8007cac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	9308      	str	r3, [sp, #32]
 8007cb4:	e07a      	b.n	8007dac <_strtod_l+0x614>
 8007cb6:	07e2      	lsls	r2, r4, #31
 8007cb8:	d505      	bpl.n	8007cc6 <_strtod_l+0x52e>
 8007cba:	9b08      	ldr	r3, [sp, #32]
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f7f8 fc9a 	bl	80005f8 <__aeabi_dmul>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	9a08      	ldr	r2, [sp, #32]
 8007cc8:	3208      	adds	r2, #8
 8007cca:	3601      	adds	r6, #1
 8007ccc:	1064      	asrs	r4, r4, #1
 8007cce:	9208      	str	r2, [sp, #32]
 8007cd0:	e7cd      	b.n	8007c6e <_strtod_l+0x4d6>
 8007cd2:	d0ed      	beq.n	8007cb0 <_strtod_l+0x518>
 8007cd4:	4264      	negs	r4, r4
 8007cd6:	f014 020f 	ands.w	r2, r4, #15
 8007cda:	d00a      	beq.n	8007cf2 <_strtod_l+0x55a>
 8007cdc:	4b12      	ldr	r3, [pc, #72]	@ (8007d28 <_strtod_l+0x590>)
 8007cde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ce2:	4650      	mov	r0, sl
 8007ce4:	4659      	mov	r1, fp
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f7f8 fdaf 	bl	800084c <__aeabi_ddiv>
 8007cee:	4682      	mov	sl, r0
 8007cf0:	468b      	mov	fp, r1
 8007cf2:	1124      	asrs	r4, r4, #4
 8007cf4:	d0dc      	beq.n	8007cb0 <_strtod_l+0x518>
 8007cf6:	2c1f      	cmp	r4, #31
 8007cf8:	dd20      	ble.n	8007d3c <_strtod_l+0x5a4>
 8007cfa:	2400      	movs	r4, #0
 8007cfc:	46a0      	mov	r8, r4
 8007cfe:	940a      	str	r4, [sp, #40]	@ 0x28
 8007d00:	46a1      	mov	r9, r4
 8007d02:	9a05      	ldr	r2, [sp, #20]
 8007d04:	2322      	movs	r3, #34	@ 0x22
 8007d06:	f04f 0a00 	mov.w	sl, #0
 8007d0a:	f04f 0b00 	mov.w	fp, #0
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	e768      	b.n	8007be4 <_strtod_l+0x44c>
 8007d12:	bf00      	nop
 8007d14:	08009ef5 	.word	0x08009ef5
 8007d18:	0800a10c 	.word	0x0800a10c
 8007d1c:	08009eed 	.word	0x08009eed
 8007d20:	08009f22 	.word	0x08009f22
 8007d24:	0800a2d0 	.word	0x0800a2d0
 8007d28:	0800a040 	.word	0x0800a040
 8007d2c:	0800a018 	.word	0x0800a018
 8007d30:	7ff00000 	.word	0x7ff00000
 8007d34:	7ca00000 	.word	0x7ca00000
 8007d38:	7fefffff 	.word	0x7fefffff
 8007d3c:	f014 0310 	ands.w	r3, r4, #16
 8007d40:	bf18      	it	ne
 8007d42:	236a      	movne	r3, #106	@ 0x6a
 8007d44:	4ea9      	ldr	r6, [pc, #676]	@ (8007fec <_strtod_l+0x854>)
 8007d46:	9308      	str	r3, [sp, #32]
 8007d48:	4650      	mov	r0, sl
 8007d4a:	4659      	mov	r1, fp
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	07e2      	lsls	r2, r4, #31
 8007d50:	d504      	bpl.n	8007d5c <_strtod_l+0x5c4>
 8007d52:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d56:	f7f8 fc4f 	bl	80005f8 <__aeabi_dmul>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	1064      	asrs	r4, r4, #1
 8007d5e:	f106 0608 	add.w	r6, r6, #8
 8007d62:	d1f4      	bne.n	8007d4e <_strtod_l+0x5b6>
 8007d64:	b10b      	cbz	r3, 8007d6a <_strtod_l+0x5d2>
 8007d66:	4682      	mov	sl, r0
 8007d68:	468b      	mov	fp, r1
 8007d6a:	9b08      	ldr	r3, [sp, #32]
 8007d6c:	b1b3      	cbz	r3, 8007d9c <_strtod_l+0x604>
 8007d6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007d72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	4659      	mov	r1, fp
 8007d7a:	dd0f      	ble.n	8007d9c <_strtod_l+0x604>
 8007d7c:	2b1f      	cmp	r3, #31
 8007d7e:	dd55      	ble.n	8007e2c <_strtod_l+0x694>
 8007d80:	2b34      	cmp	r3, #52	@ 0x34
 8007d82:	bfde      	ittt	le
 8007d84:	f04f 33ff 	movle.w	r3, #4294967295
 8007d88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007d8c:	4093      	lslle	r3, r2
 8007d8e:	f04f 0a00 	mov.w	sl, #0
 8007d92:	bfcc      	ite	gt
 8007d94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007d98:	ea03 0b01 	andle.w	fp, r3, r1
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2300      	movs	r3, #0
 8007da0:	4650      	mov	r0, sl
 8007da2:	4659      	mov	r1, fp
 8007da4:	f7f8 fe90 	bl	8000ac8 <__aeabi_dcmpeq>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d1a6      	bne.n	8007cfa <_strtod_l+0x562>
 8007dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007db2:	9805      	ldr	r0, [sp, #20]
 8007db4:	462b      	mov	r3, r5
 8007db6:	463a      	mov	r2, r7
 8007db8:	f7ff f8c6 	bl	8006f48 <__s2b>
 8007dbc:	900a      	str	r0, [sp, #40]	@ 0x28
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f43f af05 	beq.w	8007bce <_strtod_l+0x436>
 8007dc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dc6:	2a00      	cmp	r2, #0
 8007dc8:	eba9 0308 	sub.w	r3, r9, r8
 8007dcc:	bfa8      	it	ge
 8007dce:	2300      	movge	r3, #0
 8007dd0:	9312      	str	r3, [sp, #72]	@ 0x48
 8007dd2:	2400      	movs	r4, #0
 8007dd4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007dd8:	9316      	str	r3, [sp, #88]	@ 0x58
 8007dda:	46a0      	mov	r8, r4
 8007ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dde:	9805      	ldr	r0, [sp, #20]
 8007de0:	6859      	ldr	r1, [r3, #4]
 8007de2:	f7ff f809 	bl	8006df8 <_Balloc>
 8007de6:	4681      	mov	r9, r0
 8007de8:	2800      	cmp	r0, #0
 8007dea:	f43f aef4 	beq.w	8007bd6 <_strtod_l+0x43e>
 8007dee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007df0:	691a      	ldr	r2, [r3, #16]
 8007df2:	3202      	adds	r2, #2
 8007df4:	f103 010c 	add.w	r1, r3, #12
 8007df8:	0092      	lsls	r2, r2, #2
 8007dfa:	300c      	adds	r0, #12
 8007dfc:	f001 fac4 	bl	8009388 <memcpy>
 8007e00:	ec4b ab10 	vmov	d0, sl, fp
 8007e04:	9805      	ldr	r0, [sp, #20]
 8007e06:	aa1c      	add	r2, sp, #112	@ 0x70
 8007e08:	a91b      	add	r1, sp, #108	@ 0x6c
 8007e0a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007e0e:	f7ff fbd7 	bl	80075c0 <__d2b>
 8007e12:	901a      	str	r0, [sp, #104]	@ 0x68
 8007e14:	2800      	cmp	r0, #0
 8007e16:	f43f aede 	beq.w	8007bd6 <_strtod_l+0x43e>
 8007e1a:	9805      	ldr	r0, [sp, #20]
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	f7ff f929 	bl	8007074 <__i2b>
 8007e22:	4680      	mov	r8, r0
 8007e24:	b948      	cbnz	r0, 8007e3a <_strtod_l+0x6a2>
 8007e26:	f04f 0800 	mov.w	r8, #0
 8007e2a:	e6d4      	b.n	8007bd6 <_strtod_l+0x43e>
 8007e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e30:	fa02 f303 	lsl.w	r3, r2, r3
 8007e34:	ea03 0a0a 	and.w	sl, r3, sl
 8007e38:	e7b0      	b.n	8007d9c <_strtod_l+0x604>
 8007e3a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007e3c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007e3e:	2d00      	cmp	r5, #0
 8007e40:	bfab      	itete	ge
 8007e42:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007e44:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007e46:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007e48:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007e4a:	bfac      	ite	ge
 8007e4c:	18ef      	addge	r7, r5, r3
 8007e4e:	1b5e      	sublt	r6, r3, r5
 8007e50:	9b08      	ldr	r3, [sp, #32]
 8007e52:	1aed      	subs	r5, r5, r3
 8007e54:	4415      	add	r5, r2
 8007e56:	4b66      	ldr	r3, [pc, #408]	@ (8007ff0 <_strtod_l+0x858>)
 8007e58:	3d01      	subs	r5, #1
 8007e5a:	429d      	cmp	r5, r3
 8007e5c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007e60:	da50      	bge.n	8007f04 <_strtod_l+0x76c>
 8007e62:	1b5b      	subs	r3, r3, r5
 8007e64:	2b1f      	cmp	r3, #31
 8007e66:	eba2 0203 	sub.w	r2, r2, r3
 8007e6a:	f04f 0101 	mov.w	r1, #1
 8007e6e:	dc3d      	bgt.n	8007eec <_strtod_l+0x754>
 8007e70:	fa01 f303 	lsl.w	r3, r1, r3
 8007e74:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e76:	2300      	movs	r3, #0
 8007e78:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e7a:	18bd      	adds	r5, r7, r2
 8007e7c:	9b08      	ldr	r3, [sp, #32]
 8007e7e:	42af      	cmp	r7, r5
 8007e80:	4416      	add	r6, r2
 8007e82:	441e      	add	r6, r3
 8007e84:	463b      	mov	r3, r7
 8007e86:	bfa8      	it	ge
 8007e88:	462b      	movge	r3, r5
 8007e8a:	42b3      	cmp	r3, r6
 8007e8c:	bfa8      	it	ge
 8007e8e:	4633      	movge	r3, r6
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	bfc2      	ittt	gt
 8007e94:	1aed      	subgt	r5, r5, r3
 8007e96:	1af6      	subgt	r6, r6, r3
 8007e98:	1aff      	subgt	r7, r7, r3
 8007e9a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	dd16      	ble.n	8007ece <_strtod_l+0x736>
 8007ea0:	4641      	mov	r1, r8
 8007ea2:	9805      	ldr	r0, [sp, #20]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	f7ff f9a5 	bl	80071f4 <__pow5mult>
 8007eaa:	4680      	mov	r8, r0
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d0ba      	beq.n	8007e26 <_strtod_l+0x68e>
 8007eb0:	4601      	mov	r1, r0
 8007eb2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007eb4:	9805      	ldr	r0, [sp, #20]
 8007eb6:	f7ff f8f3 	bl	80070a0 <__multiply>
 8007eba:	900e      	str	r0, [sp, #56]	@ 0x38
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	f43f ae8a 	beq.w	8007bd6 <_strtod_l+0x43e>
 8007ec2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ec4:	9805      	ldr	r0, [sp, #20]
 8007ec6:	f7fe ffd7 	bl	8006e78 <_Bfree>
 8007eca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ecc:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ece:	2d00      	cmp	r5, #0
 8007ed0:	dc1d      	bgt.n	8007f0e <_strtod_l+0x776>
 8007ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	dd23      	ble.n	8007f20 <_strtod_l+0x788>
 8007ed8:	4649      	mov	r1, r9
 8007eda:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007edc:	9805      	ldr	r0, [sp, #20]
 8007ede:	f7ff f989 	bl	80071f4 <__pow5mult>
 8007ee2:	4681      	mov	r9, r0
 8007ee4:	b9e0      	cbnz	r0, 8007f20 <_strtod_l+0x788>
 8007ee6:	f04f 0900 	mov.w	r9, #0
 8007eea:	e674      	b.n	8007bd6 <_strtod_l+0x43e>
 8007eec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007ef0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007ef4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007ef8:	35e2      	adds	r5, #226	@ 0xe2
 8007efa:	fa01 f305 	lsl.w	r3, r1, r5
 8007efe:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f00:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007f02:	e7ba      	b.n	8007e7a <_strtod_l+0x6e2>
 8007f04:	2300      	movs	r3, #0
 8007f06:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f08:	2301      	movs	r3, #1
 8007f0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f0c:	e7b5      	b.n	8007e7a <_strtod_l+0x6e2>
 8007f0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f10:	9805      	ldr	r0, [sp, #20]
 8007f12:	462a      	mov	r2, r5
 8007f14:	f7ff f9c8 	bl	80072a8 <__lshift>
 8007f18:	901a      	str	r0, [sp, #104]	@ 0x68
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d1d9      	bne.n	8007ed2 <_strtod_l+0x73a>
 8007f1e:	e65a      	b.n	8007bd6 <_strtod_l+0x43e>
 8007f20:	2e00      	cmp	r6, #0
 8007f22:	dd07      	ble.n	8007f34 <_strtod_l+0x79c>
 8007f24:	4649      	mov	r1, r9
 8007f26:	9805      	ldr	r0, [sp, #20]
 8007f28:	4632      	mov	r2, r6
 8007f2a:	f7ff f9bd 	bl	80072a8 <__lshift>
 8007f2e:	4681      	mov	r9, r0
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d0d8      	beq.n	8007ee6 <_strtod_l+0x74e>
 8007f34:	2f00      	cmp	r7, #0
 8007f36:	dd08      	ble.n	8007f4a <_strtod_l+0x7b2>
 8007f38:	4641      	mov	r1, r8
 8007f3a:	9805      	ldr	r0, [sp, #20]
 8007f3c:	463a      	mov	r2, r7
 8007f3e:	f7ff f9b3 	bl	80072a8 <__lshift>
 8007f42:	4680      	mov	r8, r0
 8007f44:	2800      	cmp	r0, #0
 8007f46:	f43f ae46 	beq.w	8007bd6 <_strtod_l+0x43e>
 8007f4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f4c:	9805      	ldr	r0, [sp, #20]
 8007f4e:	464a      	mov	r2, r9
 8007f50:	f7ff fa32 	bl	80073b8 <__mdiff>
 8007f54:	4604      	mov	r4, r0
 8007f56:	2800      	cmp	r0, #0
 8007f58:	f43f ae3d 	beq.w	8007bd6 <_strtod_l+0x43e>
 8007f5c:	68c3      	ldr	r3, [r0, #12]
 8007f5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f60:	2300      	movs	r3, #0
 8007f62:	60c3      	str	r3, [r0, #12]
 8007f64:	4641      	mov	r1, r8
 8007f66:	f7ff fa0b 	bl	8007380 <__mcmp>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	da46      	bge.n	8007ffc <_strtod_l+0x864>
 8007f6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f70:	ea53 030a 	orrs.w	r3, r3, sl
 8007f74:	d16c      	bne.n	8008050 <_strtod_l+0x8b8>
 8007f76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d168      	bne.n	8008050 <_strtod_l+0x8b8>
 8007f7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007f82:	0d1b      	lsrs	r3, r3, #20
 8007f84:	051b      	lsls	r3, r3, #20
 8007f86:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007f8a:	d961      	bls.n	8008050 <_strtod_l+0x8b8>
 8007f8c:	6963      	ldr	r3, [r4, #20]
 8007f8e:	b913      	cbnz	r3, 8007f96 <_strtod_l+0x7fe>
 8007f90:	6923      	ldr	r3, [r4, #16]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	dd5c      	ble.n	8008050 <_strtod_l+0x8b8>
 8007f96:	4621      	mov	r1, r4
 8007f98:	2201      	movs	r2, #1
 8007f9a:	9805      	ldr	r0, [sp, #20]
 8007f9c:	f7ff f984 	bl	80072a8 <__lshift>
 8007fa0:	4641      	mov	r1, r8
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	f7ff f9ec 	bl	8007380 <__mcmp>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	dd51      	ble.n	8008050 <_strtod_l+0x8b8>
 8007fac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007fb0:	9a08      	ldr	r2, [sp, #32]
 8007fb2:	0d1b      	lsrs	r3, r3, #20
 8007fb4:	051b      	lsls	r3, r3, #20
 8007fb6:	2a00      	cmp	r2, #0
 8007fb8:	d06b      	beq.n	8008092 <_strtod_l+0x8fa>
 8007fba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007fbe:	d868      	bhi.n	8008092 <_strtod_l+0x8fa>
 8007fc0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007fc4:	f67f ae9d 	bls.w	8007d02 <_strtod_l+0x56a>
 8007fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ff4 <_strtod_l+0x85c>)
 8007fca:	4650      	mov	r0, sl
 8007fcc:	4659      	mov	r1, fp
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f7f8 fb12 	bl	80005f8 <__aeabi_dmul>
 8007fd4:	4b08      	ldr	r3, [pc, #32]	@ (8007ff8 <_strtod_l+0x860>)
 8007fd6:	400b      	ands	r3, r1
 8007fd8:	4682      	mov	sl, r0
 8007fda:	468b      	mov	fp, r1
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f47f ae05 	bne.w	8007bec <_strtod_l+0x454>
 8007fe2:	9a05      	ldr	r2, [sp, #20]
 8007fe4:	2322      	movs	r3, #34	@ 0x22
 8007fe6:	6013      	str	r3, [r2, #0]
 8007fe8:	e600      	b.n	8007bec <_strtod_l+0x454>
 8007fea:	bf00      	nop
 8007fec:	0800a138 	.word	0x0800a138
 8007ff0:	fffffc02 	.word	0xfffffc02
 8007ff4:	39500000 	.word	0x39500000
 8007ff8:	7ff00000 	.word	0x7ff00000
 8007ffc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008000:	d165      	bne.n	80080ce <_strtod_l+0x936>
 8008002:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008004:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008008:	b35a      	cbz	r2, 8008062 <_strtod_l+0x8ca>
 800800a:	4a9f      	ldr	r2, [pc, #636]	@ (8008288 <_strtod_l+0xaf0>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d12b      	bne.n	8008068 <_strtod_l+0x8d0>
 8008010:	9b08      	ldr	r3, [sp, #32]
 8008012:	4651      	mov	r1, sl
 8008014:	b303      	cbz	r3, 8008058 <_strtod_l+0x8c0>
 8008016:	4b9d      	ldr	r3, [pc, #628]	@ (800828c <_strtod_l+0xaf4>)
 8008018:	465a      	mov	r2, fp
 800801a:	4013      	ands	r3, r2
 800801c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008020:	f04f 32ff 	mov.w	r2, #4294967295
 8008024:	d81b      	bhi.n	800805e <_strtod_l+0x8c6>
 8008026:	0d1b      	lsrs	r3, r3, #20
 8008028:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800802c:	fa02 f303 	lsl.w	r3, r2, r3
 8008030:	4299      	cmp	r1, r3
 8008032:	d119      	bne.n	8008068 <_strtod_l+0x8d0>
 8008034:	4b96      	ldr	r3, [pc, #600]	@ (8008290 <_strtod_l+0xaf8>)
 8008036:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008038:	429a      	cmp	r2, r3
 800803a:	d102      	bne.n	8008042 <_strtod_l+0x8aa>
 800803c:	3101      	adds	r1, #1
 800803e:	f43f adca 	beq.w	8007bd6 <_strtod_l+0x43e>
 8008042:	4b92      	ldr	r3, [pc, #584]	@ (800828c <_strtod_l+0xaf4>)
 8008044:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008046:	401a      	ands	r2, r3
 8008048:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800804c:	f04f 0a00 	mov.w	sl, #0
 8008050:	9b08      	ldr	r3, [sp, #32]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1b8      	bne.n	8007fc8 <_strtod_l+0x830>
 8008056:	e5c9      	b.n	8007bec <_strtod_l+0x454>
 8008058:	f04f 33ff 	mov.w	r3, #4294967295
 800805c:	e7e8      	b.n	8008030 <_strtod_l+0x898>
 800805e:	4613      	mov	r3, r2
 8008060:	e7e6      	b.n	8008030 <_strtod_l+0x898>
 8008062:	ea53 030a 	orrs.w	r3, r3, sl
 8008066:	d0a1      	beq.n	8007fac <_strtod_l+0x814>
 8008068:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800806a:	b1db      	cbz	r3, 80080a4 <_strtod_l+0x90c>
 800806c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800806e:	4213      	tst	r3, r2
 8008070:	d0ee      	beq.n	8008050 <_strtod_l+0x8b8>
 8008072:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008074:	9a08      	ldr	r2, [sp, #32]
 8008076:	4650      	mov	r0, sl
 8008078:	4659      	mov	r1, fp
 800807a:	b1bb      	cbz	r3, 80080ac <_strtod_l+0x914>
 800807c:	f7ff fb6e 	bl	800775c <sulp>
 8008080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008084:	ec53 2b10 	vmov	r2, r3, d0
 8008088:	f7f8 f900 	bl	800028c <__adddf3>
 800808c:	4682      	mov	sl, r0
 800808e:	468b      	mov	fp, r1
 8008090:	e7de      	b.n	8008050 <_strtod_l+0x8b8>
 8008092:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008096:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800809a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800809e:	f04f 3aff 	mov.w	sl, #4294967295
 80080a2:	e7d5      	b.n	8008050 <_strtod_l+0x8b8>
 80080a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80080a6:	ea13 0f0a 	tst.w	r3, sl
 80080aa:	e7e1      	b.n	8008070 <_strtod_l+0x8d8>
 80080ac:	f7ff fb56 	bl	800775c <sulp>
 80080b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080b4:	ec53 2b10 	vmov	r2, r3, d0
 80080b8:	f7f8 f8e6 	bl	8000288 <__aeabi_dsub>
 80080bc:	2200      	movs	r2, #0
 80080be:	2300      	movs	r3, #0
 80080c0:	4682      	mov	sl, r0
 80080c2:	468b      	mov	fp, r1
 80080c4:	f7f8 fd00 	bl	8000ac8 <__aeabi_dcmpeq>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d0c1      	beq.n	8008050 <_strtod_l+0x8b8>
 80080cc:	e619      	b.n	8007d02 <_strtod_l+0x56a>
 80080ce:	4641      	mov	r1, r8
 80080d0:	4620      	mov	r0, r4
 80080d2:	f7ff facd 	bl	8007670 <__ratio>
 80080d6:	ec57 6b10 	vmov	r6, r7, d0
 80080da:	2200      	movs	r2, #0
 80080dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80080e0:	4630      	mov	r0, r6
 80080e2:	4639      	mov	r1, r7
 80080e4:	f7f8 fd04 	bl	8000af0 <__aeabi_dcmple>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d06f      	beq.n	80081cc <_strtod_l+0xa34>
 80080ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d17a      	bne.n	80081e8 <_strtod_l+0xa50>
 80080f2:	f1ba 0f00 	cmp.w	sl, #0
 80080f6:	d158      	bne.n	80081aa <_strtod_l+0xa12>
 80080f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d15a      	bne.n	80081b8 <_strtod_l+0xa20>
 8008102:	4b64      	ldr	r3, [pc, #400]	@ (8008294 <_strtod_l+0xafc>)
 8008104:	2200      	movs	r2, #0
 8008106:	4630      	mov	r0, r6
 8008108:	4639      	mov	r1, r7
 800810a:	f7f8 fce7 	bl	8000adc <__aeabi_dcmplt>
 800810e:	2800      	cmp	r0, #0
 8008110:	d159      	bne.n	80081c6 <_strtod_l+0xa2e>
 8008112:	4630      	mov	r0, r6
 8008114:	4639      	mov	r1, r7
 8008116:	4b60      	ldr	r3, [pc, #384]	@ (8008298 <_strtod_l+0xb00>)
 8008118:	2200      	movs	r2, #0
 800811a:	f7f8 fa6d 	bl	80005f8 <__aeabi_dmul>
 800811e:	4606      	mov	r6, r0
 8008120:	460f      	mov	r7, r1
 8008122:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008126:	9606      	str	r6, [sp, #24]
 8008128:	9307      	str	r3, [sp, #28]
 800812a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800812e:	4d57      	ldr	r5, [pc, #348]	@ (800828c <_strtod_l+0xaf4>)
 8008130:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008134:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008136:	401d      	ands	r5, r3
 8008138:	4b58      	ldr	r3, [pc, #352]	@ (800829c <_strtod_l+0xb04>)
 800813a:	429d      	cmp	r5, r3
 800813c:	f040 80b2 	bne.w	80082a4 <_strtod_l+0xb0c>
 8008140:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008142:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008146:	ec4b ab10 	vmov	d0, sl, fp
 800814a:	f7ff f9c9 	bl	80074e0 <__ulp>
 800814e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008152:	ec51 0b10 	vmov	r0, r1, d0
 8008156:	f7f8 fa4f 	bl	80005f8 <__aeabi_dmul>
 800815a:	4652      	mov	r2, sl
 800815c:	465b      	mov	r3, fp
 800815e:	f7f8 f895 	bl	800028c <__adddf3>
 8008162:	460b      	mov	r3, r1
 8008164:	4949      	ldr	r1, [pc, #292]	@ (800828c <_strtod_l+0xaf4>)
 8008166:	4a4e      	ldr	r2, [pc, #312]	@ (80082a0 <_strtod_l+0xb08>)
 8008168:	4019      	ands	r1, r3
 800816a:	4291      	cmp	r1, r2
 800816c:	4682      	mov	sl, r0
 800816e:	d942      	bls.n	80081f6 <_strtod_l+0xa5e>
 8008170:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008172:	4b47      	ldr	r3, [pc, #284]	@ (8008290 <_strtod_l+0xaf8>)
 8008174:	429a      	cmp	r2, r3
 8008176:	d103      	bne.n	8008180 <_strtod_l+0x9e8>
 8008178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800817a:	3301      	adds	r3, #1
 800817c:	f43f ad2b 	beq.w	8007bd6 <_strtod_l+0x43e>
 8008180:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008290 <_strtod_l+0xaf8>
 8008184:	f04f 3aff 	mov.w	sl, #4294967295
 8008188:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800818a:	9805      	ldr	r0, [sp, #20]
 800818c:	f7fe fe74 	bl	8006e78 <_Bfree>
 8008190:	9805      	ldr	r0, [sp, #20]
 8008192:	4649      	mov	r1, r9
 8008194:	f7fe fe70 	bl	8006e78 <_Bfree>
 8008198:	9805      	ldr	r0, [sp, #20]
 800819a:	4641      	mov	r1, r8
 800819c:	f7fe fe6c 	bl	8006e78 <_Bfree>
 80081a0:	9805      	ldr	r0, [sp, #20]
 80081a2:	4621      	mov	r1, r4
 80081a4:	f7fe fe68 	bl	8006e78 <_Bfree>
 80081a8:	e618      	b.n	8007ddc <_strtod_l+0x644>
 80081aa:	f1ba 0f01 	cmp.w	sl, #1
 80081ae:	d103      	bne.n	80081b8 <_strtod_l+0xa20>
 80081b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f43f ada5 	beq.w	8007d02 <_strtod_l+0x56a>
 80081b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008268 <_strtod_l+0xad0>
 80081bc:	4f35      	ldr	r7, [pc, #212]	@ (8008294 <_strtod_l+0xafc>)
 80081be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80081c2:	2600      	movs	r6, #0
 80081c4:	e7b1      	b.n	800812a <_strtod_l+0x992>
 80081c6:	4f34      	ldr	r7, [pc, #208]	@ (8008298 <_strtod_l+0xb00>)
 80081c8:	2600      	movs	r6, #0
 80081ca:	e7aa      	b.n	8008122 <_strtod_l+0x98a>
 80081cc:	4b32      	ldr	r3, [pc, #200]	@ (8008298 <_strtod_l+0xb00>)
 80081ce:	4630      	mov	r0, r6
 80081d0:	4639      	mov	r1, r7
 80081d2:	2200      	movs	r2, #0
 80081d4:	f7f8 fa10 	bl	80005f8 <__aeabi_dmul>
 80081d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081da:	4606      	mov	r6, r0
 80081dc:	460f      	mov	r7, r1
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d09f      	beq.n	8008122 <_strtod_l+0x98a>
 80081e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80081e6:	e7a0      	b.n	800812a <_strtod_l+0x992>
 80081e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008270 <_strtod_l+0xad8>
 80081ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80081f0:	ec57 6b17 	vmov	r6, r7, d7
 80081f4:	e799      	b.n	800812a <_strtod_l+0x992>
 80081f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80081fa:	9b08      	ldr	r3, [sp, #32]
 80081fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1c1      	bne.n	8008188 <_strtod_l+0x9f0>
 8008204:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008208:	0d1b      	lsrs	r3, r3, #20
 800820a:	051b      	lsls	r3, r3, #20
 800820c:	429d      	cmp	r5, r3
 800820e:	d1bb      	bne.n	8008188 <_strtod_l+0x9f0>
 8008210:	4630      	mov	r0, r6
 8008212:	4639      	mov	r1, r7
 8008214:	f7f8 fd50 	bl	8000cb8 <__aeabi_d2lz>
 8008218:	f7f8 f9c0 	bl	800059c <__aeabi_l2d>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4630      	mov	r0, r6
 8008222:	4639      	mov	r1, r7
 8008224:	f7f8 f830 	bl	8000288 <__aeabi_dsub>
 8008228:	460b      	mov	r3, r1
 800822a:	4602      	mov	r2, r0
 800822c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008230:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008236:	ea46 060a 	orr.w	r6, r6, sl
 800823a:	431e      	orrs	r6, r3
 800823c:	d06f      	beq.n	800831e <_strtod_l+0xb86>
 800823e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008278 <_strtod_l+0xae0>)
 8008240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008244:	f7f8 fc4a 	bl	8000adc <__aeabi_dcmplt>
 8008248:	2800      	cmp	r0, #0
 800824a:	f47f accf 	bne.w	8007bec <_strtod_l+0x454>
 800824e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008280 <_strtod_l+0xae8>)
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008258:	f7f8 fc5e 	bl	8000b18 <__aeabi_dcmpgt>
 800825c:	2800      	cmp	r0, #0
 800825e:	d093      	beq.n	8008188 <_strtod_l+0x9f0>
 8008260:	e4c4      	b.n	8007bec <_strtod_l+0x454>
 8008262:	bf00      	nop
 8008264:	f3af 8000 	nop.w
 8008268:	00000000 	.word	0x00000000
 800826c:	bff00000 	.word	0xbff00000
 8008270:	00000000 	.word	0x00000000
 8008274:	3ff00000 	.word	0x3ff00000
 8008278:	94a03595 	.word	0x94a03595
 800827c:	3fdfffff 	.word	0x3fdfffff
 8008280:	35afe535 	.word	0x35afe535
 8008284:	3fe00000 	.word	0x3fe00000
 8008288:	000fffff 	.word	0x000fffff
 800828c:	7ff00000 	.word	0x7ff00000
 8008290:	7fefffff 	.word	0x7fefffff
 8008294:	3ff00000 	.word	0x3ff00000
 8008298:	3fe00000 	.word	0x3fe00000
 800829c:	7fe00000 	.word	0x7fe00000
 80082a0:	7c9fffff 	.word	0x7c9fffff
 80082a4:	9b08      	ldr	r3, [sp, #32]
 80082a6:	b323      	cbz	r3, 80082f2 <_strtod_l+0xb5a>
 80082a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80082ac:	d821      	bhi.n	80082f2 <_strtod_l+0xb5a>
 80082ae:	a328      	add	r3, pc, #160	@ (adr r3, 8008350 <_strtod_l+0xbb8>)
 80082b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b4:	4630      	mov	r0, r6
 80082b6:	4639      	mov	r1, r7
 80082b8:	f7f8 fc1a 	bl	8000af0 <__aeabi_dcmple>
 80082bc:	b1a0      	cbz	r0, 80082e8 <_strtod_l+0xb50>
 80082be:	4639      	mov	r1, r7
 80082c0:	4630      	mov	r0, r6
 80082c2:	f7f8 fc71 	bl	8000ba8 <__aeabi_d2uiz>
 80082c6:	2801      	cmp	r0, #1
 80082c8:	bf38      	it	cc
 80082ca:	2001      	movcc	r0, #1
 80082cc:	f7f8 f91a 	bl	8000504 <__aeabi_ui2d>
 80082d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082d2:	4606      	mov	r6, r0
 80082d4:	460f      	mov	r7, r1
 80082d6:	b9fb      	cbnz	r3, 8008318 <_strtod_l+0xb80>
 80082d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082dc:	9014      	str	r0, [sp, #80]	@ 0x50
 80082de:	9315      	str	r3, [sp, #84]	@ 0x54
 80082e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80082e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80082e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80082ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80082ee:	1b5b      	subs	r3, r3, r5
 80082f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80082f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80082f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80082fa:	f7ff f8f1 	bl	80074e0 <__ulp>
 80082fe:	4650      	mov	r0, sl
 8008300:	ec53 2b10 	vmov	r2, r3, d0
 8008304:	4659      	mov	r1, fp
 8008306:	f7f8 f977 	bl	80005f8 <__aeabi_dmul>
 800830a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800830e:	f7f7 ffbd 	bl	800028c <__adddf3>
 8008312:	4682      	mov	sl, r0
 8008314:	468b      	mov	fp, r1
 8008316:	e770      	b.n	80081fa <_strtod_l+0xa62>
 8008318:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800831c:	e7e0      	b.n	80082e0 <_strtod_l+0xb48>
 800831e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008358 <_strtod_l+0xbc0>)
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	f7f8 fbda 	bl	8000adc <__aeabi_dcmplt>
 8008328:	e798      	b.n	800825c <_strtod_l+0xac4>
 800832a:	2300      	movs	r3, #0
 800832c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800832e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008330:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008332:	6013      	str	r3, [r2, #0]
 8008334:	f7ff ba6d 	b.w	8007812 <_strtod_l+0x7a>
 8008338:	2a65      	cmp	r2, #101	@ 0x65
 800833a:	f43f ab66 	beq.w	8007a0a <_strtod_l+0x272>
 800833e:	2a45      	cmp	r2, #69	@ 0x45
 8008340:	f43f ab63 	beq.w	8007a0a <_strtod_l+0x272>
 8008344:	2301      	movs	r3, #1
 8008346:	f7ff bb9e 	b.w	8007a86 <_strtod_l+0x2ee>
 800834a:	bf00      	nop
 800834c:	f3af 8000 	nop.w
 8008350:	ffc00000 	.word	0xffc00000
 8008354:	41dfffff 	.word	0x41dfffff
 8008358:	94a03595 	.word	0x94a03595
 800835c:	3fcfffff 	.word	0x3fcfffff

08008360 <_strtod_r>:
 8008360:	4b01      	ldr	r3, [pc, #4]	@ (8008368 <_strtod_r+0x8>)
 8008362:	f7ff ba19 	b.w	8007798 <_strtod_l>
 8008366:	bf00      	nop
 8008368:	2000007c 	.word	0x2000007c

0800836c <_strtol_l.constprop.0>:
 800836c:	2b24      	cmp	r3, #36	@ 0x24
 800836e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008372:	4686      	mov	lr, r0
 8008374:	4690      	mov	r8, r2
 8008376:	d801      	bhi.n	800837c <_strtol_l.constprop.0+0x10>
 8008378:	2b01      	cmp	r3, #1
 800837a:	d106      	bne.n	800838a <_strtol_l.constprop.0+0x1e>
 800837c:	f7fd fdba 	bl	8005ef4 <__errno>
 8008380:	2316      	movs	r3, #22
 8008382:	6003      	str	r3, [r0, #0]
 8008384:	2000      	movs	r0, #0
 8008386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800838a:	4834      	ldr	r0, [pc, #208]	@ (800845c <_strtol_l.constprop.0+0xf0>)
 800838c:	460d      	mov	r5, r1
 800838e:	462a      	mov	r2, r5
 8008390:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008394:	5d06      	ldrb	r6, [r0, r4]
 8008396:	f016 0608 	ands.w	r6, r6, #8
 800839a:	d1f8      	bne.n	800838e <_strtol_l.constprop.0+0x22>
 800839c:	2c2d      	cmp	r4, #45	@ 0x2d
 800839e:	d12d      	bne.n	80083fc <_strtol_l.constprop.0+0x90>
 80083a0:	782c      	ldrb	r4, [r5, #0]
 80083a2:	2601      	movs	r6, #1
 80083a4:	1c95      	adds	r5, r2, #2
 80083a6:	f033 0210 	bics.w	r2, r3, #16
 80083aa:	d109      	bne.n	80083c0 <_strtol_l.constprop.0+0x54>
 80083ac:	2c30      	cmp	r4, #48	@ 0x30
 80083ae:	d12a      	bne.n	8008406 <_strtol_l.constprop.0+0x9a>
 80083b0:	782a      	ldrb	r2, [r5, #0]
 80083b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80083b6:	2a58      	cmp	r2, #88	@ 0x58
 80083b8:	d125      	bne.n	8008406 <_strtol_l.constprop.0+0x9a>
 80083ba:	786c      	ldrb	r4, [r5, #1]
 80083bc:	2310      	movs	r3, #16
 80083be:	3502      	adds	r5, #2
 80083c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80083c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80083c8:	2200      	movs	r2, #0
 80083ca:	fbbc f9f3 	udiv	r9, ip, r3
 80083ce:	4610      	mov	r0, r2
 80083d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80083d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80083d8:	2f09      	cmp	r7, #9
 80083da:	d81b      	bhi.n	8008414 <_strtol_l.constprop.0+0xa8>
 80083dc:	463c      	mov	r4, r7
 80083de:	42a3      	cmp	r3, r4
 80083e0:	dd27      	ble.n	8008432 <_strtol_l.constprop.0+0xc6>
 80083e2:	1c57      	adds	r7, r2, #1
 80083e4:	d007      	beq.n	80083f6 <_strtol_l.constprop.0+0x8a>
 80083e6:	4581      	cmp	r9, r0
 80083e8:	d320      	bcc.n	800842c <_strtol_l.constprop.0+0xc0>
 80083ea:	d101      	bne.n	80083f0 <_strtol_l.constprop.0+0x84>
 80083ec:	45a2      	cmp	sl, r4
 80083ee:	db1d      	blt.n	800842c <_strtol_l.constprop.0+0xc0>
 80083f0:	fb00 4003 	mla	r0, r0, r3, r4
 80083f4:	2201      	movs	r2, #1
 80083f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083fa:	e7eb      	b.n	80083d4 <_strtol_l.constprop.0+0x68>
 80083fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80083fe:	bf04      	itt	eq
 8008400:	782c      	ldrbeq	r4, [r5, #0]
 8008402:	1c95      	addeq	r5, r2, #2
 8008404:	e7cf      	b.n	80083a6 <_strtol_l.constprop.0+0x3a>
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1da      	bne.n	80083c0 <_strtol_l.constprop.0+0x54>
 800840a:	2c30      	cmp	r4, #48	@ 0x30
 800840c:	bf0c      	ite	eq
 800840e:	2308      	moveq	r3, #8
 8008410:	230a      	movne	r3, #10
 8008412:	e7d5      	b.n	80083c0 <_strtol_l.constprop.0+0x54>
 8008414:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008418:	2f19      	cmp	r7, #25
 800841a:	d801      	bhi.n	8008420 <_strtol_l.constprop.0+0xb4>
 800841c:	3c37      	subs	r4, #55	@ 0x37
 800841e:	e7de      	b.n	80083de <_strtol_l.constprop.0+0x72>
 8008420:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008424:	2f19      	cmp	r7, #25
 8008426:	d804      	bhi.n	8008432 <_strtol_l.constprop.0+0xc6>
 8008428:	3c57      	subs	r4, #87	@ 0x57
 800842a:	e7d8      	b.n	80083de <_strtol_l.constprop.0+0x72>
 800842c:	f04f 32ff 	mov.w	r2, #4294967295
 8008430:	e7e1      	b.n	80083f6 <_strtol_l.constprop.0+0x8a>
 8008432:	1c53      	adds	r3, r2, #1
 8008434:	d108      	bne.n	8008448 <_strtol_l.constprop.0+0xdc>
 8008436:	2322      	movs	r3, #34	@ 0x22
 8008438:	f8ce 3000 	str.w	r3, [lr]
 800843c:	4660      	mov	r0, ip
 800843e:	f1b8 0f00 	cmp.w	r8, #0
 8008442:	d0a0      	beq.n	8008386 <_strtol_l.constprop.0+0x1a>
 8008444:	1e69      	subs	r1, r5, #1
 8008446:	e006      	b.n	8008456 <_strtol_l.constprop.0+0xea>
 8008448:	b106      	cbz	r6, 800844c <_strtol_l.constprop.0+0xe0>
 800844a:	4240      	negs	r0, r0
 800844c:	f1b8 0f00 	cmp.w	r8, #0
 8008450:	d099      	beq.n	8008386 <_strtol_l.constprop.0+0x1a>
 8008452:	2a00      	cmp	r2, #0
 8008454:	d1f6      	bne.n	8008444 <_strtol_l.constprop.0+0xd8>
 8008456:	f8c8 1000 	str.w	r1, [r8]
 800845a:	e794      	b.n	8008386 <_strtol_l.constprop.0+0x1a>
 800845c:	0800a161 	.word	0x0800a161

08008460 <_strtol_r>:
 8008460:	f7ff bf84 	b.w	800836c <_strtol_l.constprop.0>

08008464 <__ssputs_r>:
 8008464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008468:	688e      	ldr	r6, [r1, #8]
 800846a:	461f      	mov	r7, r3
 800846c:	42be      	cmp	r6, r7
 800846e:	680b      	ldr	r3, [r1, #0]
 8008470:	4682      	mov	sl, r0
 8008472:	460c      	mov	r4, r1
 8008474:	4690      	mov	r8, r2
 8008476:	d82d      	bhi.n	80084d4 <__ssputs_r+0x70>
 8008478:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800847c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008480:	d026      	beq.n	80084d0 <__ssputs_r+0x6c>
 8008482:	6965      	ldr	r5, [r4, #20]
 8008484:	6909      	ldr	r1, [r1, #16]
 8008486:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800848a:	eba3 0901 	sub.w	r9, r3, r1
 800848e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008492:	1c7b      	adds	r3, r7, #1
 8008494:	444b      	add	r3, r9
 8008496:	106d      	asrs	r5, r5, #1
 8008498:	429d      	cmp	r5, r3
 800849a:	bf38      	it	cc
 800849c:	461d      	movcc	r5, r3
 800849e:	0553      	lsls	r3, r2, #21
 80084a0:	d527      	bpl.n	80084f2 <__ssputs_r+0x8e>
 80084a2:	4629      	mov	r1, r5
 80084a4:	f7fe fc1c 	bl	8006ce0 <_malloc_r>
 80084a8:	4606      	mov	r6, r0
 80084aa:	b360      	cbz	r0, 8008506 <__ssputs_r+0xa2>
 80084ac:	6921      	ldr	r1, [r4, #16]
 80084ae:	464a      	mov	r2, r9
 80084b0:	f000 ff6a 	bl	8009388 <memcpy>
 80084b4:	89a3      	ldrh	r3, [r4, #12]
 80084b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80084ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084be:	81a3      	strh	r3, [r4, #12]
 80084c0:	6126      	str	r6, [r4, #16]
 80084c2:	6165      	str	r5, [r4, #20]
 80084c4:	444e      	add	r6, r9
 80084c6:	eba5 0509 	sub.w	r5, r5, r9
 80084ca:	6026      	str	r6, [r4, #0]
 80084cc:	60a5      	str	r5, [r4, #8]
 80084ce:	463e      	mov	r6, r7
 80084d0:	42be      	cmp	r6, r7
 80084d2:	d900      	bls.n	80084d6 <__ssputs_r+0x72>
 80084d4:	463e      	mov	r6, r7
 80084d6:	6820      	ldr	r0, [r4, #0]
 80084d8:	4632      	mov	r2, r6
 80084da:	4641      	mov	r1, r8
 80084dc:	f000 ff2a 	bl	8009334 <memmove>
 80084e0:	68a3      	ldr	r3, [r4, #8]
 80084e2:	1b9b      	subs	r3, r3, r6
 80084e4:	60a3      	str	r3, [r4, #8]
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	4433      	add	r3, r6
 80084ea:	6023      	str	r3, [r4, #0]
 80084ec:	2000      	movs	r0, #0
 80084ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f2:	462a      	mov	r2, r5
 80084f4:	f001 fadd 	bl	8009ab2 <_realloc_r>
 80084f8:	4606      	mov	r6, r0
 80084fa:	2800      	cmp	r0, #0
 80084fc:	d1e0      	bne.n	80084c0 <__ssputs_r+0x5c>
 80084fe:	6921      	ldr	r1, [r4, #16]
 8008500:	4650      	mov	r0, sl
 8008502:	f7fe fb79 	bl	8006bf8 <_free_r>
 8008506:	230c      	movs	r3, #12
 8008508:	f8ca 3000 	str.w	r3, [sl]
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008512:	81a3      	strh	r3, [r4, #12]
 8008514:	f04f 30ff 	mov.w	r0, #4294967295
 8008518:	e7e9      	b.n	80084ee <__ssputs_r+0x8a>
	...

0800851c <_svfiprintf_r>:
 800851c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008520:	4698      	mov	r8, r3
 8008522:	898b      	ldrh	r3, [r1, #12]
 8008524:	061b      	lsls	r3, r3, #24
 8008526:	b09d      	sub	sp, #116	@ 0x74
 8008528:	4607      	mov	r7, r0
 800852a:	460d      	mov	r5, r1
 800852c:	4614      	mov	r4, r2
 800852e:	d510      	bpl.n	8008552 <_svfiprintf_r+0x36>
 8008530:	690b      	ldr	r3, [r1, #16]
 8008532:	b973      	cbnz	r3, 8008552 <_svfiprintf_r+0x36>
 8008534:	2140      	movs	r1, #64	@ 0x40
 8008536:	f7fe fbd3 	bl	8006ce0 <_malloc_r>
 800853a:	6028      	str	r0, [r5, #0]
 800853c:	6128      	str	r0, [r5, #16]
 800853e:	b930      	cbnz	r0, 800854e <_svfiprintf_r+0x32>
 8008540:	230c      	movs	r3, #12
 8008542:	603b      	str	r3, [r7, #0]
 8008544:	f04f 30ff 	mov.w	r0, #4294967295
 8008548:	b01d      	add	sp, #116	@ 0x74
 800854a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854e:	2340      	movs	r3, #64	@ 0x40
 8008550:	616b      	str	r3, [r5, #20]
 8008552:	2300      	movs	r3, #0
 8008554:	9309      	str	r3, [sp, #36]	@ 0x24
 8008556:	2320      	movs	r3, #32
 8008558:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800855c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008560:	2330      	movs	r3, #48	@ 0x30
 8008562:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008700 <_svfiprintf_r+0x1e4>
 8008566:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800856a:	f04f 0901 	mov.w	r9, #1
 800856e:	4623      	mov	r3, r4
 8008570:	469a      	mov	sl, r3
 8008572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008576:	b10a      	cbz	r2, 800857c <_svfiprintf_r+0x60>
 8008578:	2a25      	cmp	r2, #37	@ 0x25
 800857a:	d1f9      	bne.n	8008570 <_svfiprintf_r+0x54>
 800857c:	ebba 0b04 	subs.w	fp, sl, r4
 8008580:	d00b      	beq.n	800859a <_svfiprintf_r+0x7e>
 8008582:	465b      	mov	r3, fp
 8008584:	4622      	mov	r2, r4
 8008586:	4629      	mov	r1, r5
 8008588:	4638      	mov	r0, r7
 800858a:	f7ff ff6b 	bl	8008464 <__ssputs_r>
 800858e:	3001      	adds	r0, #1
 8008590:	f000 80a7 	beq.w	80086e2 <_svfiprintf_r+0x1c6>
 8008594:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008596:	445a      	add	r2, fp
 8008598:	9209      	str	r2, [sp, #36]	@ 0x24
 800859a:	f89a 3000 	ldrb.w	r3, [sl]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 809f 	beq.w	80086e2 <_svfiprintf_r+0x1c6>
 80085a4:	2300      	movs	r3, #0
 80085a6:	f04f 32ff 	mov.w	r2, #4294967295
 80085aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085ae:	f10a 0a01 	add.w	sl, sl, #1
 80085b2:	9304      	str	r3, [sp, #16]
 80085b4:	9307      	str	r3, [sp, #28]
 80085b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80085bc:	4654      	mov	r4, sl
 80085be:	2205      	movs	r2, #5
 80085c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085c4:	484e      	ldr	r0, [pc, #312]	@ (8008700 <_svfiprintf_r+0x1e4>)
 80085c6:	f7f7 fe03 	bl	80001d0 <memchr>
 80085ca:	9a04      	ldr	r2, [sp, #16]
 80085cc:	b9d8      	cbnz	r0, 8008606 <_svfiprintf_r+0xea>
 80085ce:	06d0      	lsls	r0, r2, #27
 80085d0:	bf44      	itt	mi
 80085d2:	2320      	movmi	r3, #32
 80085d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085d8:	0711      	lsls	r1, r2, #28
 80085da:	bf44      	itt	mi
 80085dc:	232b      	movmi	r3, #43	@ 0x2b
 80085de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085e2:	f89a 3000 	ldrb.w	r3, [sl]
 80085e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80085e8:	d015      	beq.n	8008616 <_svfiprintf_r+0xfa>
 80085ea:	9a07      	ldr	r2, [sp, #28]
 80085ec:	4654      	mov	r4, sl
 80085ee:	2000      	movs	r0, #0
 80085f0:	f04f 0c0a 	mov.w	ip, #10
 80085f4:	4621      	mov	r1, r4
 80085f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085fa:	3b30      	subs	r3, #48	@ 0x30
 80085fc:	2b09      	cmp	r3, #9
 80085fe:	d94b      	bls.n	8008698 <_svfiprintf_r+0x17c>
 8008600:	b1b0      	cbz	r0, 8008630 <_svfiprintf_r+0x114>
 8008602:	9207      	str	r2, [sp, #28]
 8008604:	e014      	b.n	8008630 <_svfiprintf_r+0x114>
 8008606:	eba0 0308 	sub.w	r3, r0, r8
 800860a:	fa09 f303 	lsl.w	r3, r9, r3
 800860e:	4313      	orrs	r3, r2
 8008610:	9304      	str	r3, [sp, #16]
 8008612:	46a2      	mov	sl, r4
 8008614:	e7d2      	b.n	80085bc <_svfiprintf_r+0xa0>
 8008616:	9b03      	ldr	r3, [sp, #12]
 8008618:	1d19      	adds	r1, r3, #4
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	9103      	str	r1, [sp, #12]
 800861e:	2b00      	cmp	r3, #0
 8008620:	bfbb      	ittet	lt
 8008622:	425b      	neglt	r3, r3
 8008624:	f042 0202 	orrlt.w	r2, r2, #2
 8008628:	9307      	strge	r3, [sp, #28]
 800862a:	9307      	strlt	r3, [sp, #28]
 800862c:	bfb8      	it	lt
 800862e:	9204      	strlt	r2, [sp, #16]
 8008630:	7823      	ldrb	r3, [r4, #0]
 8008632:	2b2e      	cmp	r3, #46	@ 0x2e
 8008634:	d10a      	bne.n	800864c <_svfiprintf_r+0x130>
 8008636:	7863      	ldrb	r3, [r4, #1]
 8008638:	2b2a      	cmp	r3, #42	@ 0x2a
 800863a:	d132      	bne.n	80086a2 <_svfiprintf_r+0x186>
 800863c:	9b03      	ldr	r3, [sp, #12]
 800863e:	1d1a      	adds	r2, r3, #4
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	9203      	str	r2, [sp, #12]
 8008644:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008648:	3402      	adds	r4, #2
 800864a:	9305      	str	r3, [sp, #20]
 800864c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008710 <_svfiprintf_r+0x1f4>
 8008650:	7821      	ldrb	r1, [r4, #0]
 8008652:	2203      	movs	r2, #3
 8008654:	4650      	mov	r0, sl
 8008656:	f7f7 fdbb 	bl	80001d0 <memchr>
 800865a:	b138      	cbz	r0, 800866c <_svfiprintf_r+0x150>
 800865c:	9b04      	ldr	r3, [sp, #16]
 800865e:	eba0 000a 	sub.w	r0, r0, sl
 8008662:	2240      	movs	r2, #64	@ 0x40
 8008664:	4082      	lsls	r2, r0
 8008666:	4313      	orrs	r3, r2
 8008668:	3401      	adds	r4, #1
 800866a:	9304      	str	r3, [sp, #16]
 800866c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008670:	4824      	ldr	r0, [pc, #144]	@ (8008704 <_svfiprintf_r+0x1e8>)
 8008672:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008676:	2206      	movs	r2, #6
 8008678:	f7f7 fdaa 	bl	80001d0 <memchr>
 800867c:	2800      	cmp	r0, #0
 800867e:	d036      	beq.n	80086ee <_svfiprintf_r+0x1d2>
 8008680:	4b21      	ldr	r3, [pc, #132]	@ (8008708 <_svfiprintf_r+0x1ec>)
 8008682:	bb1b      	cbnz	r3, 80086cc <_svfiprintf_r+0x1b0>
 8008684:	9b03      	ldr	r3, [sp, #12]
 8008686:	3307      	adds	r3, #7
 8008688:	f023 0307 	bic.w	r3, r3, #7
 800868c:	3308      	adds	r3, #8
 800868e:	9303      	str	r3, [sp, #12]
 8008690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008692:	4433      	add	r3, r6
 8008694:	9309      	str	r3, [sp, #36]	@ 0x24
 8008696:	e76a      	b.n	800856e <_svfiprintf_r+0x52>
 8008698:	fb0c 3202 	mla	r2, ip, r2, r3
 800869c:	460c      	mov	r4, r1
 800869e:	2001      	movs	r0, #1
 80086a0:	e7a8      	b.n	80085f4 <_svfiprintf_r+0xd8>
 80086a2:	2300      	movs	r3, #0
 80086a4:	3401      	adds	r4, #1
 80086a6:	9305      	str	r3, [sp, #20]
 80086a8:	4619      	mov	r1, r3
 80086aa:	f04f 0c0a 	mov.w	ip, #10
 80086ae:	4620      	mov	r0, r4
 80086b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086b4:	3a30      	subs	r2, #48	@ 0x30
 80086b6:	2a09      	cmp	r2, #9
 80086b8:	d903      	bls.n	80086c2 <_svfiprintf_r+0x1a6>
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d0c6      	beq.n	800864c <_svfiprintf_r+0x130>
 80086be:	9105      	str	r1, [sp, #20]
 80086c0:	e7c4      	b.n	800864c <_svfiprintf_r+0x130>
 80086c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80086c6:	4604      	mov	r4, r0
 80086c8:	2301      	movs	r3, #1
 80086ca:	e7f0      	b.n	80086ae <_svfiprintf_r+0x192>
 80086cc:	ab03      	add	r3, sp, #12
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	462a      	mov	r2, r5
 80086d2:	4b0e      	ldr	r3, [pc, #56]	@ (800870c <_svfiprintf_r+0x1f0>)
 80086d4:	a904      	add	r1, sp, #16
 80086d6:	4638      	mov	r0, r7
 80086d8:	f7fc fc78 	bl	8004fcc <_printf_float>
 80086dc:	1c42      	adds	r2, r0, #1
 80086de:	4606      	mov	r6, r0
 80086e0:	d1d6      	bne.n	8008690 <_svfiprintf_r+0x174>
 80086e2:	89ab      	ldrh	r3, [r5, #12]
 80086e4:	065b      	lsls	r3, r3, #25
 80086e6:	f53f af2d 	bmi.w	8008544 <_svfiprintf_r+0x28>
 80086ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086ec:	e72c      	b.n	8008548 <_svfiprintf_r+0x2c>
 80086ee:	ab03      	add	r3, sp, #12
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	462a      	mov	r2, r5
 80086f4:	4b05      	ldr	r3, [pc, #20]	@ (800870c <_svfiprintf_r+0x1f0>)
 80086f6:	a904      	add	r1, sp, #16
 80086f8:	4638      	mov	r0, r7
 80086fa:	f7fc feff 	bl	80054fc <_printf_i>
 80086fe:	e7ed      	b.n	80086dc <_svfiprintf_r+0x1c0>
 8008700:	0800a261 	.word	0x0800a261
 8008704:	0800a26b 	.word	0x0800a26b
 8008708:	08004fcd 	.word	0x08004fcd
 800870c:	08008465 	.word	0x08008465
 8008710:	0800a267 	.word	0x0800a267

08008714 <_sungetc_r>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	1c4b      	adds	r3, r1, #1
 8008718:	4614      	mov	r4, r2
 800871a:	d103      	bne.n	8008724 <_sungetc_r+0x10>
 800871c:	f04f 35ff 	mov.w	r5, #4294967295
 8008720:	4628      	mov	r0, r5
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	8993      	ldrh	r3, [r2, #12]
 8008726:	f023 0320 	bic.w	r3, r3, #32
 800872a:	8193      	strh	r3, [r2, #12]
 800872c:	6853      	ldr	r3, [r2, #4]
 800872e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008730:	b2cd      	uxtb	r5, r1
 8008732:	b18a      	cbz	r2, 8008758 <_sungetc_r+0x44>
 8008734:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008736:	429a      	cmp	r2, r3
 8008738:	dd08      	ble.n	800874c <_sungetc_r+0x38>
 800873a:	6823      	ldr	r3, [r4, #0]
 800873c:	1e5a      	subs	r2, r3, #1
 800873e:	6022      	str	r2, [r4, #0]
 8008740:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008744:	6863      	ldr	r3, [r4, #4]
 8008746:	3301      	adds	r3, #1
 8008748:	6063      	str	r3, [r4, #4]
 800874a:	e7e9      	b.n	8008720 <_sungetc_r+0xc>
 800874c:	4621      	mov	r1, r4
 800874e:	f000 fd22 	bl	8009196 <__submore>
 8008752:	2800      	cmp	r0, #0
 8008754:	d0f1      	beq.n	800873a <_sungetc_r+0x26>
 8008756:	e7e1      	b.n	800871c <_sungetc_r+0x8>
 8008758:	6921      	ldr	r1, [r4, #16]
 800875a:	6822      	ldr	r2, [r4, #0]
 800875c:	b141      	cbz	r1, 8008770 <_sungetc_r+0x5c>
 800875e:	4291      	cmp	r1, r2
 8008760:	d206      	bcs.n	8008770 <_sungetc_r+0x5c>
 8008762:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008766:	42a9      	cmp	r1, r5
 8008768:	d102      	bne.n	8008770 <_sungetc_r+0x5c>
 800876a:	3a01      	subs	r2, #1
 800876c:	6022      	str	r2, [r4, #0]
 800876e:	e7ea      	b.n	8008746 <_sungetc_r+0x32>
 8008770:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008774:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008778:	6363      	str	r3, [r4, #52]	@ 0x34
 800877a:	2303      	movs	r3, #3
 800877c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800877e:	4623      	mov	r3, r4
 8008780:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	2301      	movs	r3, #1
 8008788:	e7de      	b.n	8008748 <_sungetc_r+0x34>

0800878a <__ssrefill_r>:
 800878a:	b510      	push	{r4, lr}
 800878c:	460c      	mov	r4, r1
 800878e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008790:	b169      	cbz	r1, 80087ae <__ssrefill_r+0x24>
 8008792:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008796:	4299      	cmp	r1, r3
 8008798:	d001      	beq.n	800879e <__ssrefill_r+0x14>
 800879a:	f7fe fa2d 	bl	8006bf8 <_free_r>
 800879e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087a0:	6063      	str	r3, [r4, #4]
 80087a2:	2000      	movs	r0, #0
 80087a4:	6360      	str	r0, [r4, #52]	@ 0x34
 80087a6:	b113      	cbz	r3, 80087ae <__ssrefill_r+0x24>
 80087a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80087aa:	6023      	str	r3, [r4, #0]
 80087ac:	bd10      	pop	{r4, pc}
 80087ae:	6923      	ldr	r3, [r4, #16]
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	2300      	movs	r3, #0
 80087b4:	6063      	str	r3, [r4, #4]
 80087b6:	89a3      	ldrh	r3, [r4, #12]
 80087b8:	f043 0320 	orr.w	r3, r3, #32
 80087bc:	81a3      	strh	r3, [r4, #12]
 80087be:	f04f 30ff 	mov.w	r0, #4294967295
 80087c2:	e7f3      	b.n	80087ac <__ssrefill_r+0x22>

080087c4 <__ssvfiscanf_r>:
 80087c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c8:	460c      	mov	r4, r1
 80087ca:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80087ce:	2100      	movs	r1, #0
 80087d0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80087d4:	49a5      	ldr	r1, [pc, #660]	@ (8008a6c <__ssvfiscanf_r+0x2a8>)
 80087d6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80087d8:	f10d 0804 	add.w	r8, sp, #4
 80087dc:	49a4      	ldr	r1, [pc, #656]	@ (8008a70 <__ssvfiscanf_r+0x2ac>)
 80087de:	4fa5      	ldr	r7, [pc, #660]	@ (8008a74 <__ssvfiscanf_r+0x2b0>)
 80087e0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80087e4:	4606      	mov	r6, r0
 80087e6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	7813      	ldrb	r3, [r2, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f000 8158 	beq.w	8008aa2 <__ssvfiscanf_r+0x2de>
 80087f2:	5cf9      	ldrb	r1, [r7, r3]
 80087f4:	f011 0108 	ands.w	r1, r1, #8
 80087f8:	f102 0501 	add.w	r5, r2, #1
 80087fc:	d019      	beq.n	8008832 <__ssvfiscanf_r+0x6e>
 80087fe:	6863      	ldr	r3, [r4, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	dd0f      	ble.n	8008824 <__ssvfiscanf_r+0x60>
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	781a      	ldrb	r2, [r3, #0]
 8008808:	5cba      	ldrb	r2, [r7, r2]
 800880a:	0712      	lsls	r2, r2, #28
 800880c:	d401      	bmi.n	8008812 <__ssvfiscanf_r+0x4e>
 800880e:	462a      	mov	r2, r5
 8008810:	e7eb      	b.n	80087ea <__ssvfiscanf_r+0x26>
 8008812:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008814:	3201      	adds	r2, #1
 8008816:	9245      	str	r2, [sp, #276]	@ 0x114
 8008818:	6862      	ldr	r2, [r4, #4]
 800881a:	3301      	adds	r3, #1
 800881c:	3a01      	subs	r2, #1
 800881e:	6062      	str	r2, [r4, #4]
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	e7ec      	b.n	80087fe <__ssvfiscanf_r+0x3a>
 8008824:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008826:	4621      	mov	r1, r4
 8008828:	4630      	mov	r0, r6
 800882a:	4798      	blx	r3
 800882c:	2800      	cmp	r0, #0
 800882e:	d0e9      	beq.n	8008804 <__ssvfiscanf_r+0x40>
 8008830:	e7ed      	b.n	800880e <__ssvfiscanf_r+0x4a>
 8008832:	2b25      	cmp	r3, #37	@ 0x25
 8008834:	d012      	beq.n	800885c <__ssvfiscanf_r+0x98>
 8008836:	4699      	mov	r9, r3
 8008838:	6863      	ldr	r3, [r4, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	f340 8093 	ble.w	8008966 <__ssvfiscanf_r+0x1a2>
 8008840:	6822      	ldr	r2, [r4, #0]
 8008842:	7813      	ldrb	r3, [r2, #0]
 8008844:	454b      	cmp	r3, r9
 8008846:	f040 812c 	bne.w	8008aa2 <__ssvfiscanf_r+0x2de>
 800884a:	6863      	ldr	r3, [r4, #4]
 800884c:	3b01      	subs	r3, #1
 800884e:	6063      	str	r3, [r4, #4]
 8008850:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008852:	3201      	adds	r2, #1
 8008854:	3301      	adds	r3, #1
 8008856:	6022      	str	r2, [r4, #0]
 8008858:	9345      	str	r3, [sp, #276]	@ 0x114
 800885a:	e7d8      	b.n	800880e <__ssvfiscanf_r+0x4a>
 800885c:	9141      	str	r1, [sp, #260]	@ 0x104
 800885e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008860:	7853      	ldrb	r3, [r2, #1]
 8008862:	2b2a      	cmp	r3, #42	@ 0x2a
 8008864:	bf02      	ittt	eq
 8008866:	2310      	moveq	r3, #16
 8008868:	1c95      	addeq	r5, r2, #2
 800886a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800886c:	220a      	movs	r2, #10
 800886e:	46a9      	mov	r9, r5
 8008870:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008874:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008878:	2b09      	cmp	r3, #9
 800887a:	d91e      	bls.n	80088ba <__ssvfiscanf_r+0xf6>
 800887c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8008a78 <__ssvfiscanf_r+0x2b4>
 8008880:	2203      	movs	r2, #3
 8008882:	4650      	mov	r0, sl
 8008884:	f7f7 fca4 	bl	80001d0 <memchr>
 8008888:	b138      	cbz	r0, 800889a <__ssvfiscanf_r+0xd6>
 800888a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800888c:	eba0 000a 	sub.w	r0, r0, sl
 8008890:	2301      	movs	r3, #1
 8008892:	4083      	lsls	r3, r0
 8008894:	4313      	orrs	r3, r2
 8008896:	9341      	str	r3, [sp, #260]	@ 0x104
 8008898:	464d      	mov	r5, r9
 800889a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800889e:	2b78      	cmp	r3, #120	@ 0x78
 80088a0:	d806      	bhi.n	80088b0 <__ssvfiscanf_r+0xec>
 80088a2:	2b57      	cmp	r3, #87	@ 0x57
 80088a4:	d810      	bhi.n	80088c8 <__ssvfiscanf_r+0x104>
 80088a6:	2b25      	cmp	r3, #37	@ 0x25
 80088a8:	d0c5      	beq.n	8008836 <__ssvfiscanf_r+0x72>
 80088aa:	d857      	bhi.n	800895c <__ssvfiscanf_r+0x198>
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d065      	beq.n	800897c <__ssvfiscanf_r+0x1b8>
 80088b0:	2303      	movs	r3, #3
 80088b2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80088b4:	230a      	movs	r3, #10
 80088b6:	9342      	str	r3, [sp, #264]	@ 0x108
 80088b8:	e078      	b.n	80089ac <__ssvfiscanf_r+0x1e8>
 80088ba:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80088bc:	fb02 1103 	mla	r1, r2, r3, r1
 80088c0:	3930      	subs	r1, #48	@ 0x30
 80088c2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80088c4:	464d      	mov	r5, r9
 80088c6:	e7d2      	b.n	800886e <__ssvfiscanf_r+0xaa>
 80088c8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80088cc:	2a20      	cmp	r2, #32
 80088ce:	d8ef      	bhi.n	80088b0 <__ssvfiscanf_r+0xec>
 80088d0:	a101      	add	r1, pc, #4	@ (adr r1, 80088d8 <__ssvfiscanf_r+0x114>)
 80088d2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80088d6:	bf00      	nop
 80088d8:	0800898b 	.word	0x0800898b
 80088dc:	080088b1 	.word	0x080088b1
 80088e0:	080088b1 	.word	0x080088b1
 80088e4:	080089e5 	.word	0x080089e5
 80088e8:	080088b1 	.word	0x080088b1
 80088ec:	080088b1 	.word	0x080088b1
 80088f0:	080088b1 	.word	0x080088b1
 80088f4:	080088b1 	.word	0x080088b1
 80088f8:	080088b1 	.word	0x080088b1
 80088fc:	080088b1 	.word	0x080088b1
 8008900:	080088b1 	.word	0x080088b1
 8008904:	080089fb 	.word	0x080089fb
 8008908:	080089e1 	.word	0x080089e1
 800890c:	08008963 	.word	0x08008963
 8008910:	08008963 	.word	0x08008963
 8008914:	08008963 	.word	0x08008963
 8008918:	080088b1 	.word	0x080088b1
 800891c:	0800899d 	.word	0x0800899d
 8008920:	080088b1 	.word	0x080088b1
 8008924:	080088b1 	.word	0x080088b1
 8008928:	080088b1 	.word	0x080088b1
 800892c:	080088b1 	.word	0x080088b1
 8008930:	08008a0b 	.word	0x08008a0b
 8008934:	080089a5 	.word	0x080089a5
 8008938:	08008983 	.word	0x08008983
 800893c:	080088b1 	.word	0x080088b1
 8008940:	080088b1 	.word	0x080088b1
 8008944:	08008a07 	.word	0x08008a07
 8008948:	080088b1 	.word	0x080088b1
 800894c:	080089e1 	.word	0x080089e1
 8008950:	080088b1 	.word	0x080088b1
 8008954:	080088b1 	.word	0x080088b1
 8008958:	0800898b 	.word	0x0800898b
 800895c:	3b45      	subs	r3, #69	@ 0x45
 800895e:	2b02      	cmp	r3, #2
 8008960:	d8a6      	bhi.n	80088b0 <__ssvfiscanf_r+0xec>
 8008962:	2305      	movs	r3, #5
 8008964:	e021      	b.n	80089aa <__ssvfiscanf_r+0x1e6>
 8008966:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008968:	4621      	mov	r1, r4
 800896a:	4630      	mov	r0, r6
 800896c:	4798      	blx	r3
 800896e:	2800      	cmp	r0, #0
 8008970:	f43f af66 	beq.w	8008840 <__ssvfiscanf_r+0x7c>
 8008974:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008976:	2800      	cmp	r0, #0
 8008978:	f040 808b 	bne.w	8008a92 <__ssvfiscanf_r+0x2ce>
 800897c:	f04f 30ff 	mov.w	r0, #4294967295
 8008980:	e08b      	b.n	8008a9a <__ssvfiscanf_r+0x2d6>
 8008982:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008984:	f042 0220 	orr.w	r2, r2, #32
 8008988:	9241      	str	r2, [sp, #260]	@ 0x104
 800898a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800898c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008990:	9241      	str	r2, [sp, #260]	@ 0x104
 8008992:	2210      	movs	r2, #16
 8008994:	2b6e      	cmp	r3, #110	@ 0x6e
 8008996:	9242      	str	r2, [sp, #264]	@ 0x108
 8008998:	d902      	bls.n	80089a0 <__ssvfiscanf_r+0x1dc>
 800899a:	e005      	b.n	80089a8 <__ssvfiscanf_r+0x1e4>
 800899c:	2300      	movs	r3, #0
 800899e:	9342      	str	r3, [sp, #264]	@ 0x108
 80089a0:	2303      	movs	r3, #3
 80089a2:	e002      	b.n	80089aa <__ssvfiscanf_r+0x1e6>
 80089a4:	2308      	movs	r3, #8
 80089a6:	9342      	str	r3, [sp, #264]	@ 0x108
 80089a8:	2304      	movs	r3, #4
 80089aa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80089ac:	6863      	ldr	r3, [r4, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	dd39      	ble.n	8008a26 <__ssvfiscanf_r+0x262>
 80089b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80089b4:	0659      	lsls	r1, r3, #25
 80089b6:	d404      	bmi.n	80089c2 <__ssvfiscanf_r+0x1fe>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	781a      	ldrb	r2, [r3, #0]
 80089bc:	5cba      	ldrb	r2, [r7, r2]
 80089be:	0712      	lsls	r2, r2, #28
 80089c0:	d438      	bmi.n	8008a34 <__ssvfiscanf_r+0x270>
 80089c2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	dc47      	bgt.n	8008a58 <__ssvfiscanf_r+0x294>
 80089c8:	466b      	mov	r3, sp
 80089ca:	4622      	mov	r2, r4
 80089cc:	a941      	add	r1, sp, #260	@ 0x104
 80089ce:	4630      	mov	r0, r6
 80089d0:	f000 f9ae 	bl	8008d30 <_scanf_chars>
 80089d4:	2801      	cmp	r0, #1
 80089d6:	d064      	beq.n	8008aa2 <__ssvfiscanf_r+0x2de>
 80089d8:	2802      	cmp	r0, #2
 80089da:	f47f af18 	bne.w	800880e <__ssvfiscanf_r+0x4a>
 80089de:	e7c9      	b.n	8008974 <__ssvfiscanf_r+0x1b0>
 80089e0:	220a      	movs	r2, #10
 80089e2:	e7d7      	b.n	8008994 <__ssvfiscanf_r+0x1d0>
 80089e4:	4629      	mov	r1, r5
 80089e6:	4640      	mov	r0, r8
 80089e8:	f000 fb9c 	bl	8009124 <__sccl>
 80089ec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80089ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089f2:	9341      	str	r3, [sp, #260]	@ 0x104
 80089f4:	4605      	mov	r5, r0
 80089f6:	2301      	movs	r3, #1
 80089f8:	e7d7      	b.n	80089aa <__ssvfiscanf_r+0x1e6>
 80089fa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80089fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a00:	9341      	str	r3, [sp, #260]	@ 0x104
 8008a02:	2300      	movs	r3, #0
 8008a04:	e7d1      	b.n	80089aa <__ssvfiscanf_r+0x1e6>
 8008a06:	2302      	movs	r3, #2
 8008a08:	e7cf      	b.n	80089aa <__ssvfiscanf_r+0x1e6>
 8008a0a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008a0c:	06c3      	lsls	r3, r0, #27
 8008a0e:	f53f aefe 	bmi.w	800880e <__ssvfiscanf_r+0x4a>
 8008a12:	9b00      	ldr	r3, [sp, #0]
 8008a14:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008a16:	1d19      	adds	r1, r3, #4
 8008a18:	9100      	str	r1, [sp, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	07c0      	lsls	r0, r0, #31
 8008a1e:	bf4c      	ite	mi
 8008a20:	801a      	strhmi	r2, [r3, #0]
 8008a22:	601a      	strpl	r2, [r3, #0]
 8008a24:	e6f3      	b.n	800880e <__ssvfiscanf_r+0x4a>
 8008a26:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008a28:	4621      	mov	r1, r4
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	4798      	blx	r3
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d0bf      	beq.n	80089b2 <__ssvfiscanf_r+0x1ee>
 8008a32:	e79f      	b.n	8008974 <__ssvfiscanf_r+0x1b0>
 8008a34:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008a36:	3201      	adds	r2, #1
 8008a38:	9245      	str	r2, [sp, #276]	@ 0x114
 8008a3a:	6862      	ldr	r2, [r4, #4]
 8008a3c:	3a01      	subs	r2, #1
 8008a3e:	2a00      	cmp	r2, #0
 8008a40:	6062      	str	r2, [r4, #4]
 8008a42:	dd02      	ble.n	8008a4a <__ssvfiscanf_r+0x286>
 8008a44:	3301      	adds	r3, #1
 8008a46:	6023      	str	r3, [r4, #0]
 8008a48:	e7b6      	b.n	80089b8 <__ssvfiscanf_r+0x1f4>
 8008a4a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4630      	mov	r0, r6
 8008a50:	4798      	blx	r3
 8008a52:	2800      	cmp	r0, #0
 8008a54:	d0b0      	beq.n	80089b8 <__ssvfiscanf_r+0x1f4>
 8008a56:	e78d      	b.n	8008974 <__ssvfiscanf_r+0x1b0>
 8008a58:	2b04      	cmp	r3, #4
 8008a5a:	dc0f      	bgt.n	8008a7c <__ssvfiscanf_r+0x2b8>
 8008a5c:	466b      	mov	r3, sp
 8008a5e:	4622      	mov	r2, r4
 8008a60:	a941      	add	r1, sp, #260	@ 0x104
 8008a62:	4630      	mov	r0, r6
 8008a64:	f000 f9be 	bl	8008de4 <_scanf_i>
 8008a68:	e7b4      	b.n	80089d4 <__ssvfiscanf_r+0x210>
 8008a6a:	bf00      	nop
 8008a6c:	08008715 	.word	0x08008715
 8008a70:	0800878b 	.word	0x0800878b
 8008a74:	0800a161 	.word	0x0800a161
 8008a78:	0800a267 	.word	0x0800a267
 8008a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008aa8 <__ssvfiscanf_r+0x2e4>)
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f43f aec5 	beq.w	800880e <__ssvfiscanf_r+0x4a>
 8008a84:	466b      	mov	r3, sp
 8008a86:	4622      	mov	r2, r4
 8008a88:	a941      	add	r1, sp, #260	@ 0x104
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7fc fe56 	bl	800573c <_scanf_float>
 8008a90:	e7a0      	b.n	80089d4 <__ssvfiscanf_r+0x210>
 8008a92:	89a3      	ldrh	r3, [r4, #12]
 8008a94:	065b      	lsls	r3, r3, #25
 8008a96:	f53f af71 	bmi.w	800897c <__ssvfiscanf_r+0x1b8>
 8008a9a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008aa4:	e7f9      	b.n	8008a9a <__ssvfiscanf_r+0x2d6>
 8008aa6:	bf00      	nop
 8008aa8:	0800573d 	.word	0x0800573d

08008aac <__sfputc_r>:
 8008aac:	6893      	ldr	r3, [r2, #8]
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	b410      	push	{r4}
 8008ab4:	6093      	str	r3, [r2, #8]
 8008ab6:	da08      	bge.n	8008aca <__sfputc_r+0x1e>
 8008ab8:	6994      	ldr	r4, [r2, #24]
 8008aba:	42a3      	cmp	r3, r4
 8008abc:	db01      	blt.n	8008ac2 <__sfputc_r+0x16>
 8008abe:	290a      	cmp	r1, #10
 8008ac0:	d103      	bne.n	8008aca <__sfputc_r+0x1e>
 8008ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ac6:	f000 bba0 	b.w	800920a <__swbuf_r>
 8008aca:	6813      	ldr	r3, [r2, #0]
 8008acc:	1c58      	adds	r0, r3, #1
 8008ace:	6010      	str	r0, [r2, #0]
 8008ad0:	7019      	strb	r1, [r3, #0]
 8008ad2:	4608      	mov	r0, r1
 8008ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <__sfputs_r>:
 8008ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008adc:	4606      	mov	r6, r0
 8008ade:	460f      	mov	r7, r1
 8008ae0:	4614      	mov	r4, r2
 8008ae2:	18d5      	adds	r5, r2, r3
 8008ae4:	42ac      	cmp	r4, r5
 8008ae6:	d101      	bne.n	8008aec <__sfputs_r+0x12>
 8008ae8:	2000      	movs	r0, #0
 8008aea:	e007      	b.n	8008afc <__sfputs_r+0x22>
 8008aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af0:	463a      	mov	r2, r7
 8008af2:	4630      	mov	r0, r6
 8008af4:	f7ff ffda 	bl	8008aac <__sfputc_r>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	d1f3      	bne.n	8008ae4 <__sfputs_r+0xa>
 8008afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b00 <_vfiprintf_r>:
 8008b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b04:	460d      	mov	r5, r1
 8008b06:	b09d      	sub	sp, #116	@ 0x74
 8008b08:	4614      	mov	r4, r2
 8008b0a:	4698      	mov	r8, r3
 8008b0c:	4606      	mov	r6, r0
 8008b0e:	b118      	cbz	r0, 8008b18 <_vfiprintf_r+0x18>
 8008b10:	6a03      	ldr	r3, [r0, #32]
 8008b12:	b90b      	cbnz	r3, 8008b18 <_vfiprintf_r+0x18>
 8008b14:	f7fd f8b2 	bl	8005c7c <__sinit>
 8008b18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b1a:	07d9      	lsls	r1, r3, #31
 8008b1c:	d405      	bmi.n	8008b2a <_vfiprintf_r+0x2a>
 8008b1e:	89ab      	ldrh	r3, [r5, #12]
 8008b20:	059a      	lsls	r2, r3, #22
 8008b22:	d402      	bmi.n	8008b2a <_vfiprintf_r+0x2a>
 8008b24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b26:	f7fd fa10 	bl	8005f4a <__retarget_lock_acquire_recursive>
 8008b2a:	89ab      	ldrh	r3, [r5, #12]
 8008b2c:	071b      	lsls	r3, r3, #28
 8008b2e:	d501      	bpl.n	8008b34 <_vfiprintf_r+0x34>
 8008b30:	692b      	ldr	r3, [r5, #16]
 8008b32:	b99b      	cbnz	r3, 8008b5c <_vfiprintf_r+0x5c>
 8008b34:	4629      	mov	r1, r5
 8008b36:	4630      	mov	r0, r6
 8008b38:	f000 fba6 	bl	8009288 <__swsetup_r>
 8008b3c:	b170      	cbz	r0, 8008b5c <_vfiprintf_r+0x5c>
 8008b3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b40:	07dc      	lsls	r4, r3, #31
 8008b42:	d504      	bpl.n	8008b4e <_vfiprintf_r+0x4e>
 8008b44:	f04f 30ff 	mov.w	r0, #4294967295
 8008b48:	b01d      	add	sp, #116	@ 0x74
 8008b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4e:	89ab      	ldrh	r3, [r5, #12]
 8008b50:	0598      	lsls	r0, r3, #22
 8008b52:	d4f7      	bmi.n	8008b44 <_vfiprintf_r+0x44>
 8008b54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b56:	f7fd f9f9 	bl	8005f4c <__retarget_lock_release_recursive>
 8008b5a:	e7f3      	b.n	8008b44 <_vfiprintf_r+0x44>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b60:	2320      	movs	r3, #32
 8008b62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b66:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b6a:	2330      	movs	r3, #48	@ 0x30
 8008b6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008d1c <_vfiprintf_r+0x21c>
 8008b70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b74:	f04f 0901 	mov.w	r9, #1
 8008b78:	4623      	mov	r3, r4
 8008b7a:	469a      	mov	sl, r3
 8008b7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b80:	b10a      	cbz	r2, 8008b86 <_vfiprintf_r+0x86>
 8008b82:	2a25      	cmp	r2, #37	@ 0x25
 8008b84:	d1f9      	bne.n	8008b7a <_vfiprintf_r+0x7a>
 8008b86:	ebba 0b04 	subs.w	fp, sl, r4
 8008b8a:	d00b      	beq.n	8008ba4 <_vfiprintf_r+0xa4>
 8008b8c:	465b      	mov	r3, fp
 8008b8e:	4622      	mov	r2, r4
 8008b90:	4629      	mov	r1, r5
 8008b92:	4630      	mov	r0, r6
 8008b94:	f7ff ffa1 	bl	8008ada <__sfputs_r>
 8008b98:	3001      	adds	r0, #1
 8008b9a:	f000 80a7 	beq.w	8008cec <_vfiprintf_r+0x1ec>
 8008b9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ba0:	445a      	add	r2, fp
 8008ba2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 809f 	beq.w	8008cec <_vfiprintf_r+0x1ec>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bb8:	f10a 0a01 	add.w	sl, sl, #1
 8008bbc:	9304      	str	r3, [sp, #16]
 8008bbe:	9307      	str	r3, [sp, #28]
 8008bc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008bc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008bc6:	4654      	mov	r4, sl
 8008bc8:	2205      	movs	r2, #5
 8008bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bce:	4853      	ldr	r0, [pc, #332]	@ (8008d1c <_vfiprintf_r+0x21c>)
 8008bd0:	f7f7 fafe 	bl	80001d0 <memchr>
 8008bd4:	9a04      	ldr	r2, [sp, #16]
 8008bd6:	b9d8      	cbnz	r0, 8008c10 <_vfiprintf_r+0x110>
 8008bd8:	06d1      	lsls	r1, r2, #27
 8008bda:	bf44      	itt	mi
 8008bdc:	2320      	movmi	r3, #32
 8008bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008be2:	0713      	lsls	r3, r2, #28
 8008be4:	bf44      	itt	mi
 8008be6:	232b      	movmi	r3, #43	@ 0x2b
 8008be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bec:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bf2:	d015      	beq.n	8008c20 <_vfiprintf_r+0x120>
 8008bf4:	9a07      	ldr	r2, [sp, #28]
 8008bf6:	4654      	mov	r4, sl
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	f04f 0c0a 	mov.w	ip, #10
 8008bfe:	4621      	mov	r1, r4
 8008c00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c04:	3b30      	subs	r3, #48	@ 0x30
 8008c06:	2b09      	cmp	r3, #9
 8008c08:	d94b      	bls.n	8008ca2 <_vfiprintf_r+0x1a2>
 8008c0a:	b1b0      	cbz	r0, 8008c3a <_vfiprintf_r+0x13a>
 8008c0c:	9207      	str	r2, [sp, #28]
 8008c0e:	e014      	b.n	8008c3a <_vfiprintf_r+0x13a>
 8008c10:	eba0 0308 	sub.w	r3, r0, r8
 8008c14:	fa09 f303 	lsl.w	r3, r9, r3
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	9304      	str	r3, [sp, #16]
 8008c1c:	46a2      	mov	sl, r4
 8008c1e:	e7d2      	b.n	8008bc6 <_vfiprintf_r+0xc6>
 8008c20:	9b03      	ldr	r3, [sp, #12]
 8008c22:	1d19      	adds	r1, r3, #4
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	9103      	str	r1, [sp, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	bfbb      	ittet	lt
 8008c2c:	425b      	neglt	r3, r3
 8008c2e:	f042 0202 	orrlt.w	r2, r2, #2
 8008c32:	9307      	strge	r3, [sp, #28]
 8008c34:	9307      	strlt	r3, [sp, #28]
 8008c36:	bfb8      	it	lt
 8008c38:	9204      	strlt	r2, [sp, #16]
 8008c3a:	7823      	ldrb	r3, [r4, #0]
 8008c3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c3e:	d10a      	bne.n	8008c56 <_vfiprintf_r+0x156>
 8008c40:	7863      	ldrb	r3, [r4, #1]
 8008c42:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c44:	d132      	bne.n	8008cac <_vfiprintf_r+0x1ac>
 8008c46:	9b03      	ldr	r3, [sp, #12]
 8008c48:	1d1a      	adds	r2, r3, #4
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	9203      	str	r2, [sp, #12]
 8008c4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c52:	3402      	adds	r4, #2
 8008c54:	9305      	str	r3, [sp, #20]
 8008c56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008d2c <_vfiprintf_r+0x22c>
 8008c5a:	7821      	ldrb	r1, [r4, #0]
 8008c5c:	2203      	movs	r2, #3
 8008c5e:	4650      	mov	r0, sl
 8008c60:	f7f7 fab6 	bl	80001d0 <memchr>
 8008c64:	b138      	cbz	r0, 8008c76 <_vfiprintf_r+0x176>
 8008c66:	9b04      	ldr	r3, [sp, #16]
 8008c68:	eba0 000a 	sub.w	r0, r0, sl
 8008c6c:	2240      	movs	r2, #64	@ 0x40
 8008c6e:	4082      	lsls	r2, r0
 8008c70:	4313      	orrs	r3, r2
 8008c72:	3401      	adds	r4, #1
 8008c74:	9304      	str	r3, [sp, #16]
 8008c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c7a:	4829      	ldr	r0, [pc, #164]	@ (8008d20 <_vfiprintf_r+0x220>)
 8008c7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c80:	2206      	movs	r2, #6
 8008c82:	f7f7 faa5 	bl	80001d0 <memchr>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	d03f      	beq.n	8008d0a <_vfiprintf_r+0x20a>
 8008c8a:	4b26      	ldr	r3, [pc, #152]	@ (8008d24 <_vfiprintf_r+0x224>)
 8008c8c:	bb1b      	cbnz	r3, 8008cd6 <_vfiprintf_r+0x1d6>
 8008c8e:	9b03      	ldr	r3, [sp, #12]
 8008c90:	3307      	adds	r3, #7
 8008c92:	f023 0307 	bic.w	r3, r3, #7
 8008c96:	3308      	adds	r3, #8
 8008c98:	9303      	str	r3, [sp, #12]
 8008c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c9c:	443b      	add	r3, r7
 8008c9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ca0:	e76a      	b.n	8008b78 <_vfiprintf_r+0x78>
 8008ca2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ca6:	460c      	mov	r4, r1
 8008ca8:	2001      	movs	r0, #1
 8008caa:	e7a8      	b.n	8008bfe <_vfiprintf_r+0xfe>
 8008cac:	2300      	movs	r3, #0
 8008cae:	3401      	adds	r4, #1
 8008cb0:	9305      	str	r3, [sp, #20]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	f04f 0c0a 	mov.w	ip, #10
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cbe:	3a30      	subs	r2, #48	@ 0x30
 8008cc0:	2a09      	cmp	r2, #9
 8008cc2:	d903      	bls.n	8008ccc <_vfiprintf_r+0x1cc>
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d0c6      	beq.n	8008c56 <_vfiprintf_r+0x156>
 8008cc8:	9105      	str	r1, [sp, #20]
 8008cca:	e7c4      	b.n	8008c56 <_vfiprintf_r+0x156>
 8008ccc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e7f0      	b.n	8008cb8 <_vfiprintf_r+0x1b8>
 8008cd6:	ab03      	add	r3, sp, #12
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	462a      	mov	r2, r5
 8008cdc:	4b12      	ldr	r3, [pc, #72]	@ (8008d28 <_vfiprintf_r+0x228>)
 8008cde:	a904      	add	r1, sp, #16
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f7fc f973 	bl	8004fcc <_printf_float>
 8008ce6:	4607      	mov	r7, r0
 8008ce8:	1c78      	adds	r0, r7, #1
 8008cea:	d1d6      	bne.n	8008c9a <_vfiprintf_r+0x19a>
 8008cec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cee:	07d9      	lsls	r1, r3, #31
 8008cf0:	d405      	bmi.n	8008cfe <_vfiprintf_r+0x1fe>
 8008cf2:	89ab      	ldrh	r3, [r5, #12]
 8008cf4:	059a      	lsls	r2, r3, #22
 8008cf6:	d402      	bmi.n	8008cfe <_vfiprintf_r+0x1fe>
 8008cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cfa:	f7fd f927 	bl	8005f4c <__retarget_lock_release_recursive>
 8008cfe:	89ab      	ldrh	r3, [r5, #12]
 8008d00:	065b      	lsls	r3, r3, #25
 8008d02:	f53f af1f 	bmi.w	8008b44 <_vfiprintf_r+0x44>
 8008d06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d08:	e71e      	b.n	8008b48 <_vfiprintf_r+0x48>
 8008d0a:	ab03      	add	r3, sp, #12
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	462a      	mov	r2, r5
 8008d10:	4b05      	ldr	r3, [pc, #20]	@ (8008d28 <_vfiprintf_r+0x228>)
 8008d12:	a904      	add	r1, sp, #16
 8008d14:	4630      	mov	r0, r6
 8008d16:	f7fc fbf1 	bl	80054fc <_printf_i>
 8008d1a:	e7e4      	b.n	8008ce6 <_vfiprintf_r+0x1e6>
 8008d1c:	0800a261 	.word	0x0800a261
 8008d20:	0800a26b 	.word	0x0800a26b
 8008d24:	08004fcd 	.word	0x08004fcd
 8008d28:	08008adb 	.word	0x08008adb
 8008d2c:	0800a267 	.word	0x0800a267

08008d30 <_scanf_chars>:
 8008d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d34:	4615      	mov	r5, r2
 8008d36:	688a      	ldr	r2, [r1, #8]
 8008d38:	4680      	mov	r8, r0
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	b932      	cbnz	r2, 8008d4c <_scanf_chars+0x1c>
 8008d3e:	698a      	ldr	r2, [r1, #24]
 8008d40:	2a00      	cmp	r2, #0
 8008d42:	bf14      	ite	ne
 8008d44:	f04f 32ff 	movne.w	r2, #4294967295
 8008d48:	2201      	moveq	r2, #1
 8008d4a:	608a      	str	r2, [r1, #8]
 8008d4c:	6822      	ldr	r2, [r4, #0]
 8008d4e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008de0 <_scanf_chars+0xb0>
 8008d52:	06d1      	lsls	r1, r2, #27
 8008d54:	bf5f      	itttt	pl
 8008d56:	681a      	ldrpl	r2, [r3, #0]
 8008d58:	1d11      	addpl	r1, r2, #4
 8008d5a:	6019      	strpl	r1, [r3, #0]
 8008d5c:	6816      	ldrpl	r6, [r2, #0]
 8008d5e:	2700      	movs	r7, #0
 8008d60:	69a0      	ldr	r0, [r4, #24]
 8008d62:	b188      	cbz	r0, 8008d88 <_scanf_chars+0x58>
 8008d64:	2801      	cmp	r0, #1
 8008d66:	d107      	bne.n	8008d78 <_scanf_chars+0x48>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	781a      	ldrb	r2, [r3, #0]
 8008d6c:	6963      	ldr	r3, [r4, #20]
 8008d6e:	5c9b      	ldrb	r3, [r3, r2]
 8008d70:	b953      	cbnz	r3, 8008d88 <_scanf_chars+0x58>
 8008d72:	2f00      	cmp	r7, #0
 8008d74:	d031      	beq.n	8008dda <_scanf_chars+0xaa>
 8008d76:	e022      	b.n	8008dbe <_scanf_chars+0x8e>
 8008d78:	2802      	cmp	r0, #2
 8008d7a:	d120      	bne.n	8008dbe <_scanf_chars+0x8e>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008d84:	071b      	lsls	r3, r3, #28
 8008d86:	d41a      	bmi.n	8008dbe <_scanf_chars+0x8e>
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	06da      	lsls	r2, r3, #27
 8008d8c:	bf5e      	ittt	pl
 8008d8e:	682b      	ldrpl	r3, [r5, #0]
 8008d90:	781b      	ldrbpl	r3, [r3, #0]
 8008d92:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008d96:	682a      	ldr	r2, [r5, #0]
 8008d98:	686b      	ldr	r3, [r5, #4]
 8008d9a:	3201      	adds	r2, #1
 8008d9c:	602a      	str	r2, [r5, #0]
 8008d9e:	68a2      	ldr	r2, [r4, #8]
 8008da0:	3b01      	subs	r3, #1
 8008da2:	3a01      	subs	r2, #1
 8008da4:	606b      	str	r3, [r5, #4]
 8008da6:	3701      	adds	r7, #1
 8008da8:	60a2      	str	r2, [r4, #8]
 8008daa:	b142      	cbz	r2, 8008dbe <_scanf_chars+0x8e>
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	dcd7      	bgt.n	8008d60 <_scanf_chars+0x30>
 8008db0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008db4:	4629      	mov	r1, r5
 8008db6:	4640      	mov	r0, r8
 8008db8:	4798      	blx	r3
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d0d0      	beq.n	8008d60 <_scanf_chars+0x30>
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	f013 0310 	ands.w	r3, r3, #16
 8008dc4:	d105      	bne.n	8008dd2 <_scanf_chars+0xa2>
 8008dc6:	68e2      	ldr	r2, [r4, #12]
 8008dc8:	3201      	adds	r2, #1
 8008dca:	60e2      	str	r2, [r4, #12]
 8008dcc:	69a2      	ldr	r2, [r4, #24]
 8008dce:	b102      	cbz	r2, 8008dd2 <_scanf_chars+0xa2>
 8008dd0:	7033      	strb	r3, [r6, #0]
 8008dd2:	6923      	ldr	r3, [r4, #16]
 8008dd4:	443b      	add	r3, r7
 8008dd6:	6123      	str	r3, [r4, #16]
 8008dd8:	2000      	movs	r0, #0
 8008dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dde:	bf00      	nop
 8008de0:	0800a161 	.word	0x0800a161

08008de4 <_scanf_i>:
 8008de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de8:	4698      	mov	r8, r3
 8008dea:	4b74      	ldr	r3, [pc, #464]	@ (8008fbc <_scanf_i+0x1d8>)
 8008dec:	460c      	mov	r4, r1
 8008dee:	4682      	mov	sl, r0
 8008df0:	4616      	mov	r6, r2
 8008df2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008df6:	b087      	sub	sp, #28
 8008df8:	ab03      	add	r3, sp, #12
 8008dfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008dfe:	4b70      	ldr	r3, [pc, #448]	@ (8008fc0 <_scanf_i+0x1dc>)
 8008e00:	69a1      	ldr	r1, [r4, #24]
 8008e02:	4a70      	ldr	r2, [pc, #448]	@ (8008fc4 <_scanf_i+0x1e0>)
 8008e04:	2903      	cmp	r1, #3
 8008e06:	bf08      	it	eq
 8008e08:	461a      	moveq	r2, r3
 8008e0a:	68a3      	ldr	r3, [r4, #8]
 8008e0c:	9201      	str	r2, [sp, #4]
 8008e0e:	1e5a      	subs	r2, r3, #1
 8008e10:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008e14:	bf88      	it	hi
 8008e16:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008e1a:	4627      	mov	r7, r4
 8008e1c:	bf82      	ittt	hi
 8008e1e:	eb03 0905 	addhi.w	r9, r3, r5
 8008e22:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008e26:	60a3      	strhi	r3, [r4, #8]
 8008e28:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008e2c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008e30:	bf98      	it	ls
 8008e32:	f04f 0900 	movls.w	r9, #0
 8008e36:	6023      	str	r3, [r4, #0]
 8008e38:	463d      	mov	r5, r7
 8008e3a:	f04f 0b00 	mov.w	fp, #0
 8008e3e:	6831      	ldr	r1, [r6, #0]
 8008e40:	ab03      	add	r3, sp, #12
 8008e42:	7809      	ldrb	r1, [r1, #0]
 8008e44:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008e48:	2202      	movs	r2, #2
 8008e4a:	f7f7 f9c1 	bl	80001d0 <memchr>
 8008e4e:	b328      	cbz	r0, 8008e9c <_scanf_i+0xb8>
 8008e50:	f1bb 0f01 	cmp.w	fp, #1
 8008e54:	d159      	bne.n	8008f0a <_scanf_i+0x126>
 8008e56:	6862      	ldr	r2, [r4, #4]
 8008e58:	b92a      	cbnz	r2, 8008e66 <_scanf_i+0x82>
 8008e5a:	6822      	ldr	r2, [r4, #0]
 8008e5c:	2108      	movs	r1, #8
 8008e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e62:	6061      	str	r1, [r4, #4]
 8008e64:	6022      	str	r2, [r4, #0]
 8008e66:	6822      	ldr	r2, [r4, #0]
 8008e68:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008e6c:	6022      	str	r2, [r4, #0]
 8008e6e:	68a2      	ldr	r2, [r4, #8]
 8008e70:	1e51      	subs	r1, r2, #1
 8008e72:	60a1      	str	r1, [r4, #8]
 8008e74:	b192      	cbz	r2, 8008e9c <_scanf_i+0xb8>
 8008e76:	6832      	ldr	r2, [r6, #0]
 8008e78:	1c51      	adds	r1, r2, #1
 8008e7a:	6031      	str	r1, [r6, #0]
 8008e7c:	7812      	ldrb	r2, [r2, #0]
 8008e7e:	f805 2b01 	strb.w	r2, [r5], #1
 8008e82:	6872      	ldr	r2, [r6, #4]
 8008e84:	3a01      	subs	r2, #1
 8008e86:	2a00      	cmp	r2, #0
 8008e88:	6072      	str	r2, [r6, #4]
 8008e8a:	dc07      	bgt.n	8008e9c <_scanf_i+0xb8>
 8008e8c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008e90:	4631      	mov	r1, r6
 8008e92:	4650      	mov	r0, sl
 8008e94:	4790      	blx	r2
 8008e96:	2800      	cmp	r0, #0
 8008e98:	f040 8085 	bne.w	8008fa6 <_scanf_i+0x1c2>
 8008e9c:	f10b 0b01 	add.w	fp, fp, #1
 8008ea0:	f1bb 0f03 	cmp.w	fp, #3
 8008ea4:	d1cb      	bne.n	8008e3e <_scanf_i+0x5a>
 8008ea6:	6863      	ldr	r3, [r4, #4]
 8008ea8:	b90b      	cbnz	r3, 8008eae <_scanf_i+0xca>
 8008eaa:	230a      	movs	r3, #10
 8008eac:	6063      	str	r3, [r4, #4]
 8008eae:	6863      	ldr	r3, [r4, #4]
 8008eb0:	4945      	ldr	r1, [pc, #276]	@ (8008fc8 <_scanf_i+0x1e4>)
 8008eb2:	6960      	ldr	r0, [r4, #20]
 8008eb4:	1ac9      	subs	r1, r1, r3
 8008eb6:	f000 f935 	bl	8009124 <__sccl>
 8008eba:	f04f 0b00 	mov.w	fp, #0
 8008ebe:	68a3      	ldr	r3, [r4, #8]
 8008ec0:	6822      	ldr	r2, [r4, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d03d      	beq.n	8008f42 <_scanf_i+0x15e>
 8008ec6:	6831      	ldr	r1, [r6, #0]
 8008ec8:	6960      	ldr	r0, [r4, #20]
 8008eca:	f891 c000 	ldrb.w	ip, [r1]
 8008ece:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	d035      	beq.n	8008f42 <_scanf_i+0x15e>
 8008ed6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008eda:	d124      	bne.n	8008f26 <_scanf_i+0x142>
 8008edc:	0510      	lsls	r0, r2, #20
 8008ede:	d522      	bpl.n	8008f26 <_scanf_i+0x142>
 8008ee0:	f10b 0b01 	add.w	fp, fp, #1
 8008ee4:	f1b9 0f00 	cmp.w	r9, #0
 8008ee8:	d003      	beq.n	8008ef2 <_scanf_i+0x10e>
 8008eea:	3301      	adds	r3, #1
 8008eec:	f109 39ff 	add.w	r9, r9, #4294967295
 8008ef0:	60a3      	str	r3, [r4, #8]
 8008ef2:	6873      	ldr	r3, [r6, #4]
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	6073      	str	r3, [r6, #4]
 8008efa:	dd1b      	ble.n	8008f34 <_scanf_i+0x150>
 8008efc:	6833      	ldr	r3, [r6, #0]
 8008efe:	3301      	adds	r3, #1
 8008f00:	6033      	str	r3, [r6, #0]
 8008f02:	68a3      	ldr	r3, [r4, #8]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	60a3      	str	r3, [r4, #8]
 8008f08:	e7d9      	b.n	8008ebe <_scanf_i+0xda>
 8008f0a:	f1bb 0f02 	cmp.w	fp, #2
 8008f0e:	d1ae      	bne.n	8008e6e <_scanf_i+0x8a>
 8008f10:	6822      	ldr	r2, [r4, #0]
 8008f12:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008f16:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008f1a:	d1bf      	bne.n	8008e9c <_scanf_i+0xb8>
 8008f1c:	2110      	movs	r1, #16
 8008f1e:	6061      	str	r1, [r4, #4]
 8008f20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f24:	e7a2      	b.n	8008e6c <_scanf_i+0x88>
 8008f26:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008f2a:	6022      	str	r2, [r4, #0]
 8008f2c:	780b      	ldrb	r3, [r1, #0]
 8008f2e:	f805 3b01 	strb.w	r3, [r5], #1
 8008f32:	e7de      	b.n	8008ef2 <_scanf_i+0x10e>
 8008f34:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008f38:	4631      	mov	r1, r6
 8008f3a:	4650      	mov	r0, sl
 8008f3c:	4798      	blx	r3
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d0df      	beq.n	8008f02 <_scanf_i+0x11e>
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	05d9      	lsls	r1, r3, #23
 8008f46:	d50d      	bpl.n	8008f64 <_scanf_i+0x180>
 8008f48:	42bd      	cmp	r5, r7
 8008f4a:	d909      	bls.n	8008f60 <_scanf_i+0x17c>
 8008f4c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008f50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f54:	4632      	mov	r2, r6
 8008f56:	4650      	mov	r0, sl
 8008f58:	4798      	blx	r3
 8008f5a:	f105 39ff 	add.w	r9, r5, #4294967295
 8008f5e:	464d      	mov	r5, r9
 8008f60:	42bd      	cmp	r5, r7
 8008f62:	d028      	beq.n	8008fb6 <_scanf_i+0x1d2>
 8008f64:	6822      	ldr	r2, [r4, #0]
 8008f66:	f012 0210 	ands.w	r2, r2, #16
 8008f6a:	d113      	bne.n	8008f94 <_scanf_i+0x1b0>
 8008f6c:	702a      	strb	r2, [r5, #0]
 8008f6e:	6863      	ldr	r3, [r4, #4]
 8008f70:	9e01      	ldr	r6, [sp, #4]
 8008f72:	4639      	mov	r1, r7
 8008f74:	4650      	mov	r0, sl
 8008f76:	47b0      	blx	r6
 8008f78:	f8d8 3000 	ldr.w	r3, [r8]
 8008f7c:	6821      	ldr	r1, [r4, #0]
 8008f7e:	1d1a      	adds	r2, r3, #4
 8008f80:	f8c8 2000 	str.w	r2, [r8]
 8008f84:	f011 0f20 	tst.w	r1, #32
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	d00f      	beq.n	8008fac <_scanf_i+0x1c8>
 8008f8c:	6018      	str	r0, [r3, #0]
 8008f8e:	68e3      	ldr	r3, [r4, #12]
 8008f90:	3301      	adds	r3, #1
 8008f92:	60e3      	str	r3, [r4, #12]
 8008f94:	6923      	ldr	r3, [r4, #16]
 8008f96:	1bed      	subs	r5, r5, r7
 8008f98:	445d      	add	r5, fp
 8008f9a:	442b      	add	r3, r5
 8008f9c:	6123      	str	r3, [r4, #16]
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	b007      	add	sp, #28
 8008fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa6:	f04f 0b00 	mov.w	fp, #0
 8008faa:	e7ca      	b.n	8008f42 <_scanf_i+0x15e>
 8008fac:	07ca      	lsls	r2, r1, #31
 8008fae:	bf4c      	ite	mi
 8008fb0:	8018      	strhmi	r0, [r3, #0]
 8008fb2:	6018      	strpl	r0, [r3, #0]
 8008fb4:	e7eb      	b.n	8008f8e <_scanf_i+0x1aa>
 8008fb6:	2001      	movs	r0, #1
 8008fb8:	e7f2      	b.n	8008fa0 <_scanf_i+0x1bc>
 8008fba:	bf00      	nop
 8008fbc:	08009ebc 	.word	0x08009ebc
 8008fc0:	08008461 	.word	0x08008461
 8008fc4:	08009bed 	.word	0x08009bed
 8008fc8:	0800a282 	.word	0x0800a282

08008fcc <__sflush_r>:
 8008fcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd4:	0716      	lsls	r6, r2, #28
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	460c      	mov	r4, r1
 8008fda:	d454      	bmi.n	8009086 <__sflush_r+0xba>
 8008fdc:	684b      	ldr	r3, [r1, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	dc02      	bgt.n	8008fe8 <__sflush_r+0x1c>
 8008fe2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	dd48      	ble.n	800907a <__sflush_r+0xae>
 8008fe8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fea:	2e00      	cmp	r6, #0
 8008fec:	d045      	beq.n	800907a <__sflush_r+0xae>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ff4:	682f      	ldr	r7, [r5, #0]
 8008ff6:	6a21      	ldr	r1, [r4, #32]
 8008ff8:	602b      	str	r3, [r5, #0]
 8008ffa:	d030      	beq.n	800905e <__sflush_r+0x92>
 8008ffc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ffe:	89a3      	ldrh	r3, [r4, #12]
 8009000:	0759      	lsls	r1, r3, #29
 8009002:	d505      	bpl.n	8009010 <__sflush_r+0x44>
 8009004:	6863      	ldr	r3, [r4, #4]
 8009006:	1ad2      	subs	r2, r2, r3
 8009008:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800900a:	b10b      	cbz	r3, 8009010 <__sflush_r+0x44>
 800900c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800900e:	1ad2      	subs	r2, r2, r3
 8009010:	2300      	movs	r3, #0
 8009012:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009014:	6a21      	ldr	r1, [r4, #32]
 8009016:	4628      	mov	r0, r5
 8009018:	47b0      	blx	r6
 800901a:	1c43      	adds	r3, r0, #1
 800901c:	89a3      	ldrh	r3, [r4, #12]
 800901e:	d106      	bne.n	800902e <__sflush_r+0x62>
 8009020:	6829      	ldr	r1, [r5, #0]
 8009022:	291d      	cmp	r1, #29
 8009024:	d82b      	bhi.n	800907e <__sflush_r+0xb2>
 8009026:	4a2a      	ldr	r2, [pc, #168]	@ (80090d0 <__sflush_r+0x104>)
 8009028:	410a      	asrs	r2, r1
 800902a:	07d6      	lsls	r6, r2, #31
 800902c:	d427      	bmi.n	800907e <__sflush_r+0xb2>
 800902e:	2200      	movs	r2, #0
 8009030:	6062      	str	r2, [r4, #4]
 8009032:	04d9      	lsls	r1, r3, #19
 8009034:	6922      	ldr	r2, [r4, #16]
 8009036:	6022      	str	r2, [r4, #0]
 8009038:	d504      	bpl.n	8009044 <__sflush_r+0x78>
 800903a:	1c42      	adds	r2, r0, #1
 800903c:	d101      	bne.n	8009042 <__sflush_r+0x76>
 800903e:	682b      	ldr	r3, [r5, #0]
 8009040:	b903      	cbnz	r3, 8009044 <__sflush_r+0x78>
 8009042:	6560      	str	r0, [r4, #84]	@ 0x54
 8009044:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009046:	602f      	str	r7, [r5, #0]
 8009048:	b1b9      	cbz	r1, 800907a <__sflush_r+0xae>
 800904a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800904e:	4299      	cmp	r1, r3
 8009050:	d002      	beq.n	8009058 <__sflush_r+0x8c>
 8009052:	4628      	mov	r0, r5
 8009054:	f7fd fdd0 	bl	8006bf8 <_free_r>
 8009058:	2300      	movs	r3, #0
 800905a:	6363      	str	r3, [r4, #52]	@ 0x34
 800905c:	e00d      	b.n	800907a <__sflush_r+0xae>
 800905e:	2301      	movs	r3, #1
 8009060:	4628      	mov	r0, r5
 8009062:	47b0      	blx	r6
 8009064:	4602      	mov	r2, r0
 8009066:	1c50      	adds	r0, r2, #1
 8009068:	d1c9      	bne.n	8008ffe <__sflush_r+0x32>
 800906a:	682b      	ldr	r3, [r5, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d0c6      	beq.n	8008ffe <__sflush_r+0x32>
 8009070:	2b1d      	cmp	r3, #29
 8009072:	d001      	beq.n	8009078 <__sflush_r+0xac>
 8009074:	2b16      	cmp	r3, #22
 8009076:	d11e      	bne.n	80090b6 <__sflush_r+0xea>
 8009078:	602f      	str	r7, [r5, #0]
 800907a:	2000      	movs	r0, #0
 800907c:	e022      	b.n	80090c4 <__sflush_r+0xf8>
 800907e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009082:	b21b      	sxth	r3, r3
 8009084:	e01b      	b.n	80090be <__sflush_r+0xf2>
 8009086:	690f      	ldr	r7, [r1, #16]
 8009088:	2f00      	cmp	r7, #0
 800908a:	d0f6      	beq.n	800907a <__sflush_r+0xae>
 800908c:	0793      	lsls	r3, r2, #30
 800908e:	680e      	ldr	r6, [r1, #0]
 8009090:	bf08      	it	eq
 8009092:	694b      	ldreq	r3, [r1, #20]
 8009094:	600f      	str	r7, [r1, #0]
 8009096:	bf18      	it	ne
 8009098:	2300      	movne	r3, #0
 800909a:	eba6 0807 	sub.w	r8, r6, r7
 800909e:	608b      	str	r3, [r1, #8]
 80090a0:	f1b8 0f00 	cmp.w	r8, #0
 80090a4:	dde9      	ble.n	800907a <__sflush_r+0xae>
 80090a6:	6a21      	ldr	r1, [r4, #32]
 80090a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80090aa:	4643      	mov	r3, r8
 80090ac:	463a      	mov	r2, r7
 80090ae:	4628      	mov	r0, r5
 80090b0:	47b0      	blx	r6
 80090b2:	2800      	cmp	r0, #0
 80090b4:	dc08      	bgt.n	80090c8 <__sflush_r+0xfc>
 80090b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090be:	81a3      	strh	r3, [r4, #12]
 80090c0:	f04f 30ff 	mov.w	r0, #4294967295
 80090c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090c8:	4407      	add	r7, r0
 80090ca:	eba8 0800 	sub.w	r8, r8, r0
 80090ce:	e7e7      	b.n	80090a0 <__sflush_r+0xd4>
 80090d0:	dfbffffe 	.word	0xdfbffffe

080090d4 <_fflush_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	690b      	ldr	r3, [r1, #16]
 80090d8:	4605      	mov	r5, r0
 80090da:	460c      	mov	r4, r1
 80090dc:	b913      	cbnz	r3, 80090e4 <_fflush_r+0x10>
 80090de:	2500      	movs	r5, #0
 80090e0:	4628      	mov	r0, r5
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	b118      	cbz	r0, 80090ee <_fflush_r+0x1a>
 80090e6:	6a03      	ldr	r3, [r0, #32]
 80090e8:	b90b      	cbnz	r3, 80090ee <_fflush_r+0x1a>
 80090ea:	f7fc fdc7 	bl	8005c7c <__sinit>
 80090ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0f3      	beq.n	80090de <_fflush_r+0xa>
 80090f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090f8:	07d0      	lsls	r0, r2, #31
 80090fa:	d404      	bmi.n	8009106 <_fflush_r+0x32>
 80090fc:	0599      	lsls	r1, r3, #22
 80090fe:	d402      	bmi.n	8009106 <_fflush_r+0x32>
 8009100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009102:	f7fc ff22 	bl	8005f4a <__retarget_lock_acquire_recursive>
 8009106:	4628      	mov	r0, r5
 8009108:	4621      	mov	r1, r4
 800910a:	f7ff ff5f 	bl	8008fcc <__sflush_r>
 800910e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009110:	07da      	lsls	r2, r3, #31
 8009112:	4605      	mov	r5, r0
 8009114:	d4e4      	bmi.n	80090e0 <_fflush_r+0xc>
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	059b      	lsls	r3, r3, #22
 800911a:	d4e1      	bmi.n	80090e0 <_fflush_r+0xc>
 800911c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800911e:	f7fc ff15 	bl	8005f4c <__retarget_lock_release_recursive>
 8009122:	e7dd      	b.n	80090e0 <_fflush_r+0xc>

08009124 <__sccl>:
 8009124:	b570      	push	{r4, r5, r6, lr}
 8009126:	780b      	ldrb	r3, [r1, #0]
 8009128:	4604      	mov	r4, r0
 800912a:	2b5e      	cmp	r3, #94	@ 0x5e
 800912c:	bf0b      	itete	eq
 800912e:	784b      	ldrbeq	r3, [r1, #1]
 8009130:	1c4a      	addne	r2, r1, #1
 8009132:	1c8a      	addeq	r2, r1, #2
 8009134:	2100      	movne	r1, #0
 8009136:	bf08      	it	eq
 8009138:	2101      	moveq	r1, #1
 800913a:	3801      	subs	r0, #1
 800913c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009140:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009144:	42a8      	cmp	r0, r5
 8009146:	d1fb      	bne.n	8009140 <__sccl+0x1c>
 8009148:	b90b      	cbnz	r3, 800914e <__sccl+0x2a>
 800914a:	1e50      	subs	r0, r2, #1
 800914c:	bd70      	pop	{r4, r5, r6, pc}
 800914e:	f081 0101 	eor.w	r1, r1, #1
 8009152:	54e1      	strb	r1, [r4, r3]
 8009154:	4610      	mov	r0, r2
 8009156:	4602      	mov	r2, r0
 8009158:	f812 5b01 	ldrb.w	r5, [r2], #1
 800915c:	2d2d      	cmp	r5, #45	@ 0x2d
 800915e:	d005      	beq.n	800916c <__sccl+0x48>
 8009160:	2d5d      	cmp	r5, #93	@ 0x5d
 8009162:	d016      	beq.n	8009192 <__sccl+0x6e>
 8009164:	2d00      	cmp	r5, #0
 8009166:	d0f1      	beq.n	800914c <__sccl+0x28>
 8009168:	462b      	mov	r3, r5
 800916a:	e7f2      	b.n	8009152 <__sccl+0x2e>
 800916c:	7846      	ldrb	r6, [r0, #1]
 800916e:	2e5d      	cmp	r6, #93	@ 0x5d
 8009170:	d0fa      	beq.n	8009168 <__sccl+0x44>
 8009172:	42b3      	cmp	r3, r6
 8009174:	dcf8      	bgt.n	8009168 <__sccl+0x44>
 8009176:	3002      	adds	r0, #2
 8009178:	461a      	mov	r2, r3
 800917a:	3201      	adds	r2, #1
 800917c:	4296      	cmp	r6, r2
 800917e:	54a1      	strb	r1, [r4, r2]
 8009180:	dcfb      	bgt.n	800917a <__sccl+0x56>
 8009182:	1af2      	subs	r2, r6, r3
 8009184:	3a01      	subs	r2, #1
 8009186:	1c5d      	adds	r5, r3, #1
 8009188:	42b3      	cmp	r3, r6
 800918a:	bfa8      	it	ge
 800918c:	2200      	movge	r2, #0
 800918e:	18ab      	adds	r3, r5, r2
 8009190:	e7e1      	b.n	8009156 <__sccl+0x32>
 8009192:	4610      	mov	r0, r2
 8009194:	e7da      	b.n	800914c <__sccl+0x28>

08009196 <__submore>:
 8009196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800919a:	460c      	mov	r4, r1
 800919c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800919e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091a2:	4299      	cmp	r1, r3
 80091a4:	d11d      	bne.n	80091e2 <__submore+0x4c>
 80091a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80091aa:	f7fd fd99 	bl	8006ce0 <_malloc_r>
 80091ae:	b918      	cbnz	r0, 80091b8 <__submore+0x22>
 80091b0:	f04f 30ff 	mov.w	r0, #4294967295
 80091b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091bc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80091be:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80091c2:	6360      	str	r0, [r4, #52]	@ 0x34
 80091c4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80091c8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80091cc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80091d0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80091d4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80091d8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80091dc:	6020      	str	r0, [r4, #0]
 80091de:	2000      	movs	r0, #0
 80091e0:	e7e8      	b.n	80091b4 <__submore+0x1e>
 80091e2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80091e4:	0077      	lsls	r7, r6, #1
 80091e6:	463a      	mov	r2, r7
 80091e8:	f000 fc63 	bl	8009ab2 <_realloc_r>
 80091ec:	4605      	mov	r5, r0
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d0de      	beq.n	80091b0 <__submore+0x1a>
 80091f2:	eb00 0806 	add.w	r8, r0, r6
 80091f6:	4601      	mov	r1, r0
 80091f8:	4632      	mov	r2, r6
 80091fa:	4640      	mov	r0, r8
 80091fc:	f000 f8c4 	bl	8009388 <memcpy>
 8009200:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009204:	f8c4 8000 	str.w	r8, [r4]
 8009208:	e7e9      	b.n	80091de <__submore+0x48>

0800920a <__swbuf_r>:
 800920a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920c:	460e      	mov	r6, r1
 800920e:	4614      	mov	r4, r2
 8009210:	4605      	mov	r5, r0
 8009212:	b118      	cbz	r0, 800921c <__swbuf_r+0x12>
 8009214:	6a03      	ldr	r3, [r0, #32]
 8009216:	b90b      	cbnz	r3, 800921c <__swbuf_r+0x12>
 8009218:	f7fc fd30 	bl	8005c7c <__sinit>
 800921c:	69a3      	ldr	r3, [r4, #24]
 800921e:	60a3      	str	r3, [r4, #8]
 8009220:	89a3      	ldrh	r3, [r4, #12]
 8009222:	071a      	lsls	r2, r3, #28
 8009224:	d501      	bpl.n	800922a <__swbuf_r+0x20>
 8009226:	6923      	ldr	r3, [r4, #16]
 8009228:	b943      	cbnz	r3, 800923c <__swbuf_r+0x32>
 800922a:	4621      	mov	r1, r4
 800922c:	4628      	mov	r0, r5
 800922e:	f000 f82b 	bl	8009288 <__swsetup_r>
 8009232:	b118      	cbz	r0, 800923c <__swbuf_r+0x32>
 8009234:	f04f 37ff 	mov.w	r7, #4294967295
 8009238:	4638      	mov	r0, r7
 800923a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800923c:	6823      	ldr	r3, [r4, #0]
 800923e:	6922      	ldr	r2, [r4, #16]
 8009240:	1a98      	subs	r0, r3, r2
 8009242:	6963      	ldr	r3, [r4, #20]
 8009244:	b2f6      	uxtb	r6, r6
 8009246:	4283      	cmp	r3, r0
 8009248:	4637      	mov	r7, r6
 800924a:	dc05      	bgt.n	8009258 <__swbuf_r+0x4e>
 800924c:	4621      	mov	r1, r4
 800924e:	4628      	mov	r0, r5
 8009250:	f7ff ff40 	bl	80090d4 <_fflush_r>
 8009254:	2800      	cmp	r0, #0
 8009256:	d1ed      	bne.n	8009234 <__swbuf_r+0x2a>
 8009258:	68a3      	ldr	r3, [r4, #8]
 800925a:	3b01      	subs	r3, #1
 800925c:	60a3      	str	r3, [r4, #8]
 800925e:	6823      	ldr	r3, [r4, #0]
 8009260:	1c5a      	adds	r2, r3, #1
 8009262:	6022      	str	r2, [r4, #0]
 8009264:	701e      	strb	r6, [r3, #0]
 8009266:	6962      	ldr	r2, [r4, #20]
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	429a      	cmp	r2, r3
 800926c:	d004      	beq.n	8009278 <__swbuf_r+0x6e>
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	07db      	lsls	r3, r3, #31
 8009272:	d5e1      	bpl.n	8009238 <__swbuf_r+0x2e>
 8009274:	2e0a      	cmp	r6, #10
 8009276:	d1df      	bne.n	8009238 <__swbuf_r+0x2e>
 8009278:	4621      	mov	r1, r4
 800927a:	4628      	mov	r0, r5
 800927c:	f7ff ff2a 	bl	80090d4 <_fflush_r>
 8009280:	2800      	cmp	r0, #0
 8009282:	d0d9      	beq.n	8009238 <__swbuf_r+0x2e>
 8009284:	e7d6      	b.n	8009234 <__swbuf_r+0x2a>
	...

08009288 <__swsetup_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4b29      	ldr	r3, [pc, #164]	@ (8009330 <__swsetup_r+0xa8>)
 800928c:	4605      	mov	r5, r0
 800928e:	6818      	ldr	r0, [r3, #0]
 8009290:	460c      	mov	r4, r1
 8009292:	b118      	cbz	r0, 800929c <__swsetup_r+0x14>
 8009294:	6a03      	ldr	r3, [r0, #32]
 8009296:	b90b      	cbnz	r3, 800929c <__swsetup_r+0x14>
 8009298:	f7fc fcf0 	bl	8005c7c <__sinit>
 800929c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092a0:	0719      	lsls	r1, r3, #28
 80092a2:	d422      	bmi.n	80092ea <__swsetup_r+0x62>
 80092a4:	06da      	lsls	r2, r3, #27
 80092a6:	d407      	bmi.n	80092b8 <__swsetup_r+0x30>
 80092a8:	2209      	movs	r2, #9
 80092aa:	602a      	str	r2, [r5, #0]
 80092ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092b0:	81a3      	strh	r3, [r4, #12]
 80092b2:	f04f 30ff 	mov.w	r0, #4294967295
 80092b6:	e033      	b.n	8009320 <__swsetup_r+0x98>
 80092b8:	0758      	lsls	r0, r3, #29
 80092ba:	d512      	bpl.n	80092e2 <__swsetup_r+0x5a>
 80092bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092be:	b141      	cbz	r1, 80092d2 <__swsetup_r+0x4a>
 80092c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092c4:	4299      	cmp	r1, r3
 80092c6:	d002      	beq.n	80092ce <__swsetup_r+0x46>
 80092c8:	4628      	mov	r0, r5
 80092ca:	f7fd fc95 	bl	8006bf8 <_free_r>
 80092ce:	2300      	movs	r3, #0
 80092d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80092d2:	89a3      	ldrh	r3, [r4, #12]
 80092d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80092d8:	81a3      	strh	r3, [r4, #12]
 80092da:	2300      	movs	r3, #0
 80092dc:	6063      	str	r3, [r4, #4]
 80092de:	6923      	ldr	r3, [r4, #16]
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	f043 0308 	orr.w	r3, r3, #8
 80092e8:	81a3      	strh	r3, [r4, #12]
 80092ea:	6923      	ldr	r3, [r4, #16]
 80092ec:	b94b      	cbnz	r3, 8009302 <__swsetup_r+0x7a>
 80092ee:	89a3      	ldrh	r3, [r4, #12]
 80092f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80092f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092f8:	d003      	beq.n	8009302 <__swsetup_r+0x7a>
 80092fa:	4621      	mov	r1, r4
 80092fc:	4628      	mov	r0, r5
 80092fe:	f000 fcbd 	bl	8009c7c <__smakebuf_r>
 8009302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009306:	f013 0201 	ands.w	r2, r3, #1
 800930a:	d00a      	beq.n	8009322 <__swsetup_r+0x9a>
 800930c:	2200      	movs	r2, #0
 800930e:	60a2      	str	r2, [r4, #8]
 8009310:	6962      	ldr	r2, [r4, #20]
 8009312:	4252      	negs	r2, r2
 8009314:	61a2      	str	r2, [r4, #24]
 8009316:	6922      	ldr	r2, [r4, #16]
 8009318:	b942      	cbnz	r2, 800932c <__swsetup_r+0xa4>
 800931a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800931e:	d1c5      	bne.n	80092ac <__swsetup_r+0x24>
 8009320:	bd38      	pop	{r3, r4, r5, pc}
 8009322:	0799      	lsls	r1, r3, #30
 8009324:	bf58      	it	pl
 8009326:	6962      	ldrpl	r2, [r4, #20]
 8009328:	60a2      	str	r2, [r4, #8]
 800932a:	e7f4      	b.n	8009316 <__swsetup_r+0x8e>
 800932c:	2000      	movs	r0, #0
 800932e:	e7f7      	b.n	8009320 <__swsetup_r+0x98>
 8009330:	2000002c 	.word	0x2000002c

08009334 <memmove>:
 8009334:	4288      	cmp	r0, r1
 8009336:	b510      	push	{r4, lr}
 8009338:	eb01 0402 	add.w	r4, r1, r2
 800933c:	d902      	bls.n	8009344 <memmove+0x10>
 800933e:	4284      	cmp	r4, r0
 8009340:	4623      	mov	r3, r4
 8009342:	d807      	bhi.n	8009354 <memmove+0x20>
 8009344:	1e43      	subs	r3, r0, #1
 8009346:	42a1      	cmp	r1, r4
 8009348:	d008      	beq.n	800935c <memmove+0x28>
 800934a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800934e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009352:	e7f8      	b.n	8009346 <memmove+0x12>
 8009354:	4402      	add	r2, r0
 8009356:	4601      	mov	r1, r0
 8009358:	428a      	cmp	r2, r1
 800935a:	d100      	bne.n	800935e <memmove+0x2a>
 800935c:	bd10      	pop	{r4, pc}
 800935e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009366:	e7f7      	b.n	8009358 <memmove+0x24>

08009368 <_sbrk_r>:
 8009368:	b538      	push	{r3, r4, r5, lr}
 800936a:	4d06      	ldr	r5, [pc, #24]	@ (8009384 <_sbrk_r+0x1c>)
 800936c:	2300      	movs	r3, #0
 800936e:	4604      	mov	r4, r0
 8009370:	4608      	mov	r0, r1
 8009372:	602b      	str	r3, [r5, #0]
 8009374:	f7f8 fb54 	bl	8001a20 <_sbrk>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d102      	bne.n	8009382 <_sbrk_r+0x1a>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	b103      	cbz	r3, 8009382 <_sbrk_r+0x1a>
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	bd38      	pop	{r3, r4, r5, pc}
 8009384:	20000518 	.word	0x20000518

08009388 <memcpy>:
 8009388:	440a      	add	r2, r1
 800938a:	4291      	cmp	r1, r2
 800938c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009390:	d100      	bne.n	8009394 <memcpy+0xc>
 8009392:	4770      	bx	lr
 8009394:	b510      	push	{r4, lr}
 8009396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800939a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800939e:	4291      	cmp	r1, r2
 80093a0:	d1f9      	bne.n	8009396 <memcpy+0xe>
 80093a2:	bd10      	pop	{r4, pc}
 80093a4:	0000      	movs	r0, r0
	...

080093a8 <nan>:
 80093a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80093b0 <nan+0x8>
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	00000000 	.word	0x00000000
 80093b4:	7ff80000 	.word	0x7ff80000

080093b8 <__assert_func>:
 80093b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093ba:	4614      	mov	r4, r2
 80093bc:	461a      	mov	r2, r3
 80093be:	4b09      	ldr	r3, [pc, #36]	@ (80093e4 <__assert_func+0x2c>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4605      	mov	r5, r0
 80093c4:	68d8      	ldr	r0, [r3, #12]
 80093c6:	b954      	cbnz	r4, 80093de <__assert_func+0x26>
 80093c8:	4b07      	ldr	r3, [pc, #28]	@ (80093e8 <__assert_func+0x30>)
 80093ca:	461c      	mov	r4, r3
 80093cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093d0:	9100      	str	r1, [sp, #0]
 80093d2:	462b      	mov	r3, r5
 80093d4:	4905      	ldr	r1, [pc, #20]	@ (80093ec <__assert_func+0x34>)
 80093d6:	f000 fc19 	bl	8009c0c <fiprintf>
 80093da:	f000 fcad 	bl	8009d38 <abort>
 80093de:	4b04      	ldr	r3, [pc, #16]	@ (80093f0 <__assert_func+0x38>)
 80093e0:	e7f4      	b.n	80093cc <__assert_func+0x14>
 80093e2:	bf00      	nop
 80093e4:	2000002c 	.word	0x2000002c
 80093e8:	0800a2d0 	.word	0x0800a2d0
 80093ec:	0800a2a2 	.word	0x0800a2a2
 80093f0:	0800a295 	.word	0x0800a295

080093f4 <_calloc_r>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	fba1 5402 	umull	r5, r4, r1, r2
 80093fa:	b93c      	cbnz	r4, 800940c <_calloc_r+0x18>
 80093fc:	4629      	mov	r1, r5
 80093fe:	f7fd fc6f 	bl	8006ce0 <_malloc_r>
 8009402:	4606      	mov	r6, r0
 8009404:	b928      	cbnz	r0, 8009412 <_calloc_r+0x1e>
 8009406:	2600      	movs	r6, #0
 8009408:	4630      	mov	r0, r6
 800940a:	bd70      	pop	{r4, r5, r6, pc}
 800940c:	220c      	movs	r2, #12
 800940e:	6002      	str	r2, [r0, #0]
 8009410:	e7f9      	b.n	8009406 <_calloc_r+0x12>
 8009412:	462a      	mov	r2, r5
 8009414:	4621      	mov	r1, r4
 8009416:	f7fc fd08 	bl	8005e2a <memset>
 800941a:	e7f5      	b.n	8009408 <_calloc_r+0x14>

0800941c <rshift>:
 800941c:	6903      	ldr	r3, [r0, #16]
 800941e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009422:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009426:	ea4f 1261 	mov.w	r2, r1, asr #5
 800942a:	f100 0414 	add.w	r4, r0, #20
 800942e:	dd45      	ble.n	80094bc <rshift+0xa0>
 8009430:	f011 011f 	ands.w	r1, r1, #31
 8009434:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009438:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800943c:	d10c      	bne.n	8009458 <rshift+0x3c>
 800943e:	f100 0710 	add.w	r7, r0, #16
 8009442:	4629      	mov	r1, r5
 8009444:	42b1      	cmp	r1, r6
 8009446:	d334      	bcc.n	80094b2 <rshift+0x96>
 8009448:	1a9b      	subs	r3, r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	1eea      	subs	r2, r5, #3
 800944e:	4296      	cmp	r6, r2
 8009450:	bf38      	it	cc
 8009452:	2300      	movcc	r3, #0
 8009454:	4423      	add	r3, r4
 8009456:	e015      	b.n	8009484 <rshift+0x68>
 8009458:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800945c:	f1c1 0820 	rsb	r8, r1, #32
 8009460:	40cf      	lsrs	r7, r1
 8009462:	f105 0e04 	add.w	lr, r5, #4
 8009466:	46a1      	mov	r9, r4
 8009468:	4576      	cmp	r6, lr
 800946a:	46f4      	mov	ip, lr
 800946c:	d815      	bhi.n	800949a <rshift+0x7e>
 800946e:	1a9a      	subs	r2, r3, r2
 8009470:	0092      	lsls	r2, r2, #2
 8009472:	3a04      	subs	r2, #4
 8009474:	3501      	adds	r5, #1
 8009476:	42ae      	cmp	r6, r5
 8009478:	bf38      	it	cc
 800947a:	2200      	movcc	r2, #0
 800947c:	18a3      	adds	r3, r4, r2
 800947e:	50a7      	str	r7, [r4, r2]
 8009480:	b107      	cbz	r7, 8009484 <rshift+0x68>
 8009482:	3304      	adds	r3, #4
 8009484:	1b1a      	subs	r2, r3, r4
 8009486:	42a3      	cmp	r3, r4
 8009488:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800948c:	bf08      	it	eq
 800948e:	2300      	moveq	r3, #0
 8009490:	6102      	str	r2, [r0, #16]
 8009492:	bf08      	it	eq
 8009494:	6143      	streq	r3, [r0, #20]
 8009496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800949a:	f8dc c000 	ldr.w	ip, [ip]
 800949e:	fa0c fc08 	lsl.w	ip, ip, r8
 80094a2:	ea4c 0707 	orr.w	r7, ip, r7
 80094a6:	f849 7b04 	str.w	r7, [r9], #4
 80094aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80094ae:	40cf      	lsrs	r7, r1
 80094b0:	e7da      	b.n	8009468 <rshift+0x4c>
 80094b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80094b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80094ba:	e7c3      	b.n	8009444 <rshift+0x28>
 80094bc:	4623      	mov	r3, r4
 80094be:	e7e1      	b.n	8009484 <rshift+0x68>

080094c0 <__hexdig_fun>:
 80094c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80094c4:	2b09      	cmp	r3, #9
 80094c6:	d802      	bhi.n	80094ce <__hexdig_fun+0xe>
 80094c8:	3820      	subs	r0, #32
 80094ca:	b2c0      	uxtb	r0, r0
 80094cc:	4770      	bx	lr
 80094ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80094d2:	2b05      	cmp	r3, #5
 80094d4:	d801      	bhi.n	80094da <__hexdig_fun+0x1a>
 80094d6:	3847      	subs	r0, #71	@ 0x47
 80094d8:	e7f7      	b.n	80094ca <__hexdig_fun+0xa>
 80094da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80094de:	2b05      	cmp	r3, #5
 80094e0:	d801      	bhi.n	80094e6 <__hexdig_fun+0x26>
 80094e2:	3827      	subs	r0, #39	@ 0x27
 80094e4:	e7f1      	b.n	80094ca <__hexdig_fun+0xa>
 80094e6:	2000      	movs	r0, #0
 80094e8:	4770      	bx	lr
	...

080094ec <__gethex>:
 80094ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f0:	b085      	sub	sp, #20
 80094f2:	468a      	mov	sl, r1
 80094f4:	9302      	str	r3, [sp, #8]
 80094f6:	680b      	ldr	r3, [r1, #0]
 80094f8:	9001      	str	r0, [sp, #4]
 80094fa:	4690      	mov	r8, r2
 80094fc:	1c9c      	adds	r4, r3, #2
 80094fe:	46a1      	mov	r9, r4
 8009500:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009504:	2830      	cmp	r0, #48	@ 0x30
 8009506:	d0fa      	beq.n	80094fe <__gethex+0x12>
 8009508:	eba9 0303 	sub.w	r3, r9, r3
 800950c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009510:	f7ff ffd6 	bl	80094c0 <__hexdig_fun>
 8009514:	4605      	mov	r5, r0
 8009516:	2800      	cmp	r0, #0
 8009518:	d168      	bne.n	80095ec <__gethex+0x100>
 800951a:	49a0      	ldr	r1, [pc, #640]	@ (800979c <__gethex+0x2b0>)
 800951c:	2201      	movs	r2, #1
 800951e:	4648      	mov	r0, r9
 8009520:	f7fc fc8b 	bl	8005e3a <strncmp>
 8009524:	4607      	mov	r7, r0
 8009526:	2800      	cmp	r0, #0
 8009528:	d167      	bne.n	80095fa <__gethex+0x10e>
 800952a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800952e:	4626      	mov	r6, r4
 8009530:	f7ff ffc6 	bl	80094c0 <__hexdig_fun>
 8009534:	2800      	cmp	r0, #0
 8009536:	d062      	beq.n	80095fe <__gethex+0x112>
 8009538:	4623      	mov	r3, r4
 800953a:	7818      	ldrb	r0, [r3, #0]
 800953c:	2830      	cmp	r0, #48	@ 0x30
 800953e:	4699      	mov	r9, r3
 8009540:	f103 0301 	add.w	r3, r3, #1
 8009544:	d0f9      	beq.n	800953a <__gethex+0x4e>
 8009546:	f7ff ffbb 	bl	80094c0 <__hexdig_fun>
 800954a:	fab0 f580 	clz	r5, r0
 800954e:	096d      	lsrs	r5, r5, #5
 8009550:	f04f 0b01 	mov.w	fp, #1
 8009554:	464a      	mov	r2, r9
 8009556:	4616      	mov	r6, r2
 8009558:	3201      	adds	r2, #1
 800955a:	7830      	ldrb	r0, [r6, #0]
 800955c:	f7ff ffb0 	bl	80094c0 <__hexdig_fun>
 8009560:	2800      	cmp	r0, #0
 8009562:	d1f8      	bne.n	8009556 <__gethex+0x6a>
 8009564:	498d      	ldr	r1, [pc, #564]	@ (800979c <__gethex+0x2b0>)
 8009566:	2201      	movs	r2, #1
 8009568:	4630      	mov	r0, r6
 800956a:	f7fc fc66 	bl	8005e3a <strncmp>
 800956e:	2800      	cmp	r0, #0
 8009570:	d13f      	bne.n	80095f2 <__gethex+0x106>
 8009572:	b944      	cbnz	r4, 8009586 <__gethex+0x9a>
 8009574:	1c74      	adds	r4, r6, #1
 8009576:	4622      	mov	r2, r4
 8009578:	4616      	mov	r6, r2
 800957a:	3201      	adds	r2, #1
 800957c:	7830      	ldrb	r0, [r6, #0]
 800957e:	f7ff ff9f 	bl	80094c0 <__hexdig_fun>
 8009582:	2800      	cmp	r0, #0
 8009584:	d1f8      	bne.n	8009578 <__gethex+0x8c>
 8009586:	1ba4      	subs	r4, r4, r6
 8009588:	00a7      	lsls	r7, r4, #2
 800958a:	7833      	ldrb	r3, [r6, #0]
 800958c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009590:	2b50      	cmp	r3, #80	@ 0x50
 8009592:	d13e      	bne.n	8009612 <__gethex+0x126>
 8009594:	7873      	ldrb	r3, [r6, #1]
 8009596:	2b2b      	cmp	r3, #43	@ 0x2b
 8009598:	d033      	beq.n	8009602 <__gethex+0x116>
 800959a:	2b2d      	cmp	r3, #45	@ 0x2d
 800959c:	d034      	beq.n	8009608 <__gethex+0x11c>
 800959e:	1c71      	adds	r1, r6, #1
 80095a0:	2400      	movs	r4, #0
 80095a2:	7808      	ldrb	r0, [r1, #0]
 80095a4:	f7ff ff8c 	bl	80094c0 <__hexdig_fun>
 80095a8:	1e43      	subs	r3, r0, #1
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	2b18      	cmp	r3, #24
 80095ae:	d830      	bhi.n	8009612 <__gethex+0x126>
 80095b0:	f1a0 0210 	sub.w	r2, r0, #16
 80095b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80095b8:	f7ff ff82 	bl	80094c0 <__hexdig_fun>
 80095bc:	f100 3cff 	add.w	ip, r0, #4294967295
 80095c0:	fa5f fc8c 	uxtb.w	ip, ip
 80095c4:	f1bc 0f18 	cmp.w	ip, #24
 80095c8:	f04f 030a 	mov.w	r3, #10
 80095cc:	d91e      	bls.n	800960c <__gethex+0x120>
 80095ce:	b104      	cbz	r4, 80095d2 <__gethex+0xe6>
 80095d0:	4252      	negs	r2, r2
 80095d2:	4417      	add	r7, r2
 80095d4:	f8ca 1000 	str.w	r1, [sl]
 80095d8:	b1ed      	cbz	r5, 8009616 <__gethex+0x12a>
 80095da:	f1bb 0f00 	cmp.w	fp, #0
 80095de:	bf0c      	ite	eq
 80095e0:	2506      	moveq	r5, #6
 80095e2:	2500      	movne	r5, #0
 80095e4:	4628      	mov	r0, r5
 80095e6:	b005      	add	sp, #20
 80095e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ec:	2500      	movs	r5, #0
 80095ee:	462c      	mov	r4, r5
 80095f0:	e7b0      	b.n	8009554 <__gethex+0x68>
 80095f2:	2c00      	cmp	r4, #0
 80095f4:	d1c7      	bne.n	8009586 <__gethex+0x9a>
 80095f6:	4627      	mov	r7, r4
 80095f8:	e7c7      	b.n	800958a <__gethex+0x9e>
 80095fa:	464e      	mov	r6, r9
 80095fc:	462f      	mov	r7, r5
 80095fe:	2501      	movs	r5, #1
 8009600:	e7c3      	b.n	800958a <__gethex+0x9e>
 8009602:	2400      	movs	r4, #0
 8009604:	1cb1      	adds	r1, r6, #2
 8009606:	e7cc      	b.n	80095a2 <__gethex+0xb6>
 8009608:	2401      	movs	r4, #1
 800960a:	e7fb      	b.n	8009604 <__gethex+0x118>
 800960c:	fb03 0002 	mla	r0, r3, r2, r0
 8009610:	e7ce      	b.n	80095b0 <__gethex+0xc4>
 8009612:	4631      	mov	r1, r6
 8009614:	e7de      	b.n	80095d4 <__gethex+0xe8>
 8009616:	eba6 0309 	sub.w	r3, r6, r9
 800961a:	3b01      	subs	r3, #1
 800961c:	4629      	mov	r1, r5
 800961e:	2b07      	cmp	r3, #7
 8009620:	dc0a      	bgt.n	8009638 <__gethex+0x14c>
 8009622:	9801      	ldr	r0, [sp, #4]
 8009624:	f7fd fbe8 	bl	8006df8 <_Balloc>
 8009628:	4604      	mov	r4, r0
 800962a:	b940      	cbnz	r0, 800963e <__gethex+0x152>
 800962c:	4b5c      	ldr	r3, [pc, #368]	@ (80097a0 <__gethex+0x2b4>)
 800962e:	4602      	mov	r2, r0
 8009630:	21e4      	movs	r1, #228	@ 0xe4
 8009632:	485c      	ldr	r0, [pc, #368]	@ (80097a4 <__gethex+0x2b8>)
 8009634:	f7ff fec0 	bl	80093b8 <__assert_func>
 8009638:	3101      	adds	r1, #1
 800963a:	105b      	asrs	r3, r3, #1
 800963c:	e7ef      	b.n	800961e <__gethex+0x132>
 800963e:	f100 0a14 	add.w	sl, r0, #20
 8009642:	2300      	movs	r3, #0
 8009644:	4655      	mov	r5, sl
 8009646:	469b      	mov	fp, r3
 8009648:	45b1      	cmp	r9, r6
 800964a:	d337      	bcc.n	80096bc <__gethex+0x1d0>
 800964c:	f845 bb04 	str.w	fp, [r5], #4
 8009650:	eba5 050a 	sub.w	r5, r5, sl
 8009654:	10ad      	asrs	r5, r5, #2
 8009656:	6125      	str	r5, [r4, #16]
 8009658:	4658      	mov	r0, fp
 800965a:	f7fd fcbf 	bl	8006fdc <__hi0bits>
 800965e:	016d      	lsls	r5, r5, #5
 8009660:	f8d8 6000 	ldr.w	r6, [r8]
 8009664:	1a2d      	subs	r5, r5, r0
 8009666:	42b5      	cmp	r5, r6
 8009668:	dd54      	ble.n	8009714 <__gethex+0x228>
 800966a:	1bad      	subs	r5, r5, r6
 800966c:	4629      	mov	r1, r5
 800966e:	4620      	mov	r0, r4
 8009670:	f7fe f853 	bl	800771a <__any_on>
 8009674:	4681      	mov	r9, r0
 8009676:	b178      	cbz	r0, 8009698 <__gethex+0x1ac>
 8009678:	1e6b      	subs	r3, r5, #1
 800967a:	1159      	asrs	r1, r3, #5
 800967c:	f003 021f 	and.w	r2, r3, #31
 8009680:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009684:	f04f 0901 	mov.w	r9, #1
 8009688:	fa09 f202 	lsl.w	r2, r9, r2
 800968c:	420a      	tst	r2, r1
 800968e:	d003      	beq.n	8009698 <__gethex+0x1ac>
 8009690:	454b      	cmp	r3, r9
 8009692:	dc36      	bgt.n	8009702 <__gethex+0x216>
 8009694:	f04f 0902 	mov.w	r9, #2
 8009698:	4629      	mov	r1, r5
 800969a:	4620      	mov	r0, r4
 800969c:	f7ff febe 	bl	800941c <rshift>
 80096a0:	442f      	add	r7, r5
 80096a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096a6:	42bb      	cmp	r3, r7
 80096a8:	da42      	bge.n	8009730 <__gethex+0x244>
 80096aa:	9801      	ldr	r0, [sp, #4]
 80096ac:	4621      	mov	r1, r4
 80096ae:	f7fd fbe3 	bl	8006e78 <_Bfree>
 80096b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096b4:	2300      	movs	r3, #0
 80096b6:	6013      	str	r3, [r2, #0]
 80096b8:	25a3      	movs	r5, #163	@ 0xa3
 80096ba:	e793      	b.n	80095e4 <__gethex+0xf8>
 80096bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80096c0:	2a2e      	cmp	r2, #46	@ 0x2e
 80096c2:	d012      	beq.n	80096ea <__gethex+0x1fe>
 80096c4:	2b20      	cmp	r3, #32
 80096c6:	d104      	bne.n	80096d2 <__gethex+0x1e6>
 80096c8:	f845 bb04 	str.w	fp, [r5], #4
 80096cc:	f04f 0b00 	mov.w	fp, #0
 80096d0:	465b      	mov	r3, fp
 80096d2:	7830      	ldrb	r0, [r6, #0]
 80096d4:	9303      	str	r3, [sp, #12]
 80096d6:	f7ff fef3 	bl	80094c0 <__hexdig_fun>
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	f000 000f 	and.w	r0, r0, #15
 80096e0:	4098      	lsls	r0, r3
 80096e2:	ea4b 0b00 	orr.w	fp, fp, r0
 80096e6:	3304      	adds	r3, #4
 80096e8:	e7ae      	b.n	8009648 <__gethex+0x15c>
 80096ea:	45b1      	cmp	r9, r6
 80096ec:	d8ea      	bhi.n	80096c4 <__gethex+0x1d8>
 80096ee:	492b      	ldr	r1, [pc, #172]	@ (800979c <__gethex+0x2b0>)
 80096f0:	9303      	str	r3, [sp, #12]
 80096f2:	2201      	movs	r2, #1
 80096f4:	4630      	mov	r0, r6
 80096f6:	f7fc fba0 	bl	8005e3a <strncmp>
 80096fa:	9b03      	ldr	r3, [sp, #12]
 80096fc:	2800      	cmp	r0, #0
 80096fe:	d1e1      	bne.n	80096c4 <__gethex+0x1d8>
 8009700:	e7a2      	b.n	8009648 <__gethex+0x15c>
 8009702:	1ea9      	subs	r1, r5, #2
 8009704:	4620      	mov	r0, r4
 8009706:	f7fe f808 	bl	800771a <__any_on>
 800970a:	2800      	cmp	r0, #0
 800970c:	d0c2      	beq.n	8009694 <__gethex+0x1a8>
 800970e:	f04f 0903 	mov.w	r9, #3
 8009712:	e7c1      	b.n	8009698 <__gethex+0x1ac>
 8009714:	da09      	bge.n	800972a <__gethex+0x23e>
 8009716:	1b75      	subs	r5, r6, r5
 8009718:	4621      	mov	r1, r4
 800971a:	9801      	ldr	r0, [sp, #4]
 800971c:	462a      	mov	r2, r5
 800971e:	f7fd fdc3 	bl	80072a8 <__lshift>
 8009722:	1b7f      	subs	r7, r7, r5
 8009724:	4604      	mov	r4, r0
 8009726:	f100 0a14 	add.w	sl, r0, #20
 800972a:	f04f 0900 	mov.w	r9, #0
 800972e:	e7b8      	b.n	80096a2 <__gethex+0x1b6>
 8009730:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009734:	42bd      	cmp	r5, r7
 8009736:	dd6f      	ble.n	8009818 <__gethex+0x32c>
 8009738:	1bed      	subs	r5, r5, r7
 800973a:	42ae      	cmp	r6, r5
 800973c:	dc34      	bgt.n	80097a8 <__gethex+0x2bc>
 800973e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009742:	2b02      	cmp	r3, #2
 8009744:	d022      	beq.n	800978c <__gethex+0x2a0>
 8009746:	2b03      	cmp	r3, #3
 8009748:	d024      	beq.n	8009794 <__gethex+0x2a8>
 800974a:	2b01      	cmp	r3, #1
 800974c:	d115      	bne.n	800977a <__gethex+0x28e>
 800974e:	42ae      	cmp	r6, r5
 8009750:	d113      	bne.n	800977a <__gethex+0x28e>
 8009752:	2e01      	cmp	r6, #1
 8009754:	d10b      	bne.n	800976e <__gethex+0x282>
 8009756:	9a02      	ldr	r2, [sp, #8]
 8009758:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	2301      	movs	r3, #1
 8009760:	6123      	str	r3, [r4, #16]
 8009762:	f8ca 3000 	str.w	r3, [sl]
 8009766:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009768:	2562      	movs	r5, #98	@ 0x62
 800976a:	601c      	str	r4, [r3, #0]
 800976c:	e73a      	b.n	80095e4 <__gethex+0xf8>
 800976e:	1e71      	subs	r1, r6, #1
 8009770:	4620      	mov	r0, r4
 8009772:	f7fd ffd2 	bl	800771a <__any_on>
 8009776:	2800      	cmp	r0, #0
 8009778:	d1ed      	bne.n	8009756 <__gethex+0x26a>
 800977a:	9801      	ldr	r0, [sp, #4]
 800977c:	4621      	mov	r1, r4
 800977e:	f7fd fb7b 	bl	8006e78 <_Bfree>
 8009782:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009784:	2300      	movs	r3, #0
 8009786:	6013      	str	r3, [r2, #0]
 8009788:	2550      	movs	r5, #80	@ 0x50
 800978a:	e72b      	b.n	80095e4 <__gethex+0xf8>
 800978c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1f3      	bne.n	800977a <__gethex+0x28e>
 8009792:	e7e0      	b.n	8009756 <__gethex+0x26a>
 8009794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1dd      	bne.n	8009756 <__gethex+0x26a>
 800979a:	e7ee      	b.n	800977a <__gethex+0x28e>
 800979c:	0800a108 	.word	0x0800a108
 80097a0:	08009f9b 	.word	0x08009f9b
 80097a4:	0800a2d1 	.word	0x0800a2d1
 80097a8:	1e6f      	subs	r7, r5, #1
 80097aa:	f1b9 0f00 	cmp.w	r9, #0
 80097ae:	d130      	bne.n	8009812 <__gethex+0x326>
 80097b0:	b127      	cbz	r7, 80097bc <__gethex+0x2d0>
 80097b2:	4639      	mov	r1, r7
 80097b4:	4620      	mov	r0, r4
 80097b6:	f7fd ffb0 	bl	800771a <__any_on>
 80097ba:	4681      	mov	r9, r0
 80097bc:	117a      	asrs	r2, r7, #5
 80097be:	2301      	movs	r3, #1
 80097c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80097c4:	f007 071f 	and.w	r7, r7, #31
 80097c8:	40bb      	lsls	r3, r7
 80097ca:	4213      	tst	r3, r2
 80097cc:	4629      	mov	r1, r5
 80097ce:	4620      	mov	r0, r4
 80097d0:	bf18      	it	ne
 80097d2:	f049 0902 	orrne.w	r9, r9, #2
 80097d6:	f7ff fe21 	bl	800941c <rshift>
 80097da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80097de:	1b76      	subs	r6, r6, r5
 80097e0:	2502      	movs	r5, #2
 80097e2:	f1b9 0f00 	cmp.w	r9, #0
 80097e6:	d047      	beq.n	8009878 <__gethex+0x38c>
 80097e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d015      	beq.n	800981c <__gethex+0x330>
 80097f0:	2b03      	cmp	r3, #3
 80097f2:	d017      	beq.n	8009824 <__gethex+0x338>
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d109      	bne.n	800980c <__gethex+0x320>
 80097f8:	f019 0f02 	tst.w	r9, #2
 80097fc:	d006      	beq.n	800980c <__gethex+0x320>
 80097fe:	f8da 3000 	ldr.w	r3, [sl]
 8009802:	ea49 0903 	orr.w	r9, r9, r3
 8009806:	f019 0f01 	tst.w	r9, #1
 800980a:	d10e      	bne.n	800982a <__gethex+0x33e>
 800980c:	f045 0510 	orr.w	r5, r5, #16
 8009810:	e032      	b.n	8009878 <__gethex+0x38c>
 8009812:	f04f 0901 	mov.w	r9, #1
 8009816:	e7d1      	b.n	80097bc <__gethex+0x2d0>
 8009818:	2501      	movs	r5, #1
 800981a:	e7e2      	b.n	80097e2 <__gethex+0x2f6>
 800981c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800981e:	f1c3 0301 	rsb	r3, r3, #1
 8009822:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009826:	2b00      	cmp	r3, #0
 8009828:	d0f0      	beq.n	800980c <__gethex+0x320>
 800982a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800982e:	f104 0314 	add.w	r3, r4, #20
 8009832:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009836:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800983a:	f04f 0c00 	mov.w	ip, #0
 800983e:	4618      	mov	r0, r3
 8009840:	f853 2b04 	ldr.w	r2, [r3], #4
 8009844:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009848:	d01b      	beq.n	8009882 <__gethex+0x396>
 800984a:	3201      	adds	r2, #1
 800984c:	6002      	str	r2, [r0, #0]
 800984e:	2d02      	cmp	r5, #2
 8009850:	f104 0314 	add.w	r3, r4, #20
 8009854:	d13c      	bne.n	80098d0 <__gethex+0x3e4>
 8009856:	f8d8 2000 	ldr.w	r2, [r8]
 800985a:	3a01      	subs	r2, #1
 800985c:	42b2      	cmp	r2, r6
 800985e:	d109      	bne.n	8009874 <__gethex+0x388>
 8009860:	1171      	asrs	r1, r6, #5
 8009862:	2201      	movs	r2, #1
 8009864:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009868:	f006 061f 	and.w	r6, r6, #31
 800986c:	fa02 f606 	lsl.w	r6, r2, r6
 8009870:	421e      	tst	r6, r3
 8009872:	d13a      	bne.n	80098ea <__gethex+0x3fe>
 8009874:	f045 0520 	orr.w	r5, r5, #32
 8009878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800987a:	601c      	str	r4, [r3, #0]
 800987c:	9b02      	ldr	r3, [sp, #8]
 800987e:	601f      	str	r7, [r3, #0]
 8009880:	e6b0      	b.n	80095e4 <__gethex+0xf8>
 8009882:	4299      	cmp	r1, r3
 8009884:	f843 cc04 	str.w	ip, [r3, #-4]
 8009888:	d8d9      	bhi.n	800983e <__gethex+0x352>
 800988a:	68a3      	ldr	r3, [r4, #8]
 800988c:	459b      	cmp	fp, r3
 800988e:	db17      	blt.n	80098c0 <__gethex+0x3d4>
 8009890:	6861      	ldr	r1, [r4, #4]
 8009892:	9801      	ldr	r0, [sp, #4]
 8009894:	3101      	adds	r1, #1
 8009896:	f7fd faaf 	bl	8006df8 <_Balloc>
 800989a:	4681      	mov	r9, r0
 800989c:	b918      	cbnz	r0, 80098a6 <__gethex+0x3ba>
 800989e:	4b1a      	ldr	r3, [pc, #104]	@ (8009908 <__gethex+0x41c>)
 80098a0:	4602      	mov	r2, r0
 80098a2:	2184      	movs	r1, #132	@ 0x84
 80098a4:	e6c5      	b.n	8009632 <__gethex+0x146>
 80098a6:	6922      	ldr	r2, [r4, #16]
 80098a8:	3202      	adds	r2, #2
 80098aa:	f104 010c 	add.w	r1, r4, #12
 80098ae:	0092      	lsls	r2, r2, #2
 80098b0:	300c      	adds	r0, #12
 80098b2:	f7ff fd69 	bl	8009388 <memcpy>
 80098b6:	4621      	mov	r1, r4
 80098b8:	9801      	ldr	r0, [sp, #4]
 80098ba:	f7fd fadd 	bl	8006e78 <_Bfree>
 80098be:	464c      	mov	r4, r9
 80098c0:	6923      	ldr	r3, [r4, #16]
 80098c2:	1c5a      	adds	r2, r3, #1
 80098c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098c8:	6122      	str	r2, [r4, #16]
 80098ca:	2201      	movs	r2, #1
 80098cc:	615a      	str	r2, [r3, #20]
 80098ce:	e7be      	b.n	800984e <__gethex+0x362>
 80098d0:	6922      	ldr	r2, [r4, #16]
 80098d2:	455a      	cmp	r2, fp
 80098d4:	dd0b      	ble.n	80098ee <__gethex+0x402>
 80098d6:	2101      	movs	r1, #1
 80098d8:	4620      	mov	r0, r4
 80098da:	f7ff fd9f 	bl	800941c <rshift>
 80098de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098e2:	3701      	adds	r7, #1
 80098e4:	42bb      	cmp	r3, r7
 80098e6:	f6ff aee0 	blt.w	80096aa <__gethex+0x1be>
 80098ea:	2501      	movs	r5, #1
 80098ec:	e7c2      	b.n	8009874 <__gethex+0x388>
 80098ee:	f016 061f 	ands.w	r6, r6, #31
 80098f2:	d0fa      	beq.n	80098ea <__gethex+0x3fe>
 80098f4:	4453      	add	r3, sl
 80098f6:	f1c6 0620 	rsb	r6, r6, #32
 80098fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80098fe:	f7fd fb6d 	bl	8006fdc <__hi0bits>
 8009902:	42b0      	cmp	r0, r6
 8009904:	dbe7      	blt.n	80098d6 <__gethex+0x3ea>
 8009906:	e7f0      	b.n	80098ea <__gethex+0x3fe>
 8009908:	08009f9b 	.word	0x08009f9b

0800990c <L_shift>:
 800990c:	f1c2 0208 	rsb	r2, r2, #8
 8009910:	0092      	lsls	r2, r2, #2
 8009912:	b570      	push	{r4, r5, r6, lr}
 8009914:	f1c2 0620 	rsb	r6, r2, #32
 8009918:	6843      	ldr	r3, [r0, #4]
 800991a:	6804      	ldr	r4, [r0, #0]
 800991c:	fa03 f506 	lsl.w	r5, r3, r6
 8009920:	432c      	orrs	r4, r5
 8009922:	40d3      	lsrs	r3, r2
 8009924:	6004      	str	r4, [r0, #0]
 8009926:	f840 3f04 	str.w	r3, [r0, #4]!
 800992a:	4288      	cmp	r0, r1
 800992c:	d3f4      	bcc.n	8009918 <L_shift+0xc>
 800992e:	bd70      	pop	{r4, r5, r6, pc}

08009930 <__match>:
 8009930:	b530      	push	{r4, r5, lr}
 8009932:	6803      	ldr	r3, [r0, #0]
 8009934:	3301      	adds	r3, #1
 8009936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800993a:	b914      	cbnz	r4, 8009942 <__match+0x12>
 800993c:	6003      	str	r3, [r0, #0]
 800993e:	2001      	movs	r0, #1
 8009940:	bd30      	pop	{r4, r5, pc}
 8009942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009946:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800994a:	2d19      	cmp	r5, #25
 800994c:	bf98      	it	ls
 800994e:	3220      	addls	r2, #32
 8009950:	42a2      	cmp	r2, r4
 8009952:	d0f0      	beq.n	8009936 <__match+0x6>
 8009954:	2000      	movs	r0, #0
 8009956:	e7f3      	b.n	8009940 <__match+0x10>

08009958 <__hexnan>:
 8009958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	680b      	ldr	r3, [r1, #0]
 800995e:	6801      	ldr	r1, [r0, #0]
 8009960:	115e      	asrs	r6, r3, #5
 8009962:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009966:	f013 031f 	ands.w	r3, r3, #31
 800996a:	b087      	sub	sp, #28
 800996c:	bf18      	it	ne
 800996e:	3604      	addne	r6, #4
 8009970:	2500      	movs	r5, #0
 8009972:	1f37      	subs	r7, r6, #4
 8009974:	4682      	mov	sl, r0
 8009976:	4690      	mov	r8, r2
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	f846 5c04 	str.w	r5, [r6, #-4]
 800997e:	46b9      	mov	r9, r7
 8009980:	463c      	mov	r4, r7
 8009982:	9502      	str	r5, [sp, #8]
 8009984:	46ab      	mov	fp, r5
 8009986:	784a      	ldrb	r2, [r1, #1]
 8009988:	1c4b      	adds	r3, r1, #1
 800998a:	9303      	str	r3, [sp, #12]
 800998c:	b342      	cbz	r2, 80099e0 <__hexnan+0x88>
 800998e:	4610      	mov	r0, r2
 8009990:	9105      	str	r1, [sp, #20]
 8009992:	9204      	str	r2, [sp, #16]
 8009994:	f7ff fd94 	bl	80094c0 <__hexdig_fun>
 8009998:	2800      	cmp	r0, #0
 800999a:	d151      	bne.n	8009a40 <__hexnan+0xe8>
 800999c:	9a04      	ldr	r2, [sp, #16]
 800999e:	9905      	ldr	r1, [sp, #20]
 80099a0:	2a20      	cmp	r2, #32
 80099a2:	d818      	bhi.n	80099d6 <__hexnan+0x7e>
 80099a4:	9b02      	ldr	r3, [sp, #8]
 80099a6:	459b      	cmp	fp, r3
 80099a8:	dd13      	ble.n	80099d2 <__hexnan+0x7a>
 80099aa:	454c      	cmp	r4, r9
 80099ac:	d206      	bcs.n	80099bc <__hexnan+0x64>
 80099ae:	2d07      	cmp	r5, #7
 80099b0:	dc04      	bgt.n	80099bc <__hexnan+0x64>
 80099b2:	462a      	mov	r2, r5
 80099b4:	4649      	mov	r1, r9
 80099b6:	4620      	mov	r0, r4
 80099b8:	f7ff ffa8 	bl	800990c <L_shift>
 80099bc:	4544      	cmp	r4, r8
 80099be:	d952      	bls.n	8009a66 <__hexnan+0x10e>
 80099c0:	2300      	movs	r3, #0
 80099c2:	f1a4 0904 	sub.w	r9, r4, #4
 80099c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80099ca:	f8cd b008 	str.w	fp, [sp, #8]
 80099ce:	464c      	mov	r4, r9
 80099d0:	461d      	mov	r5, r3
 80099d2:	9903      	ldr	r1, [sp, #12]
 80099d4:	e7d7      	b.n	8009986 <__hexnan+0x2e>
 80099d6:	2a29      	cmp	r2, #41	@ 0x29
 80099d8:	d157      	bne.n	8009a8a <__hexnan+0x132>
 80099da:	3102      	adds	r1, #2
 80099dc:	f8ca 1000 	str.w	r1, [sl]
 80099e0:	f1bb 0f00 	cmp.w	fp, #0
 80099e4:	d051      	beq.n	8009a8a <__hexnan+0x132>
 80099e6:	454c      	cmp	r4, r9
 80099e8:	d206      	bcs.n	80099f8 <__hexnan+0xa0>
 80099ea:	2d07      	cmp	r5, #7
 80099ec:	dc04      	bgt.n	80099f8 <__hexnan+0xa0>
 80099ee:	462a      	mov	r2, r5
 80099f0:	4649      	mov	r1, r9
 80099f2:	4620      	mov	r0, r4
 80099f4:	f7ff ff8a 	bl	800990c <L_shift>
 80099f8:	4544      	cmp	r4, r8
 80099fa:	d936      	bls.n	8009a6a <__hexnan+0x112>
 80099fc:	f1a8 0204 	sub.w	r2, r8, #4
 8009a00:	4623      	mov	r3, r4
 8009a02:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a06:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a0a:	429f      	cmp	r7, r3
 8009a0c:	d2f9      	bcs.n	8009a02 <__hexnan+0xaa>
 8009a0e:	1b3b      	subs	r3, r7, r4
 8009a10:	f023 0303 	bic.w	r3, r3, #3
 8009a14:	3304      	adds	r3, #4
 8009a16:	3401      	adds	r4, #1
 8009a18:	3e03      	subs	r6, #3
 8009a1a:	42b4      	cmp	r4, r6
 8009a1c:	bf88      	it	hi
 8009a1e:	2304      	movhi	r3, #4
 8009a20:	4443      	add	r3, r8
 8009a22:	2200      	movs	r2, #0
 8009a24:	f843 2b04 	str.w	r2, [r3], #4
 8009a28:	429f      	cmp	r7, r3
 8009a2a:	d2fb      	bcs.n	8009a24 <__hexnan+0xcc>
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	b91b      	cbnz	r3, 8009a38 <__hexnan+0xe0>
 8009a30:	4547      	cmp	r7, r8
 8009a32:	d128      	bne.n	8009a86 <__hexnan+0x12e>
 8009a34:	2301      	movs	r3, #1
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	2005      	movs	r0, #5
 8009a3a:	b007      	add	sp, #28
 8009a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a40:	3501      	adds	r5, #1
 8009a42:	2d08      	cmp	r5, #8
 8009a44:	f10b 0b01 	add.w	fp, fp, #1
 8009a48:	dd06      	ble.n	8009a58 <__hexnan+0x100>
 8009a4a:	4544      	cmp	r4, r8
 8009a4c:	d9c1      	bls.n	80099d2 <__hexnan+0x7a>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a54:	2501      	movs	r5, #1
 8009a56:	3c04      	subs	r4, #4
 8009a58:	6822      	ldr	r2, [r4, #0]
 8009a5a:	f000 000f 	and.w	r0, r0, #15
 8009a5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009a62:	6020      	str	r0, [r4, #0]
 8009a64:	e7b5      	b.n	80099d2 <__hexnan+0x7a>
 8009a66:	2508      	movs	r5, #8
 8009a68:	e7b3      	b.n	80099d2 <__hexnan+0x7a>
 8009a6a:	9b01      	ldr	r3, [sp, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d0dd      	beq.n	8009a2c <__hexnan+0xd4>
 8009a70:	f1c3 0320 	rsb	r3, r3, #32
 8009a74:	f04f 32ff 	mov.w	r2, #4294967295
 8009a78:	40da      	lsrs	r2, r3
 8009a7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009a7e:	4013      	ands	r3, r2
 8009a80:	f846 3c04 	str.w	r3, [r6, #-4]
 8009a84:	e7d2      	b.n	8009a2c <__hexnan+0xd4>
 8009a86:	3f04      	subs	r7, #4
 8009a88:	e7d0      	b.n	8009a2c <__hexnan+0xd4>
 8009a8a:	2004      	movs	r0, #4
 8009a8c:	e7d5      	b.n	8009a3a <__hexnan+0xe2>

08009a8e <__ascii_mbtowc>:
 8009a8e:	b082      	sub	sp, #8
 8009a90:	b901      	cbnz	r1, 8009a94 <__ascii_mbtowc+0x6>
 8009a92:	a901      	add	r1, sp, #4
 8009a94:	b142      	cbz	r2, 8009aa8 <__ascii_mbtowc+0x1a>
 8009a96:	b14b      	cbz	r3, 8009aac <__ascii_mbtowc+0x1e>
 8009a98:	7813      	ldrb	r3, [r2, #0]
 8009a9a:	600b      	str	r3, [r1, #0]
 8009a9c:	7812      	ldrb	r2, [r2, #0]
 8009a9e:	1e10      	subs	r0, r2, #0
 8009aa0:	bf18      	it	ne
 8009aa2:	2001      	movne	r0, #1
 8009aa4:	b002      	add	sp, #8
 8009aa6:	4770      	bx	lr
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	e7fb      	b.n	8009aa4 <__ascii_mbtowc+0x16>
 8009aac:	f06f 0001 	mvn.w	r0, #1
 8009ab0:	e7f8      	b.n	8009aa4 <__ascii_mbtowc+0x16>

08009ab2 <_realloc_r>:
 8009ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab6:	4680      	mov	r8, r0
 8009ab8:	4615      	mov	r5, r2
 8009aba:	460c      	mov	r4, r1
 8009abc:	b921      	cbnz	r1, 8009ac8 <_realloc_r+0x16>
 8009abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	f7fd b90c 	b.w	8006ce0 <_malloc_r>
 8009ac8:	b92a      	cbnz	r2, 8009ad6 <_realloc_r+0x24>
 8009aca:	f7fd f895 	bl	8006bf8 <_free_r>
 8009ace:	2400      	movs	r4, #0
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ad6:	f000 f936 	bl	8009d46 <_malloc_usable_size_r>
 8009ada:	4285      	cmp	r5, r0
 8009adc:	4606      	mov	r6, r0
 8009ade:	d802      	bhi.n	8009ae6 <_realloc_r+0x34>
 8009ae0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009ae4:	d8f4      	bhi.n	8009ad0 <_realloc_r+0x1e>
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	4640      	mov	r0, r8
 8009aea:	f7fd f8f9 	bl	8006ce0 <_malloc_r>
 8009aee:	4607      	mov	r7, r0
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d0ec      	beq.n	8009ace <_realloc_r+0x1c>
 8009af4:	42b5      	cmp	r5, r6
 8009af6:	462a      	mov	r2, r5
 8009af8:	4621      	mov	r1, r4
 8009afa:	bf28      	it	cs
 8009afc:	4632      	movcs	r2, r6
 8009afe:	f7ff fc43 	bl	8009388 <memcpy>
 8009b02:	4621      	mov	r1, r4
 8009b04:	4640      	mov	r0, r8
 8009b06:	f7fd f877 	bl	8006bf8 <_free_r>
 8009b0a:	463c      	mov	r4, r7
 8009b0c:	e7e0      	b.n	8009ad0 <_realloc_r+0x1e>
	...

08009b10 <_strtoul_l.constprop.0>:
 8009b10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b14:	4e34      	ldr	r6, [pc, #208]	@ (8009be8 <_strtoul_l.constprop.0+0xd8>)
 8009b16:	4686      	mov	lr, r0
 8009b18:	460d      	mov	r5, r1
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b20:	5d37      	ldrb	r7, [r6, r4]
 8009b22:	f017 0708 	ands.w	r7, r7, #8
 8009b26:	d1f8      	bne.n	8009b1a <_strtoul_l.constprop.0+0xa>
 8009b28:	2c2d      	cmp	r4, #45	@ 0x2d
 8009b2a:	d12f      	bne.n	8009b8c <_strtoul_l.constprop.0+0x7c>
 8009b2c:	782c      	ldrb	r4, [r5, #0]
 8009b2e:	2701      	movs	r7, #1
 8009b30:	1c85      	adds	r5, r0, #2
 8009b32:	f033 0010 	bics.w	r0, r3, #16
 8009b36:	d109      	bne.n	8009b4c <_strtoul_l.constprop.0+0x3c>
 8009b38:	2c30      	cmp	r4, #48	@ 0x30
 8009b3a:	d12c      	bne.n	8009b96 <_strtoul_l.constprop.0+0x86>
 8009b3c:	7828      	ldrb	r0, [r5, #0]
 8009b3e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009b42:	2858      	cmp	r0, #88	@ 0x58
 8009b44:	d127      	bne.n	8009b96 <_strtoul_l.constprop.0+0x86>
 8009b46:	786c      	ldrb	r4, [r5, #1]
 8009b48:	2310      	movs	r3, #16
 8009b4a:	3502      	adds	r5, #2
 8009b4c:	f04f 38ff 	mov.w	r8, #4294967295
 8009b50:	2600      	movs	r6, #0
 8009b52:	fbb8 f8f3 	udiv	r8, r8, r3
 8009b56:	fb03 f908 	mul.w	r9, r3, r8
 8009b5a:	ea6f 0909 	mvn.w	r9, r9
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009b64:	f1bc 0f09 	cmp.w	ip, #9
 8009b68:	d81c      	bhi.n	8009ba4 <_strtoul_l.constprop.0+0x94>
 8009b6a:	4664      	mov	r4, ip
 8009b6c:	42a3      	cmp	r3, r4
 8009b6e:	dd2a      	ble.n	8009bc6 <_strtoul_l.constprop.0+0xb6>
 8009b70:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009b74:	d007      	beq.n	8009b86 <_strtoul_l.constprop.0+0x76>
 8009b76:	4580      	cmp	r8, r0
 8009b78:	d322      	bcc.n	8009bc0 <_strtoul_l.constprop.0+0xb0>
 8009b7a:	d101      	bne.n	8009b80 <_strtoul_l.constprop.0+0x70>
 8009b7c:	45a1      	cmp	r9, r4
 8009b7e:	db1f      	blt.n	8009bc0 <_strtoul_l.constprop.0+0xb0>
 8009b80:	fb00 4003 	mla	r0, r0, r3, r4
 8009b84:	2601      	movs	r6, #1
 8009b86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b8a:	e7e9      	b.n	8009b60 <_strtoul_l.constprop.0+0x50>
 8009b8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009b8e:	bf04      	itt	eq
 8009b90:	782c      	ldrbeq	r4, [r5, #0]
 8009b92:	1c85      	addeq	r5, r0, #2
 8009b94:	e7cd      	b.n	8009b32 <_strtoul_l.constprop.0+0x22>
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1d8      	bne.n	8009b4c <_strtoul_l.constprop.0+0x3c>
 8009b9a:	2c30      	cmp	r4, #48	@ 0x30
 8009b9c:	bf0c      	ite	eq
 8009b9e:	2308      	moveq	r3, #8
 8009ba0:	230a      	movne	r3, #10
 8009ba2:	e7d3      	b.n	8009b4c <_strtoul_l.constprop.0+0x3c>
 8009ba4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009ba8:	f1bc 0f19 	cmp.w	ip, #25
 8009bac:	d801      	bhi.n	8009bb2 <_strtoul_l.constprop.0+0xa2>
 8009bae:	3c37      	subs	r4, #55	@ 0x37
 8009bb0:	e7dc      	b.n	8009b6c <_strtoul_l.constprop.0+0x5c>
 8009bb2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009bb6:	f1bc 0f19 	cmp.w	ip, #25
 8009bba:	d804      	bhi.n	8009bc6 <_strtoul_l.constprop.0+0xb6>
 8009bbc:	3c57      	subs	r4, #87	@ 0x57
 8009bbe:	e7d5      	b.n	8009b6c <_strtoul_l.constprop.0+0x5c>
 8009bc0:	f04f 36ff 	mov.w	r6, #4294967295
 8009bc4:	e7df      	b.n	8009b86 <_strtoul_l.constprop.0+0x76>
 8009bc6:	1c73      	adds	r3, r6, #1
 8009bc8:	d106      	bne.n	8009bd8 <_strtoul_l.constprop.0+0xc8>
 8009bca:	2322      	movs	r3, #34	@ 0x22
 8009bcc:	f8ce 3000 	str.w	r3, [lr]
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	b932      	cbnz	r2, 8009be2 <_strtoul_l.constprop.0+0xd2>
 8009bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bd8:	b107      	cbz	r7, 8009bdc <_strtoul_l.constprop.0+0xcc>
 8009bda:	4240      	negs	r0, r0
 8009bdc:	2a00      	cmp	r2, #0
 8009bde:	d0f9      	beq.n	8009bd4 <_strtoul_l.constprop.0+0xc4>
 8009be0:	b106      	cbz	r6, 8009be4 <_strtoul_l.constprop.0+0xd4>
 8009be2:	1e69      	subs	r1, r5, #1
 8009be4:	6011      	str	r1, [r2, #0]
 8009be6:	e7f5      	b.n	8009bd4 <_strtoul_l.constprop.0+0xc4>
 8009be8:	0800a161 	.word	0x0800a161

08009bec <_strtoul_r>:
 8009bec:	f7ff bf90 	b.w	8009b10 <_strtoul_l.constprop.0>

08009bf0 <__ascii_wctomb>:
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	4608      	mov	r0, r1
 8009bf4:	b141      	cbz	r1, 8009c08 <__ascii_wctomb+0x18>
 8009bf6:	2aff      	cmp	r2, #255	@ 0xff
 8009bf8:	d904      	bls.n	8009c04 <__ascii_wctomb+0x14>
 8009bfa:	228a      	movs	r2, #138	@ 0x8a
 8009bfc:	601a      	str	r2, [r3, #0]
 8009bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009c02:	4770      	bx	lr
 8009c04:	700a      	strb	r2, [r1, #0]
 8009c06:	2001      	movs	r0, #1
 8009c08:	4770      	bx	lr
	...

08009c0c <fiprintf>:
 8009c0c:	b40e      	push	{r1, r2, r3}
 8009c0e:	b503      	push	{r0, r1, lr}
 8009c10:	4601      	mov	r1, r0
 8009c12:	ab03      	add	r3, sp, #12
 8009c14:	4805      	ldr	r0, [pc, #20]	@ (8009c2c <fiprintf+0x20>)
 8009c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c1a:	6800      	ldr	r0, [r0, #0]
 8009c1c:	9301      	str	r3, [sp, #4]
 8009c1e:	f7fe ff6f 	bl	8008b00 <_vfiprintf_r>
 8009c22:	b002      	add	sp, #8
 8009c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c28:	b003      	add	sp, #12
 8009c2a:	4770      	bx	lr
 8009c2c:	2000002c 	.word	0x2000002c

08009c30 <__swhatbuf_r>:
 8009c30:	b570      	push	{r4, r5, r6, lr}
 8009c32:	460c      	mov	r4, r1
 8009c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c38:	2900      	cmp	r1, #0
 8009c3a:	b096      	sub	sp, #88	@ 0x58
 8009c3c:	4615      	mov	r5, r2
 8009c3e:	461e      	mov	r6, r3
 8009c40:	da0d      	bge.n	8009c5e <__swhatbuf_r+0x2e>
 8009c42:	89a3      	ldrh	r3, [r4, #12]
 8009c44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c48:	f04f 0100 	mov.w	r1, #0
 8009c4c:	bf14      	ite	ne
 8009c4e:	2340      	movne	r3, #64	@ 0x40
 8009c50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c54:	2000      	movs	r0, #0
 8009c56:	6031      	str	r1, [r6, #0]
 8009c58:	602b      	str	r3, [r5, #0]
 8009c5a:	b016      	add	sp, #88	@ 0x58
 8009c5c:	bd70      	pop	{r4, r5, r6, pc}
 8009c5e:	466a      	mov	r2, sp
 8009c60:	f000 f848 	bl	8009cf4 <_fstat_r>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	dbec      	blt.n	8009c42 <__swhatbuf_r+0x12>
 8009c68:	9901      	ldr	r1, [sp, #4]
 8009c6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009c6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009c72:	4259      	negs	r1, r3
 8009c74:	4159      	adcs	r1, r3
 8009c76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c7a:	e7eb      	b.n	8009c54 <__swhatbuf_r+0x24>

08009c7c <__smakebuf_r>:
 8009c7c:	898b      	ldrh	r3, [r1, #12]
 8009c7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c80:	079d      	lsls	r5, r3, #30
 8009c82:	4606      	mov	r6, r0
 8009c84:	460c      	mov	r4, r1
 8009c86:	d507      	bpl.n	8009c98 <__smakebuf_r+0x1c>
 8009c88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	6123      	str	r3, [r4, #16]
 8009c90:	2301      	movs	r3, #1
 8009c92:	6163      	str	r3, [r4, #20]
 8009c94:	b003      	add	sp, #12
 8009c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c98:	ab01      	add	r3, sp, #4
 8009c9a:	466a      	mov	r2, sp
 8009c9c:	f7ff ffc8 	bl	8009c30 <__swhatbuf_r>
 8009ca0:	9f00      	ldr	r7, [sp, #0]
 8009ca2:	4605      	mov	r5, r0
 8009ca4:	4639      	mov	r1, r7
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	f7fd f81a 	bl	8006ce0 <_malloc_r>
 8009cac:	b948      	cbnz	r0, 8009cc2 <__smakebuf_r+0x46>
 8009cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cb2:	059a      	lsls	r2, r3, #22
 8009cb4:	d4ee      	bmi.n	8009c94 <__smakebuf_r+0x18>
 8009cb6:	f023 0303 	bic.w	r3, r3, #3
 8009cba:	f043 0302 	orr.w	r3, r3, #2
 8009cbe:	81a3      	strh	r3, [r4, #12]
 8009cc0:	e7e2      	b.n	8009c88 <__smakebuf_r+0xc>
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	6020      	str	r0, [r4, #0]
 8009cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cca:	81a3      	strh	r3, [r4, #12]
 8009ccc:	9b01      	ldr	r3, [sp, #4]
 8009cce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009cd2:	b15b      	cbz	r3, 8009cec <__smakebuf_r+0x70>
 8009cd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f000 f81d 	bl	8009d18 <_isatty_r>
 8009cde:	b128      	cbz	r0, 8009cec <__smakebuf_r+0x70>
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	f023 0303 	bic.w	r3, r3, #3
 8009ce6:	f043 0301 	orr.w	r3, r3, #1
 8009cea:	81a3      	strh	r3, [r4, #12]
 8009cec:	89a3      	ldrh	r3, [r4, #12]
 8009cee:	431d      	orrs	r5, r3
 8009cf0:	81a5      	strh	r5, [r4, #12]
 8009cf2:	e7cf      	b.n	8009c94 <__smakebuf_r+0x18>

08009cf4 <_fstat_r>:
 8009cf4:	b538      	push	{r3, r4, r5, lr}
 8009cf6:	4d07      	ldr	r5, [pc, #28]	@ (8009d14 <_fstat_r+0x20>)
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	4608      	mov	r0, r1
 8009cfe:	4611      	mov	r1, r2
 8009d00:	602b      	str	r3, [r5, #0]
 8009d02:	f7f7 fe65 	bl	80019d0 <_fstat>
 8009d06:	1c43      	adds	r3, r0, #1
 8009d08:	d102      	bne.n	8009d10 <_fstat_r+0x1c>
 8009d0a:	682b      	ldr	r3, [r5, #0]
 8009d0c:	b103      	cbz	r3, 8009d10 <_fstat_r+0x1c>
 8009d0e:	6023      	str	r3, [r4, #0]
 8009d10:	bd38      	pop	{r3, r4, r5, pc}
 8009d12:	bf00      	nop
 8009d14:	20000518 	.word	0x20000518

08009d18 <_isatty_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	4d06      	ldr	r5, [pc, #24]	@ (8009d34 <_isatty_r+0x1c>)
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	4604      	mov	r4, r0
 8009d20:	4608      	mov	r0, r1
 8009d22:	602b      	str	r3, [r5, #0]
 8009d24:	f7f7 fe64 	bl	80019f0 <_isatty>
 8009d28:	1c43      	adds	r3, r0, #1
 8009d2a:	d102      	bne.n	8009d32 <_isatty_r+0x1a>
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	b103      	cbz	r3, 8009d32 <_isatty_r+0x1a>
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	bd38      	pop	{r3, r4, r5, pc}
 8009d34:	20000518 	.word	0x20000518

08009d38 <abort>:
 8009d38:	b508      	push	{r3, lr}
 8009d3a:	2006      	movs	r0, #6
 8009d3c:	f000 f834 	bl	8009da8 <raise>
 8009d40:	2001      	movs	r0, #1
 8009d42:	f7f7 fe11 	bl	8001968 <_exit>

08009d46 <_malloc_usable_size_r>:
 8009d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d4a:	1f18      	subs	r0, r3, #4
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	bfbc      	itt	lt
 8009d50:	580b      	ldrlt	r3, [r1, r0]
 8009d52:	18c0      	addlt	r0, r0, r3
 8009d54:	4770      	bx	lr

08009d56 <_raise_r>:
 8009d56:	291f      	cmp	r1, #31
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	4605      	mov	r5, r0
 8009d5c:	460c      	mov	r4, r1
 8009d5e:	d904      	bls.n	8009d6a <_raise_r+0x14>
 8009d60:	2316      	movs	r3, #22
 8009d62:	6003      	str	r3, [r0, #0]
 8009d64:	f04f 30ff 	mov.w	r0, #4294967295
 8009d68:	bd38      	pop	{r3, r4, r5, pc}
 8009d6a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009d6c:	b112      	cbz	r2, 8009d74 <_raise_r+0x1e>
 8009d6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d72:	b94b      	cbnz	r3, 8009d88 <_raise_r+0x32>
 8009d74:	4628      	mov	r0, r5
 8009d76:	f000 f831 	bl	8009ddc <_getpid_r>
 8009d7a:	4622      	mov	r2, r4
 8009d7c:	4601      	mov	r1, r0
 8009d7e:	4628      	mov	r0, r5
 8009d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d84:	f000 b818 	b.w	8009db8 <_kill_r>
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d00a      	beq.n	8009da2 <_raise_r+0x4c>
 8009d8c:	1c59      	adds	r1, r3, #1
 8009d8e:	d103      	bne.n	8009d98 <_raise_r+0x42>
 8009d90:	2316      	movs	r3, #22
 8009d92:	6003      	str	r3, [r0, #0]
 8009d94:	2001      	movs	r0, #1
 8009d96:	e7e7      	b.n	8009d68 <_raise_r+0x12>
 8009d98:	2100      	movs	r1, #0
 8009d9a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d9e:	4620      	mov	r0, r4
 8009da0:	4798      	blx	r3
 8009da2:	2000      	movs	r0, #0
 8009da4:	e7e0      	b.n	8009d68 <_raise_r+0x12>
	...

08009da8 <raise>:
 8009da8:	4b02      	ldr	r3, [pc, #8]	@ (8009db4 <raise+0xc>)
 8009daa:	4601      	mov	r1, r0
 8009dac:	6818      	ldr	r0, [r3, #0]
 8009dae:	f7ff bfd2 	b.w	8009d56 <_raise_r>
 8009db2:	bf00      	nop
 8009db4:	2000002c 	.word	0x2000002c

08009db8 <_kill_r>:
 8009db8:	b538      	push	{r3, r4, r5, lr}
 8009dba:	4d07      	ldr	r5, [pc, #28]	@ (8009dd8 <_kill_r+0x20>)
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	4608      	mov	r0, r1
 8009dc2:	4611      	mov	r1, r2
 8009dc4:	602b      	str	r3, [r5, #0]
 8009dc6:	f7f7 fdbf 	bl	8001948 <_kill>
 8009dca:	1c43      	adds	r3, r0, #1
 8009dcc:	d102      	bne.n	8009dd4 <_kill_r+0x1c>
 8009dce:	682b      	ldr	r3, [r5, #0]
 8009dd0:	b103      	cbz	r3, 8009dd4 <_kill_r+0x1c>
 8009dd2:	6023      	str	r3, [r4, #0]
 8009dd4:	bd38      	pop	{r3, r4, r5, pc}
 8009dd6:	bf00      	nop
 8009dd8:	20000518 	.word	0x20000518

08009ddc <_getpid_r>:
 8009ddc:	f7f7 bdac 	b.w	8001938 <_getpid>

08009de0 <_init>:
 8009de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de2:	bf00      	nop
 8009de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009de6:	bc08      	pop	{r3}
 8009de8:	469e      	mov	lr, r3
 8009dea:	4770      	bx	lr

08009dec <_fini>:
 8009dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dee:	bf00      	nop
 8009df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009df2:	bc08      	pop	{r3}
 8009df4:	469e      	mov	lr, r3
 8009df6:	4770      	bx	lr
