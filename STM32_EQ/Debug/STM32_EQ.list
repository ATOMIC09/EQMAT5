
STM32_EQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048e0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004a68  08004a68  00005a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a94  08004a94  0000607c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a94  08004a94  00005a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a9c  08004a9c  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a9c  08004a9c  00005a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004aa0  08004aa0  00005aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08004aa4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000607c  2**0
                  CONTENTS
 10 .bss          00000308  2000007c  2000007c  0000607c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000384  20000384  0000607c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b483  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000209b  00000000  00000000  0001152f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  000135d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074b  00000000  00000000  00013f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f8bc  00000000  00000000  000146b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ccfa  00000000  00000000  00033f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb919  00000000  00000000  00040c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fc582  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c50  00000000  00000000  000fc5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000ff218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a50 	.word	0x08004a50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08004a50 	.word	0x08004a50

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004c0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80004c8:	f003 0301 	and.w	r3, r3, #1
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d013      	beq.n	80004f8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004d0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80004d8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d00b      	beq.n	80004f8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004e0:	e000      	b.n	80004e4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004e2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d0f9      	beq.n	80004e2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004ee:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	b2d2      	uxtb	r2, r2
 80004f6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004f8:	687b      	ldr	r3, [r7, #4]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
	...

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fc30 	bl	8000d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f82a 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f914 	bl	8000740 <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 f8ea 	bl	80006f0 <MX_DMA_Init>
  MX_I2S2_Init();
 800051c:	f000 f88e 	bl	800063c <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8000520:	f000 f8bc 	bl	800069c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_data, sizeof(rx_data));
 8000524:	2246      	movs	r2, #70	@ 0x46
 8000526:	490b      	ldr	r1, [pc, #44]	@ (8000554 <main+0x4c>)
 8000528:	480b      	ldr	r0, [pc, #44]	@ (8000558 <main+0x50>)
 800052a:	f002 fe6a 	bl	8003202 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart1, tx_buffer, sizeof(tx_buffer), 10);
 800052e:	230a      	movs	r3, #10
 8000530:	2211      	movs	r2, #17
 8000532:	490a      	ldr	r1, [pc, #40]	@ (800055c <main+0x54>)
 8000534:	4808      	ldr	r0, [pc, #32]	@ (8000558 <main+0x50>)
 8000536:	f002 fdd9 	bl	80030ec <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    printf("Hello World\n");
 800053a:	4809      	ldr	r0, [pc, #36]	@ (8000560 <main+0x58>)
 800053c:	f003 fef4 	bl	8004328 <puts>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000540:	2104      	movs	r1, #4
 8000542:	4808      	ldr	r0, [pc, #32]	@ (8000564 <main+0x5c>)
 8000544:	f001 faed 	bl	8001b22 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8000548:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800054c:	f000 fc82 	bl	8000e54 <HAL_Delay>
  {
 8000550:	bf00      	nop
 8000552:	e7f2      	b.n	800053a <main+0x32>
 8000554:	200001e8 	.word	0x200001e8
 8000558:	200001a0 	.word	0x200001a0
 800055c:	20000000 	.word	0x20000000
 8000560:	08004a68 	.word	0x08004a68
 8000564:	40020400 	.word	0x40020400

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	@ 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	@ 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f003 ffb6 	bl	80044e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b28      	ldr	r3, [pc, #160]	@ (8000634 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	4a27      	ldr	r2, [pc, #156]	@ (8000634 <SystemClock_Config+0xcc>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	@ 0x40
 800059c:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b22      	ldr	r3, [pc, #136]	@ (8000638 <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a21      	ldr	r2, [pc, #132]	@ (8000638 <SystemClock_Config+0xd0>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e6:	2304      	movs	r3, #4
 80005e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 ff52 	bl	8002498 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005fa:	f000 f92d 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2105      	movs	r1, #5
 800061c:	4618      	mov	r0, r3
 800061e:	f002 f9b3 	bl	8002988 <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000628:	f000 f916 	bl	8000858 <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3750      	adds	r7, #80	@ 0x50
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000640:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <MX_I2S2_Init+0x54>)
 8000642:	4a14      	ldr	r2, [pc, #80]	@ (8000694 <MX_I2S2_Init+0x58>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000646:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <MX_I2S2_Init+0x54>)
 8000648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800064c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800064e:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <MX_I2S2_Init+0x54>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000654:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_I2S2_Init+0x54>)
 8000656:	2203      	movs	r2, #3
 8000658:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800065a:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <MX_I2S2_Init+0x54>)
 800065c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000660:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000662:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <MX_I2S2_Init+0x54>)
 8000664:	4a0c      	ldr	r2, [pc, #48]	@ (8000698 <MX_I2S2_Init+0x5c>)
 8000666:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000668:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <MX_I2S2_Init+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800066e:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <MX_I2S2_Init+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <MX_I2S2_Init+0x54>)
 8000676:	2201      	movs	r2, #1
 8000678:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	@ (8000690 <MX_I2S2_Init+0x54>)
 800067c:	f001 fa6c 	bl	8001b58 <HAL_I2S_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000686:	f000 f8e7 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000098 	.word	0x20000098
 8000694:	40003800 	.word	0x40003800
 8000698:	00017700 	.word	0x00017700

0800069c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a0:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	@ (80006ec <MX_USART1_UART_Init+0x50>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006a6:	4b10      	ldr	r3, [pc, #64]	@ (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	@ (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006d4:	f002 fcba 	bl	800304c <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006de:	f000 f8bb 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200001a0 	.word	0x200001a0
 80006ec:	40011000 	.word	0x40011000

080006f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <MX_DMA_Init+0x4c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a0f      	ldr	r2, [pc, #60]	@ (800073c <MX_DMA_Init+0x4c>)
 8000700:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <MX_DMA_Init+0x4c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	200e      	movs	r0, #14
 8000718:	f000 fc9b 	bl	8001052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800071c:	200e      	movs	r0, #14
 800071e:	f000 fcb4 	bl	800108a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	200f      	movs	r0, #15
 8000728:	f000 fc93 	bl	8001052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800072c:	200f      	movs	r0, #15
 800072e:	f000 fcac 	bl	800108a <HAL_NVIC_EnableIRQ>

}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	4b26      	ldr	r3, [pc, #152]	@ (80007f4 <MX_GPIO_Init+0xb4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a25      	ldr	r2, [pc, #148]	@ (80007f4 <MX_GPIO_Init+0xb4>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b23      	ldr	r3, [pc, #140]	@ (80007f4 <MX_GPIO_Init+0xb4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <MX_GPIO_Init+0xb4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <MX_GPIO_Init+0xb4>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <MX_GPIO_Init+0xb4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <MX_GPIO_Init+0xb4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a17      	ldr	r2, [pc, #92]	@ (80007f4 <MX_GPIO_Init+0xb4>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <MX_GPIO_Init+0xb4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_GPIO_Init+0xb4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a10      	ldr	r2, [pc, #64]	@ (80007f4 <MX_GPIO_Init+0xb4>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_GPIO_Init+0xb4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2104      	movs	r1, #4
 80007ca:	480b      	ldr	r0, [pc, #44]	@ (80007f8 <MX_GPIO_Init+0xb8>)
 80007cc:	f001 f990 	bl	8001af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007d0:	2304      	movs	r3, #4
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <MX_GPIO_Init+0xb8>)
 80007e8:	f000 ffe6 	bl	80017b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	@ 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020400 	.word	0x40020400

080007fc <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	e009      	b.n	8000822 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	60ba      	str	r2, [r7, #8]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fe4e 	bl	80004b8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	3301      	adds	r3, #1
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	429a      	cmp	r2, r3
 8000828:	dbf1      	blt.n	800080e <_write+0x12>
  }
  return len;
 800082a:	687b      	ldr	r3, [r7, #4]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  HAL_UART_Transmit(&huart1, rx_data, sizeof(rx_data), 10);
 800083c:	230a      	movs	r3, #10
 800083e:	2246      	movs	r2, #70	@ 0x46
 8000840:	4903      	ldr	r1, [pc, #12]	@ (8000850 <HAL_UART_RxCpltCallback+0x1c>)
 8000842:	4804      	ldr	r0, [pc, #16]	@ (8000854 <HAL_UART_RxCpltCallback+0x20>)
 8000844:	f002 fc52 	bl	80030ec <HAL_UART_Transmit>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200001e8 	.word	0x200001e8
 8000854:	200001a0 	.word	0x200001a0

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000872:	4a0f      	ldr	r2, [pc, #60]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000878:	6453      	str	r3, [r2, #68]	@ 0x44
 800087a:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <HAL_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088e:	4a08      	ldr	r2, [pc, #32]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	@ 0x40
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08e      	sub	sp, #56	@ 0x38
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a6b      	ldr	r2, [pc, #428]	@ (8000a8c <HAL_I2S_MspInit+0x1d8>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	f040 80cf 	bne.w	8000a84 <HAL_I2S_MspInit+0x1d0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008e6:	2301      	movs	r3, #1
 80008e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008ea:	23c0      	movs	r3, #192	@ 0xc0
 80008ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 fa66 	bl	8002dc8 <HAL_RCCEx_PeriphCLKConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000902:	f7ff ffa9 	bl	8000858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b61      	ldr	r3, [pc, #388]	@ (8000a90 <HAL_I2S_MspInit+0x1dc>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	4a60      	ldr	r2, [pc, #384]	@ (8000a90 <HAL_I2S_MspInit+0x1dc>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000914:	6413      	str	r3, [r2, #64]	@ 0x40
 8000916:	4b5e      	ldr	r3, [pc, #376]	@ (8000a90 <HAL_I2S_MspInit+0x1dc>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b5a      	ldr	r3, [pc, #360]	@ (8000a90 <HAL_I2S_MspInit+0x1dc>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a59      	ldr	r2, [pc, #356]	@ (8000a90 <HAL_I2S_MspInit+0x1dc>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b57      	ldr	r3, [pc, #348]	@ (8000a90 <HAL_I2S_MspInit+0x1dc>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	4b53      	ldr	r3, [pc, #332]	@ (8000a90 <HAL_I2S_MspInit+0x1dc>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a52      	ldr	r2, [pc, #328]	@ (8000a90 <HAL_I2S_MspInit+0x1dc>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b50      	ldr	r3, [pc, #320]	@ (8000a90 <HAL_I2S_MspInit+0x1dc>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800095a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800096c:	2305      	movs	r3, #5
 800096e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	4847      	ldr	r0, [pc, #284]	@ (8000a94 <HAL_I2S_MspInit+0x1e0>)
 8000978:	f000 ff1e 	bl	80017b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800097c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800098e:	2306      	movs	r3, #6
 8000990:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	483e      	ldr	r0, [pc, #248]	@ (8000a94 <HAL_I2S_MspInit+0x1e0>)
 800099a:	f000 ff0d 	bl	80017b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800099e:	2340      	movs	r3, #64	@ 0x40
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ae:	2305      	movs	r3, #5
 80009b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	4837      	ldr	r0, [pc, #220]	@ (8000a98 <HAL_I2S_MspInit+0x1e4>)
 80009ba:	f000 fefd 	bl	80017b8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 80009be:	4b37      	ldr	r3, [pc, #220]	@ (8000a9c <HAL_I2S_MspInit+0x1e8>)
 80009c0:	4a37      	ldr	r2, [pc, #220]	@ (8000aa0 <HAL_I2S_MspInit+0x1ec>)
 80009c2:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 80009c4:	4b35      	ldr	r3, [pc, #212]	@ (8000a9c <HAL_I2S_MspInit+0x1e8>)
 80009c6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80009ca:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009cc:	4b33      	ldr	r3, [pc, #204]	@ (8000a9c <HAL_I2S_MspInit+0x1e8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d2:	4b32      	ldr	r3, [pc, #200]	@ (8000a9c <HAL_I2S_MspInit+0x1e8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009d8:	4b30      	ldr	r3, [pc, #192]	@ (8000a9c <HAL_I2S_MspInit+0x1e8>)
 80009da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009de:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009e0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a9c <HAL_I2S_MspInit+0x1e8>)
 80009e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009e6:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009e8:	4b2c      	ldr	r3, [pc, #176]	@ (8000a9c <HAL_I2S_MspInit+0x1e8>)
 80009ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009ee:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 80009f0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a9c <HAL_I2S_MspInit+0x1e8>)
 80009f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009f6:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80009f8:	4b28      	ldr	r3, [pc, #160]	@ (8000a9c <HAL_I2S_MspInit+0x1e8>)
 80009fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009fe:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a00:	4b26      	ldr	r3, [pc, #152]	@ (8000a9c <HAL_I2S_MspInit+0x1e8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000a06:	4825      	ldr	r0, [pc, #148]	@ (8000a9c <HAL_I2S_MspInit+0x1e8>)
 8000a08:	f000 fb5a 	bl	80010c0 <HAL_DMA_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 8000a12:	f7ff ff21 	bl	8000858 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a20      	ldr	r2, [pc, #128]	@ (8000a9c <HAL_I2S_MspInit+0x1e8>)
 8000a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8000a9c <HAL_I2S_MspInit+0x1e8>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000a22:	4b20      	ldr	r3, [pc, #128]	@ (8000aa4 <HAL_I2S_MspInit+0x1f0>)
 8000a24:	4a20      	ldr	r2, [pc, #128]	@ (8000aa8 <HAL_I2S_MspInit+0x1f4>)
 8000a26:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa4 <HAL_I2S_MspInit+0x1f0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <HAL_I2S_MspInit+0x1f0>)
 8000a30:	2240      	movs	r2, #64	@ 0x40
 8000a32:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa4 <HAL_I2S_MspInit+0x1f0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <HAL_I2S_MspInit+0x1f0>)
 8000a3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a40:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a42:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <HAL_I2S_MspInit+0x1f0>)
 8000a44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a48:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	@ (8000aa4 <HAL_I2S_MspInit+0x1f0>)
 8000a4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a50:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000a52:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <HAL_I2S_MspInit+0x1f0>)
 8000a54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a58:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a5a:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <HAL_I2S_MspInit+0x1f0>)
 8000a5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a60:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <HAL_I2S_MspInit+0x1f0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000a68:	480e      	ldr	r0, [pc, #56]	@ (8000aa4 <HAL_I2S_MspInit+0x1f0>)
 8000a6a:	f000 fb29 	bl	80010c0 <HAL_DMA_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 8000a74:	f7ff fef0 	bl	8000858 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <HAL_I2S_MspInit+0x1f0>)
 8000a7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a7e:	4a09      	ldr	r2, [pc, #36]	@ (8000aa4 <HAL_I2S_MspInit+0x1f0>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a84:	bf00      	nop
 8000a86:	3738      	adds	r7, #56	@ 0x38
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40003800 	.word	0x40003800
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020400 	.word	0x40020400
 8000a98:	40020800 	.word	0x40020800
 8000a9c:	200000e0 	.word	0x200000e0
 8000aa0:	40026058 	.word	0x40026058
 8000aa4:	20000140 	.word	0x20000140
 8000aa8:	40026070 	.word	0x40026070

08000aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b40 <HAL_UART_MspInit+0x94>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d134      	bne.n	8000b38 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b44 <HAL_UART_MspInit+0x98>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b44 <HAL_UART_MspInit+0x98>)
 8000ad8:	f043 0310 	orr.w	r3, r3, #16
 8000adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ade:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <HAL_UART_MspInit+0x98>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae2:	f003 0310 	and.w	r3, r3, #16
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HAL_UART_MspInit+0x98>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <HAL_UART_MspInit+0x98>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <HAL_UART_MspInit+0x98>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b06:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b18:	2307      	movs	r3, #7
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4809      	ldr	r0, [pc, #36]	@ (8000b48 <HAL_UART_MspInit+0x9c>)
 8000b24:	f000 fe48 	bl	80017b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2025      	movs	r0, #37	@ 0x25
 8000b2e:	f000 fa90 	bl	8001052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b32:	2025      	movs	r0, #37	@ 0x25
 8000b34:	f000 faa9 	bl	800108a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	@ 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40011000 	.word	0x40011000
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <NMI_Handler+0x4>

08000b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <MemManage_Handler+0x4>

08000b64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba2:	f000 f937 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000bb0:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <DMA1_Stream3_IRQHandler+0x10>)
 8000bb2:	f000 fbc5 	bl	8001340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200000e0 	.word	0x200000e0

08000bc0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000bc4:	4802      	ldr	r0, [pc, #8]	@ (8000bd0 <DMA1_Stream4_IRQHandler+0x10>)
 8000bc6:	f000 fbbb 	bl	8001340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000140 	.word	0x20000140

08000bd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bd8:	4802      	ldr	r0, [pc, #8]	@ (8000be4 <USART1_IRQHandler+0x10>)
 8000bda:	f002 fb37 	bl	800324c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200001a0 	.word	0x200001a0

08000be8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	e00a      	b.n	8000c10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bfa:	f3af 8000 	nop.w
 8000bfe:	4601      	mov	r1, r0
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	60ba      	str	r2, [r7, #8]
 8000c06:	b2ca      	uxtb	r2, r1
 8000c08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	dbf0      	blt.n	8000bfa <_read+0x12>
  }

  return len;
 8000c18:	687b      	ldr	r3, [r7, #4]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
 8000c42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <_isatty>:

int _isatty(int file)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c94:	4a14      	ldr	r2, [pc, #80]	@ (8000ce8 <_sbrk+0x5c>)
 8000c96:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <_sbrk+0x60>)
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <_sbrk+0x64>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	@ (8000cf4 <_sbrk+0x68>)
 8000cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d207      	bcs.n	8000ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cbc:	f003 fc62 	bl	8004584 <__errno>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	e009      	b.n	8000ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a05      	ldr	r2, [pc, #20]	@ (8000cf0 <_sbrk+0x64>)
 8000cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20020000 	.word	0x20020000
 8000cec:	00000400 	.word	0x00000400
 8000cf0:	20000230 	.word	0x20000230
 8000cf4:	20000388 	.word	0x20000388

08000cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <SystemInit+0x20>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d02:	4a05      	ldr	r2, [pc, #20]	@ (8000d18 <SystemInit+0x20>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d20:	f7ff ffea 	bl	8000cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d24:	480c      	ldr	r0, [pc, #48]	@ (8000d58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d26:	490d      	ldr	r1, [pc, #52]	@ (8000d5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d28:	4a0d      	ldr	r2, [pc, #52]	@ (8000d60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d4a:	f003 fc21 	bl	8004590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4e:	f7ff fbdb 	bl	8000508 <main>
  bx  lr    
 8000d52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d60:	08004aa4 	.word	0x08004aa4
  ldr r2, =_sbss
 8000d64:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d68:	20000384 	.word	0x20000384

08000d6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC_IRQHandler>
	...

08000d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d74:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <HAL_Init+0x40>)
 8000d7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d80:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <HAL_Init+0x40>)
 8000d86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a07      	ldr	r2, [pc, #28]	@ (8000db0 <HAL_Init+0x40>)
 8000d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f000 f94f 	bl	800103c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9e:	200f      	movs	r0, #15
 8000da0:	f000 f808 	bl	8000db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da4:	f7ff fd5e 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023c00 	.word	0x40023c00

08000db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dbc:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <HAL_InitTick+0x54>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <HAL_InitTick+0x58>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f967 	bl	80010a6 <HAL_SYSTICK_Config>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00e      	b.n	8000e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b0f      	cmp	r3, #15
 8000de6:	d80a      	bhi.n	8000dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de8:	2200      	movs	r2, #0
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f000 f92f 	bl	8001052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df4:	4a06      	ldr	r2, [pc, #24]	@ (8000e10 <HAL_InitTick+0x5c>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e000      	b.n	8000e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000014 	.word	0x20000014
 8000e0c:	2000001c 	.word	0x2000001c
 8000e10:	20000018 	.word	0x20000018

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_IncTick+0x20>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_IncTick+0x24>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <HAL_IncTick+0x24>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	2000001c 	.word	0x2000001c
 8000e38:	20000234 	.word	0x20000234

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b03      	ldr	r3, [pc, #12]	@ (8000e50 <HAL_GetTick+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000234 	.word	0x20000234

08000e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff ffee 	bl	8000e3c <HAL_GetTick>
 8000e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6c:	d005      	beq.n	8000e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <HAL_Delay+0x44>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e7a:	bf00      	nop
 8000e7c:	f7ff ffde 	bl	8000e3c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d8f7      	bhi.n	8000e7c <HAL_Delay+0x28>
  {
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000001c 	.word	0x2000001c

08000e9c <__NVIC_SetPriorityGrouping>:
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_GetPriorityGrouping>:
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	@ (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_EnableIRQ>:
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db0b      	blt.n	8000f2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	4907      	ldr	r1, [pc, #28]	@ (8000f38 <__NVIC_EnableIRQ+0x38>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	2001      	movs	r0, #1
 8000f22:	fa00 f202 	lsl.w	r2, r0, r2
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	@ (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	@ (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	@ 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <SysTick_Config>:
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001008:	d301      	bcc.n	800100e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800100a:	2301      	movs	r3, #1
 800100c:	e00f      	b.n	800102e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <SysTick_Config+0x40>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001016:	210f      	movs	r1, #15
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f7ff ff8e 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <SysTick_Config+0x40>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001026:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <SysTick_Config+0x40>)
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	e000e010 	.word	0xe000e010

0800103c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff29 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001064:	f7ff ff3e 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 8001068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff ff8e 	bl	8000f90 <NVIC_EncodePriority>
 8001074:	4602      	mov	r2, r0
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff5d 	bl	8000f3c <__NVIC_SetPriority>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff31 	bl	8000f00 <__NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ffa2 	bl	8000ff8 <SysTick_Config>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff feb6 	bl	8000e3c <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e099      	b.n	8001210 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2202      	movs	r2, #2
 80010e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0201 	bic.w	r2, r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010fc:	e00f      	b.n	800111e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010fe:	f7ff fe9d 	bl	8000e3c <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b05      	cmp	r3, #5
 800110a:	d908      	bls.n	800111e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2220      	movs	r2, #32
 8001110:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2203      	movs	r2, #3
 8001116:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e078      	b.n	8001210 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1e8      	bne.n	80010fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	4b38      	ldr	r3, [pc, #224]	@ (8001218 <HAL_DMA_Init+0x158>)
 8001138:	4013      	ands	r3, r2
 800113a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800114a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001156:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001162:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4313      	orrs	r3, r2
 800116e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001174:	2b04      	cmp	r3, #4
 8001176:	d107      	bne.n	8001188 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001180:	4313      	orrs	r3, r2
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4313      	orrs	r3, r2
 8001186:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	f023 0307 	bic.w	r3, r3, #7
 800119e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d117      	bne.n	80011e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00e      	beq.n	80011e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 fa7b 	bl	80016c0 <DMA_CheckFifoParam>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d008      	beq.n	80011e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2240      	movs	r2, #64	@ 0x40
 80011d4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80011de:	2301      	movs	r3, #1
 80011e0:	e016      	b.n	8001210 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 fa32 	bl	8001654 <DMA_CalcBaseAndBitshift>
 80011f0:	4603      	mov	r3, r0
 80011f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011f8:	223f      	movs	r2, #63	@ 0x3f
 80011fa:	409a      	lsls	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	f010803f 	.word	0xf010803f

0800121c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001228:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800122a:	f7ff fe07 	bl	8000e3c <HAL_GetTick>
 800122e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d008      	beq.n	800124e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2280      	movs	r2, #128	@ 0x80
 8001240:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e052      	b.n	80012f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0216 	bic.w	r2, r2, #22
 800125c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	695a      	ldr	r2, [r3, #20]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800126c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	2b00      	cmp	r3, #0
 8001274:	d103      	bne.n	800127e <HAL_DMA_Abort+0x62>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800127a:	2b00      	cmp	r3, #0
 800127c:	d007      	beq.n	800128e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0208 	bic.w	r2, r2, #8
 800128c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0201 	bic.w	r2, r2, #1
 800129c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800129e:	e013      	b.n	80012c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012a0:	f7ff fdcc 	bl	8000e3c <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b05      	cmp	r3, #5
 80012ac:	d90c      	bls.n	80012c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2220      	movs	r2, #32
 80012b2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2203      	movs	r2, #3
 80012b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e015      	b.n	80012f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1e4      	bne.n	80012a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012da:	223f      	movs	r2, #63	@ 0x3f
 80012dc:	409a      	lsls	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d004      	beq.n	800131a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2280      	movs	r2, #128	@ 0x80
 8001314:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e00c      	b.n	8001334 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2205      	movs	r2, #5
 800131e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800134c:	4b8e      	ldr	r3, [pc, #568]	@ (8001588 <HAL_DMA_IRQHandler+0x248>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a8e      	ldr	r2, [pc, #568]	@ (800158c <HAL_DMA_IRQHandler+0x24c>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	0a9b      	lsrs	r3, r3, #10
 8001358:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800136a:	2208      	movs	r2, #8
 800136c:	409a      	lsls	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4013      	ands	r3, r2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d01a      	beq.n	80013ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d013      	beq.n	80013ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0204 	bic.w	r2, r2, #4
 8001392:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001398:	2208      	movs	r2, #8
 800139a:	409a      	lsls	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013a4:	f043 0201 	orr.w	r2, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b0:	2201      	movs	r2, #1
 80013b2:	409a      	lsls	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d012      	beq.n	80013e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00b      	beq.n	80013e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ce:	2201      	movs	r2, #1
 80013d0:	409a      	lsls	r2, r3
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013da:	f043 0202 	orr.w	r2, r3, #2
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e6:	2204      	movs	r2, #4
 80013e8:	409a      	lsls	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d012      	beq.n	8001418 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00b      	beq.n	8001418 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001404:	2204      	movs	r2, #4
 8001406:	409a      	lsls	r2, r3
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001410:	f043 0204 	orr.w	r2, r3, #4
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800141c:	2210      	movs	r2, #16
 800141e:	409a      	lsls	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d043      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d03c      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800143a:	2210      	movs	r2, #16
 800143c:	409a      	lsls	r2, r3
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d018      	beq.n	8001482 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d108      	bne.n	8001470 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	2b00      	cmp	r3, #0
 8001464:	d024      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	4798      	blx	r3
 800146e:	e01f      	b.n	80014b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001474:	2b00      	cmp	r3, #0
 8001476:	d01b      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	4798      	blx	r3
 8001480:	e016      	b.n	80014b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148c:	2b00      	cmp	r3, #0
 800148e:	d107      	bne.n	80014a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0208 	bic.w	r2, r2, #8
 800149e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b4:	2220      	movs	r2, #32
 80014b6:	409a      	lsls	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4013      	ands	r3, r2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 808f 	beq.w	80015e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 8087 	beq.w	80015e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014d6:	2220      	movs	r2, #32
 80014d8:	409a      	lsls	r2, r3
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b05      	cmp	r3, #5
 80014e8:	d136      	bne.n	8001558 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0216 	bic.w	r2, r2, #22
 80014f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	695a      	ldr	r2, [r3, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001508:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	2b00      	cmp	r3, #0
 8001510:	d103      	bne.n	800151a <HAL_DMA_IRQHandler+0x1da>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001516:	2b00      	cmp	r3, #0
 8001518:	d007      	beq.n	800152a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0208 	bic.w	r2, r2, #8
 8001528:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800152e:	223f      	movs	r2, #63	@ 0x3f
 8001530:	409a      	lsls	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800154a:	2b00      	cmp	r3, #0
 800154c:	d07e      	beq.n	800164c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	4798      	blx	r3
        }
        return;
 8001556:	e079      	b.n	800164c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d01d      	beq.n	80015a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10d      	bne.n	8001590 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001578:	2b00      	cmp	r3, #0
 800157a:	d031      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	4798      	blx	r3
 8001584:	e02c      	b.n	80015e0 <HAL_DMA_IRQHandler+0x2a0>
 8001586:	bf00      	nop
 8001588:	20000014 	.word	0x20000014
 800158c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001594:	2b00      	cmp	r3, #0
 8001596:	d023      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	4798      	blx	r3
 80015a0:	e01e      	b.n	80015e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10f      	bne.n	80015d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0210 	bic.w	r2, r2, #16
 80015be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d032      	beq.n	800164e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d022      	beq.n	800163a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2205      	movs	r2, #5
 80015f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0201 	bic.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	3301      	adds	r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	429a      	cmp	r2, r3
 8001616:	d307      	bcc.n	8001628 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f2      	bne.n	800160c <HAL_DMA_IRQHandler+0x2cc>
 8001626:	e000      	b.n	800162a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001628:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163e:	2b00      	cmp	r3, #0
 8001640:	d005      	beq.n	800164e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	4798      	blx	r3
 800164a:	e000      	b.n	800164e <HAL_DMA_IRQHandler+0x30e>
        return;
 800164c:	bf00      	nop
    }
  }
}
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	3b10      	subs	r3, #16
 8001664:	4a14      	ldr	r2, [pc, #80]	@ (80016b8 <DMA_CalcBaseAndBitshift+0x64>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	091b      	lsrs	r3, r3, #4
 800166c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800166e:	4a13      	ldr	r2, [pc, #76]	@ (80016bc <DMA_CalcBaseAndBitshift+0x68>)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d909      	bls.n	8001696 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800168a:	f023 0303 	bic.w	r3, r3, #3
 800168e:	1d1a      	adds	r2, r3, #4
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	659a      	str	r2, [r3, #88]	@ 0x58
 8001694:	e007      	b.n	80016a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800169e:	f023 0303 	bic.w	r3, r3, #3
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	aaaaaaab 	.word	0xaaaaaaab
 80016bc:	08004a8c 	.word	0x08004a8c

080016c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11f      	bne.n	800171a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d856      	bhi.n	800178e <DMA_CheckFifoParam+0xce>
 80016e0:	a201      	add	r2, pc, #4	@ (adr r2, 80016e8 <DMA_CheckFifoParam+0x28>)
 80016e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e6:	bf00      	nop
 80016e8:	080016f9 	.word	0x080016f9
 80016ec:	0800170b 	.word	0x0800170b
 80016f0:	080016f9 	.word	0x080016f9
 80016f4:	0800178f 	.word	0x0800178f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d046      	beq.n	8001792 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001708:	e043      	b.n	8001792 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001712:	d140      	bne.n	8001796 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001718:	e03d      	b.n	8001796 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001722:	d121      	bne.n	8001768 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d837      	bhi.n	800179a <DMA_CheckFifoParam+0xda>
 800172a:	a201      	add	r2, pc, #4	@ (adr r2, 8001730 <DMA_CheckFifoParam+0x70>)
 800172c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001730:	08001741 	.word	0x08001741
 8001734:	08001747 	.word	0x08001747
 8001738:	08001741 	.word	0x08001741
 800173c:	08001759 	.word	0x08001759
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
      break;
 8001744:	e030      	b.n	80017a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d025      	beq.n	800179e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001756:	e022      	b.n	800179e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001760:	d11f      	bne.n	80017a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001766:	e01c      	b.n	80017a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d903      	bls.n	8001776 <DMA_CheckFifoParam+0xb6>
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2b03      	cmp	r3, #3
 8001772:	d003      	beq.n	800177c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001774:	e018      	b.n	80017a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
      break;
 800177a:	e015      	b.n	80017a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001780:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00e      	beq.n	80017a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
      break;
 800178c:	e00b      	b.n	80017a6 <DMA_CheckFifoParam+0xe6>
      break;
 800178e:	bf00      	nop
 8001790:	e00a      	b.n	80017a8 <DMA_CheckFifoParam+0xe8>
      break;
 8001792:	bf00      	nop
 8001794:	e008      	b.n	80017a8 <DMA_CheckFifoParam+0xe8>
      break;
 8001796:	bf00      	nop
 8001798:	e006      	b.n	80017a8 <DMA_CheckFifoParam+0xe8>
      break;
 800179a:	bf00      	nop
 800179c:	e004      	b.n	80017a8 <DMA_CheckFifoParam+0xe8>
      break;
 800179e:	bf00      	nop
 80017a0:	e002      	b.n	80017a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80017a2:	bf00      	nop
 80017a4:	e000      	b.n	80017a8 <DMA_CheckFifoParam+0xe8>
      break;
 80017a6:	bf00      	nop
    }
  } 
  
  return status; 
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	@ 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	e16b      	b.n	8001aac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017d4:	2201      	movs	r2, #1
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	f040 815a 	bne.w	8001aa6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d005      	beq.n	800180a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001806:	2b02      	cmp	r3, #2
 8001808:	d130      	bne.n	800186c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001840:	2201      	movs	r2, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 0201 	and.w	r2, r3, #1
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b03      	cmp	r3, #3
 8001876:	d017      	beq.n	80018a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d123      	bne.n	80018fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	08da      	lsrs	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3208      	adds	r2, #8
 80018bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	220f      	movs	r2, #15
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	08da      	lsrs	r2, r3, #3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3208      	adds	r2, #8
 80018f6:	69b9      	ldr	r1, [r7, #24]
 80018f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0203 	and.w	r2, r3, #3
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 80b4 	beq.w	8001aa6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b60      	ldr	r3, [pc, #384]	@ (8001ac4 <HAL_GPIO_Init+0x30c>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	4a5f      	ldr	r2, [pc, #380]	@ (8001ac4 <HAL_GPIO_Init+0x30c>)
 8001948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800194c:	6453      	str	r3, [r2, #68]	@ 0x44
 800194e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ac4 <HAL_GPIO_Init+0x30c>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800195a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ac8 <HAL_GPIO_Init+0x310>)
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	089b      	lsrs	r3, r3, #2
 8001960:	3302      	adds	r3, #2
 8001962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	220f      	movs	r2, #15
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a52      	ldr	r2, [pc, #328]	@ (8001acc <HAL_GPIO_Init+0x314>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d02b      	beq.n	80019de <HAL_GPIO_Init+0x226>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a51      	ldr	r2, [pc, #324]	@ (8001ad0 <HAL_GPIO_Init+0x318>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d025      	beq.n	80019da <HAL_GPIO_Init+0x222>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a50      	ldr	r2, [pc, #320]	@ (8001ad4 <HAL_GPIO_Init+0x31c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d01f      	beq.n	80019d6 <HAL_GPIO_Init+0x21e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4f      	ldr	r2, [pc, #316]	@ (8001ad8 <HAL_GPIO_Init+0x320>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d019      	beq.n	80019d2 <HAL_GPIO_Init+0x21a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4e      	ldr	r2, [pc, #312]	@ (8001adc <HAL_GPIO_Init+0x324>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d013      	beq.n	80019ce <HAL_GPIO_Init+0x216>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4d      	ldr	r2, [pc, #308]	@ (8001ae0 <HAL_GPIO_Init+0x328>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d00d      	beq.n	80019ca <HAL_GPIO_Init+0x212>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ae4 <HAL_GPIO_Init+0x32c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d007      	beq.n	80019c6 <HAL_GPIO_Init+0x20e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ae8 <HAL_GPIO_Init+0x330>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d101      	bne.n	80019c2 <HAL_GPIO_Init+0x20a>
 80019be:	2307      	movs	r3, #7
 80019c0:	e00e      	b.n	80019e0 <HAL_GPIO_Init+0x228>
 80019c2:	2308      	movs	r3, #8
 80019c4:	e00c      	b.n	80019e0 <HAL_GPIO_Init+0x228>
 80019c6:	2306      	movs	r3, #6
 80019c8:	e00a      	b.n	80019e0 <HAL_GPIO_Init+0x228>
 80019ca:	2305      	movs	r3, #5
 80019cc:	e008      	b.n	80019e0 <HAL_GPIO_Init+0x228>
 80019ce:	2304      	movs	r3, #4
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x228>
 80019d2:	2303      	movs	r3, #3
 80019d4:	e004      	b.n	80019e0 <HAL_GPIO_Init+0x228>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e002      	b.n	80019e0 <HAL_GPIO_Init+0x228>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <HAL_GPIO_Init+0x228>
 80019de:	2300      	movs	r3, #0
 80019e0:	69fa      	ldr	r2, [r7, #28]
 80019e2:	f002 0203 	and.w	r2, r2, #3
 80019e6:	0092      	lsls	r2, r2, #2
 80019e8:	4093      	lsls	r3, r2
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f0:	4935      	ldr	r1, [pc, #212]	@ (8001ac8 <HAL_GPIO_Init+0x310>)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	3302      	adds	r3, #2
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019fe:	4b3b      	ldr	r3, [pc, #236]	@ (8001aec <HAL_GPIO_Init+0x334>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a22:	4a32      	ldr	r2, [pc, #200]	@ (8001aec <HAL_GPIO_Init+0x334>)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a28:	4b30      	ldr	r3, [pc, #192]	@ (8001aec <HAL_GPIO_Init+0x334>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a4c:	4a27      	ldr	r2, [pc, #156]	@ (8001aec <HAL_GPIO_Init+0x334>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a52:	4b26      	ldr	r3, [pc, #152]	@ (8001aec <HAL_GPIO_Init+0x334>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a76:	4a1d      	ldr	r2, [pc, #116]	@ (8001aec <HAL_GPIO_Init+0x334>)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <HAL_GPIO_Init+0x334>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aa0:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <HAL_GPIO_Init+0x334>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	61fb      	str	r3, [r7, #28]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	2b0f      	cmp	r3, #15
 8001ab0:	f67f ae90 	bls.w	80017d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3724      	adds	r7, #36	@ 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40013800 	.word	0x40013800
 8001acc:	40020000 	.word	0x40020000
 8001ad0:	40020400 	.word	0x40020400
 8001ad4:	40020800 	.word	0x40020800
 8001ad8:	40020c00 	.word	0x40020c00
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40021400 	.word	0x40021400
 8001ae4:	40021800 	.word	0x40021800
 8001ae8:	40021c00 	.word	0x40021c00
 8001aec:	40013c00 	.word	0x40013c00

08001af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	807b      	strh	r3, [r7, #2]
 8001afc:	4613      	mov	r3, r2
 8001afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b00:	787b      	ldrb	r3, [r7, #1]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b06:	887a      	ldrh	r2, [r7, #2]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b0c:	e003      	b.n	8001b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b0e:	887b      	ldrh	r3, [r7, #2]
 8001b10:	041a      	lsls	r2, r3, #16
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	619a      	str	r2, [r3, #24]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b34:	887a      	ldrh	r2, [r7, #2]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	041a      	lsls	r2, r3, #16
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	43d9      	mvns	r1, r3
 8001b40:	887b      	ldrh	r3, [r7, #2]
 8001b42:	400b      	ands	r3, r1
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	619a      	str	r2, [r3, #24]
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e128      	b.n	8001dbc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a90      	ldr	r2, [pc, #576]	@ (8001dc4 <HAL_I2S_Init+0x26c>)
 8001b82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7fe fe95 	bl	80008b4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001ba0:	f023 030f 	bic.w	r3, r3, #15
 8001ba4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2202      	movs	r2, #2
 8001bac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d060      	beq.n	8001c78 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d102      	bne.n	8001bc4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001bbe:	2310      	movs	r3, #16
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e001      	b.n	8001bc8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001bc4:	2320      	movs	r3, #32
 8001bc6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b20      	cmp	r3, #32
 8001bce:	d802      	bhi.n	8001bd6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f001 f9d8 	bl	8002f8c <HAL_RCCEx_GetPeriphCLKFreq>
 8001bdc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001be6:	d125      	bne.n	8001c34 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d010      	beq.n	8001c12 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	461a      	mov	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0c:	3305      	adds	r3, #5
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	e01f      	b.n	8001c52 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	461a      	mov	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	3305      	adds	r3, #5
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	e00e      	b.n	8001c52 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	461a      	mov	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	3305      	adds	r3, #5
 8001c50:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4a5c      	ldr	r2, [pc, #368]	@ (8001dc8 <HAL_I2S_Init+0x270>)
 8001c56:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5a:	08db      	lsrs	r3, r3, #3
 8001c5c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	e003      	b.n	8001c80 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d902      	bls.n	8001c8c <HAL_I2S_Init+0x134>
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	2bff      	cmp	r3, #255	@ 0xff
 8001c8a:	d907      	bls.n	8001c9c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c90:	f043 0210 	orr.w	r2, r3, #16
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e08f      	b.n	8001dbc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	ea42 0103 	orr.w	r1, r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001cba:	f023 030f 	bic.w	r3, r3, #15
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6851      	ldr	r1, [r2, #4]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6892      	ldr	r2, [r2, #8]
 8001cc6:	4311      	orrs	r1, r2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	68d2      	ldr	r2, [r2, #12]
 8001ccc:	4311      	orrs	r1, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6992      	ldr	r2, [r2, #24]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cde:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d161      	bne.n	8001dac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a38      	ldr	r2, [pc, #224]	@ (8001dcc <HAL_I2S_Init+0x274>)
 8001cec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a37      	ldr	r2, [pc, #220]	@ (8001dd0 <HAL_I2S_Init+0x278>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d101      	bne.n	8001cfc <HAL_I2S_Init+0x1a4>
 8001cf8:	4b36      	ldr	r3, [pc, #216]	@ (8001dd4 <HAL_I2S_Init+0x27c>)
 8001cfa:	e001      	b.n	8001d00 <HAL_I2S_Init+0x1a8>
 8001cfc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	4932      	ldr	r1, [pc, #200]	@ (8001dd0 <HAL_I2S_Init+0x278>)
 8001d08:	428a      	cmp	r2, r1
 8001d0a:	d101      	bne.n	8001d10 <HAL_I2S_Init+0x1b8>
 8001d0c:	4a31      	ldr	r2, [pc, #196]	@ (8001dd4 <HAL_I2S_Init+0x27c>)
 8001d0e:	e001      	b.n	8001d14 <HAL_I2S_Init+0x1bc>
 8001d10:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001d14:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001d18:	f023 030f 	bic.w	r3, r3, #15
 8001d1c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a2b      	ldr	r2, [pc, #172]	@ (8001dd0 <HAL_I2S_Init+0x278>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d101      	bne.n	8001d2c <HAL_I2S_Init+0x1d4>
 8001d28:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd4 <HAL_I2S_Init+0x27c>)
 8001d2a:	e001      	b.n	8001d30 <HAL_I2S_Init+0x1d8>
 8001d2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d30:	2202      	movs	r2, #2
 8001d32:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a25      	ldr	r2, [pc, #148]	@ (8001dd0 <HAL_I2S_Init+0x278>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_I2S_Init+0x1ea>
 8001d3e:	4b25      	ldr	r3, [pc, #148]	@ (8001dd4 <HAL_I2S_Init+0x27c>)
 8001d40:	e001      	b.n	8001d46 <HAL_I2S_Init+0x1ee>
 8001d42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d52:	d003      	beq.n	8001d5c <HAL_I2S_Init+0x204>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d103      	bne.n	8001d64 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001d5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	e001      	b.n	8001d68 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d72:	4313      	orrs	r3, r2
 8001d74:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d86:	4313      	orrs	r3, r2
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	897b      	ldrh	r3, [r7, #10]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d94:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd0 <HAL_I2S_Init+0x278>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d101      	bne.n	8001da4 <HAL_I2S_Init+0x24c>
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <HAL_I2S_Init+0x27c>)
 8001da2:	e001      	b.n	8001da8 <HAL_I2S_Init+0x250>
 8001da4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001da8:	897a      	ldrh	r2, [r7, #10]
 8001daa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3720      	adds	r7, #32
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	08001ecf 	.word	0x08001ecf
 8001dc8:	cccccccd 	.word	0xcccccccd
 8001dcc:	08001fe5 	.word	0x08001fe5
 8001dd0:	40003800 	.word	0x40003800
 8001dd4:	40003400 	.word	0x40003400

08001dd8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e20:	881a      	ldrh	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2c:	1c9a      	adds	r2, r3, #2
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10e      	bne.n	8001e68 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001e58:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffb8 	bl	8001dd8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e82:	b292      	uxth	r2, r2
 8001e84:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8a:	1c9a      	adds	r2, r3, #2
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	3b01      	subs	r3, #1
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10e      	bne.n	8001ec6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001eb6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff93 	bl	8001dec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d13a      	bne.n	8001f60 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d109      	bne.n	8001f08 <I2S_IRQHandler+0x3a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001efe:	2b40      	cmp	r3, #64	@ 0x40
 8001f00:	d102      	bne.n	8001f08 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ffb4 	bl	8001e70 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f0e:	2b40      	cmp	r3, #64	@ 0x40
 8001f10:	d126      	bne.n	8001f60 <I2S_IRQHandler+0x92>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d11f      	bne.n	8001f60 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f2e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f30:	2300      	movs	r3, #0
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	f043 0202 	orr.w	r2, r3, #2
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ff50 	bl	8001e00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d136      	bne.n	8001fda <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d109      	bne.n	8001f8a <I2S_IRQHandler+0xbc>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f80:	2b80      	cmp	r3, #128	@ 0x80
 8001f82:	d102      	bne.n	8001f8a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff45 	bl	8001e14 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d122      	bne.n	8001fda <I2S_IRQHandler+0x10c>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	d11b      	bne.n	8001fda <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001fb0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fcc:	f043 0204 	orr.w	r2, r3, #4
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ff13 	bl	8001e00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fda:	bf00      	nop
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a92      	ldr	r2, [pc, #584]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d101      	bne.n	8002002 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001ffe:	4b92      	ldr	r3, [pc, #584]	@ (8002248 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002000:	e001      	b.n	8002006 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002002:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a8b      	ldr	r2, [pc, #556]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d101      	bne.n	8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800201c:	4b8a      	ldr	r3, [pc, #552]	@ (8002248 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800201e:	e001      	b.n	8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002020:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002030:	d004      	beq.n	800203c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f040 8099 	bne.w	800216e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b02      	cmp	r3, #2
 8002044:	d107      	bne.n	8002056 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f925 	bl	80022a0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d107      	bne.n	8002070 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f9c8 	bl	8002400 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002076:	2b40      	cmp	r3, #64	@ 0x40
 8002078:	d13a      	bne.n	80020f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	2b00      	cmp	r3, #0
 8002082:	d035      	beq.n	80020f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a6e      	ldr	r2, [pc, #440]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d101      	bne.n	8002092 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800208e:	4b6e      	ldr	r3, [pc, #440]	@ (8002248 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002090:	e001      	b.n	8002096 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002092:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4969      	ldr	r1, [pc, #420]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800209e:	428b      	cmp	r3, r1
 80020a0:	d101      	bne.n	80020a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80020a2:	4b69      	ldr	r3, [pc, #420]	@ (8002248 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020a4:	e001      	b.n	80020aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80020a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80020ae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80020be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	f043 0202 	orr.w	r2, r3, #2
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff fe88 	bl	8001e00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	f040 80c3 	bne.w	8002282 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f003 0320 	and.w	r3, r3, #32
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 80bd 	beq.w	8002282 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002116:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a49      	ldr	r2, [pc, #292]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d101      	bne.n	8002126 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002122:	4b49      	ldr	r3, [pc, #292]	@ (8002248 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002124:	e001      	b.n	800212a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002126:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4944      	ldr	r1, [pc, #272]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002132:	428b      	cmp	r3, r1
 8002134:	d101      	bne.n	800213a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002136:	4b44      	ldr	r3, [pc, #272]	@ (8002248 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002138:	e001      	b.n	800213e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800213a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800213e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002142:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215e:	f043 0204 	orr.w	r2, r3, #4
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fe4a 	bl	8001e00 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800216c:	e089      	b.n	8002282 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b02      	cmp	r3, #2
 8002176:	d107      	bne.n	8002188 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f8be 	bl	8002304 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f8fd 	bl	800239c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a8:	2b40      	cmp	r3, #64	@ 0x40
 80021aa:	d12f      	bne.n	800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d02a      	beq.n	800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80021c4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d101      	bne.n	80021d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80021d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002248 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021d2:	e001      	b.n	80021d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80021d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4919      	ldr	r1, [pc, #100]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021e0:	428b      	cmp	r3, r1
 80021e2:	d101      	bne.n	80021e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80021e4:	4b18      	ldr	r3, [pc, #96]	@ (8002248 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021e6:	e001      	b.n	80021ec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80021e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80021f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	f043 0202 	orr.w	r2, r3, #2
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff fdfa 	bl	8001e00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b08      	cmp	r3, #8
 8002214:	d136      	bne.n	8002284 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b00      	cmp	r3, #0
 800221e:	d031      	beq.n	8002284 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a07      	ldr	r2, [pc, #28]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d101      	bne.n	800222e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800222a:	4b07      	ldr	r3, [pc, #28]	@ (8002248 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800222c:	e001      	b.n	8002232 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800222e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4902      	ldr	r1, [pc, #8]	@ (8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800223a:	428b      	cmp	r3, r1
 800223c:	d106      	bne.n	800224c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800223e:	4b02      	ldr	r3, [pc, #8]	@ (8002248 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002240:	e006      	b.n	8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002242:	bf00      	nop
 8002244:	40003800 	.word	0x40003800
 8002248:	40003400 	.word	0x40003400
 800224c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002250:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002254:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002264:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002272:	f043 0204 	orr.w	r2, r3, #4
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff fdc0 	bl	8001e00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002280:	e000      	b.n	8002284 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002282:	bf00      	nop
}
 8002284:	bf00      	nop
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	1c99      	adds	r1, r3, #2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6251      	str	r1, [r2, #36]	@ 0x24
 80022b2:	881a      	ldrh	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d113      	bne.n	80022fa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80022e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d106      	bne.n	80022fa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ffc9 	bl	800228c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	1c99      	adds	r1, r3, #2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6251      	str	r1, [r2, #36]	@ 0x24
 8002316:	8819      	ldrh	r1, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1d      	ldr	r2, [pc, #116]	@ (8002394 <I2SEx_TxISR_I2SExt+0x90>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d101      	bne.n	8002326 <I2SEx_TxISR_I2SExt+0x22>
 8002322:	4b1d      	ldr	r3, [pc, #116]	@ (8002398 <I2SEx_TxISR_I2SExt+0x94>)
 8002324:	e001      	b.n	800232a <I2SEx_TxISR_I2SExt+0x26>
 8002326:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800232a:	460a      	mov	r2, r1
 800232c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d121      	bne.n	800238a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a12      	ldr	r2, [pc, #72]	@ (8002394 <I2SEx_TxISR_I2SExt+0x90>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d101      	bne.n	8002354 <I2SEx_TxISR_I2SExt+0x50>
 8002350:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <I2SEx_TxISR_I2SExt+0x94>)
 8002352:	e001      	b.n	8002358 <I2SEx_TxISR_I2SExt+0x54>
 8002354:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	490d      	ldr	r1, [pc, #52]	@ (8002394 <I2SEx_TxISR_I2SExt+0x90>)
 8002360:	428b      	cmp	r3, r1
 8002362:	d101      	bne.n	8002368 <I2SEx_TxISR_I2SExt+0x64>
 8002364:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <I2SEx_TxISR_I2SExt+0x94>)
 8002366:	e001      	b.n	800236c <I2SEx_TxISR_I2SExt+0x68>
 8002368:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800236c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002370:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002376:	b29b      	uxth	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d106      	bne.n	800238a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ff81 	bl	800228c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40003800 	.word	0x40003800
 8002398:	40003400 	.word	0x40003400

0800239c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68d8      	ldr	r0, [r3, #12]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ae:	1c99      	adds	r1, r3, #2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80023b4:	b282      	uxth	r2, r0
 80023b6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d113      	bne.n	80023f8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80023de:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ff4a 	bl	800228c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a20      	ldr	r2, [pc, #128]	@ (8002490 <I2SEx_RxISR_I2SExt+0x90>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <I2SEx_RxISR_I2SExt+0x16>
 8002412:	4b20      	ldr	r3, [pc, #128]	@ (8002494 <I2SEx_RxISR_I2SExt+0x94>)
 8002414:	e001      	b.n	800241a <I2SEx_RxISR_I2SExt+0x1a>
 8002416:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800241a:	68d8      	ldr	r0, [r3, #12]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	1c99      	adds	r1, r3, #2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002426:	b282      	uxth	r2, r0
 8002428:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d121      	bne.n	8002486 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a12      	ldr	r2, [pc, #72]	@ (8002490 <I2SEx_RxISR_I2SExt+0x90>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d101      	bne.n	8002450 <I2SEx_RxISR_I2SExt+0x50>
 800244c:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <I2SEx_RxISR_I2SExt+0x94>)
 800244e:	e001      	b.n	8002454 <I2SEx_RxISR_I2SExt+0x54>
 8002450:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	490d      	ldr	r1, [pc, #52]	@ (8002490 <I2SEx_RxISR_I2SExt+0x90>)
 800245c:	428b      	cmp	r3, r1
 800245e:	d101      	bne.n	8002464 <I2SEx_RxISR_I2SExt+0x64>
 8002460:	4b0c      	ldr	r3, [pc, #48]	@ (8002494 <I2SEx_RxISR_I2SExt+0x94>)
 8002462:	e001      	b.n	8002468 <I2SEx_RxISR_I2SExt+0x68>
 8002464:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002468:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800246c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d106      	bne.n	8002486 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ff03 	bl	800228c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40003800 	.word	0x40003800
 8002494:	40003400 	.word	0x40003400

08002498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e267      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d075      	beq.n	80025a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b6:	4b88      	ldr	r3, [pc, #544]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d00c      	beq.n	80024dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c2:	4b85      	ldr	r3, [pc, #532]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d112      	bne.n	80024f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ce:	4b82      	ldr	r3, [pc, #520]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024da:	d10b      	bne.n	80024f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	4b7e      	ldr	r3, [pc, #504]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d05b      	beq.n	80025a0 <HAL_RCC_OscConfig+0x108>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d157      	bne.n	80025a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e242      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024fc:	d106      	bne.n	800250c <HAL_RCC_OscConfig+0x74>
 80024fe:	4b76      	ldr	r3, [pc, #472]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a75      	ldr	r2, [pc, #468]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e01d      	b.n	8002548 <HAL_RCC_OscConfig+0xb0>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x98>
 8002516:	4b70      	ldr	r3, [pc, #448]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a6f      	ldr	r2, [pc, #444]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 800251c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b6d      	ldr	r3, [pc, #436]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6c      	ldr	r2, [pc, #432]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e00b      	b.n	8002548 <HAL_RCC_OscConfig+0xb0>
 8002530:	4b69      	ldr	r3, [pc, #420]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a68      	ldr	r2, [pc, #416]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b66      	ldr	r3, [pc, #408]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a65      	ldr	r2, [pc, #404]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d013      	beq.n	8002578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe fc74 	bl	8000e3c <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002558:	f7fe fc70 	bl	8000e3c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	@ 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e207      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	4b5b      	ldr	r3, [pc, #364]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0xc0>
 8002576:	e014      	b.n	80025a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7fe fc60 	bl	8000e3c <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002580:	f7fe fc5c 	bl	8000e3c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	@ 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e1f3      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002592:	4b51      	ldr	r3, [pc, #324]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0xe8>
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d063      	beq.n	8002676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ae:	4b4a      	ldr	r3, [pc, #296]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ba:	4b47      	ldr	r3, [pc, #284]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d11c      	bne.n	8002600 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c6:	4b44      	ldr	r3, [pc, #272]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d116      	bne.n	8002600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d2:	4b41      	ldr	r3, [pc, #260]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_RCC_OscConfig+0x152>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e1c7      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ea:	4b3b      	ldr	r3, [pc, #236]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4937      	ldr	r1, [pc, #220]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fe:	e03a      	b.n	8002676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002608:	4b34      	ldr	r3, [pc, #208]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7fe fc15 	bl	8000e3c <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002616:	f7fe fc11 	bl	8000e3c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e1a8      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002628:	4b2b      	ldr	r3, [pc, #172]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b28      	ldr	r3, [pc, #160]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4925      	ldr	r1, [pc, #148]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
 8002648:	e015      	b.n	8002676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264a:	4b24      	ldr	r3, [pc, #144]	@ (80026dc <HAL_RCC_OscConfig+0x244>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7fe fbf4 	bl	8000e3c <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002658:	f7fe fbf0 	bl	8000e3c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e187      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266a:	4b1b      	ldr	r3, [pc, #108]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d036      	beq.n	80026f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d016      	beq.n	80026b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268a:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <HAL_RCC_OscConfig+0x248>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002690:	f7fe fbd4 	bl	8000e3c <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002698:	f7fe fbd0 	bl	8000e3c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e167      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026aa:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <HAL_RCC_OscConfig+0x240>)
 80026ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x200>
 80026b6:	e01b      	b.n	80026f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b8:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <HAL_RCC_OscConfig+0x248>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026be:	f7fe fbbd 	bl	8000e3c <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c4:	e00e      	b.n	80026e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c6:	f7fe fbb9 	bl	8000e3c <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d907      	bls.n	80026e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e150      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
 80026d8:	40023800 	.word	0x40023800
 80026dc:	42470000 	.word	0x42470000
 80026e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e4:	4b88      	ldr	r3, [pc, #544]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 80026e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1ea      	bne.n	80026c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8097 	beq.w	800282c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002702:	4b81      	ldr	r3, [pc, #516]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10f      	bne.n	800272e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	4b7d      	ldr	r3, [pc, #500]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	4a7c      	ldr	r2, [pc, #496]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800271c:	6413      	str	r3, [r2, #64]	@ 0x40
 800271e:	4b7a      	ldr	r3, [pc, #488]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272a:	2301      	movs	r3, #1
 800272c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272e:	4b77      	ldr	r3, [pc, #476]	@ (800290c <HAL_RCC_OscConfig+0x474>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d118      	bne.n	800276c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273a:	4b74      	ldr	r3, [pc, #464]	@ (800290c <HAL_RCC_OscConfig+0x474>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a73      	ldr	r2, [pc, #460]	@ (800290c <HAL_RCC_OscConfig+0x474>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002746:	f7fe fb79 	bl	8000e3c <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274e:	f7fe fb75 	bl	8000e3c <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e10c      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	4b6a      	ldr	r3, [pc, #424]	@ (800290c <HAL_RCC_OscConfig+0x474>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d106      	bne.n	8002782 <HAL_RCC_OscConfig+0x2ea>
 8002774:	4b64      	ldr	r3, [pc, #400]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002778:	4a63      	ldr	r2, [pc, #396]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002780:	e01c      	b.n	80027bc <HAL_RCC_OscConfig+0x324>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b05      	cmp	r3, #5
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x30c>
 800278a:	4b5f      	ldr	r3, [pc, #380]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278e:	4a5e      	ldr	r2, [pc, #376]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	6713      	str	r3, [r2, #112]	@ 0x70
 8002796:	4b5c      	ldr	r3, [pc, #368]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279a:	4a5b      	ldr	r2, [pc, #364]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a2:	e00b      	b.n	80027bc <HAL_RCC_OscConfig+0x324>
 80027a4:	4b58      	ldr	r3, [pc, #352]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a8:	4a57      	ldr	r2, [pc, #348]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b0:	4b55      	ldr	r3, [pc, #340]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b4:	4a54      	ldr	r2, [pc, #336]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 80027b6:	f023 0304 	bic.w	r3, r3, #4
 80027ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d015      	beq.n	80027f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7fe fb3a 	bl	8000e3c <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7fe fb36 	bl	8000e3c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e0cb      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e2:	4b49      	ldr	r3, [pc, #292]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0ee      	beq.n	80027cc <HAL_RCC_OscConfig+0x334>
 80027ee:	e014      	b.n	800281a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f0:	f7fe fb24 	bl	8000e3c <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f6:	e00a      	b.n	800280e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f8:	f7fe fb20 	bl	8000e3c <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e0b5      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280e:	4b3e      	ldr	r3, [pc, #248]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1ee      	bne.n	80027f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281a:	7dfb      	ldrb	r3, [r7, #23]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002820:	4b39      	ldr	r3, [pc, #228]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	4a38      	ldr	r2, [pc, #224]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800282a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80a1 	beq.w	8002978 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002836:	4b34      	ldr	r3, [pc, #208]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b08      	cmp	r3, #8
 8002840:	d05c      	beq.n	80028fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d141      	bne.n	80028ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b31      	ldr	r3, [pc, #196]	@ (8002910 <HAL_RCC_OscConfig+0x478>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe faf4 	bl	8000e3c <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe faf0 	bl	8000e3c <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e087      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	4b27      	ldr	r3, [pc, #156]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69da      	ldr	r2, [r3, #28]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	019b      	lsls	r3, r3, #6
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288c:	085b      	lsrs	r3, r3, #1
 800288e:	3b01      	subs	r3, #1
 8002890:	041b      	lsls	r3, r3, #16
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002898:	061b      	lsls	r3, r3, #24
 800289a:	491b      	ldr	r1, [pc, #108]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 800289c:	4313      	orrs	r3, r2
 800289e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002910 <HAL_RCC_OscConfig+0x478>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a6:	f7fe fac9 	bl	8000e3c <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ae:	f7fe fac5 	bl	8000e3c <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e05c      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c0:	4b11      	ldr	r3, [pc, #68]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x416>
 80028cc:	e054      	b.n	8002978 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ce:	4b10      	ldr	r3, [pc, #64]	@ (8002910 <HAL_RCC_OscConfig+0x478>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fe fab2 	bl	8000e3c <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe faae 	bl	8000e3c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e045      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ee:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <HAL_RCC_OscConfig+0x470>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x444>
 80028fa:	e03d      	b.n	8002978 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d107      	bne.n	8002914 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e038      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
 8002908:	40023800 	.word	0x40023800
 800290c:	40007000 	.word	0x40007000
 8002910:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002914:	4b1b      	ldr	r3, [pc, #108]	@ (8002984 <HAL_RCC_OscConfig+0x4ec>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d028      	beq.n	8002974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d121      	bne.n	8002974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293a:	429a      	cmp	r2, r3
 800293c:	d11a      	bne.n	8002974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002944:	4013      	ands	r3, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800294a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800294c:	4293      	cmp	r3, r2
 800294e:	d111      	bne.n	8002974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295a:	085b      	lsrs	r3, r3, #1
 800295c:	3b01      	subs	r3, #1
 800295e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d107      	bne.n	8002974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800

08002988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0cc      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800299c:	4b68      	ldr	r3, [pc, #416]	@ (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d90c      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b65      	ldr	r3, [pc, #404]	@ (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b63      	ldr	r3, [pc, #396]	@ (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0b8      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029dc:	4b59      	ldr	r3, [pc, #356]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a58      	ldr	r2, [pc, #352]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f4:	4b53      	ldr	r3, [pc, #332]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4a52      	ldr	r2, [pc, #328]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a00:	4b50      	ldr	r3, [pc, #320]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	494d      	ldr	r1, [pc, #308]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d044      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d107      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b47      	ldr	r3, [pc, #284]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d119      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e07f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a46:	4b3f      	ldr	r3, [pc, #252]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e06f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a56:	4b3b      	ldr	r3, [pc, #236]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e067      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a66:	4b37      	ldr	r3, [pc, #220]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f023 0203 	bic.w	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4934      	ldr	r1, [pc, #208]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a78:	f7fe f9e0 	bl	8000e3c <HAL_GetTick>
 8002a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a80:	f7fe f9dc 	bl	8000e3c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e04f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	4b2b      	ldr	r3, [pc, #172]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 020c 	and.w	r2, r3, #12
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d1eb      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b25      	ldr	r3, [pc, #148]	@ (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d20c      	bcs.n	8002ad0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b22      	ldr	r3, [pc, #136]	@ (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b20      	ldr	r3, [pc, #128]	@ (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e032      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002adc:	4b19      	ldr	r3, [pc, #100]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4916      	ldr	r1, [pc, #88]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d009      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002afa:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	490e      	ldr	r1, [pc, #56]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b0e:	f000 f821 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002b12:	4602      	mov	r2, r0
 8002b14:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	490a      	ldr	r1, [pc, #40]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	5ccb      	ldrb	r3, [r1, r3]
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	4a09      	ldr	r2, [pc, #36]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b2a:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe f940 	bl	8000db4 <HAL_InitTick>

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023c00 	.word	0x40023c00
 8002b44:	40023800 	.word	0x40023800
 8002b48:	08004a74 	.word	0x08004a74
 8002b4c:	20000014 	.word	0x20000014
 8002b50:	20000018 	.word	0x20000018

08002b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b58:	b094      	sub	sp, #80	@ 0x50
 8002b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b60:	2300      	movs	r3, #0
 8002b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b64:	2300      	movs	r3, #0
 8002b66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b6c:	4b79      	ldr	r3, [pc, #484]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d00d      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x40>
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	f200 80e1 	bhi.w	8002d40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x34>
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b86:	e0db      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b88:	4b73      	ldr	r3, [pc, #460]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002b8c:	e0db      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b8e:	4b73      	ldr	r3, [pc, #460]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x208>)
 8002b90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b92:	e0d8      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b94:	4b6f      	ldr	r3, [pc, #444]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d063      	beq.n	8002c72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002baa:	4b6a      	ldr	r3, [pc, #424]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	099b      	lsrs	r3, r3, #6
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	462b      	mov	r3, r5
 8002bca:	f04f 0000 	mov.w	r0, #0
 8002bce:	f04f 0100 	mov.w	r1, #0
 8002bd2:	0159      	lsls	r1, r3, #5
 8002bd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd8:	0150      	lsls	r0, r2, #5
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4621      	mov	r1, r4
 8002be0:	1a51      	subs	r1, r2, r1
 8002be2:	6139      	str	r1, [r7, #16]
 8002be4:	4629      	mov	r1, r5
 8002be6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bf8:	4659      	mov	r1, fp
 8002bfa:	018b      	lsls	r3, r1, #6
 8002bfc:	4651      	mov	r1, sl
 8002bfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c02:	4651      	mov	r1, sl
 8002c04:	018a      	lsls	r2, r1, #6
 8002c06:	4651      	mov	r1, sl
 8002c08:	ebb2 0801 	subs.w	r8, r2, r1
 8002c0c:	4659      	mov	r1, fp
 8002c0e:	eb63 0901 	sbc.w	r9, r3, r1
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c26:	4690      	mov	r8, r2
 8002c28:	4699      	mov	r9, r3
 8002c2a:	4623      	mov	r3, r4
 8002c2c:	eb18 0303 	adds.w	r3, r8, r3
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	462b      	mov	r3, r5
 8002c34:	eb49 0303 	adc.w	r3, r9, r3
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c46:	4629      	mov	r1, r5
 8002c48:	024b      	lsls	r3, r1, #9
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c50:	4621      	mov	r1, r4
 8002c52:	024a      	lsls	r2, r1, #9
 8002c54:	4610      	mov	r0, r2
 8002c56:	4619      	mov	r1, r3
 8002c58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c64:	f7fd fab0 	bl	80001c8 <__aeabi_uldivmod>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c70:	e058      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c72:	4b38      	ldr	r3, [pc, #224]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	2200      	movs	r2, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c82:	623b      	str	r3, [r7, #32]
 8002c84:	2300      	movs	r3, #0
 8002c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c8c:	4642      	mov	r2, r8
 8002c8e:	464b      	mov	r3, r9
 8002c90:	f04f 0000 	mov.w	r0, #0
 8002c94:	f04f 0100 	mov.w	r1, #0
 8002c98:	0159      	lsls	r1, r3, #5
 8002c9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c9e:	0150      	lsls	r0, r2, #5
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4641      	mov	r1, r8
 8002ca6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002caa:	4649      	mov	r1, r9
 8002cac:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cc4:	ebb2 040a 	subs.w	r4, r2, sl
 8002cc8:	eb63 050b 	sbc.w	r5, r3, fp
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	00eb      	lsls	r3, r5, #3
 8002cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cda:	00e2      	lsls	r2, r4, #3
 8002cdc:	4614      	mov	r4, r2
 8002cde:	461d      	mov	r5, r3
 8002ce0:	4643      	mov	r3, r8
 8002ce2:	18e3      	adds	r3, r4, r3
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	464b      	mov	r3, r9
 8002ce8:	eb45 0303 	adc.w	r3, r5, r3
 8002cec:	607b      	str	r3, [r7, #4]
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	028b      	lsls	r3, r1, #10
 8002cfe:	4621      	mov	r1, r4
 8002d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d04:	4621      	mov	r1, r4
 8002d06:	028a      	lsls	r2, r1, #10
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d0e:	2200      	movs	r2, #0
 8002d10:	61bb      	str	r3, [r7, #24]
 8002d12:	61fa      	str	r2, [r7, #28]
 8002d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d18:	f7fd fa56 	bl	80001c8 <__aeabi_uldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4613      	mov	r3, r2
 8002d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d24:	4b0b      	ldr	r3, [pc, #44]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	0c1b      	lsrs	r3, r3, #16
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002d34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d3e:	e002      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d40:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3750      	adds	r7, #80	@ 0x50
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800
 8002d58:	00f42400 	.word	0x00f42400
 8002d5c:	007a1200 	.word	0x007a1200

08002d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d64:	4b03      	ldr	r3, [pc, #12]	@ (8002d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d66:	681b      	ldr	r3, [r3, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20000014 	.word	0x20000014

08002d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d7c:	f7ff fff0 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b05      	ldr	r3, [pc, #20]	@ (8002d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	0a9b      	lsrs	r3, r3, #10
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4903      	ldr	r1, [pc, #12]	@ (8002d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d8e:	5ccb      	ldrb	r3, [r1, r3]
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	08004a84 	.word	0x08004a84

08002da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002da4:	f7ff ffdc 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	0b5b      	lsrs	r3, r3, #13
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	4903      	ldr	r1, [pc, #12]	@ (8002dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	08004a84 	.word	0x08004a84

08002dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d105      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d035      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002df0:	4b62      	ldr	r3, [pc, #392]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002df6:	f7fe f821 	bl	8000e3c <HAL_GetTick>
 8002dfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002dfe:	f7fe f81d 	bl	8000e3c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e0b0      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e10:	4b5b      	ldr	r3, [pc, #364]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f0      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	019a      	lsls	r2, r3, #6
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	071b      	lsls	r3, r3, #28
 8002e28:	4955      	ldr	r1, [pc, #340]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e30:	4b52      	ldr	r3, [pc, #328]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e36:	f7fe f801 	bl	8000e3c <HAL_GetTick>
 8002e3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e3e:	f7fd fffd 	bl	8000e3c <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e090      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e50:	4b4b      	ldr	r3, [pc, #300]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8083 	beq.w	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	4b44      	ldr	r3, [pc, #272]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	4a43      	ldr	r2, [pc, #268]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e7a:	4b41      	ldr	r3, [pc, #260]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e86:	4b3f      	ldr	r3, [pc, #252]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a3e      	ldr	r2, [pc, #248]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e92:	f7fd ffd3 	bl	8000e3c <HAL_GetTick>
 8002e96:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e9a:	f7fd ffcf 	bl	8000e3c <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e062      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002eac:	4b35      	ldr	r3, [pc, #212]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eb8:	4b31      	ldr	r3, [pc, #196]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ec0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d02f      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d028      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ede:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ee0:	4b29      	ldr	r3, [pc, #164]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ee6:	4b28      	ldr	r3, [pc, #160]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002eec:	4a24      	ldr	r2, [pc, #144]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ef2:	4b23      	ldr	r3, [pc, #140]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d114      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002efe:	f7fd ff9d 	bl	8000e3c <HAL_GetTick>
 8002f02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	e00a      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7fd ff99 	bl	8000e3c <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e02a      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1c:	4b18      	ldr	r3, [pc, #96]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ee      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f34:	d10d      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002f36:	4b12      	ldr	r3, [pc, #72]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002f46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f4a:	490d      	ldr	r1, [pc, #52]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	608b      	str	r3, [r1, #8]
 8002f50:	e005      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002f52:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	4a0a      	ldr	r2, [pc, #40]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f58:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002f5c:	6093      	str	r3, [r2, #8]
 8002f5e:	4b08      	ldr	r3, [pc, #32]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f60:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6a:	4905      	ldr	r1, [pc, #20]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	42470068 	.word	0x42470068
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40007000 	.word	0x40007000
 8002f88:	42470e40 	.word	0x42470e40

08002f8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d13f      	bne.n	800302a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002faa:	4b24      	ldr	r3, [pc, #144]	@ (800303c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d006      	beq.n	8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fc0:	d12f      	bne.n	8003022 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002fc4:	617b      	str	r3, [r7, #20]
          break;
 8002fc6:	e02f      	b.n	8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800303c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fd4:	d108      	bne.n	8002fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002fd6:	4b19      	ldr	r3, [pc, #100]	@ (800303c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fde:	4a19      	ldr	r2, [pc, #100]	@ (8003044 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	e007      	b.n	8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002fe8:	4b14      	ldr	r3, [pc, #80]	@ (800303c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ff0:	4a15      	ldr	r2, [pc, #84]	@ (8003048 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002ff8:	4b10      	ldr	r3, [pc, #64]	@ (800303c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800300c:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800300e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003012:	0f1b      	lsrs	r3, r3, #28
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	fbb2 f3f3 	udiv	r3, r2, r3
 800301e:	617b      	str	r3, [r7, #20]
          break;
 8003020:	e002      	b.n	8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
          break;
 8003026:	bf00      	nop
        }
      }
      break;
 8003028:	e000      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 800302a:	bf00      	nop
    }
  }
  return frequency;
 800302c:	697b      	ldr	r3, [r7, #20]
}
 800302e:	4618      	mov	r0, r3
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800
 8003040:	00bb8000 	.word	0x00bb8000
 8003044:	007a1200 	.word	0x007a1200
 8003048:	00f42400 	.word	0x00f42400

0800304c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e042      	b.n	80030e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fd fd1a 	bl	8000aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2224      	movs	r2, #36	@ 0x24
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800308e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 fdbd 	bl	8003c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	@ 0x28
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	4613      	mov	r3, r2
 80030fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b20      	cmp	r3, #32
 800310a:	d175      	bne.n	80031f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_UART_Transmit+0x2c>
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e06e      	b.n	80031fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2221      	movs	r2, #33	@ 0x21
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800312a:	f7fd fe87 	bl	8000e3c <HAL_GetTick>
 800312e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	88fa      	ldrh	r2, [r7, #6]
 8003134:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	88fa      	ldrh	r2, [r7, #6]
 800313a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003144:	d108      	bne.n	8003158 <HAL_UART_Transmit+0x6c>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d104      	bne.n	8003158 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	e003      	b.n	8003160 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800315c:	2300      	movs	r3, #0
 800315e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003160:	e02e      	b.n	80031c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2200      	movs	r2, #0
 800316a:	2180      	movs	r1, #128	@ 0x80
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 fb1f 	bl	80037b0 <UART_WaitOnFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e03a      	b.n	80031fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10b      	bne.n	80031a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003198:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	3302      	adds	r3, #2
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	e007      	b.n	80031b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	781a      	ldrb	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	3301      	adds	r3, #1
 80031b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1cb      	bne.n	8003162 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2200      	movs	r2, #0
 80031d2:	2140      	movs	r1, #64	@ 0x40
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 faeb 	bl	80037b0 <UART_WaitOnFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e006      	b.n	80031fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	e000      	b.n	80031fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031f8:	2302      	movs	r3, #2
  }
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3720      	adds	r7, #32
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	4613      	mov	r3, r2
 800320e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b20      	cmp	r3, #32
 800321a:	d112      	bne.n	8003242 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <HAL_UART_Receive_IT+0x26>
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e00b      	b.n	8003244 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	461a      	mov	r2, r3
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 fb12 	bl	8003862 <UART_Start_Receive_IT>
 800323e:	4603      	mov	r3, r0
 8003240:	e000      	b.n	8003244 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003242:	2302      	movs	r3, #2
  }
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b0ba      	sub	sp, #232	@ 0xe8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003272:	2300      	movs	r3, #0
 8003274:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003278:	2300      	movs	r3, #0
 800327a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800327e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800328a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10f      	bne.n	80032b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <HAL_UART_IRQHandler+0x66>
 800329e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fbf2 	bl	8003a94 <UART_Receive_IT>
      return;
 80032b0:	e25b      	b.n	800376a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 80de 	beq.w	8003478 <HAL_UART_IRQHandler+0x22c>
 80032bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d106      	bne.n	80032d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80d1 	beq.w	8003478 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00b      	beq.n	80032fa <HAL_UART_IRQHandler+0xae>
 80032e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f2:	f043 0201 	orr.w	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <HAL_UART_IRQHandler+0xd2>
 8003306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003316:	f043 0202 	orr.w	r2, r3, #2
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800331e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00b      	beq.n	8003342 <HAL_UART_IRQHandler+0xf6>
 800332a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333a:	f043 0204 	orr.w	r2, r3, #4
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d011      	beq.n	8003372 <HAL_UART_IRQHandler+0x126>
 800334e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b00      	cmp	r3, #0
 8003358:	d105      	bne.n	8003366 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800335a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336a:	f043 0208 	orr.w	r2, r3, #8
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 81f2 	beq.w	8003760 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800337c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_UART_IRQHandler+0x14e>
 8003388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fb7d 	bl	8003a94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a4:	2b40      	cmp	r3, #64	@ 0x40
 80033a6:	bf0c      	ite	eq
 80033a8:	2301      	moveq	r3, #1
 80033aa:	2300      	movne	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d103      	bne.n	80033c6 <HAL_UART_IRQHandler+0x17a>
 80033be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d04f      	beq.n	8003466 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fa85 	bl	80038d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d6:	2b40      	cmp	r3, #64	@ 0x40
 80033d8:	d141      	bne.n	800345e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3314      	adds	r3, #20
 80033e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033e8:	e853 3f00 	ldrex	r3, [r3]
 80033ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80033f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3314      	adds	r3, #20
 8003402:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003406:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800340a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003412:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003416:	e841 2300 	strex	r3, r2, [r1]
 800341a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800341e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1d9      	bne.n	80033da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d013      	beq.n	8003456 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003432:	4a7e      	ldr	r2, [pc, #504]	@ (800362c <HAL_UART_IRQHandler+0x3e0>)
 8003434:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd ff5e 	bl	80012fc <HAL_DMA_Abort_IT>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d016      	beq.n	8003474 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003450:	4610      	mov	r0, r2
 8003452:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003454:	e00e      	b.n	8003474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f994 	bl	8003784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800345c:	e00a      	b.n	8003474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f990 	bl	8003784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003464:	e006      	b.n	8003474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f98c 	bl	8003784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003472:	e175      	b.n	8003760 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003474:	bf00      	nop
    return;
 8003476:	e173      	b.n	8003760 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347c:	2b01      	cmp	r3, #1
 800347e:	f040 814f 	bne.w	8003720 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 8148 	beq.w	8003720 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8141 	beq.w	8003720 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034be:	2b40      	cmp	r3, #64	@ 0x40
 80034c0:	f040 80b6 	bne.w	8003630 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 8145 	beq.w	8003764 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034e2:	429a      	cmp	r2, r3
 80034e4:	f080 813e 	bcs.w	8003764 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034fa:	f000 8088 	beq.w	800360e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	330c      	adds	r3, #12
 8003504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800350c:	e853 3f00 	ldrex	r3, [r3]
 8003510:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003514:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800351c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	330c      	adds	r3, #12
 8003526:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800352a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800352e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003536:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800353a:	e841 2300 	strex	r3, r2, [r1]
 800353e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003542:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1d9      	bne.n	80034fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3314      	adds	r3, #20
 8003550:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003552:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800355a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800355c:	f023 0301 	bic.w	r3, r3, #1
 8003560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3314      	adds	r3, #20
 800356a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800356e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003572:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003574:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003576:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800357a:	e841 2300 	strex	r3, r2, [r1]
 800357e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1e1      	bne.n	800354a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3314      	adds	r3, #20
 800358c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003590:	e853 3f00 	ldrex	r3, [r3]
 8003594:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800359c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3314      	adds	r3, #20
 80035a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80035aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80035b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80035b2:	e841 2300 	strex	r3, r2, [r1]
 80035b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80035b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e3      	bne.n	8003586 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	330c      	adds	r3, #12
 80035d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035d6:	e853 3f00 	ldrex	r3, [r3]
 80035da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80035dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035de:	f023 0310 	bic.w	r3, r3, #16
 80035e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	330c      	adds	r3, #12
 80035ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80035f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80035f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035f8:	e841 2300 	strex	r3, r2, [r1]
 80035fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80035fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1e3      	bne.n	80035cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003608:	4618      	mov	r0, r3
 800360a:	f7fd fe07 	bl	800121c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2202      	movs	r2, #2
 8003612:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800361c:	b29b      	uxth	r3, r3
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	b29b      	uxth	r3, r3
 8003622:	4619      	mov	r1, r3
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f8b7 	bl	8003798 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800362a:	e09b      	b.n	8003764 <HAL_UART_IRQHandler+0x518>
 800362c:	0800399d 	.word	0x0800399d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003638:	b29b      	uxth	r3, r3
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 808e 	beq.w	8003768 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800364c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8089 	beq.w	8003768 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	330c      	adds	r3, #12
 800365c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003668:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800366c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	330c      	adds	r3, #12
 8003676:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800367a:	647a      	str	r2, [r7, #68]	@ 0x44
 800367c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003680:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003682:	e841 2300 	strex	r3, r2, [r1]
 8003686:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1e3      	bne.n	8003656 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3314      	adds	r3, #20
 8003694:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	623b      	str	r3, [r7, #32]
   return(result);
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3314      	adds	r3, #20
 80036ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80036b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80036b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e3      	bne.n	800368e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	e853 3f00 	ldrex	r3, [r3]
 80036e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0310 	bic.w	r3, r3, #16
 80036ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	330c      	adds	r3, #12
 80036f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80036f8:	61fa      	str	r2, [r7, #28]
 80036fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fc:	69b9      	ldr	r1, [r7, #24]
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	e841 2300 	strex	r3, r2, [r1]
 8003704:	617b      	str	r3, [r7, #20]
   return(result);
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1e3      	bne.n	80036d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003712:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003716:	4619      	mov	r1, r3
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f83d 	bl	8003798 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800371e:	e023      	b.n	8003768 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003728:	2b00      	cmp	r3, #0
 800372a:	d009      	beq.n	8003740 <HAL_UART_IRQHandler+0x4f4>
 800372c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f943 	bl	80039c4 <UART_Transmit_IT>
    return;
 800373e:	e014      	b.n	800376a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00e      	beq.n	800376a <HAL_UART_IRQHandler+0x51e>
 800374c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f983 	bl	8003a64 <UART_EndTransmit_IT>
    return;
 800375e:	e004      	b.n	800376a <HAL_UART_IRQHandler+0x51e>
    return;
 8003760:	bf00      	nop
 8003762:	e002      	b.n	800376a <HAL_UART_IRQHandler+0x51e>
      return;
 8003764:	bf00      	nop
 8003766:	e000      	b.n	800376a <HAL_UART_IRQHandler+0x51e>
      return;
 8003768:	bf00      	nop
  }
}
 800376a:	37e8      	adds	r7, #232	@ 0xe8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	4613      	mov	r3, r2
 80037be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c0:	e03b      	b.n	800383a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d037      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ca:	f7fd fb37 	bl	8000e3c <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	6a3a      	ldr	r2, [r7, #32]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d302      	bcc.n	80037e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e03a      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d023      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0x8a>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b80      	cmp	r3, #128	@ 0x80
 80037f6:	d020      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0x8a>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b40      	cmp	r3, #64	@ 0x40
 80037fc:	d01d      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b08      	cmp	r3, #8
 800380a:	d116      	bne.n	800383a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f857 	bl	80038d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2208      	movs	r2, #8
 800382c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e00f      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4013      	ands	r3, r2
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	429a      	cmp	r2, r3
 8003848:	bf0c      	ite	eq
 800384a:	2301      	moveq	r3, #1
 800384c:	2300      	movne	r3, #0
 800384e:	b2db      	uxtb	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	429a      	cmp	r2, r3
 8003856:	d0b4      	beq.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	4613      	mov	r3, r2
 800386e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	88fa      	ldrh	r2, [r7, #6]
 800387a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	88fa      	ldrh	r2, [r7, #6]
 8003880:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2222      	movs	r2, #34	@ 0x22
 800388c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038a6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0220 	orr.w	r2, r2, #32
 80038c6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b095      	sub	sp, #84	@ 0x54
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	330c      	adds	r3, #12
 80038e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	330c      	adds	r3, #12
 80038fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8003900:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003902:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003904:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800390c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1e5      	bne.n	80038de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3314      	adds	r3, #20
 8003918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	e853 3f00 	ldrex	r3, [r3]
 8003920:	61fb      	str	r3, [r7, #28]
   return(result);
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3314      	adds	r3, #20
 8003930:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003932:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003934:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003936:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800393a:	e841 2300 	strex	r3, r2, [r1]
 800393e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1e5      	bne.n	8003912 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394a:	2b01      	cmp	r3, #1
 800394c:	d119      	bne.n	8003982 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	330c      	adds	r3, #12
 8003954:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	e853 3f00 	ldrex	r3, [r3]
 800395c:	60bb      	str	r3, [r7, #8]
   return(result);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f023 0310 	bic.w	r3, r3, #16
 8003964:	647b      	str	r3, [r7, #68]	@ 0x44
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	330c      	adds	r3, #12
 800396c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800396e:	61ba      	str	r2, [r7, #24]
 8003970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	6979      	ldr	r1, [r7, #20]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	e841 2300 	strex	r3, r2, [r1]
 800397a:	613b      	str	r3, [r7, #16]
   return(result);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1e5      	bne.n	800394e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003990:	bf00      	nop
 8003992:	3754      	adds	r7, #84	@ 0x54
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f7ff fee4 	bl	8003784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b21      	cmp	r3, #33	@ 0x21
 80039d6:	d13e      	bne.n	8003a56 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039e0:	d114      	bne.n	8003a0c <UART_Transmit_IT+0x48>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d110      	bne.n	8003a0c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	1c9a      	adds	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	621a      	str	r2, [r3, #32]
 8003a0a:	e008      	b.n	8003a1e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	1c59      	adds	r1, r3, #1
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6211      	str	r1, [r2, #32]
 8003a16:	781a      	ldrb	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10f      	bne.n	8003a52 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	e000      	b.n	8003a58 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a56:	2302      	movs	r3, #2
  }
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff fe73 	bl	8003770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08c      	sub	sp, #48	@ 0x30
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b22      	cmp	r3, #34	@ 0x22
 8003aa6:	f040 80ae 	bne.w	8003c06 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ab2:	d117      	bne.n	8003ae4 <UART_Receive_IT+0x50>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d113      	bne.n	8003ae4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003adc:	1c9a      	adds	r2, r3, #2
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ae2:	e026      	b.n	8003b32 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003af6:	d007      	beq.n	8003b08 <UART_Receive_IT+0x74>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <UART_Receive_IT+0x82>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b12:	701a      	strb	r2, [r3, #0]
 8003b14:	e008      	b.n	8003b28 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b26:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d15d      	bne.n	8003c02 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0220 	bic.w	r2, r2, #32
 8003b54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695a      	ldr	r2, [r3, #20]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0201 	bic.w	r2, r2, #1
 8003b74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d135      	bne.n	8003bf8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	330c      	adds	r3, #12
 8003b98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f023 0310 	bic.w	r3, r3, #16
 8003ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	330c      	adds	r3, #12
 8003bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bb2:	623a      	str	r2, [r7, #32]
 8003bb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	69f9      	ldr	r1, [r7, #28]
 8003bb8:	6a3a      	ldr	r2, [r7, #32]
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e5      	bne.n	8003b92 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	2b10      	cmp	r3, #16
 8003bd2:	d10a      	bne.n	8003bea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff fdd1 	bl	8003798 <HAL_UARTEx_RxEventCallback>
 8003bf6:	e002      	b.n	8003bfe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7fc fe1b 	bl	8000834 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e002      	b.n	8003c08 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e000      	b.n	8003c08 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c06:	2302      	movs	r3, #2
  }
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3730      	adds	r7, #48	@ 0x30
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c14:	b0c0      	sub	sp, #256	@ 0x100
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c2c:	68d9      	ldr	r1, [r3, #12]
 8003c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	ea40 0301 	orr.w	r3, r0, r1
 8003c38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003c68:	f021 010c 	bic.w	r1, r1, #12
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c76:	430b      	orrs	r3, r1
 8003c78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8a:	6999      	ldr	r1, [r3, #24]
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	ea40 0301 	orr.w	r3, r0, r1
 8003c96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	4b8f      	ldr	r3, [pc, #572]	@ (8003edc <UART_SetConfig+0x2cc>)
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d005      	beq.n	8003cb0 <UART_SetConfig+0xa0>
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4b8d      	ldr	r3, [pc, #564]	@ (8003ee0 <UART_SetConfig+0x2d0>)
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d104      	bne.n	8003cba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cb0:	f7ff f876 	bl	8002da0 <HAL_RCC_GetPCLK2Freq>
 8003cb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003cb8:	e003      	b.n	8003cc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cba:	f7ff f85d 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 8003cbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ccc:	f040 810c 	bne.w	8003ee8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003cde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ce2:	4622      	mov	r2, r4
 8003ce4:	462b      	mov	r3, r5
 8003ce6:	1891      	adds	r1, r2, r2
 8003ce8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003cea:	415b      	adcs	r3, r3
 8003cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	eb12 0801 	adds.w	r8, r2, r1
 8003cf8:	4629      	mov	r1, r5
 8003cfa:	eb43 0901 	adc.w	r9, r3, r1
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d12:	4690      	mov	r8, r2
 8003d14:	4699      	mov	r9, r3
 8003d16:	4623      	mov	r3, r4
 8003d18:	eb18 0303 	adds.w	r3, r8, r3
 8003d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d20:	462b      	mov	r3, r5
 8003d22:	eb49 0303 	adc.w	r3, r9, r3
 8003d26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d3e:	460b      	mov	r3, r1
 8003d40:	18db      	adds	r3, r3, r3
 8003d42:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d44:	4613      	mov	r3, r2
 8003d46:	eb42 0303 	adc.w	r3, r2, r3
 8003d4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003d50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003d54:	f7fc fa38 	bl	80001c8 <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4b61      	ldr	r3, [pc, #388]	@ (8003ee4 <UART_SetConfig+0x2d4>)
 8003d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	011c      	lsls	r4, r3, #4
 8003d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003d74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003d78:	4642      	mov	r2, r8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	1891      	adds	r1, r2, r2
 8003d7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d80:	415b      	adcs	r3, r3
 8003d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d88:	4641      	mov	r1, r8
 8003d8a:	eb12 0a01 	adds.w	sl, r2, r1
 8003d8e:	4649      	mov	r1, r9
 8003d90:	eb43 0b01 	adc.w	fp, r3, r1
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003da0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003da8:	4692      	mov	sl, r2
 8003daa:	469b      	mov	fp, r3
 8003dac:	4643      	mov	r3, r8
 8003dae:	eb1a 0303 	adds.w	r3, sl, r3
 8003db2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003db6:	464b      	mov	r3, r9
 8003db8:	eb4b 0303 	adc.w	r3, fp, r3
 8003dbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dcc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003dd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	18db      	adds	r3, r3, r3
 8003dd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dda:	4613      	mov	r3, r2
 8003ddc:	eb42 0303 	adc.w	r3, r2, r3
 8003de0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003de2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003de6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003dea:	f7fc f9ed 	bl	80001c8 <__aeabi_uldivmod>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4611      	mov	r1, r2
 8003df4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ee4 <UART_SetConfig+0x2d4>)
 8003df6:	fba3 2301 	umull	r2, r3, r3, r1
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	2264      	movs	r2, #100	@ 0x64
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	1acb      	subs	r3, r1, r3
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e0a:	4b36      	ldr	r3, [pc, #216]	@ (8003ee4 <UART_SetConfig+0x2d4>)
 8003e0c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e10:	095b      	lsrs	r3, r3, #5
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e18:	441c      	add	r4, r3
 8003e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	464b      	mov	r3, r9
 8003e30:	1891      	adds	r1, r2, r2
 8003e32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e34:	415b      	adcs	r3, r3
 8003e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e3c:	4641      	mov	r1, r8
 8003e3e:	1851      	adds	r1, r2, r1
 8003e40:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e42:	4649      	mov	r1, r9
 8003e44:	414b      	adcs	r3, r1
 8003e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003e54:	4659      	mov	r1, fp
 8003e56:	00cb      	lsls	r3, r1, #3
 8003e58:	4651      	mov	r1, sl
 8003e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e5e:	4651      	mov	r1, sl
 8003e60:	00ca      	lsls	r2, r1, #3
 8003e62:	4610      	mov	r0, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	4603      	mov	r3, r0
 8003e68:	4642      	mov	r2, r8
 8003e6a:	189b      	adds	r3, r3, r2
 8003e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e70:	464b      	mov	r3, r9
 8003e72:	460a      	mov	r2, r1
 8003e74:	eb42 0303 	adc.w	r3, r2, r3
 8003e78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003e8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e90:	460b      	mov	r3, r1
 8003e92:	18db      	adds	r3, r3, r3
 8003e94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e96:	4613      	mov	r3, r2
 8003e98:	eb42 0303 	adc.w	r3, r2, r3
 8003e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ea2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003ea6:	f7fc f98f 	bl	80001c8 <__aeabi_uldivmod>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee4 <UART_SetConfig+0x2d4>)
 8003eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	2164      	movs	r1, #100	@ 0x64
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	3332      	adds	r3, #50	@ 0x32
 8003ec2:	4a08      	ldr	r2, [pc, #32]	@ (8003ee4 <UART_SetConfig+0x2d4>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	f003 0207 	and.w	r2, r3, #7
 8003ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4422      	add	r2, r4
 8003ed6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ed8:	e106      	b.n	80040e8 <UART_SetConfig+0x4d8>
 8003eda:	bf00      	nop
 8003edc:	40011000 	.word	0x40011000
 8003ee0:	40011400 	.word	0x40011400
 8003ee4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eec:	2200      	movs	r2, #0
 8003eee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ef2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ef6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003efa:	4642      	mov	r2, r8
 8003efc:	464b      	mov	r3, r9
 8003efe:	1891      	adds	r1, r2, r2
 8003f00:	6239      	str	r1, [r7, #32]
 8003f02:	415b      	adcs	r3, r3
 8003f04:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f0a:	4641      	mov	r1, r8
 8003f0c:	1854      	adds	r4, r2, r1
 8003f0e:	4649      	mov	r1, r9
 8003f10:	eb43 0501 	adc.w	r5, r3, r1
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	00eb      	lsls	r3, r5, #3
 8003f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f22:	00e2      	lsls	r2, r4, #3
 8003f24:	4614      	mov	r4, r2
 8003f26:	461d      	mov	r5, r3
 8003f28:	4643      	mov	r3, r8
 8003f2a:	18e3      	adds	r3, r4, r3
 8003f2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f30:	464b      	mov	r3, r9
 8003f32:	eb45 0303 	adc.w	r3, r5, r3
 8003f36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f56:	4629      	mov	r1, r5
 8003f58:	008b      	lsls	r3, r1, #2
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f60:	4621      	mov	r1, r4
 8003f62:	008a      	lsls	r2, r1, #2
 8003f64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003f68:	f7fc f92e 	bl	80001c8 <__aeabi_uldivmod>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4b60      	ldr	r3, [pc, #384]	@ (80040f4 <UART_SetConfig+0x4e4>)
 8003f72:	fba3 2302 	umull	r2, r3, r3, r2
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	011c      	lsls	r4, r3, #4
 8003f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	464b      	mov	r3, r9
 8003f90:	1891      	adds	r1, r2, r2
 8003f92:	61b9      	str	r1, [r7, #24]
 8003f94:	415b      	adcs	r3, r3
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	1851      	adds	r1, r2, r1
 8003fa0:	6139      	str	r1, [r7, #16]
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	414b      	adcs	r3, r1
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fb4:	4659      	mov	r1, fp
 8003fb6:	00cb      	lsls	r3, r1, #3
 8003fb8:	4651      	mov	r1, sl
 8003fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fbe:	4651      	mov	r1, sl
 8003fc0:	00ca      	lsls	r2, r1, #3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4642      	mov	r2, r8
 8003fca:	189b      	adds	r3, r3, r2
 8003fcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fd0:	464b      	mov	r3, r9
 8003fd2:	460a      	mov	r2, r1
 8003fd4:	eb42 0303 	adc.w	r3, r2, r3
 8003fd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003fe6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	008b      	lsls	r3, r1, #2
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ffe:	4641      	mov	r1, r8
 8004000:	008a      	lsls	r2, r1, #2
 8004002:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004006:	f7fc f8df 	bl	80001c8 <__aeabi_uldivmod>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4611      	mov	r1, r2
 8004010:	4b38      	ldr	r3, [pc, #224]	@ (80040f4 <UART_SetConfig+0x4e4>)
 8004012:	fba3 2301 	umull	r2, r3, r3, r1
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	2264      	movs	r2, #100	@ 0x64
 800401a:	fb02 f303 	mul.w	r3, r2, r3
 800401e:	1acb      	subs	r3, r1, r3
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	3332      	adds	r3, #50	@ 0x32
 8004024:	4a33      	ldr	r2, [pc, #204]	@ (80040f4 <UART_SetConfig+0x4e4>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004030:	441c      	add	r4, r3
 8004032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004036:	2200      	movs	r2, #0
 8004038:	673b      	str	r3, [r7, #112]	@ 0x70
 800403a:	677a      	str	r2, [r7, #116]	@ 0x74
 800403c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004040:	4642      	mov	r2, r8
 8004042:	464b      	mov	r3, r9
 8004044:	1891      	adds	r1, r2, r2
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	415b      	adcs	r3, r3
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004050:	4641      	mov	r1, r8
 8004052:	1851      	adds	r1, r2, r1
 8004054:	6039      	str	r1, [r7, #0]
 8004056:	4649      	mov	r1, r9
 8004058:	414b      	adcs	r3, r1
 800405a:	607b      	str	r3, [r7, #4]
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004068:	4659      	mov	r1, fp
 800406a:	00cb      	lsls	r3, r1, #3
 800406c:	4651      	mov	r1, sl
 800406e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004072:	4651      	mov	r1, sl
 8004074:	00ca      	lsls	r2, r1, #3
 8004076:	4610      	mov	r0, r2
 8004078:	4619      	mov	r1, r3
 800407a:	4603      	mov	r3, r0
 800407c:	4642      	mov	r2, r8
 800407e:	189b      	adds	r3, r3, r2
 8004080:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004082:	464b      	mov	r3, r9
 8004084:	460a      	mov	r2, r1
 8004086:	eb42 0303 	adc.w	r3, r2, r3
 800408a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	663b      	str	r3, [r7, #96]	@ 0x60
 8004096:	667a      	str	r2, [r7, #100]	@ 0x64
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80040a4:	4649      	mov	r1, r9
 80040a6:	008b      	lsls	r3, r1, #2
 80040a8:	4641      	mov	r1, r8
 80040aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ae:	4641      	mov	r1, r8
 80040b0:	008a      	lsls	r2, r1, #2
 80040b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80040b6:	f7fc f887 	bl	80001c8 <__aeabi_uldivmod>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4b0d      	ldr	r3, [pc, #52]	@ (80040f4 <UART_SetConfig+0x4e4>)
 80040c0:	fba3 1302 	umull	r1, r3, r3, r2
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	2164      	movs	r1, #100	@ 0x64
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	3332      	adds	r3, #50	@ 0x32
 80040d2:	4a08      	ldr	r2, [pc, #32]	@ (80040f4 <UART_SetConfig+0x4e4>)
 80040d4:	fba2 2303 	umull	r2, r3, r2, r3
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	f003 020f 	and.w	r2, r3, #15
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4422      	add	r2, r4
 80040e6:	609a      	str	r2, [r3, #8]
}
 80040e8:	bf00      	nop
 80040ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80040ee:	46bd      	mov	sp, r7
 80040f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040f4:	51eb851f 	.word	0x51eb851f

080040f8 <std>:
 80040f8:	2300      	movs	r3, #0
 80040fa:	b510      	push	{r4, lr}
 80040fc:	4604      	mov	r4, r0
 80040fe:	e9c0 3300 	strd	r3, r3, [r0]
 8004102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004106:	6083      	str	r3, [r0, #8]
 8004108:	8181      	strh	r1, [r0, #12]
 800410a:	6643      	str	r3, [r0, #100]	@ 0x64
 800410c:	81c2      	strh	r2, [r0, #14]
 800410e:	6183      	str	r3, [r0, #24]
 8004110:	4619      	mov	r1, r3
 8004112:	2208      	movs	r2, #8
 8004114:	305c      	adds	r0, #92	@ 0x5c
 8004116:	f000 f9e7 	bl	80044e8 <memset>
 800411a:	4b0d      	ldr	r3, [pc, #52]	@ (8004150 <std+0x58>)
 800411c:	6263      	str	r3, [r4, #36]	@ 0x24
 800411e:	4b0d      	ldr	r3, [pc, #52]	@ (8004154 <std+0x5c>)
 8004120:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004122:	4b0d      	ldr	r3, [pc, #52]	@ (8004158 <std+0x60>)
 8004124:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004126:	4b0d      	ldr	r3, [pc, #52]	@ (800415c <std+0x64>)
 8004128:	6323      	str	r3, [r4, #48]	@ 0x30
 800412a:	4b0d      	ldr	r3, [pc, #52]	@ (8004160 <std+0x68>)
 800412c:	6224      	str	r4, [r4, #32]
 800412e:	429c      	cmp	r4, r3
 8004130:	d006      	beq.n	8004140 <std+0x48>
 8004132:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004136:	4294      	cmp	r4, r2
 8004138:	d002      	beq.n	8004140 <std+0x48>
 800413a:	33d0      	adds	r3, #208	@ 0xd0
 800413c:	429c      	cmp	r4, r3
 800413e:	d105      	bne.n	800414c <std+0x54>
 8004140:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004148:	f000 ba46 	b.w	80045d8 <__retarget_lock_init_recursive>
 800414c:	bd10      	pop	{r4, pc}
 800414e:	bf00      	nop
 8004150:	08004339 	.word	0x08004339
 8004154:	0800435b 	.word	0x0800435b
 8004158:	08004393 	.word	0x08004393
 800415c:	080043b7 	.word	0x080043b7
 8004160:	20000238 	.word	0x20000238

08004164 <stdio_exit_handler>:
 8004164:	4a02      	ldr	r2, [pc, #8]	@ (8004170 <stdio_exit_handler+0xc>)
 8004166:	4903      	ldr	r1, [pc, #12]	@ (8004174 <stdio_exit_handler+0x10>)
 8004168:	4803      	ldr	r0, [pc, #12]	@ (8004178 <stdio_exit_handler+0x14>)
 800416a:	f000 b869 	b.w	8004240 <_fwalk_sglue>
 800416e:	bf00      	nop
 8004170:	20000020 	.word	0x20000020
 8004174:	080048d9 	.word	0x080048d9
 8004178:	20000030 	.word	0x20000030

0800417c <cleanup_stdio>:
 800417c:	6841      	ldr	r1, [r0, #4]
 800417e:	4b0c      	ldr	r3, [pc, #48]	@ (80041b0 <cleanup_stdio+0x34>)
 8004180:	4299      	cmp	r1, r3
 8004182:	b510      	push	{r4, lr}
 8004184:	4604      	mov	r4, r0
 8004186:	d001      	beq.n	800418c <cleanup_stdio+0x10>
 8004188:	f000 fba6 	bl	80048d8 <_fflush_r>
 800418c:	68a1      	ldr	r1, [r4, #8]
 800418e:	4b09      	ldr	r3, [pc, #36]	@ (80041b4 <cleanup_stdio+0x38>)
 8004190:	4299      	cmp	r1, r3
 8004192:	d002      	beq.n	800419a <cleanup_stdio+0x1e>
 8004194:	4620      	mov	r0, r4
 8004196:	f000 fb9f 	bl	80048d8 <_fflush_r>
 800419a:	68e1      	ldr	r1, [r4, #12]
 800419c:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <cleanup_stdio+0x3c>)
 800419e:	4299      	cmp	r1, r3
 80041a0:	d004      	beq.n	80041ac <cleanup_stdio+0x30>
 80041a2:	4620      	mov	r0, r4
 80041a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041a8:	f000 bb96 	b.w	80048d8 <_fflush_r>
 80041ac:	bd10      	pop	{r4, pc}
 80041ae:	bf00      	nop
 80041b0:	20000238 	.word	0x20000238
 80041b4:	200002a0 	.word	0x200002a0
 80041b8:	20000308 	.word	0x20000308

080041bc <global_stdio_init.part.0>:
 80041bc:	b510      	push	{r4, lr}
 80041be:	4b0b      	ldr	r3, [pc, #44]	@ (80041ec <global_stdio_init.part.0+0x30>)
 80041c0:	4c0b      	ldr	r4, [pc, #44]	@ (80041f0 <global_stdio_init.part.0+0x34>)
 80041c2:	4a0c      	ldr	r2, [pc, #48]	@ (80041f4 <global_stdio_init.part.0+0x38>)
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	4620      	mov	r0, r4
 80041c8:	2200      	movs	r2, #0
 80041ca:	2104      	movs	r1, #4
 80041cc:	f7ff ff94 	bl	80040f8 <std>
 80041d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80041d4:	2201      	movs	r2, #1
 80041d6:	2109      	movs	r1, #9
 80041d8:	f7ff ff8e 	bl	80040f8 <std>
 80041dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041e0:	2202      	movs	r2, #2
 80041e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041e6:	2112      	movs	r1, #18
 80041e8:	f7ff bf86 	b.w	80040f8 <std>
 80041ec:	20000370 	.word	0x20000370
 80041f0:	20000238 	.word	0x20000238
 80041f4:	08004165 	.word	0x08004165

080041f8 <__sfp_lock_acquire>:
 80041f8:	4801      	ldr	r0, [pc, #4]	@ (8004200 <__sfp_lock_acquire+0x8>)
 80041fa:	f000 b9ee 	b.w	80045da <__retarget_lock_acquire_recursive>
 80041fe:	bf00      	nop
 8004200:	20000379 	.word	0x20000379

08004204 <__sfp_lock_release>:
 8004204:	4801      	ldr	r0, [pc, #4]	@ (800420c <__sfp_lock_release+0x8>)
 8004206:	f000 b9e9 	b.w	80045dc <__retarget_lock_release_recursive>
 800420a:	bf00      	nop
 800420c:	20000379 	.word	0x20000379

08004210 <__sinit>:
 8004210:	b510      	push	{r4, lr}
 8004212:	4604      	mov	r4, r0
 8004214:	f7ff fff0 	bl	80041f8 <__sfp_lock_acquire>
 8004218:	6a23      	ldr	r3, [r4, #32]
 800421a:	b11b      	cbz	r3, 8004224 <__sinit+0x14>
 800421c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004220:	f7ff bff0 	b.w	8004204 <__sfp_lock_release>
 8004224:	4b04      	ldr	r3, [pc, #16]	@ (8004238 <__sinit+0x28>)
 8004226:	6223      	str	r3, [r4, #32]
 8004228:	4b04      	ldr	r3, [pc, #16]	@ (800423c <__sinit+0x2c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f5      	bne.n	800421c <__sinit+0xc>
 8004230:	f7ff ffc4 	bl	80041bc <global_stdio_init.part.0>
 8004234:	e7f2      	b.n	800421c <__sinit+0xc>
 8004236:	bf00      	nop
 8004238:	0800417d 	.word	0x0800417d
 800423c:	20000370 	.word	0x20000370

08004240 <_fwalk_sglue>:
 8004240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004244:	4607      	mov	r7, r0
 8004246:	4688      	mov	r8, r1
 8004248:	4614      	mov	r4, r2
 800424a:	2600      	movs	r6, #0
 800424c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004250:	f1b9 0901 	subs.w	r9, r9, #1
 8004254:	d505      	bpl.n	8004262 <_fwalk_sglue+0x22>
 8004256:	6824      	ldr	r4, [r4, #0]
 8004258:	2c00      	cmp	r4, #0
 800425a:	d1f7      	bne.n	800424c <_fwalk_sglue+0xc>
 800425c:	4630      	mov	r0, r6
 800425e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004262:	89ab      	ldrh	r3, [r5, #12]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d907      	bls.n	8004278 <_fwalk_sglue+0x38>
 8004268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800426c:	3301      	adds	r3, #1
 800426e:	d003      	beq.n	8004278 <_fwalk_sglue+0x38>
 8004270:	4629      	mov	r1, r5
 8004272:	4638      	mov	r0, r7
 8004274:	47c0      	blx	r8
 8004276:	4306      	orrs	r6, r0
 8004278:	3568      	adds	r5, #104	@ 0x68
 800427a:	e7e9      	b.n	8004250 <_fwalk_sglue+0x10>

0800427c <_puts_r>:
 800427c:	6a03      	ldr	r3, [r0, #32]
 800427e:	b570      	push	{r4, r5, r6, lr}
 8004280:	6884      	ldr	r4, [r0, #8]
 8004282:	4605      	mov	r5, r0
 8004284:	460e      	mov	r6, r1
 8004286:	b90b      	cbnz	r3, 800428c <_puts_r+0x10>
 8004288:	f7ff ffc2 	bl	8004210 <__sinit>
 800428c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800428e:	07db      	lsls	r3, r3, #31
 8004290:	d405      	bmi.n	800429e <_puts_r+0x22>
 8004292:	89a3      	ldrh	r3, [r4, #12]
 8004294:	0598      	lsls	r0, r3, #22
 8004296:	d402      	bmi.n	800429e <_puts_r+0x22>
 8004298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800429a:	f000 f99e 	bl	80045da <__retarget_lock_acquire_recursive>
 800429e:	89a3      	ldrh	r3, [r4, #12]
 80042a0:	0719      	lsls	r1, r3, #28
 80042a2:	d502      	bpl.n	80042aa <_puts_r+0x2e>
 80042a4:	6923      	ldr	r3, [r4, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d135      	bne.n	8004316 <_puts_r+0x9a>
 80042aa:	4621      	mov	r1, r4
 80042ac:	4628      	mov	r0, r5
 80042ae:	f000 f8c5 	bl	800443c <__swsetup_r>
 80042b2:	b380      	cbz	r0, 8004316 <_puts_r+0x9a>
 80042b4:	f04f 35ff 	mov.w	r5, #4294967295
 80042b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042ba:	07da      	lsls	r2, r3, #31
 80042bc:	d405      	bmi.n	80042ca <_puts_r+0x4e>
 80042be:	89a3      	ldrh	r3, [r4, #12]
 80042c0:	059b      	lsls	r3, r3, #22
 80042c2:	d402      	bmi.n	80042ca <_puts_r+0x4e>
 80042c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042c6:	f000 f989 	bl	80045dc <__retarget_lock_release_recursive>
 80042ca:	4628      	mov	r0, r5
 80042cc:	bd70      	pop	{r4, r5, r6, pc}
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	da04      	bge.n	80042dc <_puts_r+0x60>
 80042d2:	69a2      	ldr	r2, [r4, #24]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	dc17      	bgt.n	8004308 <_puts_r+0x8c>
 80042d8:	290a      	cmp	r1, #10
 80042da:	d015      	beq.n	8004308 <_puts_r+0x8c>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	6022      	str	r2, [r4, #0]
 80042e2:	7019      	strb	r1, [r3, #0]
 80042e4:	68a3      	ldr	r3, [r4, #8]
 80042e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042ea:	3b01      	subs	r3, #1
 80042ec:	60a3      	str	r3, [r4, #8]
 80042ee:	2900      	cmp	r1, #0
 80042f0:	d1ed      	bne.n	80042ce <_puts_r+0x52>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	da11      	bge.n	800431a <_puts_r+0x9e>
 80042f6:	4622      	mov	r2, r4
 80042f8:	210a      	movs	r1, #10
 80042fa:	4628      	mov	r0, r5
 80042fc:	f000 f85f 	bl	80043be <__swbuf_r>
 8004300:	3001      	adds	r0, #1
 8004302:	d0d7      	beq.n	80042b4 <_puts_r+0x38>
 8004304:	250a      	movs	r5, #10
 8004306:	e7d7      	b.n	80042b8 <_puts_r+0x3c>
 8004308:	4622      	mov	r2, r4
 800430a:	4628      	mov	r0, r5
 800430c:	f000 f857 	bl	80043be <__swbuf_r>
 8004310:	3001      	adds	r0, #1
 8004312:	d1e7      	bne.n	80042e4 <_puts_r+0x68>
 8004314:	e7ce      	b.n	80042b4 <_puts_r+0x38>
 8004316:	3e01      	subs	r6, #1
 8004318:	e7e4      	b.n	80042e4 <_puts_r+0x68>
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	6022      	str	r2, [r4, #0]
 8004320:	220a      	movs	r2, #10
 8004322:	701a      	strb	r2, [r3, #0]
 8004324:	e7ee      	b.n	8004304 <_puts_r+0x88>
	...

08004328 <puts>:
 8004328:	4b02      	ldr	r3, [pc, #8]	@ (8004334 <puts+0xc>)
 800432a:	4601      	mov	r1, r0
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	f7ff bfa5 	b.w	800427c <_puts_r>
 8004332:	bf00      	nop
 8004334:	2000002c 	.word	0x2000002c

08004338 <__sread>:
 8004338:	b510      	push	{r4, lr}
 800433a:	460c      	mov	r4, r1
 800433c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004340:	f000 f8fc 	bl	800453c <_read_r>
 8004344:	2800      	cmp	r0, #0
 8004346:	bfab      	itete	ge
 8004348:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800434a:	89a3      	ldrhlt	r3, [r4, #12]
 800434c:	181b      	addge	r3, r3, r0
 800434e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004352:	bfac      	ite	ge
 8004354:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004356:	81a3      	strhlt	r3, [r4, #12]
 8004358:	bd10      	pop	{r4, pc}

0800435a <__swrite>:
 800435a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800435e:	461f      	mov	r7, r3
 8004360:	898b      	ldrh	r3, [r1, #12]
 8004362:	05db      	lsls	r3, r3, #23
 8004364:	4605      	mov	r5, r0
 8004366:	460c      	mov	r4, r1
 8004368:	4616      	mov	r6, r2
 800436a:	d505      	bpl.n	8004378 <__swrite+0x1e>
 800436c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004370:	2302      	movs	r3, #2
 8004372:	2200      	movs	r2, #0
 8004374:	f000 f8d0 	bl	8004518 <_lseek_r>
 8004378:	89a3      	ldrh	r3, [r4, #12]
 800437a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800437e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004382:	81a3      	strh	r3, [r4, #12]
 8004384:	4632      	mov	r2, r6
 8004386:	463b      	mov	r3, r7
 8004388:	4628      	mov	r0, r5
 800438a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800438e:	f000 b8e7 	b.w	8004560 <_write_r>

08004392 <__sseek>:
 8004392:	b510      	push	{r4, lr}
 8004394:	460c      	mov	r4, r1
 8004396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800439a:	f000 f8bd 	bl	8004518 <_lseek_r>
 800439e:	1c43      	adds	r3, r0, #1
 80043a0:	89a3      	ldrh	r3, [r4, #12]
 80043a2:	bf15      	itete	ne
 80043a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043ae:	81a3      	strheq	r3, [r4, #12]
 80043b0:	bf18      	it	ne
 80043b2:	81a3      	strhne	r3, [r4, #12]
 80043b4:	bd10      	pop	{r4, pc}

080043b6 <__sclose>:
 80043b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ba:	f000 b89d 	b.w	80044f8 <_close_r>

080043be <__swbuf_r>:
 80043be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c0:	460e      	mov	r6, r1
 80043c2:	4614      	mov	r4, r2
 80043c4:	4605      	mov	r5, r0
 80043c6:	b118      	cbz	r0, 80043d0 <__swbuf_r+0x12>
 80043c8:	6a03      	ldr	r3, [r0, #32]
 80043ca:	b90b      	cbnz	r3, 80043d0 <__swbuf_r+0x12>
 80043cc:	f7ff ff20 	bl	8004210 <__sinit>
 80043d0:	69a3      	ldr	r3, [r4, #24]
 80043d2:	60a3      	str	r3, [r4, #8]
 80043d4:	89a3      	ldrh	r3, [r4, #12]
 80043d6:	071a      	lsls	r2, r3, #28
 80043d8:	d501      	bpl.n	80043de <__swbuf_r+0x20>
 80043da:	6923      	ldr	r3, [r4, #16]
 80043dc:	b943      	cbnz	r3, 80043f0 <__swbuf_r+0x32>
 80043de:	4621      	mov	r1, r4
 80043e0:	4628      	mov	r0, r5
 80043e2:	f000 f82b 	bl	800443c <__swsetup_r>
 80043e6:	b118      	cbz	r0, 80043f0 <__swbuf_r+0x32>
 80043e8:	f04f 37ff 	mov.w	r7, #4294967295
 80043ec:	4638      	mov	r0, r7
 80043ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	6922      	ldr	r2, [r4, #16]
 80043f4:	1a98      	subs	r0, r3, r2
 80043f6:	6963      	ldr	r3, [r4, #20]
 80043f8:	b2f6      	uxtb	r6, r6
 80043fa:	4283      	cmp	r3, r0
 80043fc:	4637      	mov	r7, r6
 80043fe:	dc05      	bgt.n	800440c <__swbuf_r+0x4e>
 8004400:	4621      	mov	r1, r4
 8004402:	4628      	mov	r0, r5
 8004404:	f000 fa68 	bl	80048d8 <_fflush_r>
 8004408:	2800      	cmp	r0, #0
 800440a:	d1ed      	bne.n	80043e8 <__swbuf_r+0x2a>
 800440c:	68a3      	ldr	r3, [r4, #8]
 800440e:	3b01      	subs	r3, #1
 8004410:	60a3      	str	r3, [r4, #8]
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	6022      	str	r2, [r4, #0]
 8004418:	701e      	strb	r6, [r3, #0]
 800441a:	6962      	ldr	r2, [r4, #20]
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	429a      	cmp	r2, r3
 8004420:	d004      	beq.n	800442c <__swbuf_r+0x6e>
 8004422:	89a3      	ldrh	r3, [r4, #12]
 8004424:	07db      	lsls	r3, r3, #31
 8004426:	d5e1      	bpl.n	80043ec <__swbuf_r+0x2e>
 8004428:	2e0a      	cmp	r6, #10
 800442a:	d1df      	bne.n	80043ec <__swbuf_r+0x2e>
 800442c:	4621      	mov	r1, r4
 800442e:	4628      	mov	r0, r5
 8004430:	f000 fa52 	bl	80048d8 <_fflush_r>
 8004434:	2800      	cmp	r0, #0
 8004436:	d0d9      	beq.n	80043ec <__swbuf_r+0x2e>
 8004438:	e7d6      	b.n	80043e8 <__swbuf_r+0x2a>
	...

0800443c <__swsetup_r>:
 800443c:	b538      	push	{r3, r4, r5, lr}
 800443e:	4b29      	ldr	r3, [pc, #164]	@ (80044e4 <__swsetup_r+0xa8>)
 8004440:	4605      	mov	r5, r0
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	460c      	mov	r4, r1
 8004446:	b118      	cbz	r0, 8004450 <__swsetup_r+0x14>
 8004448:	6a03      	ldr	r3, [r0, #32]
 800444a:	b90b      	cbnz	r3, 8004450 <__swsetup_r+0x14>
 800444c:	f7ff fee0 	bl	8004210 <__sinit>
 8004450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004454:	0719      	lsls	r1, r3, #28
 8004456:	d422      	bmi.n	800449e <__swsetup_r+0x62>
 8004458:	06da      	lsls	r2, r3, #27
 800445a:	d407      	bmi.n	800446c <__swsetup_r+0x30>
 800445c:	2209      	movs	r2, #9
 800445e:	602a      	str	r2, [r5, #0]
 8004460:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004464:	81a3      	strh	r3, [r4, #12]
 8004466:	f04f 30ff 	mov.w	r0, #4294967295
 800446a:	e033      	b.n	80044d4 <__swsetup_r+0x98>
 800446c:	0758      	lsls	r0, r3, #29
 800446e:	d512      	bpl.n	8004496 <__swsetup_r+0x5a>
 8004470:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004472:	b141      	cbz	r1, 8004486 <__swsetup_r+0x4a>
 8004474:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004478:	4299      	cmp	r1, r3
 800447a:	d002      	beq.n	8004482 <__swsetup_r+0x46>
 800447c:	4628      	mov	r0, r5
 800447e:	f000 f8af 	bl	80045e0 <_free_r>
 8004482:	2300      	movs	r3, #0
 8004484:	6363      	str	r3, [r4, #52]	@ 0x34
 8004486:	89a3      	ldrh	r3, [r4, #12]
 8004488:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800448c:	81a3      	strh	r3, [r4, #12]
 800448e:	2300      	movs	r3, #0
 8004490:	6063      	str	r3, [r4, #4]
 8004492:	6923      	ldr	r3, [r4, #16]
 8004494:	6023      	str	r3, [r4, #0]
 8004496:	89a3      	ldrh	r3, [r4, #12]
 8004498:	f043 0308 	orr.w	r3, r3, #8
 800449c:	81a3      	strh	r3, [r4, #12]
 800449e:	6923      	ldr	r3, [r4, #16]
 80044a0:	b94b      	cbnz	r3, 80044b6 <__swsetup_r+0x7a>
 80044a2:	89a3      	ldrh	r3, [r4, #12]
 80044a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80044a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ac:	d003      	beq.n	80044b6 <__swsetup_r+0x7a>
 80044ae:	4621      	mov	r1, r4
 80044b0:	4628      	mov	r0, r5
 80044b2:	f000 fa5f 	bl	8004974 <__smakebuf_r>
 80044b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ba:	f013 0201 	ands.w	r2, r3, #1
 80044be:	d00a      	beq.n	80044d6 <__swsetup_r+0x9a>
 80044c0:	2200      	movs	r2, #0
 80044c2:	60a2      	str	r2, [r4, #8]
 80044c4:	6962      	ldr	r2, [r4, #20]
 80044c6:	4252      	negs	r2, r2
 80044c8:	61a2      	str	r2, [r4, #24]
 80044ca:	6922      	ldr	r2, [r4, #16]
 80044cc:	b942      	cbnz	r2, 80044e0 <__swsetup_r+0xa4>
 80044ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80044d2:	d1c5      	bne.n	8004460 <__swsetup_r+0x24>
 80044d4:	bd38      	pop	{r3, r4, r5, pc}
 80044d6:	0799      	lsls	r1, r3, #30
 80044d8:	bf58      	it	pl
 80044da:	6962      	ldrpl	r2, [r4, #20]
 80044dc:	60a2      	str	r2, [r4, #8]
 80044de:	e7f4      	b.n	80044ca <__swsetup_r+0x8e>
 80044e0:	2000      	movs	r0, #0
 80044e2:	e7f7      	b.n	80044d4 <__swsetup_r+0x98>
 80044e4:	2000002c 	.word	0x2000002c

080044e8 <memset>:
 80044e8:	4402      	add	r2, r0
 80044ea:	4603      	mov	r3, r0
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d100      	bne.n	80044f2 <memset+0xa>
 80044f0:	4770      	bx	lr
 80044f2:	f803 1b01 	strb.w	r1, [r3], #1
 80044f6:	e7f9      	b.n	80044ec <memset+0x4>

080044f8 <_close_r>:
 80044f8:	b538      	push	{r3, r4, r5, lr}
 80044fa:	4d06      	ldr	r5, [pc, #24]	@ (8004514 <_close_r+0x1c>)
 80044fc:	2300      	movs	r3, #0
 80044fe:	4604      	mov	r4, r0
 8004500:	4608      	mov	r0, r1
 8004502:	602b      	str	r3, [r5, #0]
 8004504:	f7fc fb8d 	bl	8000c22 <_close>
 8004508:	1c43      	adds	r3, r0, #1
 800450a:	d102      	bne.n	8004512 <_close_r+0x1a>
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	b103      	cbz	r3, 8004512 <_close_r+0x1a>
 8004510:	6023      	str	r3, [r4, #0]
 8004512:	bd38      	pop	{r3, r4, r5, pc}
 8004514:	20000374 	.word	0x20000374

08004518 <_lseek_r>:
 8004518:	b538      	push	{r3, r4, r5, lr}
 800451a:	4d07      	ldr	r5, [pc, #28]	@ (8004538 <_lseek_r+0x20>)
 800451c:	4604      	mov	r4, r0
 800451e:	4608      	mov	r0, r1
 8004520:	4611      	mov	r1, r2
 8004522:	2200      	movs	r2, #0
 8004524:	602a      	str	r2, [r5, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	f7fc fba2 	bl	8000c70 <_lseek>
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	d102      	bne.n	8004536 <_lseek_r+0x1e>
 8004530:	682b      	ldr	r3, [r5, #0]
 8004532:	b103      	cbz	r3, 8004536 <_lseek_r+0x1e>
 8004534:	6023      	str	r3, [r4, #0]
 8004536:	bd38      	pop	{r3, r4, r5, pc}
 8004538:	20000374 	.word	0x20000374

0800453c <_read_r>:
 800453c:	b538      	push	{r3, r4, r5, lr}
 800453e:	4d07      	ldr	r5, [pc, #28]	@ (800455c <_read_r+0x20>)
 8004540:	4604      	mov	r4, r0
 8004542:	4608      	mov	r0, r1
 8004544:	4611      	mov	r1, r2
 8004546:	2200      	movs	r2, #0
 8004548:	602a      	str	r2, [r5, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	f7fc fb4c 	bl	8000be8 <_read>
 8004550:	1c43      	adds	r3, r0, #1
 8004552:	d102      	bne.n	800455a <_read_r+0x1e>
 8004554:	682b      	ldr	r3, [r5, #0]
 8004556:	b103      	cbz	r3, 800455a <_read_r+0x1e>
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	bd38      	pop	{r3, r4, r5, pc}
 800455c:	20000374 	.word	0x20000374

08004560 <_write_r>:
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	4d07      	ldr	r5, [pc, #28]	@ (8004580 <_write_r+0x20>)
 8004564:	4604      	mov	r4, r0
 8004566:	4608      	mov	r0, r1
 8004568:	4611      	mov	r1, r2
 800456a:	2200      	movs	r2, #0
 800456c:	602a      	str	r2, [r5, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	f7fc f944 	bl	80007fc <_write>
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	d102      	bne.n	800457e <_write_r+0x1e>
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	b103      	cbz	r3, 800457e <_write_r+0x1e>
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	bd38      	pop	{r3, r4, r5, pc}
 8004580:	20000374 	.word	0x20000374

08004584 <__errno>:
 8004584:	4b01      	ldr	r3, [pc, #4]	@ (800458c <__errno+0x8>)
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	2000002c 	.word	0x2000002c

08004590 <__libc_init_array>:
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	4d0d      	ldr	r5, [pc, #52]	@ (80045c8 <__libc_init_array+0x38>)
 8004594:	4c0d      	ldr	r4, [pc, #52]	@ (80045cc <__libc_init_array+0x3c>)
 8004596:	1b64      	subs	r4, r4, r5
 8004598:	10a4      	asrs	r4, r4, #2
 800459a:	2600      	movs	r6, #0
 800459c:	42a6      	cmp	r6, r4
 800459e:	d109      	bne.n	80045b4 <__libc_init_array+0x24>
 80045a0:	4d0b      	ldr	r5, [pc, #44]	@ (80045d0 <__libc_init_array+0x40>)
 80045a2:	4c0c      	ldr	r4, [pc, #48]	@ (80045d4 <__libc_init_array+0x44>)
 80045a4:	f000 fa54 	bl	8004a50 <_init>
 80045a8:	1b64      	subs	r4, r4, r5
 80045aa:	10a4      	asrs	r4, r4, #2
 80045ac:	2600      	movs	r6, #0
 80045ae:	42a6      	cmp	r6, r4
 80045b0:	d105      	bne.n	80045be <__libc_init_array+0x2e>
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
 80045b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b8:	4798      	blx	r3
 80045ba:	3601      	adds	r6, #1
 80045bc:	e7ee      	b.n	800459c <__libc_init_array+0xc>
 80045be:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c2:	4798      	blx	r3
 80045c4:	3601      	adds	r6, #1
 80045c6:	e7f2      	b.n	80045ae <__libc_init_array+0x1e>
 80045c8:	08004a9c 	.word	0x08004a9c
 80045cc:	08004a9c 	.word	0x08004a9c
 80045d0:	08004a9c 	.word	0x08004a9c
 80045d4:	08004aa0 	.word	0x08004aa0

080045d8 <__retarget_lock_init_recursive>:
 80045d8:	4770      	bx	lr

080045da <__retarget_lock_acquire_recursive>:
 80045da:	4770      	bx	lr

080045dc <__retarget_lock_release_recursive>:
 80045dc:	4770      	bx	lr
	...

080045e0 <_free_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	4605      	mov	r5, r0
 80045e4:	2900      	cmp	r1, #0
 80045e6:	d041      	beq.n	800466c <_free_r+0x8c>
 80045e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ec:	1f0c      	subs	r4, r1, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bfb8      	it	lt
 80045f2:	18e4      	addlt	r4, r4, r3
 80045f4:	f000 f8e0 	bl	80047b8 <__malloc_lock>
 80045f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004670 <_free_r+0x90>)
 80045fa:	6813      	ldr	r3, [r2, #0]
 80045fc:	b933      	cbnz	r3, 800460c <_free_r+0x2c>
 80045fe:	6063      	str	r3, [r4, #4]
 8004600:	6014      	str	r4, [r2, #0]
 8004602:	4628      	mov	r0, r5
 8004604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004608:	f000 b8dc 	b.w	80047c4 <__malloc_unlock>
 800460c:	42a3      	cmp	r3, r4
 800460e:	d908      	bls.n	8004622 <_free_r+0x42>
 8004610:	6820      	ldr	r0, [r4, #0]
 8004612:	1821      	adds	r1, r4, r0
 8004614:	428b      	cmp	r3, r1
 8004616:	bf01      	itttt	eq
 8004618:	6819      	ldreq	r1, [r3, #0]
 800461a:	685b      	ldreq	r3, [r3, #4]
 800461c:	1809      	addeq	r1, r1, r0
 800461e:	6021      	streq	r1, [r4, #0]
 8004620:	e7ed      	b.n	80045fe <_free_r+0x1e>
 8004622:	461a      	mov	r2, r3
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	b10b      	cbz	r3, 800462c <_free_r+0x4c>
 8004628:	42a3      	cmp	r3, r4
 800462a:	d9fa      	bls.n	8004622 <_free_r+0x42>
 800462c:	6811      	ldr	r1, [r2, #0]
 800462e:	1850      	adds	r0, r2, r1
 8004630:	42a0      	cmp	r0, r4
 8004632:	d10b      	bne.n	800464c <_free_r+0x6c>
 8004634:	6820      	ldr	r0, [r4, #0]
 8004636:	4401      	add	r1, r0
 8004638:	1850      	adds	r0, r2, r1
 800463a:	4283      	cmp	r3, r0
 800463c:	6011      	str	r1, [r2, #0]
 800463e:	d1e0      	bne.n	8004602 <_free_r+0x22>
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	6053      	str	r3, [r2, #4]
 8004646:	4408      	add	r0, r1
 8004648:	6010      	str	r0, [r2, #0]
 800464a:	e7da      	b.n	8004602 <_free_r+0x22>
 800464c:	d902      	bls.n	8004654 <_free_r+0x74>
 800464e:	230c      	movs	r3, #12
 8004650:	602b      	str	r3, [r5, #0]
 8004652:	e7d6      	b.n	8004602 <_free_r+0x22>
 8004654:	6820      	ldr	r0, [r4, #0]
 8004656:	1821      	adds	r1, r4, r0
 8004658:	428b      	cmp	r3, r1
 800465a:	bf04      	itt	eq
 800465c:	6819      	ldreq	r1, [r3, #0]
 800465e:	685b      	ldreq	r3, [r3, #4]
 8004660:	6063      	str	r3, [r4, #4]
 8004662:	bf04      	itt	eq
 8004664:	1809      	addeq	r1, r1, r0
 8004666:	6021      	streq	r1, [r4, #0]
 8004668:	6054      	str	r4, [r2, #4]
 800466a:	e7ca      	b.n	8004602 <_free_r+0x22>
 800466c:	bd38      	pop	{r3, r4, r5, pc}
 800466e:	bf00      	nop
 8004670:	20000380 	.word	0x20000380

08004674 <sbrk_aligned>:
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	4e0f      	ldr	r6, [pc, #60]	@ (80046b4 <sbrk_aligned+0x40>)
 8004678:	460c      	mov	r4, r1
 800467a:	6831      	ldr	r1, [r6, #0]
 800467c:	4605      	mov	r5, r0
 800467e:	b911      	cbnz	r1, 8004686 <sbrk_aligned+0x12>
 8004680:	f000 f9d6 	bl	8004a30 <_sbrk_r>
 8004684:	6030      	str	r0, [r6, #0]
 8004686:	4621      	mov	r1, r4
 8004688:	4628      	mov	r0, r5
 800468a:	f000 f9d1 	bl	8004a30 <_sbrk_r>
 800468e:	1c43      	adds	r3, r0, #1
 8004690:	d103      	bne.n	800469a <sbrk_aligned+0x26>
 8004692:	f04f 34ff 	mov.w	r4, #4294967295
 8004696:	4620      	mov	r0, r4
 8004698:	bd70      	pop	{r4, r5, r6, pc}
 800469a:	1cc4      	adds	r4, r0, #3
 800469c:	f024 0403 	bic.w	r4, r4, #3
 80046a0:	42a0      	cmp	r0, r4
 80046a2:	d0f8      	beq.n	8004696 <sbrk_aligned+0x22>
 80046a4:	1a21      	subs	r1, r4, r0
 80046a6:	4628      	mov	r0, r5
 80046a8:	f000 f9c2 	bl	8004a30 <_sbrk_r>
 80046ac:	3001      	adds	r0, #1
 80046ae:	d1f2      	bne.n	8004696 <sbrk_aligned+0x22>
 80046b0:	e7ef      	b.n	8004692 <sbrk_aligned+0x1e>
 80046b2:	bf00      	nop
 80046b4:	2000037c 	.word	0x2000037c

080046b8 <_malloc_r>:
 80046b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046bc:	1ccd      	adds	r5, r1, #3
 80046be:	f025 0503 	bic.w	r5, r5, #3
 80046c2:	3508      	adds	r5, #8
 80046c4:	2d0c      	cmp	r5, #12
 80046c6:	bf38      	it	cc
 80046c8:	250c      	movcc	r5, #12
 80046ca:	2d00      	cmp	r5, #0
 80046cc:	4606      	mov	r6, r0
 80046ce:	db01      	blt.n	80046d4 <_malloc_r+0x1c>
 80046d0:	42a9      	cmp	r1, r5
 80046d2:	d904      	bls.n	80046de <_malloc_r+0x26>
 80046d4:	230c      	movs	r3, #12
 80046d6:	6033      	str	r3, [r6, #0]
 80046d8:	2000      	movs	r0, #0
 80046da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047b4 <_malloc_r+0xfc>
 80046e2:	f000 f869 	bl	80047b8 <__malloc_lock>
 80046e6:	f8d8 3000 	ldr.w	r3, [r8]
 80046ea:	461c      	mov	r4, r3
 80046ec:	bb44      	cbnz	r4, 8004740 <_malloc_r+0x88>
 80046ee:	4629      	mov	r1, r5
 80046f0:	4630      	mov	r0, r6
 80046f2:	f7ff ffbf 	bl	8004674 <sbrk_aligned>
 80046f6:	1c43      	adds	r3, r0, #1
 80046f8:	4604      	mov	r4, r0
 80046fa:	d158      	bne.n	80047ae <_malloc_r+0xf6>
 80046fc:	f8d8 4000 	ldr.w	r4, [r8]
 8004700:	4627      	mov	r7, r4
 8004702:	2f00      	cmp	r7, #0
 8004704:	d143      	bne.n	800478e <_malloc_r+0xd6>
 8004706:	2c00      	cmp	r4, #0
 8004708:	d04b      	beq.n	80047a2 <_malloc_r+0xea>
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	4639      	mov	r1, r7
 800470e:	4630      	mov	r0, r6
 8004710:	eb04 0903 	add.w	r9, r4, r3
 8004714:	f000 f98c 	bl	8004a30 <_sbrk_r>
 8004718:	4581      	cmp	r9, r0
 800471a:	d142      	bne.n	80047a2 <_malloc_r+0xea>
 800471c:	6821      	ldr	r1, [r4, #0]
 800471e:	1a6d      	subs	r5, r5, r1
 8004720:	4629      	mov	r1, r5
 8004722:	4630      	mov	r0, r6
 8004724:	f7ff ffa6 	bl	8004674 <sbrk_aligned>
 8004728:	3001      	adds	r0, #1
 800472a:	d03a      	beq.n	80047a2 <_malloc_r+0xea>
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	442b      	add	r3, r5
 8004730:	6023      	str	r3, [r4, #0]
 8004732:	f8d8 3000 	ldr.w	r3, [r8]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	bb62      	cbnz	r2, 8004794 <_malloc_r+0xdc>
 800473a:	f8c8 7000 	str.w	r7, [r8]
 800473e:	e00f      	b.n	8004760 <_malloc_r+0xa8>
 8004740:	6822      	ldr	r2, [r4, #0]
 8004742:	1b52      	subs	r2, r2, r5
 8004744:	d420      	bmi.n	8004788 <_malloc_r+0xd0>
 8004746:	2a0b      	cmp	r2, #11
 8004748:	d917      	bls.n	800477a <_malloc_r+0xc2>
 800474a:	1961      	adds	r1, r4, r5
 800474c:	42a3      	cmp	r3, r4
 800474e:	6025      	str	r5, [r4, #0]
 8004750:	bf18      	it	ne
 8004752:	6059      	strne	r1, [r3, #4]
 8004754:	6863      	ldr	r3, [r4, #4]
 8004756:	bf08      	it	eq
 8004758:	f8c8 1000 	streq.w	r1, [r8]
 800475c:	5162      	str	r2, [r4, r5]
 800475e:	604b      	str	r3, [r1, #4]
 8004760:	4630      	mov	r0, r6
 8004762:	f000 f82f 	bl	80047c4 <__malloc_unlock>
 8004766:	f104 000b 	add.w	r0, r4, #11
 800476a:	1d23      	adds	r3, r4, #4
 800476c:	f020 0007 	bic.w	r0, r0, #7
 8004770:	1ac2      	subs	r2, r0, r3
 8004772:	bf1c      	itt	ne
 8004774:	1a1b      	subne	r3, r3, r0
 8004776:	50a3      	strne	r3, [r4, r2]
 8004778:	e7af      	b.n	80046da <_malloc_r+0x22>
 800477a:	6862      	ldr	r2, [r4, #4]
 800477c:	42a3      	cmp	r3, r4
 800477e:	bf0c      	ite	eq
 8004780:	f8c8 2000 	streq.w	r2, [r8]
 8004784:	605a      	strne	r2, [r3, #4]
 8004786:	e7eb      	b.n	8004760 <_malloc_r+0xa8>
 8004788:	4623      	mov	r3, r4
 800478a:	6864      	ldr	r4, [r4, #4]
 800478c:	e7ae      	b.n	80046ec <_malloc_r+0x34>
 800478e:	463c      	mov	r4, r7
 8004790:	687f      	ldr	r7, [r7, #4]
 8004792:	e7b6      	b.n	8004702 <_malloc_r+0x4a>
 8004794:	461a      	mov	r2, r3
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	42a3      	cmp	r3, r4
 800479a:	d1fb      	bne.n	8004794 <_malloc_r+0xdc>
 800479c:	2300      	movs	r3, #0
 800479e:	6053      	str	r3, [r2, #4]
 80047a0:	e7de      	b.n	8004760 <_malloc_r+0xa8>
 80047a2:	230c      	movs	r3, #12
 80047a4:	6033      	str	r3, [r6, #0]
 80047a6:	4630      	mov	r0, r6
 80047a8:	f000 f80c 	bl	80047c4 <__malloc_unlock>
 80047ac:	e794      	b.n	80046d8 <_malloc_r+0x20>
 80047ae:	6005      	str	r5, [r0, #0]
 80047b0:	e7d6      	b.n	8004760 <_malloc_r+0xa8>
 80047b2:	bf00      	nop
 80047b4:	20000380 	.word	0x20000380

080047b8 <__malloc_lock>:
 80047b8:	4801      	ldr	r0, [pc, #4]	@ (80047c0 <__malloc_lock+0x8>)
 80047ba:	f7ff bf0e 	b.w	80045da <__retarget_lock_acquire_recursive>
 80047be:	bf00      	nop
 80047c0:	20000378 	.word	0x20000378

080047c4 <__malloc_unlock>:
 80047c4:	4801      	ldr	r0, [pc, #4]	@ (80047cc <__malloc_unlock+0x8>)
 80047c6:	f7ff bf09 	b.w	80045dc <__retarget_lock_release_recursive>
 80047ca:	bf00      	nop
 80047cc:	20000378 	.word	0x20000378

080047d0 <__sflush_r>:
 80047d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047d8:	0716      	lsls	r6, r2, #28
 80047da:	4605      	mov	r5, r0
 80047dc:	460c      	mov	r4, r1
 80047de:	d454      	bmi.n	800488a <__sflush_r+0xba>
 80047e0:	684b      	ldr	r3, [r1, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	dc02      	bgt.n	80047ec <__sflush_r+0x1c>
 80047e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	dd48      	ble.n	800487e <__sflush_r+0xae>
 80047ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047ee:	2e00      	cmp	r6, #0
 80047f0:	d045      	beq.n	800487e <__sflush_r+0xae>
 80047f2:	2300      	movs	r3, #0
 80047f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80047f8:	682f      	ldr	r7, [r5, #0]
 80047fa:	6a21      	ldr	r1, [r4, #32]
 80047fc:	602b      	str	r3, [r5, #0]
 80047fe:	d030      	beq.n	8004862 <__sflush_r+0x92>
 8004800:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	0759      	lsls	r1, r3, #29
 8004806:	d505      	bpl.n	8004814 <__sflush_r+0x44>
 8004808:	6863      	ldr	r3, [r4, #4]
 800480a:	1ad2      	subs	r2, r2, r3
 800480c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800480e:	b10b      	cbz	r3, 8004814 <__sflush_r+0x44>
 8004810:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004812:	1ad2      	subs	r2, r2, r3
 8004814:	2300      	movs	r3, #0
 8004816:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004818:	6a21      	ldr	r1, [r4, #32]
 800481a:	4628      	mov	r0, r5
 800481c:	47b0      	blx	r6
 800481e:	1c43      	adds	r3, r0, #1
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	d106      	bne.n	8004832 <__sflush_r+0x62>
 8004824:	6829      	ldr	r1, [r5, #0]
 8004826:	291d      	cmp	r1, #29
 8004828:	d82b      	bhi.n	8004882 <__sflush_r+0xb2>
 800482a:	4a2a      	ldr	r2, [pc, #168]	@ (80048d4 <__sflush_r+0x104>)
 800482c:	410a      	asrs	r2, r1
 800482e:	07d6      	lsls	r6, r2, #31
 8004830:	d427      	bmi.n	8004882 <__sflush_r+0xb2>
 8004832:	2200      	movs	r2, #0
 8004834:	6062      	str	r2, [r4, #4]
 8004836:	04d9      	lsls	r1, r3, #19
 8004838:	6922      	ldr	r2, [r4, #16]
 800483a:	6022      	str	r2, [r4, #0]
 800483c:	d504      	bpl.n	8004848 <__sflush_r+0x78>
 800483e:	1c42      	adds	r2, r0, #1
 8004840:	d101      	bne.n	8004846 <__sflush_r+0x76>
 8004842:	682b      	ldr	r3, [r5, #0]
 8004844:	b903      	cbnz	r3, 8004848 <__sflush_r+0x78>
 8004846:	6560      	str	r0, [r4, #84]	@ 0x54
 8004848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800484a:	602f      	str	r7, [r5, #0]
 800484c:	b1b9      	cbz	r1, 800487e <__sflush_r+0xae>
 800484e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004852:	4299      	cmp	r1, r3
 8004854:	d002      	beq.n	800485c <__sflush_r+0x8c>
 8004856:	4628      	mov	r0, r5
 8004858:	f7ff fec2 	bl	80045e0 <_free_r>
 800485c:	2300      	movs	r3, #0
 800485e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004860:	e00d      	b.n	800487e <__sflush_r+0xae>
 8004862:	2301      	movs	r3, #1
 8004864:	4628      	mov	r0, r5
 8004866:	47b0      	blx	r6
 8004868:	4602      	mov	r2, r0
 800486a:	1c50      	adds	r0, r2, #1
 800486c:	d1c9      	bne.n	8004802 <__sflush_r+0x32>
 800486e:	682b      	ldr	r3, [r5, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0c6      	beq.n	8004802 <__sflush_r+0x32>
 8004874:	2b1d      	cmp	r3, #29
 8004876:	d001      	beq.n	800487c <__sflush_r+0xac>
 8004878:	2b16      	cmp	r3, #22
 800487a:	d11e      	bne.n	80048ba <__sflush_r+0xea>
 800487c:	602f      	str	r7, [r5, #0]
 800487e:	2000      	movs	r0, #0
 8004880:	e022      	b.n	80048c8 <__sflush_r+0xf8>
 8004882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004886:	b21b      	sxth	r3, r3
 8004888:	e01b      	b.n	80048c2 <__sflush_r+0xf2>
 800488a:	690f      	ldr	r7, [r1, #16]
 800488c:	2f00      	cmp	r7, #0
 800488e:	d0f6      	beq.n	800487e <__sflush_r+0xae>
 8004890:	0793      	lsls	r3, r2, #30
 8004892:	680e      	ldr	r6, [r1, #0]
 8004894:	bf08      	it	eq
 8004896:	694b      	ldreq	r3, [r1, #20]
 8004898:	600f      	str	r7, [r1, #0]
 800489a:	bf18      	it	ne
 800489c:	2300      	movne	r3, #0
 800489e:	eba6 0807 	sub.w	r8, r6, r7
 80048a2:	608b      	str	r3, [r1, #8]
 80048a4:	f1b8 0f00 	cmp.w	r8, #0
 80048a8:	dde9      	ble.n	800487e <__sflush_r+0xae>
 80048aa:	6a21      	ldr	r1, [r4, #32]
 80048ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80048ae:	4643      	mov	r3, r8
 80048b0:	463a      	mov	r2, r7
 80048b2:	4628      	mov	r0, r5
 80048b4:	47b0      	blx	r6
 80048b6:	2800      	cmp	r0, #0
 80048b8:	dc08      	bgt.n	80048cc <__sflush_r+0xfc>
 80048ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048c2:	81a3      	strh	r3, [r4, #12]
 80048c4:	f04f 30ff 	mov.w	r0, #4294967295
 80048c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048cc:	4407      	add	r7, r0
 80048ce:	eba8 0800 	sub.w	r8, r8, r0
 80048d2:	e7e7      	b.n	80048a4 <__sflush_r+0xd4>
 80048d4:	dfbffffe 	.word	0xdfbffffe

080048d8 <_fflush_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	690b      	ldr	r3, [r1, #16]
 80048dc:	4605      	mov	r5, r0
 80048de:	460c      	mov	r4, r1
 80048e0:	b913      	cbnz	r3, 80048e8 <_fflush_r+0x10>
 80048e2:	2500      	movs	r5, #0
 80048e4:	4628      	mov	r0, r5
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	b118      	cbz	r0, 80048f2 <_fflush_r+0x1a>
 80048ea:	6a03      	ldr	r3, [r0, #32]
 80048ec:	b90b      	cbnz	r3, 80048f2 <_fflush_r+0x1a>
 80048ee:	f7ff fc8f 	bl	8004210 <__sinit>
 80048f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f3      	beq.n	80048e2 <_fflush_r+0xa>
 80048fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80048fc:	07d0      	lsls	r0, r2, #31
 80048fe:	d404      	bmi.n	800490a <_fflush_r+0x32>
 8004900:	0599      	lsls	r1, r3, #22
 8004902:	d402      	bmi.n	800490a <_fflush_r+0x32>
 8004904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004906:	f7ff fe68 	bl	80045da <__retarget_lock_acquire_recursive>
 800490a:	4628      	mov	r0, r5
 800490c:	4621      	mov	r1, r4
 800490e:	f7ff ff5f 	bl	80047d0 <__sflush_r>
 8004912:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004914:	07da      	lsls	r2, r3, #31
 8004916:	4605      	mov	r5, r0
 8004918:	d4e4      	bmi.n	80048e4 <_fflush_r+0xc>
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	059b      	lsls	r3, r3, #22
 800491e:	d4e1      	bmi.n	80048e4 <_fflush_r+0xc>
 8004920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004922:	f7ff fe5b 	bl	80045dc <__retarget_lock_release_recursive>
 8004926:	e7dd      	b.n	80048e4 <_fflush_r+0xc>

08004928 <__swhatbuf_r>:
 8004928:	b570      	push	{r4, r5, r6, lr}
 800492a:	460c      	mov	r4, r1
 800492c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004930:	2900      	cmp	r1, #0
 8004932:	b096      	sub	sp, #88	@ 0x58
 8004934:	4615      	mov	r5, r2
 8004936:	461e      	mov	r6, r3
 8004938:	da0d      	bge.n	8004956 <__swhatbuf_r+0x2e>
 800493a:	89a3      	ldrh	r3, [r4, #12]
 800493c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004940:	f04f 0100 	mov.w	r1, #0
 8004944:	bf14      	ite	ne
 8004946:	2340      	movne	r3, #64	@ 0x40
 8004948:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800494c:	2000      	movs	r0, #0
 800494e:	6031      	str	r1, [r6, #0]
 8004950:	602b      	str	r3, [r5, #0]
 8004952:	b016      	add	sp, #88	@ 0x58
 8004954:	bd70      	pop	{r4, r5, r6, pc}
 8004956:	466a      	mov	r2, sp
 8004958:	f000 f848 	bl	80049ec <_fstat_r>
 800495c:	2800      	cmp	r0, #0
 800495e:	dbec      	blt.n	800493a <__swhatbuf_r+0x12>
 8004960:	9901      	ldr	r1, [sp, #4]
 8004962:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004966:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800496a:	4259      	negs	r1, r3
 800496c:	4159      	adcs	r1, r3
 800496e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004972:	e7eb      	b.n	800494c <__swhatbuf_r+0x24>

08004974 <__smakebuf_r>:
 8004974:	898b      	ldrh	r3, [r1, #12]
 8004976:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004978:	079d      	lsls	r5, r3, #30
 800497a:	4606      	mov	r6, r0
 800497c:	460c      	mov	r4, r1
 800497e:	d507      	bpl.n	8004990 <__smakebuf_r+0x1c>
 8004980:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	6123      	str	r3, [r4, #16]
 8004988:	2301      	movs	r3, #1
 800498a:	6163      	str	r3, [r4, #20]
 800498c:	b003      	add	sp, #12
 800498e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004990:	ab01      	add	r3, sp, #4
 8004992:	466a      	mov	r2, sp
 8004994:	f7ff ffc8 	bl	8004928 <__swhatbuf_r>
 8004998:	9f00      	ldr	r7, [sp, #0]
 800499a:	4605      	mov	r5, r0
 800499c:	4639      	mov	r1, r7
 800499e:	4630      	mov	r0, r6
 80049a0:	f7ff fe8a 	bl	80046b8 <_malloc_r>
 80049a4:	b948      	cbnz	r0, 80049ba <__smakebuf_r+0x46>
 80049a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049aa:	059a      	lsls	r2, r3, #22
 80049ac:	d4ee      	bmi.n	800498c <__smakebuf_r+0x18>
 80049ae:	f023 0303 	bic.w	r3, r3, #3
 80049b2:	f043 0302 	orr.w	r3, r3, #2
 80049b6:	81a3      	strh	r3, [r4, #12]
 80049b8:	e7e2      	b.n	8004980 <__smakebuf_r+0xc>
 80049ba:	89a3      	ldrh	r3, [r4, #12]
 80049bc:	6020      	str	r0, [r4, #0]
 80049be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049c2:	81a3      	strh	r3, [r4, #12]
 80049c4:	9b01      	ldr	r3, [sp, #4]
 80049c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80049ca:	b15b      	cbz	r3, 80049e4 <__smakebuf_r+0x70>
 80049cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049d0:	4630      	mov	r0, r6
 80049d2:	f000 f81d 	bl	8004a10 <_isatty_r>
 80049d6:	b128      	cbz	r0, 80049e4 <__smakebuf_r+0x70>
 80049d8:	89a3      	ldrh	r3, [r4, #12]
 80049da:	f023 0303 	bic.w	r3, r3, #3
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	81a3      	strh	r3, [r4, #12]
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	431d      	orrs	r5, r3
 80049e8:	81a5      	strh	r5, [r4, #12]
 80049ea:	e7cf      	b.n	800498c <__smakebuf_r+0x18>

080049ec <_fstat_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	4d07      	ldr	r5, [pc, #28]	@ (8004a0c <_fstat_r+0x20>)
 80049f0:	2300      	movs	r3, #0
 80049f2:	4604      	mov	r4, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	4611      	mov	r1, r2
 80049f8:	602b      	str	r3, [r5, #0]
 80049fa:	f7fc f91e 	bl	8000c3a <_fstat>
 80049fe:	1c43      	adds	r3, r0, #1
 8004a00:	d102      	bne.n	8004a08 <_fstat_r+0x1c>
 8004a02:	682b      	ldr	r3, [r5, #0]
 8004a04:	b103      	cbz	r3, 8004a08 <_fstat_r+0x1c>
 8004a06:	6023      	str	r3, [r4, #0]
 8004a08:	bd38      	pop	{r3, r4, r5, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000374 	.word	0x20000374

08004a10 <_isatty_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4d06      	ldr	r5, [pc, #24]	@ (8004a2c <_isatty_r+0x1c>)
 8004a14:	2300      	movs	r3, #0
 8004a16:	4604      	mov	r4, r0
 8004a18:	4608      	mov	r0, r1
 8004a1a:	602b      	str	r3, [r5, #0]
 8004a1c:	f7fc f91d 	bl	8000c5a <_isatty>
 8004a20:	1c43      	adds	r3, r0, #1
 8004a22:	d102      	bne.n	8004a2a <_isatty_r+0x1a>
 8004a24:	682b      	ldr	r3, [r5, #0]
 8004a26:	b103      	cbz	r3, 8004a2a <_isatty_r+0x1a>
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	20000374 	.word	0x20000374

08004a30 <_sbrk_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	4d06      	ldr	r5, [pc, #24]	@ (8004a4c <_sbrk_r+0x1c>)
 8004a34:	2300      	movs	r3, #0
 8004a36:	4604      	mov	r4, r0
 8004a38:	4608      	mov	r0, r1
 8004a3a:	602b      	str	r3, [r5, #0]
 8004a3c:	f7fc f926 	bl	8000c8c <_sbrk>
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	d102      	bne.n	8004a4a <_sbrk_r+0x1a>
 8004a44:	682b      	ldr	r3, [r5, #0]
 8004a46:	b103      	cbz	r3, 8004a4a <_sbrk_r+0x1a>
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	20000374 	.word	0x20000374

08004a50 <_init>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	bf00      	nop
 8004a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a56:	bc08      	pop	{r3}
 8004a58:	469e      	mov	lr, r3
 8004a5a:	4770      	bx	lr

08004a5c <_fini>:
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5e:	bf00      	nop
 8004a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a62:	bc08      	pop	{r3}
 8004a64:	469e      	mov	lr, r3
 8004a66:	4770      	bx	lr
