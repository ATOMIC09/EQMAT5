
STM32_EQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a568  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800a6f8  0800a6f8  0000b6f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac6c  0800ac6c  0000c1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac6c  0800ac6c  0000bc6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac74  0800ac74  0000c1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac74  0800ac74  0000bc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac78  0800ac78  0000bc78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800ac7c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1ec  2**0
                  CONTENTS
 10 .bss          00000388  200001ec  200001ec  0000c1ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000574  20000574  0000c1ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b6ce  00000000  00000000  0000c21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002109  00000000  00000000  000178ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  000199f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000765  00000000  00000000  0001a3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fab1  00000000  00000000  0001ab15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d023  00000000  00000000  0003a5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bba7d  00000000  00000000  000475e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00103066  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ebc  00000000  00000000  001030ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00106f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a6e0 	.word	0x0800a6e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800a6e0 	.word	0x0800a6e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ff0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d013      	beq.n	8001024 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ffc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001000:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001004:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00b      	beq.n	8001024 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800100c:	e000      	b.n	8001010 <ITM_SendChar+0x2c>
    {
      __NOP();
 800100e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001010:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f9      	beq.n	800100e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800101a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <HAL_I2S_TxCpltCallback>:
  outBufPtr = &dacData[0];
  dataReady = 1;
}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  inBufPtr = &adcData[AUDIO_BUFFER_SIZE / 2];
 800103c:	4b07      	ldr	r3, [pc, #28]	@ (800105c <HAL_I2S_TxCpltCallback+0x28>)
 800103e:	4a08      	ldr	r2, [pc, #32]	@ (8001060 <HAL_I2S_TxCpltCallback+0x2c>)
 8001040:	601a      	str	r2, [r3, #0]
  outBufPtr = &dacData[AUDIO_BUFFER_SIZE / 2];
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <HAL_I2S_TxCpltCallback+0x30>)
 8001044:	4a08      	ldr	r2, [pc, #32]	@ (8001068 <HAL_I2S_TxCpltCallback+0x34>)
 8001046:	601a      	str	r2, [r3, #0]
  dataReady = 1;
 8001048:	4b08      	ldr	r3, [pc, #32]	@ (800106c <HAL_I2S_TxCpltCallback+0x38>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200003c4 	.word	0x200003c4
 8001060:	200003a8 	.word	0x200003a8
 8001064:	20000014 	.word	0x20000014
 8001068:	200003b8 	.word	0x200003b8
 800106c:	200003c0 	.word	0x200003c0

08001070 <processData>:

void processData(){
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
  static float leftIn, leftOut, rightIn, rightOut;

  for (uint8_t n = 0; n < (AUDIO_BUFFER_SIZE / 2) - 1; n += 2){
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]
 800107a:	e070      	b.n	800115e <processData+0xee>
    // Left channel
    // Convert ADC data to float
    leftIn = INT16_TO_FLOAT * inBufPtr[n];
 800107c:	4b3e      	ldr	r3, [pc, #248]	@ (8001178 <processData+0x108>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4413      	add	r3, r2
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	b21b      	sxth	r3, r3
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001092:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800117c <processData+0x10c>
 8001096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800109a:	4b39      	ldr	r3, [pc, #228]	@ (8001180 <processData+0x110>)
 800109c:	edc3 7a00 	vstr	s15, [r3]
    if (leftIn > 1.0f){
 80010a0:	4b37      	ldr	r3, [pc, #220]	@ (8001180 <processData+0x110>)
 80010a2:	edd3 7a00 	vldr	s15, [r3]
 80010a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	dd03      	ble.n	80010bc <processData+0x4c>
      leftIn = -2.0f;
 80010b4:	4b32      	ldr	r3, [pc, #200]	@ (8001180 <processData+0x110>)
 80010b6:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 80010ba:	601a      	str	r2, [r3, #0]
    }
    // Compute the left channel output
    leftOut = leftIn;
 80010bc:	4b30      	ldr	r3, [pc, #192]	@ (8001180 <processData+0x110>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a30      	ldr	r2, [pc, #192]	@ (8001184 <processData+0x114>)
 80010c2:	6013      	str	r3, [r2, #0]
    // Convert back to int16
    outBufPtr[n] = (int16_t)(FLOAT_TO_INT16 * leftOut);
 80010c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001184 <processData+0x114>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001188 <processData+0x118>
 80010ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d2:	4b2e      	ldr	r3, [pc, #184]	@ (800118c <processData+0x11c>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e0:	ee17 2a90 	vmov	r2, s15
 80010e4:	b212      	sxth	r2, r2
 80010e6:	801a      	strh	r2, [r3, #0]

    // Right channel
    // Convert ADC data to float
    rightIn = INT16_TO_FLOAT * inBufPtr[n + 1];
 80010e8:	4b23      	ldr	r3, [pc, #140]	@ (8001178 <processData+0x108>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	3301      	adds	r3, #1
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4413      	add	r3, r2
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001100:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800117c <processData+0x10c>
 8001104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001108:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <processData+0x120>)
 800110a:	edc3 7a00 	vstr	s15, [r3]
    if (rightIn > 1.0f){
 800110e:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <processData+0x120>)
 8001110:	edd3 7a00 	vldr	s15, [r3]
 8001114:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	dd03      	ble.n	800112a <processData+0xba>
      rightIn = -2.0f;
 8001122:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <processData+0x120>)
 8001124:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8001128:	601a      	str	r2, [r3, #0]
    }
    // Compute the right channel output
    rightOut = rightIn;
 800112a:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <processData+0x120>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a19      	ldr	r2, [pc, #100]	@ (8001194 <processData+0x124>)
 8001130:	6013      	str	r3, [r2, #0]
    // Convert back to int16
    outBufPtr[n + 1] = (int16_t)(FLOAT_TO_INT16 * rightOut);
 8001132:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <processData+0x124>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001188 <processData+0x118>
 800113c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <processData+0x11c>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	3301      	adds	r3, #1
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001150:	ee17 2a90 	vmov	r2, s15
 8001154:	b212      	sxth	r2, r2
 8001156:	801a      	strh	r2, [r3, #0]
  for (uint8_t n = 0; n < (AUDIO_BUFFER_SIZE / 2) - 1; n += 2){
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	3302      	adds	r3, #2
 800115c:	71fb      	strb	r3, [r7, #7]
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d98b      	bls.n	800107c <processData+0xc>
  }
  dataReady = 0;
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <processData+0x128>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	200003c4 	.word	0x200003c4
 800117c:	38000000 	.word	0x38000000
 8001180:	20000410 	.word	0x20000410
 8001184:	20000414 	.word	0x20000414
 8001188:	47000000 	.word	0x47000000
 800118c:	20000014 	.word	0x20000014
 8001190:	20000418 	.word	0x20000418
 8001194:	2000041c 	.word	0x2000041c
 8001198:	200003c0 	.word	0x200003c0

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a0:	f000 fe08 	bl	8001db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a4:	f000 f838 	bl	8001218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a8:	f000 f922 	bl	80013f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80011ac:	f000 f8f8 	bl	80013a0 <MX_DMA_Init>
  MX_I2S2_Init();
 80011b0:	f000 f89c 	bl	80012ec <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80011b4:	f000 f8ca 	bl	800134c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  
  // Start UART communication
  HAL_UART_Transmit(&huart1, tx_buffer, sizeof(tx_buffer), 10); // Send ready message
 80011b8:	230a      	movs	r3, #10
 80011ba:	2211      	movs	r2, #17
 80011bc:	490e      	ldr	r1, [pc, #56]	@ (80011f8 <main+0x5c>)
 80011be:	480f      	ldr	r0, [pc, #60]	@ (80011fc <main+0x60>)
 80011c0:	f003 fa80 	bl	80046c4 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer)); // Start UART receive
 80011c4:	2246      	movs	r2, #70	@ 0x46
 80011c6:	490e      	ldr	r1, [pc, #56]	@ (8001200 <main+0x64>)
 80011c8:	480c      	ldr	r0, [pc, #48]	@ (80011fc <main+0x60>)
 80011ca:	f003 fb06 	bl	80047da <HAL_UART_Receive_IT>

  // Start I2S communication
  HAL_I2SEx_TransmitReceive_DMA(&hi2s2, (uint16_t *)dacData, (uint16_t *)adcData, AUDIO_BUFFER_SIZE);
 80011ce:	2308      	movs	r3, #8
 80011d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001204 <main+0x68>)
 80011d2:	490d      	ldr	r1, [pc, #52]	@ (8001208 <main+0x6c>)
 80011d4:	480d      	ldr	r0, [pc, #52]	@ (800120c <main+0x70>)
 80011d6:	f001 ffa3 	bl	8003120 <HAL_I2SEx_TransmitReceive_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Blink the LED while working
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80011da:	2104      	movs	r1, #4
 80011dc:	480c      	ldr	r0, [pc, #48]	@ (8001210 <main+0x74>)
 80011de:	f001 fd48 	bl	8002c72 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 80011e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011e6:	f000 fe57 	bl	8001e98 <HAL_Delay>

    // Check if data is ready to be processed
    if (dataReady){
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <main+0x78>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f3      	beq.n	80011da <main+0x3e>
      processData();
 80011f2:	f7ff ff3d 	bl	8001070 <processData>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80011f6:	e7f0      	b.n	80011da <main+0x3e>
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000310 	.word	0x20000310
 8001200:	20000358 	.word	0x20000358
 8001204:	200003a0 	.word	0x200003a0
 8001208:	200003b0 	.word	0x200003b0
 800120c:	20000208 	.word	0x20000208
 8001210:	40020400 	.word	0x40020400
 8001214:	200003c0 	.word	0x200003c0

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b094      	sub	sp, #80	@ 0x50
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0320 	add.w	r3, r7, #32
 8001222:	2230      	movs	r2, #48	@ 0x30
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f005 fb14 	bl	8006854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	4b28      	ldr	r3, [pc, #160]	@ (80012e4 <SystemClock_Config+0xcc>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	4a27      	ldr	r2, [pc, #156]	@ (80012e4 <SystemClock_Config+0xcc>)
 8001246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124a:	6413      	str	r3, [r2, #64]	@ 0x40
 800124c:	4b25      	ldr	r3, [pc, #148]	@ (80012e4 <SystemClock_Config+0xcc>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <SystemClock_Config+0xd0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a21      	ldr	r2, [pc, #132]	@ (80012e8 <SystemClock_Config+0xd0>)
 8001262:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <SystemClock_Config+0xd0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001274:	2301      	movs	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001278:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800127c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127e:	2302      	movs	r3, #2
 8001280:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001282:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001286:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001288:	2308      	movs	r3, #8
 800128a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800128c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001290:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001292:	2302      	movs	r3, #2
 8001294:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001296:	2304      	movs	r3, #4
 8001298:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129a:	f107 0320 	add.w	r3, r7, #32
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 fbe6 	bl	8003a70 <HAL_RCC_OscConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012aa:	f000 fad5 	bl	8001858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ae:	230f      	movs	r3, #15
 80012b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b2:	2302      	movs	r3, #2
 80012b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012ba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	2105      	movs	r1, #5
 80012cc:	4618      	mov	r0, r3
 80012ce:	f002 fe47 	bl	8003f60 <HAL_RCC_ClockConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012d8:	f000 fabe 	bl	8001858 <Error_Handler>
  }
}
 80012dc:	bf00      	nop
 80012de:	3750      	adds	r7, #80	@ 0x50
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40007000 	.word	0x40007000

080012ec <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80012f0:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <MX_I2S2_Init+0x54>)
 80012f2:	4a14      	ldr	r2, [pc, #80]	@ (8001344 <MX_I2S2_Init+0x58>)
 80012f4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80012f6:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <MX_I2S2_Init+0x54>)
 80012f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012fc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <MX_I2S2_Init+0x54>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001304:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_I2S2_Init+0x54>)
 8001306:	2203      	movs	r2, #3
 8001308:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800130a:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <MX_I2S2_Init+0x54>)
 800130c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001310:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <MX_I2S2_Init+0x54>)
 8001314:	4a0c      	ldr	r2, [pc, #48]	@ (8001348 <MX_I2S2_Init+0x5c>)
 8001316:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_I2S2_Init+0x54>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <MX_I2S2_Init+0x54>)
 8001320:	2200      	movs	r2, #0
 8001322:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_I2S2_Init+0x54>)
 8001326:	2201      	movs	r2, #1
 8001328:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	@ (8001340 <MX_I2S2_Init+0x54>)
 800132c:	f001 fcbc 	bl	8002ca8 <HAL_I2S_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8001336:	f000 fa8f 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000208 	.word	0x20000208
 8001344:	40003800 	.word	0x40003800
 8001348:	00017700 	.word	0x00017700

0800134c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <MX_USART1_UART_Init+0x4c>)
 8001352:	4a12      	ldr	r2, [pc, #72]	@ (800139c <MX_USART1_UART_Init+0x50>)
 8001354:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <MX_USART1_UART_Init+0x4c>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <MX_USART1_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <MX_USART1_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <MX_USART1_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <MX_USART1_UART_Init+0x4c>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <MX_USART1_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <MX_USART1_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	@ (8001398 <MX_USART1_UART_Init+0x4c>)
 8001384:	f003 f94e 	bl	8004624 <HAL_UART_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800138e:	f000 fa63 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000310 	.word	0x20000310
 800139c:	40011000 	.word	0x40011000

080013a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <MX_DMA_Init+0x4c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a0f      	ldr	r2, [pc, #60]	@ (80013ec <MX_DMA_Init+0x4c>)
 80013b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <MX_DMA_Init+0x4c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	200e      	movs	r0, #14
 80013c8:	f000 fe65 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80013cc:	200e      	movs	r0, #14
 80013ce:	f000 fe7e 	bl	80020ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	200f      	movs	r0, #15
 80013d8:	f000 fe5d 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80013dc:	200f      	movs	r0, #15
 80013de:	f000 fe76 	bl	80020ce <HAL_NVIC_EnableIRQ>

}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	@ 0x28
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b26      	ldr	r3, [pc, #152]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a25      	ldr	r2, [pc, #148]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 8001410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b23      	ldr	r3, [pc, #140]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a1e      	ldr	r2, [pc, #120]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a17      	ldr	r2, [pc, #92]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a10      	ldr	r2, [pc, #64]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <MX_GPIO_Init+0xb4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2104      	movs	r1, #4
 800147a:	480b      	ldr	r0, [pc, #44]	@ (80014a8 <MX_GPIO_Init+0xb8>)
 800147c:	f001 fbe0 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001480:	2304      	movs	r3, #4
 8001482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4804      	ldr	r0, [pc, #16]	@ (80014a8 <MX_GPIO_Init+0xb8>)
 8001498:	f001 fa36 	bl	8002908 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	@ 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020400 	.word	0x40020400

080014ac <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	e009      	b.n	80014d2 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	60ba      	str	r2, [r7, #8]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fd8c 	bl	8000fe4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3301      	adds	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	dbf1      	blt.n	80014be <_write+0x12>
  }
  return len;
 80014da:	687b      	ldr	r3, [r7, #4]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  // HAL_UART_Transmit(&huart1, rx_buffer, sizeof(rx_buffer), 10); // Echo the received data
  printf("Received UART: %s\n", rx_buffer); // Print the received data to serial
 80014ec:	490a      	ldr	r1, [pc, #40]	@ (8001518 <HAL_UART_RxCpltCallback+0x34>)
 80014ee:	480b      	ldr	r0, [pc, #44]	@ (800151c <HAL_UART_RxCpltCallback+0x38>)
 80014f0:	f005 f81c 	bl	800652c <iprintf>
  parseAndStoreCoeffs(rx_buffer); // Parse the received data and store the coefficients
 80014f4:	4808      	ldr	r0, [pc, #32]	@ (8001518 <HAL_UART_RxCpltCallback+0x34>)
 80014f6:	f000 f815 	bl	8001524 <parseAndStoreCoeffs>
  memset(rx_buffer, 0, sizeof(rx_buffer)); // Clear the buffer
 80014fa:	2246      	movs	r2, #70	@ 0x46
 80014fc:	2100      	movs	r1, #0
 80014fe:	4806      	ldr	r0, [pc, #24]	@ (8001518 <HAL_UART_RxCpltCallback+0x34>)
 8001500:	f005 f9a8 	bl	8006854 <memset>
  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer)); // Start the next receive
 8001504:	2246      	movs	r2, #70	@ 0x46
 8001506:	4904      	ldr	r1, [pc, #16]	@ (8001518 <HAL_UART_RxCpltCallback+0x34>)
 8001508:	4805      	ldr	r0, [pc, #20]	@ (8001520 <HAL_UART_RxCpltCallback+0x3c>)
 800150a:	f003 f966 	bl	80047da <HAL_UART_Receive_IT>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000358 	.word	0x20000358
 800151c:	0800a6f8 	.word	0x0800a6f8
 8001520:	20000310 	.word	0x20000310

08001524 <parseAndStoreCoeffs>:

void parseAndStoreCoeffs(char *rx_buffer) {
 8001524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001528:	b090      	sub	sp, #64	@ 0x40
 800152a:	af0a      	add	r7, sp, #40	@ 0x28
 800152c:	6178      	str	r0, [r7, #20]
    // Determine which band the coefficients are for
    if (strncmp(rx_buffer, "Low", 3) == 0) {
 800152e:	2203      	movs	r2, #3
 8001530:	497a      	ldr	r1, [pc, #488]	@ (800171c <parseAndStoreCoeffs+0x1f8>)
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f005 f996 	bl	8006864 <strncmp>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d149      	bne.n	80015d2 <parseAndStoreCoeffs+0xae>
        sscanf(rx_buffer, "Low %f %f %f %f %f %f", 
 800153e:	4b78      	ldr	r3, [pc, #480]	@ (8001720 <parseAndStoreCoeffs+0x1fc>)
 8001540:	9303      	str	r3, [sp, #12]
 8001542:	4b78      	ldr	r3, [pc, #480]	@ (8001724 <parseAndStoreCoeffs+0x200>)
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	4b78      	ldr	r3, [pc, #480]	@ (8001728 <parseAndStoreCoeffs+0x204>)
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	4b78      	ldr	r3, [pc, #480]	@ (800172c <parseAndStoreCoeffs+0x208>)
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	4b78      	ldr	r3, [pc, #480]	@ (8001730 <parseAndStoreCoeffs+0x20c>)
 8001550:	4a78      	ldr	r2, [pc, #480]	@ (8001734 <parseAndStoreCoeffs+0x210>)
 8001552:	4979      	ldr	r1, [pc, #484]	@ (8001738 <parseAndStoreCoeffs+0x214>)
 8001554:	6978      	ldr	r0, [r7, #20]
 8001556:	f005 f879 	bl	800664c <siscanf>
               &lowBandCoeffs.a0, &lowBandCoeffs.a1, &lowBandCoeffs.a2, 
               &lowBandCoeffs.b0, &lowBandCoeffs.b1, &lowBandCoeffs.b2);
        printf("Parsed Low: %f %f %f %f %f %f\n", 
               lowBandCoeffs.a0, lowBandCoeffs.a1, lowBandCoeffs.a2, 
 800155a:	4b76      	ldr	r3, [pc, #472]	@ (8001734 <parseAndStoreCoeffs+0x210>)
 800155c:	681b      	ldr	r3, [r3, #0]
        printf("Parsed Low: %f %f %f %f %f %f\n", 
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe fff2 	bl	8000548 <__aeabi_f2d>
 8001564:	e9c7 0102 	strd	r0, r1, [r7, #8]
               lowBandCoeffs.a0, lowBandCoeffs.a1, lowBandCoeffs.a2, 
 8001568:	4b72      	ldr	r3, [pc, #456]	@ (8001734 <parseAndStoreCoeffs+0x210>)
 800156a:	685b      	ldr	r3, [r3, #4]
        printf("Parsed Low: %f %f %f %f %f %f\n", 
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ffeb 	bl	8000548 <__aeabi_f2d>
 8001572:	4604      	mov	r4, r0
 8001574:	460d      	mov	r5, r1
               lowBandCoeffs.a0, lowBandCoeffs.a1, lowBandCoeffs.a2, 
 8001576:	4b6f      	ldr	r3, [pc, #444]	@ (8001734 <parseAndStoreCoeffs+0x210>)
 8001578:	689b      	ldr	r3, [r3, #8]
        printf("Parsed Low: %f %f %f %f %f %f\n", 
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ffe4 	bl	8000548 <__aeabi_f2d>
 8001580:	4680      	mov	r8, r0
 8001582:	4689      	mov	r9, r1
               lowBandCoeffs.b0, lowBandCoeffs.b1, lowBandCoeffs.b2);
 8001584:	4b6b      	ldr	r3, [pc, #428]	@ (8001734 <parseAndStoreCoeffs+0x210>)
 8001586:	68db      	ldr	r3, [r3, #12]
        printf("Parsed Low: %f %f %f %f %f %f\n", 
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ffdd 	bl	8000548 <__aeabi_f2d>
 800158e:	4682      	mov	sl, r0
 8001590:	468b      	mov	fp, r1
               lowBandCoeffs.b0, lowBandCoeffs.b1, lowBandCoeffs.b2);
 8001592:	4b68      	ldr	r3, [pc, #416]	@ (8001734 <parseAndStoreCoeffs+0x210>)
 8001594:	691b      	ldr	r3, [r3, #16]
        printf("Parsed Low: %f %f %f %f %f %f\n", 
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ffd6 	bl	8000548 <__aeabi_f2d>
 800159c:	e9c7 0100 	strd	r0, r1, [r7]
               lowBandCoeffs.b0, lowBandCoeffs.b1, lowBandCoeffs.b2);
 80015a0:	4b64      	ldr	r3, [pc, #400]	@ (8001734 <parseAndStoreCoeffs+0x210>)
 80015a2:	695b      	ldr	r3, [r3, #20]
        printf("Parsed Low: %f %f %f %f %f %f\n", 
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ffcf 	bl	8000548 <__aeabi_f2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80015b2:	ed97 7b00 	vldr	d7, [r7]
 80015b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80015ba:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80015be:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015c2:	e9cd 4500 	strd	r4, r5, [sp]
 80015c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015ca:	485c      	ldr	r0, [pc, #368]	@ (800173c <parseAndStoreCoeffs+0x218>)
 80015cc:	f004 ffae 	bl	800652c <iprintf>
        highBandCoeffs.b2 = 0.695619;
        printf("Coefficients reset!\n");
    } else {
        printf("Invalid parameter\n");
    }
}
 80015d0:	e11f      	b.n	8001812 <parseAndStoreCoeffs+0x2ee>
    } else if (strncmp(rx_buffer, "Mid", 3) == 0) {
 80015d2:	2203      	movs	r2, #3
 80015d4:	495a      	ldr	r1, [pc, #360]	@ (8001740 <parseAndStoreCoeffs+0x21c>)
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f005 f944 	bl	8006864 <strncmp>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d149      	bne.n	8001676 <parseAndStoreCoeffs+0x152>
        sscanf(rx_buffer, "Mid %f %f %f %f %f %f", 
 80015e2:	4b58      	ldr	r3, [pc, #352]	@ (8001744 <parseAndStoreCoeffs+0x220>)
 80015e4:	9303      	str	r3, [sp, #12]
 80015e6:	4b58      	ldr	r3, [pc, #352]	@ (8001748 <parseAndStoreCoeffs+0x224>)
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	4b58      	ldr	r3, [pc, #352]	@ (800174c <parseAndStoreCoeffs+0x228>)
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	4b58      	ldr	r3, [pc, #352]	@ (8001750 <parseAndStoreCoeffs+0x22c>)
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	4b58      	ldr	r3, [pc, #352]	@ (8001754 <parseAndStoreCoeffs+0x230>)
 80015f4:	4a58      	ldr	r2, [pc, #352]	@ (8001758 <parseAndStoreCoeffs+0x234>)
 80015f6:	4959      	ldr	r1, [pc, #356]	@ (800175c <parseAndStoreCoeffs+0x238>)
 80015f8:	6978      	ldr	r0, [r7, #20]
 80015fa:	f005 f827 	bl	800664c <siscanf>
                midBandCoeffs.a0, midBandCoeffs.a1, midBandCoeffs.a2, 
 80015fe:	4b56      	ldr	r3, [pc, #344]	@ (8001758 <parseAndStoreCoeffs+0x234>)
 8001600:	681b      	ldr	r3, [r3, #0]
        printf("Parsed Mid: %f %f %f %f %f %f\n",
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ffa0 	bl	8000548 <__aeabi_f2d>
 8001608:	e9c7 0102 	strd	r0, r1, [r7, #8]
                midBandCoeffs.a0, midBandCoeffs.a1, midBandCoeffs.a2, 
 800160c:	4b52      	ldr	r3, [pc, #328]	@ (8001758 <parseAndStoreCoeffs+0x234>)
 800160e:	685b      	ldr	r3, [r3, #4]
        printf("Parsed Mid: %f %f %f %f %f %f\n",
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff99 	bl	8000548 <__aeabi_f2d>
 8001616:	4604      	mov	r4, r0
 8001618:	460d      	mov	r5, r1
                midBandCoeffs.a0, midBandCoeffs.a1, midBandCoeffs.a2, 
 800161a:	4b4f      	ldr	r3, [pc, #316]	@ (8001758 <parseAndStoreCoeffs+0x234>)
 800161c:	689b      	ldr	r3, [r3, #8]
        printf("Parsed Mid: %f %f %f %f %f %f\n",
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff92 	bl	8000548 <__aeabi_f2d>
 8001624:	4680      	mov	r8, r0
 8001626:	4689      	mov	r9, r1
                midBandCoeffs.b0, midBandCoeffs.b1, midBandCoeffs.b2);
 8001628:	4b4b      	ldr	r3, [pc, #300]	@ (8001758 <parseAndStoreCoeffs+0x234>)
 800162a:	68db      	ldr	r3, [r3, #12]
        printf("Parsed Mid: %f %f %f %f %f %f\n",
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ff8b 	bl	8000548 <__aeabi_f2d>
 8001632:	4682      	mov	sl, r0
 8001634:	468b      	mov	fp, r1
                midBandCoeffs.b0, midBandCoeffs.b1, midBandCoeffs.b2);
 8001636:	4b48      	ldr	r3, [pc, #288]	@ (8001758 <parseAndStoreCoeffs+0x234>)
 8001638:	691b      	ldr	r3, [r3, #16]
        printf("Parsed Mid: %f %f %f %f %f %f\n",
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff84 	bl	8000548 <__aeabi_f2d>
 8001640:	e9c7 0100 	strd	r0, r1, [r7]
                midBandCoeffs.b0, midBandCoeffs.b1, midBandCoeffs.b2);
 8001644:	4b44      	ldr	r3, [pc, #272]	@ (8001758 <parseAndStoreCoeffs+0x234>)
 8001646:	695b      	ldr	r3, [r3, #20]
        printf("Parsed Mid: %f %f %f %f %f %f\n",
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff7d 	bl	8000548 <__aeabi_f2d>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001656:	ed97 7b00 	vldr	d7, [r7]
 800165a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800165e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001662:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001666:	e9cd 4500 	strd	r4, r5, [sp]
 800166a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800166e:	483c      	ldr	r0, [pc, #240]	@ (8001760 <parseAndStoreCoeffs+0x23c>)
 8001670:	f004 ff5c 	bl	800652c <iprintf>
}
 8001674:	e0cd      	b.n	8001812 <parseAndStoreCoeffs+0x2ee>
    } else if (strncmp(rx_buffer, "High", 4) == 0) {
 8001676:	2204      	movs	r2, #4
 8001678:	493a      	ldr	r1, [pc, #232]	@ (8001764 <parseAndStoreCoeffs+0x240>)
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f005 f8f2 	bl	8006864 <strncmp>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 8080 	bne.w	8001788 <parseAndStoreCoeffs+0x264>
        sscanf(rx_buffer, "High %f %f %f %f %f %f", 
 8001688:	4b37      	ldr	r3, [pc, #220]	@ (8001768 <parseAndStoreCoeffs+0x244>)
 800168a:	9303      	str	r3, [sp, #12]
 800168c:	4b37      	ldr	r3, [pc, #220]	@ (800176c <parseAndStoreCoeffs+0x248>)
 800168e:	9302      	str	r3, [sp, #8]
 8001690:	4b37      	ldr	r3, [pc, #220]	@ (8001770 <parseAndStoreCoeffs+0x24c>)
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	4b37      	ldr	r3, [pc, #220]	@ (8001774 <parseAndStoreCoeffs+0x250>)
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	4b37      	ldr	r3, [pc, #220]	@ (8001778 <parseAndStoreCoeffs+0x254>)
 800169a:	4a38      	ldr	r2, [pc, #224]	@ (800177c <parseAndStoreCoeffs+0x258>)
 800169c:	4938      	ldr	r1, [pc, #224]	@ (8001780 <parseAndStoreCoeffs+0x25c>)
 800169e:	6978      	ldr	r0, [r7, #20]
 80016a0:	f004 ffd4 	bl	800664c <siscanf>
                highBandCoeffs.a0, highBandCoeffs.a1, highBandCoeffs.a2, 
 80016a4:	4b35      	ldr	r3, [pc, #212]	@ (800177c <parseAndStoreCoeffs+0x258>)
 80016a6:	681b      	ldr	r3, [r3, #0]
        printf("Parsed High: %f %f %f %f %f %f\n",
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ff4d 	bl	8000548 <__aeabi_f2d>
 80016ae:	e9c7 0102 	strd	r0, r1, [r7, #8]
                highBandCoeffs.a0, highBandCoeffs.a1, highBandCoeffs.a2, 
 80016b2:	4b32      	ldr	r3, [pc, #200]	@ (800177c <parseAndStoreCoeffs+0x258>)
 80016b4:	685b      	ldr	r3, [r3, #4]
        printf("Parsed High: %f %f %f %f %f %f\n",
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff46 	bl	8000548 <__aeabi_f2d>
 80016bc:	4604      	mov	r4, r0
 80016be:	460d      	mov	r5, r1
                highBandCoeffs.a0, highBandCoeffs.a1, highBandCoeffs.a2, 
 80016c0:	4b2e      	ldr	r3, [pc, #184]	@ (800177c <parseAndStoreCoeffs+0x258>)
 80016c2:	689b      	ldr	r3, [r3, #8]
        printf("Parsed High: %f %f %f %f %f %f\n",
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff3f 	bl	8000548 <__aeabi_f2d>
 80016ca:	4680      	mov	r8, r0
 80016cc:	4689      	mov	r9, r1
                highBandCoeffs.b0, highBandCoeffs.b1, highBandCoeffs.b2);
 80016ce:	4b2b      	ldr	r3, [pc, #172]	@ (800177c <parseAndStoreCoeffs+0x258>)
 80016d0:	68db      	ldr	r3, [r3, #12]
        printf("Parsed High: %f %f %f %f %f %f\n",
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe ff38 	bl	8000548 <__aeabi_f2d>
 80016d8:	4682      	mov	sl, r0
 80016da:	468b      	mov	fp, r1
                highBandCoeffs.b0, highBandCoeffs.b1, highBandCoeffs.b2);
 80016dc:	4b27      	ldr	r3, [pc, #156]	@ (800177c <parseAndStoreCoeffs+0x258>)
 80016de:	691b      	ldr	r3, [r3, #16]
        printf("Parsed High: %f %f %f %f %f %f\n",
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff31 	bl	8000548 <__aeabi_f2d>
 80016e6:	e9c7 0100 	strd	r0, r1, [r7]
                highBandCoeffs.b0, highBandCoeffs.b1, highBandCoeffs.b2);
 80016ea:	4b24      	ldr	r3, [pc, #144]	@ (800177c <parseAndStoreCoeffs+0x258>)
 80016ec:	695b      	ldr	r3, [r3, #20]
        printf("Parsed High: %f %f %f %f %f %f\n",
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ff2a 	bl	8000548 <__aeabi_f2d>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80016fc:	ed97 7b00 	vldr	d7, [r7]
 8001700:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001704:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001708:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800170c:	e9cd 4500 	strd	r4, r5, [sp]
 8001710:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001714:	481b      	ldr	r0, [pc, #108]	@ (8001784 <parseAndStoreCoeffs+0x260>)
 8001716:	f004 ff09 	bl	800652c <iprintf>
}
 800171a:	e07a      	b.n	8001812 <parseAndStoreCoeffs+0x2ee>
 800171c:	0800a70c 	.word	0x0800a70c
 8001720:	200003dc 	.word	0x200003dc
 8001724:	200003d8 	.word	0x200003d8
 8001728:	200003d4 	.word	0x200003d4
 800172c:	200003d0 	.word	0x200003d0
 8001730:	200003cc 	.word	0x200003cc
 8001734:	200003c8 	.word	0x200003c8
 8001738:	0800a710 	.word	0x0800a710
 800173c:	0800a728 	.word	0x0800a728
 8001740:	0800a748 	.word	0x0800a748
 8001744:	200003f4 	.word	0x200003f4
 8001748:	200003f0 	.word	0x200003f0
 800174c:	200003ec 	.word	0x200003ec
 8001750:	200003e8 	.word	0x200003e8
 8001754:	200003e4 	.word	0x200003e4
 8001758:	200003e0 	.word	0x200003e0
 800175c:	0800a74c 	.word	0x0800a74c
 8001760:	0800a764 	.word	0x0800a764
 8001764:	0800a784 	.word	0x0800a784
 8001768:	2000040c 	.word	0x2000040c
 800176c:	20000408 	.word	0x20000408
 8001770:	20000404 	.word	0x20000404
 8001774:	20000400 	.word	0x20000400
 8001778:	200003fc 	.word	0x200003fc
 800177c:	200003f8 	.word	0x200003f8
 8001780:	0800a78c 	.word	0x0800a78c
 8001784:	0800a7a4 	.word	0x0800a7a4
    } else if (strncmp(rx_buffer, "Reset", 5) == 0) {
 8001788:	2205      	movs	r2, #5
 800178a:	4924      	ldr	r1, [pc, #144]	@ (800181c <parseAndStoreCoeffs+0x2f8>)
 800178c:	6978      	ldr	r0, [r7, #20]
 800178e:	f005 f869 	bl	8006864 <strncmp>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d139      	bne.n	800180c <parseAndStoreCoeffs+0x2e8>
        lowBandCoeffs.a0 = 1.001636;
 8001798:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <parseAndStoreCoeffs+0x2fc>)
 800179a:	4a22      	ldr	r2, [pc, #136]	@ (8001824 <parseAndStoreCoeffs+0x300>)
 800179c:	601a      	str	r2, [r3, #0]
        lowBandCoeffs.a1 = -1.999989;
 800179e:	4b20      	ldr	r3, [pc, #128]	@ (8001820 <parseAndStoreCoeffs+0x2fc>)
 80017a0:	4a21      	ldr	r2, [pc, #132]	@ (8001828 <parseAndStoreCoeffs+0x304>)
 80017a2:	605a      	str	r2, [r3, #4]
        lowBandCoeffs.a2 = 0.998364;
 80017a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <parseAndStoreCoeffs+0x2fc>)
 80017a6:	4a21      	ldr	r2, [pc, #132]	@ (800182c <parseAndStoreCoeffs+0x308>)
 80017a8:	609a      	str	r2, [r3, #8]
        lowBandCoeffs.b0 = 1.001636;
 80017aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001820 <parseAndStoreCoeffs+0x2fc>)
 80017ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001824 <parseAndStoreCoeffs+0x300>)
 80017ae:	60da      	str	r2, [r3, #12]
        lowBandCoeffs.b1 = -1.999989;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <parseAndStoreCoeffs+0x2fc>)
 80017b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001828 <parseAndStoreCoeffs+0x304>)
 80017b4:	611a      	str	r2, [r3, #16]
        lowBandCoeffs.b2 = 0.998364;
 80017b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <parseAndStoreCoeffs+0x2fc>)
 80017b8:	4a1c      	ldr	r2, [pc, #112]	@ (800182c <parseAndStoreCoeffs+0x308>)
 80017ba:	615a      	str	r2, [r3, #20]
        midBandCoeffs.a0 = 1.049009;
 80017bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <parseAndStoreCoeffs+0x30c>)
 80017be:	4a1d      	ldr	r2, [pc, #116]	@ (8001834 <parseAndStoreCoeffs+0x310>)
 80017c0:	601a      	str	r2, [r3, #0]
        midBandCoeffs.a1 = -1.990369;
 80017c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <parseAndStoreCoeffs+0x30c>)
 80017c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001838 <parseAndStoreCoeffs+0x314>)
 80017c6:	605a      	str	r2, [r3, #4]
        midBandCoeffs.a2 = 0.950991;
 80017c8:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <parseAndStoreCoeffs+0x30c>)
 80017ca:	4a1c      	ldr	r2, [pc, #112]	@ (800183c <parseAndStoreCoeffs+0x318>)
 80017cc:	609a      	str	r2, [r3, #8]
        midBandCoeffs.b0 = 1.049009;
 80017ce:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <parseAndStoreCoeffs+0x30c>)
 80017d0:	4a18      	ldr	r2, [pc, #96]	@ (8001834 <parseAndStoreCoeffs+0x310>)
 80017d2:	60da      	str	r2, [r3, #12]
        midBandCoeffs.b1 = -1.990369;
 80017d4:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <parseAndStoreCoeffs+0x30c>)
 80017d6:	4a18      	ldr	r2, [pc, #96]	@ (8001838 <parseAndStoreCoeffs+0x314>)
 80017d8:	611a      	str	r2, [r3, #16]
        midBandCoeffs.b2 = 0.950991;
 80017da:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <parseAndStoreCoeffs+0x30c>)
 80017dc:	4a17      	ldr	r2, [pc, #92]	@ (800183c <parseAndStoreCoeffs+0x318>)
 80017de:	615a      	str	r2, [r3, #20]
        highBandCoeffs.a0 = 1.304381;
 80017e0:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <parseAndStoreCoeffs+0x31c>)
 80017e2:	4a18      	ldr	r2, [pc, #96]	@ (8001844 <parseAndStoreCoeffs+0x320>)
 80017e4:	601a      	str	r2, [r3, #0]
        highBandCoeffs.a1 = -1.586707;
 80017e6:	4b16      	ldr	r3, [pc, #88]	@ (8001840 <parseAndStoreCoeffs+0x31c>)
 80017e8:	4a17      	ldr	r2, [pc, #92]	@ (8001848 <parseAndStoreCoeffs+0x324>)
 80017ea:	605a      	str	r2, [r3, #4]
        highBandCoeffs.a2 = 0.695619;
 80017ec:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <parseAndStoreCoeffs+0x31c>)
 80017ee:	4a17      	ldr	r2, [pc, #92]	@ (800184c <parseAndStoreCoeffs+0x328>)
 80017f0:	609a      	str	r2, [r3, #8]
        highBandCoeffs.b0 = 1.304381;
 80017f2:	4b13      	ldr	r3, [pc, #76]	@ (8001840 <parseAndStoreCoeffs+0x31c>)
 80017f4:	4a13      	ldr	r2, [pc, #76]	@ (8001844 <parseAndStoreCoeffs+0x320>)
 80017f6:	60da      	str	r2, [r3, #12]
        highBandCoeffs.b1 = -1.586707;
 80017f8:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <parseAndStoreCoeffs+0x31c>)
 80017fa:	4a13      	ldr	r2, [pc, #76]	@ (8001848 <parseAndStoreCoeffs+0x324>)
 80017fc:	611a      	str	r2, [r3, #16]
        highBandCoeffs.b2 = 0.695619;
 80017fe:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <parseAndStoreCoeffs+0x31c>)
 8001800:	4a12      	ldr	r2, [pc, #72]	@ (800184c <parseAndStoreCoeffs+0x328>)
 8001802:	615a      	str	r2, [r3, #20]
        printf("Coefficients reset!\n");
 8001804:	4812      	ldr	r0, [pc, #72]	@ (8001850 <parseAndStoreCoeffs+0x32c>)
 8001806:	f004 fef9 	bl	80065fc <puts>
}
 800180a:	e002      	b.n	8001812 <parseAndStoreCoeffs+0x2ee>
        printf("Invalid parameter\n");
 800180c:	4811      	ldr	r0, [pc, #68]	@ (8001854 <parseAndStoreCoeffs+0x330>)
 800180e:	f004 fef5 	bl	80065fc <puts>
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800181c:	0800a7c4 	.word	0x0800a7c4
 8001820:	200003c8 	.word	0x200003c8
 8001824:	3f80359c 	.word	0x3f80359c
 8001828:	bfffffa4 	.word	0xbfffffa4
 800182c:	3f7f94c8 	.word	0x3f7f94c8
 8001830:	200003e0 	.word	0x200003e0
 8001834:	3f8645ed 	.word	0x3f8645ed
 8001838:	bffec469 	.word	0xbffec469
 800183c:	3f737425 	.word	0x3f737425
 8001840:	200003f8 	.word	0x200003f8
 8001844:	3fa6f5f5 	.word	0x3fa6f5f5
 8001848:	bfcb1937 	.word	0xbfcb1937
 800184c:	3f321416 	.word	0x3f321416
 8001850:	0800a7cc 	.word	0x0800a7cc
 8001854:	0800a7e0 	.word	0x0800a7e0

08001858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <Error_Handler+0x8>

08001864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <HAL_MspInit+0x4c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001872:	4a0f      	ldr	r2, [pc, #60]	@ (80018b0 <HAL_MspInit+0x4c>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001878:	6453      	str	r3, [r2, #68]	@ 0x44
 800187a:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <HAL_MspInit+0x4c>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <HAL_MspInit+0x4c>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	4a08      	ldr	r2, [pc, #32]	@ (80018b0 <HAL_MspInit+0x4c>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001894:	6413      	str	r3, [r2, #64]	@ 0x40
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_MspInit+0x4c>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08e      	sub	sp, #56	@ 0x38
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a6b      	ldr	r2, [pc, #428]	@ (8001a8c <HAL_I2S_MspInit+0x1d8>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	f040 80cf 	bne.w	8001a84 <HAL_I2S_MspInit+0x1d0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80018e6:	2301      	movs	r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80018ea:	23c0      	movs	r3, #192	@ 0xc0
 80018ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4618      	mov	r0, r3
 80018f8:	f002 fd52 	bl	80043a0 <HAL_RCCEx_PeriphCLKConfig>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001902:	f7ff ffa9 	bl	8001858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b61      	ldr	r3, [pc, #388]	@ (8001a90 <HAL_I2S_MspInit+0x1dc>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	4a60      	ldr	r2, [pc, #384]	@ (8001a90 <HAL_I2S_MspInit+0x1dc>)
 8001910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001914:	6413      	str	r3, [r2, #64]	@ 0x40
 8001916:	4b5e      	ldr	r3, [pc, #376]	@ (8001a90 <HAL_I2S_MspInit+0x1dc>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b5a      	ldr	r3, [pc, #360]	@ (8001a90 <HAL_I2S_MspInit+0x1dc>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a59      	ldr	r2, [pc, #356]	@ (8001a90 <HAL_I2S_MspInit+0x1dc>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b57      	ldr	r3, [pc, #348]	@ (8001a90 <HAL_I2S_MspInit+0x1dc>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	4b53      	ldr	r3, [pc, #332]	@ (8001a90 <HAL_I2S_MspInit+0x1dc>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a52      	ldr	r2, [pc, #328]	@ (8001a90 <HAL_I2S_MspInit+0x1dc>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b50      	ldr	r3, [pc, #320]	@ (8001a90 <HAL_I2S_MspInit+0x1dc>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800195a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800196c:	2305      	movs	r3, #5
 800196e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001974:	4619      	mov	r1, r3
 8001976:	4847      	ldr	r0, [pc, #284]	@ (8001a94 <HAL_I2S_MspInit+0x1e0>)
 8001978:	f000 ffc6 	bl	8002908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800197c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800198e:	2306      	movs	r3, #6
 8001990:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001996:	4619      	mov	r1, r3
 8001998:	483e      	ldr	r0, [pc, #248]	@ (8001a94 <HAL_I2S_MspInit+0x1e0>)
 800199a:	f000 ffb5 	bl	8002908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800199e:	2340      	movs	r3, #64	@ 0x40
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ae:	2305      	movs	r3, #5
 80019b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019b6:	4619      	mov	r1, r3
 80019b8:	4837      	ldr	r0, [pc, #220]	@ (8001a98 <HAL_I2S_MspInit+0x1e4>)
 80019ba:	f000 ffa5 	bl	8002908 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 80019be:	4b37      	ldr	r3, [pc, #220]	@ (8001a9c <HAL_I2S_MspInit+0x1e8>)
 80019c0:	4a37      	ldr	r2, [pc, #220]	@ (8001aa0 <HAL_I2S_MspInit+0x1ec>)
 80019c2:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 80019c4:	4b35      	ldr	r3, [pc, #212]	@ (8001a9c <HAL_I2S_MspInit+0x1e8>)
 80019c6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80019ca:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019cc:	4b33      	ldr	r3, [pc, #204]	@ (8001a9c <HAL_I2S_MspInit+0x1e8>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d2:	4b32      	ldr	r3, [pc, #200]	@ (8001a9c <HAL_I2S_MspInit+0x1e8>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019d8:	4b30      	ldr	r3, [pc, #192]	@ (8001a9c <HAL_I2S_MspInit+0x1e8>)
 80019da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019de:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019e0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a9c <HAL_I2S_MspInit+0x1e8>)
 80019e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019e6:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019e8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a9c <HAL_I2S_MspInit+0x1e8>)
 80019ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019ee:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 80019f0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a9c <HAL_I2S_MspInit+0x1e8>)
 80019f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019f6:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80019f8:	4b28      	ldr	r3, [pc, #160]	@ (8001a9c <HAL_I2S_MspInit+0x1e8>)
 80019fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019fe:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a00:	4b26      	ldr	r3, [pc, #152]	@ (8001a9c <HAL_I2S_MspInit+0x1e8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8001a06:	4825      	ldr	r0, [pc, #148]	@ (8001a9c <HAL_I2S_MspInit+0x1e8>)
 8001a08:	f000 fb7c 	bl	8002104 <HAL_DMA_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 8001a12:	f7ff ff21 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a20      	ldr	r2, [pc, #128]	@ (8001a9c <HAL_I2S_MspInit+0x1e8>)
 8001a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001a9c <HAL_I2S_MspInit+0x1e8>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001a22:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <HAL_I2S_MspInit+0x1f0>)
 8001a24:	4a20      	ldr	r2, [pc, #128]	@ (8001aa8 <HAL_I2S_MspInit+0x1f4>)
 8001a26:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001a28:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa4 <HAL_I2S_MspInit+0x1f0>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <HAL_I2S_MspInit+0x1f0>)
 8001a30:	2240      	movs	r2, #64	@ 0x40
 8001a32:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <HAL_I2S_MspInit+0x1f0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <HAL_I2S_MspInit+0x1f0>)
 8001a3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a40:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a42:	4b18      	ldr	r3, [pc, #96]	@ (8001aa4 <HAL_I2S_MspInit+0x1f0>)
 8001a44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a48:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a4a:	4b16      	ldr	r3, [pc, #88]	@ (8001aa4 <HAL_I2S_MspInit+0x1f0>)
 8001a4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a50:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001a52:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <HAL_I2S_MspInit+0x1f0>)
 8001a54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a58:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a5a:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <HAL_I2S_MspInit+0x1f0>)
 8001a5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a60:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a62:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <HAL_I2S_MspInit+0x1f0>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001a68:	480e      	ldr	r0, [pc, #56]	@ (8001aa4 <HAL_I2S_MspInit+0x1f0>)
 8001a6a:	f000 fb4b 	bl	8002104 <HAL_DMA_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 8001a74:	f7ff fef0 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <HAL_I2S_MspInit+0x1f0>)
 8001a7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a7e:	4a09      	ldr	r2, [pc, #36]	@ (8001aa4 <HAL_I2S_MspInit+0x1f0>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a84:	bf00      	nop
 8001a86:	3738      	adds	r7, #56	@ 0x38
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40003800 	.word	0x40003800
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020400 	.word	0x40020400
 8001a98:	40020800 	.word	0x40020800
 8001a9c:	20000250 	.word	0x20000250
 8001aa0:	40026058 	.word	0x40026058
 8001aa4:	200002b0 	.word	0x200002b0
 8001aa8:	40026070 	.word	0x40026070

08001aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	@ 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b40 <HAL_UART_MspInit+0x94>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d134      	bne.n	8001b38 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b44 <HAL_UART_MspInit+0x98>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b44 <HAL_UART_MspInit+0x98>)
 8001ad8:	f043 0310 	orr.w	r3, r3, #16
 8001adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ade:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <HAL_UART_MspInit+0x98>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <HAL_UART_MspInit+0x98>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4a14      	ldr	r2, [pc, #80]	@ (8001b44 <HAL_UART_MspInit+0x98>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <HAL_UART_MspInit+0x98>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b06:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b18:	2307      	movs	r3, #7
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	4809      	ldr	r0, [pc, #36]	@ (8001b48 <HAL_UART_MspInit+0x9c>)
 8001b24:	f000 fef0 	bl	8002908 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2025      	movs	r0, #37	@ 0x25
 8001b2e:	f000 fab2 	bl	8002096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b32:	2025      	movs	r0, #37	@ 0x25
 8001b34:	f000 facb 	bl	80020ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b38:	bf00      	nop
 8001b3a:	3728      	adds	r7, #40	@ 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40011000 	.word	0x40011000
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020000 	.word	0x40020000

08001b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <NMI_Handler+0x4>

08001b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <HardFault_Handler+0x4>

08001b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <MemManage_Handler+0x4>

08001b64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <BusFault_Handler+0x4>

08001b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <UsageFault_Handler+0x4>

08001b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba2:	f000 f959 	bl	8001e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001bb0:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <DMA1_Stream3_IRQHandler+0x10>)
 8001bb2:	f000 fc3f 	bl	8002434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000250 	.word	0x20000250

08001bc0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001bc4:	4802      	ldr	r0, [pc, #8]	@ (8001bd0 <DMA1_Stream4_IRQHandler+0x10>)
 8001bc6:	f000 fc35 	bl	8002434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200002b0 	.word	0x200002b0

08001bd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bd8:	4802      	ldr	r0, [pc, #8]	@ (8001be4 <USART1_IRQHandler+0x10>)
 8001bda:	f002 fe23 	bl	8004824 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000310 	.word	0x20000310

08001be8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return 1;
 8001bec:	2301      	movs	r3, #1
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <_kill>:

int _kill(int pid, int sig)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c02:	f004 fe8b 	bl	800691c <__errno>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2216      	movs	r2, #22
 8001c0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_exit>:

void _exit (int status)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ffe7 	bl	8001bf8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c2a:	bf00      	nop
 8001c2c:	e7fd      	b.n	8001c2a <_exit+0x12>

08001c2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	e00a      	b.n	8001c56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c40:	f3af 8000 	nop.w
 8001c44:	4601      	mov	r1, r0
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	60ba      	str	r2, [r7, #8]
 8001c4c:	b2ca      	uxtb	r2, r1
 8001c4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	3301      	adds	r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	dbf0      	blt.n	8001c40 <_read+0x12>
  }

  return len;
 8001c5e:	687b      	ldr	r3, [r7, #4]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c90:	605a      	str	r2, [r3, #4]
  return 0;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_isatty>:

int _isatty(int file)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ca8:	2301      	movs	r3, #1
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd8:	4a14      	ldr	r2, [pc, #80]	@ (8001d2c <_sbrk+0x5c>)
 8001cda:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <_sbrk+0x60>)
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce4:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d102      	bne.n	8001cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <_sbrk+0x64>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	@ (8001d38 <_sbrk+0x68>)
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d207      	bcs.n	8001d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d00:	f004 fe0c 	bl	800691c <__errno>
 8001d04:	4603      	mov	r3, r0
 8001d06:	220c      	movs	r2, #12
 8001d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0e:	e009      	b.n	8001d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d10:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d16:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4a05      	ldr	r2, [pc, #20]	@ (8001d34 <_sbrk+0x64>)
 8001d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20020000 	.word	0x20020000
 8001d30:	00000400 	.word	0x00000400
 8001d34:	20000420 	.word	0x20000420
 8001d38:	20000578 	.word	0x20000578

08001d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <SystemInit+0x20>)
 8001d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d46:	4a05      	ldr	r2, [pc, #20]	@ (8001d5c <SystemInit+0x20>)
 8001d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d64:	f7ff ffea 	bl	8001d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d68:	480c      	ldr	r0, [pc, #48]	@ (8001d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d6a:	490d      	ldr	r1, [pc, #52]	@ (8001da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d70:	e002      	b.n	8001d78 <LoopCopyDataInit>

08001d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d76:	3304      	adds	r3, #4

08001d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d7c:	d3f9      	bcc.n	8001d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d80:	4c0a      	ldr	r4, [pc, #40]	@ (8001dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d84:	e001      	b.n	8001d8a <LoopFillZerobss>

08001d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d88:	3204      	adds	r2, #4

08001d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d8c:	d3fb      	bcc.n	8001d86 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001d8e:	f004 fdcb 	bl	8006928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d92:	f7ff fa03 	bl	800119c <main>
  bx  lr    
 8001d96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001da4:	0800ac7c 	.word	0x0800ac7c
  ldr r2, =_sbss
 8001da8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001dac:	20000574 	.word	0x20000574

08001db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db0:	e7fe      	b.n	8001db0 <ADC_IRQHandler>
	...

08001db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001db8:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <HAL_Init+0x40>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001df4 <HAL_Init+0x40>)
 8001dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <HAL_Init+0x40>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001df4 <HAL_Init+0x40>)
 8001dca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd0:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a07      	ldr	r2, [pc, #28]	@ (8001df4 <HAL_Init+0x40>)
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ddc:	2003      	movs	r0, #3
 8001dde:	f000 f94f 	bl	8002080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de2:	200f      	movs	r0, #15
 8001de4:	f000 f808 	bl	8001df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de8:	f7ff fd3c 	bl	8001864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023c00 	.word	0x40023c00

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e00:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_InitTick+0x54>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_InitTick+0x58>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 f967 	bl	80020ea <HAL_SYSTICK_Config>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00e      	b.n	8001e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b0f      	cmp	r3, #15
 8001e2a:	d80a      	bhi.n	8001e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f000 f92f 	bl	8002096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e38:	4a06      	ldr	r2, [pc, #24]	@ (8001e54 <HAL_InitTick+0x5c>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e000      	b.n	8001e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000018 	.word	0x20000018
 8001e50:	20000020 	.word	0x20000020
 8001e54:	2000001c 	.word	0x2000001c

08001e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_IncTick+0x20>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <HAL_IncTick+0x24>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <HAL_IncTick+0x24>)
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000020 	.word	0x20000020
 8001e7c:	20000424 	.word	0x20000424

08001e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return uwTick;
 8001e84:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <HAL_GetTick+0x14>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000424 	.word	0x20000424

08001e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea0:	f7ff ffee 	bl	8001e80 <HAL_GetTick>
 8001ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d005      	beq.n	8001ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <HAL_Delay+0x44>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4413      	add	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ebe:	bf00      	nop
 8001ec0:	f7ff ffde 	bl	8001e80 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d8f7      	bhi.n	8001ec0 <HAL_Delay+0x28>
  {
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000020 	.word	0x20000020

08001ee0 <__NVIC_SetPriorityGrouping>:
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001efc:	4013      	ands	r3, r2
 8001efe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f12:	4a04      	ldr	r2, [pc, #16]	@ (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	60d3      	str	r3, [r2, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_GetPriorityGrouping>:
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f2c:	4b04      	ldr	r3, [pc, #16]	@ (8001f40 <__NVIC_GetPriorityGrouping+0x18>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	f003 0307 	and.w	r3, r3, #7
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_EnableIRQ>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	db0b      	blt.n	8001f6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	f003 021f 	and.w	r2, r3, #31
 8001f5c:	4907      	ldr	r1, [pc, #28]	@ (8001f7c <__NVIC_EnableIRQ+0x38>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	2001      	movs	r0, #1
 8001f66:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000e100 	.word	0xe000e100

08001f80 <__NVIC_SetPriority>:
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	6039      	str	r1, [r7, #0]
 8001f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	db0a      	blt.n	8001faa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	490c      	ldr	r1, [pc, #48]	@ (8001fcc <__NVIC_SetPriority+0x4c>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	0112      	lsls	r2, r2, #4
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001fa8:	e00a      	b.n	8001fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4908      	ldr	r1, [pc, #32]	@ (8001fd0 <__NVIC_SetPriority+0x50>)
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	3b04      	subs	r3, #4
 8001fb8:	0112      	lsls	r2, r2, #4
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	761a      	strb	r2, [r3, #24]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000e100 	.word	0xe000e100
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <NVIC_EncodePriority>:
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	@ 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f1c3 0307 	rsb	r3, r3, #7
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	bf28      	it	cs
 8001ff2:	2304      	movcs	r3, #4
 8001ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	2b06      	cmp	r3, #6
 8001ffc:	d902      	bls.n	8002004 <NVIC_EncodePriority+0x30>
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3b03      	subs	r3, #3
 8002002:	e000      	b.n	8002006 <NVIC_EncodePriority+0x32>
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	f04f 32ff 	mov.w	r2, #4294967295
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43da      	mvns	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	401a      	ands	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800201c:	f04f 31ff 	mov.w	r1, #4294967295
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	43d9      	mvns	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	4313      	orrs	r3, r2
}
 800202e:	4618      	mov	r0, r3
 8002030:	3724      	adds	r7, #36	@ 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <SysTick_Config>:
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3b01      	subs	r3, #1
 8002048:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800204c:	d301      	bcc.n	8002052 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800204e:	2301      	movs	r3, #1
 8002050:	e00f      	b.n	8002072 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002052:	4a0a      	ldr	r2, [pc, #40]	@ (800207c <SysTick_Config+0x40>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3b01      	subs	r3, #1
 8002058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205a:	210f      	movs	r1, #15
 800205c:	f04f 30ff 	mov.w	r0, #4294967295
 8002060:	f7ff ff8e 	bl	8001f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002064:	4b05      	ldr	r3, [pc, #20]	@ (800207c <SysTick_Config+0x40>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206a:	4b04      	ldr	r3, [pc, #16]	@ (800207c <SysTick_Config+0x40>)
 800206c:	2207      	movs	r2, #7
 800206e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	e000e010 	.word	0xe000e010

08002080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff29 	bl	8001ee0 <__NVIC_SetPriorityGrouping>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002096:	b580      	push	{r7, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a8:	f7ff ff3e 	bl	8001f28 <__NVIC_GetPriorityGrouping>
 80020ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	6978      	ldr	r0, [r7, #20]
 80020b4:	f7ff ff8e 	bl	8001fd4 <NVIC_EncodePriority>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff5d 	bl	8001f80 <__NVIC_SetPriority>
}
 80020c6:	bf00      	nop
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff31 	bl	8001f44 <__NVIC_EnableIRQ>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ffa2 	bl	800203c <SysTick_Config>
 80020f8:	4603      	mov	r3, r0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002110:	f7ff feb6 	bl	8001e80 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e099      	b.n	8002254 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0201 	bic.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002140:	e00f      	b.n	8002162 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002142:	f7ff fe9d 	bl	8001e80 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b05      	cmp	r3, #5
 800214e:	d908      	bls.n	8002162 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2220      	movs	r2, #32
 8002154:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2203      	movs	r2, #3
 800215a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e078      	b.n	8002254 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1e8      	bne.n	8002142 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	4b38      	ldr	r3, [pc, #224]	@ (800225c <HAL_DMA_Init+0x158>)
 800217c:	4013      	ands	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800218e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800219a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d107      	bne.n	80021cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c4:	4313      	orrs	r3, r2
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f023 0307 	bic.w	r3, r3, #7
 80021e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d117      	bne.n	8002226 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00e      	beq.n	8002226 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 fb01 	bl	8002810 <DMA_CheckFifoParam>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2240      	movs	r2, #64	@ 0x40
 8002218:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002222:	2301      	movs	r3, #1
 8002224:	e016      	b.n	8002254 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 fab8 	bl	80027a4 <DMA_CalcBaseAndBitshift>
 8002234:	4603      	mov	r3, r0
 8002236:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223c:	223f      	movs	r2, #63	@ 0x3f
 800223e:	409a      	lsls	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	f010803f 	.word	0xf010803f

08002260 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002276:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_DMA_Start_IT+0x26>
 8002282:	2302      	movs	r3, #2
 8002284:	e040      	b.n	8002308 <HAL_DMA_Start_IT+0xa8>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b01      	cmp	r3, #1
 8002298:	d12f      	bne.n	80022fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2202      	movs	r2, #2
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 fa4a 	bl	8002748 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b8:	223f      	movs	r2, #63	@ 0x3f
 80022ba:	409a      	lsls	r2, r3
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0216 	orr.w	r2, r2, #22
 80022ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d007      	beq.n	80022e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0208 	orr.w	r2, r2, #8
 80022e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	e005      	b.n	8002306 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002302:	2302      	movs	r3, #2
 8002304:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002306:	7dfb      	ldrb	r3, [r7, #23]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800231e:	f7ff fdaf 	bl	8001e80 <HAL_GetTick>
 8002322:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d008      	beq.n	8002342 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2280      	movs	r2, #128	@ 0x80
 8002334:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e052      	b.n	80023e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0216 	bic.w	r2, r2, #22
 8002350:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695a      	ldr	r2, [r3, #20]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002360:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	d103      	bne.n	8002372 <HAL_DMA_Abort+0x62>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800236e:	2b00      	cmp	r3, #0
 8002370:	d007      	beq.n	8002382 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0208 	bic.w	r2, r2, #8
 8002380:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0201 	bic.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002392:	e013      	b.n	80023bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002394:	f7ff fd74 	bl	8001e80 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b05      	cmp	r3, #5
 80023a0:	d90c      	bls.n	80023bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2203      	movs	r2, #3
 80023ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e015      	b.n	80023e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1e4      	bne.n	8002394 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ce:	223f      	movs	r2, #63	@ 0x3f
 80023d0:	409a      	lsls	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d004      	beq.n	800240e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2280      	movs	r2, #128	@ 0x80
 8002408:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e00c      	b.n	8002428 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2205      	movs	r2, #5
 8002412:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0201 	bic.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002440:	4b8e      	ldr	r3, [pc, #568]	@ (800267c <HAL_DMA_IRQHandler+0x248>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a8e      	ldr	r2, [pc, #568]	@ (8002680 <HAL_DMA_IRQHandler+0x24c>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	0a9b      	lsrs	r3, r3, #10
 800244c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002452:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245e:	2208      	movs	r2, #8
 8002460:	409a      	lsls	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4013      	ands	r3, r2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d01a      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d013      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0204 	bic.w	r2, r2, #4
 8002486:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248c:	2208      	movs	r2, #8
 800248e:	409a      	lsls	r2, r3
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a4:	2201      	movs	r2, #1
 80024a6:	409a      	lsls	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d012      	beq.n	80024d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c2:	2201      	movs	r2, #1
 80024c4:	409a      	lsls	r2, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ce:	f043 0202 	orr.w	r2, r3, #2
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024da:	2204      	movs	r2, #4
 80024dc:	409a      	lsls	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d012      	beq.n	800250c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00b      	beq.n	800250c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f8:	2204      	movs	r2, #4
 80024fa:	409a      	lsls	r2, r3
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002504:	f043 0204 	orr.w	r2, r3, #4
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002510:	2210      	movs	r2, #16
 8002512:	409a      	lsls	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d043      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d03c      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252e:	2210      	movs	r2, #16
 8002530:	409a      	lsls	r2, r3
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d018      	beq.n	8002576 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d108      	bne.n	8002564 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d024      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
 8002562:	e01f      	b.n	80025a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01b      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	4798      	blx	r3
 8002574:	e016      	b.n	80025a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d107      	bne.n	8002594 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0208 	bic.w	r2, r2, #8
 8002592:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a8:	2220      	movs	r2, #32
 80025aa:	409a      	lsls	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 808f 	beq.w	80026d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 8087 	beq.w	80026d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ca:	2220      	movs	r2, #32
 80025cc:	409a      	lsls	r2, r3
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b05      	cmp	r3, #5
 80025dc:	d136      	bne.n	800264c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0216 	bic.w	r2, r2, #22
 80025ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d103      	bne.n	800260e <HAL_DMA_IRQHandler+0x1da>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0208 	bic.w	r2, r2, #8
 800261c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002622:	223f      	movs	r2, #63	@ 0x3f
 8002624:	409a      	lsls	r2, r3
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800263e:	2b00      	cmp	r3, #0
 8002640:	d07e      	beq.n	8002740 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	4798      	blx	r3
        }
        return;
 800264a:	e079      	b.n	8002740 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d01d      	beq.n	8002696 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10d      	bne.n	8002684 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266c:	2b00      	cmp	r3, #0
 800266e:	d031      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	4798      	blx	r3
 8002678:	e02c      	b.n	80026d4 <HAL_DMA_IRQHandler+0x2a0>
 800267a:	bf00      	nop
 800267c:	20000018 	.word	0x20000018
 8002680:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002688:	2b00      	cmp	r3, #0
 800268a:	d023      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4798      	blx	r3
 8002694:	e01e      	b.n	80026d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10f      	bne.n	80026c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0210 	bic.w	r2, r2, #16
 80026b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d032      	beq.n	8002742 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d022      	beq.n	800272e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2205      	movs	r2, #5
 80026ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0201 	bic.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	3301      	adds	r3, #1
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	429a      	cmp	r2, r3
 800270a:	d307      	bcc.n	800271c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f2      	bne.n	8002700 <HAL_DMA_IRQHandler+0x2cc>
 800271a:	e000      	b.n	800271e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800271c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	4798      	blx	r3
 800273e:	e000      	b.n	8002742 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002740:	bf00      	nop
    }
  }
}
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002764:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b40      	cmp	r3, #64	@ 0x40
 8002774:	d108      	bne.n	8002788 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002786:	e007      	b.n	8002798 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	60da      	str	r2, [r3, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	3b10      	subs	r3, #16
 80027b4:	4a14      	ldr	r2, [pc, #80]	@ (8002808 <DMA_CalcBaseAndBitshift+0x64>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027be:	4a13      	ldr	r2, [pc, #76]	@ (800280c <DMA_CalcBaseAndBitshift+0x68>)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d909      	bls.n	80027e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80027da:	f023 0303 	bic.w	r3, r3, #3
 80027de:	1d1a      	adds	r2, r3, #4
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80027e4:	e007      	b.n	80027f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80027ee:	f023 0303 	bic.w	r3, r3, #3
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	aaaaaaab 	.word	0xaaaaaaab
 800280c:	0800a818 	.word	0x0800a818

08002810 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002820:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d11f      	bne.n	800286a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d856      	bhi.n	80028de <DMA_CheckFifoParam+0xce>
 8002830:	a201      	add	r2, pc, #4	@ (adr r2, 8002838 <DMA_CheckFifoParam+0x28>)
 8002832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002836:	bf00      	nop
 8002838:	08002849 	.word	0x08002849
 800283c:	0800285b 	.word	0x0800285b
 8002840:	08002849 	.word	0x08002849
 8002844:	080028df 	.word	0x080028df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d046      	beq.n	80028e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002858:	e043      	b.n	80028e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002862:	d140      	bne.n	80028e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002868:	e03d      	b.n	80028e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002872:	d121      	bne.n	80028b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d837      	bhi.n	80028ea <DMA_CheckFifoParam+0xda>
 800287a:	a201      	add	r2, pc, #4	@ (adr r2, 8002880 <DMA_CheckFifoParam+0x70>)
 800287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002880:	08002891 	.word	0x08002891
 8002884:	08002897 	.word	0x08002897
 8002888:	08002891 	.word	0x08002891
 800288c:	080028a9 	.word	0x080028a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
      break;
 8002894:	e030      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d025      	beq.n	80028ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a6:	e022      	b.n	80028ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028b0:	d11f      	bne.n	80028f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028b6:	e01c      	b.n	80028f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d903      	bls.n	80028c6 <DMA_CheckFifoParam+0xb6>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d003      	beq.n	80028cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028c4:	e018      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
      break;
 80028ca:	e015      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00e      	beq.n	80028f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      break;
 80028dc:	e00b      	b.n	80028f6 <DMA_CheckFifoParam+0xe6>
      break;
 80028de:	bf00      	nop
 80028e0:	e00a      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      break;
 80028e2:	bf00      	nop
 80028e4:	e008      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      break;
 80028e6:	bf00      	nop
 80028e8:	e006      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      break;
 80028ea:	bf00      	nop
 80028ec:	e004      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      break;
 80028ee:	bf00      	nop
 80028f0:	e002      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80028f2:	bf00      	nop
 80028f4:	e000      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      break;
 80028f6:	bf00      	nop
    }
  } 
  
  return status; 
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop

08002908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002908:	b480      	push	{r7}
 800290a:	b089      	sub	sp, #36	@ 0x24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	e16b      	b.n	8002bfc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002924:	2201      	movs	r2, #1
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	429a      	cmp	r2, r3
 800293e:	f040 815a 	bne.w	8002bf6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d005      	beq.n	800295a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002956:	2b02      	cmp	r3, #2
 8002958:	d130      	bne.n	80029bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	2203      	movs	r2, #3
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002990:	2201      	movs	r2, #1
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 0201 	and.w	r2, r3, #1
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d017      	beq.n	80029f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d123      	bne.n	8002a4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	08da      	lsrs	r2, r3, #3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3208      	adds	r2, #8
 8002a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	220f      	movs	r2, #15
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	08da      	lsrs	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3208      	adds	r2, #8
 8002a46:	69b9      	ldr	r1, [r7, #24]
 8002a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	2203      	movs	r2, #3
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0203 	and.w	r2, r3, #3
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80b4 	beq.w	8002bf6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	4b60      	ldr	r3, [pc, #384]	@ (8002c14 <HAL_GPIO_Init+0x30c>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a96:	4a5f      	ldr	r2, [pc, #380]	@ (8002c14 <HAL_GPIO_Init+0x30c>)
 8002a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002c14 <HAL_GPIO_Init+0x30c>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aaa:	4a5b      	ldr	r2, [pc, #364]	@ (8002c18 <HAL_GPIO_Init+0x310>)
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	089b      	lsrs	r3, r3, #2
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	220f      	movs	r2, #15
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a52      	ldr	r2, [pc, #328]	@ (8002c1c <HAL_GPIO_Init+0x314>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d02b      	beq.n	8002b2e <HAL_GPIO_Init+0x226>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a51      	ldr	r2, [pc, #324]	@ (8002c20 <HAL_GPIO_Init+0x318>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d025      	beq.n	8002b2a <HAL_GPIO_Init+0x222>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a50      	ldr	r2, [pc, #320]	@ (8002c24 <HAL_GPIO_Init+0x31c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d01f      	beq.n	8002b26 <HAL_GPIO_Init+0x21e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a4f      	ldr	r2, [pc, #316]	@ (8002c28 <HAL_GPIO_Init+0x320>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d019      	beq.n	8002b22 <HAL_GPIO_Init+0x21a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a4e      	ldr	r2, [pc, #312]	@ (8002c2c <HAL_GPIO_Init+0x324>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_GPIO_Init+0x216>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4d      	ldr	r2, [pc, #308]	@ (8002c30 <HAL_GPIO_Init+0x328>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00d      	beq.n	8002b1a <HAL_GPIO_Init+0x212>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4c      	ldr	r2, [pc, #304]	@ (8002c34 <HAL_GPIO_Init+0x32c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d007      	beq.n	8002b16 <HAL_GPIO_Init+0x20e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a4b      	ldr	r2, [pc, #300]	@ (8002c38 <HAL_GPIO_Init+0x330>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_GPIO_Init+0x20a>
 8002b0e:	2307      	movs	r3, #7
 8002b10:	e00e      	b.n	8002b30 <HAL_GPIO_Init+0x228>
 8002b12:	2308      	movs	r3, #8
 8002b14:	e00c      	b.n	8002b30 <HAL_GPIO_Init+0x228>
 8002b16:	2306      	movs	r3, #6
 8002b18:	e00a      	b.n	8002b30 <HAL_GPIO_Init+0x228>
 8002b1a:	2305      	movs	r3, #5
 8002b1c:	e008      	b.n	8002b30 <HAL_GPIO_Init+0x228>
 8002b1e:	2304      	movs	r3, #4
 8002b20:	e006      	b.n	8002b30 <HAL_GPIO_Init+0x228>
 8002b22:	2303      	movs	r3, #3
 8002b24:	e004      	b.n	8002b30 <HAL_GPIO_Init+0x228>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e002      	b.n	8002b30 <HAL_GPIO_Init+0x228>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_GPIO_Init+0x228>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	69fa      	ldr	r2, [r7, #28]
 8002b32:	f002 0203 	and.w	r2, r2, #3
 8002b36:	0092      	lsls	r2, r2, #2
 8002b38:	4093      	lsls	r3, r2
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b40:	4935      	ldr	r1, [pc, #212]	@ (8002c18 <HAL_GPIO_Init+0x310>)
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	3302      	adds	r3, #2
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c3c <HAL_GPIO_Init+0x334>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b72:	4a32      	ldr	r2, [pc, #200]	@ (8002c3c <HAL_GPIO_Init+0x334>)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b78:	4b30      	ldr	r3, [pc, #192]	@ (8002c3c <HAL_GPIO_Init+0x334>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b9c:	4a27      	ldr	r2, [pc, #156]	@ (8002c3c <HAL_GPIO_Init+0x334>)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ba2:	4b26      	ldr	r3, [pc, #152]	@ (8002c3c <HAL_GPIO_Init+0x334>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c3c <HAL_GPIO_Init+0x334>)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c3c <HAL_GPIO_Init+0x334>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf0:	4a12      	ldr	r2, [pc, #72]	@ (8002c3c <HAL_GPIO_Init+0x334>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	61fb      	str	r3, [r7, #28]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	2b0f      	cmp	r3, #15
 8002c00:	f67f ae90 	bls.w	8002924 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop
 8002c08:	3724      	adds	r7, #36	@ 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40013800 	.word	0x40013800
 8002c1c:	40020000 	.word	0x40020000
 8002c20:	40020400 	.word	0x40020400
 8002c24:	40020800 	.word	0x40020800
 8002c28:	40020c00 	.word	0x40020c00
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40021400 	.word	0x40021400
 8002c34:	40021800 	.word	0x40021800
 8002c38:	40021c00 	.word	0x40021c00
 8002c3c:	40013c00 	.word	0x40013c00

08002c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c50:	787b      	ldrb	r3, [r7, #1]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c5c:	e003      	b.n	8002c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	041a      	lsls	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	619a      	str	r2, [r3, #24]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b085      	sub	sp, #20
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c84:	887a      	ldrh	r2, [r7, #2]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	041a      	lsls	r2, r3, #16
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	43d9      	mvns	r1, r3
 8002c90:	887b      	ldrh	r3, [r7, #2]
 8002c92:	400b      	ands	r3, r1
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	619a      	str	r2, [r3, #24]
}
 8002c9a:	bf00      	nop
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e128      	b.n	8002f0c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d109      	bne.n	8002cda <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a90      	ldr	r2, [pc, #576]	@ (8002f14 <HAL_I2S_Init+0x26c>)
 8002cd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7fe fded 	bl	80018b4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2202      	movs	r2, #2
 8002cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002cf0:	f023 030f 	bic.w	r3, r3, #15
 8002cf4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d060      	beq.n	8002dc8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d102      	bne.n	8002d14 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002d0e:	2310      	movs	r3, #16
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	e001      	b.n	8002d18 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002d14:	2320      	movs	r3, #32
 8002d16:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b20      	cmp	r3, #32
 8002d1e:	d802      	bhi.n	8002d26 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002d26:	2001      	movs	r0, #1
 8002d28:	f001 fc1c 	bl	8004564 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d2c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d36:	d125      	bne.n	8002d84 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d010      	beq.n	8002d62 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	461a      	mov	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5c:	3305      	adds	r3, #5
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	e01f      	b.n	8002da2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	461a      	mov	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	3305      	adds	r3, #5
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	e00e      	b.n	8002da2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	461a      	mov	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9e:	3305      	adds	r3, #5
 8002da0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4a5c      	ldr	r2, [pc, #368]	@ (8002f18 <HAL_I2S_Init+0x270>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	08db      	lsrs	r3, r3, #3
 8002dac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	085b      	lsrs	r3, r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	e003      	b.n	8002dd0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d902      	bls.n	8002ddc <HAL_I2S_Init+0x134>
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	2bff      	cmp	r3, #255	@ 0xff
 8002dda:	d907      	bls.n	8002dec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de0:	f043 0210 	orr.w	r2, r3, #16
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e08f      	b.n	8002f0c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	ea42 0103 	orr.w	r1, r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002e0a:	f023 030f 	bic.w	r3, r3, #15
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6851      	ldr	r1, [r2, #4]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6892      	ldr	r2, [r2, #8]
 8002e16:	4311      	orrs	r1, r2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	68d2      	ldr	r2, [r2, #12]
 8002e1c:	4311      	orrs	r1, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6992      	ldr	r2, [r2, #24]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e2e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d161      	bne.n	8002efc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a38      	ldr	r2, [pc, #224]	@ (8002f1c <HAL_I2S_Init+0x274>)
 8002e3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a37      	ldr	r2, [pc, #220]	@ (8002f20 <HAL_I2S_Init+0x278>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d101      	bne.n	8002e4c <HAL_I2S_Init+0x1a4>
 8002e48:	4b36      	ldr	r3, [pc, #216]	@ (8002f24 <HAL_I2S_Init+0x27c>)
 8002e4a:	e001      	b.n	8002e50 <HAL_I2S_Init+0x1a8>
 8002e4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	4932      	ldr	r1, [pc, #200]	@ (8002f20 <HAL_I2S_Init+0x278>)
 8002e58:	428a      	cmp	r2, r1
 8002e5a:	d101      	bne.n	8002e60 <HAL_I2S_Init+0x1b8>
 8002e5c:	4a31      	ldr	r2, [pc, #196]	@ (8002f24 <HAL_I2S_Init+0x27c>)
 8002e5e:	e001      	b.n	8002e64 <HAL_I2S_Init+0x1bc>
 8002e60:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002e64:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002e68:	f023 030f 	bic.w	r3, r3, #15
 8002e6c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a2b      	ldr	r2, [pc, #172]	@ (8002f20 <HAL_I2S_Init+0x278>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d101      	bne.n	8002e7c <HAL_I2S_Init+0x1d4>
 8002e78:	4b2a      	ldr	r3, [pc, #168]	@ (8002f24 <HAL_I2S_Init+0x27c>)
 8002e7a:	e001      	b.n	8002e80 <HAL_I2S_Init+0x1d8>
 8002e7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e80:	2202      	movs	r2, #2
 8002e82:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a25      	ldr	r2, [pc, #148]	@ (8002f20 <HAL_I2S_Init+0x278>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d101      	bne.n	8002e92 <HAL_I2S_Init+0x1ea>
 8002e8e:	4b25      	ldr	r3, [pc, #148]	@ (8002f24 <HAL_I2S_Init+0x27c>)
 8002e90:	e001      	b.n	8002e96 <HAL_I2S_Init+0x1ee>
 8002e92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ea2:	d003      	beq.n	8002eac <HAL_I2S_Init+0x204>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d103      	bne.n	8002eb4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002eac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	e001      	b.n	8002eb8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	897b      	ldrh	r3, [r7, #10]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ee4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a0d      	ldr	r2, [pc, #52]	@ (8002f20 <HAL_I2S_Init+0x278>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_I2S_Init+0x24c>
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f24 <HAL_I2S_Init+0x27c>)
 8002ef2:	e001      	b.n	8002ef8 <HAL_I2S_Init+0x250>
 8002ef4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ef8:	897a      	ldrh	r2, [r7, #10]
 8002efa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3720      	adds	r7, #32
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	0800300b 	.word	0x0800300b
 8002f18:	cccccccd 	.word	0xcccccccd
 8002f1c:	08003435 	.word	0x08003435
 8002f20:	40003800 	.word	0x40003800
 8002f24:	40003400 	.word	0x40003400

08002f28 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	881a      	ldrh	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	1c9a      	adds	r2, r3, #2
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10e      	bne.n	8002fa4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002f94:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe f848 	bl	8001034 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbe:	b292      	uxth	r2, r2
 8002fc0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc6:	1c9a      	adds	r2, r3, #2
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10e      	bne.n	8003002 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ff2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff ff93 	bl	8002f28 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b086      	sub	sp, #24
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b04      	cmp	r3, #4
 8003024:	d13a      	bne.n	800309c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b01      	cmp	r3, #1
 800302e:	d109      	bne.n	8003044 <I2S_IRQHandler+0x3a>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800303a:	2b40      	cmp	r3, #64	@ 0x40
 800303c:	d102      	bne.n	8003044 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff ffb4 	bl	8002fac <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304a:	2b40      	cmp	r3, #64	@ 0x40
 800304c:	d126      	bne.n	800309c <I2S_IRQHandler+0x92>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b20      	cmp	r3, #32
 800305a:	d11f      	bne.n	800309c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800306a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308e:	f043 0202 	orr.w	r2, r3, #2
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ff50 	bl	8002f3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d136      	bne.n	8003116 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d109      	bne.n	80030c6 <I2S_IRQHandler+0xbc>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030bc:	2b80      	cmp	r3, #128	@ 0x80
 80030be:	d102      	bne.n	80030c6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ff45 	bl	8002f50 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d122      	bne.n	8003116 <I2S_IRQHandler+0x10c>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	2b20      	cmp	r3, #32
 80030dc:	d11b      	bne.n	8003116 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80030ec:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003108:	f043 0204 	orr.w	r2, r3, #4
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff ff13 	bl	8002f3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003116:	bf00      	nop
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b01      	cmp	r3, #1
 8003144:	d002      	beq.n	800314c <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8003146:	2302      	movs	r3, #2
 8003148:	77fb      	strb	r3, [r7, #31]
    goto error;
 800314a:	e160      	b.n	800340e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003158:	887b      	ldrh	r3, [r7, #2]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e15a      	b.n	8003418 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800316e:	2302      	movs	r3, #2
 8003170:	e152      	b.n	8003418 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  hi2s->pTxBuffPtr = pTxData;
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->pRxBuffPtr = pRxData;
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d002      	beq.n	800319e <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2b05      	cmp	r3, #5
 800319c:	d114      	bne.n	80031c8 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800319e:	887b      	ldrh	r3, [r7, #2]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80031a8:	887b      	ldrh	r3, [r7, #2]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 80031b2:	887b      	ldrh	r3, [r7, #2]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 80031bc:	887b      	ldrh	r3, [r7, #2]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	865a      	strh	r2, [r3, #50]	@ 0x32
 80031c6:	e00b      	b.n	80031e0 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	887a      	ldrh	r2, [r7, #2]
 80031cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	887a      	ldrh	r2, [r7, #2]
 80031d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = Size;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	887a      	ldrh	r2, [r7, #2]
 80031d8:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	887a      	ldrh	r2, [r7, #2]
 80031de:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2205      	movs	r2, #5
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f2:	4a8b      	ldr	r2, [pc, #556]	@ (8003420 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80031f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fa:	4a8a      	ldr	r2, [pc, #552]	@ (8003424 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80031fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003202:	4a89      	ldr	r2, [pc, #548]	@ (8003428 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003204:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320a:	2200      	movs	r2, #0
 800320c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003212:	2200      	movs	r2, #0
 8003214:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321a:	4a83      	ldr	r2, [pc, #524]	@ (8003428 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 800321c:	64da      	str	r2, [r3, #76]	@ 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003228:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003230:	d002      	beq.n	8003238 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d16b      	bne.n	8003310 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a79      	ldr	r2, [pc, #484]	@ (800342c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d101      	bne.n	800324e <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 800324a:	4b79      	ldr	r3, [pc, #484]	@ (8003430 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800324c:	e001      	b.n	8003252 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 800324e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003252:	330c      	adds	r3, #12
 8003254:	4619      	mov	r1, r3
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800325e:	b29b      	uxth	r3, r3
 8003260:	f7fe fffe 	bl	8002260 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a70      	ldr	r2, [pc, #448]	@ (800342c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d101      	bne.n	8003272 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 800326e:	4b70      	ldr	r3, [pc, #448]	@ (8003430 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003270:	e001      	b.n	8003276 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8003272:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	496b      	ldr	r1, [pc, #428]	@ (800342c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800327e:	428b      	cmp	r3, r1
 8003280:	d101      	bne.n	8003286 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8003282:	4b6b      	ldr	r3, [pc, #428]	@ (8003430 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003284:	e001      	b.n	800328a <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8003286:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003290:	f107 0308 	add.w	r3, r7, #8
 8003294:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	6819      	ldr	r1, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	330c      	adds	r3, #12
 80032a4:	461a      	mov	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f7fe ffd8 	bl	8002260 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0202 	orr.w	r2, r2, #2
 80032be:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ce:	f000 809e 	beq.w	800340e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a55      	ldr	r2, [pc, #340]	@ (800342c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d101      	bne.n	80032e0 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80032dc:	4b54      	ldr	r3, [pc, #336]	@ (8003430 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80032de:	e001      	b.n	80032e4 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80032e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032e4:	69da      	ldr	r2, [r3, #28]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4950      	ldr	r1, [pc, #320]	@ (800342c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80032ec:	428b      	cmp	r3, r1
 80032ee:	d101      	bne.n	80032f4 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80032f0:	4b4f      	ldr	r3, [pc, #316]	@ (8003430 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80032f2:	e001      	b.n	80032f8 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80032f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032fc:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800330c:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800330e:	e07e      	b.n	800340e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800331a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800331e:	d10a      	bne.n	8003336 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003320:	2300      	movs	r3, #0
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003336:	f107 0308 	add.w	r3, r7, #8
 800333a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	6819      	ldr	r1, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a38      	ldr	r2, [pc, #224]	@ (800342c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d101      	bne.n	8003352 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 800334e:	4b38      	ldr	r3, [pc, #224]	@ (8003430 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003350:	e001      	b.n	8003356 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8003352:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003356:	330c      	adds	r3, #12
 8003358:	461a      	mov	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335e:	b29b      	uxth	r3, r3
 8003360:	f7fe ff7e 	bl	8002260 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a30      	ldr	r2, [pc, #192]	@ (800342c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d101      	bne.n	8003372 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 800336e:	4b30      	ldr	r3, [pc, #192]	@ (8003430 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003370:	e001      	b.n	8003376 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8003372:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	492b      	ldr	r1, [pc, #172]	@ (800342c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800337e:	428b      	cmp	r3, r1
 8003380:	d101      	bne.n	8003386 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8003382:	4b2b      	ldr	r3, [pc, #172]	@ (8003430 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003384:	e001      	b.n	800338a <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8003386:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800338a:	f042 0202 	orr.w	r2, r2, #2
 800338e:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003390:	1d3b      	adds	r3, r7, #4
 8003392:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	4619      	mov	r1, r3
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	f7fe ff59 	bl	8002260 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0201 	orr.w	r2, r2, #1
 80033bc:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033cc:	d01e      	beq.n	800340c <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a16      	ldr	r2, [pc, #88]	@ (800342c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d101      	bne.n	80033dc <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80033d8:	4b15      	ldr	r3, [pc, #84]	@ (8003430 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80033da:	e001      	b.n	80033e0 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80033dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033e0:	69da      	ldr	r2, [r3, #28]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4911      	ldr	r1, [pc, #68]	@ (800342c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80033e8:	428b      	cmp	r3, r1
 80033ea:	d101      	bne.n	80033f0 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 80033ec:	4b10      	ldr	r3, [pc, #64]	@ (8003430 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80033ee:	e001      	b.n	80033f4 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 80033f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033f8:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003408:	61da      	str	r2, [r3, #28]
 800340a:	e000      	b.n	800340e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 800340c:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return errorcode;
 8003416:	7ffb      	ldrb	r3, [r7, #31]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3720      	adds	r7, #32
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	08003705 	.word	0x08003705
 8003424:	08003721 	.word	0x08003721
 8003428:	080037f9 	.word	0x080037f9
 800342c:	40003800 	.word	0x40003800
 8003430:	40003400 	.word	0x40003400

08003434 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a92      	ldr	r2, [pc, #584]	@ (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d101      	bne.n	8003452 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800344e:	4b92      	ldr	r3, [pc, #584]	@ (8003698 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003450:	e001      	b.n	8003456 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003452:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a8b      	ldr	r2, [pc, #556]	@ (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d101      	bne.n	8003470 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800346c:	4b8a      	ldr	r3, [pc, #552]	@ (8003698 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800346e:	e001      	b.n	8003474 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003470:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003480:	d004      	beq.n	800348c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 8099 	bne.w	80035be <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b02      	cmp	r3, #2
 8003494:	d107      	bne.n	80034a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f9e9 	bl	8003878 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d107      	bne.n	80034c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fa8c 	bl	80039d8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c6:	2b40      	cmp	r3, #64	@ 0x40
 80034c8:	d13a      	bne.n	8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d035      	beq.n	8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80034de:	4b6e      	ldr	r3, [pc, #440]	@ (8003698 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034e0:	e001      	b.n	80034e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80034e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4969      	ldr	r1, [pc, #420]	@ (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034ee:	428b      	cmp	r3, r1
 80034f0:	d101      	bne.n	80034f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80034f2:	4b69      	ldr	r3, [pc, #420]	@ (8003698 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034f4:	e001      	b.n	80034fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80034f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80034fe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800350e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	f043 0202 	orr.w	r2, r3, #2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff fcfe 	bl	8002f3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b08      	cmp	r3, #8
 8003548:	f040 80c3 	bne.w	80036d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80bd 	beq.w	80036d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003566:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a49      	ldr	r2, [pc, #292]	@ (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d101      	bne.n	8003576 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003572:	4b49      	ldr	r3, [pc, #292]	@ (8003698 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003574:	e001      	b.n	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003576:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4944      	ldr	r1, [pc, #272]	@ (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003582:	428b      	cmp	r3, r1
 8003584:	d101      	bne.n	800358a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003586:	4b44      	ldr	r3, [pc, #272]	@ (8003698 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003588:	e001      	b.n	800358e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800358a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800358e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003592:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003594:	2300      	movs	r3, #0
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	60bb      	str	r3, [r7, #8]
 80035a0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ae:	f043 0204 	orr.w	r2, r3, #4
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff fcc0 	bl	8002f3c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035bc:	e089      	b.n	80036d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d107      	bne.n	80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f982 	bl	80038dc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d107      	bne.n	80035f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f9c1 	bl	8003974 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f8:	2b40      	cmp	r3, #64	@ 0x40
 80035fa:	d12f      	bne.n	800365c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d02a      	beq.n	800365c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003614:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1e      	ldr	r2, [pc, #120]	@ (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d101      	bne.n	8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003620:	4b1d      	ldr	r3, [pc, #116]	@ (8003698 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003622:	e001      	b.n	8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003624:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4919      	ldr	r1, [pc, #100]	@ (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003630:	428b      	cmp	r3, r1
 8003632:	d101      	bne.n	8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003634:	4b18      	ldr	r3, [pc, #96]	@ (8003698 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003636:	e001      	b.n	800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003638:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800363c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003640:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364e:	f043 0202 	orr.w	r2, r3, #2
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff fc70 	bl	8002f3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b08      	cmp	r3, #8
 8003664:	d136      	bne.n	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d031      	beq.n	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a07      	ldr	r2, [pc, #28]	@ (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d101      	bne.n	800367e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800367a:	4b07      	ldr	r3, [pc, #28]	@ (8003698 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800367c:	e001      	b.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800367e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4902      	ldr	r1, [pc, #8]	@ (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800368a:	428b      	cmp	r3, r1
 800368c:	d106      	bne.n	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800368e:	4b02      	ldr	r3, [pc, #8]	@ (8003698 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003690:	e006      	b.n	80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003692:	bf00      	nop
 8003694:	40003800 	.word	0x40003800
 8003698:	40003400 	.word	0x40003400
 800369c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80036a4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80036b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c2:	f043 0204 	orr.w	r2, r3, #4
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff fc36 	bl	8002f3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036d0:	e000      	b.n	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036d2:	bf00      	nop
}
 80036d4:	bf00      	nop
 80036d6:	3720      	adds	r7, #32
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_I2SEx_TxRxHalfCpltCallback>:
  * @brief  Tx and Rx Transfer half completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxHalfCpltCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003710:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f7ff ffe2 	bl	80036dc <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003718:	bf00      	nop
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372c:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d155      	bne.n	80037e2 <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003744:	d006      	beq.n	8003754 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003750:	2b00      	cmp	r3, #0
 8003752:	d11e      	bne.n	8003792 <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a25      	ldr	r2, [pc, #148]	@ (80037f0 <I2SEx_TxRxDMACplt+0xd0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <I2SEx_TxRxDMACplt+0x42>
 800375e:	4b25      	ldr	r3, [pc, #148]	@ (80037f4 <I2SEx_TxRxDMACplt+0xd4>)
 8003760:	e001      	b.n	8003766 <I2SEx_TxRxDMACplt+0x46>
 8003762:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4920      	ldr	r1, [pc, #128]	@ (80037f0 <I2SEx_TxRxDMACplt+0xd0>)
 800376e:	428b      	cmp	r3, r1
 8003770:	d101      	bne.n	8003776 <I2SEx_TxRxDMACplt+0x56>
 8003772:	4b20      	ldr	r3, [pc, #128]	@ (80037f4 <I2SEx_TxRxDMACplt+0xd4>)
 8003774:	e001      	b.n	800377a <I2SEx_TxRxDMACplt+0x5a>
 8003776:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0202 	bic.w	r2, r2, #2
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	e01d      	b.n	80037ce <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a12      	ldr	r2, [pc, #72]	@ (80037f0 <I2SEx_TxRxDMACplt+0xd0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <I2SEx_TxRxDMACplt+0x90>
 80037ac:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <I2SEx_TxRxDMACplt+0xd4>)
 80037ae:	e001      	b.n	80037b4 <I2SEx_TxRxDMACplt+0x94>
 80037b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	490d      	ldr	r1, [pc, #52]	@ (80037f0 <I2SEx_TxRxDMACplt+0xd0>)
 80037bc:	428b      	cmp	r3, r1
 80037be:	d101      	bne.n	80037c4 <I2SEx_TxRxDMACplt+0xa4>
 80037c0:	4b0c      	ldr	r3, [pc, #48]	@ (80037f4 <I2SEx_TxRxDMACplt+0xd4>)
 80037c2:	e001      	b.n	80037c8 <I2SEx_TxRxDMACplt+0xa8>
 80037c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037c8:	f022 0202 	bic.w	r2, r2, #2
 80037cc:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->TxXferCount = 0U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7ff ff84 	bl	80036f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40003800 	.word	0x40003800
 80037f4:	40003400 	.word	0x40003400

080037f8 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003804:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0203 	bic.w	r2, r2, #3
 8003814:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a15      	ldr	r2, [pc, #84]	@ (8003870 <I2SEx_TxRxDMAError+0x78>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d101      	bne.n	8003824 <I2SEx_TxRxDMAError+0x2c>
 8003820:	4b14      	ldr	r3, [pc, #80]	@ (8003874 <I2SEx_TxRxDMAError+0x7c>)
 8003822:	e001      	b.n	8003828 <I2SEx_TxRxDMAError+0x30>
 8003824:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4910      	ldr	r1, [pc, #64]	@ (8003870 <I2SEx_TxRxDMAError+0x78>)
 8003830:	428b      	cmp	r3, r1
 8003832:	d101      	bne.n	8003838 <I2SEx_TxRxDMAError+0x40>
 8003834:	4b0f      	ldr	r3, [pc, #60]	@ (8003874 <I2SEx_TxRxDMAError+0x7c>)
 8003836:	e001      	b.n	800383c <I2SEx_TxRxDMAError+0x44>
 8003838:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800383c:	f022 0203 	bic.w	r2, r2, #3
 8003840:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385a:	f043 0208 	orr.w	r2, r3, #8
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff fb6a 	bl	8002f3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40003800 	.word	0x40003800
 8003874:	40003400 	.word	0x40003400

08003878 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	1c99      	adds	r1, r3, #2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6251      	str	r1, [r2, #36]	@ 0x24
 800388a:	881a      	ldrh	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d113      	bne.n	80038d2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80038b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d106      	bne.n	80038d2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff ff0f 	bl	80036f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	1c99      	adds	r1, r3, #2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6251      	str	r1, [r2, #36]	@ 0x24
 80038ee:	8819      	ldrh	r1, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1d      	ldr	r2, [pc, #116]	@ (800396c <I2SEx_TxISR_I2SExt+0x90>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <I2SEx_TxISR_I2SExt+0x22>
 80038fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003970 <I2SEx_TxISR_I2SExt+0x94>)
 80038fc:	e001      	b.n	8003902 <I2SEx_TxISR_I2SExt+0x26>
 80038fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003902:	460a      	mov	r2, r1
 8003904:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d121      	bne.n	8003962 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a12      	ldr	r2, [pc, #72]	@ (800396c <I2SEx_TxISR_I2SExt+0x90>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d101      	bne.n	800392c <I2SEx_TxISR_I2SExt+0x50>
 8003928:	4b11      	ldr	r3, [pc, #68]	@ (8003970 <I2SEx_TxISR_I2SExt+0x94>)
 800392a:	e001      	b.n	8003930 <I2SEx_TxISR_I2SExt+0x54>
 800392c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	490d      	ldr	r1, [pc, #52]	@ (800396c <I2SEx_TxISR_I2SExt+0x90>)
 8003938:	428b      	cmp	r3, r1
 800393a:	d101      	bne.n	8003940 <I2SEx_TxISR_I2SExt+0x64>
 800393c:	4b0c      	ldr	r3, [pc, #48]	@ (8003970 <I2SEx_TxISR_I2SExt+0x94>)
 800393e:	e001      	b.n	8003944 <I2SEx_TxISR_I2SExt+0x68>
 8003940:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003944:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003948:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d106      	bne.n	8003962 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff fec7 	bl	80036f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40003800 	.word	0x40003800
 8003970:	40003400 	.word	0x40003400

08003974 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68d8      	ldr	r0, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003986:	1c99      	adds	r1, r3, #2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800398c:	b282      	uxth	r2, r0
 800398e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d113      	bne.n	80039d0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80039b6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff fe90 	bl	80036f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039d0:	bf00      	nop
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a20      	ldr	r2, [pc, #128]	@ (8003a68 <I2SEx_RxISR_I2SExt+0x90>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <I2SEx_RxISR_I2SExt+0x16>
 80039ea:	4b20      	ldr	r3, [pc, #128]	@ (8003a6c <I2SEx_RxISR_I2SExt+0x94>)
 80039ec:	e001      	b.n	80039f2 <I2SEx_RxISR_I2SExt+0x1a>
 80039ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039f2:	68d8      	ldr	r0, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f8:	1c99      	adds	r1, r3, #2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80039fe:	b282      	uxth	r2, r0
 8003a00:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d121      	bne.n	8003a5e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a12      	ldr	r2, [pc, #72]	@ (8003a68 <I2SEx_RxISR_I2SExt+0x90>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d101      	bne.n	8003a28 <I2SEx_RxISR_I2SExt+0x50>
 8003a24:	4b11      	ldr	r3, [pc, #68]	@ (8003a6c <I2SEx_RxISR_I2SExt+0x94>)
 8003a26:	e001      	b.n	8003a2c <I2SEx_RxISR_I2SExt+0x54>
 8003a28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	490d      	ldr	r1, [pc, #52]	@ (8003a68 <I2SEx_RxISR_I2SExt+0x90>)
 8003a34:	428b      	cmp	r3, r1
 8003a36:	d101      	bne.n	8003a3c <I2SEx_RxISR_I2SExt+0x64>
 8003a38:	4b0c      	ldr	r3, [pc, #48]	@ (8003a6c <I2SEx_RxISR_I2SExt+0x94>)
 8003a3a:	e001      	b.n	8003a40 <I2SEx_RxISR_I2SExt+0x68>
 8003a3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a40:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a44:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d106      	bne.n	8003a5e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff fe49 	bl	80036f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40003800 	.word	0x40003800
 8003a6c:	40003400 	.word	0x40003400

08003a70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e267      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d075      	beq.n	8003b7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a8e:	4b88      	ldr	r3, [pc, #544]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d00c      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9a:	4b85      	ldr	r3, [pc, #532]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d112      	bne.n	8003acc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aa6:	4b82      	ldr	r3, [pc, #520]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ab2:	d10b      	bne.n	8003acc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab4:	4b7e      	ldr	r3, [pc, #504]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d05b      	beq.n	8003b78 <HAL_RCC_OscConfig+0x108>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d157      	bne.n	8003b78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e242      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ad4:	d106      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x74>
 8003ad6:	4b76      	ldr	r3, [pc, #472]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a75      	ldr	r2, [pc, #468]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	e01d      	b.n	8003b20 <HAL_RCC_OscConfig+0xb0>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x98>
 8003aee:	4b70      	ldr	r3, [pc, #448]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a6f      	ldr	r2, [pc, #444]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003af4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	4b6d      	ldr	r3, [pc, #436]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a6c      	ldr	r2, [pc, #432]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	e00b      	b.n	8003b20 <HAL_RCC_OscConfig+0xb0>
 8003b08:	4b69      	ldr	r3, [pc, #420]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a68      	ldr	r2, [pc, #416]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	4b66      	ldr	r3, [pc, #408]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a65      	ldr	r2, [pc, #404]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d013      	beq.n	8003b50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b28:	f7fe f9aa 	bl	8001e80 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b30:	f7fe f9a6 	bl	8001e80 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	@ 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e207      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b42:	4b5b      	ldr	r3, [pc, #364]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0xc0>
 8003b4e:	e014      	b.n	8003b7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7fe f996 	bl	8001e80 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fe f992 	bl	8001e80 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	@ 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e1f3      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6a:	4b51      	ldr	r3, [pc, #324]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0xe8>
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d063      	beq.n	8003c4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b86:	4b4a      	ldr	r3, [pc, #296]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00b      	beq.n	8003baa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b92:	4b47      	ldr	r3, [pc, #284]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d11c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b9e:	4b44      	ldr	r3, [pc, #272]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d116      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003baa:	4b41      	ldr	r3, [pc, #260]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x152>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d001      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e1c7      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc2:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4937      	ldr	r1, [pc, #220]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd6:	e03a      	b.n	8003c4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d020      	beq.n	8003c22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be0:	4b34      	ldr	r3, [pc, #208]	@ (8003cb4 <HAL_RCC_OscConfig+0x244>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be6:	f7fe f94b 	bl	8001e80 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bee:	f7fe f947 	bl	8001e80 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e1a8      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c00:	4b2b      	ldr	r3, [pc, #172]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0c:	4b28      	ldr	r3, [pc, #160]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	4925      	ldr	r1, [pc, #148]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]
 8003c20:	e015      	b.n	8003c4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c22:	4b24      	ldr	r3, [pc, #144]	@ (8003cb4 <HAL_RCC_OscConfig+0x244>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fe f92a 	bl	8001e80 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c30:	f7fe f926 	bl	8001e80 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e187      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c42:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d036      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d016      	beq.n	8003c90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c62:	4b15      	ldr	r3, [pc, #84]	@ (8003cb8 <HAL_RCC_OscConfig+0x248>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fe f90a 	bl	8001e80 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c70:	f7fe f906 	bl	8001e80 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e167      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c82:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0x200>
 8003c8e:	e01b      	b.n	8003cc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c90:	4b09      	ldr	r3, [pc, #36]	@ (8003cb8 <HAL_RCC_OscConfig+0x248>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c96:	f7fe f8f3 	bl	8001e80 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c9c:	e00e      	b.n	8003cbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c9e:	f7fe f8ef 	bl	8001e80 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d907      	bls.n	8003cbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e150      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	42470000 	.word	0x42470000
 8003cb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cbc:	4b88      	ldr	r3, [pc, #544]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1ea      	bne.n	8003c9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8097 	beq.w	8003e04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cda:	4b81      	ldr	r3, [pc, #516]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10f      	bne.n	8003d06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	4b7d      	ldr	r3, [pc, #500]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	4a7c      	ldr	r2, [pc, #496]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cf6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cfe:	60bb      	str	r3, [r7, #8]
 8003d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d02:	2301      	movs	r3, #1
 8003d04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d06:	4b77      	ldr	r3, [pc, #476]	@ (8003ee4 <HAL_RCC_OscConfig+0x474>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d118      	bne.n	8003d44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d12:	4b74      	ldr	r3, [pc, #464]	@ (8003ee4 <HAL_RCC_OscConfig+0x474>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a73      	ldr	r2, [pc, #460]	@ (8003ee4 <HAL_RCC_OscConfig+0x474>)
 8003d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d1e:	f7fe f8af 	bl	8001e80 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d26:	f7fe f8ab 	bl	8001e80 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e10c      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d38:	4b6a      	ldr	r3, [pc, #424]	@ (8003ee4 <HAL_RCC_OscConfig+0x474>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d106      	bne.n	8003d5a <HAL_RCC_OscConfig+0x2ea>
 8003d4c:	4b64      	ldr	r3, [pc, #400]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d50:	4a63      	ldr	r2, [pc, #396]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d58:	e01c      	b.n	8003d94 <HAL_RCC_OscConfig+0x324>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b05      	cmp	r3, #5
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCC_OscConfig+0x30c>
 8003d62:	4b5f      	ldr	r3, [pc, #380]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d66:	4a5e      	ldr	r2, [pc, #376]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d68:	f043 0304 	orr.w	r3, r3, #4
 8003d6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d6e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d72:	4a5b      	ldr	r2, [pc, #364]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d7a:	e00b      	b.n	8003d94 <HAL_RCC_OscConfig+0x324>
 8003d7c:	4b58      	ldr	r3, [pc, #352]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d80:	4a57      	ldr	r2, [pc, #348]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d82:	f023 0301 	bic.w	r3, r3, #1
 8003d86:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d88:	4b55      	ldr	r3, [pc, #340]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8c:	4a54      	ldr	r2, [pc, #336]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d8e:	f023 0304 	bic.w	r3, r3, #4
 8003d92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d015      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9c:	f7fe f870 	bl	8001e80 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da2:	e00a      	b.n	8003dba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da4:	f7fe f86c 	bl	8001e80 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e0cb      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dba:	4b49      	ldr	r3, [pc, #292]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0ee      	beq.n	8003da4 <HAL_RCC_OscConfig+0x334>
 8003dc6:	e014      	b.n	8003df2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc8:	f7fe f85a 	bl	8001e80 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dce:	e00a      	b.n	8003de6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd0:	f7fe f856 	bl	8001e80 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e0b5      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1ee      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df8:	4b39      	ldr	r3, [pc, #228]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfc:	4a38      	ldr	r2, [pc, #224]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80a1 	beq.w	8003f50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e0e:	4b34      	ldr	r3, [pc, #208]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 030c 	and.w	r3, r3, #12
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d05c      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d141      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e22:	4b31      	ldr	r3, [pc, #196]	@ (8003ee8 <HAL_RCC_OscConfig+0x478>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e28:	f7fe f82a 	bl	8001e80 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e30:	f7fe f826 	bl	8001e80 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e087      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e42:	4b27      	ldr	r3, [pc, #156]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	019b      	lsls	r3, r3, #6
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e64:	085b      	lsrs	r3, r3, #1
 8003e66:	3b01      	subs	r3, #1
 8003e68:	041b      	lsls	r3, r3, #16
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e70:	061b      	lsls	r3, r3, #24
 8003e72:	491b      	ldr	r1, [pc, #108]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e78:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee8 <HAL_RCC_OscConfig+0x478>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7e:	f7fd ffff 	bl	8001e80 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e86:	f7fd fffb 	bl	8001e80 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e05c      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e98:	4b11      	ldr	r3, [pc, #68]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x416>
 8003ea4:	e054      	b.n	8003f50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea6:	4b10      	ldr	r3, [pc, #64]	@ (8003ee8 <HAL_RCC_OscConfig+0x478>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eac:	f7fd ffe8 	bl	8001e80 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb4:	f7fd ffe4 	bl	8001e80 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e045      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec6:	4b06      	ldr	r3, [pc, #24]	@ (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x444>
 8003ed2:	e03d      	b.n	8003f50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d107      	bne.n	8003eec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e038      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	40007000 	.word	0x40007000
 8003ee8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eec:	4b1b      	ldr	r3, [pc, #108]	@ (8003f5c <HAL_RCC_OscConfig+0x4ec>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d028      	beq.n	8003f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d121      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d11a      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d111      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f32:	085b      	lsrs	r3, r3, #1
 8003f34:	3b01      	subs	r3, #1
 8003f36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d107      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e000      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40023800 	.word	0x40023800

08003f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0cc      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f74:	4b68      	ldr	r3, [pc, #416]	@ (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d90c      	bls.n	8003f9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	4b65      	ldr	r3, [pc, #404]	@ (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b63      	ldr	r3, [pc, #396]	@ (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0b8      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d020      	beq.n	8003fea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fb4:	4b59      	ldr	r3, [pc, #356]	@ (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	4a58      	ldr	r2, [pc, #352]	@ (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fcc:	4b53      	ldr	r3, [pc, #332]	@ (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a52      	ldr	r2, [pc, #328]	@ (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd8:	4b50      	ldr	r3, [pc, #320]	@ (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	494d      	ldr	r1, [pc, #308]	@ (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d044      	beq.n	8004080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d107      	bne.n	800400e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffe:	4b47      	ldr	r3, [pc, #284]	@ (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d119      	bne.n	800403e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e07f      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d003      	beq.n	800401e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800401a:	2b03      	cmp	r3, #3
 800401c:	d107      	bne.n	800402e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401e:	4b3f      	ldr	r3, [pc, #252]	@ (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e06f      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402e:	4b3b      	ldr	r3, [pc, #236]	@ (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e067      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800403e:	4b37      	ldr	r3, [pc, #220]	@ (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f023 0203 	bic.w	r2, r3, #3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4934      	ldr	r1, [pc, #208]	@ (800411c <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	4313      	orrs	r3, r2
 800404e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004050:	f7fd ff16 	bl	8001e80 <HAL_GetTick>
 8004054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004056:	e00a      	b.n	800406e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004058:	f7fd ff12 	bl	8001e80 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004066:	4293      	cmp	r3, r2
 8004068:	d901      	bls.n	800406e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e04f      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	4b2b      	ldr	r3, [pc, #172]	@ (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 020c 	and.w	r2, r3, #12
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	429a      	cmp	r2, r3
 800407e:	d1eb      	bne.n	8004058 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004080:	4b25      	ldr	r3, [pc, #148]	@ (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d20c      	bcs.n	80040a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408e:	4b22      	ldr	r3, [pc, #136]	@ (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b20      	ldr	r3, [pc, #128]	@ (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e032      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b4:	4b19      	ldr	r3, [pc, #100]	@ (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4916      	ldr	r1, [pc, #88]	@ (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040d2:	4b12      	ldr	r3, [pc, #72]	@ (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	490e      	ldr	r1, [pc, #56]	@ (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040e6:	f000 f821 	bl	800412c <HAL_RCC_GetSysClockFreq>
 80040ea:	4602      	mov	r2, r0
 80040ec:	4b0b      	ldr	r3, [pc, #44]	@ (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	091b      	lsrs	r3, r3, #4
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	490a      	ldr	r1, [pc, #40]	@ (8004120 <HAL_RCC_ClockConfig+0x1c0>)
 80040f8:	5ccb      	ldrb	r3, [r1, r3]
 80040fa:	fa22 f303 	lsr.w	r3, r2, r3
 80040fe:	4a09      	ldr	r2, [pc, #36]	@ (8004124 <HAL_RCC_ClockConfig+0x1c4>)
 8004100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004102:	4b09      	ldr	r3, [pc, #36]	@ (8004128 <HAL_RCC_ClockConfig+0x1c8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fd fe76 	bl	8001df8 <HAL_InitTick>

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40023c00 	.word	0x40023c00
 800411c:	40023800 	.word	0x40023800
 8004120:	0800a800 	.word	0x0800a800
 8004124:	20000018 	.word	0x20000018
 8004128:	2000001c 	.word	0x2000001c

0800412c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800412c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004130:	b094      	sub	sp, #80	@ 0x50
 8004132:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	647b      	str	r3, [r7, #68]	@ 0x44
 8004138:	2300      	movs	r3, #0
 800413a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800413c:	2300      	movs	r3, #0
 800413e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004144:	4b79      	ldr	r3, [pc, #484]	@ (800432c <HAL_RCC_GetSysClockFreq+0x200>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 030c 	and.w	r3, r3, #12
 800414c:	2b08      	cmp	r3, #8
 800414e:	d00d      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x40>
 8004150:	2b08      	cmp	r3, #8
 8004152:	f200 80e1 	bhi.w	8004318 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <HAL_RCC_GetSysClockFreq+0x34>
 800415a:	2b04      	cmp	r3, #4
 800415c:	d003      	beq.n	8004166 <HAL_RCC_GetSysClockFreq+0x3a>
 800415e:	e0db      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004160:	4b73      	ldr	r3, [pc, #460]	@ (8004330 <HAL_RCC_GetSysClockFreq+0x204>)
 8004162:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004164:	e0db      	b.n	800431e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004166:	4b73      	ldr	r3, [pc, #460]	@ (8004334 <HAL_RCC_GetSysClockFreq+0x208>)
 8004168:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800416a:	e0d8      	b.n	800431e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800416c:	4b6f      	ldr	r3, [pc, #444]	@ (800432c <HAL_RCC_GetSysClockFreq+0x200>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004174:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004176:	4b6d      	ldr	r3, [pc, #436]	@ (800432c <HAL_RCC_GetSysClockFreq+0x200>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d063      	beq.n	800424a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004182:	4b6a      	ldr	r3, [pc, #424]	@ (800432c <HAL_RCC_GetSysClockFreq+0x200>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	099b      	lsrs	r3, r3, #6
 8004188:	2200      	movs	r2, #0
 800418a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800418c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800418e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004194:	633b      	str	r3, [r7, #48]	@ 0x30
 8004196:	2300      	movs	r3, #0
 8004198:	637b      	str	r3, [r7, #52]	@ 0x34
 800419a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800419e:	4622      	mov	r2, r4
 80041a0:	462b      	mov	r3, r5
 80041a2:	f04f 0000 	mov.w	r0, #0
 80041a6:	f04f 0100 	mov.w	r1, #0
 80041aa:	0159      	lsls	r1, r3, #5
 80041ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041b0:	0150      	lsls	r0, r2, #5
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4621      	mov	r1, r4
 80041b8:	1a51      	subs	r1, r2, r1
 80041ba:	6139      	str	r1, [r7, #16]
 80041bc:	4629      	mov	r1, r5
 80041be:	eb63 0301 	sbc.w	r3, r3, r1
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041d0:	4659      	mov	r1, fp
 80041d2:	018b      	lsls	r3, r1, #6
 80041d4:	4651      	mov	r1, sl
 80041d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041da:	4651      	mov	r1, sl
 80041dc:	018a      	lsls	r2, r1, #6
 80041de:	4651      	mov	r1, sl
 80041e0:	ebb2 0801 	subs.w	r8, r2, r1
 80041e4:	4659      	mov	r1, fp
 80041e6:	eb63 0901 	sbc.w	r9, r3, r1
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041fe:	4690      	mov	r8, r2
 8004200:	4699      	mov	r9, r3
 8004202:	4623      	mov	r3, r4
 8004204:	eb18 0303 	adds.w	r3, r8, r3
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	462b      	mov	r3, r5
 800420c:	eb49 0303 	adc.w	r3, r9, r3
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800421e:	4629      	mov	r1, r5
 8004220:	024b      	lsls	r3, r1, #9
 8004222:	4621      	mov	r1, r4
 8004224:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004228:	4621      	mov	r1, r4
 800422a:	024a      	lsls	r2, r1, #9
 800422c:	4610      	mov	r0, r2
 800422e:	4619      	mov	r1, r3
 8004230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004232:	2200      	movs	r2, #0
 8004234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004236:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004238:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800423c:	f7fc fd24 	bl	8000c88 <__aeabi_uldivmod>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4613      	mov	r3, r2
 8004246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004248:	e058      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800424a:	4b38      	ldr	r3, [pc, #224]	@ (800432c <HAL_RCC_GetSysClockFreq+0x200>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	099b      	lsrs	r3, r3, #6
 8004250:	2200      	movs	r2, #0
 8004252:	4618      	mov	r0, r3
 8004254:	4611      	mov	r1, r2
 8004256:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800425a:	623b      	str	r3, [r7, #32]
 800425c:	2300      	movs	r3, #0
 800425e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004260:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004264:	4642      	mov	r2, r8
 8004266:	464b      	mov	r3, r9
 8004268:	f04f 0000 	mov.w	r0, #0
 800426c:	f04f 0100 	mov.w	r1, #0
 8004270:	0159      	lsls	r1, r3, #5
 8004272:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004276:	0150      	lsls	r0, r2, #5
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4641      	mov	r1, r8
 800427e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004282:	4649      	mov	r1, r9
 8004284:	eb63 0b01 	sbc.w	fp, r3, r1
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004294:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004298:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800429c:	ebb2 040a 	subs.w	r4, r2, sl
 80042a0:	eb63 050b 	sbc.w	r5, r3, fp
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	00eb      	lsls	r3, r5, #3
 80042ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042b2:	00e2      	lsls	r2, r4, #3
 80042b4:	4614      	mov	r4, r2
 80042b6:	461d      	mov	r5, r3
 80042b8:	4643      	mov	r3, r8
 80042ba:	18e3      	adds	r3, r4, r3
 80042bc:	603b      	str	r3, [r7, #0]
 80042be:	464b      	mov	r3, r9
 80042c0:	eb45 0303 	adc.w	r3, r5, r3
 80042c4:	607b      	str	r3, [r7, #4]
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042d2:	4629      	mov	r1, r5
 80042d4:	028b      	lsls	r3, r1, #10
 80042d6:	4621      	mov	r1, r4
 80042d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042dc:	4621      	mov	r1, r4
 80042de:	028a      	lsls	r2, r1, #10
 80042e0:	4610      	mov	r0, r2
 80042e2:	4619      	mov	r1, r3
 80042e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042e6:	2200      	movs	r2, #0
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	61fa      	str	r2, [r7, #28]
 80042ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042f0:	f7fc fcca 	bl	8000c88 <__aeabi_uldivmod>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4613      	mov	r3, r2
 80042fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042fc:	4b0b      	ldr	r3, [pc, #44]	@ (800432c <HAL_RCC_GetSysClockFreq+0x200>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	0c1b      	lsrs	r3, r3, #16
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	3301      	adds	r3, #1
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800430c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800430e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004310:	fbb2 f3f3 	udiv	r3, r2, r3
 8004314:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004316:	e002      	b.n	800431e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004318:	4b05      	ldr	r3, [pc, #20]	@ (8004330 <HAL_RCC_GetSysClockFreq+0x204>)
 800431a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800431c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800431e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004320:	4618      	mov	r0, r3
 8004322:	3750      	adds	r7, #80	@ 0x50
 8004324:	46bd      	mov	sp, r7
 8004326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800432a:	bf00      	nop
 800432c:	40023800 	.word	0x40023800
 8004330:	00f42400 	.word	0x00f42400
 8004334:	007a1200 	.word	0x007a1200

08004338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800433c:	4b03      	ldr	r3, [pc, #12]	@ (800434c <HAL_RCC_GetHCLKFreq+0x14>)
 800433e:	681b      	ldr	r3, [r3, #0]
}
 8004340:	4618      	mov	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	20000018 	.word	0x20000018

08004350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004354:	f7ff fff0 	bl	8004338 <HAL_RCC_GetHCLKFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	4b05      	ldr	r3, [pc, #20]	@ (8004370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	0a9b      	lsrs	r3, r3, #10
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	4903      	ldr	r1, [pc, #12]	@ (8004374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004366:	5ccb      	ldrb	r3, [r1, r3]
 8004368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800436c:	4618      	mov	r0, r3
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40023800 	.word	0x40023800
 8004374:	0800a810 	.word	0x0800a810

08004378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800437c:	f7ff ffdc 	bl	8004338 <HAL_RCC_GetHCLKFreq>
 8004380:	4602      	mov	r2, r0
 8004382:	4b05      	ldr	r3, [pc, #20]	@ (8004398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	0b5b      	lsrs	r3, r3, #13
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	4903      	ldr	r1, [pc, #12]	@ (800439c <HAL_RCC_GetPCLK2Freq+0x24>)
 800438e:	5ccb      	ldrb	r3, [r1, r3]
 8004390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004394:	4618      	mov	r0, r3
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40023800 	.word	0x40023800
 800439c:	0800a810 	.word	0x0800a810

080043a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d105      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d035      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043c8:	4b62      	ldr	r3, [pc, #392]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ce:	f7fd fd57 	bl	8001e80 <HAL_GetTick>
 80043d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043d4:	e008      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043d6:	f7fd fd53 	bl	8001e80 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e0b0      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043e8:	4b5b      	ldr	r3, [pc, #364]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1f0      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	019a      	lsls	r2, r3, #6
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	071b      	lsls	r3, r3, #28
 8004400:	4955      	ldr	r1, [pc, #340]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004408:	4b52      	ldr	r3, [pc, #328]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800440a:	2201      	movs	r2, #1
 800440c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800440e:	f7fd fd37 	bl	8001e80 <HAL_GetTick>
 8004412:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004414:	e008      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004416:	f7fd fd33 	bl	8001e80 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e090      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004428:	4b4b      	ldr	r3, [pc, #300]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0f0      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 8083 	beq.w	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	4b44      	ldr	r3, [pc, #272]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	4a43      	ldr	r2, [pc, #268]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800444c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004450:	6413      	str	r3, [r2, #64]	@ 0x40
 8004452:	4b41      	ldr	r3, [pc, #260]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800445e:	4b3f      	ldr	r3, [pc, #252]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a3e      	ldr	r2, [pc, #248]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004468:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800446a:	f7fd fd09 	bl	8001e80 <HAL_GetTick>
 800446e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004470:	e008      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004472:	f7fd fd05 	bl	8001e80 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e062      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004484:	4b35      	ldr	r3, [pc, #212]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004490:	4b31      	ldr	r3, [pc, #196]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004494:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004498:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d02f      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d028      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044b8:	4b29      	ldr	r3, [pc, #164]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044be:	4b28      	ldr	r3, [pc, #160]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044c4:	4a24      	ldr	r2, [pc, #144]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044ca:	4b23      	ldr	r3, [pc, #140]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d114      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044d6:	f7fd fcd3 	bl	8001e80 <HAL_GetTick>
 80044da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044dc:	e00a      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044de:	f7fd fccf 	bl	8001e80 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e02a      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f4:	4b18      	ldr	r3, [pc, #96]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0ee      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004508:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800450c:	d10d      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800450e:	4b12      	ldr	r3, [pc, #72]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800451e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004522:	490d      	ldr	r1, [pc, #52]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004524:	4313      	orrs	r3, r2
 8004526:	608b      	str	r3, [r1, #8]
 8004528:	e005      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800452a:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	4a0a      	ldr	r2, [pc, #40]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004530:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004534:	6093      	str	r3, [r2, #8]
 8004536:	4b08      	ldr	r3, [pc, #32]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004538:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004542:	4905      	ldr	r1, [pc, #20]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004544:	4313      	orrs	r3, r2
 8004546:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	42470068 	.word	0x42470068
 8004558:	40023800 	.word	0x40023800
 800455c:	40007000 	.word	0x40007000
 8004560:	42470e40 	.word	0x42470e40

08004564 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d13f      	bne.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004582:	4b24      	ldr	r3, [pc, #144]	@ (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d006      	beq.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004598:	d12f      	bne.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800459a:	4b1f      	ldr	r3, [pc, #124]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800459c:	617b      	str	r3, [r7, #20]
          break;
 800459e:	e02f      	b.n	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045ac:	d108      	bne.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045ae:	4b19      	ldr	r3, [pc, #100]	@ (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045b6:	4a19      	ldr	r2, [pc, #100]	@ (800461c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	e007      	b.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045c0:	4b14      	ldr	r3, [pc, #80]	@ (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045c8:	4a15      	ldr	r2, [pc, #84]	@ (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80045ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ce:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80045d0:	4b10      	ldr	r3, [pc, #64]	@ (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045d6:	099b      	lsrs	r3, r3, #6
 80045d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	fb02 f303 	mul.w	r3, r2, r3
 80045e2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80045e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045ea:	0f1b      	lsrs	r3, r3, #28
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f6:	617b      	str	r3, [r7, #20]
          break;
 80045f8:	e002      	b.n	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
          break;
 80045fe:	bf00      	nop
        }
      }
      break;
 8004600:	e000      	b.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004602:	bf00      	nop
    }
  }
  return frequency;
 8004604:	697b      	ldr	r3, [r7, #20]
}
 8004606:	4618      	mov	r0, r3
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800
 8004618:	00bb8000 	.word	0x00bb8000
 800461c:	007a1200 	.word	0x007a1200
 8004620:	00f42400 	.word	0x00f42400

08004624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e042      	b.n	80046bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fd fa2e 	bl	8001aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2224      	movs	r2, #36	@ 0x24
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004666:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fdbd 	bl	80051e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800467c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695a      	ldr	r2, [r3, #20]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800468c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800469c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08a      	sub	sp, #40	@ 0x28
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	4613      	mov	r3, r2
 80046d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b20      	cmp	r3, #32
 80046e2:	d175      	bne.n	80047d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_UART_Transmit+0x2c>
 80046ea:	88fb      	ldrh	r3, [r7, #6]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e06e      	b.n	80047d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2221      	movs	r2, #33	@ 0x21
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004702:	f7fd fbbd 	bl	8001e80 <HAL_GetTick>
 8004706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	88fa      	ldrh	r2, [r7, #6]
 800470c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	88fa      	ldrh	r2, [r7, #6]
 8004712:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800471c:	d108      	bne.n	8004730 <HAL_UART_Transmit+0x6c>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d104      	bne.n	8004730 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	e003      	b.n	8004738 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004734:	2300      	movs	r3, #0
 8004736:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004738:	e02e      	b.n	8004798 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2200      	movs	r2, #0
 8004742:	2180      	movs	r1, #128	@ 0x80
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 fb1f 	bl	8004d88 <UART_WaitOnFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e03a      	b.n	80047d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10b      	bne.n	800477a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004770:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	3302      	adds	r3, #2
 8004776:	61bb      	str	r3, [r7, #24]
 8004778:	e007      	b.n	800478a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	781a      	ldrb	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	3301      	adds	r3, #1
 8004788:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1cb      	bne.n	800473a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2200      	movs	r2, #0
 80047aa:	2140      	movs	r1, #64	@ 0x40
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 faeb 	bl	8004d88 <UART_WaitOnFlagUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e006      	b.n	80047d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	e000      	b.n	80047d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80047d0:	2302      	movs	r3, #2
  }
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3720      	adds	r7, #32
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	4613      	mov	r3, r2
 80047e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d112      	bne.n	800481a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <HAL_UART_Receive_IT+0x26>
 80047fa:	88fb      	ldrh	r3, [r7, #6]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e00b      	b.n	800481c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	461a      	mov	r2, r3
 800480e:	68b9      	ldr	r1, [r7, #8]
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 fb12 	bl	8004e3a <UART_Start_Receive_IT>
 8004816:	4603      	mov	r3, r0
 8004818:	e000      	b.n	800481c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800481a:	2302      	movs	r3, #2
  }
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b0ba      	sub	sp, #232	@ 0xe8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800484a:	2300      	movs	r3, #0
 800484c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004850:	2300      	movs	r3, #0
 8004852:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10f      	bne.n	800488a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <HAL_UART_IRQHandler+0x66>
 8004876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800487a:	f003 0320 	and.w	r3, r3, #32
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fbf2 	bl	800506c <UART_Receive_IT>
      return;
 8004888:	e25b      	b.n	8004d42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800488a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 80de 	beq.w	8004a50 <HAL_UART_IRQHandler+0x22c>
 8004894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d106      	bne.n	80048ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 80d1 	beq.w	8004a50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00b      	beq.n	80048d2 <HAL_UART_IRQHandler+0xae>
 80048ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ca:	f043 0201 	orr.w	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <HAL_UART_IRQHandler+0xd2>
 80048de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ee:	f043 0202 	orr.w	r2, r3, #2
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00b      	beq.n	800491a <HAL_UART_IRQHandler+0xf6>
 8004902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004912:	f043 0204 	orr.w	r2, r3, #4
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800491a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d011      	beq.n	800494a <HAL_UART_IRQHandler+0x126>
 8004926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b00      	cmp	r3, #0
 8004930:	d105      	bne.n	800493e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d005      	beq.n	800494a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004942:	f043 0208 	orr.w	r2, r3, #8
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 81f2 	beq.w	8004d38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_UART_IRQHandler+0x14e>
 8004960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004964:	f003 0320 	and.w	r3, r3, #32
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fb7d 	bl	800506c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800497c:	2b40      	cmp	r3, #64	@ 0x40
 800497e:	bf0c      	ite	eq
 8004980:	2301      	moveq	r3, #1
 8004982:	2300      	movne	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d103      	bne.n	800499e <HAL_UART_IRQHandler+0x17a>
 8004996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d04f      	beq.n	8004a3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fa85 	bl	8004eae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ae:	2b40      	cmp	r3, #64	@ 0x40
 80049b0:	d141      	bne.n	8004a36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3314      	adds	r3, #20
 80049b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3314      	adds	r3, #20
 80049da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1d9      	bne.n	80049b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d013      	beq.n	8004a2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a0a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c04 <HAL_UART_IRQHandler+0x3e0>)
 8004a0c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fd fcec 	bl	80023f0 <HAL_DMA_Abort_IT>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d016      	beq.n	8004a4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a28:	4610      	mov	r0, r2
 8004a2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a2c:	e00e      	b.n	8004a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f994 	bl	8004d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a34:	e00a      	b.n	8004a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f990 	bl	8004d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a3c:	e006      	b.n	8004a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f98c 	bl	8004d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a4a:	e175      	b.n	8004d38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4c:	bf00      	nop
    return;
 8004a4e:	e173      	b.n	8004d38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	f040 814f 	bne.w	8004cf8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 8148 	beq.w	8004cf8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a6c:	f003 0310 	and.w	r3, r3, #16
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 8141 	beq.w	8004cf8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a76:	2300      	movs	r3, #0
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a96:	2b40      	cmp	r3, #64	@ 0x40
 8004a98:	f040 80b6 	bne.w	8004c08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004aa8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8145 	beq.w	8004d3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aba:	429a      	cmp	r2, r3
 8004abc:	f080 813e 	bcs.w	8004d3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ac6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ad2:	f000 8088 	beq.w	8004be6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	330c      	adds	r3, #12
 8004adc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004af4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004b02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1d9      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3314      	adds	r3, #20
 8004b28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b2c:	e853 3f00 	ldrex	r3, [r3]
 8004b30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b34:	f023 0301 	bic.w	r3, r3, #1
 8004b38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3314      	adds	r3, #20
 8004b42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e1      	bne.n	8004b22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3314      	adds	r3, #20
 8004b64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3314      	adds	r3, #20
 8004b7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b8a:	e841 2300 	strex	r3, r2, [r1]
 8004b8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1e3      	bne.n	8004b5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bb6:	f023 0310 	bic.w	r3, r3, #16
 8004bba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004bc8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004bca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e3      	bne.n	8004ba4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fd fb95 	bl	8002310 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f8b7 	bl	8004d70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c02:	e09b      	b.n	8004d3c <HAL_UART_IRQHandler+0x518>
 8004c04:	08004f75 	.word	0x08004f75
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 808e 	beq.w	8004d40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8089 	beq.w	8004d40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	330c      	adds	r3, #12
 8004c34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c38:	e853 3f00 	ldrex	r3, [r3]
 8004c3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c52:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e3      	bne.n	8004c2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3314      	adds	r3, #20
 8004c6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	623b      	str	r3, [r7, #32]
   return(result);
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	f023 0301 	bic.w	r3, r3, #1
 8004c7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3314      	adds	r3, #20
 8004c86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1e3      	bne.n	8004c66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	330c      	adds	r3, #12
 8004cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0310 	bic.w	r3, r3, #16
 8004cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	330c      	adds	r3, #12
 8004ccc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004cd0:	61fa      	str	r2, [r7, #28]
 8004cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	69b9      	ldr	r1, [r7, #24]
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e3      	bne.n	8004cac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cee:	4619      	mov	r1, r3
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f83d 	bl	8004d70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cf6:	e023      	b.n	8004d40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d009      	beq.n	8004d18 <HAL_UART_IRQHandler+0x4f4>
 8004d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f943 	bl	8004f9c <UART_Transmit_IT>
    return;
 8004d16:	e014      	b.n	8004d42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00e      	beq.n	8004d42 <HAL_UART_IRQHandler+0x51e>
 8004d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f983 	bl	800503c <UART_EndTransmit_IT>
    return;
 8004d36:	e004      	b.n	8004d42 <HAL_UART_IRQHandler+0x51e>
    return;
 8004d38:	bf00      	nop
 8004d3a:	e002      	b.n	8004d42 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d3c:	bf00      	nop
 8004d3e:	e000      	b.n	8004d42 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d40:	bf00      	nop
  }
}
 8004d42:	37e8      	adds	r7, #232	@ 0xe8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d98:	e03b      	b.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da0:	d037      	beq.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da2:	f7fd f86d 	bl	8001e80 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	6a3a      	ldr	r2, [r7, #32]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d302      	bcc.n	8004db8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e03a      	b.n	8004e32 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d023      	beq.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b80      	cmp	r3, #128	@ 0x80
 8004dce:	d020      	beq.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b40      	cmp	r3, #64	@ 0x40
 8004dd4:	d01d      	beq.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d116      	bne.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 f857 	bl	8004eae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2208      	movs	r2, #8
 8004e04:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e00f      	b.n	8004e32 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	bf0c      	ite	eq
 8004e22:	2301      	moveq	r3, #1
 8004e24:	2300      	movne	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	461a      	mov	r2, r3
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d0b4      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b085      	sub	sp, #20
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	4613      	mov	r3, r2
 8004e46:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	88fa      	ldrh	r2, [r7, #6]
 8004e52:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	88fa      	ldrh	r2, [r7, #6]
 8004e58:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2222      	movs	r2, #34	@ 0x22
 8004e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d007      	beq.n	8004e80 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e7e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0220 	orr.w	r2, r2, #32
 8004e9e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b095      	sub	sp, #84	@ 0x54
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	330c      	adds	r3, #12
 8004ebc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	330c      	adds	r3, #12
 8004ed4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ed6:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004edc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e5      	bne.n	8004eb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3314      	adds	r3, #20
 8004ef0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	f023 0301 	bic.w	r3, r3, #1
 8004f00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3314      	adds	r3, #20
 8004f08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e5      	bne.n	8004eea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d119      	bne.n	8004f5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	330c      	adds	r3, #12
 8004f2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	e853 3f00 	ldrex	r3, [r3]
 8004f34:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f023 0310 	bic.w	r3, r3, #16
 8004f3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	330c      	adds	r3, #12
 8004f44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f46:	61ba      	str	r2, [r7, #24]
 8004f48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	6979      	ldr	r1, [r7, #20]
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	e841 2300 	strex	r3, r2, [r1]
 8004f52:	613b      	str	r3, [r7, #16]
   return(result);
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1e5      	bne.n	8004f26 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f68:	bf00      	nop
 8004f6a:	3754      	adds	r7, #84	@ 0x54
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7ff fee4 	bl	8004d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b21      	cmp	r3, #33	@ 0x21
 8004fae:	d13e      	bne.n	800502e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fb8:	d114      	bne.n	8004fe4 <UART_Transmit_IT+0x48>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d110      	bne.n	8004fe4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fd6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	1c9a      	adds	r2, r3, #2
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	621a      	str	r2, [r3, #32]
 8004fe2:	e008      	b.n	8004ff6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	1c59      	adds	r1, r3, #1
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6211      	str	r1, [r2, #32]
 8004fee:	781a      	ldrb	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	4619      	mov	r1, r3
 8005004:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10f      	bne.n	800502a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005018:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005028:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	e000      	b.n	8005030 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800502e:	2302      	movs	r3, #2
  }
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005052:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff fe73 	bl	8004d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08c      	sub	sp, #48	@ 0x30
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b22      	cmp	r3, #34	@ 0x22
 800507e:	f040 80ae 	bne.w	80051de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800508a:	d117      	bne.n	80050bc <UART_Receive_IT+0x50>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d113      	bne.n	80050bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005094:	2300      	movs	r3, #0
 8005096:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b4:	1c9a      	adds	r2, r3, #2
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80050ba:	e026      	b.n	800510a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ce:	d007      	beq.n	80050e0 <UART_Receive_IT+0x74>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <UART_Receive_IT+0x82>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d106      	bne.n	80050ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ea:	701a      	strb	r2, [r3, #0]
 80050ec:	e008      	b.n	8005100 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29b      	uxth	r3, r3
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	4619      	mov	r1, r3
 8005118:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800511a:	2b00      	cmp	r3, #0
 800511c:	d15d      	bne.n	80051da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0220 	bic.w	r2, r2, #32
 800512c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800513c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695a      	ldr	r2, [r3, #20]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005160:	2b01      	cmp	r3, #1
 8005162:	d135      	bne.n	80051d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	330c      	adds	r3, #12
 8005170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	613b      	str	r3, [r7, #16]
   return(result);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f023 0310 	bic.w	r3, r3, #16
 8005180:	627b      	str	r3, [r7, #36]	@ 0x24
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	330c      	adds	r3, #12
 8005188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800518a:	623a      	str	r2, [r7, #32]
 800518c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518e:	69f9      	ldr	r1, [r7, #28]
 8005190:	6a3a      	ldr	r2, [r7, #32]
 8005192:	e841 2300 	strex	r3, r2, [r1]
 8005196:	61bb      	str	r3, [r7, #24]
   return(result);
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1e5      	bne.n	800516a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	2b10      	cmp	r3, #16
 80051aa:	d10a      	bne.n	80051c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051ac:	2300      	movs	r3, #0
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051c6:	4619      	mov	r1, r3
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff fdd1 	bl	8004d70 <HAL_UARTEx_RxEventCallback>
 80051ce:	e002      	b.n	80051d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7fc f987 	bl	80014e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e002      	b.n	80051e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	e000      	b.n	80051e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80051de:	2302      	movs	r3, #2
  }
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3730      	adds	r7, #48	@ 0x30
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051ec:	b0c0      	sub	sp, #256	@ 0x100
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005204:	68d9      	ldr	r1, [r3, #12]
 8005206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	ea40 0301 	orr.w	r3, r0, r1
 8005210:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	431a      	orrs	r2, r3
 8005220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	431a      	orrs	r2, r3
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	4313      	orrs	r3, r2
 8005230:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005240:	f021 010c 	bic.w	r1, r1, #12
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800524e:	430b      	orrs	r3, r1
 8005250:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800525e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005262:	6999      	ldr	r1, [r3, #24]
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	ea40 0301 	orr.w	r3, r0, r1
 800526e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b8f      	ldr	r3, [pc, #572]	@ (80054b4 <UART_SetConfig+0x2cc>)
 8005278:	429a      	cmp	r2, r3
 800527a:	d005      	beq.n	8005288 <UART_SetConfig+0xa0>
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b8d      	ldr	r3, [pc, #564]	@ (80054b8 <UART_SetConfig+0x2d0>)
 8005284:	429a      	cmp	r2, r3
 8005286:	d104      	bne.n	8005292 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005288:	f7ff f876 	bl	8004378 <HAL_RCC_GetPCLK2Freq>
 800528c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005290:	e003      	b.n	800529a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005292:	f7ff f85d 	bl	8004350 <HAL_RCC_GetPCLK1Freq>
 8005296:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800529a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052a4:	f040 810c 	bne.w	80054c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ac:	2200      	movs	r2, #0
 80052ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80052b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80052ba:	4622      	mov	r2, r4
 80052bc:	462b      	mov	r3, r5
 80052be:	1891      	adds	r1, r2, r2
 80052c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80052c2:	415b      	adcs	r3, r3
 80052c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80052ca:	4621      	mov	r1, r4
 80052cc:	eb12 0801 	adds.w	r8, r2, r1
 80052d0:	4629      	mov	r1, r5
 80052d2:	eb43 0901 	adc.w	r9, r3, r1
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052ea:	4690      	mov	r8, r2
 80052ec:	4699      	mov	r9, r3
 80052ee:	4623      	mov	r3, r4
 80052f0:	eb18 0303 	adds.w	r3, r8, r3
 80052f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80052f8:	462b      	mov	r3, r5
 80052fa:	eb49 0303 	adc.w	r3, r9, r3
 80052fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800530e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005312:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005316:	460b      	mov	r3, r1
 8005318:	18db      	adds	r3, r3, r3
 800531a:	653b      	str	r3, [r7, #80]	@ 0x50
 800531c:	4613      	mov	r3, r2
 800531e:	eb42 0303 	adc.w	r3, r2, r3
 8005322:	657b      	str	r3, [r7, #84]	@ 0x54
 8005324:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005328:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800532c:	f7fb fcac 	bl	8000c88 <__aeabi_uldivmod>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4b61      	ldr	r3, [pc, #388]	@ (80054bc <UART_SetConfig+0x2d4>)
 8005336:	fba3 2302 	umull	r2, r3, r3, r2
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	011c      	lsls	r4, r3, #4
 800533e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005342:	2200      	movs	r2, #0
 8005344:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005348:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800534c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005350:	4642      	mov	r2, r8
 8005352:	464b      	mov	r3, r9
 8005354:	1891      	adds	r1, r2, r2
 8005356:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005358:	415b      	adcs	r3, r3
 800535a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800535c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005360:	4641      	mov	r1, r8
 8005362:	eb12 0a01 	adds.w	sl, r2, r1
 8005366:	4649      	mov	r1, r9
 8005368:	eb43 0b01 	adc.w	fp, r3, r1
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005378:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800537c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005380:	4692      	mov	sl, r2
 8005382:	469b      	mov	fp, r3
 8005384:	4643      	mov	r3, r8
 8005386:	eb1a 0303 	adds.w	r3, sl, r3
 800538a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800538e:	464b      	mov	r3, r9
 8005390:	eb4b 0303 	adc.w	r3, fp, r3
 8005394:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80053a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053ac:	460b      	mov	r3, r1
 80053ae:	18db      	adds	r3, r3, r3
 80053b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80053b2:	4613      	mov	r3, r2
 80053b4:	eb42 0303 	adc.w	r3, r2, r3
 80053b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80053ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80053be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80053c2:	f7fb fc61 	bl	8000c88 <__aeabi_uldivmod>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4611      	mov	r1, r2
 80053cc:	4b3b      	ldr	r3, [pc, #236]	@ (80054bc <UART_SetConfig+0x2d4>)
 80053ce:	fba3 2301 	umull	r2, r3, r3, r1
 80053d2:	095b      	lsrs	r3, r3, #5
 80053d4:	2264      	movs	r2, #100	@ 0x64
 80053d6:	fb02 f303 	mul.w	r3, r2, r3
 80053da:	1acb      	subs	r3, r1, r3
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80053e2:	4b36      	ldr	r3, [pc, #216]	@ (80054bc <UART_SetConfig+0x2d4>)
 80053e4:	fba3 2302 	umull	r2, r3, r3, r2
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80053f0:	441c      	add	r4, r3
 80053f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053f6:	2200      	movs	r2, #0
 80053f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005400:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005404:	4642      	mov	r2, r8
 8005406:	464b      	mov	r3, r9
 8005408:	1891      	adds	r1, r2, r2
 800540a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800540c:	415b      	adcs	r3, r3
 800540e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005410:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005414:	4641      	mov	r1, r8
 8005416:	1851      	adds	r1, r2, r1
 8005418:	6339      	str	r1, [r7, #48]	@ 0x30
 800541a:	4649      	mov	r1, r9
 800541c:	414b      	adcs	r3, r1
 800541e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800542c:	4659      	mov	r1, fp
 800542e:	00cb      	lsls	r3, r1, #3
 8005430:	4651      	mov	r1, sl
 8005432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005436:	4651      	mov	r1, sl
 8005438:	00ca      	lsls	r2, r1, #3
 800543a:	4610      	mov	r0, r2
 800543c:	4619      	mov	r1, r3
 800543e:	4603      	mov	r3, r0
 8005440:	4642      	mov	r2, r8
 8005442:	189b      	adds	r3, r3, r2
 8005444:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005448:	464b      	mov	r3, r9
 800544a:	460a      	mov	r2, r1
 800544c:	eb42 0303 	adc.w	r3, r2, r3
 8005450:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005460:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005464:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005468:	460b      	mov	r3, r1
 800546a:	18db      	adds	r3, r3, r3
 800546c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800546e:	4613      	mov	r3, r2
 8005470:	eb42 0303 	adc.w	r3, r2, r3
 8005474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005476:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800547a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800547e:	f7fb fc03 	bl	8000c88 <__aeabi_uldivmod>
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	4b0d      	ldr	r3, [pc, #52]	@ (80054bc <UART_SetConfig+0x2d4>)
 8005488:	fba3 1302 	umull	r1, r3, r3, r2
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	2164      	movs	r1, #100	@ 0x64
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	3332      	adds	r3, #50	@ 0x32
 800549a:	4a08      	ldr	r2, [pc, #32]	@ (80054bc <UART_SetConfig+0x2d4>)
 800549c:	fba2 2303 	umull	r2, r3, r2, r3
 80054a0:	095b      	lsrs	r3, r3, #5
 80054a2:	f003 0207 	and.w	r2, r3, #7
 80054a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4422      	add	r2, r4
 80054ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054b0:	e106      	b.n	80056c0 <UART_SetConfig+0x4d8>
 80054b2:	bf00      	nop
 80054b4:	40011000 	.word	0x40011000
 80054b8:	40011400 	.word	0x40011400
 80054bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054c4:	2200      	movs	r2, #0
 80054c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80054ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80054d2:	4642      	mov	r2, r8
 80054d4:	464b      	mov	r3, r9
 80054d6:	1891      	adds	r1, r2, r2
 80054d8:	6239      	str	r1, [r7, #32]
 80054da:	415b      	adcs	r3, r3
 80054dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80054de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054e2:	4641      	mov	r1, r8
 80054e4:	1854      	adds	r4, r2, r1
 80054e6:	4649      	mov	r1, r9
 80054e8:	eb43 0501 	adc.w	r5, r3, r1
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	f04f 0300 	mov.w	r3, #0
 80054f4:	00eb      	lsls	r3, r5, #3
 80054f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054fa:	00e2      	lsls	r2, r4, #3
 80054fc:	4614      	mov	r4, r2
 80054fe:	461d      	mov	r5, r3
 8005500:	4643      	mov	r3, r8
 8005502:	18e3      	adds	r3, r4, r3
 8005504:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005508:	464b      	mov	r3, r9
 800550a:	eb45 0303 	adc.w	r3, r5, r3
 800550e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800551e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800552e:	4629      	mov	r1, r5
 8005530:	008b      	lsls	r3, r1, #2
 8005532:	4621      	mov	r1, r4
 8005534:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005538:	4621      	mov	r1, r4
 800553a:	008a      	lsls	r2, r1, #2
 800553c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005540:	f7fb fba2 	bl	8000c88 <__aeabi_uldivmod>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4b60      	ldr	r3, [pc, #384]	@ (80056cc <UART_SetConfig+0x4e4>)
 800554a:	fba3 2302 	umull	r2, r3, r3, r2
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	011c      	lsls	r4, r3, #4
 8005552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005556:	2200      	movs	r2, #0
 8005558:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800555c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005560:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005564:	4642      	mov	r2, r8
 8005566:	464b      	mov	r3, r9
 8005568:	1891      	adds	r1, r2, r2
 800556a:	61b9      	str	r1, [r7, #24]
 800556c:	415b      	adcs	r3, r3
 800556e:	61fb      	str	r3, [r7, #28]
 8005570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005574:	4641      	mov	r1, r8
 8005576:	1851      	adds	r1, r2, r1
 8005578:	6139      	str	r1, [r7, #16]
 800557a:	4649      	mov	r1, r9
 800557c:	414b      	adcs	r3, r1
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800558c:	4659      	mov	r1, fp
 800558e:	00cb      	lsls	r3, r1, #3
 8005590:	4651      	mov	r1, sl
 8005592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005596:	4651      	mov	r1, sl
 8005598:	00ca      	lsls	r2, r1, #3
 800559a:	4610      	mov	r0, r2
 800559c:	4619      	mov	r1, r3
 800559e:	4603      	mov	r3, r0
 80055a0:	4642      	mov	r2, r8
 80055a2:	189b      	adds	r3, r3, r2
 80055a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055a8:	464b      	mov	r3, r9
 80055aa:	460a      	mov	r2, r1
 80055ac:	eb42 0303 	adc.w	r3, r2, r3
 80055b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80055cc:	4649      	mov	r1, r9
 80055ce:	008b      	lsls	r3, r1, #2
 80055d0:	4641      	mov	r1, r8
 80055d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055d6:	4641      	mov	r1, r8
 80055d8:	008a      	lsls	r2, r1, #2
 80055da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80055de:	f7fb fb53 	bl	8000c88 <__aeabi_uldivmod>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4611      	mov	r1, r2
 80055e8:	4b38      	ldr	r3, [pc, #224]	@ (80056cc <UART_SetConfig+0x4e4>)
 80055ea:	fba3 2301 	umull	r2, r3, r3, r1
 80055ee:	095b      	lsrs	r3, r3, #5
 80055f0:	2264      	movs	r2, #100	@ 0x64
 80055f2:	fb02 f303 	mul.w	r3, r2, r3
 80055f6:	1acb      	subs	r3, r1, r3
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	3332      	adds	r3, #50	@ 0x32
 80055fc:	4a33      	ldr	r2, [pc, #204]	@ (80056cc <UART_SetConfig+0x4e4>)
 80055fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005608:	441c      	add	r4, r3
 800560a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800560e:	2200      	movs	r2, #0
 8005610:	673b      	str	r3, [r7, #112]	@ 0x70
 8005612:	677a      	str	r2, [r7, #116]	@ 0x74
 8005614:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005618:	4642      	mov	r2, r8
 800561a:	464b      	mov	r3, r9
 800561c:	1891      	adds	r1, r2, r2
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	415b      	adcs	r3, r3
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005628:	4641      	mov	r1, r8
 800562a:	1851      	adds	r1, r2, r1
 800562c:	6039      	str	r1, [r7, #0]
 800562e:	4649      	mov	r1, r9
 8005630:	414b      	adcs	r3, r1
 8005632:	607b      	str	r3, [r7, #4]
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	f04f 0300 	mov.w	r3, #0
 800563c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005640:	4659      	mov	r1, fp
 8005642:	00cb      	lsls	r3, r1, #3
 8005644:	4651      	mov	r1, sl
 8005646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800564a:	4651      	mov	r1, sl
 800564c:	00ca      	lsls	r2, r1, #3
 800564e:	4610      	mov	r0, r2
 8005650:	4619      	mov	r1, r3
 8005652:	4603      	mov	r3, r0
 8005654:	4642      	mov	r2, r8
 8005656:	189b      	adds	r3, r3, r2
 8005658:	66bb      	str	r3, [r7, #104]	@ 0x68
 800565a:	464b      	mov	r3, r9
 800565c:	460a      	mov	r2, r1
 800565e:	eb42 0303 	adc.w	r3, r2, r3
 8005662:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	663b      	str	r3, [r7, #96]	@ 0x60
 800566e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	f04f 0300 	mov.w	r3, #0
 8005678:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800567c:	4649      	mov	r1, r9
 800567e:	008b      	lsls	r3, r1, #2
 8005680:	4641      	mov	r1, r8
 8005682:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005686:	4641      	mov	r1, r8
 8005688:	008a      	lsls	r2, r1, #2
 800568a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800568e:	f7fb fafb 	bl	8000c88 <__aeabi_uldivmod>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	4b0d      	ldr	r3, [pc, #52]	@ (80056cc <UART_SetConfig+0x4e4>)
 8005698:	fba3 1302 	umull	r1, r3, r3, r2
 800569c:	095b      	lsrs	r3, r3, #5
 800569e:	2164      	movs	r1, #100	@ 0x64
 80056a0:	fb01 f303 	mul.w	r3, r1, r3
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	3332      	adds	r3, #50	@ 0x32
 80056aa:	4a08      	ldr	r2, [pc, #32]	@ (80056cc <UART_SetConfig+0x4e4>)
 80056ac:	fba2 2303 	umull	r2, r3, r2, r3
 80056b0:	095b      	lsrs	r3, r3, #5
 80056b2:	f003 020f 	and.w	r2, r3, #15
 80056b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4422      	add	r2, r4
 80056be:	609a      	str	r2, [r3, #8]
}
 80056c0:	bf00      	nop
 80056c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80056c6:	46bd      	mov	sp, r7
 80056c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056cc:	51eb851f 	.word	0x51eb851f

080056d0 <__cvt>:
 80056d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056d4:	ec57 6b10 	vmov	r6, r7, d0
 80056d8:	2f00      	cmp	r7, #0
 80056da:	460c      	mov	r4, r1
 80056dc:	4619      	mov	r1, r3
 80056de:	463b      	mov	r3, r7
 80056e0:	bfbb      	ittet	lt
 80056e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80056e6:	461f      	movlt	r7, r3
 80056e8:	2300      	movge	r3, #0
 80056ea:	232d      	movlt	r3, #45	@ 0x2d
 80056ec:	700b      	strb	r3, [r1, #0]
 80056ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80056f4:	4691      	mov	r9, r2
 80056f6:	f023 0820 	bic.w	r8, r3, #32
 80056fa:	bfbc      	itt	lt
 80056fc:	4632      	movlt	r2, r6
 80056fe:	4616      	movlt	r6, r2
 8005700:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005704:	d005      	beq.n	8005712 <__cvt+0x42>
 8005706:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800570a:	d100      	bne.n	800570e <__cvt+0x3e>
 800570c:	3401      	adds	r4, #1
 800570e:	2102      	movs	r1, #2
 8005710:	e000      	b.n	8005714 <__cvt+0x44>
 8005712:	2103      	movs	r1, #3
 8005714:	ab03      	add	r3, sp, #12
 8005716:	9301      	str	r3, [sp, #4]
 8005718:	ab02      	add	r3, sp, #8
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	ec47 6b10 	vmov	d0, r6, r7
 8005720:	4653      	mov	r3, sl
 8005722:	4622      	mov	r2, r4
 8005724:	f001 f9b8 	bl	8006a98 <_dtoa_r>
 8005728:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800572c:	4605      	mov	r5, r0
 800572e:	d119      	bne.n	8005764 <__cvt+0x94>
 8005730:	f019 0f01 	tst.w	r9, #1
 8005734:	d00e      	beq.n	8005754 <__cvt+0x84>
 8005736:	eb00 0904 	add.w	r9, r0, r4
 800573a:	2200      	movs	r2, #0
 800573c:	2300      	movs	r3, #0
 800573e:	4630      	mov	r0, r6
 8005740:	4639      	mov	r1, r7
 8005742:	f7fb f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005746:	b108      	cbz	r0, 800574c <__cvt+0x7c>
 8005748:	f8cd 900c 	str.w	r9, [sp, #12]
 800574c:	2230      	movs	r2, #48	@ 0x30
 800574e:	9b03      	ldr	r3, [sp, #12]
 8005750:	454b      	cmp	r3, r9
 8005752:	d31e      	bcc.n	8005792 <__cvt+0xc2>
 8005754:	9b03      	ldr	r3, [sp, #12]
 8005756:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005758:	1b5b      	subs	r3, r3, r5
 800575a:	4628      	mov	r0, r5
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	b004      	add	sp, #16
 8005760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005764:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005768:	eb00 0904 	add.w	r9, r0, r4
 800576c:	d1e5      	bne.n	800573a <__cvt+0x6a>
 800576e:	7803      	ldrb	r3, [r0, #0]
 8005770:	2b30      	cmp	r3, #48	@ 0x30
 8005772:	d10a      	bne.n	800578a <__cvt+0xba>
 8005774:	2200      	movs	r2, #0
 8005776:	2300      	movs	r3, #0
 8005778:	4630      	mov	r0, r6
 800577a:	4639      	mov	r1, r7
 800577c:	f7fb f9a4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005780:	b918      	cbnz	r0, 800578a <__cvt+0xba>
 8005782:	f1c4 0401 	rsb	r4, r4, #1
 8005786:	f8ca 4000 	str.w	r4, [sl]
 800578a:	f8da 3000 	ldr.w	r3, [sl]
 800578e:	4499      	add	r9, r3
 8005790:	e7d3      	b.n	800573a <__cvt+0x6a>
 8005792:	1c59      	adds	r1, r3, #1
 8005794:	9103      	str	r1, [sp, #12]
 8005796:	701a      	strb	r2, [r3, #0]
 8005798:	e7d9      	b.n	800574e <__cvt+0x7e>

0800579a <__exponent>:
 800579a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800579c:	2900      	cmp	r1, #0
 800579e:	bfba      	itte	lt
 80057a0:	4249      	neglt	r1, r1
 80057a2:	232d      	movlt	r3, #45	@ 0x2d
 80057a4:	232b      	movge	r3, #43	@ 0x2b
 80057a6:	2909      	cmp	r1, #9
 80057a8:	7002      	strb	r2, [r0, #0]
 80057aa:	7043      	strb	r3, [r0, #1]
 80057ac:	dd29      	ble.n	8005802 <__exponent+0x68>
 80057ae:	f10d 0307 	add.w	r3, sp, #7
 80057b2:	461d      	mov	r5, r3
 80057b4:	270a      	movs	r7, #10
 80057b6:	461a      	mov	r2, r3
 80057b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80057bc:	fb07 1416 	mls	r4, r7, r6, r1
 80057c0:	3430      	adds	r4, #48	@ 0x30
 80057c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80057c6:	460c      	mov	r4, r1
 80057c8:	2c63      	cmp	r4, #99	@ 0x63
 80057ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80057ce:	4631      	mov	r1, r6
 80057d0:	dcf1      	bgt.n	80057b6 <__exponent+0x1c>
 80057d2:	3130      	adds	r1, #48	@ 0x30
 80057d4:	1e94      	subs	r4, r2, #2
 80057d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80057da:	1c41      	adds	r1, r0, #1
 80057dc:	4623      	mov	r3, r4
 80057de:	42ab      	cmp	r3, r5
 80057e0:	d30a      	bcc.n	80057f8 <__exponent+0x5e>
 80057e2:	f10d 0309 	add.w	r3, sp, #9
 80057e6:	1a9b      	subs	r3, r3, r2
 80057e8:	42ac      	cmp	r4, r5
 80057ea:	bf88      	it	hi
 80057ec:	2300      	movhi	r3, #0
 80057ee:	3302      	adds	r3, #2
 80057f0:	4403      	add	r3, r0
 80057f2:	1a18      	subs	r0, r3, r0
 80057f4:	b003      	add	sp, #12
 80057f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80057fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005800:	e7ed      	b.n	80057de <__exponent+0x44>
 8005802:	2330      	movs	r3, #48	@ 0x30
 8005804:	3130      	adds	r1, #48	@ 0x30
 8005806:	7083      	strb	r3, [r0, #2]
 8005808:	70c1      	strb	r1, [r0, #3]
 800580a:	1d03      	adds	r3, r0, #4
 800580c:	e7f1      	b.n	80057f2 <__exponent+0x58>
	...

08005810 <_printf_float>:
 8005810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005814:	b08d      	sub	sp, #52	@ 0x34
 8005816:	460c      	mov	r4, r1
 8005818:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800581c:	4616      	mov	r6, r2
 800581e:	461f      	mov	r7, r3
 8005820:	4605      	mov	r5, r0
 8005822:	f001 f831 	bl	8006888 <_localeconv_r>
 8005826:	6803      	ldr	r3, [r0, #0]
 8005828:	9304      	str	r3, [sp, #16]
 800582a:	4618      	mov	r0, r3
 800582c:	f7fa fd20 	bl	8000270 <strlen>
 8005830:	2300      	movs	r3, #0
 8005832:	930a      	str	r3, [sp, #40]	@ 0x28
 8005834:	f8d8 3000 	ldr.w	r3, [r8]
 8005838:	9005      	str	r0, [sp, #20]
 800583a:	3307      	adds	r3, #7
 800583c:	f023 0307 	bic.w	r3, r3, #7
 8005840:	f103 0208 	add.w	r2, r3, #8
 8005844:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005848:	f8d4 b000 	ldr.w	fp, [r4]
 800584c:	f8c8 2000 	str.w	r2, [r8]
 8005850:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005854:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005858:	9307      	str	r3, [sp, #28]
 800585a:	f8cd 8018 	str.w	r8, [sp, #24]
 800585e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005862:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005866:	4b9c      	ldr	r3, [pc, #624]	@ (8005ad8 <_printf_float+0x2c8>)
 8005868:	f04f 32ff 	mov.w	r2, #4294967295
 800586c:	f7fb f95e 	bl	8000b2c <__aeabi_dcmpun>
 8005870:	bb70      	cbnz	r0, 80058d0 <_printf_float+0xc0>
 8005872:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005876:	4b98      	ldr	r3, [pc, #608]	@ (8005ad8 <_printf_float+0x2c8>)
 8005878:	f04f 32ff 	mov.w	r2, #4294967295
 800587c:	f7fb f938 	bl	8000af0 <__aeabi_dcmple>
 8005880:	bb30      	cbnz	r0, 80058d0 <_printf_float+0xc0>
 8005882:	2200      	movs	r2, #0
 8005884:	2300      	movs	r3, #0
 8005886:	4640      	mov	r0, r8
 8005888:	4649      	mov	r1, r9
 800588a:	f7fb f927 	bl	8000adc <__aeabi_dcmplt>
 800588e:	b110      	cbz	r0, 8005896 <_printf_float+0x86>
 8005890:	232d      	movs	r3, #45	@ 0x2d
 8005892:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005896:	4a91      	ldr	r2, [pc, #580]	@ (8005adc <_printf_float+0x2cc>)
 8005898:	4b91      	ldr	r3, [pc, #580]	@ (8005ae0 <_printf_float+0x2d0>)
 800589a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800589e:	bf94      	ite	ls
 80058a0:	4690      	movls	r8, r2
 80058a2:	4698      	movhi	r8, r3
 80058a4:	2303      	movs	r3, #3
 80058a6:	6123      	str	r3, [r4, #16]
 80058a8:	f02b 0304 	bic.w	r3, fp, #4
 80058ac:	6023      	str	r3, [r4, #0]
 80058ae:	f04f 0900 	mov.w	r9, #0
 80058b2:	9700      	str	r7, [sp, #0]
 80058b4:	4633      	mov	r3, r6
 80058b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80058b8:	4621      	mov	r1, r4
 80058ba:	4628      	mov	r0, r5
 80058bc:	f000 f9d2 	bl	8005c64 <_printf_common>
 80058c0:	3001      	adds	r0, #1
 80058c2:	f040 808d 	bne.w	80059e0 <_printf_float+0x1d0>
 80058c6:	f04f 30ff 	mov.w	r0, #4294967295
 80058ca:	b00d      	add	sp, #52	@ 0x34
 80058cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d0:	4642      	mov	r2, r8
 80058d2:	464b      	mov	r3, r9
 80058d4:	4640      	mov	r0, r8
 80058d6:	4649      	mov	r1, r9
 80058d8:	f7fb f928 	bl	8000b2c <__aeabi_dcmpun>
 80058dc:	b140      	cbz	r0, 80058f0 <_printf_float+0xe0>
 80058de:	464b      	mov	r3, r9
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	bfbc      	itt	lt
 80058e4:	232d      	movlt	r3, #45	@ 0x2d
 80058e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80058ea:	4a7e      	ldr	r2, [pc, #504]	@ (8005ae4 <_printf_float+0x2d4>)
 80058ec:	4b7e      	ldr	r3, [pc, #504]	@ (8005ae8 <_printf_float+0x2d8>)
 80058ee:	e7d4      	b.n	800589a <_printf_float+0x8a>
 80058f0:	6863      	ldr	r3, [r4, #4]
 80058f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80058f6:	9206      	str	r2, [sp, #24]
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	d13b      	bne.n	8005974 <_printf_float+0x164>
 80058fc:	2306      	movs	r3, #6
 80058fe:	6063      	str	r3, [r4, #4]
 8005900:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005904:	2300      	movs	r3, #0
 8005906:	6022      	str	r2, [r4, #0]
 8005908:	9303      	str	r3, [sp, #12]
 800590a:	ab0a      	add	r3, sp, #40	@ 0x28
 800590c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005910:	ab09      	add	r3, sp, #36	@ 0x24
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	6861      	ldr	r1, [r4, #4]
 8005916:	ec49 8b10 	vmov	d0, r8, r9
 800591a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800591e:	4628      	mov	r0, r5
 8005920:	f7ff fed6 	bl	80056d0 <__cvt>
 8005924:	9b06      	ldr	r3, [sp, #24]
 8005926:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005928:	2b47      	cmp	r3, #71	@ 0x47
 800592a:	4680      	mov	r8, r0
 800592c:	d129      	bne.n	8005982 <_printf_float+0x172>
 800592e:	1cc8      	adds	r0, r1, #3
 8005930:	db02      	blt.n	8005938 <_printf_float+0x128>
 8005932:	6863      	ldr	r3, [r4, #4]
 8005934:	4299      	cmp	r1, r3
 8005936:	dd41      	ble.n	80059bc <_printf_float+0x1ac>
 8005938:	f1aa 0a02 	sub.w	sl, sl, #2
 800593c:	fa5f fa8a 	uxtb.w	sl, sl
 8005940:	3901      	subs	r1, #1
 8005942:	4652      	mov	r2, sl
 8005944:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005948:	9109      	str	r1, [sp, #36]	@ 0x24
 800594a:	f7ff ff26 	bl	800579a <__exponent>
 800594e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005950:	1813      	adds	r3, r2, r0
 8005952:	2a01      	cmp	r2, #1
 8005954:	4681      	mov	r9, r0
 8005956:	6123      	str	r3, [r4, #16]
 8005958:	dc02      	bgt.n	8005960 <_printf_float+0x150>
 800595a:	6822      	ldr	r2, [r4, #0]
 800595c:	07d2      	lsls	r2, r2, #31
 800595e:	d501      	bpl.n	8005964 <_printf_float+0x154>
 8005960:	3301      	adds	r3, #1
 8005962:	6123      	str	r3, [r4, #16]
 8005964:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0a2      	beq.n	80058b2 <_printf_float+0xa2>
 800596c:	232d      	movs	r3, #45	@ 0x2d
 800596e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005972:	e79e      	b.n	80058b2 <_printf_float+0xa2>
 8005974:	9a06      	ldr	r2, [sp, #24]
 8005976:	2a47      	cmp	r2, #71	@ 0x47
 8005978:	d1c2      	bne.n	8005900 <_printf_float+0xf0>
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1c0      	bne.n	8005900 <_printf_float+0xf0>
 800597e:	2301      	movs	r3, #1
 8005980:	e7bd      	b.n	80058fe <_printf_float+0xee>
 8005982:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005986:	d9db      	bls.n	8005940 <_printf_float+0x130>
 8005988:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800598c:	d118      	bne.n	80059c0 <_printf_float+0x1b0>
 800598e:	2900      	cmp	r1, #0
 8005990:	6863      	ldr	r3, [r4, #4]
 8005992:	dd0b      	ble.n	80059ac <_printf_float+0x19c>
 8005994:	6121      	str	r1, [r4, #16]
 8005996:	b913      	cbnz	r3, 800599e <_printf_float+0x18e>
 8005998:	6822      	ldr	r2, [r4, #0]
 800599a:	07d0      	lsls	r0, r2, #31
 800599c:	d502      	bpl.n	80059a4 <_printf_float+0x194>
 800599e:	3301      	adds	r3, #1
 80059a0:	440b      	add	r3, r1
 80059a2:	6123      	str	r3, [r4, #16]
 80059a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80059a6:	f04f 0900 	mov.w	r9, #0
 80059aa:	e7db      	b.n	8005964 <_printf_float+0x154>
 80059ac:	b913      	cbnz	r3, 80059b4 <_printf_float+0x1a4>
 80059ae:	6822      	ldr	r2, [r4, #0]
 80059b0:	07d2      	lsls	r2, r2, #31
 80059b2:	d501      	bpl.n	80059b8 <_printf_float+0x1a8>
 80059b4:	3302      	adds	r3, #2
 80059b6:	e7f4      	b.n	80059a2 <_printf_float+0x192>
 80059b8:	2301      	movs	r3, #1
 80059ba:	e7f2      	b.n	80059a2 <_printf_float+0x192>
 80059bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80059c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059c2:	4299      	cmp	r1, r3
 80059c4:	db05      	blt.n	80059d2 <_printf_float+0x1c2>
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	6121      	str	r1, [r4, #16]
 80059ca:	07d8      	lsls	r0, r3, #31
 80059cc:	d5ea      	bpl.n	80059a4 <_printf_float+0x194>
 80059ce:	1c4b      	adds	r3, r1, #1
 80059d0:	e7e7      	b.n	80059a2 <_printf_float+0x192>
 80059d2:	2900      	cmp	r1, #0
 80059d4:	bfd4      	ite	le
 80059d6:	f1c1 0202 	rsble	r2, r1, #2
 80059da:	2201      	movgt	r2, #1
 80059dc:	4413      	add	r3, r2
 80059de:	e7e0      	b.n	80059a2 <_printf_float+0x192>
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	055a      	lsls	r2, r3, #21
 80059e4:	d407      	bmi.n	80059f6 <_printf_float+0x1e6>
 80059e6:	6923      	ldr	r3, [r4, #16]
 80059e8:	4642      	mov	r2, r8
 80059ea:	4631      	mov	r1, r6
 80059ec:	4628      	mov	r0, r5
 80059ee:	47b8      	blx	r7
 80059f0:	3001      	adds	r0, #1
 80059f2:	d12b      	bne.n	8005a4c <_printf_float+0x23c>
 80059f4:	e767      	b.n	80058c6 <_printf_float+0xb6>
 80059f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059fa:	f240 80dd 	bls.w	8005bb8 <_printf_float+0x3a8>
 80059fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a02:	2200      	movs	r2, #0
 8005a04:	2300      	movs	r3, #0
 8005a06:	f7fb f85f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	d033      	beq.n	8005a76 <_printf_float+0x266>
 8005a0e:	4a37      	ldr	r2, [pc, #220]	@ (8005aec <_printf_float+0x2dc>)
 8005a10:	2301      	movs	r3, #1
 8005a12:	4631      	mov	r1, r6
 8005a14:	4628      	mov	r0, r5
 8005a16:	47b8      	blx	r7
 8005a18:	3001      	adds	r0, #1
 8005a1a:	f43f af54 	beq.w	80058c6 <_printf_float+0xb6>
 8005a1e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005a22:	4543      	cmp	r3, r8
 8005a24:	db02      	blt.n	8005a2c <_printf_float+0x21c>
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	07d8      	lsls	r0, r3, #31
 8005a2a:	d50f      	bpl.n	8005a4c <_printf_float+0x23c>
 8005a2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a30:	4631      	mov	r1, r6
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b8      	blx	r7
 8005a36:	3001      	adds	r0, #1
 8005a38:	f43f af45 	beq.w	80058c6 <_printf_float+0xb6>
 8005a3c:	f04f 0900 	mov.w	r9, #0
 8005a40:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a44:	f104 0a1a 	add.w	sl, r4, #26
 8005a48:	45c8      	cmp	r8, r9
 8005a4a:	dc09      	bgt.n	8005a60 <_printf_float+0x250>
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	079b      	lsls	r3, r3, #30
 8005a50:	f100 8103 	bmi.w	8005c5a <_printf_float+0x44a>
 8005a54:	68e0      	ldr	r0, [r4, #12]
 8005a56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a58:	4298      	cmp	r0, r3
 8005a5a:	bfb8      	it	lt
 8005a5c:	4618      	movlt	r0, r3
 8005a5e:	e734      	b.n	80058ca <_printf_float+0xba>
 8005a60:	2301      	movs	r3, #1
 8005a62:	4652      	mov	r2, sl
 8005a64:	4631      	mov	r1, r6
 8005a66:	4628      	mov	r0, r5
 8005a68:	47b8      	blx	r7
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	f43f af2b 	beq.w	80058c6 <_printf_float+0xb6>
 8005a70:	f109 0901 	add.w	r9, r9, #1
 8005a74:	e7e8      	b.n	8005a48 <_printf_float+0x238>
 8005a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	dc39      	bgt.n	8005af0 <_printf_float+0x2e0>
 8005a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8005aec <_printf_float+0x2dc>)
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4631      	mov	r1, r6
 8005a82:	4628      	mov	r0, r5
 8005a84:	47b8      	blx	r7
 8005a86:	3001      	adds	r0, #1
 8005a88:	f43f af1d 	beq.w	80058c6 <_printf_float+0xb6>
 8005a8c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005a90:	ea59 0303 	orrs.w	r3, r9, r3
 8005a94:	d102      	bne.n	8005a9c <_printf_float+0x28c>
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	07d9      	lsls	r1, r3, #31
 8005a9a:	d5d7      	bpl.n	8005a4c <_printf_float+0x23c>
 8005a9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aa0:	4631      	mov	r1, r6
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	47b8      	blx	r7
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	f43f af0d 	beq.w	80058c6 <_printf_float+0xb6>
 8005aac:	f04f 0a00 	mov.w	sl, #0
 8005ab0:	f104 0b1a 	add.w	fp, r4, #26
 8005ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ab6:	425b      	negs	r3, r3
 8005ab8:	4553      	cmp	r3, sl
 8005aba:	dc01      	bgt.n	8005ac0 <_printf_float+0x2b0>
 8005abc:	464b      	mov	r3, r9
 8005abe:	e793      	b.n	80059e8 <_printf_float+0x1d8>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	465a      	mov	r2, fp
 8005ac4:	4631      	mov	r1, r6
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	47b8      	blx	r7
 8005aca:	3001      	adds	r0, #1
 8005acc:	f43f aefb 	beq.w	80058c6 <_printf_float+0xb6>
 8005ad0:	f10a 0a01 	add.w	sl, sl, #1
 8005ad4:	e7ee      	b.n	8005ab4 <_printf_float+0x2a4>
 8005ad6:	bf00      	nop
 8005ad8:	7fefffff 	.word	0x7fefffff
 8005adc:	0800a820 	.word	0x0800a820
 8005ae0:	0800a824 	.word	0x0800a824
 8005ae4:	0800a828 	.word	0x0800a828
 8005ae8:	0800a82c 	.word	0x0800a82c
 8005aec:	0800abc0 	.word	0x0800abc0
 8005af0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005af2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005af6:	4553      	cmp	r3, sl
 8005af8:	bfa8      	it	ge
 8005afa:	4653      	movge	r3, sl
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	4699      	mov	r9, r3
 8005b00:	dc36      	bgt.n	8005b70 <_printf_float+0x360>
 8005b02:	f04f 0b00 	mov.w	fp, #0
 8005b06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b0a:	f104 021a 	add.w	r2, r4, #26
 8005b0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b10:	9306      	str	r3, [sp, #24]
 8005b12:	eba3 0309 	sub.w	r3, r3, r9
 8005b16:	455b      	cmp	r3, fp
 8005b18:	dc31      	bgt.n	8005b7e <_printf_float+0x36e>
 8005b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b1c:	459a      	cmp	sl, r3
 8005b1e:	dc3a      	bgt.n	8005b96 <_printf_float+0x386>
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	07da      	lsls	r2, r3, #31
 8005b24:	d437      	bmi.n	8005b96 <_printf_float+0x386>
 8005b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b28:	ebaa 0903 	sub.w	r9, sl, r3
 8005b2c:	9b06      	ldr	r3, [sp, #24]
 8005b2e:	ebaa 0303 	sub.w	r3, sl, r3
 8005b32:	4599      	cmp	r9, r3
 8005b34:	bfa8      	it	ge
 8005b36:	4699      	movge	r9, r3
 8005b38:	f1b9 0f00 	cmp.w	r9, #0
 8005b3c:	dc33      	bgt.n	8005ba6 <_printf_float+0x396>
 8005b3e:	f04f 0800 	mov.w	r8, #0
 8005b42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b46:	f104 0b1a 	add.w	fp, r4, #26
 8005b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b4c:	ebaa 0303 	sub.w	r3, sl, r3
 8005b50:	eba3 0309 	sub.w	r3, r3, r9
 8005b54:	4543      	cmp	r3, r8
 8005b56:	f77f af79 	ble.w	8005a4c <_printf_float+0x23c>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	465a      	mov	r2, fp
 8005b5e:	4631      	mov	r1, r6
 8005b60:	4628      	mov	r0, r5
 8005b62:	47b8      	blx	r7
 8005b64:	3001      	adds	r0, #1
 8005b66:	f43f aeae 	beq.w	80058c6 <_printf_float+0xb6>
 8005b6a:	f108 0801 	add.w	r8, r8, #1
 8005b6e:	e7ec      	b.n	8005b4a <_printf_float+0x33a>
 8005b70:	4642      	mov	r2, r8
 8005b72:	4631      	mov	r1, r6
 8005b74:	4628      	mov	r0, r5
 8005b76:	47b8      	blx	r7
 8005b78:	3001      	adds	r0, #1
 8005b7a:	d1c2      	bne.n	8005b02 <_printf_float+0x2f2>
 8005b7c:	e6a3      	b.n	80058c6 <_printf_float+0xb6>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	4631      	mov	r1, r6
 8005b82:	4628      	mov	r0, r5
 8005b84:	9206      	str	r2, [sp, #24]
 8005b86:	47b8      	blx	r7
 8005b88:	3001      	adds	r0, #1
 8005b8a:	f43f ae9c 	beq.w	80058c6 <_printf_float+0xb6>
 8005b8e:	9a06      	ldr	r2, [sp, #24]
 8005b90:	f10b 0b01 	add.w	fp, fp, #1
 8005b94:	e7bb      	b.n	8005b0e <_printf_float+0x2fe>
 8005b96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	47b8      	blx	r7
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d1c0      	bne.n	8005b26 <_printf_float+0x316>
 8005ba4:	e68f      	b.n	80058c6 <_printf_float+0xb6>
 8005ba6:	9a06      	ldr	r2, [sp, #24]
 8005ba8:	464b      	mov	r3, r9
 8005baa:	4442      	add	r2, r8
 8005bac:	4631      	mov	r1, r6
 8005bae:	4628      	mov	r0, r5
 8005bb0:	47b8      	blx	r7
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	d1c3      	bne.n	8005b3e <_printf_float+0x32e>
 8005bb6:	e686      	b.n	80058c6 <_printf_float+0xb6>
 8005bb8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005bbc:	f1ba 0f01 	cmp.w	sl, #1
 8005bc0:	dc01      	bgt.n	8005bc6 <_printf_float+0x3b6>
 8005bc2:	07db      	lsls	r3, r3, #31
 8005bc4:	d536      	bpl.n	8005c34 <_printf_float+0x424>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	4642      	mov	r2, r8
 8005bca:	4631      	mov	r1, r6
 8005bcc:	4628      	mov	r0, r5
 8005bce:	47b8      	blx	r7
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	f43f ae78 	beq.w	80058c6 <_printf_float+0xb6>
 8005bd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bda:	4631      	mov	r1, r6
 8005bdc:	4628      	mov	r0, r5
 8005bde:	47b8      	blx	r7
 8005be0:	3001      	adds	r0, #1
 8005be2:	f43f ae70 	beq.w	80058c6 <_printf_float+0xb6>
 8005be6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005bea:	2200      	movs	r2, #0
 8005bec:	2300      	movs	r3, #0
 8005bee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bf2:	f7fa ff69 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bf6:	b9c0      	cbnz	r0, 8005c2a <_printf_float+0x41a>
 8005bf8:	4653      	mov	r3, sl
 8005bfa:	f108 0201 	add.w	r2, r8, #1
 8005bfe:	4631      	mov	r1, r6
 8005c00:	4628      	mov	r0, r5
 8005c02:	47b8      	blx	r7
 8005c04:	3001      	adds	r0, #1
 8005c06:	d10c      	bne.n	8005c22 <_printf_float+0x412>
 8005c08:	e65d      	b.n	80058c6 <_printf_float+0xb6>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	465a      	mov	r2, fp
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4628      	mov	r0, r5
 8005c12:	47b8      	blx	r7
 8005c14:	3001      	adds	r0, #1
 8005c16:	f43f ae56 	beq.w	80058c6 <_printf_float+0xb6>
 8005c1a:	f108 0801 	add.w	r8, r8, #1
 8005c1e:	45d0      	cmp	r8, sl
 8005c20:	dbf3      	blt.n	8005c0a <_printf_float+0x3fa>
 8005c22:	464b      	mov	r3, r9
 8005c24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c28:	e6df      	b.n	80059ea <_printf_float+0x1da>
 8005c2a:	f04f 0800 	mov.w	r8, #0
 8005c2e:	f104 0b1a 	add.w	fp, r4, #26
 8005c32:	e7f4      	b.n	8005c1e <_printf_float+0x40e>
 8005c34:	2301      	movs	r3, #1
 8005c36:	4642      	mov	r2, r8
 8005c38:	e7e1      	b.n	8005bfe <_printf_float+0x3ee>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	464a      	mov	r2, r9
 8005c3e:	4631      	mov	r1, r6
 8005c40:	4628      	mov	r0, r5
 8005c42:	47b8      	blx	r7
 8005c44:	3001      	adds	r0, #1
 8005c46:	f43f ae3e 	beq.w	80058c6 <_printf_float+0xb6>
 8005c4a:	f108 0801 	add.w	r8, r8, #1
 8005c4e:	68e3      	ldr	r3, [r4, #12]
 8005c50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c52:	1a5b      	subs	r3, r3, r1
 8005c54:	4543      	cmp	r3, r8
 8005c56:	dcf0      	bgt.n	8005c3a <_printf_float+0x42a>
 8005c58:	e6fc      	b.n	8005a54 <_printf_float+0x244>
 8005c5a:	f04f 0800 	mov.w	r8, #0
 8005c5e:	f104 0919 	add.w	r9, r4, #25
 8005c62:	e7f4      	b.n	8005c4e <_printf_float+0x43e>

08005c64 <_printf_common>:
 8005c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c68:	4616      	mov	r6, r2
 8005c6a:	4698      	mov	r8, r3
 8005c6c:	688a      	ldr	r2, [r1, #8]
 8005c6e:	690b      	ldr	r3, [r1, #16]
 8005c70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c74:	4293      	cmp	r3, r2
 8005c76:	bfb8      	it	lt
 8005c78:	4613      	movlt	r3, r2
 8005c7a:	6033      	str	r3, [r6, #0]
 8005c7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c80:	4607      	mov	r7, r0
 8005c82:	460c      	mov	r4, r1
 8005c84:	b10a      	cbz	r2, 8005c8a <_printf_common+0x26>
 8005c86:	3301      	adds	r3, #1
 8005c88:	6033      	str	r3, [r6, #0]
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	0699      	lsls	r1, r3, #26
 8005c8e:	bf42      	ittt	mi
 8005c90:	6833      	ldrmi	r3, [r6, #0]
 8005c92:	3302      	addmi	r3, #2
 8005c94:	6033      	strmi	r3, [r6, #0]
 8005c96:	6825      	ldr	r5, [r4, #0]
 8005c98:	f015 0506 	ands.w	r5, r5, #6
 8005c9c:	d106      	bne.n	8005cac <_printf_common+0x48>
 8005c9e:	f104 0a19 	add.w	sl, r4, #25
 8005ca2:	68e3      	ldr	r3, [r4, #12]
 8005ca4:	6832      	ldr	r2, [r6, #0]
 8005ca6:	1a9b      	subs	r3, r3, r2
 8005ca8:	42ab      	cmp	r3, r5
 8005caa:	dc26      	bgt.n	8005cfa <_printf_common+0x96>
 8005cac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cb0:	6822      	ldr	r2, [r4, #0]
 8005cb2:	3b00      	subs	r3, #0
 8005cb4:	bf18      	it	ne
 8005cb6:	2301      	movne	r3, #1
 8005cb8:	0692      	lsls	r2, r2, #26
 8005cba:	d42b      	bmi.n	8005d14 <_printf_common+0xb0>
 8005cbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cc0:	4641      	mov	r1, r8
 8005cc2:	4638      	mov	r0, r7
 8005cc4:	47c8      	blx	r9
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	d01e      	beq.n	8005d08 <_printf_common+0xa4>
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	6922      	ldr	r2, [r4, #16]
 8005cce:	f003 0306 	and.w	r3, r3, #6
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	bf02      	ittt	eq
 8005cd6:	68e5      	ldreq	r5, [r4, #12]
 8005cd8:	6833      	ldreq	r3, [r6, #0]
 8005cda:	1aed      	subeq	r5, r5, r3
 8005cdc:	68a3      	ldr	r3, [r4, #8]
 8005cde:	bf0c      	ite	eq
 8005ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ce4:	2500      	movne	r5, #0
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	bfc4      	itt	gt
 8005cea:	1a9b      	subgt	r3, r3, r2
 8005cec:	18ed      	addgt	r5, r5, r3
 8005cee:	2600      	movs	r6, #0
 8005cf0:	341a      	adds	r4, #26
 8005cf2:	42b5      	cmp	r5, r6
 8005cf4:	d11a      	bne.n	8005d2c <_printf_common+0xc8>
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	e008      	b.n	8005d0c <_printf_common+0xa8>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4652      	mov	r2, sl
 8005cfe:	4641      	mov	r1, r8
 8005d00:	4638      	mov	r0, r7
 8005d02:	47c8      	blx	r9
 8005d04:	3001      	adds	r0, #1
 8005d06:	d103      	bne.n	8005d10 <_printf_common+0xac>
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d10:	3501      	adds	r5, #1
 8005d12:	e7c6      	b.n	8005ca2 <_printf_common+0x3e>
 8005d14:	18e1      	adds	r1, r4, r3
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	2030      	movs	r0, #48	@ 0x30
 8005d1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d1e:	4422      	add	r2, r4
 8005d20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d28:	3302      	adds	r3, #2
 8005d2a:	e7c7      	b.n	8005cbc <_printf_common+0x58>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	4622      	mov	r2, r4
 8005d30:	4641      	mov	r1, r8
 8005d32:	4638      	mov	r0, r7
 8005d34:	47c8      	blx	r9
 8005d36:	3001      	adds	r0, #1
 8005d38:	d0e6      	beq.n	8005d08 <_printf_common+0xa4>
 8005d3a:	3601      	adds	r6, #1
 8005d3c:	e7d9      	b.n	8005cf2 <_printf_common+0x8e>
	...

08005d40 <_printf_i>:
 8005d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d44:	7e0f      	ldrb	r7, [r1, #24]
 8005d46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d48:	2f78      	cmp	r7, #120	@ 0x78
 8005d4a:	4691      	mov	r9, r2
 8005d4c:	4680      	mov	r8, r0
 8005d4e:	460c      	mov	r4, r1
 8005d50:	469a      	mov	sl, r3
 8005d52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d56:	d807      	bhi.n	8005d68 <_printf_i+0x28>
 8005d58:	2f62      	cmp	r7, #98	@ 0x62
 8005d5a:	d80a      	bhi.n	8005d72 <_printf_i+0x32>
 8005d5c:	2f00      	cmp	r7, #0
 8005d5e:	f000 80d2 	beq.w	8005f06 <_printf_i+0x1c6>
 8005d62:	2f58      	cmp	r7, #88	@ 0x58
 8005d64:	f000 80b9 	beq.w	8005eda <_printf_i+0x19a>
 8005d68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d70:	e03a      	b.n	8005de8 <_printf_i+0xa8>
 8005d72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d76:	2b15      	cmp	r3, #21
 8005d78:	d8f6      	bhi.n	8005d68 <_printf_i+0x28>
 8005d7a:	a101      	add	r1, pc, #4	@ (adr r1, 8005d80 <_printf_i+0x40>)
 8005d7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d80:	08005dd9 	.word	0x08005dd9
 8005d84:	08005ded 	.word	0x08005ded
 8005d88:	08005d69 	.word	0x08005d69
 8005d8c:	08005d69 	.word	0x08005d69
 8005d90:	08005d69 	.word	0x08005d69
 8005d94:	08005d69 	.word	0x08005d69
 8005d98:	08005ded 	.word	0x08005ded
 8005d9c:	08005d69 	.word	0x08005d69
 8005da0:	08005d69 	.word	0x08005d69
 8005da4:	08005d69 	.word	0x08005d69
 8005da8:	08005d69 	.word	0x08005d69
 8005dac:	08005eed 	.word	0x08005eed
 8005db0:	08005e17 	.word	0x08005e17
 8005db4:	08005ea7 	.word	0x08005ea7
 8005db8:	08005d69 	.word	0x08005d69
 8005dbc:	08005d69 	.word	0x08005d69
 8005dc0:	08005f0f 	.word	0x08005f0f
 8005dc4:	08005d69 	.word	0x08005d69
 8005dc8:	08005e17 	.word	0x08005e17
 8005dcc:	08005d69 	.word	0x08005d69
 8005dd0:	08005d69 	.word	0x08005d69
 8005dd4:	08005eaf 	.word	0x08005eaf
 8005dd8:	6833      	ldr	r3, [r6, #0]
 8005dda:	1d1a      	adds	r2, r3, #4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6032      	str	r2, [r6, #0]
 8005de0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005de4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005de8:	2301      	movs	r3, #1
 8005dea:	e09d      	b.n	8005f28 <_printf_i+0x1e8>
 8005dec:	6833      	ldr	r3, [r6, #0]
 8005dee:	6820      	ldr	r0, [r4, #0]
 8005df0:	1d19      	adds	r1, r3, #4
 8005df2:	6031      	str	r1, [r6, #0]
 8005df4:	0606      	lsls	r6, r0, #24
 8005df6:	d501      	bpl.n	8005dfc <_printf_i+0xbc>
 8005df8:	681d      	ldr	r5, [r3, #0]
 8005dfa:	e003      	b.n	8005e04 <_printf_i+0xc4>
 8005dfc:	0645      	lsls	r5, r0, #25
 8005dfe:	d5fb      	bpl.n	8005df8 <_printf_i+0xb8>
 8005e00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e04:	2d00      	cmp	r5, #0
 8005e06:	da03      	bge.n	8005e10 <_printf_i+0xd0>
 8005e08:	232d      	movs	r3, #45	@ 0x2d
 8005e0a:	426d      	negs	r5, r5
 8005e0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e10:	4859      	ldr	r0, [pc, #356]	@ (8005f78 <_printf_i+0x238>)
 8005e12:	230a      	movs	r3, #10
 8005e14:	e011      	b.n	8005e3a <_printf_i+0xfa>
 8005e16:	6821      	ldr	r1, [r4, #0]
 8005e18:	6833      	ldr	r3, [r6, #0]
 8005e1a:	0608      	lsls	r0, r1, #24
 8005e1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e20:	d402      	bmi.n	8005e28 <_printf_i+0xe8>
 8005e22:	0649      	lsls	r1, r1, #25
 8005e24:	bf48      	it	mi
 8005e26:	b2ad      	uxthmi	r5, r5
 8005e28:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e2a:	4853      	ldr	r0, [pc, #332]	@ (8005f78 <_printf_i+0x238>)
 8005e2c:	6033      	str	r3, [r6, #0]
 8005e2e:	bf14      	ite	ne
 8005e30:	230a      	movne	r3, #10
 8005e32:	2308      	moveq	r3, #8
 8005e34:	2100      	movs	r1, #0
 8005e36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e3a:	6866      	ldr	r6, [r4, #4]
 8005e3c:	60a6      	str	r6, [r4, #8]
 8005e3e:	2e00      	cmp	r6, #0
 8005e40:	bfa2      	ittt	ge
 8005e42:	6821      	ldrge	r1, [r4, #0]
 8005e44:	f021 0104 	bicge.w	r1, r1, #4
 8005e48:	6021      	strge	r1, [r4, #0]
 8005e4a:	b90d      	cbnz	r5, 8005e50 <_printf_i+0x110>
 8005e4c:	2e00      	cmp	r6, #0
 8005e4e:	d04b      	beq.n	8005ee8 <_printf_i+0x1a8>
 8005e50:	4616      	mov	r6, r2
 8005e52:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e56:	fb03 5711 	mls	r7, r3, r1, r5
 8005e5a:	5dc7      	ldrb	r7, [r0, r7]
 8005e5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e60:	462f      	mov	r7, r5
 8005e62:	42bb      	cmp	r3, r7
 8005e64:	460d      	mov	r5, r1
 8005e66:	d9f4      	bls.n	8005e52 <_printf_i+0x112>
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d10b      	bne.n	8005e84 <_printf_i+0x144>
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	07df      	lsls	r7, r3, #31
 8005e70:	d508      	bpl.n	8005e84 <_printf_i+0x144>
 8005e72:	6923      	ldr	r3, [r4, #16]
 8005e74:	6861      	ldr	r1, [r4, #4]
 8005e76:	4299      	cmp	r1, r3
 8005e78:	bfde      	ittt	le
 8005e7a:	2330      	movle	r3, #48	@ 0x30
 8005e7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e84:	1b92      	subs	r2, r2, r6
 8005e86:	6122      	str	r2, [r4, #16]
 8005e88:	f8cd a000 	str.w	sl, [sp]
 8005e8c:	464b      	mov	r3, r9
 8005e8e:	aa03      	add	r2, sp, #12
 8005e90:	4621      	mov	r1, r4
 8005e92:	4640      	mov	r0, r8
 8005e94:	f7ff fee6 	bl	8005c64 <_printf_common>
 8005e98:	3001      	adds	r0, #1
 8005e9a:	d14a      	bne.n	8005f32 <_printf_i+0x1f2>
 8005e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea0:	b004      	add	sp, #16
 8005ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	f043 0320 	orr.w	r3, r3, #32
 8005eac:	6023      	str	r3, [r4, #0]
 8005eae:	4833      	ldr	r0, [pc, #204]	@ (8005f7c <_printf_i+0x23c>)
 8005eb0:	2778      	movs	r7, #120	@ 0x78
 8005eb2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	6831      	ldr	r1, [r6, #0]
 8005eba:	061f      	lsls	r7, r3, #24
 8005ebc:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ec0:	d402      	bmi.n	8005ec8 <_printf_i+0x188>
 8005ec2:	065f      	lsls	r7, r3, #25
 8005ec4:	bf48      	it	mi
 8005ec6:	b2ad      	uxthmi	r5, r5
 8005ec8:	6031      	str	r1, [r6, #0]
 8005eca:	07d9      	lsls	r1, r3, #31
 8005ecc:	bf44      	itt	mi
 8005ece:	f043 0320 	orrmi.w	r3, r3, #32
 8005ed2:	6023      	strmi	r3, [r4, #0]
 8005ed4:	b11d      	cbz	r5, 8005ede <_printf_i+0x19e>
 8005ed6:	2310      	movs	r3, #16
 8005ed8:	e7ac      	b.n	8005e34 <_printf_i+0xf4>
 8005eda:	4827      	ldr	r0, [pc, #156]	@ (8005f78 <_printf_i+0x238>)
 8005edc:	e7e9      	b.n	8005eb2 <_printf_i+0x172>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	f023 0320 	bic.w	r3, r3, #32
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	e7f6      	b.n	8005ed6 <_printf_i+0x196>
 8005ee8:	4616      	mov	r6, r2
 8005eea:	e7bd      	b.n	8005e68 <_printf_i+0x128>
 8005eec:	6833      	ldr	r3, [r6, #0]
 8005eee:	6825      	ldr	r5, [r4, #0]
 8005ef0:	6961      	ldr	r1, [r4, #20]
 8005ef2:	1d18      	adds	r0, r3, #4
 8005ef4:	6030      	str	r0, [r6, #0]
 8005ef6:	062e      	lsls	r6, r5, #24
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	d501      	bpl.n	8005f00 <_printf_i+0x1c0>
 8005efc:	6019      	str	r1, [r3, #0]
 8005efe:	e002      	b.n	8005f06 <_printf_i+0x1c6>
 8005f00:	0668      	lsls	r0, r5, #25
 8005f02:	d5fb      	bpl.n	8005efc <_printf_i+0x1bc>
 8005f04:	8019      	strh	r1, [r3, #0]
 8005f06:	2300      	movs	r3, #0
 8005f08:	6123      	str	r3, [r4, #16]
 8005f0a:	4616      	mov	r6, r2
 8005f0c:	e7bc      	b.n	8005e88 <_printf_i+0x148>
 8005f0e:	6833      	ldr	r3, [r6, #0]
 8005f10:	1d1a      	adds	r2, r3, #4
 8005f12:	6032      	str	r2, [r6, #0]
 8005f14:	681e      	ldr	r6, [r3, #0]
 8005f16:	6862      	ldr	r2, [r4, #4]
 8005f18:	2100      	movs	r1, #0
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	f7fa f958 	bl	80001d0 <memchr>
 8005f20:	b108      	cbz	r0, 8005f26 <_printf_i+0x1e6>
 8005f22:	1b80      	subs	r0, r0, r6
 8005f24:	6060      	str	r0, [r4, #4]
 8005f26:	6863      	ldr	r3, [r4, #4]
 8005f28:	6123      	str	r3, [r4, #16]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f30:	e7aa      	b.n	8005e88 <_printf_i+0x148>
 8005f32:	6923      	ldr	r3, [r4, #16]
 8005f34:	4632      	mov	r2, r6
 8005f36:	4649      	mov	r1, r9
 8005f38:	4640      	mov	r0, r8
 8005f3a:	47d0      	blx	sl
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d0ad      	beq.n	8005e9c <_printf_i+0x15c>
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	079b      	lsls	r3, r3, #30
 8005f44:	d413      	bmi.n	8005f6e <_printf_i+0x22e>
 8005f46:	68e0      	ldr	r0, [r4, #12]
 8005f48:	9b03      	ldr	r3, [sp, #12]
 8005f4a:	4298      	cmp	r0, r3
 8005f4c:	bfb8      	it	lt
 8005f4e:	4618      	movlt	r0, r3
 8005f50:	e7a6      	b.n	8005ea0 <_printf_i+0x160>
 8005f52:	2301      	movs	r3, #1
 8005f54:	4632      	mov	r2, r6
 8005f56:	4649      	mov	r1, r9
 8005f58:	4640      	mov	r0, r8
 8005f5a:	47d0      	blx	sl
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	d09d      	beq.n	8005e9c <_printf_i+0x15c>
 8005f60:	3501      	adds	r5, #1
 8005f62:	68e3      	ldr	r3, [r4, #12]
 8005f64:	9903      	ldr	r1, [sp, #12]
 8005f66:	1a5b      	subs	r3, r3, r1
 8005f68:	42ab      	cmp	r3, r5
 8005f6a:	dcf2      	bgt.n	8005f52 <_printf_i+0x212>
 8005f6c:	e7eb      	b.n	8005f46 <_printf_i+0x206>
 8005f6e:	2500      	movs	r5, #0
 8005f70:	f104 0619 	add.w	r6, r4, #25
 8005f74:	e7f5      	b.n	8005f62 <_printf_i+0x222>
 8005f76:	bf00      	nop
 8005f78:	0800a830 	.word	0x0800a830
 8005f7c:	0800a841 	.word	0x0800a841

08005f80 <_scanf_float>:
 8005f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	b087      	sub	sp, #28
 8005f86:	4617      	mov	r7, r2
 8005f88:	9303      	str	r3, [sp, #12]
 8005f8a:	688b      	ldr	r3, [r1, #8]
 8005f8c:	1e5a      	subs	r2, r3, #1
 8005f8e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005f92:	bf81      	itttt	hi
 8005f94:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005f98:	eb03 0b05 	addhi.w	fp, r3, r5
 8005f9c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005fa0:	608b      	strhi	r3, [r1, #8]
 8005fa2:	680b      	ldr	r3, [r1, #0]
 8005fa4:	460a      	mov	r2, r1
 8005fa6:	f04f 0500 	mov.w	r5, #0
 8005faa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005fae:	f842 3b1c 	str.w	r3, [r2], #28
 8005fb2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005fb6:	4680      	mov	r8, r0
 8005fb8:	460c      	mov	r4, r1
 8005fba:	bf98      	it	ls
 8005fbc:	f04f 0b00 	movls.w	fp, #0
 8005fc0:	9201      	str	r2, [sp, #4]
 8005fc2:	4616      	mov	r6, r2
 8005fc4:	46aa      	mov	sl, r5
 8005fc6:	46a9      	mov	r9, r5
 8005fc8:	9502      	str	r5, [sp, #8]
 8005fca:	68a2      	ldr	r2, [r4, #8]
 8005fcc:	b152      	cbz	r2, 8005fe4 <_scanf_float+0x64>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b4e      	cmp	r3, #78	@ 0x4e
 8005fd4:	d864      	bhi.n	80060a0 <_scanf_float+0x120>
 8005fd6:	2b40      	cmp	r3, #64	@ 0x40
 8005fd8:	d83c      	bhi.n	8006054 <_scanf_float+0xd4>
 8005fda:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005fde:	b2c8      	uxtb	r0, r1
 8005fe0:	280e      	cmp	r0, #14
 8005fe2:	d93a      	bls.n	800605a <_scanf_float+0xda>
 8005fe4:	f1b9 0f00 	cmp.w	r9, #0
 8005fe8:	d003      	beq.n	8005ff2 <_scanf_float+0x72>
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ff0:	6023      	str	r3, [r4, #0]
 8005ff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ff6:	f1ba 0f01 	cmp.w	sl, #1
 8005ffa:	f200 8117 	bhi.w	800622c <_scanf_float+0x2ac>
 8005ffe:	9b01      	ldr	r3, [sp, #4]
 8006000:	429e      	cmp	r6, r3
 8006002:	f200 8108 	bhi.w	8006216 <_scanf_float+0x296>
 8006006:	2001      	movs	r0, #1
 8006008:	b007      	add	sp, #28
 800600a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006012:	2a0d      	cmp	r2, #13
 8006014:	d8e6      	bhi.n	8005fe4 <_scanf_float+0x64>
 8006016:	a101      	add	r1, pc, #4	@ (adr r1, 800601c <_scanf_float+0x9c>)
 8006018:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800601c:	08006163 	.word	0x08006163
 8006020:	08005fe5 	.word	0x08005fe5
 8006024:	08005fe5 	.word	0x08005fe5
 8006028:	08005fe5 	.word	0x08005fe5
 800602c:	080061c3 	.word	0x080061c3
 8006030:	0800619b 	.word	0x0800619b
 8006034:	08005fe5 	.word	0x08005fe5
 8006038:	08005fe5 	.word	0x08005fe5
 800603c:	08006171 	.word	0x08006171
 8006040:	08005fe5 	.word	0x08005fe5
 8006044:	08005fe5 	.word	0x08005fe5
 8006048:	08005fe5 	.word	0x08005fe5
 800604c:	08005fe5 	.word	0x08005fe5
 8006050:	08006129 	.word	0x08006129
 8006054:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006058:	e7db      	b.n	8006012 <_scanf_float+0x92>
 800605a:	290e      	cmp	r1, #14
 800605c:	d8c2      	bhi.n	8005fe4 <_scanf_float+0x64>
 800605e:	a001      	add	r0, pc, #4	@ (adr r0, 8006064 <_scanf_float+0xe4>)
 8006060:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006064:	08006119 	.word	0x08006119
 8006068:	08005fe5 	.word	0x08005fe5
 800606c:	08006119 	.word	0x08006119
 8006070:	080061af 	.word	0x080061af
 8006074:	08005fe5 	.word	0x08005fe5
 8006078:	080060c1 	.word	0x080060c1
 800607c:	080060ff 	.word	0x080060ff
 8006080:	080060ff 	.word	0x080060ff
 8006084:	080060ff 	.word	0x080060ff
 8006088:	080060ff 	.word	0x080060ff
 800608c:	080060ff 	.word	0x080060ff
 8006090:	080060ff 	.word	0x080060ff
 8006094:	080060ff 	.word	0x080060ff
 8006098:	080060ff 	.word	0x080060ff
 800609c:	080060ff 	.word	0x080060ff
 80060a0:	2b6e      	cmp	r3, #110	@ 0x6e
 80060a2:	d809      	bhi.n	80060b8 <_scanf_float+0x138>
 80060a4:	2b60      	cmp	r3, #96	@ 0x60
 80060a6:	d8b2      	bhi.n	800600e <_scanf_float+0x8e>
 80060a8:	2b54      	cmp	r3, #84	@ 0x54
 80060aa:	d07b      	beq.n	80061a4 <_scanf_float+0x224>
 80060ac:	2b59      	cmp	r3, #89	@ 0x59
 80060ae:	d199      	bne.n	8005fe4 <_scanf_float+0x64>
 80060b0:	2d07      	cmp	r5, #7
 80060b2:	d197      	bne.n	8005fe4 <_scanf_float+0x64>
 80060b4:	2508      	movs	r5, #8
 80060b6:	e02c      	b.n	8006112 <_scanf_float+0x192>
 80060b8:	2b74      	cmp	r3, #116	@ 0x74
 80060ba:	d073      	beq.n	80061a4 <_scanf_float+0x224>
 80060bc:	2b79      	cmp	r3, #121	@ 0x79
 80060be:	e7f6      	b.n	80060ae <_scanf_float+0x12e>
 80060c0:	6821      	ldr	r1, [r4, #0]
 80060c2:	05c8      	lsls	r0, r1, #23
 80060c4:	d51b      	bpl.n	80060fe <_scanf_float+0x17e>
 80060c6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80060ca:	6021      	str	r1, [r4, #0]
 80060cc:	f109 0901 	add.w	r9, r9, #1
 80060d0:	f1bb 0f00 	cmp.w	fp, #0
 80060d4:	d003      	beq.n	80060de <_scanf_float+0x15e>
 80060d6:	3201      	adds	r2, #1
 80060d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060dc:	60a2      	str	r2, [r4, #8]
 80060de:	68a3      	ldr	r3, [r4, #8]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	60a3      	str	r3, [r4, #8]
 80060e4:	6923      	ldr	r3, [r4, #16]
 80060e6:	3301      	adds	r3, #1
 80060e8:	6123      	str	r3, [r4, #16]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	607b      	str	r3, [r7, #4]
 80060f2:	f340 8087 	ble.w	8006204 <_scanf_float+0x284>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	3301      	adds	r3, #1
 80060fa:	603b      	str	r3, [r7, #0]
 80060fc:	e765      	b.n	8005fca <_scanf_float+0x4a>
 80060fe:	eb1a 0105 	adds.w	r1, sl, r5
 8006102:	f47f af6f 	bne.w	8005fe4 <_scanf_float+0x64>
 8006106:	6822      	ldr	r2, [r4, #0]
 8006108:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800610c:	6022      	str	r2, [r4, #0]
 800610e:	460d      	mov	r5, r1
 8006110:	468a      	mov	sl, r1
 8006112:	f806 3b01 	strb.w	r3, [r6], #1
 8006116:	e7e2      	b.n	80060de <_scanf_float+0x15e>
 8006118:	6822      	ldr	r2, [r4, #0]
 800611a:	0610      	lsls	r0, r2, #24
 800611c:	f57f af62 	bpl.w	8005fe4 <_scanf_float+0x64>
 8006120:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006124:	6022      	str	r2, [r4, #0]
 8006126:	e7f4      	b.n	8006112 <_scanf_float+0x192>
 8006128:	f1ba 0f00 	cmp.w	sl, #0
 800612c:	d10e      	bne.n	800614c <_scanf_float+0x1cc>
 800612e:	f1b9 0f00 	cmp.w	r9, #0
 8006132:	d10e      	bne.n	8006152 <_scanf_float+0x1d2>
 8006134:	6822      	ldr	r2, [r4, #0]
 8006136:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800613a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800613e:	d108      	bne.n	8006152 <_scanf_float+0x1d2>
 8006140:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006144:	6022      	str	r2, [r4, #0]
 8006146:	f04f 0a01 	mov.w	sl, #1
 800614a:	e7e2      	b.n	8006112 <_scanf_float+0x192>
 800614c:	f1ba 0f02 	cmp.w	sl, #2
 8006150:	d055      	beq.n	80061fe <_scanf_float+0x27e>
 8006152:	2d01      	cmp	r5, #1
 8006154:	d002      	beq.n	800615c <_scanf_float+0x1dc>
 8006156:	2d04      	cmp	r5, #4
 8006158:	f47f af44 	bne.w	8005fe4 <_scanf_float+0x64>
 800615c:	3501      	adds	r5, #1
 800615e:	b2ed      	uxtb	r5, r5
 8006160:	e7d7      	b.n	8006112 <_scanf_float+0x192>
 8006162:	f1ba 0f01 	cmp.w	sl, #1
 8006166:	f47f af3d 	bne.w	8005fe4 <_scanf_float+0x64>
 800616a:	f04f 0a02 	mov.w	sl, #2
 800616e:	e7d0      	b.n	8006112 <_scanf_float+0x192>
 8006170:	b97d      	cbnz	r5, 8006192 <_scanf_float+0x212>
 8006172:	f1b9 0f00 	cmp.w	r9, #0
 8006176:	f47f af38 	bne.w	8005fea <_scanf_float+0x6a>
 800617a:	6822      	ldr	r2, [r4, #0]
 800617c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006180:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006184:	f040 8108 	bne.w	8006398 <_scanf_float+0x418>
 8006188:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800618c:	6022      	str	r2, [r4, #0]
 800618e:	2501      	movs	r5, #1
 8006190:	e7bf      	b.n	8006112 <_scanf_float+0x192>
 8006192:	2d03      	cmp	r5, #3
 8006194:	d0e2      	beq.n	800615c <_scanf_float+0x1dc>
 8006196:	2d05      	cmp	r5, #5
 8006198:	e7de      	b.n	8006158 <_scanf_float+0x1d8>
 800619a:	2d02      	cmp	r5, #2
 800619c:	f47f af22 	bne.w	8005fe4 <_scanf_float+0x64>
 80061a0:	2503      	movs	r5, #3
 80061a2:	e7b6      	b.n	8006112 <_scanf_float+0x192>
 80061a4:	2d06      	cmp	r5, #6
 80061a6:	f47f af1d 	bne.w	8005fe4 <_scanf_float+0x64>
 80061aa:	2507      	movs	r5, #7
 80061ac:	e7b1      	b.n	8006112 <_scanf_float+0x192>
 80061ae:	6822      	ldr	r2, [r4, #0]
 80061b0:	0591      	lsls	r1, r2, #22
 80061b2:	f57f af17 	bpl.w	8005fe4 <_scanf_float+0x64>
 80061b6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80061ba:	6022      	str	r2, [r4, #0]
 80061bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80061c0:	e7a7      	b.n	8006112 <_scanf_float+0x192>
 80061c2:	6822      	ldr	r2, [r4, #0]
 80061c4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80061c8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80061cc:	d006      	beq.n	80061dc <_scanf_float+0x25c>
 80061ce:	0550      	lsls	r0, r2, #21
 80061d0:	f57f af08 	bpl.w	8005fe4 <_scanf_float+0x64>
 80061d4:	f1b9 0f00 	cmp.w	r9, #0
 80061d8:	f000 80de 	beq.w	8006398 <_scanf_float+0x418>
 80061dc:	0591      	lsls	r1, r2, #22
 80061de:	bf58      	it	pl
 80061e0:	9902      	ldrpl	r1, [sp, #8]
 80061e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80061e6:	bf58      	it	pl
 80061e8:	eba9 0101 	subpl.w	r1, r9, r1
 80061ec:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80061f0:	bf58      	it	pl
 80061f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80061f6:	6022      	str	r2, [r4, #0]
 80061f8:	f04f 0900 	mov.w	r9, #0
 80061fc:	e789      	b.n	8006112 <_scanf_float+0x192>
 80061fe:	f04f 0a03 	mov.w	sl, #3
 8006202:	e786      	b.n	8006112 <_scanf_float+0x192>
 8006204:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006208:	4639      	mov	r1, r7
 800620a:	4640      	mov	r0, r8
 800620c:	4798      	blx	r3
 800620e:	2800      	cmp	r0, #0
 8006210:	f43f aedb 	beq.w	8005fca <_scanf_float+0x4a>
 8006214:	e6e6      	b.n	8005fe4 <_scanf_float+0x64>
 8006216:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800621a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800621e:	463a      	mov	r2, r7
 8006220:	4640      	mov	r0, r8
 8006222:	4798      	blx	r3
 8006224:	6923      	ldr	r3, [r4, #16]
 8006226:	3b01      	subs	r3, #1
 8006228:	6123      	str	r3, [r4, #16]
 800622a:	e6e8      	b.n	8005ffe <_scanf_float+0x7e>
 800622c:	1e6b      	subs	r3, r5, #1
 800622e:	2b06      	cmp	r3, #6
 8006230:	d824      	bhi.n	800627c <_scanf_float+0x2fc>
 8006232:	2d02      	cmp	r5, #2
 8006234:	d836      	bhi.n	80062a4 <_scanf_float+0x324>
 8006236:	9b01      	ldr	r3, [sp, #4]
 8006238:	429e      	cmp	r6, r3
 800623a:	f67f aee4 	bls.w	8006006 <_scanf_float+0x86>
 800623e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006242:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006246:	463a      	mov	r2, r7
 8006248:	4640      	mov	r0, r8
 800624a:	4798      	blx	r3
 800624c:	6923      	ldr	r3, [r4, #16]
 800624e:	3b01      	subs	r3, #1
 8006250:	6123      	str	r3, [r4, #16]
 8006252:	e7f0      	b.n	8006236 <_scanf_float+0x2b6>
 8006254:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006258:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800625c:	463a      	mov	r2, r7
 800625e:	4640      	mov	r0, r8
 8006260:	4798      	blx	r3
 8006262:	6923      	ldr	r3, [r4, #16]
 8006264:	3b01      	subs	r3, #1
 8006266:	6123      	str	r3, [r4, #16]
 8006268:	f10a 3aff 	add.w	sl, sl, #4294967295
 800626c:	fa5f fa8a 	uxtb.w	sl, sl
 8006270:	f1ba 0f02 	cmp.w	sl, #2
 8006274:	d1ee      	bne.n	8006254 <_scanf_float+0x2d4>
 8006276:	3d03      	subs	r5, #3
 8006278:	b2ed      	uxtb	r5, r5
 800627a:	1b76      	subs	r6, r6, r5
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	05da      	lsls	r2, r3, #23
 8006280:	d530      	bpl.n	80062e4 <_scanf_float+0x364>
 8006282:	055b      	lsls	r3, r3, #21
 8006284:	d511      	bpl.n	80062aa <_scanf_float+0x32a>
 8006286:	9b01      	ldr	r3, [sp, #4]
 8006288:	429e      	cmp	r6, r3
 800628a:	f67f aebc 	bls.w	8006006 <_scanf_float+0x86>
 800628e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006292:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006296:	463a      	mov	r2, r7
 8006298:	4640      	mov	r0, r8
 800629a:	4798      	blx	r3
 800629c:	6923      	ldr	r3, [r4, #16]
 800629e:	3b01      	subs	r3, #1
 80062a0:	6123      	str	r3, [r4, #16]
 80062a2:	e7f0      	b.n	8006286 <_scanf_float+0x306>
 80062a4:	46aa      	mov	sl, r5
 80062a6:	46b3      	mov	fp, r6
 80062a8:	e7de      	b.n	8006268 <_scanf_float+0x2e8>
 80062aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80062ae:	6923      	ldr	r3, [r4, #16]
 80062b0:	2965      	cmp	r1, #101	@ 0x65
 80062b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80062b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80062ba:	6123      	str	r3, [r4, #16]
 80062bc:	d00c      	beq.n	80062d8 <_scanf_float+0x358>
 80062be:	2945      	cmp	r1, #69	@ 0x45
 80062c0:	d00a      	beq.n	80062d8 <_scanf_float+0x358>
 80062c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062c6:	463a      	mov	r2, r7
 80062c8:	4640      	mov	r0, r8
 80062ca:	4798      	blx	r3
 80062cc:	6923      	ldr	r3, [r4, #16]
 80062ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	1eb5      	subs	r5, r6, #2
 80062d6:	6123      	str	r3, [r4, #16]
 80062d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062dc:	463a      	mov	r2, r7
 80062de:	4640      	mov	r0, r8
 80062e0:	4798      	blx	r3
 80062e2:	462e      	mov	r6, r5
 80062e4:	6822      	ldr	r2, [r4, #0]
 80062e6:	f012 0210 	ands.w	r2, r2, #16
 80062ea:	d001      	beq.n	80062f0 <_scanf_float+0x370>
 80062ec:	2000      	movs	r0, #0
 80062ee:	e68b      	b.n	8006008 <_scanf_float+0x88>
 80062f0:	7032      	strb	r2, [r6, #0]
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80062f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062fc:	d11c      	bne.n	8006338 <_scanf_float+0x3b8>
 80062fe:	9b02      	ldr	r3, [sp, #8]
 8006300:	454b      	cmp	r3, r9
 8006302:	eba3 0209 	sub.w	r2, r3, r9
 8006306:	d123      	bne.n	8006350 <_scanf_float+0x3d0>
 8006308:	9901      	ldr	r1, [sp, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	4640      	mov	r0, r8
 800630e:	f002 fd3b 	bl	8008d88 <_strtod_r>
 8006312:	9b03      	ldr	r3, [sp, #12]
 8006314:	6821      	ldr	r1, [r4, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f011 0f02 	tst.w	r1, #2
 800631c:	ec57 6b10 	vmov	r6, r7, d0
 8006320:	f103 0204 	add.w	r2, r3, #4
 8006324:	d01f      	beq.n	8006366 <_scanf_float+0x3e6>
 8006326:	9903      	ldr	r1, [sp, #12]
 8006328:	600a      	str	r2, [r1, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	e9c3 6700 	strd	r6, r7, [r3]
 8006330:	68e3      	ldr	r3, [r4, #12]
 8006332:	3301      	adds	r3, #1
 8006334:	60e3      	str	r3, [r4, #12]
 8006336:	e7d9      	b.n	80062ec <_scanf_float+0x36c>
 8006338:	9b04      	ldr	r3, [sp, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0e4      	beq.n	8006308 <_scanf_float+0x388>
 800633e:	9905      	ldr	r1, [sp, #20]
 8006340:	230a      	movs	r3, #10
 8006342:	3101      	adds	r1, #1
 8006344:	4640      	mov	r0, r8
 8006346:	f002 fd9f 	bl	8008e88 <_strtol_r>
 800634a:	9b04      	ldr	r3, [sp, #16]
 800634c:	9e05      	ldr	r6, [sp, #20]
 800634e:	1ac2      	subs	r2, r0, r3
 8006350:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006354:	429e      	cmp	r6, r3
 8006356:	bf28      	it	cs
 8006358:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800635c:	4910      	ldr	r1, [pc, #64]	@ (80063a0 <_scanf_float+0x420>)
 800635e:	4630      	mov	r0, r6
 8006360:	f000 f954 	bl	800660c <siprintf>
 8006364:	e7d0      	b.n	8006308 <_scanf_float+0x388>
 8006366:	f011 0f04 	tst.w	r1, #4
 800636a:	9903      	ldr	r1, [sp, #12]
 800636c:	600a      	str	r2, [r1, #0]
 800636e:	d1dc      	bne.n	800632a <_scanf_float+0x3aa>
 8006370:	681d      	ldr	r5, [r3, #0]
 8006372:	4632      	mov	r2, r6
 8006374:	463b      	mov	r3, r7
 8006376:	4630      	mov	r0, r6
 8006378:	4639      	mov	r1, r7
 800637a:	f7fa fbd7 	bl	8000b2c <__aeabi_dcmpun>
 800637e:	b128      	cbz	r0, 800638c <_scanf_float+0x40c>
 8006380:	4808      	ldr	r0, [pc, #32]	@ (80063a4 <_scanf_float+0x424>)
 8006382:	f000 faf9 	bl	8006978 <nanf>
 8006386:	ed85 0a00 	vstr	s0, [r5]
 800638a:	e7d1      	b.n	8006330 <_scanf_float+0x3b0>
 800638c:	4630      	mov	r0, r6
 800638e:	4639      	mov	r1, r7
 8006390:	f7fa fc2a 	bl	8000be8 <__aeabi_d2f>
 8006394:	6028      	str	r0, [r5, #0]
 8006396:	e7cb      	b.n	8006330 <_scanf_float+0x3b0>
 8006398:	f04f 0900 	mov.w	r9, #0
 800639c:	e629      	b.n	8005ff2 <_scanf_float+0x72>
 800639e:	bf00      	nop
 80063a0:	0800a852 	.word	0x0800a852
 80063a4:	0800ac08 	.word	0x0800ac08

080063a8 <std>:
 80063a8:	2300      	movs	r3, #0
 80063aa:	b510      	push	{r4, lr}
 80063ac:	4604      	mov	r4, r0
 80063ae:	e9c0 3300 	strd	r3, r3, [r0]
 80063b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063b6:	6083      	str	r3, [r0, #8]
 80063b8:	8181      	strh	r1, [r0, #12]
 80063ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80063bc:	81c2      	strh	r2, [r0, #14]
 80063be:	6183      	str	r3, [r0, #24]
 80063c0:	4619      	mov	r1, r3
 80063c2:	2208      	movs	r2, #8
 80063c4:	305c      	adds	r0, #92	@ 0x5c
 80063c6:	f000 fa45 	bl	8006854 <memset>
 80063ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006400 <std+0x58>)
 80063cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80063ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006404 <std+0x5c>)
 80063d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80063d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006408 <std+0x60>)
 80063d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80063d6:	4b0d      	ldr	r3, [pc, #52]	@ (800640c <std+0x64>)
 80063d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80063da:	4b0d      	ldr	r3, [pc, #52]	@ (8006410 <std+0x68>)
 80063dc:	6224      	str	r4, [r4, #32]
 80063de:	429c      	cmp	r4, r3
 80063e0:	d006      	beq.n	80063f0 <std+0x48>
 80063e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063e6:	4294      	cmp	r4, r2
 80063e8:	d002      	beq.n	80063f0 <std+0x48>
 80063ea:	33d0      	adds	r3, #208	@ 0xd0
 80063ec:	429c      	cmp	r4, r3
 80063ee:	d105      	bne.n	80063fc <std+0x54>
 80063f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80063f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f8:	f000 baba 	b.w	8006970 <__retarget_lock_init_recursive>
 80063fc:	bd10      	pop	{r4, pc}
 80063fe:	bf00      	nop
 8006400:	080066a1 	.word	0x080066a1
 8006404:	080066c7 	.word	0x080066c7
 8006408:	080066ff 	.word	0x080066ff
 800640c:	08006723 	.word	0x08006723
 8006410:	20000428 	.word	0x20000428

08006414 <stdio_exit_handler>:
 8006414:	4a02      	ldr	r2, [pc, #8]	@ (8006420 <stdio_exit_handler+0xc>)
 8006416:	4903      	ldr	r1, [pc, #12]	@ (8006424 <stdio_exit_handler+0x10>)
 8006418:	4803      	ldr	r0, [pc, #12]	@ (8006428 <stdio_exit_handler+0x14>)
 800641a:	f000 b869 	b.w	80064f0 <_fwalk_sglue>
 800641e:	bf00      	nop
 8006420:	20000024 	.word	0x20000024
 8006424:	08009afd 	.word	0x08009afd
 8006428:	20000034 	.word	0x20000034

0800642c <cleanup_stdio>:
 800642c:	6841      	ldr	r1, [r0, #4]
 800642e:	4b0c      	ldr	r3, [pc, #48]	@ (8006460 <cleanup_stdio+0x34>)
 8006430:	4299      	cmp	r1, r3
 8006432:	b510      	push	{r4, lr}
 8006434:	4604      	mov	r4, r0
 8006436:	d001      	beq.n	800643c <cleanup_stdio+0x10>
 8006438:	f003 fb60 	bl	8009afc <_fflush_r>
 800643c:	68a1      	ldr	r1, [r4, #8]
 800643e:	4b09      	ldr	r3, [pc, #36]	@ (8006464 <cleanup_stdio+0x38>)
 8006440:	4299      	cmp	r1, r3
 8006442:	d002      	beq.n	800644a <cleanup_stdio+0x1e>
 8006444:	4620      	mov	r0, r4
 8006446:	f003 fb59 	bl	8009afc <_fflush_r>
 800644a:	68e1      	ldr	r1, [r4, #12]
 800644c:	4b06      	ldr	r3, [pc, #24]	@ (8006468 <cleanup_stdio+0x3c>)
 800644e:	4299      	cmp	r1, r3
 8006450:	d004      	beq.n	800645c <cleanup_stdio+0x30>
 8006452:	4620      	mov	r0, r4
 8006454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006458:	f003 bb50 	b.w	8009afc <_fflush_r>
 800645c:	bd10      	pop	{r4, pc}
 800645e:	bf00      	nop
 8006460:	20000428 	.word	0x20000428
 8006464:	20000490 	.word	0x20000490
 8006468:	200004f8 	.word	0x200004f8

0800646c <global_stdio_init.part.0>:
 800646c:	b510      	push	{r4, lr}
 800646e:	4b0b      	ldr	r3, [pc, #44]	@ (800649c <global_stdio_init.part.0+0x30>)
 8006470:	4c0b      	ldr	r4, [pc, #44]	@ (80064a0 <global_stdio_init.part.0+0x34>)
 8006472:	4a0c      	ldr	r2, [pc, #48]	@ (80064a4 <global_stdio_init.part.0+0x38>)
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	4620      	mov	r0, r4
 8006478:	2200      	movs	r2, #0
 800647a:	2104      	movs	r1, #4
 800647c:	f7ff ff94 	bl	80063a8 <std>
 8006480:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006484:	2201      	movs	r2, #1
 8006486:	2109      	movs	r1, #9
 8006488:	f7ff ff8e 	bl	80063a8 <std>
 800648c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006490:	2202      	movs	r2, #2
 8006492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006496:	2112      	movs	r1, #18
 8006498:	f7ff bf86 	b.w	80063a8 <std>
 800649c:	20000560 	.word	0x20000560
 80064a0:	20000428 	.word	0x20000428
 80064a4:	08006415 	.word	0x08006415

080064a8 <__sfp_lock_acquire>:
 80064a8:	4801      	ldr	r0, [pc, #4]	@ (80064b0 <__sfp_lock_acquire+0x8>)
 80064aa:	f000 ba62 	b.w	8006972 <__retarget_lock_acquire_recursive>
 80064ae:	bf00      	nop
 80064b0:	20000569 	.word	0x20000569

080064b4 <__sfp_lock_release>:
 80064b4:	4801      	ldr	r0, [pc, #4]	@ (80064bc <__sfp_lock_release+0x8>)
 80064b6:	f000 ba5d 	b.w	8006974 <__retarget_lock_release_recursive>
 80064ba:	bf00      	nop
 80064bc:	20000569 	.word	0x20000569

080064c0 <__sinit>:
 80064c0:	b510      	push	{r4, lr}
 80064c2:	4604      	mov	r4, r0
 80064c4:	f7ff fff0 	bl	80064a8 <__sfp_lock_acquire>
 80064c8:	6a23      	ldr	r3, [r4, #32]
 80064ca:	b11b      	cbz	r3, 80064d4 <__sinit+0x14>
 80064cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064d0:	f7ff bff0 	b.w	80064b4 <__sfp_lock_release>
 80064d4:	4b04      	ldr	r3, [pc, #16]	@ (80064e8 <__sinit+0x28>)
 80064d6:	6223      	str	r3, [r4, #32]
 80064d8:	4b04      	ldr	r3, [pc, #16]	@ (80064ec <__sinit+0x2c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1f5      	bne.n	80064cc <__sinit+0xc>
 80064e0:	f7ff ffc4 	bl	800646c <global_stdio_init.part.0>
 80064e4:	e7f2      	b.n	80064cc <__sinit+0xc>
 80064e6:	bf00      	nop
 80064e8:	0800642d 	.word	0x0800642d
 80064ec:	20000560 	.word	0x20000560

080064f0 <_fwalk_sglue>:
 80064f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064f4:	4607      	mov	r7, r0
 80064f6:	4688      	mov	r8, r1
 80064f8:	4614      	mov	r4, r2
 80064fa:	2600      	movs	r6, #0
 80064fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006500:	f1b9 0901 	subs.w	r9, r9, #1
 8006504:	d505      	bpl.n	8006512 <_fwalk_sglue+0x22>
 8006506:	6824      	ldr	r4, [r4, #0]
 8006508:	2c00      	cmp	r4, #0
 800650a:	d1f7      	bne.n	80064fc <_fwalk_sglue+0xc>
 800650c:	4630      	mov	r0, r6
 800650e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006512:	89ab      	ldrh	r3, [r5, #12]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d907      	bls.n	8006528 <_fwalk_sglue+0x38>
 8006518:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800651c:	3301      	adds	r3, #1
 800651e:	d003      	beq.n	8006528 <_fwalk_sglue+0x38>
 8006520:	4629      	mov	r1, r5
 8006522:	4638      	mov	r0, r7
 8006524:	47c0      	blx	r8
 8006526:	4306      	orrs	r6, r0
 8006528:	3568      	adds	r5, #104	@ 0x68
 800652a:	e7e9      	b.n	8006500 <_fwalk_sglue+0x10>

0800652c <iprintf>:
 800652c:	b40f      	push	{r0, r1, r2, r3}
 800652e:	b507      	push	{r0, r1, r2, lr}
 8006530:	4906      	ldr	r1, [pc, #24]	@ (800654c <iprintf+0x20>)
 8006532:	ab04      	add	r3, sp, #16
 8006534:	6808      	ldr	r0, [r1, #0]
 8006536:	f853 2b04 	ldr.w	r2, [r3], #4
 800653a:	6881      	ldr	r1, [r0, #8]
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	f002 fff3 	bl	8009528 <_vfiprintf_r>
 8006542:	b003      	add	sp, #12
 8006544:	f85d eb04 	ldr.w	lr, [sp], #4
 8006548:	b004      	add	sp, #16
 800654a:	4770      	bx	lr
 800654c:	20000030 	.word	0x20000030

08006550 <_puts_r>:
 8006550:	6a03      	ldr	r3, [r0, #32]
 8006552:	b570      	push	{r4, r5, r6, lr}
 8006554:	6884      	ldr	r4, [r0, #8]
 8006556:	4605      	mov	r5, r0
 8006558:	460e      	mov	r6, r1
 800655a:	b90b      	cbnz	r3, 8006560 <_puts_r+0x10>
 800655c:	f7ff ffb0 	bl	80064c0 <__sinit>
 8006560:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006562:	07db      	lsls	r3, r3, #31
 8006564:	d405      	bmi.n	8006572 <_puts_r+0x22>
 8006566:	89a3      	ldrh	r3, [r4, #12]
 8006568:	0598      	lsls	r0, r3, #22
 800656a:	d402      	bmi.n	8006572 <_puts_r+0x22>
 800656c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800656e:	f000 fa00 	bl	8006972 <__retarget_lock_acquire_recursive>
 8006572:	89a3      	ldrh	r3, [r4, #12]
 8006574:	0719      	lsls	r1, r3, #28
 8006576:	d502      	bpl.n	800657e <_puts_r+0x2e>
 8006578:	6923      	ldr	r3, [r4, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d135      	bne.n	80065ea <_puts_r+0x9a>
 800657e:	4621      	mov	r1, r4
 8006580:	4628      	mov	r0, r5
 8006582:	f000 f911 	bl	80067a8 <__swsetup_r>
 8006586:	b380      	cbz	r0, 80065ea <_puts_r+0x9a>
 8006588:	f04f 35ff 	mov.w	r5, #4294967295
 800658c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800658e:	07da      	lsls	r2, r3, #31
 8006590:	d405      	bmi.n	800659e <_puts_r+0x4e>
 8006592:	89a3      	ldrh	r3, [r4, #12]
 8006594:	059b      	lsls	r3, r3, #22
 8006596:	d402      	bmi.n	800659e <_puts_r+0x4e>
 8006598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800659a:	f000 f9eb 	bl	8006974 <__retarget_lock_release_recursive>
 800659e:	4628      	mov	r0, r5
 80065a0:	bd70      	pop	{r4, r5, r6, pc}
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	da04      	bge.n	80065b0 <_puts_r+0x60>
 80065a6:	69a2      	ldr	r2, [r4, #24]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	dc17      	bgt.n	80065dc <_puts_r+0x8c>
 80065ac:	290a      	cmp	r1, #10
 80065ae:	d015      	beq.n	80065dc <_puts_r+0x8c>
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	6022      	str	r2, [r4, #0]
 80065b6:	7019      	strb	r1, [r3, #0]
 80065b8:	68a3      	ldr	r3, [r4, #8]
 80065ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065be:	3b01      	subs	r3, #1
 80065c0:	60a3      	str	r3, [r4, #8]
 80065c2:	2900      	cmp	r1, #0
 80065c4:	d1ed      	bne.n	80065a2 <_puts_r+0x52>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	da11      	bge.n	80065ee <_puts_r+0x9e>
 80065ca:	4622      	mov	r2, r4
 80065cc:	210a      	movs	r1, #10
 80065ce:	4628      	mov	r0, r5
 80065d0:	f000 f8ab 	bl	800672a <__swbuf_r>
 80065d4:	3001      	adds	r0, #1
 80065d6:	d0d7      	beq.n	8006588 <_puts_r+0x38>
 80065d8:	250a      	movs	r5, #10
 80065da:	e7d7      	b.n	800658c <_puts_r+0x3c>
 80065dc:	4622      	mov	r2, r4
 80065de:	4628      	mov	r0, r5
 80065e0:	f000 f8a3 	bl	800672a <__swbuf_r>
 80065e4:	3001      	adds	r0, #1
 80065e6:	d1e7      	bne.n	80065b8 <_puts_r+0x68>
 80065e8:	e7ce      	b.n	8006588 <_puts_r+0x38>
 80065ea:	3e01      	subs	r6, #1
 80065ec:	e7e4      	b.n	80065b8 <_puts_r+0x68>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	6022      	str	r2, [r4, #0]
 80065f4:	220a      	movs	r2, #10
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	e7ee      	b.n	80065d8 <_puts_r+0x88>
	...

080065fc <puts>:
 80065fc:	4b02      	ldr	r3, [pc, #8]	@ (8006608 <puts+0xc>)
 80065fe:	4601      	mov	r1, r0
 8006600:	6818      	ldr	r0, [r3, #0]
 8006602:	f7ff bfa5 	b.w	8006550 <_puts_r>
 8006606:	bf00      	nop
 8006608:	20000030 	.word	0x20000030

0800660c <siprintf>:
 800660c:	b40e      	push	{r1, r2, r3}
 800660e:	b500      	push	{lr}
 8006610:	b09c      	sub	sp, #112	@ 0x70
 8006612:	ab1d      	add	r3, sp, #116	@ 0x74
 8006614:	9002      	str	r0, [sp, #8]
 8006616:	9006      	str	r0, [sp, #24]
 8006618:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800661c:	4809      	ldr	r0, [pc, #36]	@ (8006644 <siprintf+0x38>)
 800661e:	9107      	str	r1, [sp, #28]
 8006620:	9104      	str	r1, [sp, #16]
 8006622:	4909      	ldr	r1, [pc, #36]	@ (8006648 <siprintf+0x3c>)
 8006624:	f853 2b04 	ldr.w	r2, [r3], #4
 8006628:	9105      	str	r1, [sp, #20]
 800662a:	6800      	ldr	r0, [r0, #0]
 800662c:	9301      	str	r3, [sp, #4]
 800662e:	a902      	add	r1, sp, #8
 8006630:	f002 fc88 	bl	8008f44 <_svfiprintf_r>
 8006634:	9b02      	ldr	r3, [sp, #8]
 8006636:	2200      	movs	r2, #0
 8006638:	701a      	strb	r2, [r3, #0]
 800663a:	b01c      	add	sp, #112	@ 0x70
 800663c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006640:	b003      	add	sp, #12
 8006642:	4770      	bx	lr
 8006644:	20000030 	.word	0x20000030
 8006648:	ffff0208 	.word	0xffff0208

0800664c <siscanf>:
 800664c:	b40e      	push	{r1, r2, r3}
 800664e:	b530      	push	{r4, r5, lr}
 8006650:	b09c      	sub	sp, #112	@ 0x70
 8006652:	ac1f      	add	r4, sp, #124	@ 0x7c
 8006654:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8006658:	f854 5b04 	ldr.w	r5, [r4], #4
 800665c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006660:	9002      	str	r0, [sp, #8]
 8006662:	9006      	str	r0, [sp, #24]
 8006664:	f7f9 fe04 	bl	8000270 <strlen>
 8006668:	4b0b      	ldr	r3, [pc, #44]	@ (8006698 <siscanf+0x4c>)
 800666a:	9003      	str	r0, [sp, #12]
 800666c:	9007      	str	r0, [sp, #28]
 800666e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006670:	480a      	ldr	r0, [pc, #40]	@ (800669c <siscanf+0x50>)
 8006672:	9401      	str	r4, [sp, #4]
 8006674:	2300      	movs	r3, #0
 8006676:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006678:	9314      	str	r3, [sp, #80]	@ 0x50
 800667a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800667e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006682:	462a      	mov	r2, r5
 8006684:	4623      	mov	r3, r4
 8006686:	a902      	add	r1, sp, #8
 8006688:	6800      	ldr	r0, [r0, #0]
 800668a:	f002 fdaf 	bl	80091ec <__ssvfiscanf_r>
 800668e:	b01c      	add	sp, #112	@ 0x70
 8006690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006694:	b003      	add	sp, #12
 8006696:	4770      	bx	lr
 8006698:	080066c3 	.word	0x080066c3
 800669c:	20000030 	.word	0x20000030

080066a0 <__sread>:
 80066a0:	b510      	push	{r4, lr}
 80066a2:	460c      	mov	r4, r1
 80066a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a8:	f000 f914 	bl	80068d4 <_read_r>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	bfab      	itete	ge
 80066b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80066b2:	89a3      	ldrhlt	r3, [r4, #12]
 80066b4:	181b      	addge	r3, r3, r0
 80066b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80066ba:	bfac      	ite	ge
 80066bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80066be:	81a3      	strhlt	r3, [r4, #12]
 80066c0:	bd10      	pop	{r4, pc}

080066c2 <__seofread>:
 80066c2:	2000      	movs	r0, #0
 80066c4:	4770      	bx	lr

080066c6 <__swrite>:
 80066c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ca:	461f      	mov	r7, r3
 80066cc:	898b      	ldrh	r3, [r1, #12]
 80066ce:	05db      	lsls	r3, r3, #23
 80066d0:	4605      	mov	r5, r0
 80066d2:	460c      	mov	r4, r1
 80066d4:	4616      	mov	r6, r2
 80066d6:	d505      	bpl.n	80066e4 <__swrite+0x1e>
 80066d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066dc:	2302      	movs	r3, #2
 80066de:	2200      	movs	r2, #0
 80066e0:	f000 f8e6 	bl	80068b0 <_lseek_r>
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066ee:	81a3      	strh	r3, [r4, #12]
 80066f0:	4632      	mov	r2, r6
 80066f2:	463b      	mov	r3, r7
 80066f4:	4628      	mov	r0, r5
 80066f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066fa:	f000 b8fd 	b.w	80068f8 <_write_r>

080066fe <__sseek>:
 80066fe:	b510      	push	{r4, lr}
 8006700:	460c      	mov	r4, r1
 8006702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006706:	f000 f8d3 	bl	80068b0 <_lseek_r>
 800670a:	1c43      	adds	r3, r0, #1
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	bf15      	itete	ne
 8006710:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006712:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006716:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800671a:	81a3      	strheq	r3, [r4, #12]
 800671c:	bf18      	it	ne
 800671e:	81a3      	strhne	r3, [r4, #12]
 8006720:	bd10      	pop	{r4, pc}

08006722 <__sclose>:
 8006722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006726:	f000 b8b3 	b.w	8006890 <_close_r>

0800672a <__swbuf_r>:
 800672a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672c:	460e      	mov	r6, r1
 800672e:	4614      	mov	r4, r2
 8006730:	4605      	mov	r5, r0
 8006732:	b118      	cbz	r0, 800673c <__swbuf_r+0x12>
 8006734:	6a03      	ldr	r3, [r0, #32]
 8006736:	b90b      	cbnz	r3, 800673c <__swbuf_r+0x12>
 8006738:	f7ff fec2 	bl	80064c0 <__sinit>
 800673c:	69a3      	ldr	r3, [r4, #24]
 800673e:	60a3      	str	r3, [r4, #8]
 8006740:	89a3      	ldrh	r3, [r4, #12]
 8006742:	071a      	lsls	r2, r3, #28
 8006744:	d501      	bpl.n	800674a <__swbuf_r+0x20>
 8006746:	6923      	ldr	r3, [r4, #16]
 8006748:	b943      	cbnz	r3, 800675c <__swbuf_r+0x32>
 800674a:	4621      	mov	r1, r4
 800674c:	4628      	mov	r0, r5
 800674e:	f000 f82b 	bl	80067a8 <__swsetup_r>
 8006752:	b118      	cbz	r0, 800675c <__swbuf_r+0x32>
 8006754:	f04f 37ff 	mov.w	r7, #4294967295
 8006758:	4638      	mov	r0, r7
 800675a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	6922      	ldr	r2, [r4, #16]
 8006760:	1a98      	subs	r0, r3, r2
 8006762:	6963      	ldr	r3, [r4, #20]
 8006764:	b2f6      	uxtb	r6, r6
 8006766:	4283      	cmp	r3, r0
 8006768:	4637      	mov	r7, r6
 800676a:	dc05      	bgt.n	8006778 <__swbuf_r+0x4e>
 800676c:	4621      	mov	r1, r4
 800676e:	4628      	mov	r0, r5
 8006770:	f003 f9c4 	bl	8009afc <_fflush_r>
 8006774:	2800      	cmp	r0, #0
 8006776:	d1ed      	bne.n	8006754 <__swbuf_r+0x2a>
 8006778:	68a3      	ldr	r3, [r4, #8]
 800677a:	3b01      	subs	r3, #1
 800677c:	60a3      	str	r3, [r4, #8]
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	6022      	str	r2, [r4, #0]
 8006784:	701e      	strb	r6, [r3, #0]
 8006786:	6962      	ldr	r2, [r4, #20]
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	429a      	cmp	r2, r3
 800678c:	d004      	beq.n	8006798 <__swbuf_r+0x6e>
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	07db      	lsls	r3, r3, #31
 8006792:	d5e1      	bpl.n	8006758 <__swbuf_r+0x2e>
 8006794:	2e0a      	cmp	r6, #10
 8006796:	d1df      	bne.n	8006758 <__swbuf_r+0x2e>
 8006798:	4621      	mov	r1, r4
 800679a:	4628      	mov	r0, r5
 800679c:	f003 f9ae 	bl	8009afc <_fflush_r>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d0d9      	beq.n	8006758 <__swbuf_r+0x2e>
 80067a4:	e7d6      	b.n	8006754 <__swbuf_r+0x2a>
	...

080067a8 <__swsetup_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4b29      	ldr	r3, [pc, #164]	@ (8006850 <__swsetup_r+0xa8>)
 80067ac:	4605      	mov	r5, r0
 80067ae:	6818      	ldr	r0, [r3, #0]
 80067b0:	460c      	mov	r4, r1
 80067b2:	b118      	cbz	r0, 80067bc <__swsetup_r+0x14>
 80067b4:	6a03      	ldr	r3, [r0, #32]
 80067b6:	b90b      	cbnz	r3, 80067bc <__swsetup_r+0x14>
 80067b8:	f7ff fe82 	bl	80064c0 <__sinit>
 80067bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067c0:	0719      	lsls	r1, r3, #28
 80067c2:	d422      	bmi.n	800680a <__swsetup_r+0x62>
 80067c4:	06da      	lsls	r2, r3, #27
 80067c6:	d407      	bmi.n	80067d8 <__swsetup_r+0x30>
 80067c8:	2209      	movs	r2, #9
 80067ca:	602a      	str	r2, [r5, #0]
 80067cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067d0:	81a3      	strh	r3, [r4, #12]
 80067d2:	f04f 30ff 	mov.w	r0, #4294967295
 80067d6:	e033      	b.n	8006840 <__swsetup_r+0x98>
 80067d8:	0758      	lsls	r0, r3, #29
 80067da:	d512      	bpl.n	8006802 <__swsetup_r+0x5a>
 80067dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067de:	b141      	cbz	r1, 80067f2 <__swsetup_r+0x4a>
 80067e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067e4:	4299      	cmp	r1, r3
 80067e6:	d002      	beq.n	80067ee <__swsetup_r+0x46>
 80067e8:	4628      	mov	r0, r5
 80067ea:	f000 ff19 	bl	8007620 <_free_r>
 80067ee:	2300      	movs	r3, #0
 80067f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80067f8:	81a3      	strh	r3, [r4, #12]
 80067fa:	2300      	movs	r3, #0
 80067fc:	6063      	str	r3, [r4, #4]
 80067fe:	6923      	ldr	r3, [r4, #16]
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	f043 0308 	orr.w	r3, r3, #8
 8006808:	81a3      	strh	r3, [r4, #12]
 800680a:	6923      	ldr	r3, [r4, #16]
 800680c:	b94b      	cbnz	r3, 8006822 <__swsetup_r+0x7a>
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006818:	d003      	beq.n	8006822 <__swsetup_r+0x7a>
 800681a:	4621      	mov	r1, r4
 800681c:	4628      	mov	r0, r5
 800681e:	f003 f9bb 	bl	8009b98 <__smakebuf_r>
 8006822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006826:	f013 0201 	ands.w	r2, r3, #1
 800682a:	d00a      	beq.n	8006842 <__swsetup_r+0x9a>
 800682c:	2200      	movs	r2, #0
 800682e:	60a2      	str	r2, [r4, #8]
 8006830:	6962      	ldr	r2, [r4, #20]
 8006832:	4252      	negs	r2, r2
 8006834:	61a2      	str	r2, [r4, #24]
 8006836:	6922      	ldr	r2, [r4, #16]
 8006838:	b942      	cbnz	r2, 800684c <__swsetup_r+0xa4>
 800683a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800683e:	d1c5      	bne.n	80067cc <__swsetup_r+0x24>
 8006840:	bd38      	pop	{r3, r4, r5, pc}
 8006842:	0799      	lsls	r1, r3, #30
 8006844:	bf58      	it	pl
 8006846:	6962      	ldrpl	r2, [r4, #20]
 8006848:	60a2      	str	r2, [r4, #8]
 800684a:	e7f4      	b.n	8006836 <__swsetup_r+0x8e>
 800684c:	2000      	movs	r0, #0
 800684e:	e7f7      	b.n	8006840 <__swsetup_r+0x98>
 8006850:	20000030 	.word	0x20000030

08006854 <memset>:
 8006854:	4402      	add	r2, r0
 8006856:	4603      	mov	r3, r0
 8006858:	4293      	cmp	r3, r2
 800685a:	d100      	bne.n	800685e <memset+0xa>
 800685c:	4770      	bx	lr
 800685e:	f803 1b01 	strb.w	r1, [r3], #1
 8006862:	e7f9      	b.n	8006858 <memset+0x4>

08006864 <strncmp>:
 8006864:	b510      	push	{r4, lr}
 8006866:	b16a      	cbz	r2, 8006884 <strncmp+0x20>
 8006868:	3901      	subs	r1, #1
 800686a:	1884      	adds	r4, r0, r2
 800686c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006870:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006874:	429a      	cmp	r2, r3
 8006876:	d103      	bne.n	8006880 <strncmp+0x1c>
 8006878:	42a0      	cmp	r0, r4
 800687a:	d001      	beq.n	8006880 <strncmp+0x1c>
 800687c:	2a00      	cmp	r2, #0
 800687e:	d1f5      	bne.n	800686c <strncmp+0x8>
 8006880:	1ad0      	subs	r0, r2, r3
 8006882:	bd10      	pop	{r4, pc}
 8006884:	4610      	mov	r0, r2
 8006886:	e7fc      	b.n	8006882 <strncmp+0x1e>

08006888 <_localeconv_r>:
 8006888:	4800      	ldr	r0, [pc, #0]	@ (800688c <_localeconv_r+0x4>)
 800688a:	4770      	bx	lr
 800688c:	20000170 	.word	0x20000170

08006890 <_close_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4d06      	ldr	r5, [pc, #24]	@ (80068ac <_close_r+0x1c>)
 8006894:	2300      	movs	r3, #0
 8006896:	4604      	mov	r4, r0
 8006898:	4608      	mov	r0, r1
 800689a:	602b      	str	r3, [r5, #0]
 800689c:	f7fb f9e4 	bl	8001c68 <_close>
 80068a0:	1c43      	adds	r3, r0, #1
 80068a2:	d102      	bne.n	80068aa <_close_r+0x1a>
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	b103      	cbz	r3, 80068aa <_close_r+0x1a>
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	bd38      	pop	{r3, r4, r5, pc}
 80068ac:	20000564 	.word	0x20000564

080068b0 <_lseek_r>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	4d07      	ldr	r5, [pc, #28]	@ (80068d0 <_lseek_r+0x20>)
 80068b4:	4604      	mov	r4, r0
 80068b6:	4608      	mov	r0, r1
 80068b8:	4611      	mov	r1, r2
 80068ba:	2200      	movs	r2, #0
 80068bc:	602a      	str	r2, [r5, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	f7fb f9f9 	bl	8001cb6 <_lseek>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	d102      	bne.n	80068ce <_lseek_r+0x1e>
 80068c8:	682b      	ldr	r3, [r5, #0]
 80068ca:	b103      	cbz	r3, 80068ce <_lseek_r+0x1e>
 80068cc:	6023      	str	r3, [r4, #0]
 80068ce:	bd38      	pop	{r3, r4, r5, pc}
 80068d0:	20000564 	.word	0x20000564

080068d4 <_read_r>:
 80068d4:	b538      	push	{r3, r4, r5, lr}
 80068d6:	4d07      	ldr	r5, [pc, #28]	@ (80068f4 <_read_r+0x20>)
 80068d8:	4604      	mov	r4, r0
 80068da:	4608      	mov	r0, r1
 80068dc:	4611      	mov	r1, r2
 80068de:	2200      	movs	r2, #0
 80068e0:	602a      	str	r2, [r5, #0]
 80068e2:	461a      	mov	r2, r3
 80068e4:	f7fb f9a3 	bl	8001c2e <_read>
 80068e8:	1c43      	adds	r3, r0, #1
 80068ea:	d102      	bne.n	80068f2 <_read_r+0x1e>
 80068ec:	682b      	ldr	r3, [r5, #0]
 80068ee:	b103      	cbz	r3, 80068f2 <_read_r+0x1e>
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	bd38      	pop	{r3, r4, r5, pc}
 80068f4:	20000564 	.word	0x20000564

080068f8 <_write_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4d07      	ldr	r5, [pc, #28]	@ (8006918 <_write_r+0x20>)
 80068fc:	4604      	mov	r4, r0
 80068fe:	4608      	mov	r0, r1
 8006900:	4611      	mov	r1, r2
 8006902:	2200      	movs	r2, #0
 8006904:	602a      	str	r2, [r5, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	f7fa fdd0 	bl	80014ac <_write>
 800690c:	1c43      	adds	r3, r0, #1
 800690e:	d102      	bne.n	8006916 <_write_r+0x1e>
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	b103      	cbz	r3, 8006916 <_write_r+0x1e>
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	bd38      	pop	{r3, r4, r5, pc}
 8006918:	20000564 	.word	0x20000564

0800691c <__errno>:
 800691c:	4b01      	ldr	r3, [pc, #4]	@ (8006924 <__errno+0x8>)
 800691e:	6818      	ldr	r0, [r3, #0]
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	20000030 	.word	0x20000030

08006928 <__libc_init_array>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	4d0d      	ldr	r5, [pc, #52]	@ (8006960 <__libc_init_array+0x38>)
 800692c:	4c0d      	ldr	r4, [pc, #52]	@ (8006964 <__libc_init_array+0x3c>)
 800692e:	1b64      	subs	r4, r4, r5
 8006930:	10a4      	asrs	r4, r4, #2
 8006932:	2600      	movs	r6, #0
 8006934:	42a6      	cmp	r6, r4
 8006936:	d109      	bne.n	800694c <__libc_init_array+0x24>
 8006938:	4d0b      	ldr	r5, [pc, #44]	@ (8006968 <__libc_init_array+0x40>)
 800693a:	4c0c      	ldr	r4, [pc, #48]	@ (800696c <__libc_init_array+0x44>)
 800693c:	f003 fed0 	bl	800a6e0 <_init>
 8006940:	1b64      	subs	r4, r4, r5
 8006942:	10a4      	asrs	r4, r4, #2
 8006944:	2600      	movs	r6, #0
 8006946:	42a6      	cmp	r6, r4
 8006948:	d105      	bne.n	8006956 <__libc_init_array+0x2e>
 800694a:	bd70      	pop	{r4, r5, r6, pc}
 800694c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006950:	4798      	blx	r3
 8006952:	3601      	adds	r6, #1
 8006954:	e7ee      	b.n	8006934 <__libc_init_array+0xc>
 8006956:	f855 3b04 	ldr.w	r3, [r5], #4
 800695a:	4798      	blx	r3
 800695c:	3601      	adds	r6, #1
 800695e:	e7f2      	b.n	8006946 <__libc_init_array+0x1e>
 8006960:	0800ac74 	.word	0x0800ac74
 8006964:	0800ac74 	.word	0x0800ac74
 8006968:	0800ac74 	.word	0x0800ac74
 800696c:	0800ac78 	.word	0x0800ac78

08006970 <__retarget_lock_init_recursive>:
 8006970:	4770      	bx	lr

08006972 <__retarget_lock_acquire_recursive>:
 8006972:	4770      	bx	lr

08006974 <__retarget_lock_release_recursive>:
 8006974:	4770      	bx	lr
	...

08006978 <nanf>:
 8006978:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006980 <nanf+0x8>
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	7fc00000 	.word	0x7fc00000

08006984 <quorem>:
 8006984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006988:	6903      	ldr	r3, [r0, #16]
 800698a:	690c      	ldr	r4, [r1, #16]
 800698c:	42a3      	cmp	r3, r4
 800698e:	4607      	mov	r7, r0
 8006990:	db7e      	blt.n	8006a90 <quorem+0x10c>
 8006992:	3c01      	subs	r4, #1
 8006994:	f101 0814 	add.w	r8, r1, #20
 8006998:	00a3      	lsls	r3, r4, #2
 800699a:	f100 0514 	add.w	r5, r0, #20
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069a4:	9301      	str	r3, [sp, #4]
 80069a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069ae:	3301      	adds	r3, #1
 80069b0:	429a      	cmp	r2, r3
 80069b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80069ba:	d32e      	bcc.n	8006a1a <quorem+0x96>
 80069bc:	f04f 0a00 	mov.w	sl, #0
 80069c0:	46c4      	mov	ip, r8
 80069c2:	46ae      	mov	lr, r5
 80069c4:	46d3      	mov	fp, sl
 80069c6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80069ca:	b298      	uxth	r0, r3
 80069cc:	fb06 a000 	mla	r0, r6, r0, sl
 80069d0:	0c02      	lsrs	r2, r0, #16
 80069d2:	0c1b      	lsrs	r3, r3, #16
 80069d4:	fb06 2303 	mla	r3, r6, r3, r2
 80069d8:	f8de 2000 	ldr.w	r2, [lr]
 80069dc:	b280      	uxth	r0, r0
 80069de:	b292      	uxth	r2, r2
 80069e0:	1a12      	subs	r2, r2, r0
 80069e2:	445a      	add	r2, fp
 80069e4:	f8de 0000 	ldr.w	r0, [lr]
 80069e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80069f2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80069f6:	b292      	uxth	r2, r2
 80069f8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80069fc:	45e1      	cmp	r9, ip
 80069fe:	f84e 2b04 	str.w	r2, [lr], #4
 8006a02:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006a06:	d2de      	bcs.n	80069c6 <quorem+0x42>
 8006a08:	9b00      	ldr	r3, [sp, #0]
 8006a0a:	58eb      	ldr	r3, [r5, r3]
 8006a0c:	b92b      	cbnz	r3, 8006a1a <quorem+0x96>
 8006a0e:	9b01      	ldr	r3, [sp, #4]
 8006a10:	3b04      	subs	r3, #4
 8006a12:	429d      	cmp	r5, r3
 8006a14:	461a      	mov	r2, r3
 8006a16:	d32f      	bcc.n	8006a78 <quorem+0xf4>
 8006a18:	613c      	str	r4, [r7, #16]
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	f001 f9c4 	bl	8007da8 <__mcmp>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	db25      	blt.n	8006a70 <quorem+0xec>
 8006a24:	4629      	mov	r1, r5
 8006a26:	2000      	movs	r0, #0
 8006a28:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a2c:	f8d1 c000 	ldr.w	ip, [r1]
 8006a30:	fa1f fe82 	uxth.w	lr, r2
 8006a34:	fa1f f38c 	uxth.w	r3, ip
 8006a38:	eba3 030e 	sub.w	r3, r3, lr
 8006a3c:	4403      	add	r3, r0
 8006a3e:	0c12      	lsrs	r2, r2, #16
 8006a40:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006a44:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a4e:	45c1      	cmp	r9, r8
 8006a50:	f841 3b04 	str.w	r3, [r1], #4
 8006a54:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a58:	d2e6      	bcs.n	8006a28 <quorem+0xa4>
 8006a5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a62:	b922      	cbnz	r2, 8006a6e <quorem+0xea>
 8006a64:	3b04      	subs	r3, #4
 8006a66:	429d      	cmp	r5, r3
 8006a68:	461a      	mov	r2, r3
 8006a6a:	d30b      	bcc.n	8006a84 <quorem+0x100>
 8006a6c:	613c      	str	r4, [r7, #16]
 8006a6e:	3601      	adds	r6, #1
 8006a70:	4630      	mov	r0, r6
 8006a72:	b003      	add	sp, #12
 8006a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a78:	6812      	ldr	r2, [r2, #0]
 8006a7a:	3b04      	subs	r3, #4
 8006a7c:	2a00      	cmp	r2, #0
 8006a7e:	d1cb      	bne.n	8006a18 <quorem+0x94>
 8006a80:	3c01      	subs	r4, #1
 8006a82:	e7c6      	b.n	8006a12 <quorem+0x8e>
 8006a84:	6812      	ldr	r2, [r2, #0]
 8006a86:	3b04      	subs	r3, #4
 8006a88:	2a00      	cmp	r2, #0
 8006a8a:	d1ef      	bne.n	8006a6c <quorem+0xe8>
 8006a8c:	3c01      	subs	r4, #1
 8006a8e:	e7ea      	b.n	8006a66 <quorem+0xe2>
 8006a90:	2000      	movs	r0, #0
 8006a92:	e7ee      	b.n	8006a72 <quorem+0xee>
 8006a94:	0000      	movs	r0, r0
	...

08006a98 <_dtoa_r>:
 8006a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9c:	69c7      	ldr	r7, [r0, #28]
 8006a9e:	b099      	sub	sp, #100	@ 0x64
 8006aa0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006aa4:	ec55 4b10 	vmov	r4, r5, d0
 8006aa8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006aaa:	9109      	str	r1, [sp, #36]	@ 0x24
 8006aac:	4683      	mov	fp, r0
 8006aae:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ab0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ab2:	b97f      	cbnz	r7, 8006ad4 <_dtoa_r+0x3c>
 8006ab4:	2010      	movs	r0, #16
 8006ab6:	f000 fdfd 	bl	80076b4 <malloc>
 8006aba:	4602      	mov	r2, r0
 8006abc:	f8cb 001c 	str.w	r0, [fp, #28]
 8006ac0:	b920      	cbnz	r0, 8006acc <_dtoa_r+0x34>
 8006ac2:	4ba7      	ldr	r3, [pc, #668]	@ (8006d60 <_dtoa_r+0x2c8>)
 8006ac4:	21ef      	movs	r1, #239	@ 0xef
 8006ac6:	48a7      	ldr	r0, [pc, #668]	@ (8006d64 <_dtoa_r+0x2cc>)
 8006ac8:	f003 f97a 	bl	8009dc0 <__assert_func>
 8006acc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006ad0:	6007      	str	r7, [r0, #0]
 8006ad2:	60c7      	str	r7, [r0, #12]
 8006ad4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ad8:	6819      	ldr	r1, [r3, #0]
 8006ada:	b159      	cbz	r1, 8006af4 <_dtoa_r+0x5c>
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	604a      	str	r2, [r1, #4]
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	4093      	lsls	r3, r2
 8006ae4:	608b      	str	r3, [r1, #8]
 8006ae6:	4658      	mov	r0, fp
 8006ae8:	f000 feda 	bl	80078a0 <_Bfree>
 8006aec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	1e2b      	subs	r3, r5, #0
 8006af6:	bfb9      	ittee	lt
 8006af8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006afc:	9303      	strlt	r3, [sp, #12]
 8006afe:	2300      	movge	r3, #0
 8006b00:	6033      	strge	r3, [r6, #0]
 8006b02:	9f03      	ldr	r7, [sp, #12]
 8006b04:	4b98      	ldr	r3, [pc, #608]	@ (8006d68 <_dtoa_r+0x2d0>)
 8006b06:	bfbc      	itt	lt
 8006b08:	2201      	movlt	r2, #1
 8006b0a:	6032      	strlt	r2, [r6, #0]
 8006b0c:	43bb      	bics	r3, r7
 8006b0e:	d112      	bne.n	8006b36 <_dtoa_r+0x9e>
 8006b10:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b12:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006b16:	6013      	str	r3, [r2, #0]
 8006b18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b1c:	4323      	orrs	r3, r4
 8006b1e:	f000 854d 	beq.w	80075bc <_dtoa_r+0xb24>
 8006b22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b24:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006d7c <_dtoa_r+0x2e4>
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 854f 	beq.w	80075cc <_dtoa_r+0xb34>
 8006b2e:	f10a 0303 	add.w	r3, sl, #3
 8006b32:	f000 bd49 	b.w	80075c8 <_dtoa_r+0xb30>
 8006b36:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	ec51 0b17 	vmov	r0, r1, d7
 8006b40:	2300      	movs	r3, #0
 8006b42:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006b46:	f7f9 ffbf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b4a:	4680      	mov	r8, r0
 8006b4c:	b158      	cbz	r0, 8006b66 <_dtoa_r+0xce>
 8006b4e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b50:	2301      	movs	r3, #1
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b56:	b113      	cbz	r3, 8006b5e <_dtoa_r+0xc6>
 8006b58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006b5a:	4b84      	ldr	r3, [pc, #528]	@ (8006d6c <_dtoa_r+0x2d4>)
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006d80 <_dtoa_r+0x2e8>
 8006b62:	f000 bd33 	b.w	80075cc <_dtoa_r+0xb34>
 8006b66:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006b6a:	aa16      	add	r2, sp, #88	@ 0x58
 8006b6c:	a917      	add	r1, sp, #92	@ 0x5c
 8006b6e:	4658      	mov	r0, fp
 8006b70:	f001 fa3a 	bl	8007fe8 <__d2b>
 8006b74:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006b78:	4681      	mov	r9, r0
 8006b7a:	2e00      	cmp	r6, #0
 8006b7c:	d077      	beq.n	8006c6e <_dtoa_r+0x1d6>
 8006b7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b80:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b8c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b90:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b94:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b98:	4619      	mov	r1, r3
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	4b74      	ldr	r3, [pc, #464]	@ (8006d70 <_dtoa_r+0x2d8>)
 8006b9e:	f7f9 fb73 	bl	8000288 <__aeabi_dsub>
 8006ba2:	a369      	add	r3, pc, #420	@ (adr r3, 8006d48 <_dtoa_r+0x2b0>)
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	f7f9 fd26 	bl	80005f8 <__aeabi_dmul>
 8006bac:	a368      	add	r3, pc, #416	@ (adr r3, 8006d50 <_dtoa_r+0x2b8>)
 8006bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb2:	f7f9 fb6b 	bl	800028c <__adddf3>
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	4630      	mov	r0, r6
 8006bba:	460d      	mov	r5, r1
 8006bbc:	f7f9 fcb2 	bl	8000524 <__aeabi_i2d>
 8006bc0:	a365      	add	r3, pc, #404	@ (adr r3, 8006d58 <_dtoa_r+0x2c0>)
 8006bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc6:	f7f9 fd17 	bl	80005f8 <__aeabi_dmul>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4620      	mov	r0, r4
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	f7f9 fb5b 	bl	800028c <__adddf3>
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	460d      	mov	r5, r1
 8006bda:	f7f9 ffbd 	bl	8000b58 <__aeabi_d2iz>
 8006bde:	2200      	movs	r2, #0
 8006be0:	4607      	mov	r7, r0
 8006be2:	2300      	movs	r3, #0
 8006be4:	4620      	mov	r0, r4
 8006be6:	4629      	mov	r1, r5
 8006be8:	f7f9 ff78 	bl	8000adc <__aeabi_dcmplt>
 8006bec:	b140      	cbz	r0, 8006c00 <_dtoa_r+0x168>
 8006bee:	4638      	mov	r0, r7
 8006bf0:	f7f9 fc98 	bl	8000524 <__aeabi_i2d>
 8006bf4:	4622      	mov	r2, r4
 8006bf6:	462b      	mov	r3, r5
 8006bf8:	f7f9 ff66 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bfc:	b900      	cbnz	r0, 8006c00 <_dtoa_r+0x168>
 8006bfe:	3f01      	subs	r7, #1
 8006c00:	2f16      	cmp	r7, #22
 8006c02:	d851      	bhi.n	8006ca8 <_dtoa_r+0x210>
 8006c04:	4b5b      	ldr	r3, [pc, #364]	@ (8006d74 <_dtoa_r+0x2dc>)
 8006c06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c12:	f7f9 ff63 	bl	8000adc <__aeabi_dcmplt>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d048      	beq.n	8006cac <_dtoa_r+0x214>
 8006c1a:	3f01      	subs	r7, #1
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006c20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006c22:	1b9b      	subs	r3, r3, r6
 8006c24:	1e5a      	subs	r2, r3, #1
 8006c26:	bf44      	itt	mi
 8006c28:	f1c3 0801 	rsbmi	r8, r3, #1
 8006c2c:	2300      	movmi	r3, #0
 8006c2e:	9208      	str	r2, [sp, #32]
 8006c30:	bf54      	ite	pl
 8006c32:	f04f 0800 	movpl.w	r8, #0
 8006c36:	9308      	strmi	r3, [sp, #32]
 8006c38:	2f00      	cmp	r7, #0
 8006c3a:	db39      	blt.n	8006cb0 <_dtoa_r+0x218>
 8006c3c:	9b08      	ldr	r3, [sp, #32]
 8006c3e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006c40:	443b      	add	r3, r7
 8006c42:	9308      	str	r3, [sp, #32]
 8006c44:	2300      	movs	r3, #0
 8006c46:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c4a:	2b09      	cmp	r3, #9
 8006c4c:	d864      	bhi.n	8006d18 <_dtoa_r+0x280>
 8006c4e:	2b05      	cmp	r3, #5
 8006c50:	bfc4      	itt	gt
 8006c52:	3b04      	subgt	r3, #4
 8006c54:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c58:	f1a3 0302 	sub.w	r3, r3, #2
 8006c5c:	bfcc      	ite	gt
 8006c5e:	2400      	movgt	r4, #0
 8006c60:	2401      	movle	r4, #1
 8006c62:	2b03      	cmp	r3, #3
 8006c64:	d863      	bhi.n	8006d2e <_dtoa_r+0x296>
 8006c66:	e8df f003 	tbb	[pc, r3]
 8006c6a:	372a      	.short	0x372a
 8006c6c:	5535      	.short	0x5535
 8006c6e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006c72:	441e      	add	r6, r3
 8006c74:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006c78:	2b20      	cmp	r3, #32
 8006c7a:	bfc1      	itttt	gt
 8006c7c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006c80:	409f      	lslgt	r7, r3
 8006c82:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006c86:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006c8a:	bfd6      	itet	le
 8006c8c:	f1c3 0320 	rsble	r3, r3, #32
 8006c90:	ea47 0003 	orrgt.w	r0, r7, r3
 8006c94:	fa04 f003 	lslle.w	r0, r4, r3
 8006c98:	f7f9 fc34 	bl	8000504 <__aeabi_ui2d>
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ca2:	3e01      	subs	r6, #1
 8006ca4:	9214      	str	r2, [sp, #80]	@ 0x50
 8006ca6:	e777      	b.n	8006b98 <_dtoa_r+0x100>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e7b8      	b.n	8006c1e <_dtoa_r+0x186>
 8006cac:	9012      	str	r0, [sp, #72]	@ 0x48
 8006cae:	e7b7      	b.n	8006c20 <_dtoa_r+0x188>
 8006cb0:	427b      	negs	r3, r7
 8006cb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	eba8 0807 	sub.w	r8, r8, r7
 8006cba:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006cbc:	e7c4      	b.n	8006c48 <_dtoa_r+0x1b0>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	dc35      	bgt.n	8006d34 <_dtoa_r+0x29c>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	9307      	str	r3, [sp, #28]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006cd2:	e00b      	b.n	8006cec <_dtoa_r+0x254>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e7f3      	b.n	8006cc0 <_dtoa_r+0x228>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cde:	18fb      	adds	r3, r7, r3
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	9307      	str	r3, [sp, #28]
 8006ce8:	bfb8      	it	lt
 8006cea:	2301      	movlt	r3, #1
 8006cec:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	f102 0514 	add.w	r5, r2, #20
 8006cf8:	429d      	cmp	r5, r3
 8006cfa:	d91f      	bls.n	8006d3c <_dtoa_r+0x2a4>
 8006cfc:	6041      	str	r1, [r0, #4]
 8006cfe:	4658      	mov	r0, fp
 8006d00:	f000 fd8e 	bl	8007820 <_Balloc>
 8006d04:	4682      	mov	sl, r0
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d13c      	bne.n	8006d84 <_dtoa_r+0x2ec>
 8006d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8006d78 <_dtoa_r+0x2e0>)
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006d12:	e6d8      	b.n	8006ac6 <_dtoa_r+0x2e>
 8006d14:	2301      	movs	r3, #1
 8006d16:	e7e0      	b.n	8006cda <_dtoa_r+0x242>
 8006d18:	2401      	movs	r4, #1
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d1e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d20:	f04f 33ff 	mov.w	r3, #4294967295
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	9307      	str	r3, [sp, #28]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2312      	movs	r3, #18
 8006d2c:	e7d0      	b.n	8006cd0 <_dtoa_r+0x238>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d32:	e7f5      	b.n	8006d20 <_dtoa_r+0x288>
 8006d34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	9307      	str	r3, [sp, #28]
 8006d3a:	e7d7      	b.n	8006cec <_dtoa_r+0x254>
 8006d3c:	3101      	adds	r1, #1
 8006d3e:	0052      	lsls	r2, r2, #1
 8006d40:	e7d8      	b.n	8006cf4 <_dtoa_r+0x25c>
 8006d42:	bf00      	nop
 8006d44:	f3af 8000 	nop.w
 8006d48:	636f4361 	.word	0x636f4361
 8006d4c:	3fd287a7 	.word	0x3fd287a7
 8006d50:	8b60c8b3 	.word	0x8b60c8b3
 8006d54:	3fc68a28 	.word	0x3fc68a28
 8006d58:	509f79fb 	.word	0x509f79fb
 8006d5c:	3fd34413 	.word	0x3fd34413
 8006d60:	0800a864 	.word	0x0800a864
 8006d64:	0800a87b 	.word	0x0800a87b
 8006d68:	7ff00000 	.word	0x7ff00000
 8006d6c:	0800abc1 	.word	0x0800abc1
 8006d70:	3ff80000 	.word	0x3ff80000
 8006d74:	0800a978 	.word	0x0800a978
 8006d78:	0800a8d3 	.word	0x0800a8d3
 8006d7c:	0800a860 	.word	0x0800a860
 8006d80:	0800abc0 	.word	0x0800abc0
 8006d84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d88:	6018      	str	r0, [r3, #0]
 8006d8a:	9b07      	ldr	r3, [sp, #28]
 8006d8c:	2b0e      	cmp	r3, #14
 8006d8e:	f200 80a4 	bhi.w	8006eda <_dtoa_r+0x442>
 8006d92:	2c00      	cmp	r4, #0
 8006d94:	f000 80a1 	beq.w	8006eda <_dtoa_r+0x442>
 8006d98:	2f00      	cmp	r7, #0
 8006d9a:	dd33      	ble.n	8006e04 <_dtoa_r+0x36c>
 8006d9c:	4bad      	ldr	r3, [pc, #692]	@ (8007054 <_dtoa_r+0x5bc>)
 8006d9e:	f007 020f 	and.w	r2, r7, #15
 8006da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006da6:	ed93 7b00 	vldr	d7, [r3]
 8006daa:	05f8      	lsls	r0, r7, #23
 8006dac:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006db0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006db4:	d516      	bpl.n	8006de4 <_dtoa_r+0x34c>
 8006db6:	4ba8      	ldr	r3, [pc, #672]	@ (8007058 <_dtoa_r+0x5c0>)
 8006db8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006dc0:	f7f9 fd44 	bl	800084c <__aeabi_ddiv>
 8006dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dc8:	f004 040f 	and.w	r4, r4, #15
 8006dcc:	2603      	movs	r6, #3
 8006dce:	4da2      	ldr	r5, [pc, #648]	@ (8007058 <_dtoa_r+0x5c0>)
 8006dd0:	b954      	cbnz	r4, 8006de8 <_dtoa_r+0x350>
 8006dd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dda:	f7f9 fd37 	bl	800084c <__aeabi_ddiv>
 8006dde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006de2:	e028      	b.n	8006e36 <_dtoa_r+0x39e>
 8006de4:	2602      	movs	r6, #2
 8006de6:	e7f2      	b.n	8006dce <_dtoa_r+0x336>
 8006de8:	07e1      	lsls	r1, r4, #31
 8006dea:	d508      	bpl.n	8006dfe <_dtoa_r+0x366>
 8006dec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006df0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006df4:	f7f9 fc00 	bl	80005f8 <__aeabi_dmul>
 8006df8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dfc:	3601      	adds	r6, #1
 8006dfe:	1064      	asrs	r4, r4, #1
 8006e00:	3508      	adds	r5, #8
 8006e02:	e7e5      	b.n	8006dd0 <_dtoa_r+0x338>
 8006e04:	f000 80d2 	beq.w	8006fac <_dtoa_r+0x514>
 8006e08:	427c      	negs	r4, r7
 8006e0a:	4b92      	ldr	r3, [pc, #584]	@ (8007054 <_dtoa_r+0x5bc>)
 8006e0c:	4d92      	ldr	r5, [pc, #584]	@ (8007058 <_dtoa_r+0x5c0>)
 8006e0e:	f004 020f 	and.w	r2, r4, #15
 8006e12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e1e:	f7f9 fbeb 	bl	80005f8 <__aeabi_dmul>
 8006e22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e26:	1124      	asrs	r4, r4, #4
 8006e28:	2300      	movs	r3, #0
 8006e2a:	2602      	movs	r6, #2
 8006e2c:	2c00      	cmp	r4, #0
 8006e2e:	f040 80b2 	bne.w	8006f96 <_dtoa_r+0x4fe>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1d3      	bne.n	8006dde <_dtoa_r+0x346>
 8006e36:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006e38:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 80b7 	beq.w	8006fb0 <_dtoa_r+0x518>
 8006e42:	4b86      	ldr	r3, [pc, #536]	@ (800705c <_dtoa_r+0x5c4>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	4620      	mov	r0, r4
 8006e48:	4629      	mov	r1, r5
 8006e4a:	f7f9 fe47 	bl	8000adc <__aeabi_dcmplt>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	f000 80ae 	beq.w	8006fb0 <_dtoa_r+0x518>
 8006e54:	9b07      	ldr	r3, [sp, #28]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 80aa 	beq.w	8006fb0 <_dtoa_r+0x518>
 8006e5c:	9b00      	ldr	r3, [sp, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	dd37      	ble.n	8006ed2 <_dtoa_r+0x43a>
 8006e62:	1e7b      	subs	r3, r7, #1
 8006e64:	9304      	str	r3, [sp, #16]
 8006e66:	4620      	mov	r0, r4
 8006e68:	4b7d      	ldr	r3, [pc, #500]	@ (8007060 <_dtoa_r+0x5c8>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	f7f9 fbc3 	bl	80005f8 <__aeabi_dmul>
 8006e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e76:	9c00      	ldr	r4, [sp, #0]
 8006e78:	3601      	adds	r6, #1
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	f7f9 fb52 	bl	8000524 <__aeabi_i2d>
 8006e80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e84:	f7f9 fbb8 	bl	80005f8 <__aeabi_dmul>
 8006e88:	4b76      	ldr	r3, [pc, #472]	@ (8007064 <_dtoa_r+0x5cc>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f7f9 f9fe 	bl	800028c <__adddf3>
 8006e90:	4605      	mov	r5, r0
 8006e92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e96:	2c00      	cmp	r4, #0
 8006e98:	f040 808d 	bne.w	8006fb6 <_dtoa_r+0x51e>
 8006e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ea0:	4b71      	ldr	r3, [pc, #452]	@ (8007068 <_dtoa_r+0x5d0>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f7f9 f9f0 	bl	8000288 <__aeabi_dsub>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006eb0:	462a      	mov	r2, r5
 8006eb2:	4633      	mov	r3, r6
 8006eb4:	f7f9 fe30 	bl	8000b18 <__aeabi_dcmpgt>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	f040 828b 	bne.w	80073d4 <_dtoa_r+0x93c>
 8006ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ec2:	462a      	mov	r2, r5
 8006ec4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006ec8:	f7f9 fe08 	bl	8000adc <__aeabi_dcmplt>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	f040 8128 	bne.w	8007122 <_dtoa_r+0x68a>
 8006ed2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006ed6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006eda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f2c0 815a 	blt.w	8007196 <_dtoa_r+0x6fe>
 8006ee2:	2f0e      	cmp	r7, #14
 8006ee4:	f300 8157 	bgt.w	8007196 <_dtoa_r+0x6fe>
 8006ee8:	4b5a      	ldr	r3, [pc, #360]	@ (8007054 <_dtoa_r+0x5bc>)
 8006eea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006eee:	ed93 7b00 	vldr	d7, [r3]
 8006ef2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	ed8d 7b00 	vstr	d7, [sp]
 8006efa:	da03      	bge.n	8006f04 <_dtoa_r+0x46c>
 8006efc:	9b07      	ldr	r3, [sp, #28]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f340 8101 	ble.w	8007106 <_dtoa_r+0x66e>
 8006f04:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f08:	4656      	mov	r6, sl
 8006f0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f0e:	4620      	mov	r0, r4
 8006f10:	4629      	mov	r1, r5
 8006f12:	f7f9 fc9b 	bl	800084c <__aeabi_ddiv>
 8006f16:	f7f9 fe1f 	bl	8000b58 <__aeabi_d2iz>
 8006f1a:	4680      	mov	r8, r0
 8006f1c:	f7f9 fb02 	bl	8000524 <__aeabi_i2d>
 8006f20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f24:	f7f9 fb68 	bl	80005f8 <__aeabi_dmul>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	4629      	mov	r1, r5
 8006f30:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006f34:	f7f9 f9a8 	bl	8000288 <__aeabi_dsub>
 8006f38:	f806 4b01 	strb.w	r4, [r6], #1
 8006f3c:	9d07      	ldr	r5, [sp, #28]
 8006f3e:	eba6 040a 	sub.w	r4, r6, sl
 8006f42:	42a5      	cmp	r5, r4
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	f040 8117 	bne.w	800717a <_dtoa_r+0x6e2>
 8006f4c:	f7f9 f99e 	bl	800028c <__adddf3>
 8006f50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f54:	4604      	mov	r4, r0
 8006f56:	460d      	mov	r5, r1
 8006f58:	f7f9 fdde 	bl	8000b18 <__aeabi_dcmpgt>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	f040 80f9 	bne.w	8007154 <_dtoa_r+0x6bc>
 8006f62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f66:	4620      	mov	r0, r4
 8006f68:	4629      	mov	r1, r5
 8006f6a:	f7f9 fdad 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f6e:	b118      	cbz	r0, 8006f78 <_dtoa_r+0x4e0>
 8006f70:	f018 0f01 	tst.w	r8, #1
 8006f74:	f040 80ee 	bne.w	8007154 <_dtoa_r+0x6bc>
 8006f78:	4649      	mov	r1, r9
 8006f7a:	4658      	mov	r0, fp
 8006f7c:	f000 fc90 	bl	80078a0 <_Bfree>
 8006f80:	2300      	movs	r3, #0
 8006f82:	7033      	strb	r3, [r6, #0]
 8006f84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f86:	3701      	adds	r7, #1
 8006f88:	601f      	str	r7, [r3, #0]
 8006f8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 831d 	beq.w	80075cc <_dtoa_r+0xb34>
 8006f92:	601e      	str	r6, [r3, #0]
 8006f94:	e31a      	b.n	80075cc <_dtoa_r+0xb34>
 8006f96:	07e2      	lsls	r2, r4, #31
 8006f98:	d505      	bpl.n	8006fa6 <_dtoa_r+0x50e>
 8006f9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f9e:	f7f9 fb2b 	bl	80005f8 <__aeabi_dmul>
 8006fa2:	3601      	adds	r6, #1
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	1064      	asrs	r4, r4, #1
 8006fa8:	3508      	adds	r5, #8
 8006faa:	e73f      	b.n	8006e2c <_dtoa_r+0x394>
 8006fac:	2602      	movs	r6, #2
 8006fae:	e742      	b.n	8006e36 <_dtoa_r+0x39e>
 8006fb0:	9c07      	ldr	r4, [sp, #28]
 8006fb2:	9704      	str	r7, [sp, #16]
 8006fb4:	e761      	b.n	8006e7a <_dtoa_r+0x3e2>
 8006fb6:	4b27      	ldr	r3, [pc, #156]	@ (8007054 <_dtoa_r+0x5bc>)
 8006fb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006fbe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006fc2:	4454      	add	r4, sl
 8006fc4:	2900      	cmp	r1, #0
 8006fc6:	d053      	beq.n	8007070 <_dtoa_r+0x5d8>
 8006fc8:	4928      	ldr	r1, [pc, #160]	@ (800706c <_dtoa_r+0x5d4>)
 8006fca:	2000      	movs	r0, #0
 8006fcc:	f7f9 fc3e 	bl	800084c <__aeabi_ddiv>
 8006fd0:	4633      	mov	r3, r6
 8006fd2:	462a      	mov	r2, r5
 8006fd4:	f7f9 f958 	bl	8000288 <__aeabi_dsub>
 8006fd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fdc:	4656      	mov	r6, sl
 8006fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fe2:	f7f9 fdb9 	bl	8000b58 <__aeabi_d2iz>
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	f7f9 fa9c 	bl	8000524 <__aeabi_i2d>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ff4:	f7f9 f948 	bl	8000288 <__aeabi_dsub>
 8006ff8:	3530      	adds	r5, #48	@ 0x30
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007002:	f806 5b01 	strb.w	r5, [r6], #1
 8007006:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800700a:	f7f9 fd67 	bl	8000adc <__aeabi_dcmplt>
 800700e:	2800      	cmp	r0, #0
 8007010:	d171      	bne.n	80070f6 <_dtoa_r+0x65e>
 8007012:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007016:	4911      	ldr	r1, [pc, #68]	@ (800705c <_dtoa_r+0x5c4>)
 8007018:	2000      	movs	r0, #0
 800701a:	f7f9 f935 	bl	8000288 <__aeabi_dsub>
 800701e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007022:	f7f9 fd5b 	bl	8000adc <__aeabi_dcmplt>
 8007026:	2800      	cmp	r0, #0
 8007028:	f040 8095 	bne.w	8007156 <_dtoa_r+0x6be>
 800702c:	42a6      	cmp	r6, r4
 800702e:	f43f af50 	beq.w	8006ed2 <_dtoa_r+0x43a>
 8007032:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007036:	4b0a      	ldr	r3, [pc, #40]	@ (8007060 <_dtoa_r+0x5c8>)
 8007038:	2200      	movs	r2, #0
 800703a:	f7f9 fadd 	bl	80005f8 <__aeabi_dmul>
 800703e:	4b08      	ldr	r3, [pc, #32]	@ (8007060 <_dtoa_r+0x5c8>)
 8007040:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007044:	2200      	movs	r2, #0
 8007046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800704a:	f7f9 fad5 	bl	80005f8 <__aeabi_dmul>
 800704e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007052:	e7c4      	b.n	8006fde <_dtoa_r+0x546>
 8007054:	0800a978 	.word	0x0800a978
 8007058:	0800a950 	.word	0x0800a950
 800705c:	3ff00000 	.word	0x3ff00000
 8007060:	40240000 	.word	0x40240000
 8007064:	401c0000 	.word	0x401c0000
 8007068:	40140000 	.word	0x40140000
 800706c:	3fe00000 	.word	0x3fe00000
 8007070:	4631      	mov	r1, r6
 8007072:	4628      	mov	r0, r5
 8007074:	f7f9 fac0 	bl	80005f8 <__aeabi_dmul>
 8007078:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800707c:	9415      	str	r4, [sp, #84]	@ 0x54
 800707e:	4656      	mov	r6, sl
 8007080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007084:	f7f9 fd68 	bl	8000b58 <__aeabi_d2iz>
 8007088:	4605      	mov	r5, r0
 800708a:	f7f9 fa4b 	bl	8000524 <__aeabi_i2d>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007096:	f7f9 f8f7 	bl	8000288 <__aeabi_dsub>
 800709a:	3530      	adds	r5, #48	@ 0x30
 800709c:	f806 5b01 	strb.w	r5, [r6], #1
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	42a6      	cmp	r6, r4
 80070a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070aa:	f04f 0200 	mov.w	r2, #0
 80070ae:	d124      	bne.n	80070fa <_dtoa_r+0x662>
 80070b0:	4bac      	ldr	r3, [pc, #688]	@ (8007364 <_dtoa_r+0x8cc>)
 80070b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80070b6:	f7f9 f8e9 	bl	800028c <__adddf3>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070c2:	f7f9 fd29 	bl	8000b18 <__aeabi_dcmpgt>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d145      	bne.n	8007156 <_dtoa_r+0x6be>
 80070ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80070ce:	49a5      	ldr	r1, [pc, #660]	@ (8007364 <_dtoa_r+0x8cc>)
 80070d0:	2000      	movs	r0, #0
 80070d2:	f7f9 f8d9 	bl	8000288 <__aeabi_dsub>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070de:	f7f9 fcfd 	bl	8000adc <__aeabi_dcmplt>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	f43f aef5 	beq.w	8006ed2 <_dtoa_r+0x43a>
 80070e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80070ea:	1e73      	subs	r3, r6, #1
 80070ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80070ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80070f2:	2b30      	cmp	r3, #48	@ 0x30
 80070f4:	d0f8      	beq.n	80070e8 <_dtoa_r+0x650>
 80070f6:	9f04      	ldr	r7, [sp, #16]
 80070f8:	e73e      	b.n	8006f78 <_dtoa_r+0x4e0>
 80070fa:	4b9b      	ldr	r3, [pc, #620]	@ (8007368 <_dtoa_r+0x8d0>)
 80070fc:	f7f9 fa7c 	bl	80005f8 <__aeabi_dmul>
 8007100:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007104:	e7bc      	b.n	8007080 <_dtoa_r+0x5e8>
 8007106:	d10c      	bne.n	8007122 <_dtoa_r+0x68a>
 8007108:	4b98      	ldr	r3, [pc, #608]	@ (800736c <_dtoa_r+0x8d4>)
 800710a:	2200      	movs	r2, #0
 800710c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007110:	f7f9 fa72 	bl	80005f8 <__aeabi_dmul>
 8007114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007118:	f7f9 fcf4 	bl	8000b04 <__aeabi_dcmpge>
 800711c:	2800      	cmp	r0, #0
 800711e:	f000 8157 	beq.w	80073d0 <_dtoa_r+0x938>
 8007122:	2400      	movs	r4, #0
 8007124:	4625      	mov	r5, r4
 8007126:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007128:	43db      	mvns	r3, r3
 800712a:	9304      	str	r3, [sp, #16]
 800712c:	4656      	mov	r6, sl
 800712e:	2700      	movs	r7, #0
 8007130:	4621      	mov	r1, r4
 8007132:	4658      	mov	r0, fp
 8007134:	f000 fbb4 	bl	80078a0 <_Bfree>
 8007138:	2d00      	cmp	r5, #0
 800713a:	d0dc      	beq.n	80070f6 <_dtoa_r+0x65e>
 800713c:	b12f      	cbz	r7, 800714a <_dtoa_r+0x6b2>
 800713e:	42af      	cmp	r7, r5
 8007140:	d003      	beq.n	800714a <_dtoa_r+0x6b2>
 8007142:	4639      	mov	r1, r7
 8007144:	4658      	mov	r0, fp
 8007146:	f000 fbab 	bl	80078a0 <_Bfree>
 800714a:	4629      	mov	r1, r5
 800714c:	4658      	mov	r0, fp
 800714e:	f000 fba7 	bl	80078a0 <_Bfree>
 8007152:	e7d0      	b.n	80070f6 <_dtoa_r+0x65e>
 8007154:	9704      	str	r7, [sp, #16]
 8007156:	4633      	mov	r3, r6
 8007158:	461e      	mov	r6, r3
 800715a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800715e:	2a39      	cmp	r2, #57	@ 0x39
 8007160:	d107      	bne.n	8007172 <_dtoa_r+0x6da>
 8007162:	459a      	cmp	sl, r3
 8007164:	d1f8      	bne.n	8007158 <_dtoa_r+0x6c0>
 8007166:	9a04      	ldr	r2, [sp, #16]
 8007168:	3201      	adds	r2, #1
 800716a:	9204      	str	r2, [sp, #16]
 800716c:	2230      	movs	r2, #48	@ 0x30
 800716e:	f88a 2000 	strb.w	r2, [sl]
 8007172:	781a      	ldrb	r2, [r3, #0]
 8007174:	3201      	adds	r2, #1
 8007176:	701a      	strb	r2, [r3, #0]
 8007178:	e7bd      	b.n	80070f6 <_dtoa_r+0x65e>
 800717a:	4b7b      	ldr	r3, [pc, #492]	@ (8007368 <_dtoa_r+0x8d0>)
 800717c:	2200      	movs	r2, #0
 800717e:	f7f9 fa3b 	bl	80005f8 <__aeabi_dmul>
 8007182:	2200      	movs	r2, #0
 8007184:	2300      	movs	r3, #0
 8007186:	4604      	mov	r4, r0
 8007188:	460d      	mov	r5, r1
 800718a:	f7f9 fc9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800718e:	2800      	cmp	r0, #0
 8007190:	f43f aebb 	beq.w	8006f0a <_dtoa_r+0x472>
 8007194:	e6f0      	b.n	8006f78 <_dtoa_r+0x4e0>
 8007196:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007198:	2a00      	cmp	r2, #0
 800719a:	f000 80db 	beq.w	8007354 <_dtoa_r+0x8bc>
 800719e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071a0:	2a01      	cmp	r2, #1
 80071a2:	f300 80bf 	bgt.w	8007324 <_dtoa_r+0x88c>
 80071a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80071a8:	2a00      	cmp	r2, #0
 80071aa:	f000 80b7 	beq.w	800731c <_dtoa_r+0x884>
 80071ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80071b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80071b4:	4646      	mov	r6, r8
 80071b6:	9a08      	ldr	r2, [sp, #32]
 80071b8:	2101      	movs	r1, #1
 80071ba:	441a      	add	r2, r3
 80071bc:	4658      	mov	r0, fp
 80071be:	4498      	add	r8, r3
 80071c0:	9208      	str	r2, [sp, #32]
 80071c2:	f000 fc6b 	bl	8007a9c <__i2b>
 80071c6:	4605      	mov	r5, r0
 80071c8:	b15e      	cbz	r6, 80071e2 <_dtoa_r+0x74a>
 80071ca:	9b08      	ldr	r3, [sp, #32]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	dd08      	ble.n	80071e2 <_dtoa_r+0x74a>
 80071d0:	42b3      	cmp	r3, r6
 80071d2:	9a08      	ldr	r2, [sp, #32]
 80071d4:	bfa8      	it	ge
 80071d6:	4633      	movge	r3, r6
 80071d8:	eba8 0803 	sub.w	r8, r8, r3
 80071dc:	1af6      	subs	r6, r6, r3
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	9308      	str	r3, [sp, #32]
 80071e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071e4:	b1f3      	cbz	r3, 8007224 <_dtoa_r+0x78c>
 80071e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 80b7 	beq.w	800735c <_dtoa_r+0x8c4>
 80071ee:	b18c      	cbz	r4, 8007214 <_dtoa_r+0x77c>
 80071f0:	4629      	mov	r1, r5
 80071f2:	4622      	mov	r2, r4
 80071f4:	4658      	mov	r0, fp
 80071f6:	f000 fd11 	bl	8007c1c <__pow5mult>
 80071fa:	464a      	mov	r2, r9
 80071fc:	4601      	mov	r1, r0
 80071fe:	4605      	mov	r5, r0
 8007200:	4658      	mov	r0, fp
 8007202:	f000 fc61 	bl	8007ac8 <__multiply>
 8007206:	4649      	mov	r1, r9
 8007208:	9004      	str	r0, [sp, #16]
 800720a:	4658      	mov	r0, fp
 800720c:	f000 fb48 	bl	80078a0 <_Bfree>
 8007210:	9b04      	ldr	r3, [sp, #16]
 8007212:	4699      	mov	r9, r3
 8007214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007216:	1b1a      	subs	r2, r3, r4
 8007218:	d004      	beq.n	8007224 <_dtoa_r+0x78c>
 800721a:	4649      	mov	r1, r9
 800721c:	4658      	mov	r0, fp
 800721e:	f000 fcfd 	bl	8007c1c <__pow5mult>
 8007222:	4681      	mov	r9, r0
 8007224:	2101      	movs	r1, #1
 8007226:	4658      	mov	r0, fp
 8007228:	f000 fc38 	bl	8007a9c <__i2b>
 800722c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800722e:	4604      	mov	r4, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 81cf 	beq.w	80075d4 <_dtoa_r+0xb3c>
 8007236:	461a      	mov	r2, r3
 8007238:	4601      	mov	r1, r0
 800723a:	4658      	mov	r0, fp
 800723c:	f000 fcee 	bl	8007c1c <__pow5mult>
 8007240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007242:	2b01      	cmp	r3, #1
 8007244:	4604      	mov	r4, r0
 8007246:	f300 8095 	bgt.w	8007374 <_dtoa_r+0x8dc>
 800724a:	9b02      	ldr	r3, [sp, #8]
 800724c:	2b00      	cmp	r3, #0
 800724e:	f040 8087 	bne.w	8007360 <_dtoa_r+0x8c8>
 8007252:	9b03      	ldr	r3, [sp, #12]
 8007254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007258:	2b00      	cmp	r3, #0
 800725a:	f040 8089 	bne.w	8007370 <_dtoa_r+0x8d8>
 800725e:	9b03      	ldr	r3, [sp, #12]
 8007260:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007264:	0d1b      	lsrs	r3, r3, #20
 8007266:	051b      	lsls	r3, r3, #20
 8007268:	b12b      	cbz	r3, 8007276 <_dtoa_r+0x7de>
 800726a:	9b08      	ldr	r3, [sp, #32]
 800726c:	3301      	adds	r3, #1
 800726e:	9308      	str	r3, [sp, #32]
 8007270:	f108 0801 	add.w	r8, r8, #1
 8007274:	2301      	movs	r3, #1
 8007276:	930a      	str	r3, [sp, #40]	@ 0x28
 8007278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 81b0 	beq.w	80075e0 <_dtoa_r+0xb48>
 8007280:	6923      	ldr	r3, [r4, #16]
 8007282:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007286:	6918      	ldr	r0, [r3, #16]
 8007288:	f000 fbbc 	bl	8007a04 <__hi0bits>
 800728c:	f1c0 0020 	rsb	r0, r0, #32
 8007290:	9b08      	ldr	r3, [sp, #32]
 8007292:	4418      	add	r0, r3
 8007294:	f010 001f 	ands.w	r0, r0, #31
 8007298:	d077      	beq.n	800738a <_dtoa_r+0x8f2>
 800729a:	f1c0 0320 	rsb	r3, r0, #32
 800729e:	2b04      	cmp	r3, #4
 80072a0:	dd6b      	ble.n	800737a <_dtoa_r+0x8e2>
 80072a2:	9b08      	ldr	r3, [sp, #32]
 80072a4:	f1c0 001c 	rsb	r0, r0, #28
 80072a8:	4403      	add	r3, r0
 80072aa:	4480      	add	r8, r0
 80072ac:	4406      	add	r6, r0
 80072ae:	9308      	str	r3, [sp, #32]
 80072b0:	f1b8 0f00 	cmp.w	r8, #0
 80072b4:	dd05      	ble.n	80072c2 <_dtoa_r+0x82a>
 80072b6:	4649      	mov	r1, r9
 80072b8:	4642      	mov	r2, r8
 80072ba:	4658      	mov	r0, fp
 80072bc:	f000 fd08 	bl	8007cd0 <__lshift>
 80072c0:	4681      	mov	r9, r0
 80072c2:	9b08      	ldr	r3, [sp, #32]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	dd05      	ble.n	80072d4 <_dtoa_r+0x83c>
 80072c8:	4621      	mov	r1, r4
 80072ca:	461a      	mov	r2, r3
 80072cc:	4658      	mov	r0, fp
 80072ce:	f000 fcff 	bl	8007cd0 <__lshift>
 80072d2:	4604      	mov	r4, r0
 80072d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d059      	beq.n	800738e <_dtoa_r+0x8f6>
 80072da:	4621      	mov	r1, r4
 80072dc:	4648      	mov	r0, r9
 80072de:	f000 fd63 	bl	8007da8 <__mcmp>
 80072e2:	2800      	cmp	r0, #0
 80072e4:	da53      	bge.n	800738e <_dtoa_r+0x8f6>
 80072e6:	1e7b      	subs	r3, r7, #1
 80072e8:	9304      	str	r3, [sp, #16]
 80072ea:	4649      	mov	r1, r9
 80072ec:	2300      	movs	r3, #0
 80072ee:	220a      	movs	r2, #10
 80072f0:	4658      	mov	r0, fp
 80072f2:	f000 faf7 	bl	80078e4 <__multadd>
 80072f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072f8:	4681      	mov	r9, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 8172 	beq.w	80075e4 <_dtoa_r+0xb4c>
 8007300:	2300      	movs	r3, #0
 8007302:	4629      	mov	r1, r5
 8007304:	220a      	movs	r2, #10
 8007306:	4658      	mov	r0, fp
 8007308:	f000 faec 	bl	80078e4 <__multadd>
 800730c:	9b00      	ldr	r3, [sp, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	4605      	mov	r5, r0
 8007312:	dc67      	bgt.n	80073e4 <_dtoa_r+0x94c>
 8007314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007316:	2b02      	cmp	r3, #2
 8007318:	dc41      	bgt.n	800739e <_dtoa_r+0x906>
 800731a:	e063      	b.n	80073e4 <_dtoa_r+0x94c>
 800731c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800731e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007322:	e746      	b.n	80071b2 <_dtoa_r+0x71a>
 8007324:	9b07      	ldr	r3, [sp, #28]
 8007326:	1e5c      	subs	r4, r3, #1
 8007328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800732a:	42a3      	cmp	r3, r4
 800732c:	bfbf      	itttt	lt
 800732e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007330:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007332:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007334:	1ae3      	sublt	r3, r4, r3
 8007336:	bfb4      	ite	lt
 8007338:	18d2      	addlt	r2, r2, r3
 800733a:	1b1c      	subge	r4, r3, r4
 800733c:	9b07      	ldr	r3, [sp, #28]
 800733e:	bfbc      	itt	lt
 8007340:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007342:	2400      	movlt	r4, #0
 8007344:	2b00      	cmp	r3, #0
 8007346:	bfb5      	itete	lt
 8007348:	eba8 0603 	sublt.w	r6, r8, r3
 800734c:	9b07      	ldrge	r3, [sp, #28]
 800734e:	2300      	movlt	r3, #0
 8007350:	4646      	movge	r6, r8
 8007352:	e730      	b.n	80071b6 <_dtoa_r+0x71e>
 8007354:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007356:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007358:	4646      	mov	r6, r8
 800735a:	e735      	b.n	80071c8 <_dtoa_r+0x730>
 800735c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800735e:	e75c      	b.n	800721a <_dtoa_r+0x782>
 8007360:	2300      	movs	r3, #0
 8007362:	e788      	b.n	8007276 <_dtoa_r+0x7de>
 8007364:	3fe00000 	.word	0x3fe00000
 8007368:	40240000 	.word	0x40240000
 800736c:	40140000 	.word	0x40140000
 8007370:	9b02      	ldr	r3, [sp, #8]
 8007372:	e780      	b.n	8007276 <_dtoa_r+0x7de>
 8007374:	2300      	movs	r3, #0
 8007376:	930a      	str	r3, [sp, #40]	@ 0x28
 8007378:	e782      	b.n	8007280 <_dtoa_r+0x7e8>
 800737a:	d099      	beq.n	80072b0 <_dtoa_r+0x818>
 800737c:	9a08      	ldr	r2, [sp, #32]
 800737e:	331c      	adds	r3, #28
 8007380:	441a      	add	r2, r3
 8007382:	4498      	add	r8, r3
 8007384:	441e      	add	r6, r3
 8007386:	9208      	str	r2, [sp, #32]
 8007388:	e792      	b.n	80072b0 <_dtoa_r+0x818>
 800738a:	4603      	mov	r3, r0
 800738c:	e7f6      	b.n	800737c <_dtoa_r+0x8e4>
 800738e:	9b07      	ldr	r3, [sp, #28]
 8007390:	9704      	str	r7, [sp, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	dc20      	bgt.n	80073d8 <_dtoa_r+0x940>
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800739a:	2b02      	cmp	r3, #2
 800739c:	dd1e      	ble.n	80073dc <_dtoa_r+0x944>
 800739e:	9b00      	ldr	r3, [sp, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f47f aec0 	bne.w	8007126 <_dtoa_r+0x68e>
 80073a6:	4621      	mov	r1, r4
 80073a8:	2205      	movs	r2, #5
 80073aa:	4658      	mov	r0, fp
 80073ac:	f000 fa9a 	bl	80078e4 <__multadd>
 80073b0:	4601      	mov	r1, r0
 80073b2:	4604      	mov	r4, r0
 80073b4:	4648      	mov	r0, r9
 80073b6:	f000 fcf7 	bl	8007da8 <__mcmp>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	f77f aeb3 	ble.w	8007126 <_dtoa_r+0x68e>
 80073c0:	4656      	mov	r6, sl
 80073c2:	2331      	movs	r3, #49	@ 0x31
 80073c4:	f806 3b01 	strb.w	r3, [r6], #1
 80073c8:	9b04      	ldr	r3, [sp, #16]
 80073ca:	3301      	adds	r3, #1
 80073cc:	9304      	str	r3, [sp, #16]
 80073ce:	e6ae      	b.n	800712e <_dtoa_r+0x696>
 80073d0:	9c07      	ldr	r4, [sp, #28]
 80073d2:	9704      	str	r7, [sp, #16]
 80073d4:	4625      	mov	r5, r4
 80073d6:	e7f3      	b.n	80073c0 <_dtoa_r+0x928>
 80073d8:	9b07      	ldr	r3, [sp, #28]
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 8104 	beq.w	80075ec <_dtoa_r+0xb54>
 80073e4:	2e00      	cmp	r6, #0
 80073e6:	dd05      	ble.n	80073f4 <_dtoa_r+0x95c>
 80073e8:	4629      	mov	r1, r5
 80073ea:	4632      	mov	r2, r6
 80073ec:	4658      	mov	r0, fp
 80073ee:	f000 fc6f 	bl	8007cd0 <__lshift>
 80073f2:	4605      	mov	r5, r0
 80073f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d05a      	beq.n	80074b0 <_dtoa_r+0xa18>
 80073fa:	6869      	ldr	r1, [r5, #4]
 80073fc:	4658      	mov	r0, fp
 80073fe:	f000 fa0f 	bl	8007820 <_Balloc>
 8007402:	4606      	mov	r6, r0
 8007404:	b928      	cbnz	r0, 8007412 <_dtoa_r+0x97a>
 8007406:	4b84      	ldr	r3, [pc, #528]	@ (8007618 <_dtoa_r+0xb80>)
 8007408:	4602      	mov	r2, r0
 800740a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800740e:	f7ff bb5a 	b.w	8006ac6 <_dtoa_r+0x2e>
 8007412:	692a      	ldr	r2, [r5, #16]
 8007414:	3202      	adds	r2, #2
 8007416:	0092      	lsls	r2, r2, #2
 8007418:	f105 010c 	add.w	r1, r5, #12
 800741c:	300c      	adds	r0, #12
 800741e:	f002 fcb7 	bl	8009d90 <memcpy>
 8007422:	2201      	movs	r2, #1
 8007424:	4631      	mov	r1, r6
 8007426:	4658      	mov	r0, fp
 8007428:	f000 fc52 	bl	8007cd0 <__lshift>
 800742c:	f10a 0301 	add.w	r3, sl, #1
 8007430:	9307      	str	r3, [sp, #28]
 8007432:	9b00      	ldr	r3, [sp, #0]
 8007434:	4453      	add	r3, sl
 8007436:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007438:	9b02      	ldr	r3, [sp, #8]
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	462f      	mov	r7, r5
 8007440:	930a      	str	r3, [sp, #40]	@ 0x28
 8007442:	4605      	mov	r5, r0
 8007444:	9b07      	ldr	r3, [sp, #28]
 8007446:	4621      	mov	r1, r4
 8007448:	3b01      	subs	r3, #1
 800744a:	4648      	mov	r0, r9
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	f7ff fa99 	bl	8006984 <quorem>
 8007452:	4639      	mov	r1, r7
 8007454:	9002      	str	r0, [sp, #8]
 8007456:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800745a:	4648      	mov	r0, r9
 800745c:	f000 fca4 	bl	8007da8 <__mcmp>
 8007460:	462a      	mov	r2, r5
 8007462:	9008      	str	r0, [sp, #32]
 8007464:	4621      	mov	r1, r4
 8007466:	4658      	mov	r0, fp
 8007468:	f000 fcba 	bl	8007de0 <__mdiff>
 800746c:	68c2      	ldr	r2, [r0, #12]
 800746e:	4606      	mov	r6, r0
 8007470:	bb02      	cbnz	r2, 80074b4 <_dtoa_r+0xa1c>
 8007472:	4601      	mov	r1, r0
 8007474:	4648      	mov	r0, r9
 8007476:	f000 fc97 	bl	8007da8 <__mcmp>
 800747a:	4602      	mov	r2, r0
 800747c:	4631      	mov	r1, r6
 800747e:	4658      	mov	r0, fp
 8007480:	920e      	str	r2, [sp, #56]	@ 0x38
 8007482:	f000 fa0d 	bl	80078a0 <_Bfree>
 8007486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007488:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800748a:	9e07      	ldr	r6, [sp, #28]
 800748c:	ea43 0102 	orr.w	r1, r3, r2
 8007490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007492:	4319      	orrs	r1, r3
 8007494:	d110      	bne.n	80074b8 <_dtoa_r+0xa20>
 8007496:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800749a:	d029      	beq.n	80074f0 <_dtoa_r+0xa58>
 800749c:	9b08      	ldr	r3, [sp, #32]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	dd02      	ble.n	80074a8 <_dtoa_r+0xa10>
 80074a2:	9b02      	ldr	r3, [sp, #8]
 80074a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80074a8:	9b00      	ldr	r3, [sp, #0]
 80074aa:	f883 8000 	strb.w	r8, [r3]
 80074ae:	e63f      	b.n	8007130 <_dtoa_r+0x698>
 80074b0:	4628      	mov	r0, r5
 80074b2:	e7bb      	b.n	800742c <_dtoa_r+0x994>
 80074b4:	2201      	movs	r2, #1
 80074b6:	e7e1      	b.n	800747c <_dtoa_r+0x9e4>
 80074b8:	9b08      	ldr	r3, [sp, #32]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	db04      	blt.n	80074c8 <_dtoa_r+0xa30>
 80074be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80074c0:	430b      	orrs	r3, r1
 80074c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80074c4:	430b      	orrs	r3, r1
 80074c6:	d120      	bne.n	800750a <_dtoa_r+0xa72>
 80074c8:	2a00      	cmp	r2, #0
 80074ca:	dded      	ble.n	80074a8 <_dtoa_r+0xa10>
 80074cc:	4649      	mov	r1, r9
 80074ce:	2201      	movs	r2, #1
 80074d0:	4658      	mov	r0, fp
 80074d2:	f000 fbfd 	bl	8007cd0 <__lshift>
 80074d6:	4621      	mov	r1, r4
 80074d8:	4681      	mov	r9, r0
 80074da:	f000 fc65 	bl	8007da8 <__mcmp>
 80074de:	2800      	cmp	r0, #0
 80074e0:	dc03      	bgt.n	80074ea <_dtoa_r+0xa52>
 80074e2:	d1e1      	bne.n	80074a8 <_dtoa_r+0xa10>
 80074e4:	f018 0f01 	tst.w	r8, #1
 80074e8:	d0de      	beq.n	80074a8 <_dtoa_r+0xa10>
 80074ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80074ee:	d1d8      	bne.n	80074a2 <_dtoa_r+0xa0a>
 80074f0:	9a00      	ldr	r2, [sp, #0]
 80074f2:	2339      	movs	r3, #57	@ 0x39
 80074f4:	7013      	strb	r3, [r2, #0]
 80074f6:	4633      	mov	r3, r6
 80074f8:	461e      	mov	r6, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007500:	2a39      	cmp	r2, #57	@ 0x39
 8007502:	d052      	beq.n	80075aa <_dtoa_r+0xb12>
 8007504:	3201      	adds	r2, #1
 8007506:	701a      	strb	r2, [r3, #0]
 8007508:	e612      	b.n	8007130 <_dtoa_r+0x698>
 800750a:	2a00      	cmp	r2, #0
 800750c:	dd07      	ble.n	800751e <_dtoa_r+0xa86>
 800750e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007512:	d0ed      	beq.n	80074f0 <_dtoa_r+0xa58>
 8007514:	9a00      	ldr	r2, [sp, #0]
 8007516:	f108 0301 	add.w	r3, r8, #1
 800751a:	7013      	strb	r3, [r2, #0]
 800751c:	e608      	b.n	8007130 <_dtoa_r+0x698>
 800751e:	9b07      	ldr	r3, [sp, #28]
 8007520:	9a07      	ldr	r2, [sp, #28]
 8007522:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007526:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007528:	4293      	cmp	r3, r2
 800752a:	d028      	beq.n	800757e <_dtoa_r+0xae6>
 800752c:	4649      	mov	r1, r9
 800752e:	2300      	movs	r3, #0
 8007530:	220a      	movs	r2, #10
 8007532:	4658      	mov	r0, fp
 8007534:	f000 f9d6 	bl	80078e4 <__multadd>
 8007538:	42af      	cmp	r7, r5
 800753a:	4681      	mov	r9, r0
 800753c:	f04f 0300 	mov.w	r3, #0
 8007540:	f04f 020a 	mov.w	r2, #10
 8007544:	4639      	mov	r1, r7
 8007546:	4658      	mov	r0, fp
 8007548:	d107      	bne.n	800755a <_dtoa_r+0xac2>
 800754a:	f000 f9cb 	bl	80078e4 <__multadd>
 800754e:	4607      	mov	r7, r0
 8007550:	4605      	mov	r5, r0
 8007552:	9b07      	ldr	r3, [sp, #28]
 8007554:	3301      	adds	r3, #1
 8007556:	9307      	str	r3, [sp, #28]
 8007558:	e774      	b.n	8007444 <_dtoa_r+0x9ac>
 800755a:	f000 f9c3 	bl	80078e4 <__multadd>
 800755e:	4629      	mov	r1, r5
 8007560:	4607      	mov	r7, r0
 8007562:	2300      	movs	r3, #0
 8007564:	220a      	movs	r2, #10
 8007566:	4658      	mov	r0, fp
 8007568:	f000 f9bc 	bl	80078e4 <__multadd>
 800756c:	4605      	mov	r5, r0
 800756e:	e7f0      	b.n	8007552 <_dtoa_r+0xaba>
 8007570:	9b00      	ldr	r3, [sp, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	bfcc      	ite	gt
 8007576:	461e      	movgt	r6, r3
 8007578:	2601      	movle	r6, #1
 800757a:	4456      	add	r6, sl
 800757c:	2700      	movs	r7, #0
 800757e:	4649      	mov	r1, r9
 8007580:	2201      	movs	r2, #1
 8007582:	4658      	mov	r0, fp
 8007584:	f000 fba4 	bl	8007cd0 <__lshift>
 8007588:	4621      	mov	r1, r4
 800758a:	4681      	mov	r9, r0
 800758c:	f000 fc0c 	bl	8007da8 <__mcmp>
 8007590:	2800      	cmp	r0, #0
 8007592:	dcb0      	bgt.n	80074f6 <_dtoa_r+0xa5e>
 8007594:	d102      	bne.n	800759c <_dtoa_r+0xb04>
 8007596:	f018 0f01 	tst.w	r8, #1
 800759a:	d1ac      	bne.n	80074f6 <_dtoa_r+0xa5e>
 800759c:	4633      	mov	r3, r6
 800759e:	461e      	mov	r6, r3
 80075a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075a4:	2a30      	cmp	r2, #48	@ 0x30
 80075a6:	d0fa      	beq.n	800759e <_dtoa_r+0xb06>
 80075a8:	e5c2      	b.n	8007130 <_dtoa_r+0x698>
 80075aa:	459a      	cmp	sl, r3
 80075ac:	d1a4      	bne.n	80074f8 <_dtoa_r+0xa60>
 80075ae:	9b04      	ldr	r3, [sp, #16]
 80075b0:	3301      	adds	r3, #1
 80075b2:	9304      	str	r3, [sp, #16]
 80075b4:	2331      	movs	r3, #49	@ 0x31
 80075b6:	f88a 3000 	strb.w	r3, [sl]
 80075ba:	e5b9      	b.n	8007130 <_dtoa_r+0x698>
 80075bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80075be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800761c <_dtoa_r+0xb84>
 80075c2:	b11b      	cbz	r3, 80075cc <_dtoa_r+0xb34>
 80075c4:	f10a 0308 	add.w	r3, sl, #8
 80075c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	4650      	mov	r0, sl
 80075ce:	b019      	add	sp, #100	@ 0x64
 80075d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	f77f ae37 	ble.w	800724a <_dtoa_r+0x7b2>
 80075dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075de:	930a      	str	r3, [sp, #40]	@ 0x28
 80075e0:	2001      	movs	r0, #1
 80075e2:	e655      	b.n	8007290 <_dtoa_r+0x7f8>
 80075e4:	9b00      	ldr	r3, [sp, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f77f aed6 	ble.w	8007398 <_dtoa_r+0x900>
 80075ec:	4656      	mov	r6, sl
 80075ee:	4621      	mov	r1, r4
 80075f0:	4648      	mov	r0, r9
 80075f2:	f7ff f9c7 	bl	8006984 <quorem>
 80075f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80075fa:	f806 8b01 	strb.w	r8, [r6], #1
 80075fe:	9b00      	ldr	r3, [sp, #0]
 8007600:	eba6 020a 	sub.w	r2, r6, sl
 8007604:	4293      	cmp	r3, r2
 8007606:	ddb3      	ble.n	8007570 <_dtoa_r+0xad8>
 8007608:	4649      	mov	r1, r9
 800760a:	2300      	movs	r3, #0
 800760c:	220a      	movs	r2, #10
 800760e:	4658      	mov	r0, fp
 8007610:	f000 f968 	bl	80078e4 <__multadd>
 8007614:	4681      	mov	r9, r0
 8007616:	e7ea      	b.n	80075ee <_dtoa_r+0xb56>
 8007618:	0800a8d3 	.word	0x0800a8d3
 800761c:	0800a857 	.word	0x0800a857

08007620 <_free_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4605      	mov	r5, r0
 8007624:	2900      	cmp	r1, #0
 8007626:	d041      	beq.n	80076ac <_free_r+0x8c>
 8007628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800762c:	1f0c      	subs	r4, r1, #4
 800762e:	2b00      	cmp	r3, #0
 8007630:	bfb8      	it	lt
 8007632:	18e4      	addlt	r4, r4, r3
 8007634:	f000 f8e8 	bl	8007808 <__malloc_lock>
 8007638:	4a1d      	ldr	r2, [pc, #116]	@ (80076b0 <_free_r+0x90>)
 800763a:	6813      	ldr	r3, [r2, #0]
 800763c:	b933      	cbnz	r3, 800764c <_free_r+0x2c>
 800763e:	6063      	str	r3, [r4, #4]
 8007640:	6014      	str	r4, [r2, #0]
 8007642:	4628      	mov	r0, r5
 8007644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007648:	f000 b8e4 	b.w	8007814 <__malloc_unlock>
 800764c:	42a3      	cmp	r3, r4
 800764e:	d908      	bls.n	8007662 <_free_r+0x42>
 8007650:	6820      	ldr	r0, [r4, #0]
 8007652:	1821      	adds	r1, r4, r0
 8007654:	428b      	cmp	r3, r1
 8007656:	bf01      	itttt	eq
 8007658:	6819      	ldreq	r1, [r3, #0]
 800765a:	685b      	ldreq	r3, [r3, #4]
 800765c:	1809      	addeq	r1, r1, r0
 800765e:	6021      	streq	r1, [r4, #0]
 8007660:	e7ed      	b.n	800763e <_free_r+0x1e>
 8007662:	461a      	mov	r2, r3
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	b10b      	cbz	r3, 800766c <_free_r+0x4c>
 8007668:	42a3      	cmp	r3, r4
 800766a:	d9fa      	bls.n	8007662 <_free_r+0x42>
 800766c:	6811      	ldr	r1, [r2, #0]
 800766e:	1850      	adds	r0, r2, r1
 8007670:	42a0      	cmp	r0, r4
 8007672:	d10b      	bne.n	800768c <_free_r+0x6c>
 8007674:	6820      	ldr	r0, [r4, #0]
 8007676:	4401      	add	r1, r0
 8007678:	1850      	adds	r0, r2, r1
 800767a:	4283      	cmp	r3, r0
 800767c:	6011      	str	r1, [r2, #0]
 800767e:	d1e0      	bne.n	8007642 <_free_r+0x22>
 8007680:	6818      	ldr	r0, [r3, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	6053      	str	r3, [r2, #4]
 8007686:	4408      	add	r0, r1
 8007688:	6010      	str	r0, [r2, #0]
 800768a:	e7da      	b.n	8007642 <_free_r+0x22>
 800768c:	d902      	bls.n	8007694 <_free_r+0x74>
 800768e:	230c      	movs	r3, #12
 8007690:	602b      	str	r3, [r5, #0]
 8007692:	e7d6      	b.n	8007642 <_free_r+0x22>
 8007694:	6820      	ldr	r0, [r4, #0]
 8007696:	1821      	adds	r1, r4, r0
 8007698:	428b      	cmp	r3, r1
 800769a:	bf04      	itt	eq
 800769c:	6819      	ldreq	r1, [r3, #0]
 800769e:	685b      	ldreq	r3, [r3, #4]
 80076a0:	6063      	str	r3, [r4, #4]
 80076a2:	bf04      	itt	eq
 80076a4:	1809      	addeq	r1, r1, r0
 80076a6:	6021      	streq	r1, [r4, #0]
 80076a8:	6054      	str	r4, [r2, #4]
 80076aa:	e7ca      	b.n	8007642 <_free_r+0x22>
 80076ac:	bd38      	pop	{r3, r4, r5, pc}
 80076ae:	bf00      	nop
 80076b0:	20000570 	.word	0x20000570

080076b4 <malloc>:
 80076b4:	4b02      	ldr	r3, [pc, #8]	@ (80076c0 <malloc+0xc>)
 80076b6:	4601      	mov	r1, r0
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	f000 b825 	b.w	8007708 <_malloc_r>
 80076be:	bf00      	nop
 80076c0:	20000030 	.word	0x20000030

080076c4 <sbrk_aligned>:
 80076c4:	b570      	push	{r4, r5, r6, lr}
 80076c6:	4e0f      	ldr	r6, [pc, #60]	@ (8007704 <sbrk_aligned+0x40>)
 80076c8:	460c      	mov	r4, r1
 80076ca:	6831      	ldr	r1, [r6, #0]
 80076cc:	4605      	mov	r5, r0
 80076ce:	b911      	cbnz	r1, 80076d6 <sbrk_aligned+0x12>
 80076d0:	f002 fb4e 	bl	8009d70 <_sbrk_r>
 80076d4:	6030      	str	r0, [r6, #0]
 80076d6:	4621      	mov	r1, r4
 80076d8:	4628      	mov	r0, r5
 80076da:	f002 fb49 	bl	8009d70 <_sbrk_r>
 80076de:	1c43      	adds	r3, r0, #1
 80076e0:	d103      	bne.n	80076ea <sbrk_aligned+0x26>
 80076e2:	f04f 34ff 	mov.w	r4, #4294967295
 80076e6:	4620      	mov	r0, r4
 80076e8:	bd70      	pop	{r4, r5, r6, pc}
 80076ea:	1cc4      	adds	r4, r0, #3
 80076ec:	f024 0403 	bic.w	r4, r4, #3
 80076f0:	42a0      	cmp	r0, r4
 80076f2:	d0f8      	beq.n	80076e6 <sbrk_aligned+0x22>
 80076f4:	1a21      	subs	r1, r4, r0
 80076f6:	4628      	mov	r0, r5
 80076f8:	f002 fb3a 	bl	8009d70 <_sbrk_r>
 80076fc:	3001      	adds	r0, #1
 80076fe:	d1f2      	bne.n	80076e6 <sbrk_aligned+0x22>
 8007700:	e7ef      	b.n	80076e2 <sbrk_aligned+0x1e>
 8007702:	bf00      	nop
 8007704:	2000056c 	.word	0x2000056c

08007708 <_malloc_r>:
 8007708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800770c:	1ccd      	adds	r5, r1, #3
 800770e:	f025 0503 	bic.w	r5, r5, #3
 8007712:	3508      	adds	r5, #8
 8007714:	2d0c      	cmp	r5, #12
 8007716:	bf38      	it	cc
 8007718:	250c      	movcc	r5, #12
 800771a:	2d00      	cmp	r5, #0
 800771c:	4606      	mov	r6, r0
 800771e:	db01      	blt.n	8007724 <_malloc_r+0x1c>
 8007720:	42a9      	cmp	r1, r5
 8007722:	d904      	bls.n	800772e <_malloc_r+0x26>
 8007724:	230c      	movs	r3, #12
 8007726:	6033      	str	r3, [r6, #0]
 8007728:	2000      	movs	r0, #0
 800772a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800772e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007804 <_malloc_r+0xfc>
 8007732:	f000 f869 	bl	8007808 <__malloc_lock>
 8007736:	f8d8 3000 	ldr.w	r3, [r8]
 800773a:	461c      	mov	r4, r3
 800773c:	bb44      	cbnz	r4, 8007790 <_malloc_r+0x88>
 800773e:	4629      	mov	r1, r5
 8007740:	4630      	mov	r0, r6
 8007742:	f7ff ffbf 	bl	80076c4 <sbrk_aligned>
 8007746:	1c43      	adds	r3, r0, #1
 8007748:	4604      	mov	r4, r0
 800774a:	d158      	bne.n	80077fe <_malloc_r+0xf6>
 800774c:	f8d8 4000 	ldr.w	r4, [r8]
 8007750:	4627      	mov	r7, r4
 8007752:	2f00      	cmp	r7, #0
 8007754:	d143      	bne.n	80077de <_malloc_r+0xd6>
 8007756:	2c00      	cmp	r4, #0
 8007758:	d04b      	beq.n	80077f2 <_malloc_r+0xea>
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	4639      	mov	r1, r7
 800775e:	4630      	mov	r0, r6
 8007760:	eb04 0903 	add.w	r9, r4, r3
 8007764:	f002 fb04 	bl	8009d70 <_sbrk_r>
 8007768:	4581      	cmp	r9, r0
 800776a:	d142      	bne.n	80077f2 <_malloc_r+0xea>
 800776c:	6821      	ldr	r1, [r4, #0]
 800776e:	1a6d      	subs	r5, r5, r1
 8007770:	4629      	mov	r1, r5
 8007772:	4630      	mov	r0, r6
 8007774:	f7ff ffa6 	bl	80076c4 <sbrk_aligned>
 8007778:	3001      	adds	r0, #1
 800777a:	d03a      	beq.n	80077f2 <_malloc_r+0xea>
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	442b      	add	r3, r5
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	f8d8 3000 	ldr.w	r3, [r8]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	bb62      	cbnz	r2, 80077e4 <_malloc_r+0xdc>
 800778a:	f8c8 7000 	str.w	r7, [r8]
 800778e:	e00f      	b.n	80077b0 <_malloc_r+0xa8>
 8007790:	6822      	ldr	r2, [r4, #0]
 8007792:	1b52      	subs	r2, r2, r5
 8007794:	d420      	bmi.n	80077d8 <_malloc_r+0xd0>
 8007796:	2a0b      	cmp	r2, #11
 8007798:	d917      	bls.n	80077ca <_malloc_r+0xc2>
 800779a:	1961      	adds	r1, r4, r5
 800779c:	42a3      	cmp	r3, r4
 800779e:	6025      	str	r5, [r4, #0]
 80077a0:	bf18      	it	ne
 80077a2:	6059      	strne	r1, [r3, #4]
 80077a4:	6863      	ldr	r3, [r4, #4]
 80077a6:	bf08      	it	eq
 80077a8:	f8c8 1000 	streq.w	r1, [r8]
 80077ac:	5162      	str	r2, [r4, r5]
 80077ae:	604b      	str	r3, [r1, #4]
 80077b0:	4630      	mov	r0, r6
 80077b2:	f000 f82f 	bl	8007814 <__malloc_unlock>
 80077b6:	f104 000b 	add.w	r0, r4, #11
 80077ba:	1d23      	adds	r3, r4, #4
 80077bc:	f020 0007 	bic.w	r0, r0, #7
 80077c0:	1ac2      	subs	r2, r0, r3
 80077c2:	bf1c      	itt	ne
 80077c4:	1a1b      	subne	r3, r3, r0
 80077c6:	50a3      	strne	r3, [r4, r2]
 80077c8:	e7af      	b.n	800772a <_malloc_r+0x22>
 80077ca:	6862      	ldr	r2, [r4, #4]
 80077cc:	42a3      	cmp	r3, r4
 80077ce:	bf0c      	ite	eq
 80077d0:	f8c8 2000 	streq.w	r2, [r8]
 80077d4:	605a      	strne	r2, [r3, #4]
 80077d6:	e7eb      	b.n	80077b0 <_malloc_r+0xa8>
 80077d8:	4623      	mov	r3, r4
 80077da:	6864      	ldr	r4, [r4, #4]
 80077dc:	e7ae      	b.n	800773c <_malloc_r+0x34>
 80077de:	463c      	mov	r4, r7
 80077e0:	687f      	ldr	r7, [r7, #4]
 80077e2:	e7b6      	b.n	8007752 <_malloc_r+0x4a>
 80077e4:	461a      	mov	r2, r3
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	42a3      	cmp	r3, r4
 80077ea:	d1fb      	bne.n	80077e4 <_malloc_r+0xdc>
 80077ec:	2300      	movs	r3, #0
 80077ee:	6053      	str	r3, [r2, #4]
 80077f0:	e7de      	b.n	80077b0 <_malloc_r+0xa8>
 80077f2:	230c      	movs	r3, #12
 80077f4:	6033      	str	r3, [r6, #0]
 80077f6:	4630      	mov	r0, r6
 80077f8:	f000 f80c 	bl	8007814 <__malloc_unlock>
 80077fc:	e794      	b.n	8007728 <_malloc_r+0x20>
 80077fe:	6005      	str	r5, [r0, #0]
 8007800:	e7d6      	b.n	80077b0 <_malloc_r+0xa8>
 8007802:	bf00      	nop
 8007804:	20000570 	.word	0x20000570

08007808 <__malloc_lock>:
 8007808:	4801      	ldr	r0, [pc, #4]	@ (8007810 <__malloc_lock+0x8>)
 800780a:	f7ff b8b2 	b.w	8006972 <__retarget_lock_acquire_recursive>
 800780e:	bf00      	nop
 8007810:	20000568 	.word	0x20000568

08007814 <__malloc_unlock>:
 8007814:	4801      	ldr	r0, [pc, #4]	@ (800781c <__malloc_unlock+0x8>)
 8007816:	f7ff b8ad 	b.w	8006974 <__retarget_lock_release_recursive>
 800781a:	bf00      	nop
 800781c:	20000568 	.word	0x20000568

08007820 <_Balloc>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	69c6      	ldr	r6, [r0, #28]
 8007824:	4604      	mov	r4, r0
 8007826:	460d      	mov	r5, r1
 8007828:	b976      	cbnz	r6, 8007848 <_Balloc+0x28>
 800782a:	2010      	movs	r0, #16
 800782c:	f7ff ff42 	bl	80076b4 <malloc>
 8007830:	4602      	mov	r2, r0
 8007832:	61e0      	str	r0, [r4, #28]
 8007834:	b920      	cbnz	r0, 8007840 <_Balloc+0x20>
 8007836:	4b18      	ldr	r3, [pc, #96]	@ (8007898 <_Balloc+0x78>)
 8007838:	4818      	ldr	r0, [pc, #96]	@ (800789c <_Balloc+0x7c>)
 800783a:	216b      	movs	r1, #107	@ 0x6b
 800783c:	f002 fac0 	bl	8009dc0 <__assert_func>
 8007840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007844:	6006      	str	r6, [r0, #0]
 8007846:	60c6      	str	r6, [r0, #12]
 8007848:	69e6      	ldr	r6, [r4, #28]
 800784a:	68f3      	ldr	r3, [r6, #12]
 800784c:	b183      	cbz	r3, 8007870 <_Balloc+0x50>
 800784e:	69e3      	ldr	r3, [r4, #28]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007856:	b9b8      	cbnz	r0, 8007888 <_Balloc+0x68>
 8007858:	2101      	movs	r1, #1
 800785a:	fa01 f605 	lsl.w	r6, r1, r5
 800785e:	1d72      	adds	r2, r6, #5
 8007860:	0092      	lsls	r2, r2, #2
 8007862:	4620      	mov	r0, r4
 8007864:	f002 faca 	bl	8009dfc <_calloc_r>
 8007868:	b160      	cbz	r0, 8007884 <_Balloc+0x64>
 800786a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800786e:	e00e      	b.n	800788e <_Balloc+0x6e>
 8007870:	2221      	movs	r2, #33	@ 0x21
 8007872:	2104      	movs	r1, #4
 8007874:	4620      	mov	r0, r4
 8007876:	f002 fac1 	bl	8009dfc <_calloc_r>
 800787a:	69e3      	ldr	r3, [r4, #28]
 800787c:	60f0      	str	r0, [r6, #12]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e4      	bne.n	800784e <_Balloc+0x2e>
 8007884:	2000      	movs	r0, #0
 8007886:	bd70      	pop	{r4, r5, r6, pc}
 8007888:	6802      	ldr	r2, [r0, #0]
 800788a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800788e:	2300      	movs	r3, #0
 8007890:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007894:	e7f7      	b.n	8007886 <_Balloc+0x66>
 8007896:	bf00      	nop
 8007898:	0800a864 	.word	0x0800a864
 800789c:	0800a8e4 	.word	0x0800a8e4

080078a0 <_Bfree>:
 80078a0:	b570      	push	{r4, r5, r6, lr}
 80078a2:	69c6      	ldr	r6, [r0, #28]
 80078a4:	4605      	mov	r5, r0
 80078a6:	460c      	mov	r4, r1
 80078a8:	b976      	cbnz	r6, 80078c8 <_Bfree+0x28>
 80078aa:	2010      	movs	r0, #16
 80078ac:	f7ff ff02 	bl	80076b4 <malloc>
 80078b0:	4602      	mov	r2, r0
 80078b2:	61e8      	str	r0, [r5, #28]
 80078b4:	b920      	cbnz	r0, 80078c0 <_Bfree+0x20>
 80078b6:	4b09      	ldr	r3, [pc, #36]	@ (80078dc <_Bfree+0x3c>)
 80078b8:	4809      	ldr	r0, [pc, #36]	@ (80078e0 <_Bfree+0x40>)
 80078ba:	218f      	movs	r1, #143	@ 0x8f
 80078bc:	f002 fa80 	bl	8009dc0 <__assert_func>
 80078c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078c4:	6006      	str	r6, [r0, #0]
 80078c6:	60c6      	str	r6, [r0, #12]
 80078c8:	b13c      	cbz	r4, 80078da <_Bfree+0x3a>
 80078ca:	69eb      	ldr	r3, [r5, #28]
 80078cc:	6862      	ldr	r2, [r4, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078d4:	6021      	str	r1, [r4, #0]
 80078d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078da:	bd70      	pop	{r4, r5, r6, pc}
 80078dc:	0800a864 	.word	0x0800a864
 80078e0:	0800a8e4 	.word	0x0800a8e4

080078e4 <__multadd>:
 80078e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e8:	690d      	ldr	r5, [r1, #16]
 80078ea:	4607      	mov	r7, r0
 80078ec:	460c      	mov	r4, r1
 80078ee:	461e      	mov	r6, r3
 80078f0:	f101 0c14 	add.w	ip, r1, #20
 80078f4:	2000      	movs	r0, #0
 80078f6:	f8dc 3000 	ldr.w	r3, [ip]
 80078fa:	b299      	uxth	r1, r3
 80078fc:	fb02 6101 	mla	r1, r2, r1, r6
 8007900:	0c1e      	lsrs	r6, r3, #16
 8007902:	0c0b      	lsrs	r3, r1, #16
 8007904:	fb02 3306 	mla	r3, r2, r6, r3
 8007908:	b289      	uxth	r1, r1
 800790a:	3001      	adds	r0, #1
 800790c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007910:	4285      	cmp	r5, r0
 8007912:	f84c 1b04 	str.w	r1, [ip], #4
 8007916:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800791a:	dcec      	bgt.n	80078f6 <__multadd+0x12>
 800791c:	b30e      	cbz	r6, 8007962 <__multadd+0x7e>
 800791e:	68a3      	ldr	r3, [r4, #8]
 8007920:	42ab      	cmp	r3, r5
 8007922:	dc19      	bgt.n	8007958 <__multadd+0x74>
 8007924:	6861      	ldr	r1, [r4, #4]
 8007926:	4638      	mov	r0, r7
 8007928:	3101      	adds	r1, #1
 800792a:	f7ff ff79 	bl	8007820 <_Balloc>
 800792e:	4680      	mov	r8, r0
 8007930:	b928      	cbnz	r0, 800793e <__multadd+0x5a>
 8007932:	4602      	mov	r2, r0
 8007934:	4b0c      	ldr	r3, [pc, #48]	@ (8007968 <__multadd+0x84>)
 8007936:	480d      	ldr	r0, [pc, #52]	@ (800796c <__multadd+0x88>)
 8007938:	21ba      	movs	r1, #186	@ 0xba
 800793a:	f002 fa41 	bl	8009dc0 <__assert_func>
 800793e:	6922      	ldr	r2, [r4, #16]
 8007940:	3202      	adds	r2, #2
 8007942:	f104 010c 	add.w	r1, r4, #12
 8007946:	0092      	lsls	r2, r2, #2
 8007948:	300c      	adds	r0, #12
 800794a:	f002 fa21 	bl	8009d90 <memcpy>
 800794e:	4621      	mov	r1, r4
 8007950:	4638      	mov	r0, r7
 8007952:	f7ff ffa5 	bl	80078a0 <_Bfree>
 8007956:	4644      	mov	r4, r8
 8007958:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800795c:	3501      	adds	r5, #1
 800795e:	615e      	str	r6, [r3, #20]
 8007960:	6125      	str	r5, [r4, #16]
 8007962:	4620      	mov	r0, r4
 8007964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007968:	0800a8d3 	.word	0x0800a8d3
 800796c:	0800a8e4 	.word	0x0800a8e4

08007970 <__s2b>:
 8007970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007974:	460c      	mov	r4, r1
 8007976:	4615      	mov	r5, r2
 8007978:	461f      	mov	r7, r3
 800797a:	2209      	movs	r2, #9
 800797c:	3308      	adds	r3, #8
 800797e:	4606      	mov	r6, r0
 8007980:	fb93 f3f2 	sdiv	r3, r3, r2
 8007984:	2100      	movs	r1, #0
 8007986:	2201      	movs	r2, #1
 8007988:	429a      	cmp	r2, r3
 800798a:	db09      	blt.n	80079a0 <__s2b+0x30>
 800798c:	4630      	mov	r0, r6
 800798e:	f7ff ff47 	bl	8007820 <_Balloc>
 8007992:	b940      	cbnz	r0, 80079a6 <__s2b+0x36>
 8007994:	4602      	mov	r2, r0
 8007996:	4b19      	ldr	r3, [pc, #100]	@ (80079fc <__s2b+0x8c>)
 8007998:	4819      	ldr	r0, [pc, #100]	@ (8007a00 <__s2b+0x90>)
 800799a:	21d3      	movs	r1, #211	@ 0xd3
 800799c:	f002 fa10 	bl	8009dc0 <__assert_func>
 80079a0:	0052      	lsls	r2, r2, #1
 80079a2:	3101      	adds	r1, #1
 80079a4:	e7f0      	b.n	8007988 <__s2b+0x18>
 80079a6:	9b08      	ldr	r3, [sp, #32]
 80079a8:	6143      	str	r3, [r0, #20]
 80079aa:	2d09      	cmp	r5, #9
 80079ac:	f04f 0301 	mov.w	r3, #1
 80079b0:	6103      	str	r3, [r0, #16]
 80079b2:	dd16      	ble.n	80079e2 <__s2b+0x72>
 80079b4:	f104 0909 	add.w	r9, r4, #9
 80079b8:	46c8      	mov	r8, r9
 80079ba:	442c      	add	r4, r5
 80079bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80079c0:	4601      	mov	r1, r0
 80079c2:	3b30      	subs	r3, #48	@ 0x30
 80079c4:	220a      	movs	r2, #10
 80079c6:	4630      	mov	r0, r6
 80079c8:	f7ff ff8c 	bl	80078e4 <__multadd>
 80079cc:	45a0      	cmp	r8, r4
 80079ce:	d1f5      	bne.n	80079bc <__s2b+0x4c>
 80079d0:	f1a5 0408 	sub.w	r4, r5, #8
 80079d4:	444c      	add	r4, r9
 80079d6:	1b2d      	subs	r5, r5, r4
 80079d8:	1963      	adds	r3, r4, r5
 80079da:	42bb      	cmp	r3, r7
 80079dc:	db04      	blt.n	80079e8 <__s2b+0x78>
 80079de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079e2:	340a      	adds	r4, #10
 80079e4:	2509      	movs	r5, #9
 80079e6:	e7f6      	b.n	80079d6 <__s2b+0x66>
 80079e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079ec:	4601      	mov	r1, r0
 80079ee:	3b30      	subs	r3, #48	@ 0x30
 80079f0:	220a      	movs	r2, #10
 80079f2:	4630      	mov	r0, r6
 80079f4:	f7ff ff76 	bl	80078e4 <__multadd>
 80079f8:	e7ee      	b.n	80079d8 <__s2b+0x68>
 80079fa:	bf00      	nop
 80079fc:	0800a8d3 	.word	0x0800a8d3
 8007a00:	0800a8e4 	.word	0x0800a8e4

08007a04 <__hi0bits>:
 8007a04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007a08:	4603      	mov	r3, r0
 8007a0a:	bf36      	itet	cc
 8007a0c:	0403      	lslcc	r3, r0, #16
 8007a0e:	2000      	movcs	r0, #0
 8007a10:	2010      	movcc	r0, #16
 8007a12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a16:	bf3c      	itt	cc
 8007a18:	021b      	lslcc	r3, r3, #8
 8007a1a:	3008      	addcc	r0, #8
 8007a1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a20:	bf3c      	itt	cc
 8007a22:	011b      	lslcc	r3, r3, #4
 8007a24:	3004      	addcc	r0, #4
 8007a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a2a:	bf3c      	itt	cc
 8007a2c:	009b      	lslcc	r3, r3, #2
 8007a2e:	3002      	addcc	r0, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	db05      	blt.n	8007a40 <__hi0bits+0x3c>
 8007a34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a38:	f100 0001 	add.w	r0, r0, #1
 8007a3c:	bf08      	it	eq
 8007a3e:	2020      	moveq	r0, #32
 8007a40:	4770      	bx	lr

08007a42 <__lo0bits>:
 8007a42:	6803      	ldr	r3, [r0, #0]
 8007a44:	4602      	mov	r2, r0
 8007a46:	f013 0007 	ands.w	r0, r3, #7
 8007a4a:	d00b      	beq.n	8007a64 <__lo0bits+0x22>
 8007a4c:	07d9      	lsls	r1, r3, #31
 8007a4e:	d421      	bmi.n	8007a94 <__lo0bits+0x52>
 8007a50:	0798      	lsls	r0, r3, #30
 8007a52:	bf49      	itett	mi
 8007a54:	085b      	lsrmi	r3, r3, #1
 8007a56:	089b      	lsrpl	r3, r3, #2
 8007a58:	2001      	movmi	r0, #1
 8007a5a:	6013      	strmi	r3, [r2, #0]
 8007a5c:	bf5c      	itt	pl
 8007a5e:	6013      	strpl	r3, [r2, #0]
 8007a60:	2002      	movpl	r0, #2
 8007a62:	4770      	bx	lr
 8007a64:	b299      	uxth	r1, r3
 8007a66:	b909      	cbnz	r1, 8007a6c <__lo0bits+0x2a>
 8007a68:	0c1b      	lsrs	r3, r3, #16
 8007a6a:	2010      	movs	r0, #16
 8007a6c:	b2d9      	uxtb	r1, r3
 8007a6e:	b909      	cbnz	r1, 8007a74 <__lo0bits+0x32>
 8007a70:	3008      	adds	r0, #8
 8007a72:	0a1b      	lsrs	r3, r3, #8
 8007a74:	0719      	lsls	r1, r3, #28
 8007a76:	bf04      	itt	eq
 8007a78:	091b      	lsreq	r3, r3, #4
 8007a7a:	3004      	addeq	r0, #4
 8007a7c:	0799      	lsls	r1, r3, #30
 8007a7e:	bf04      	itt	eq
 8007a80:	089b      	lsreq	r3, r3, #2
 8007a82:	3002      	addeq	r0, #2
 8007a84:	07d9      	lsls	r1, r3, #31
 8007a86:	d403      	bmi.n	8007a90 <__lo0bits+0x4e>
 8007a88:	085b      	lsrs	r3, r3, #1
 8007a8a:	f100 0001 	add.w	r0, r0, #1
 8007a8e:	d003      	beq.n	8007a98 <__lo0bits+0x56>
 8007a90:	6013      	str	r3, [r2, #0]
 8007a92:	4770      	bx	lr
 8007a94:	2000      	movs	r0, #0
 8007a96:	4770      	bx	lr
 8007a98:	2020      	movs	r0, #32
 8007a9a:	4770      	bx	lr

08007a9c <__i2b>:
 8007a9c:	b510      	push	{r4, lr}
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	f7ff febd 	bl	8007820 <_Balloc>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	b928      	cbnz	r0, 8007ab6 <__i2b+0x1a>
 8007aaa:	4b05      	ldr	r3, [pc, #20]	@ (8007ac0 <__i2b+0x24>)
 8007aac:	4805      	ldr	r0, [pc, #20]	@ (8007ac4 <__i2b+0x28>)
 8007aae:	f240 1145 	movw	r1, #325	@ 0x145
 8007ab2:	f002 f985 	bl	8009dc0 <__assert_func>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	6144      	str	r4, [r0, #20]
 8007aba:	6103      	str	r3, [r0, #16]
 8007abc:	bd10      	pop	{r4, pc}
 8007abe:	bf00      	nop
 8007ac0:	0800a8d3 	.word	0x0800a8d3
 8007ac4:	0800a8e4 	.word	0x0800a8e4

08007ac8 <__multiply>:
 8007ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007acc:	4614      	mov	r4, r2
 8007ace:	690a      	ldr	r2, [r1, #16]
 8007ad0:	6923      	ldr	r3, [r4, #16]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	bfa8      	it	ge
 8007ad6:	4623      	movge	r3, r4
 8007ad8:	460f      	mov	r7, r1
 8007ada:	bfa4      	itt	ge
 8007adc:	460c      	movge	r4, r1
 8007ade:	461f      	movge	r7, r3
 8007ae0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007ae4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007ae8:	68a3      	ldr	r3, [r4, #8]
 8007aea:	6861      	ldr	r1, [r4, #4]
 8007aec:	eb0a 0609 	add.w	r6, sl, r9
 8007af0:	42b3      	cmp	r3, r6
 8007af2:	b085      	sub	sp, #20
 8007af4:	bfb8      	it	lt
 8007af6:	3101      	addlt	r1, #1
 8007af8:	f7ff fe92 	bl	8007820 <_Balloc>
 8007afc:	b930      	cbnz	r0, 8007b0c <__multiply+0x44>
 8007afe:	4602      	mov	r2, r0
 8007b00:	4b44      	ldr	r3, [pc, #272]	@ (8007c14 <__multiply+0x14c>)
 8007b02:	4845      	ldr	r0, [pc, #276]	@ (8007c18 <__multiply+0x150>)
 8007b04:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007b08:	f002 f95a 	bl	8009dc0 <__assert_func>
 8007b0c:	f100 0514 	add.w	r5, r0, #20
 8007b10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b14:	462b      	mov	r3, r5
 8007b16:	2200      	movs	r2, #0
 8007b18:	4543      	cmp	r3, r8
 8007b1a:	d321      	bcc.n	8007b60 <__multiply+0x98>
 8007b1c:	f107 0114 	add.w	r1, r7, #20
 8007b20:	f104 0214 	add.w	r2, r4, #20
 8007b24:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007b28:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007b2c:	9302      	str	r3, [sp, #8]
 8007b2e:	1b13      	subs	r3, r2, r4
 8007b30:	3b15      	subs	r3, #21
 8007b32:	f023 0303 	bic.w	r3, r3, #3
 8007b36:	3304      	adds	r3, #4
 8007b38:	f104 0715 	add.w	r7, r4, #21
 8007b3c:	42ba      	cmp	r2, r7
 8007b3e:	bf38      	it	cc
 8007b40:	2304      	movcc	r3, #4
 8007b42:	9301      	str	r3, [sp, #4]
 8007b44:	9b02      	ldr	r3, [sp, #8]
 8007b46:	9103      	str	r1, [sp, #12]
 8007b48:	428b      	cmp	r3, r1
 8007b4a:	d80c      	bhi.n	8007b66 <__multiply+0x9e>
 8007b4c:	2e00      	cmp	r6, #0
 8007b4e:	dd03      	ble.n	8007b58 <__multiply+0x90>
 8007b50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d05b      	beq.n	8007c10 <__multiply+0x148>
 8007b58:	6106      	str	r6, [r0, #16]
 8007b5a:	b005      	add	sp, #20
 8007b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b60:	f843 2b04 	str.w	r2, [r3], #4
 8007b64:	e7d8      	b.n	8007b18 <__multiply+0x50>
 8007b66:	f8b1 a000 	ldrh.w	sl, [r1]
 8007b6a:	f1ba 0f00 	cmp.w	sl, #0
 8007b6e:	d024      	beq.n	8007bba <__multiply+0xf2>
 8007b70:	f104 0e14 	add.w	lr, r4, #20
 8007b74:	46a9      	mov	r9, r5
 8007b76:	f04f 0c00 	mov.w	ip, #0
 8007b7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b7e:	f8d9 3000 	ldr.w	r3, [r9]
 8007b82:	fa1f fb87 	uxth.w	fp, r7
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	fb0a 330b 	mla	r3, sl, fp, r3
 8007b8c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007b90:	f8d9 7000 	ldr.w	r7, [r9]
 8007b94:	4463      	add	r3, ip
 8007b96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b9a:	fb0a c70b 	mla	r7, sl, fp, ip
 8007b9e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ba8:	4572      	cmp	r2, lr
 8007baa:	f849 3b04 	str.w	r3, [r9], #4
 8007bae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007bb2:	d8e2      	bhi.n	8007b7a <__multiply+0xb2>
 8007bb4:	9b01      	ldr	r3, [sp, #4]
 8007bb6:	f845 c003 	str.w	ip, [r5, r3]
 8007bba:	9b03      	ldr	r3, [sp, #12]
 8007bbc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007bc0:	3104      	adds	r1, #4
 8007bc2:	f1b9 0f00 	cmp.w	r9, #0
 8007bc6:	d021      	beq.n	8007c0c <__multiply+0x144>
 8007bc8:	682b      	ldr	r3, [r5, #0]
 8007bca:	f104 0c14 	add.w	ip, r4, #20
 8007bce:	46ae      	mov	lr, r5
 8007bd0:	f04f 0a00 	mov.w	sl, #0
 8007bd4:	f8bc b000 	ldrh.w	fp, [ip]
 8007bd8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007bdc:	fb09 770b 	mla	r7, r9, fp, r7
 8007be0:	4457      	add	r7, sl
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007be8:	f84e 3b04 	str.w	r3, [lr], #4
 8007bec:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bf4:	f8be 3000 	ldrh.w	r3, [lr]
 8007bf8:	fb09 330a 	mla	r3, r9, sl, r3
 8007bfc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007c00:	4562      	cmp	r2, ip
 8007c02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c06:	d8e5      	bhi.n	8007bd4 <__multiply+0x10c>
 8007c08:	9f01      	ldr	r7, [sp, #4]
 8007c0a:	51eb      	str	r3, [r5, r7]
 8007c0c:	3504      	adds	r5, #4
 8007c0e:	e799      	b.n	8007b44 <__multiply+0x7c>
 8007c10:	3e01      	subs	r6, #1
 8007c12:	e79b      	b.n	8007b4c <__multiply+0x84>
 8007c14:	0800a8d3 	.word	0x0800a8d3
 8007c18:	0800a8e4 	.word	0x0800a8e4

08007c1c <__pow5mult>:
 8007c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c20:	4615      	mov	r5, r2
 8007c22:	f012 0203 	ands.w	r2, r2, #3
 8007c26:	4607      	mov	r7, r0
 8007c28:	460e      	mov	r6, r1
 8007c2a:	d007      	beq.n	8007c3c <__pow5mult+0x20>
 8007c2c:	4c25      	ldr	r4, [pc, #148]	@ (8007cc4 <__pow5mult+0xa8>)
 8007c2e:	3a01      	subs	r2, #1
 8007c30:	2300      	movs	r3, #0
 8007c32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c36:	f7ff fe55 	bl	80078e4 <__multadd>
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	10ad      	asrs	r5, r5, #2
 8007c3e:	d03d      	beq.n	8007cbc <__pow5mult+0xa0>
 8007c40:	69fc      	ldr	r4, [r7, #28]
 8007c42:	b97c      	cbnz	r4, 8007c64 <__pow5mult+0x48>
 8007c44:	2010      	movs	r0, #16
 8007c46:	f7ff fd35 	bl	80076b4 <malloc>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	61f8      	str	r0, [r7, #28]
 8007c4e:	b928      	cbnz	r0, 8007c5c <__pow5mult+0x40>
 8007c50:	4b1d      	ldr	r3, [pc, #116]	@ (8007cc8 <__pow5mult+0xac>)
 8007c52:	481e      	ldr	r0, [pc, #120]	@ (8007ccc <__pow5mult+0xb0>)
 8007c54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007c58:	f002 f8b2 	bl	8009dc0 <__assert_func>
 8007c5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c60:	6004      	str	r4, [r0, #0]
 8007c62:	60c4      	str	r4, [r0, #12]
 8007c64:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007c68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c6c:	b94c      	cbnz	r4, 8007c82 <__pow5mult+0x66>
 8007c6e:	f240 2171 	movw	r1, #625	@ 0x271
 8007c72:	4638      	mov	r0, r7
 8007c74:	f7ff ff12 	bl	8007a9c <__i2b>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c7e:	4604      	mov	r4, r0
 8007c80:	6003      	str	r3, [r0, #0]
 8007c82:	f04f 0900 	mov.w	r9, #0
 8007c86:	07eb      	lsls	r3, r5, #31
 8007c88:	d50a      	bpl.n	8007ca0 <__pow5mult+0x84>
 8007c8a:	4631      	mov	r1, r6
 8007c8c:	4622      	mov	r2, r4
 8007c8e:	4638      	mov	r0, r7
 8007c90:	f7ff ff1a 	bl	8007ac8 <__multiply>
 8007c94:	4631      	mov	r1, r6
 8007c96:	4680      	mov	r8, r0
 8007c98:	4638      	mov	r0, r7
 8007c9a:	f7ff fe01 	bl	80078a0 <_Bfree>
 8007c9e:	4646      	mov	r6, r8
 8007ca0:	106d      	asrs	r5, r5, #1
 8007ca2:	d00b      	beq.n	8007cbc <__pow5mult+0xa0>
 8007ca4:	6820      	ldr	r0, [r4, #0]
 8007ca6:	b938      	cbnz	r0, 8007cb8 <__pow5mult+0x9c>
 8007ca8:	4622      	mov	r2, r4
 8007caa:	4621      	mov	r1, r4
 8007cac:	4638      	mov	r0, r7
 8007cae:	f7ff ff0b 	bl	8007ac8 <__multiply>
 8007cb2:	6020      	str	r0, [r4, #0]
 8007cb4:	f8c0 9000 	str.w	r9, [r0]
 8007cb8:	4604      	mov	r4, r0
 8007cba:	e7e4      	b.n	8007c86 <__pow5mult+0x6a>
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cc2:	bf00      	nop
 8007cc4:	0800a940 	.word	0x0800a940
 8007cc8:	0800a864 	.word	0x0800a864
 8007ccc:	0800a8e4 	.word	0x0800a8e4

08007cd0 <__lshift>:
 8007cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd4:	460c      	mov	r4, r1
 8007cd6:	6849      	ldr	r1, [r1, #4]
 8007cd8:	6923      	ldr	r3, [r4, #16]
 8007cda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cde:	68a3      	ldr	r3, [r4, #8]
 8007ce0:	4607      	mov	r7, r0
 8007ce2:	4691      	mov	r9, r2
 8007ce4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ce8:	f108 0601 	add.w	r6, r8, #1
 8007cec:	42b3      	cmp	r3, r6
 8007cee:	db0b      	blt.n	8007d08 <__lshift+0x38>
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	f7ff fd95 	bl	8007820 <_Balloc>
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	b948      	cbnz	r0, 8007d0e <__lshift+0x3e>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	4b28      	ldr	r3, [pc, #160]	@ (8007da0 <__lshift+0xd0>)
 8007cfe:	4829      	ldr	r0, [pc, #164]	@ (8007da4 <__lshift+0xd4>)
 8007d00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007d04:	f002 f85c 	bl	8009dc0 <__assert_func>
 8007d08:	3101      	adds	r1, #1
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	e7ee      	b.n	8007cec <__lshift+0x1c>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f100 0114 	add.w	r1, r0, #20
 8007d14:	f100 0210 	add.w	r2, r0, #16
 8007d18:	4618      	mov	r0, r3
 8007d1a:	4553      	cmp	r3, sl
 8007d1c:	db33      	blt.n	8007d86 <__lshift+0xb6>
 8007d1e:	6920      	ldr	r0, [r4, #16]
 8007d20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d24:	f104 0314 	add.w	r3, r4, #20
 8007d28:	f019 091f 	ands.w	r9, r9, #31
 8007d2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d34:	d02b      	beq.n	8007d8e <__lshift+0xbe>
 8007d36:	f1c9 0e20 	rsb	lr, r9, #32
 8007d3a:	468a      	mov	sl, r1
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	6818      	ldr	r0, [r3, #0]
 8007d40:	fa00 f009 	lsl.w	r0, r0, r9
 8007d44:	4310      	orrs	r0, r2
 8007d46:	f84a 0b04 	str.w	r0, [sl], #4
 8007d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d4e:	459c      	cmp	ip, r3
 8007d50:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d54:	d8f3      	bhi.n	8007d3e <__lshift+0x6e>
 8007d56:	ebac 0304 	sub.w	r3, ip, r4
 8007d5a:	3b15      	subs	r3, #21
 8007d5c:	f023 0303 	bic.w	r3, r3, #3
 8007d60:	3304      	adds	r3, #4
 8007d62:	f104 0015 	add.w	r0, r4, #21
 8007d66:	4584      	cmp	ip, r0
 8007d68:	bf38      	it	cc
 8007d6a:	2304      	movcc	r3, #4
 8007d6c:	50ca      	str	r2, [r1, r3]
 8007d6e:	b10a      	cbz	r2, 8007d74 <__lshift+0xa4>
 8007d70:	f108 0602 	add.w	r6, r8, #2
 8007d74:	3e01      	subs	r6, #1
 8007d76:	4638      	mov	r0, r7
 8007d78:	612e      	str	r6, [r5, #16]
 8007d7a:	4621      	mov	r1, r4
 8007d7c:	f7ff fd90 	bl	80078a0 <_Bfree>
 8007d80:	4628      	mov	r0, r5
 8007d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d86:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	e7c5      	b.n	8007d1a <__lshift+0x4a>
 8007d8e:	3904      	subs	r1, #4
 8007d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d94:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d98:	459c      	cmp	ip, r3
 8007d9a:	d8f9      	bhi.n	8007d90 <__lshift+0xc0>
 8007d9c:	e7ea      	b.n	8007d74 <__lshift+0xa4>
 8007d9e:	bf00      	nop
 8007da0:	0800a8d3 	.word	0x0800a8d3
 8007da4:	0800a8e4 	.word	0x0800a8e4

08007da8 <__mcmp>:
 8007da8:	690a      	ldr	r2, [r1, #16]
 8007daa:	4603      	mov	r3, r0
 8007dac:	6900      	ldr	r0, [r0, #16]
 8007dae:	1a80      	subs	r0, r0, r2
 8007db0:	b530      	push	{r4, r5, lr}
 8007db2:	d10e      	bne.n	8007dd2 <__mcmp+0x2a>
 8007db4:	3314      	adds	r3, #20
 8007db6:	3114      	adds	r1, #20
 8007db8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007dbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007dc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007dc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007dc8:	4295      	cmp	r5, r2
 8007dca:	d003      	beq.n	8007dd4 <__mcmp+0x2c>
 8007dcc:	d205      	bcs.n	8007dda <__mcmp+0x32>
 8007dce:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd2:	bd30      	pop	{r4, r5, pc}
 8007dd4:	42a3      	cmp	r3, r4
 8007dd6:	d3f3      	bcc.n	8007dc0 <__mcmp+0x18>
 8007dd8:	e7fb      	b.n	8007dd2 <__mcmp+0x2a>
 8007dda:	2001      	movs	r0, #1
 8007ddc:	e7f9      	b.n	8007dd2 <__mcmp+0x2a>
	...

08007de0 <__mdiff>:
 8007de0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de4:	4689      	mov	r9, r1
 8007de6:	4606      	mov	r6, r0
 8007de8:	4611      	mov	r1, r2
 8007dea:	4648      	mov	r0, r9
 8007dec:	4614      	mov	r4, r2
 8007dee:	f7ff ffdb 	bl	8007da8 <__mcmp>
 8007df2:	1e05      	subs	r5, r0, #0
 8007df4:	d112      	bne.n	8007e1c <__mdiff+0x3c>
 8007df6:	4629      	mov	r1, r5
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f7ff fd11 	bl	8007820 <_Balloc>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	b928      	cbnz	r0, 8007e0e <__mdiff+0x2e>
 8007e02:	4b3f      	ldr	r3, [pc, #252]	@ (8007f00 <__mdiff+0x120>)
 8007e04:	f240 2137 	movw	r1, #567	@ 0x237
 8007e08:	483e      	ldr	r0, [pc, #248]	@ (8007f04 <__mdiff+0x124>)
 8007e0a:	f001 ffd9 	bl	8009dc0 <__assert_func>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e14:	4610      	mov	r0, r2
 8007e16:	b003      	add	sp, #12
 8007e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1c:	bfbc      	itt	lt
 8007e1e:	464b      	movlt	r3, r9
 8007e20:	46a1      	movlt	r9, r4
 8007e22:	4630      	mov	r0, r6
 8007e24:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e28:	bfba      	itte	lt
 8007e2a:	461c      	movlt	r4, r3
 8007e2c:	2501      	movlt	r5, #1
 8007e2e:	2500      	movge	r5, #0
 8007e30:	f7ff fcf6 	bl	8007820 <_Balloc>
 8007e34:	4602      	mov	r2, r0
 8007e36:	b918      	cbnz	r0, 8007e40 <__mdiff+0x60>
 8007e38:	4b31      	ldr	r3, [pc, #196]	@ (8007f00 <__mdiff+0x120>)
 8007e3a:	f240 2145 	movw	r1, #581	@ 0x245
 8007e3e:	e7e3      	b.n	8007e08 <__mdiff+0x28>
 8007e40:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e44:	6926      	ldr	r6, [r4, #16]
 8007e46:	60c5      	str	r5, [r0, #12]
 8007e48:	f109 0310 	add.w	r3, r9, #16
 8007e4c:	f109 0514 	add.w	r5, r9, #20
 8007e50:	f104 0e14 	add.w	lr, r4, #20
 8007e54:	f100 0b14 	add.w	fp, r0, #20
 8007e58:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e5c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e60:	9301      	str	r3, [sp, #4]
 8007e62:	46d9      	mov	r9, fp
 8007e64:	f04f 0c00 	mov.w	ip, #0
 8007e68:	9b01      	ldr	r3, [sp, #4]
 8007e6a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e6e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007e72:	9301      	str	r3, [sp, #4]
 8007e74:	fa1f f38a 	uxth.w	r3, sl
 8007e78:	4619      	mov	r1, r3
 8007e7a:	b283      	uxth	r3, r0
 8007e7c:	1acb      	subs	r3, r1, r3
 8007e7e:	0c00      	lsrs	r0, r0, #16
 8007e80:	4463      	add	r3, ip
 8007e82:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007e86:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e90:	4576      	cmp	r6, lr
 8007e92:	f849 3b04 	str.w	r3, [r9], #4
 8007e96:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e9a:	d8e5      	bhi.n	8007e68 <__mdiff+0x88>
 8007e9c:	1b33      	subs	r3, r6, r4
 8007e9e:	3b15      	subs	r3, #21
 8007ea0:	f023 0303 	bic.w	r3, r3, #3
 8007ea4:	3415      	adds	r4, #21
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	42a6      	cmp	r6, r4
 8007eaa:	bf38      	it	cc
 8007eac:	2304      	movcc	r3, #4
 8007eae:	441d      	add	r5, r3
 8007eb0:	445b      	add	r3, fp
 8007eb2:	461e      	mov	r6, r3
 8007eb4:	462c      	mov	r4, r5
 8007eb6:	4544      	cmp	r4, r8
 8007eb8:	d30e      	bcc.n	8007ed8 <__mdiff+0xf8>
 8007eba:	f108 0103 	add.w	r1, r8, #3
 8007ebe:	1b49      	subs	r1, r1, r5
 8007ec0:	f021 0103 	bic.w	r1, r1, #3
 8007ec4:	3d03      	subs	r5, #3
 8007ec6:	45a8      	cmp	r8, r5
 8007ec8:	bf38      	it	cc
 8007eca:	2100      	movcc	r1, #0
 8007ecc:	440b      	add	r3, r1
 8007ece:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ed2:	b191      	cbz	r1, 8007efa <__mdiff+0x11a>
 8007ed4:	6117      	str	r7, [r2, #16]
 8007ed6:	e79d      	b.n	8007e14 <__mdiff+0x34>
 8007ed8:	f854 1b04 	ldr.w	r1, [r4], #4
 8007edc:	46e6      	mov	lr, ip
 8007ede:	0c08      	lsrs	r0, r1, #16
 8007ee0:	fa1c fc81 	uxtah	ip, ip, r1
 8007ee4:	4471      	add	r1, lr
 8007ee6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007eea:	b289      	uxth	r1, r1
 8007eec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ef0:	f846 1b04 	str.w	r1, [r6], #4
 8007ef4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ef8:	e7dd      	b.n	8007eb6 <__mdiff+0xd6>
 8007efa:	3f01      	subs	r7, #1
 8007efc:	e7e7      	b.n	8007ece <__mdiff+0xee>
 8007efe:	bf00      	nop
 8007f00:	0800a8d3 	.word	0x0800a8d3
 8007f04:	0800a8e4 	.word	0x0800a8e4

08007f08 <__ulp>:
 8007f08:	b082      	sub	sp, #8
 8007f0a:	ed8d 0b00 	vstr	d0, [sp]
 8007f0e:	9a01      	ldr	r2, [sp, #4]
 8007f10:	4b0f      	ldr	r3, [pc, #60]	@ (8007f50 <__ulp+0x48>)
 8007f12:	4013      	ands	r3, r2
 8007f14:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	dc08      	bgt.n	8007f2e <__ulp+0x26>
 8007f1c:	425b      	negs	r3, r3
 8007f1e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007f22:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007f26:	da04      	bge.n	8007f32 <__ulp+0x2a>
 8007f28:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007f2c:	4113      	asrs	r3, r2
 8007f2e:	2200      	movs	r2, #0
 8007f30:	e008      	b.n	8007f44 <__ulp+0x3c>
 8007f32:	f1a2 0314 	sub.w	r3, r2, #20
 8007f36:	2b1e      	cmp	r3, #30
 8007f38:	bfda      	itte	le
 8007f3a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007f3e:	40da      	lsrle	r2, r3
 8007f40:	2201      	movgt	r2, #1
 8007f42:	2300      	movs	r3, #0
 8007f44:	4619      	mov	r1, r3
 8007f46:	4610      	mov	r0, r2
 8007f48:	ec41 0b10 	vmov	d0, r0, r1
 8007f4c:	b002      	add	sp, #8
 8007f4e:	4770      	bx	lr
 8007f50:	7ff00000 	.word	0x7ff00000

08007f54 <__b2d>:
 8007f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f58:	6906      	ldr	r6, [r0, #16]
 8007f5a:	f100 0814 	add.w	r8, r0, #20
 8007f5e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007f62:	1f37      	subs	r7, r6, #4
 8007f64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007f68:	4610      	mov	r0, r2
 8007f6a:	f7ff fd4b 	bl	8007a04 <__hi0bits>
 8007f6e:	f1c0 0320 	rsb	r3, r0, #32
 8007f72:	280a      	cmp	r0, #10
 8007f74:	600b      	str	r3, [r1, #0]
 8007f76:	491b      	ldr	r1, [pc, #108]	@ (8007fe4 <__b2d+0x90>)
 8007f78:	dc15      	bgt.n	8007fa6 <__b2d+0x52>
 8007f7a:	f1c0 0c0b 	rsb	ip, r0, #11
 8007f7e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007f82:	45b8      	cmp	r8, r7
 8007f84:	ea43 0501 	orr.w	r5, r3, r1
 8007f88:	bf34      	ite	cc
 8007f8a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f8e:	2300      	movcs	r3, #0
 8007f90:	3015      	adds	r0, #21
 8007f92:	fa02 f000 	lsl.w	r0, r2, r0
 8007f96:	fa23 f30c 	lsr.w	r3, r3, ip
 8007f9a:	4303      	orrs	r3, r0
 8007f9c:	461c      	mov	r4, r3
 8007f9e:	ec45 4b10 	vmov	d0, r4, r5
 8007fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa6:	45b8      	cmp	r8, r7
 8007fa8:	bf3a      	itte	cc
 8007faa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007fae:	f1a6 0708 	subcc.w	r7, r6, #8
 8007fb2:	2300      	movcs	r3, #0
 8007fb4:	380b      	subs	r0, #11
 8007fb6:	d012      	beq.n	8007fde <__b2d+0x8a>
 8007fb8:	f1c0 0120 	rsb	r1, r0, #32
 8007fbc:	fa23 f401 	lsr.w	r4, r3, r1
 8007fc0:	4082      	lsls	r2, r0
 8007fc2:	4322      	orrs	r2, r4
 8007fc4:	4547      	cmp	r7, r8
 8007fc6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007fca:	bf8c      	ite	hi
 8007fcc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007fd0:	2200      	movls	r2, #0
 8007fd2:	4083      	lsls	r3, r0
 8007fd4:	40ca      	lsrs	r2, r1
 8007fd6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	e7de      	b.n	8007f9c <__b2d+0x48>
 8007fde:	ea42 0501 	orr.w	r5, r2, r1
 8007fe2:	e7db      	b.n	8007f9c <__b2d+0x48>
 8007fe4:	3ff00000 	.word	0x3ff00000

08007fe8 <__d2b>:
 8007fe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fec:	460f      	mov	r7, r1
 8007fee:	2101      	movs	r1, #1
 8007ff0:	ec59 8b10 	vmov	r8, r9, d0
 8007ff4:	4616      	mov	r6, r2
 8007ff6:	f7ff fc13 	bl	8007820 <_Balloc>
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	b930      	cbnz	r0, 800800c <__d2b+0x24>
 8007ffe:	4602      	mov	r2, r0
 8008000:	4b23      	ldr	r3, [pc, #140]	@ (8008090 <__d2b+0xa8>)
 8008002:	4824      	ldr	r0, [pc, #144]	@ (8008094 <__d2b+0xac>)
 8008004:	f240 310f 	movw	r1, #783	@ 0x30f
 8008008:	f001 feda 	bl	8009dc0 <__assert_func>
 800800c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008010:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008014:	b10d      	cbz	r5, 800801a <__d2b+0x32>
 8008016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800801a:	9301      	str	r3, [sp, #4]
 800801c:	f1b8 0300 	subs.w	r3, r8, #0
 8008020:	d023      	beq.n	800806a <__d2b+0x82>
 8008022:	4668      	mov	r0, sp
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	f7ff fd0c 	bl	8007a42 <__lo0bits>
 800802a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800802e:	b1d0      	cbz	r0, 8008066 <__d2b+0x7e>
 8008030:	f1c0 0320 	rsb	r3, r0, #32
 8008034:	fa02 f303 	lsl.w	r3, r2, r3
 8008038:	430b      	orrs	r3, r1
 800803a:	40c2      	lsrs	r2, r0
 800803c:	6163      	str	r3, [r4, #20]
 800803e:	9201      	str	r2, [sp, #4]
 8008040:	9b01      	ldr	r3, [sp, #4]
 8008042:	61a3      	str	r3, [r4, #24]
 8008044:	2b00      	cmp	r3, #0
 8008046:	bf0c      	ite	eq
 8008048:	2201      	moveq	r2, #1
 800804a:	2202      	movne	r2, #2
 800804c:	6122      	str	r2, [r4, #16]
 800804e:	b1a5      	cbz	r5, 800807a <__d2b+0x92>
 8008050:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008054:	4405      	add	r5, r0
 8008056:	603d      	str	r5, [r7, #0]
 8008058:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800805c:	6030      	str	r0, [r6, #0]
 800805e:	4620      	mov	r0, r4
 8008060:	b003      	add	sp, #12
 8008062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008066:	6161      	str	r1, [r4, #20]
 8008068:	e7ea      	b.n	8008040 <__d2b+0x58>
 800806a:	a801      	add	r0, sp, #4
 800806c:	f7ff fce9 	bl	8007a42 <__lo0bits>
 8008070:	9b01      	ldr	r3, [sp, #4]
 8008072:	6163      	str	r3, [r4, #20]
 8008074:	3020      	adds	r0, #32
 8008076:	2201      	movs	r2, #1
 8008078:	e7e8      	b.n	800804c <__d2b+0x64>
 800807a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800807e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008082:	6038      	str	r0, [r7, #0]
 8008084:	6918      	ldr	r0, [r3, #16]
 8008086:	f7ff fcbd 	bl	8007a04 <__hi0bits>
 800808a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800808e:	e7e5      	b.n	800805c <__d2b+0x74>
 8008090:	0800a8d3 	.word	0x0800a8d3
 8008094:	0800a8e4 	.word	0x0800a8e4

08008098 <__ratio>:
 8008098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809c:	b085      	sub	sp, #20
 800809e:	e9cd 1000 	strd	r1, r0, [sp]
 80080a2:	a902      	add	r1, sp, #8
 80080a4:	f7ff ff56 	bl	8007f54 <__b2d>
 80080a8:	9800      	ldr	r0, [sp, #0]
 80080aa:	a903      	add	r1, sp, #12
 80080ac:	ec55 4b10 	vmov	r4, r5, d0
 80080b0:	f7ff ff50 	bl	8007f54 <__b2d>
 80080b4:	9b01      	ldr	r3, [sp, #4]
 80080b6:	6919      	ldr	r1, [r3, #16]
 80080b8:	9b00      	ldr	r3, [sp, #0]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	1ac9      	subs	r1, r1, r3
 80080be:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80080c2:	1a9b      	subs	r3, r3, r2
 80080c4:	ec5b ab10 	vmov	sl, fp, d0
 80080c8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	bfce      	itee	gt
 80080d0:	462a      	movgt	r2, r5
 80080d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80080d6:	465a      	movle	r2, fp
 80080d8:	462f      	mov	r7, r5
 80080da:	46d9      	mov	r9, fp
 80080dc:	bfcc      	ite	gt
 80080de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80080e2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80080e6:	464b      	mov	r3, r9
 80080e8:	4652      	mov	r2, sl
 80080ea:	4620      	mov	r0, r4
 80080ec:	4639      	mov	r1, r7
 80080ee:	f7f8 fbad 	bl	800084c <__aeabi_ddiv>
 80080f2:	ec41 0b10 	vmov	d0, r0, r1
 80080f6:	b005      	add	sp, #20
 80080f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080fc <__copybits>:
 80080fc:	3901      	subs	r1, #1
 80080fe:	b570      	push	{r4, r5, r6, lr}
 8008100:	1149      	asrs	r1, r1, #5
 8008102:	6914      	ldr	r4, [r2, #16]
 8008104:	3101      	adds	r1, #1
 8008106:	f102 0314 	add.w	r3, r2, #20
 800810a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800810e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008112:	1f05      	subs	r5, r0, #4
 8008114:	42a3      	cmp	r3, r4
 8008116:	d30c      	bcc.n	8008132 <__copybits+0x36>
 8008118:	1aa3      	subs	r3, r4, r2
 800811a:	3b11      	subs	r3, #17
 800811c:	f023 0303 	bic.w	r3, r3, #3
 8008120:	3211      	adds	r2, #17
 8008122:	42a2      	cmp	r2, r4
 8008124:	bf88      	it	hi
 8008126:	2300      	movhi	r3, #0
 8008128:	4418      	add	r0, r3
 800812a:	2300      	movs	r3, #0
 800812c:	4288      	cmp	r0, r1
 800812e:	d305      	bcc.n	800813c <__copybits+0x40>
 8008130:	bd70      	pop	{r4, r5, r6, pc}
 8008132:	f853 6b04 	ldr.w	r6, [r3], #4
 8008136:	f845 6f04 	str.w	r6, [r5, #4]!
 800813a:	e7eb      	b.n	8008114 <__copybits+0x18>
 800813c:	f840 3b04 	str.w	r3, [r0], #4
 8008140:	e7f4      	b.n	800812c <__copybits+0x30>

08008142 <__any_on>:
 8008142:	f100 0214 	add.w	r2, r0, #20
 8008146:	6900      	ldr	r0, [r0, #16]
 8008148:	114b      	asrs	r3, r1, #5
 800814a:	4298      	cmp	r0, r3
 800814c:	b510      	push	{r4, lr}
 800814e:	db11      	blt.n	8008174 <__any_on+0x32>
 8008150:	dd0a      	ble.n	8008168 <__any_on+0x26>
 8008152:	f011 011f 	ands.w	r1, r1, #31
 8008156:	d007      	beq.n	8008168 <__any_on+0x26>
 8008158:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800815c:	fa24 f001 	lsr.w	r0, r4, r1
 8008160:	fa00 f101 	lsl.w	r1, r0, r1
 8008164:	428c      	cmp	r4, r1
 8008166:	d10b      	bne.n	8008180 <__any_on+0x3e>
 8008168:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800816c:	4293      	cmp	r3, r2
 800816e:	d803      	bhi.n	8008178 <__any_on+0x36>
 8008170:	2000      	movs	r0, #0
 8008172:	bd10      	pop	{r4, pc}
 8008174:	4603      	mov	r3, r0
 8008176:	e7f7      	b.n	8008168 <__any_on+0x26>
 8008178:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800817c:	2900      	cmp	r1, #0
 800817e:	d0f5      	beq.n	800816c <__any_on+0x2a>
 8008180:	2001      	movs	r0, #1
 8008182:	e7f6      	b.n	8008172 <__any_on+0x30>

08008184 <sulp>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	4604      	mov	r4, r0
 8008188:	460d      	mov	r5, r1
 800818a:	ec45 4b10 	vmov	d0, r4, r5
 800818e:	4616      	mov	r6, r2
 8008190:	f7ff feba 	bl	8007f08 <__ulp>
 8008194:	ec51 0b10 	vmov	r0, r1, d0
 8008198:	b17e      	cbz	r6, 80081ba <sulp+0x36>
 800819a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800819e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	dd09      	ble.n	80081ba <sulp+0x36>
 80081a6:	051b      	lsls	r3, r3, #20
 80081a8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80081ac:	2400      	movs	r4, #0
 80081ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80081b2:	4622      	mov	r2, r4
 80081b4:	462b      	mov	r3, r5
 80081b6:	f7f8 fa1f 	bl	80005f8 <__aeabi_dmul>
 80081ba:	ec41 0b10 	vmov	d0, r0, r1
 80081be:	bd70      	pop	{r4, r5, r6, pc}

080081c0 <_strtod_l>:
 80081c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	b09f      	sub	sp, #124	@ 0x7c
 80081c6:	460c      	mov	r4, r1
 80081c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80081ca:	2200      	movs	r2, #0
 80081cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80081ce:	9005      	str	r0, [sp, #20]
 80081d0:	f04f 0a00 	mov.w	sl, #0
 80081d4:	f04f 0b00 	mov.w	fp, #0
 80081d8:	460a      	mov	r2, r1
 80081da:	9219      	str	r2, [sp, #100]	@ 0x64
 80081dc:	7811      	ldrb	r1, [r2, #0]
 80081de:	292b      	cmp	r1, #43	@ 0x2b
 80081e0:	d04a      	beq.n	8008278 <_strtod_l+0xb8>
 80081e2:	d838      	bhi.n	8008256 <_strtod_l+0x96>
 80081e4:	290d      	cmp	r1, #13
 80081e6:	d832      	bhi.n	800824e <_strtod_l+0x8e>
 80081e8:	2908      	cmp	r1, #8
 80081ea:	d832      	bhi.n	8008252 <_strtod_l+0x92>
 80081ec:	2900      	cmp	r1, #0
 80081ee:	d03b      	beq.n	8008268 <_strtod_l+0xa8>
 80081f0:	2200      	movs	r2, #0
 80081f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80081f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80081f6:	782a      	ldrb	r2, [r5, #0]
 80081f8:	2a30      	cmp	r2, #48	@ 0x30
 80081fa:	f040 80b3 	bne.w	8008364 <_strtod_l+0x1a4>
 80081fe:	786a      	ldrb	r2, [r5, #1]
 8008200:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008204:	2a58      	cmp	r2, #88	@ 0x58
 8008206:	d16e      	bne.n	80082e6 <_strtod_l+0x126>
 8008208:	9302      	str	r3, [sp, #8]
 800820a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800820c:	9301      	str	r3, [sp, #4]
 800820e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	4a8e      	ldr	r2, [pc, #568]	@ (800844c <_strtod_l+0x28c>)
 8008214:	9805      	ldr	r0, [sp, #20]
 8008216:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008218:	a919      	add	r1, sp, #100	@ 0x64
 800821a:	f001 fe6b 	bl	8009ef4 <__gethex>
 800821e:	f010 060f 	ands.w	r6, r0, #15
 8008222:	4604      	mov	r4, r0
 8008224:	d005      	beq.n	8008232 <_strtod_l+0x72>
 8008226:	2e06      	cmp	r6, #6
 8008228:	d128      	bne.n	800827c <_strtod_l+0xbc>
 800822a:	3501      	adds	r5, #1
 800822c:	2300      	movs	r3, #0
 800822e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008230:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008232:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008234:	2b00      	cmp	r3, #0
 8008236:	f040 858e 	bne.w	8008d56 <_strtod_l+0xb96>
 800823a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800823c:	b1cb      	cbz	r3, 8008272 <_strtod_l+0xb2>
 800823e:	4652      	mov	r2, sl
 8008240:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008244:	ec43 2b10 	vmov	d0, r2, r3
 8008248:	b01f      	add	sp, #124	@ 0x7c
 800824a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824e:	2920      	cmp	r1, #32
 8008250:	d1ce      	bne.n	80081f0 <_strtod_l+0x30>
 8008252:	3201      	adds	r2, #1
 8008254:	e7c1      	b.n	80081da <_strtod_l+0x1a>
 8008256:	292d      	cmp	r1, #45	@ 0x2d
 8008258:	d1ca      	bne.n	80081f0 <_strtod_l+0x30>
 800825a:	2101      	movs	r1, #1
 800825c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800825e:	1c51      	adds	r1, r2, #1
 8008260:	9119      	str	r1, [sp, #100]	@ 0x64
 8008262:	7852      	ldrb	r2, [r2, #1]
 8008264:	2a00      	cmp	r2, #0
 8008266:	d1c5      	bne.n	80081f4 <_strtod_l+0x34>
 8008268:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800826a:	9419      	str	r4, [sp, #100]	@ 0x64
 800826c:	2b00      	cmp	r3, #0
 800826e:	f040 8570 	bne.w	8008d52 <_strtod_l+0xb92>
 8008272:	4652      	mov	r2, sl
 8008274:	465b      	mov	r3, fp
 8008276:	e7e5      	b.n	8008244 <_strtod_l+0x84>
 8008278:	2100      	movs	r1, #0
 800827a:	e7ef      	b.n	800825c <_strtod_l+0x9c>
 800827c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800827e:	b13a      	cbz	r2, 8008290 <_strtod_l+0xd0>
 8008280:	2135      	movs	r1, #53	@ 0x35
 8008282:	a81c      	add	r0, sp, #112	@ 0x70
 8008284:	f7ff ff3a 	bl	80080fc <__copybits>
 8008288:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800828a:	9805      	ldr	r0, [sp, #20]
 800828c:	f7ff fb08 	bl	80078a0 <_Bfree>
 8008290:	3e01      	subs	r6, #1
 8008292:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008294:	2e04      	cmp	r6, #4
 8008296:	d806      	bhi.n	80082a6 <_strtod_l+0xe6>
 8008298:	e8df f006 	tbb	[pc, r6]
 800829c:	201d0314 	.word	0x201d0314
 80082a0:	14          	.byte	0x14
 80082a1:	00          	.byte	0x00
 80082a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80082a6:	05e1      	lsls	r1, r4, #23
 80082a8:	bf48      	it	mi
 80082aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80082ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082b2:	0d1b      	lsrs	r3, r3, #20
 80082b4:	051b      	lsls	r3, r3, #20
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1bb      	bne.n	8008232 <_strtod_l+0x72>
 80082ba:	f7fe fb2f 	bl	800691c <__errno>
 80082be:	2322      	movs	r3, #34	@ 0x22
 80082c0:	6003      	str	r3, [r0, #0]
 80082c2:	e7b6      	b.n	8008232 <_strtod_l+0x72>
 80082c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80082c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80082cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80082d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80082d4:	e7e7      	b.n	80082a6 <_strtod_l+0xe6>
 80082d6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008454 <_strtod_l+0x294>
 80082da:	e7e4      	b.n	80082a6 <_strtod_l+0xe6>
 80082dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80082e0:	f04f 3aff 	mov.w	sl, #4294967295
 80082e4:	e7df      	b.n	80082a6 <_strtod_l+0xe6>
 80082e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082e8:	1c5a      	adds	r2, r3, #1
 80082ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80082ec:	785b      	ldrb	r3, [r3, #1]
 80082ee:	2b30      	cmp	r3, #48	@ 0x30
 80082f0:	d0f9      	beq.n	80082e6 <_strtod_l+0x126>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d09d      	beq.n	8008232 <_strtod_l+0x72>
 80082f6:	2301      	movs	r3, #1
 80082f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80082fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80082fe:	2300      	movs	r3, #0
 8008300:	9308      	str	r3, [sp, #32]
 8008302:	930a      	str	r3, [sp, #40]	@ 0x28
 8008304:	461f      	mov	r7, r3
 8008306:	220a      	movs	r2, #10
 8008308:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800830a:	7805      	ldrb	r5, [r0, #0]
 800830c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008310:	b2d9      	uxtb	r1, r3
 8008312:	2909      	cmp	r1, #9
 8008314:	d928      	bls.n	8008368 <_strtod_l+0x1a8>
 8008316:	494e      	ldr	r1, [pc, #312]	@ (8008450 <_strtod_l+0x290>)
 8008318:	2201      	movs	r2, #1
 800831a:	f7fe faa3 	bl	8006864 <strncmp>
 800831e:	2800      	cmp	r0, #0
 8008320:	d032      	beq.n	8008388 <_strtod_l+0x1c8>
 8008322:	2000      	movs	r0, #0
 8008324:	462a      	mov	r2, r5
 8008326:	4681      	mov	r9, r0
 8008328:	463d      	mov	r5, r7
 800832a:	4603      	mov	r3, r0
 800832c:	2a65      	cmp	r2, #101	@ 0x65
 800832e:	d001      	beq.n	8008334 <_strtod_l+0x174>
 8008330:	2a45      	cmp	r2, #69	@ 0x45
 8008332:	d114      	bne.n	800835e <_strtod_l+0x19e>
 8008334:	b91d      	cbnz	r5, 800833e <_strtod_l+0x17e>
 8008336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008338:	4302      	orrs	r2, r0
 800833a:	d095      	beq.n	8008268 <_strtod_l+0xa8>
 800833c:	2500      	movs	r5, #0
 800833e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008340:	1c62      	adds	r2, r4, #1
 8008342:	9219      	str	r2, [sp, #100]	@ 0x64
 8008344:	7862      	ldrb	r2, [r4, #1]
 8008346:	2a2b      	cmp	r2, #43	@ 0x2b
 8008348:	d077      	beq.n	800843a <_strtod_l+0x27a>
 800834a:	2a2d      	cmp	r2, #45	@ 0x2d
 800834c:	d07b      	beq.n	8008446 <_strtod_l+0x286>
 800834e:	f04f 0c00 	mov.w	ip, #0
 8008352:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008356:	2909      	cmp	r1, #9
 8008358:	f240 8082 	bls.w	8008460 <_strtod_l+0x2a0>
 800835c:	9419      	str	r4, [sp, #100]	@ 0x64
 800835e:	f04f 0800 	mov.w	r8, #0
 8008362:	e0a2      	b.n	80084aa <_strtod_l+0x2ea>
 8008364:	2300      	movs	r3, #0
 8008366:	e7c7      	b.n	80082f8 <_strtod_l+0x138>
 8008368:	2f08      	cmp	r7, #8
 800836a:	bfd5      	itete	le
 800836c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800836e:	9908      	ldrgt	r1, [sp, #32]
 8008370:	fb02 3301 	mlale	r3, r2, r1, r3
 8008374:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008378:	f100 0001 	add.w	r0, r0, #1
 800837c:	bfd4      	ite	le
 800837e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008380:	9308      	strgt	r3, [sp, #32]
 8008382:	3701      	adds	r7, #1
 8008384:	9019      	str	r0, [sp, #100]	@ 0x64
 8008386:	e7bf      	b.n	8008308 <_strtod_l+0x148>
 8008388:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800838a:	1c5a      	adds	r2, r3, #1
 800838c:	9219      	str	r2, [sp, #100]	@ 0x64
 800838e:	785a      	ldrb	r2, [r3, #1]
 8008390:	b37f      	cbz	r7, 80083f2 <_strtod_l+0x232>
 8008392:	4681      	mov	r9, r0
 8008394:	463d      	mov	r5, r7
 8008396:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800839a:	2b09      	cmp	r3, #9
 800839c:	d912      	bls.n	80083c4 <_strtod_l+0x204>
 800839e:	2301      	movs	r3, #1
 80083a0:	e7c4      	b.n	800832c <_strtod_l+0x16c>
 80083a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083a4:	1c5a      	adds	r2, r3, #1
 80083a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80083a8:	785a      	ldrb	r2, [r3, #1]
 80083aa:	3001      	adds	r0, #1
 80083ac:	2a30      	cmp	r2, #48	@ 0x30
 80083ae:	d0f8      	beq.n	80083a2 <_strtod_l+0x1e2>
 80083b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80083b4:	2b08      	cmp	r3, #8
 80083b6:	f200 84d3 	bhi.w	8008d60 <_strtod_l+0xba0>
 80083ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80083be:	4681      	mov	r9, r0
 80083c0:	2000      	movs	r0, #0
 80083c2:	4605      	mov	r5, r0
 80083c4:	3a30      	subs	r2, #48	@ 0x30
 80083c6:	f100 0301 	add.w	r3, r0, #1
 80083ca:	d02a      	beq.n	8008422 <_strtod_l+0x262>
 80083cc:	4499      	add	r9, r3
 80083ce:	eb00 0c05 	add.w	ip, r0, r5
 80083d2:	462b      	mov	r3, r5
 80083d4:	210a      	movs	r1, #10
 80083d6:	4563      	cmp	r3, ip
 80083d8:	d10d      	bne.n	80083f6 <_strtod_l+0x236>
 80083da:	1c69      	adds	r1, r5, #1
 80083dc:	4401      	add	r1, r0
 80083de:	4428      	add	r0, r5
 80083e0:	2808      	cmp	r0, #8
 80083e2:	dc16      	bgt.n	8008412 <_strtod_l+0x252>
 80083e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80083e6:	230a      	movs	r3, #10
 80083e8:	fb03 2300 	mla	r3, r3, r0, r2
 80083ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80083ee:	2300      	movs	r3, #0
 80083f0:	e018      	b.n	8008424 <_strtod_l+0x264>
 80083f2:	4638      	mov	r0, r7
 80083f4:	e7da      	b.n	80083ac <_strtod_l+0x1ec>
 80083f6:	2b08      	cmp	r3, #8
 80083f8:	f103 0301 	add.w	r3, r3, #1
 80083fc:	dc03      	bgt.n	8008406 <_strtod_l+0x246>
 80083fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008400:	434e      	muls	r6, r1
 8008402:	960a      	str	r6, [sp, #40]	@ 0x28
 8008404:	e7e7      	b.n	80083d6 <_strtod_l+0x216>
 8008406:	2b10      	cmp	r3, #16
 8008408:	bfde      	ittt	le
 800840a:	9e08      	ldrle	r6, [sp, #32]
 800840c:	434e      	mulle	r6, r1
 800840e:	9608      	strle	r6, [sp, #32]
 8008410:	e7e1      	b.n	80083d6 <_strtod_l+0x216>
 8008412:	280f      	cmp	r0, #15
 8008414:	dceb      	bgt.n	80083ee <_strtod_l+0x22e>
 8008416:	9808      	ldr	r0, [sp, #32]
 8008418:	230a      	movs	r3, #10
 800841a:	fb03 2300 	mla	r3, r3, r0, r2
 800841e:	9308      	str	r3, [sp, #32]
 8008420:	e7e5      	b.n	80083ee <_strtod_l+0x22e>
 8008422:	4629      	mov	r1, r5
 8008424:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008426:	1c50      	adds	r0, r2, #1
 8008428:	9019      	str	r0, [sp, #100]	@ 0x64
 800842a:	7852      	ldrb	r2, [r2, #1]
 800842c:	4618      	mov	r0, r3
 800842e:	460d      	mov	r5, r1
 8008430:	e7b1      	b.n	8008396 <_strtod_l+0x1d6>
 8008432:	f04f 0900 	mov.w	r9, #0
 8008436:	2301      	movs	r3, #1
 8008438:	e77d      	b.n	8008336 <_strtod_l+0x176>
 800843a:	f04f 0c00 	mov.w	ip, #0
 800843e:	1ca2      	adds	r2, r4, #2
 8008440:	9219      	str	r2, [sp, #100]	@ 0x64
 8008442:	78a2      	ldrb	r2, [r4, #2]
 8008444:	e785      	b.n	8008352 <_strtod_l+0x192>
 8008446:	f04f 0c01 	mov.w	ip, #1
 800844a:	e7f8      	b.n	800843e <_strtod_l+0x27e>
 800844c:	0800aa58 	.word	0x0800aa58
 8008450:	0800aa40 	.word	0x0800aa40
 8008454:	7ff00000 	.word	0x7ff00000
 8008458:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800845a:	1c51      	adds	r1, r2, #1
 800845c:	9119      	str	r1, [sp, #100]	@ 0x64
 800845e:	7852      	ldrb	r2, [r2, #1]
 8008460:	2a30      	cmp	r2, #48	@ 0x30
 8008462:	d0f9      	beq.n	8008458 <_strtod_l+0x298>
 8008464:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008468:	2908      	cmp	r1, #8
 800846a:	f63f af78 	bhi.w	800835e <_strtod_l+0x19e>
 800846e:	3a30      	subs	r2, #48	@ 0x30
 8008470:	920e      	str	r2, [sp, #56]	@ 0x38
 8008472:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008474:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008476:	f04f 080a 	mov.w	r8, #10
 800847a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800847c:	1c56      	adds	r6, r2, #1
 800847e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008480:	7852      	ldrb	r2, [r2, #1]
 8008482:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008486:	f1be 0f09 	cmp.w	lr, #9
 800848a:	d939      	bls.n	8008500 <_strtod_l+0x340>
 800848c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800848e:	1a76      	subs	r6, r6, r1
 8008490:	2e08      	cmp	r6, #8
 8008492:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008496:	dc03      	bgt.n	80084a0 <_strtod_l+0x2e0>
 8008498:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800849a:	4588      	cmp	r8, r1
 800849c:	bfa8      	it	ge
 800849e:	4688      	movge	r8, r1
 80084a0:	f1bc 0f00 	cmp.w	ip, #0
 80084a4:	d001      	beq.n	80084aa <_strtod_l+0x2ea>
 80084a6:	f1c8 0800 	rsb	r8, r8, #0
 80084aa:	2d00      	cmp	r5, #0
 80084ac:	d14e      	bne.n	800854c <_strtod_l+0x38c>
 80084ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084b0:	4308      	orrs	r0, r1
 80084b2:	f47f aebe 	bne.w	8008232 <_strtod_l+0x72>
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f47f aed6 	bne.w	8008268 <_strtod_l+0xa8>
 80084bc:	2a69      	cmp	r2, #105	@ 0x69
 80084be:	d028      	beq.n	8008512 <_strtod_l+0x352>
 80084c0:	dc25      	bgt.n	800850e <_strtod_l+0x34e>
 80084c2:	2a49      	cmp	r2, #73	@ 0x49
 80084c4:	d025      	beq.n	8008512 <_strtod_l+0x352>
 80084c6:	2a4e      	cmp	r2, #78	@ 0x4e
 80084c8:	f47f aece 	bne.w	8008268 <_strtod_l+0xa8>
 80084cc:	499b      	ldr	r1, [pc, #620]	@ (800873c <_strtod_l+0x57c>)
 80084ce:	a819      	add	r0, sp, #100	@ 0x64
 80084d0:	f001 ff32 	bl	800a338 <__match>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	f43f aec7 	beq.w	8008268 <_strtod_l+0xa8>
 80084da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	2b28      	cmp	r3, #40	@ 0x28
 80084e0:	d12e      	bne.n	8008540 <_strtod_l+0x380>
 80084e2:	4997      	ldr	r1, [pc, #604]	@ (8008740 <_strtod_l+0x580>)
 80084e4:	aa1c      	add	r2, sp, #112	@ 0x70
 80084e6:	a819      	add	r0, sp, #100	@ 0x64
 80084e8:	f001 ff3a 	bl	800a360 <__hexnan>
 80084ec:	2805      	cmp	r0, #5
 80084ee:	d127      	bne.n	8008540 <_strtod_l+0x380>
 80084f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80084f2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80084f6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80084fa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80084fe:	e698      	b.n	8008232 <_strtod_l+0x72>
 8008500:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008502:	fb08 2101 	mla	r1, r8, r1, r2
 8008506:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800850a:	920e      	str	r2, [sp, #56]	@ 0x38
 800850c:	e7b5      	b.n	800847a <_strtod_l+0x2ba>
 800850e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008510:	e7da      	b.n	80084c8 <_strtod_l+0x308>
 8008512:	498c      	ldr	r1, [pc, #560]	@ (8008744 <_strtod_l+0x584>)
 8008514:	a819      	add	r0, sp, #100	@ 0x64
 8008516:	f001 ff0f 	bl	800a338 <__match>
 800851a:	2800      	cmp	r0, #0
 800851c:	f43f aea4 	beq.w	8008268 <_strtod_l+0xa8>
 8008520:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008522:	4989      	ldr	r1, [pc, #548]	@ (8008748 <_strtod_l+0x588>)
 8008524:	3b01      	subs	r3, #1
 8008526:	a819      	add	r0, sp, #100	@ 0x64
 8008528:	9319      	str	r3, [sp, #100]	@ 0x64
 800852a:	f001 ff05 	bl	800a338 <__match>
 800852e:	b910      	cbnz	r0, 8008536 <_strtod_l+0x376>
 8008530:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008532:	3301      	adds	r3, #1
 8008534:	9319      	str	r3, [sp, #100]	@ 0x64
 8008536:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008758 <_strtod_l+0x598>
 800853a:	f04f 0a00 	mov.w	sl, #0
 800853e:	e678      	b.n	8008232 <_strtod_l+0x72>
 8008540:	4882      	ldr	r0, [pc, #520]	@ (800874c <_strtod_l+0x58c>)
 8008542:	f001 fc35 	bl	8009db0 <nan>
 8008546:	ec5b ab10 	vmov	sl, fp, d0
 800854a:	e672      	b.n	8008232 <_strtod_l+0x72>
 800854c:	eba8 0309 	sub.w	r3, r8, r9
 8008550:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008552:	9309      	str	r3, [sp, #36]	@ 0x24
 8008554:	2f00      	cmp	r7, #0
 8008556:	bf08      	it	eq
 8008558:	462f      	moveq	r7, r5
 800855a:	2d10      	cmp	r5, #16
 800855c:	462c      	mov	r4, r5
 800855e:	bfa8      	it	ge
 8008560:	2410      	movge	r4, #16
 8008562:	f7f7 ffcf 	bl	8000504 <__aeabi_ui2d>
 8008566:	2d09      	cmp	r5, #9
 8008568:	4682      	mov	sl, r0
 800856a:	468b      	mov	fp, r1
 800856c:	dc13      	bgt.n	8008596 <_strtod_l+0x3d6>
 800856e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008570:	2b00      	cmp	r3, #0
 8008572:	f43f ae5e 	beq.w	8008232 <_strtod_l+0x72>
 8008576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008578:	dd78      	ble.n	800866c <_strtod_l+0x4ac>
 800857a:	2b16      	cmp	r3, #22
 800857c:	dc5f      	bgt.n	800863e <_strtod_l+0x47e>
 800857e:	4974      	ldr	r1, [pc, #464]	@ (8008750 <_strtod_l+0x590>)
 8008580:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008588:	4652      	mov	r2, sl
 800858a:	465b      	mov	r3, fp
 800858c:	f7f8 f834 	bl	80005f8 <__aeabi_dmul>
 8008590:	4682      	mov	sl, r0
 8008592:	468b      	mov	fp, r1
 8008594:	e64d      	b.n	8008232 <_strtod_l+0x72>
 8008596:	4b6e      	ldr	r3, [pc, #440]	@ (8008750 <_strtod_l+0x590>)
 8008598:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800859c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80085a0:	f7f8 f82a 	bl	80005f8 <__aeabi_dmul>
 80085a4:	4682      	mov	sl, r0
 80085a6:	9808      	ldr	r0, [sp, #32]
 80085a8:	468b      	mov	fp, r1
 80085aa:	f7f7 ffab 	bl	8000504 <__aeabi_ui2d>
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	4650      	mov	r0, sl
 80085b4:	4659      	mov	r1, fp
 80085b6:	f7f7 fe69 	bl	800028c <__adddf3>
 80085ba:	2d0f      	cmp	r5, #15
 80085bc:	4682      	mov	sl, r0
 80085be:	468b      	mov	fp, r1
 80085c0:	ddd5      	ble.n	800856e <_strtod_l+0x3ae>
 80085c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c4:	1b2c      	subs	r4, r5, r4
 80085c6:	441c      	add	r4, r3
 80085c8:	2c00      	cmp	r4, #0
 80085ca:	f340 8096 	ble.w	80086fa <_strtod_l+0x53a>
 80085ce:	f014 030f 	ands.w	r3, r4, #15
 80085d2:	d00a      	beq.n	80085ea <_strtod_l+0x42a>
 80085d4:	495e      	ldr	r1, [pc, #376]	@ (8008750 <_strtod_l+0x590>)
 80085d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085da:	4652      	mov	r2, sl
 80085dc:	465b      	mov	r3, fp
 80085de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085e2:	f7f8 f809 	bl	80005f8 <__aeabi_dmul>
 80085e6:	4682      	mov	sl, r0
 80085e8:	468b      	mov	fp, r1
 80085ea:	f034 040f 	bics.w	r4, r4, #15
 80085ee:	d073      	beq.n	80086d8 <_strtod_l+0x518>
 80085f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80085f4:	dd48      	ble.n	8008688 <_strtod_l+0x4c8>
 80085f6:	2400      	movs	r4, #0
 80085f8:	46a0      	mov	r8, r4
 80085fa:	940a      	str	r4, [sp, #40]	@ 0x28
 80085fc:	46a1      	mov	r9, r4
 80085fe:	9a05      	ldr	r2, [sp, #20]
 8008600:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008758 <_strtod_l+0x598>
 8008604:	2322      	movs	r3, #34	@ 0x22
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	f04f 0a00 	mov.w	sl, #0
 800860c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800860e:	2b00      	cmp	r3, #0
 8008610:	f43f ae0f 	beq.w	8008232 <_strtod_l+0x72>
 8008614:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008616:	9805      	ldr	r0, [sp, #20]
 8008618:	f7ff f942 	bl	80078a0 <_Bfree>
 800861c:	9805      	ldr	r0, [sp, #20]
 800861e:	4649      	mov	r1, r9
 8008620:	f7ff f93e 	bl	80078a0 <_Bfree>
 8008624:	9805      	ldr	r0, [sp, #20]
 8008626:	4641      	mov	r1, r8
 8008628:	f7ff f93a 	bl	80078a0 <_Bfree>
 800862c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800862e:	9805      	ldr	r0, [sp, #20]
 8008630:	f7ff f936 	bl	80078a0 <_Bfree>
 8008634:	9805      	ldr	r0, [sp, #20]
 8008636:	4621      	mov	r1, r4
 8008638:	f7ff f932 	bl	80078a0 <_Bfree>
 800863c:	e5f9      	b.n	8008232 <_strtod_l+0x72>
 800863e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008640:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008644:	4293      	cmp	r3, r2
 8008646:	dbbc      	blt.n	80085c2 <_strtod_l+0x402>
 8008648:	4c41      	ldr	r4, [pc, #260]	@ (8008750 <_strtod_l+0x590>)
 800864a:	f1c5 050f 	rsb	r5, r5, #15
 800864e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008652:	4652      	mov	r2, sl
 8008654:	465b      	mov	r3, fp
 8008656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800865a:	f7f7 ffcd 	bl	80005f8 <__aeabi_dmul>
 800865e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008660:	1b5d      	subs	r5, r3, r5
 8008662:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008666:	e9d4 2300 	ldrd	r2, r3, [r4]
 800866a:	e78f      	b.n	800858c <_strtod_l+0x3cc>
 800866c:	3316      	adds	r3, #22
 800866e:	dba8      	blt.n	80085c2 <_strtod_l+0x402>
 8008670:	4b37      	ldr	r3, [pc, #220]	@ (8008750 <_strtod_l+0x590>)
 8008672:	eba9 0808 	sub.w	r8, r9, r8
 8008676:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800867a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800867e:	4650      	mov	r0, sl
 8008680:	4659      	mov	r1, fp
 8008682:	f7f8 f8e3 	bl	800084c <__aeabi_ddiv>
 8008686:	e783      	b.n	8008590 <_strtod_l+0x3d0>
 8008688:	4b32      	ldr	r3, [pc, #200]	@ (8008754 <_strtod_l+0x594>)
 800868a:	9308      	str	r3, [sp, #32]
 800868c:	2300      	movs	r3, #0
 800868e:	1124      	asrs	r4, r4, #4
 8008690:	4650      	mov	r0, sl
 8008692:	4659      	mov	r1, fp
 8008694:	461e      	mov	r6, r3
 8008696:	2c01      	cmp	r4, #1
 8008698:	dc21      	bgt.n	80086de <_strtod_l+0x51e>
 800869a:	b10b      	cbz	r3, 80086a0 <_strtod_l+0x4e0>
 800869c:	4682      	mov	sl, r0
 800869e:	468b      	mov	fp, r1
 80086a0:	492c      	ldr	r1, [pc, #176]	@ (8008754 <_strtod_l+0x594>)
 80086a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80086a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80086aa:	4652      	mov	r2, sl
 80086ac:	465b      	mov	r3, fp
 80086ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086b2:	f7f7 ffa1 	bl	80005f8 <__aeabi_dmul>
 80086b6:	4b28      	ldr	r3, [pc, #160]	@ (8008758 <_strtod_l+0x598>)
 80086b8:	460a      	mov	r2, r1
 80086ba:	400b      	ands	r3, r1
 80086bc:	4927      	ldr	r1, [pc, #156]	@ (800875c <_strtod_l+0x59c>)
 80086be:	428b      	cmp	r3, r1
 80086c0:	4682      	mov	sl, r0
 80086c2:	d898      	bhi.n	80085f6 <_strtod_l+0x436>
 80086c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80086c8:	428b      	cmp	r3, r1
 80086ca:	bf86      	itte	hi
 80086cc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008760 <_strtod_l+0x5a0>
 80086d0:	f04f 3aff 	movhi.w	sl, #4294967295
 80086d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80086d8:	2300      	movs	r3, #0
 80086da:	9308      	str	r3, [sp, #32]
 80086dc:	e07a      	b.n	80087d4 <_strtod_l+0x614>
 80086de:	07e2      	lsls	r2, r4, #31
 80086e0:	d505      	bpl.n	80086ee <_strtod_l+0x52e>
 80086e2:	9b08      	ldr	r3, [sp, #32]
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	f7f7 ff86 	bl	80005f8 <__aeabi_dmul>
 80086ec:	2301      	movs	r3, #1
 80086ee:	9a08      	ldr	r2, [sp, #32]
 80086f0:	3208      	adds	r2, #8
 80086f2:	3601      	adds	r6, #1
 80086f4:	1064      	asrs	r4, r4, #1
 80086f6:	9208      	str	r2, [sp, #32]
 80086f8:	e7cd      	b.n	8008696 <_strtod_l+0x4d6>
 80086fa:	d0ed      	beq.n	80086d8 <_strtod_l+0x518>
 80086fc:	4264      	negs	r4, r4
 80086fe:	f014 020f 	ands.w	r2, r4, #15
 8008702:	d00a      	beq.n	800871a <_strtod_l+0x55a>
 8008704:	4b12      	ldr	r3, [pc, #72]	@ (8008750 <_strtod_l+0x590>)
 8008706:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800870a:	4650      	mov	r0, sl
 800870c:	4659      	mov	r1, fp
 800870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008712:	f7f8 f89b 	bl	800084c <__aeabi_ddiv>
 8008716:	4682      	mov	sl, r0
 8008718:	468b      	mov	fp, r1
 800871a:	1124      	asrs	r4, r4, #4
 800871c:	d0dc      	beq.n	80086d8 <_strtod_l+0x518>
 800871e:	2c1f      	cmp	r4, #31
 8008720:	dd20      	ble.n	8008764 <_strtod_l+0x5a4>
 8008722:	2400      	movs	r4, #0
 8008724:	46a0      	mov	r8, r4
 8008726:	940a      	str	r4, [sp, #40]	@ 0x28
 8008728:	46a1      	mov	r9, r4
 800872a:	9a05      	ldr	r2, [sp, #20]
 800872c:	2322      	movs	r3, #34	@ 0x22
 800872e:	f04f 0a00 	mov.w	sl, #0
 8008732:	f04f 0b00 	mov.w	fp, #0
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	e768      	b.n	800860c <_strtod_l+0x44c>
 800873a:	bf00      	nop
 800873c:	0800a82d 	.word	0x0800a82d
 8008740:	0800aa44 	.word	0x0800aa44
 8008744:	0800a825 	.word	0x0800a825
 8008748:	0800a85a 	.word	0x0800a85a
 800874c:	0800ac08 	.word	0x0800ac08
 8008750:	0800a978 	.word	0x0800a978
 8008754:	0800a950 	.word	0x0800a950
 8008758:	7ff00000 	.word	0x7ff00000
 800875c:	7ca00000 	.word	0x7ca00000
 8008760:	7fefffff 	.word	0x7fefffff
 8008764:	f014 0310 	ands.w	r3, r4, #16
 8008768:	bf18      	it	ne
 800876a:	236a      	movne	r3, #106	@ 0x6a
 800876c:	4ea9      	ldr	r6, [pc, #676]	@ (8008a14 <_strtod_l+0x854>)
 800876e:	9308      	str	r3, [sp, #32]
 8008770:	4650      	mov	r0, sl
 8008772:	4659      	mov	r1, fp
 8008774:	2300      	movs	r3, #0
 8008776:	07e2      	lsls	r2, r4, #31
 8008778:	d504      	bpl.n	8008784 <_strtod_l+0x5c4>
 800877a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800877e:	f7f7 ff3b 	bl	80005f8 <__aeabi_dmul>
 8008782:	2301      	movs	r3, #1
 8008784:	1064      	asrs	r4, r4, #1
 8008786:	f106 0608 	add.w	r6, r6, #8
 800878a:	d1f4      	bne.n	8008776 <_strtod_l+0x5b6>
 800878c:	b10b      	cbz	r3, 8008792 <_strtod_l+0x5d2>
 800878e:	4682      	mov	sl, r0
 8008790:	468b      	mov	fp, r1
 8008792:	9b08      	ldr	r3, [sp, #32]
 8008794:	b1b3      	cbz	r3, 80087c4 <_strtod_l+0x604>
 8008796:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800879a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800879e:	2b00      	cmp	r3, #0
 80087a0:	4659      	mov	r1, fp
 80087a2:	dd0f      	ble.n	80087c4 <_strtod_l+0x604>
 80087a4:	2b1f      	cmp	r3, #31
 80087a6:	dd55      	ble.n	8008854 <_strtod_l+0x694>
 80087a8:	2b34      	cmp	r3, #52	@ 0x34
 80087aa:	bfde      	ittt	le
 80087ac:	f04f 33ff 	movle.w	r3, #4294967295
 80087b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80087b4:	4093      	lslle	r3, r2
 80087b6:	f04f 0a00 	mov.w	sl, #0
 80087ba:	bfcc      	ite	gt
 80087bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80087c0:	ea03 0b01 	andle.w	fp, r3, r1
 80087c4:	2200      	movs	r2, #0
 80087c6:	2300      	movs	r3, #0
 80087c8:	4650      	mov	r0, sl
 80087ca:	4659      	mov	r1, fp
 80087cc:	f7f8 f97c 	bl	8000ac8 <__aeabi_dcmpeq>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	d1a6      	bne.n	8008722 <_strtod_l+0x562>
 80087d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80087da:	9805      	ldr	r0, [sp, #20]
 80087dc:	462b      	mov	r3, r5
 80087de:	463a      	mov	r2, r7
 80087e0:	f7ff f8c6 	bl	8007970 <__s2b>
 80087e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80087e6:	2800      	cmp	r0, #0
 80087e8:	f43f af05 	beq.w	80085f6 <_strtod_l+0x436>
 80087ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087ee:	2a00      	cmp	r2, #0
 80087f0:	eba9 0308 	sub.w	r3, r9, r8
 80087f4:	bfa8      	it	ge
 80087f6:	2300      	movge	r3, #0
 80087f8:	9312      	str	r3, [sp, #72]	@ 0x48
 80087fa:	2400      	movs	r4, #0
 80087fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008800:	9316      	str	r3, [sp, #88]	@ 0x58
 8008802:	46a0      	mov	r8, r4
 8008804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008806:	9805      	ldr	r0, [sp, #20]
 8008808:	6859      	ldr	r1, [r3, #4]
 800880a:	f7ff f809 	bl	8007820 <_Balloc>
 800880e:	4681      	mov	r9, r0
 8008810:	2800      	cmp	r0, #0
 8008812:	f43f aef4 	beq.w	80085fe <_strtod_l+0x43e>
 8008816:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008818:	691a      	ldr	r2, [r3, #16]
 800881a:	3202      	adds	r2, #2
 800881c:	f103 010c 	add.w	r1, r3, #12
 8008820:	0092      	lsls	r2, r2, #2
 8008822:	300c      	adds	r0, #12
 8008824:	f001 fab4 	bl	8009d90 <memcpy>
 8008828:	ec4b ab10 	vmov	d0, sl, fp
 800882c:	9805      	ldr	r0, [sp, #20]
 800882e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008830:	a91b      	add	r1, sp, #108	@ 0x6c
 8008832:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008836:	f7ff fbd7 	bl	8007fe8 <__d2b>
 800883a:	901a      	str	r0, [sp, #104]	@ 0x68
 800883c:	2800      	cmp	r0, #0
 800883e:	f43f aede 	beq.w	80085fe <_strtod_l+0x43e>
 8008842:	9805      	ldr	r0, [sp, #20]
 8008844:	2101      	movs	r1, #1
 8008846:	f7ff f929 	bl	8007a9c <__i2b>
 800884a:	4680      	mov	r8, r0
 800884c:	b948      	cbnz	r0, 8008862 <_strtod_l+0x6a2>
 800884e:	f04f 0800 	mov.w	r8, #0
 8008852:	e6d4      	b.n	80085fe <_strtod_l+0x43e>
 8008854:	f04f 32ff 	mov.w	r2, #4294967295
 8008858:	fa02 f303 	lsl.w	r3, r2, r3
 800885c:	ea03 0a0a 	and.w	sl, r3, sl
 8008860:	e7b0      	b.n	80087c4 <_strtod_l+0x604>
 8008862:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008864:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008866:	2d00      	cmp	r5, #0
 8008868:	bfab      	itete	ge
 800886a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800886c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800886e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008870:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008872:	bfac      	ite	ge
 8008874:	18ef      	addge	r7, r5, r3
 8008876:	1b5e      	sublt	r6, r3, r5
 8008878:	9b08      	ldr	r3, [sp, #32]
 800887a:	1aed      	subs	r5, r5, r3
 800887c:	4415      	add	r5, r2
 800887e:	4b66      	ldr	r3, [pc, #408]	@ (8008a18 <_strtod_l+0x858>)
 8008880:	3d01      	subs	r5, #1
 8008882:	429d      	cmp	r5, r3
 8008884:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008888:	da50      	bge.n	800892c <_strtod_l+0x76c>
 800888a:	1b5b      	subs	r3, r3, r5
 800888c:	2b1f      	cmp	r3, #31
 800888e:	eba2 0203 	sub.w	r2, r2, r3
 8008892:	f04f 0101 	mov.w	r1, #1
 8008896:	dc3d      	bgt.n	8008914 <_strtod_l+0x754>
 8008898:	fa01 f303 	lsl.w	r3, r1, r3
 800889c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800889e:	2300      	movs	r3, #0
 80088a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80088a2:	18bd      	adds	r5, r7, r2
 80088a4:	9b08      	ldr	r3, [sp, #32]
 80088a6:	42af      	cmp	r7, r5
 80088a8:	4416      	add	r6, r2
 80088aa:	441e      	add	r6, r3
 80088ac:	463b      	mov	r3, r7
 80088ae:	bfa8      	it	ge
 80088b0:	462b      	movge	r3, r5
 80088b2:	42b3      	cmp	r3, r6
 80088b4:	bfa8      	it	ge
 80088b6:	4633      	movge	r3, r6
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	bfc2      	ittt	gt
 80088bc:	1aed      	subgt	r5, r5, r3
 80088be:	1af6      	subgt	r6, r6, r3
 80088c0:	1aff      	subgt	r7, r7, r3
 80088c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	dd16      	ble.n	80088f6 <_strtod_l+0x736>
 80088c8:	4641      	mov	r1, r8
 80088ca:	9805      	ldr	r0, [sp, #20]
 80088cc:	461a      	mov	r2, r3
 80088ce:	f7ff f9a5 	bl	8007c1c <__pow5mult>
 80088d2:	4680      	mov	r8, r0
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d0ba      	beq.n	800884e <_strtod_l+0x68e>
 80088d8:	4601      	mov	r1, r0
 80088da:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80088dc:	9805      	ldr	r0, [sp, #20]
 80088de:	f7ff f8f3 	bl	8007ac8 <__multiply>
 80088e2:	900e      	str	r0, [sp, #56]	@ 0x38
 80088e4:	2800      	cmp	r0, #0
 80088e6:	f43f ae8a 	beq.w	80085fe <_strtod_l+0x43e>
 80088ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088ec:	9805      	ldr	r0, [sp, #20]
 80088ee:	f7fe ffd7 	bl	80078a0 <_Bfree>
 80088f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80088f6:	2d00      	cmp	r5, #0
 80088f8:	dc1d      	bgt.n	8008936 <_strtod_l+0x776>
 80088fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	dd23      	ble.n	8008948 <_strtod_l+0x788>
 8008900:	4649      	mov	r1, r9
 8008902:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008904:	9805      	ldr	r0, [sp, #20]
 8008906:	f7ff f989 	bl	8007c1c <__pow5mult>
 800890a:	4681      	mov	r9, r0
 800890c:	b9e0      	cbnz	r0, 8008948 <_strtod_l+0x788>
 800890e:	f04f 0900 	mov.w	r9, #0
 8008912:	e674      	b.n	80085fe <_strtod_l+0x43e>
 8008914:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008918:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800891c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008920:	35e2      	adds	r5, #226	@ 0xe2
 8008922:	fa01 f305 	lsl.w	r3, r1, r5
 8008926:	9310      	str	r3, [sp, #64]	@ 0x40
 8008928:	9113      	str	r1, [sp, #76]	@ 0x4c
 800892a:	e7ba      	b.n	80088a2 <_strtod_l+0x6e2>
 800892c:	2300      	movs	r3, #0
 800892e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008930:	2301      	movs	r3, #1
 8008932:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008934:	e7b5      	b.n	80088a2 <_strtod_l+0x6e2>
 8008936:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008938:	9805      	ldr	r0, [sp, #20]
 800893a:	462a      	mov	r2, r5
 800893c:	f7ff f9c8 	bl	8007cd0 <__lshift>
 8008940:	901a      	str	r0, [sp, #104]	@ 0x68
 8008942:	2800      	cmp	r0, #0
 8008944:	d1d9      	bne.n	80088fa <_strtod_l+0x73a>
 8008946:	e65a      	b.n	80085fe <_strtod_l+0x43e>
 8008948:	2e00      	cmp	r6, #0
 800894a:	dd07      	ble.n	800895c <_strtod_l+0x79c>
 800894c:	4649      	mov	r1, r9
 800894e:	9805      	ldr	r0, [sp, #20]
 8008950:	4632      	mov	r2, r6
 8008952:	f7ff f9bd 	bl	8007cd0 <__lshift>
 8008956:	4681      	mov	r9, r0
 8008958:	2800      	cmp	r0, #0
 800895a:	d0d8      	beq.n	800890e <_strtod_l+0x74e>
 800895c:	2f00      	cmp	r7, #0
 800895e:	dd08      	ble.n	8008972 <_strtod_l+0x7b2>
 8008960:	4641      	mov	r1, r8
 8008962:	9805      	ldr	r0, [sp, #20]
 8008964:	463a      	mov	r2, r7
 8008966:	f7ff f9b3 	bl	8007cd0 <__lshift>
 800896a:	4680      	mov	r8, r0
 800896c:	2800      	cmp	r0, #0
 800896e:	f43f ae46 	beq.w	80085fe <_strtod_l+0x43e>
 8008972:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008974:	9805      	ldr	r0, [sp, #20]
 8008976:	464a      	mov	r2, r9
 8008978:	f7ff fa32 	bl	8007de0 <__mdiff>
 800897c:	4604      	mov	r4, r0
 800897e:	2800      	cmp	r0, #0
 8008980:	f43f ae3d 	beq.w	80085fe <_strtod_l+0x43e>
 8008984:	68c3      	ldr	r3, [r0, #12]
 8008986:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008988:	2300      	movs	r3, #0
 800898a:	60c3      	str	r3, [r0, #12]
 800898c:	4641      	mov	r1, r8
 800898e:	f7ff fa0b 	bl	8007da8 <__mcmp>
 8008992:	2800      	cmp	r0, #0
 8008994:	da46      	bge.n	8008a24 <_strtod_l+0x864>
 8008996:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008998:	ea53 030a 	orrs.w	r3, r3, sl
 800899c:	d16c      	bne.n	8008a78 <_strtod_l+0x8b8>
 800899e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d168      	bne.n	8008a78 <_strtod_l+0x8b8>
 80089a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089aa:	0d1b      	lsrs	r3, r3, #20
 80089ac:	051b      	lsls	r3, r3, #20
 80089ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80089b2:	d961      	bls.n	8008a78 <_strtod_l+0x8b8>
 80089b4:	6963      	ldr	r3, [r4, #20]
 80089b6:	b913      	cbnz	r3, 80089be <_strtod_l+0x7fe>
 80089b8:	6923      	ldr	r3, [r4, #16]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	dd5c      	ble.n	8008a78 <_strtod_l+0x8b8>
 80089be:	4621      	mov	r1, r4
 80089c0:	2201      	movs	r2, #1
 80089c2:	9805      	ldr	r0, [sp, #20]
 80089c4:	f7ff f984 	bl	8007cd0 <__lshift>
 80089c8:	4641      	mov	r1, r8
 80089ca:	4604      	mov	r4, r0
 80089cc:	f7ff f9ec 	bl	8007da8 <__mcmp>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	dd51      	ble.n	8008a78 <_strtod_l+0x8b8>
 80089d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089d8:	9a08      	ldr	r2, [sp, #32]
 80089da:	0d1b      	lsrs	r3, r3, #20
 80089dc:	051b      	lsls	r3, r3, #20
 80089de:	2a00      	cmp	r2, #0
 80089e0:	d06b      	beq.n	8008aba <_strtod_l+0x8fa>
 80089e2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80089e6:	d868      	bhi.n	8008aba <_strtod_l+0x8fa>
 80089e8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80089ec:	f67f ae9d 	bls.w	800872a <_strtod_l+0x56a>
 80089f0:	4b0a      	ldr	r3, [pc, #40]	@ (8008a1c <_strtod_l+0x85c>)
 80089f2:	4650      	mov	r0, sl
 80089f4:	4659      	mov	r1, fp
 80089f6:	2200      	movs	r2, #0
 80089f8:	f7f7 fdfe 	bl	80005f8 <__aeabi_dmul>
 80089fc:	4b08      	ldr	r3, [pc, #32]	@ (8008a20 <_strtod_l+0x860>)
 80089fe:	400b      	ands	r3, r1
 8008a00:	4682      	mov	sl, r0
 8008a02:	468b      	mov	fp, r1
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f47f ae05 	bne.w	8008614 <_strtod_l+0x454>
 8008a0a:	9a05      	ldr	r2, [sp, #20]
 8008a0c:	2322      	movs	r3, #34	@ 0x22
 8008a0e:	6013      	str	r3, [r2, #0]
 8008a10:	e600      	b.n	8008614 <_strtod_l+0x454>
 8008a12:	bf00      	nop
 8008a14:	0800aa70 	.word	0x0800aa70
 8008a18:	fffffc02 	.word	0xfffffc02
 8008a1c:	39500000 	.word	0x39500000
 8008a20:	7ff00000 	.word	0x7ff00000
 8008a24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008a28:	d165      	bne.n	8008af6 <_strtod_l+0x936>
 8008a2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008a2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a30:	b35a      	cbz	r2, 8008a8a <_strtod_l+0x8ca>
 8008a32:	4a9f      	ldr	r2, [pc, #636]	@ (8008cb0 <_strtod_l+0xaf0>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d12b      	bne.n	8008a90 <_strtod_l+0x8d0>
 8008a38:	9b08      	ldr	r3, [sp, #32]
 8008a3a:	4651      	mov	r1, sl
 8008a3c:	b303      	cbz	r3, 8008a80 <_strtod_l+0x8c0>
 8008a3e:	4b9d      	ldr	r3, [pc, #628]	@ (8008cb4 <_strtod_l+0xaf4>)
 8008a40:	465a      	mov	r2, fp
 8008a42:	4013      	ands	r3, r2
 8008a44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008a48:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4c:	d81b      	bhi.n	8008a86 <_strtod_l+0x8c6>
 8008a4e:	0d1b      	lsrs	r3, r3, #20
 8008a50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008a54:	fa02 f303 	lsl.w	r3, r2, r3
 8008a58:	4299      	cmp	r1, r3
 8008a5a:	d119      	bne.n	8008a90 <_strtod_l+0x8d0>
 8008a5c:	4b96      	ldr	r3, [pc, #600]	@ (8008cb8 <_strtod_l+0xaf8>)
 8008a5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d102      	bne.n	8008a6a <_strtod_l+0x8aa>
 8008a64:	3101      	adds	r1, #1
 8008a66:	f43f adca 	beq.w	80085fe <_strtod_l+0x43e>
 8008a6a:	4b92      	ldr	r3, [pc, #584]	@ (8008cb4 <_strtod_l+0xaf4>)
 8008a6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a6e:	401a      	ands	r2, r3
 8008a70:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008a74:	f04f 0a00 	mov.w	sl, #0
 8008a78:	9b08      	ldr	r3, [sp, #32]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1b8      	bne.n	80089f0 <_strtod_l+0x830>
 8008a7e:	e5c9      	b.n	8008614 <_strtod_l+0x454>
 8008a80:	f04f 33ff 	mov.w	r3, #4294967295
 8008a84:	e7e8      	b.n	8008a58 <_strtod_l+0x898>
 8008a86:	4613      	mov	r3, r2
 8008a88:	e7e6      	b.n	8008a58 <_strtod_l+0x898>
 8008a8a:	ea53 030a 	orrs.w	r3, r3, sl
 8008a8e:	d0a1      	beq.n	80089d4 <_strtod_l+0x814>
 8008a90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a92:	b1db      	cbz	r3, 8008acc <_strtod_l+0x90c>
 8008a94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a96:	4213      	tst	r3, r2
 8008a98:	d0ee      	beq.n	8008a78 <_strtod_l+0x8b8>
 8008a9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a9c:	9a08      	ldr	r2, [sp, #32]
 8008a9e:	4650      	mov	r0, sl
 8008aa0:	4659      	mov	r1, fp
 8008aa2:	b1bb      	cbz	r3, 8008ad4 <_strtod_l+0x914>
 8008aa4:	f7ff fb6e 	bl	8008184 <sulp>
 8008aa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008aac:	ec53 2b10 	vmov	r2, r3, d0
 8008ab0:	f7f7 fbec 	bl	800028c <__adddf3>
 8008ab4:	4682      	mov	sl, r0
 8008ab6:	468b      	mov	fp, r1
 8008ab8:	e7de      	b.n	8008a78 <_strtod_l+0x8b8>
 8008aba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008abe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008ac2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008ac6:	f04f 3aff 	mov.w	sl, #4294967295
 8008aca:	e7d5      	b.n	8008a78 <_strtod_l+0x8b8>
 8008acc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ace:	ea13 0f0a 	tst.w	r3, sl
 8008ad2:	e7e1      	b.n	8008a98 <_strtod_l+0x8d8>
 8008ad4:	f7ff fb56 	bl	8008184 <sulp>
 8008ad8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008adc:	ec53 2b10 	vmov	r2, r3, d0
 8008ae0:	f7f7 fbd2 	bl	8000288 <__aeabi_dsub>
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	4682      	mov	sl, r0
 8008aea:	468b      	mov	fp, r1
 8008aec:	f7f7 ffec 	bl	8000ac8 <__aeabi_dcmpeq>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	d0c1      	beq.n	8008a78 <_strtod_l+0x8b8>
 8008af4:	e619      	b.n	800872a <_strtod_l+0x56a>
 8008af6:	4641      	mov	r1, r8
 8008af8:	4620      	mov	r0, r4
 8008afa:	f7ff facd 	bl	8008098 <__ratio>
 8008afe:	ec57 6b10 	vmov	r6, r7, d0
 8008b02:	2200      	movs	r2, #0
 8008b04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b08:	4630      	mov	r0, r6
 8008b0a:	4639      	mov	r1, r7
 8008b0c:	f7f7 fff0 	bl	8000af0 <__aeabi_dcmple>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	d06f      	beq.n	8008bf4 <_strtod_l+0xa34>
 8008b14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d17a      	bne.n	8008c10 <_strtod_l+0xa50>
 8008b1a:	f1ba 0f00 	cmp.w	sl, #0
 8008b1e:	d158      	bne.n	8008bd2 <_strtod_l+0xa12>
 8008b20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d15a      	bne.n	8008be0 <_strtod_l+0xa20>
 8008b2a:	4b64      	ldr	r3, [pc, #400]	@ (8008cbc <_strtod_l+0xafc>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	4630      	mov	r0, r6
 8008b30:	4639      	mov	r1, r7
 8008b32:	f7f7 ffd3 	bl	8000adc <__aeabi_dcmplt>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d159      	bne.n	8008bee <_strtod_l+0xa2e>
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	4639      	mov	r1, r7
 8008b3e:	4b60      	ldr	r3, [pc, #384]	@ (8008cc0 <_strtod_l+0xb00>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	f7f7 fd59 	bl	80005f8 <__aeabi_dmul>
 8008b46:	4606      	mov	r6, r0
 8008b48:	460f      	mov	r7, r1
 8008b4a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008b4e:	9606      	str	r6, [sp, #24]
 8008b50:	9307      	str	r3, [sp, #28]
 8008b52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b56:	4d57      	ldr	r5, [pc, #348]	@ (8008cb4 <_strtod_l+0xaf4>)
 8008b58:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008b5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b5e:	401d      	ands	r5, r3
 8008b60:	4b58      	ldr	r3, [pc, #352]	@ (8008cc4 <_strtod_l+0xb04>)
 8008b62:	429d      	cmp	r5, r3
 8008b64:	f040 80b2 	bne.w	8008ccc <_strtod_l+0xb0c>
 8008b68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b6a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008b6e:	ec4b ab10 	vmov	d0, sl, fp
 8008b72:	f7ff f9c9 	bl	8007f08 <__ulp>
 8008b76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b7a:	ec51 0b10 	vmov	r0, r1, d0
 8008b7e:	f7f7 fd3b 	bl	80005f8 <__aeabi_dmul>
 8008b82:	4652      	mov	r2, sl
 8008b84:	465b      	mov	r3, fp
 8008b86:	f7f7 fb81 	bl	800028c <__adddf3>
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	4949      	ldr	r1, [pc, #292]	@ (8008cb4 <_strtod_l+0xaf4>)
 8008b8e:	4a4e      	ldr	r2, [pc, #312]	@ (8008cc8 <_strtod_l+0xb08>)
 8008b90:	4019      	ands	r1, r3
 8008b92:	4291      	cmp	r1, r2
 8008b94:	4682      	mov	sl, r0
 8008b96:	d942      	bls.n	8008c1e <_strtod_l+0xa5e>
 8008b98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b9a:	4b47      	ldr	r3, [pc, #284]	@ (8008cb8 <_strtod_l+0xaf8>)
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d103      	bne.n	8008ba8 <_strtod_l+0x9e8>
 8008ba0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	f43f ad2b 	beq.w	80085fe <_strtod_l+0x43e>
 8008ba8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008cb8 <_strtod_l+0xaf8>
 8008bac:	f04f 3aff 	mov.w	sl, #4294967295
 8008bb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bb2:	9805      	ldr	r0, [sp, #20]
 8008bb4:	f7fe fe74 	bl	80078a0 <_Bfree>
 8008bb8:	9805      	ldr	r0, [sp, #20]
 8008bba:	4649      	mov	r1, r9
 8008bbc:	f7fe fe70 	bl	80078a0 <_Bfree>
 8008bc0:	9805      	ldr	r0, [sp, #20]
 8008bc2:	4641      	mov	r1, r8
 8008bc4:	f7fe fe6c 	bl	80078a0 <_Bfree>
 8008bc8:	9805      	ldr	r0, [sp, #20]
 8008bca:	4621      	mov	r1, r4
 8008bcc:	f7fe fe68 	bl	80078a0 <_Bfree>
 8008bd0:	e618      	b.n	8008804 <_strtod_l+0x644>
 8008bd2:	f1ba 0f01 	cmp.w	sl, #1
 8008bd6:	d103      	bne.n	8008be0 <_strtod_l+0xa20>
 8008bd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f43f ada5 	beq.w	800872a <_strtod_l+0x56a>
 8008be0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008c90 <_strtod_l+0xad0>
 8008be4:	4f35      	ldr	r7, [pc, #212]	@ (8008cbc <_strtod_l+0xafc>)
 8008be6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008bea:	2600      	movs	r6, #0
 8008bec:	e7b1      	b.n	8008b52 <_strtod_l+0x992>
 8008bee:	4f34      	ldr	r7, [pc, #208]	@ (8008cc0 <_strtod_l+0xb00>)
 8008bf0:	2600      	movs	r6, #0
 8008bf2:	e7aa      	b.n	8008b4a <_strtod_l+0x98a>
 8008bf4:	4b32      	ldr	r3, [pc, #200]	@ (8008cc0 <_strtod_l+0xb00>)
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f7f7 fcfc 	bl	80005f8 <__aeabi_dmul>
 8008c00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c02:	4606      	mov	r6, r0
 8008c04:	460f      	mov	r7, r1
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d09f      	beq.n	8008b4a <_strtod_l+0x98a>
 8008c0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008c0e:	e7a0      	b.n	8008b52 <_strtod_l+0x992>
 8008c10:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008c98 <_strtod_l+0xad8>
 8008c14:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c18:	ec57 6b17 	vmov	r6, r7, d7
 8008c1c:	e799      	b.n	8008b52 <_strtod_l+0x992>
 8008c1e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008c22:	9b08      	ldr	r3, [sp, #32]
 8008c24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1c1      	bne.n	8008bb0 <_strtod_l+0x9f0>
 8008c2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c30:	0d1b      	lsrs	r3, r3, #20
 8008c32:	051b      	lsls	r3, r3, #20
 8008c34:	429d      	cmp	r5, r3
 8008c36:	d1bb      	bne.n	8008bb0 <_strtod_l+0x9f0>
 8008c38:	4630      	mov	r0, r6
 8008c3a:	4639      	mov	r1, r7
 8008c3c:	f7f8 f83c 	bl	8000cb8 <__aeabi_d2lz>
 8008c40:	f7f7 fcac 	bl	800059c <__aeabi_l2d>
 8008c44:	4602      	mov	r2, r0
 8008c46:	460b      	mov	r3, r1
 8008c48:	4630      	mov	r0, r6
 8008c4a:	4639      	mov	r1, r7
 8008c4c:	f7f7 fb1c 	bl	8000288 <__aeabi_dsub>
 8008c50:	460b      	mov	r3, r1
 8008c52:	4602      	mov	r2, r0
 8008c54:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008c58:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008c5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c5e:	ea46 060a 	orr.w	r6, r6, sl
 8008c62:	431e      	orrs	r6, r3
 8008c64:	d06f      	beq.n	8008d46 <_strtod_l+0xb86>
 8008c66:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ca0 <_strtod_l+0xae0>)
 8008c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6c:	f7f7 ff36 	bl	8000adc <__aeabi_dcmplt>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	f47f accf 	bne.w	8008614 <_strtod_l+0x454>
 8008c76:	a30c      	add	r3, pc, #48	@ (adr r3, 8008ca8 <_strtod_l+0xae8>)
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c80:	f7f7 ff4a 	bl	8000b18 <__aeabi_dcmpgt>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d093      	beq.n	8008bb0 <_strtod_l+0x9f0>
 8008c88:	e4c4      	b.n	8008614 <_strtod_l+0x454>
 8008c8a:	bf00      	nop
 8008c8c:	f3af 8000 	nop.w
 8008c90:	00000000 	.word	0x00000000
 8008c94:	bff00000 	.word	0xbff00000
 8008c98:	00000000 	.word	0x00000000
 8008c9c:	3ff00000 	.word	0x3ff00000
 8008ca0:	94a03595 	.word	0x94a03595
 8008ca4:	3fdfffff 	.word	0x3fdfffff
 8008ca8:	35afe535 	.word	0x35afe535
 8008cac:	3fe00000 	.word	0x3fe00000
 8008cb0:	000fffff 	.word	0x000fffff
 8008cb4:	7ff00000 	.word	0x7ff00000
 8008cb8:	7fefffff 	.word	0x7fefffff
 8008cbc:	3ff00000 	.word	0x3ff00000
 8008cc0:	3fe00000 	.word	0x3fe00000
 8008cc4:	7fe00000 	.word	0x7fe00000
 8008cc8:	7c9fffff 	.word	0x7c9fffff
 8008ccc:	9b08      	ldr	r3, [sp, #32]
 8008cce:	b323      	cbz	r3, 8008d1a <_strtod_l+0xb5a>
 8008cd0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008cd4:	d821      	bhi.n	8008d1a <_strtod_l+0xb5a>
 8008cd6:	a328      	add	r3, pc, #160	@ (adr r3, 8008d78 <_strtod_l+0xbb8>)
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	4630      	mov	r0, r6
 8008cde:	4639      	mov	r1, r7
 8008ce0:	f7f7 ff06 	bl	8000af0 <__aeabi_dcmple>
 8008ce4:	b1a0      	cbz	r0, 8008d10 <_strtod_l+0xb50>
 8008ce6:	4639      	mov	r1, r7
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f7f7 ff5d 	bl	8000ba8 <__aeabi_d2uiz>
 8008cee:	2801      	cmp	r0, #1
 8008cf0:	bf38      	it	cc
 8008cf2:	2001      	movcc	r0, #1
 8008cf4:	f7f7 fc06 	bl	8000504 <__aeabi_ui2d>
 8008cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	460f      	mov	r7, r1
 8008cfe:	b9fb      	cbnz	r3, 8008d40 <_strtod_l+0xb80>
 8008d00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d04:	9014      	str	r0, [sp, #80]	@ 0x50
 8008d06:	9315      	str	r3, [sp, #84]	@ 0x54
 8008d08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008d0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d12:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008d16:	1b5b      	subs	r3, r3, r5
 8008d18:	9311      	str	r3, [sp, #68]	@ 0x44
 8008d1a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008d1e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008d22:	f7ff f8f1 	bl	8007f08 <__ulp>
 8008d26:	4650      	mov	r0, sl
 8008d28:	ec53 2b10 	vmov	r2, r3, d0
 8008d2c:	4659      	mov	r1, fp
 8008d2e:	f7f7 fc63 	bl	80005f8 <__aeabi_dmul>
 8008d32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008d36:	f7f7 faa9 	bl	800028c <__adddf3>
 8008d3a:	4682      	mov	sl, r0
 8008d3c:	468b      	mov	fp, r1
 8008d3e:	e770      	b.n	8008c22 <_strtod_l+0xa62>
 8008d40:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008d44:	e7e0      	b.n	8008d08 <_strtod_l+0xb48>
 8008d46:	a30e      	add	r3, pc, #56	@ (adr r3, 8008d80 <_strtod_l+0xbc0>)
 8008d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4c:	f7f7 fec6 	bl	8000adc <__aeabi_dcmplt>
 8008d50:	e798      	b.n	8008c84 <_strtod_l+0xac4>
 8008d52:	2300      	movs	r3, #0
 8008d54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d56:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008d58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d5a:	6013      	str	r3, [r2, #0]
 8008d5c:	f7ff ba6d 	b.w	800823a <_strtod_l+0x7a>
 8008d60:	2a65      	cmp	r2, #101	@ 0x65
 8008d62:	f43f ab66 	beq.w	8008432 <_strtod_l+0x272>
 8008d66:	2a45      	cmp	r2, #69	@ 0x45
 8008d68:	f43f ab63 	beq.w	8008432 <_strtod_l+0x272>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	f7ff bb9e 	b.w	80084ae <_strtod_l+0x2ee>
 8008d72:	bf00      	nop
 8008d74:	f3af 8000 	nop.w
 8008d78:	ffc00000 	.word	0xffc00000
 8008d7c:	41dfffff 	.word	0x41dfffff
 8008d80:	94a03595 	.word	0x94a03595
 8008d84:	3fcfffff 	.word	0x3fcfffff

08008d88 <_strtod_r>:
 8008d88:	4b01      	ldr	r3, [pc, #4]	@ (8008d90 <_strtod_r+0x8>)
 8008d8a:	f7ff ba19 	b.w	80081c0 <_strtod_l>
 8008d8e:	bf00      	nop
 8008d90:	20000080 	.word	0x20000080

08008d94 <_strtol_l.constprop.0>:
 8008d94:	2b24      	cmp	r3, #36	@ 0x24
 8008d96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d9a:	4686      	mov	lr, r0
 8008d9c:	4690      	mov	r8, r2
 8008d9e:	d801      	bhi.n	8008da4 <_strtol_l.constprop.0+0x10>
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d106      	bne.n	8008db2 <_strtol_l.constprop.0+0x1e>
 8008da4:	f7fd fdba 	bl	800691c <__errno>
 8008da8:	2316      	movs	r3, #22
 8008daa:	6003      	str	r3, [r0, #0]
 8008dac:	2000      	movs	r0, #0
 8008dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db2:	4834      	ldr	r0, [pc, #208]	@ (8008e84 <_strtol_l.constprop.0+0xf0>)
 8008db4:	460d      	mov	r5, r1
 8008db6:	462a      	mov	r2, r5
 8008db8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dbc:	5d06      	ldrb	r6, [r0, r4]
 8008dbe:	f016 0608 	ands.w	r6, r6, #8
 8008dc2:	d1f8      	bne.n	8008db6 <_strtol_l.constprop.0+0x22>
 8008dc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8008dc6:	d12d      	bne.n	8008e24 <_strtol_l.constprop.0+0x90>
 8008dc8:	782c      	ldrb	r4, [r5, #0]
 8008dca:	2601      	movs	r6, #1
 8008dcc:	1c95      	adds	r5, r2, #2
 8008dce:	f033 0210 	bics.w	r2, r3, #16
 8008dd2:	d109      	bne.n	8008de8 <_strtol_l.constprop.0+0x54>
 8008dd4:	2c30      	cmp	r4, #48	@ 0x30
 8008dd6:	d12a      	bne.n	8008e2e <_strtol_l.constprop.0+0x9a>
 8008dd8:	782a      	ldrb	r2, [r5, #0]
 8008dda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008dde:	2a58      	cmp	r2, #88	@ 0x58
 8008de0:	d125      	bne.n	8008e2e <_strtol_l.constprop.0+0x9a>
 8008de2:	786c      	ldrb	r4, [r5, #1]
 8008de4:	2310      	movs	r3, #16
 8008de6:	3502      	adds	r5, #2
 8008de8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008dec:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008df0:	2200      	movs	r2, #0
 8008df2:	fbbc f9f3 	udiv	r9, ip, r3
 8008df6:	4610      	mov	r0, r2
 8008df8:	fb03 ca19 	mls	sl, r3, r9, ip
 8008dfc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008e00:	2f09      	cmp	r7, #9
 8008e02:	d81b      	bhi.n	8008e3c <_strtol_l.constprop.0+0xa8>
 8008e04:	463c      	mov	r4, r7
 8008e06:	42a3      	cmp	r3, r4
 8008e08:	dd27      	ble.n	8008e5a <_strtol_l.constprop.0+0xc6>
 8008e0a:	1c57      	adds	r7, r2, #1
 8008e0c:	d007      	beq.n	8008e1e <_strtol_l.constprop.0+0x8a>
 8008e0e:	4581      	cmp	r9, r0
 8008e10:	d320      	bcc.n	8008e54 <_strtol_l.constprop.0+0xc0>
 8008e12:	d101      	bne.n	8008e18 <_strtol_l.constprop.0+0x84>
 8008e14:	45a2      	cmp	sl, r4
 8008e16:	db1d      	blt.n	8008e54 <_strtol_l.constprop.0+0xc0>
 8008e18:	fb00 4003 	mla	r0, r0, r3, r4
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e22:	e7eb      	b.n	8008dfc <_strtol_l.constprop.0+0x68>
 8008e24:	2c2b      	cmp	r4, #43	@ 0x2b
 8008e26:	bf04      	itt	eq
 8008e28:	782c      	ldrbeq	r4, [r5, #0]
 8008e2a:	1c95      	addeq	r5, r2, #2
 8008e2c:	e7cf      	b.n	8008dce <_strtol_l.constprop.0+0x3a>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1da      	bne.n	8008de8 <_strtol_l.constprop.0+0x54>
 8008e32:	2c30      	cmp	r4, #48	@ 0x30
 8008e34:	bf0c      	ite	eq
 8008e36:	2308      	moveq	r3, #8
 8008e38:	230a      	movne	r3, #10
 8008e3a:	e7d5      	b.n	8008de8 <_strtol_l.constprop.0+0x54>
 8008e3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008e40:	2f19      	cmp	r7, #25
 8008e42:	d801      	bhi.n	8008e48 <_strtol_l.constprop.0+0xb4>
 8008e44:	3c37      	subs	r4, #55	@ 0x37
 8008e46:	e7de      	b.n	8008e06 <_strtol_l.constprop.0+0x72>
 8008e48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008e4c:	2f19      	cmp	r7, #25
 8008e4e:	d804      	bhi.n	8008e5a <_strtol_l.constprop.0+0xc6>
 8008e50:	3c57      	subs	r4, #87	@ 0x57
 8008e52:	e7d8      	b.n	8008e06 <_strtol_l.constprop.0+0x72>
 8008e54:	f04f 32ff 	mov.w	r2, #4294967295
 8008e58:	e7e1      	b.n	8008e1e <_strtol_l.constprop.0+0x8a>
 8008e5a:	1c53      	adds	r3, r2, #1
 8008e5c:	d108      	bne.n	8008e70 <_strtol_l.constprop.0+0xdc>
 8008e5e:	2322      	movs	r3, #34	@ 0x22
 8008e60:	f8ce 3000 	str.w	r3, [lr]
 8008e64:	4660      	mov	r0, ip
 8008e66:	f1b8 0f00 	cmp.w	r8, #0
 8008e6a:	d0a0      	beq.n	8008dae <_strtol_l.constprop.0+0x1a>
 8008e6c:	1e69      	subs	r1, r5, #1
 8008e6e:	e006      	b.n	8008e7e <_strtol_l.constprop.0+0xea>
 8008e70:	b106      	cbz	r6, 8008e74 <_strtol_l.constprop.0+0xe0>
 8008e72:	4240      	negs	r0, r0
 8008e74:	f1b8 0f00 	cmp.w	r8, #0
 8008e78:	d099      	beq.n	8008dae <_strtol_l.constprop.0+0x1a>
 8008e7a:	2a00      	cmp	r2, #0
 8008e7c:	d1f6      	bne.n	8008e6c <_strtol_l.constprop.0+0xd8>
 8008e7e:	f8c8 1000 	str.w	r1, [r8]
 8008e82:	e794      	b.n	8008dae <_strtol_l.constprop.0+0x1a>
 8008e84:	0800aa99 	.word	0x0800aa99

08008e88 <_strtol_r>:
 8008e88:	f7ff bf84 	b.w	8008d94 <_strtol_l.constprop.0>

08008e8c <__ssputs_r>:
 8008e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e90:	688e      	ldr	r6, [r1, #8]
 8008e92:	461f      	mov	r7, r3
 8008e94:	42be      	cmp	r6, r7
 8008e96:	680b      	ldr	r3, [r1, #0]
 8008e98:	4682      	mov	sl, r0
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	4690      	mov	r8, r2
 8008e9e:	d82d      	bhi.n	8008efc <__ssputs_r+0x70>
 8008ea0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ea4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ea8:	d026      	beq.n	8008ef8 <__ssputs_r+0x6c>
 8008eaa:	6965      	ldr	r5, [r4, #20]
 8008eac:	6909      	ldr	r1, [r1, #16]
 8008eae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008eb2:	eba3 0901 	sub.w	r9, r3, r1
 8008eb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008eba:	1c7b      	adds	r3, r7, #1
 8008ebc:	444b      	add	r3, r9
 8008ebe:	106d      	asrs	r5, r5, #1
 8008ec0:	429d      	cmp	r5, r3
 8008ec2:	bf38      	it	cc
 8008ec4:	461d      	movcc	r5, r3
 8008ec6:	0553      	lsls	r3, r2, #21
 8008ec8:	d527      	bpl.n	8008f1a <__ssputs_r+0x8e>
 8008eca:	4629      	mov	r1, r5
 8008ecc:	f7fe fc1c 	bl	8007708 <_malloc_r>
 8008ed0:	4606      	mov	r6, r0
 8008ed2:	b360      	cbz	r0, 8008f2e <__ssputs_r+0xa2>
 8008ed4:	6921      	ldr	r1, [r4, #16]
 8008ed6:	464a      	mov	r2, r9
 8008ed8:	f000 ff5a 	bl	8009d90 <memcpy>
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ee6:	81a3      	strh	r3, [r4, #12]
 8008ee8:	6126      	str	r6, [r4, #16]
 8008eea:	6165      	str	r5, [r4, #20]
 8008eec:	444e      	add	r6, r9
 8008eee:	eba5 0509 	sub.w	r5, r5, r9
 8008ef2:	6026      	str	r6, [r4, #0]
 8008ef4:	60a5      	str	r5, [r4, #8]
 8008ef6:	463e      	mov	r6, r7
 8008ef8:	42be      	cmp	r6, r7
 8008efa:	d900      	bls.n	8008efe <__ssputs_r+0x72>
 8008efc:	463e      	mov	r6, r7
 8008efe:	6820      	ldr	r0, [r4, #0]
 8008f00:	4632      	mov	r2, r6
 8008f02:	4641      	mov	r1, r8
 8008f04:	f000 fef7 	bl	8009cf6 <memmove>
 8008f08:	68a3      	ldr	r3, [r4, #8]
 8008f0a:	1b9b      	subs	r3, r3, r6
 8008f0c:	60a3      	str	r3, [r4, #8]
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	4433      	add	r3, r6
 8008f12:	6023      	str	r3, [r4, #0]
 8008f14:	2000      	movs	r0, #0
 8008f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f1a:	462a      	mov	r2, r5
 8008f1c:	f001 facd 	bl	800a4ba <_realloc_r>
 8008f20:	4606      	mov	r6, r0
 8008f22:	2800      	cmp	r0, #0
 8008f24:	d1e0      	bne.n	8008ee8 <__ssputs_r+0x5c>
 8008f26:	6921      	ldr	r1, [r4, #16]
 8008f28:	4650      	mov	r0, sl
 8008f2a:	f7fe fb79 	bl	8007620 <_free_r>
 8008f2e:	230c      	movs	r3, #12
 8008f30:	f8ca 3000 	str.w	r3, [sl]
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f3a:	81a3      	strh	r3, [r4, #12]
 8008f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f40:	e7e9      	b.n	8008f16 <__ssputs_r+0x8a>
	...

08008f44 <_svfiprintf_r>:
 8008f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f48:	4698      	mov	r8, r3
 8008f4a:	898b      	ldrh	r3, [r1, #12]
 8008f4c:	061b      	lsls	r3, r3, #24
 8008f4e:	b09d      	sub	sp, #116	@ 0x74
 8008f50:	4607      	mov	r7, r0
 8008f52:	460d      	mov	r5, r1
 8008f54:	4614      	mov	r4, r2
 8008f56:	d510      	bpl.n	8008f7a <_svfiprintf_r+0x36>
 8008f58:	690b      	ldr	r3, [r1, #16]
 8008f5a:	b973      	cbnz	r3, 8008f7a <_svfiprintf_r+0x36>
 8008f5c:	2140      	movs	r1, #64	@ 0x40
 8008f5e:	f7fe fbd3 	bl	8007708 <_malloc_r>
 8008f62:	6028      	str	r0, [r5, #0]
 8008f64:	6128      	str	r0, [r5, #16]
 8008f66:	b930      	cbnz	r0, 8008f76 <_svfiprintf_r+0x32>
 8008f68:	230c      	movs	r3, #12
 8008f6a:	603b      	str	r3, [r7, #0]
 8008f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f70:	b01d      	add	sp, #116	@ 0x74
 8008f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f76:	2340      	movs	r3, #64	@ 0x40
 8008f78:	616b      	str	r3, [r5, #20]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f7e:	2320      	movs	r3, #32
 8008f80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f84:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f88:	2330      	movs	r3, #48	@ 0x30
 8008f8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009128 <_svfiprintf_r+0x1e4>
 8008f8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f92:	f04f 0901 	mov.w	r9, #1
 8008f96:	4623      	mov	r3, r4
 8008f98:	469a      	mov	sl, r3
 8008f9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f9e:	b10a      	cbz	r2, 8008fa4 <_svfiprintf_r+0x60>
 8008fa0:	2a25      	cmp	r2, #37	@ 0x25
 8008fa2:	d1f9      	bne.n	8008f98 <_svfiprintf_r+0x54>
 8008fa4:	ebba 0b04 	subs.w	fp, sl, r4
 8008fa8:	d00b      	beq.n	8008fc2 <_svfiprintf_r+0x7e>
 8008faa:	465b      	mov	r3, fp
 8008fac:	4622      	mov	r2, r4
 8008fae:	4629      	mov	r1, r5
 8008fb0:	4638      	mov	r0, r7
 8008fb2:	f7ff ff6b 	bl	8008e8c <__ssputs_r>
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	f000 80a7 	beq.w	800910a <_svfiprintf_r+0x1c6>
 8008fbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fbe:	445a      	add	r2, fp
 8008fc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f000 809f 	beq.w	800910a <_svfiprintf_r+0x1c6>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fd6:	f10a 0a01 	add.w	sl, sl, #1
 8008fda:	9304      	str	r3, [sp, #16]
 8008fdc:	9307      	str	r3, [sp, #28]
 8008fde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008fe2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fe4:	4654      	mov	r4, sl
 8008fe6:	2205      	movs	r2, #5
 8008fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fec:	484e      	ldr	r0, [pc, #312]	@ (8009128 <_svfiprintf_r+0x1e4>)
 8008fee:	f7f7 f8ef 	bl	80001d0 <memchr>
 8008ff2:	9a04      	ldr	r2, [sp, #16]
 8008ff4:	b9d8      	cbnz	r0, 800902e <_svfiprintf_r+0xea>
 8008ff6:	06d0      	lsls	r0, r2, #27
 8008ff8:	bf44      	itt	mi
 8008ffa:	2320      	movmi	r3, #32
 8008ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009000:	0711      	lsls	r1, r2, #28
 8009002:	bf44      	itt	mi
 8009004:	232b      	movmi	r3, #43	@ 0x2b
 8009006:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800900a:	f89a 3000 	ldrb.w	r3, [sl]
 800900e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009010:	d015      	beq.n	800903e <_svfiprintf_r+0xfa>
 8009012:	9a07      	ldr	r2, [sp, #28]
 8009014:	4654      	mov	r4, sl
 8009016:	2000      	movs	r0, #0
 8009018:	f04f 0c0a 	mov.w	ip, #10
 800901c:	4621      	mov	r1, r4
 800901e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009022:	3b30      	subs	r3, #48	@ 0x30
 8009024:	2b09      	cmp	r3, #9
 8009026:	d94b      	bls.n	80090c0 <_svfiprintf_r+0x17c>
 8009028:	b1b0      	cbz	r0, 8009058 <_svfiprintf_r+0x114>
 800902a:	9207      	str	r2, [sp, #28]
 800902c:	e014      	b.n	8009058 <_svfiprintf_r+0x114>
 800902e:	eba0 0308 	sub.w	r3, r0, r8
 8009032:	fa09 f303 	lsl.w	r3, r9, r3
 8009036:	4313      	orrs	r3, r2
 8009038:	9304      	str	r3, [sp, #16]
 800903a:	46a2      	mov	sl, r4
 800903c:	e7d2      	b.n	8008fe4 <_svfiprintf_r+0xa0>
 800903e:	9b03      	ldr	r3, [sp, #12]
 8009040:	1d19      	adds	r1, r3, #4
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	9103      	str	r1, [sp, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	bfbb      	ittet	lt
 800904a:	425b      	neglt	r3, r3
 800904c:	f042 0202 	orrlt.w	r2, r2, #2
 8009050:	9307      	strge	r3, [sp, #28]
 8009052:	9307      	strlt	r3, [sp, #28]
 8009054:	bfb8      	it	lt
 8009056:	9204      	strlt	r2, [sp, #16]
 8009058:	7823      	ldrb	r3, [r4, #0]
 800905a:	2b2e      	cmp	r3, #46	@ 0x2e
 800905c:	d10a      	bne.n	8009074 <_svfiprintf_r+0x130>
 800905e:	7863      	ldrb	r3, [r4, #1]
 8009060:	2b2a      	cmp	r3, #42	@ 0x2a
 8009062:	d132      	bne.n	80090ca <_svfiprintf_r+0x186>
 8009064:	9b03      	ldr	r3, [sp, #12]
 8009066:	1d1a      	adds	r2, r3, #4
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	9203      	str	r2, [sp, #12]
 800906c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009070:	3402      	adds	r4, #2
 8009072:	9305      	str	r3, [sp, #20]
 8009074:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009138 <_svfiprintf_r+0x1f4>
 8009078:	7821      	ldrb	r1, [r4, #0]
 800907a:	2203      	movs	r2, #3
 800907c:	4650      	mov	r0, sl
 800907e:	f7f7 f8a7 	bl	80001d0 <memchr>
 8009082:	b138      	cbz	r0, 8009094 <_svfiprintf_r+0x150>
 8009084:	9b04      	ldr	r3, [sp, #16]
 8009086:	eba0 000a 	sub.w	r0, r0, sl
 800908a:	2240      	movs	r2, #64	@ 0x40
 800908c:	4082      	lsls	r2, r0
 800908e:	4313      	orrs	r3, r2
 8009090:	3401      	adds	r4, #1
 8009092:	9304      	str	r3, [sp, #16]
 8009094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009098:	4824      	ldr	r0, [pc, #144]	@ (800912c <_svfiprintf_r+0x1e8>)
 800909a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800909e:	2206      	movs	r2, #6
 80090a0:	f7f7 f896 	bl	80001d0 <memchr>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d036      	beq.n	8009116 <_svfiprintf_r+0x1d2>
 80090a8:	4b21      	ldr	r3, [pc, #132]	@ (8009130 <_svfiprintf_r+0x1ec>)
 80090aa:	bb1b      	cbnz	r3, 80090f4 <_svfiprintf_r+0x1b0>
 80090ac:	9b03      	ldr	r3, [sp, #12]
 80090ae:	3307      	adds	r3, #7
 80090b0:	f023 0307 	bic.w	r3, r3, #7
 80090b4:	3308      	adds	r3, #8
 80090b6:	9303      	str	r3, [sp, #12]
 80090b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090ba:	4433      	add	r3, r6
 80090bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80090be:	e76a      	b.n	8008f96 <_svfiprintf_r+0x52>
 80090c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80090c4:	460c      	mov	r4, r1
 80090c6:	2001      	movs	r0, #1
 80090c8:	e7a8      	b.n	800901c <_svfiprintf_r+0xd8>
 80090ca:	2300      	movs	r3, #0
 80090cc:	3401      	adds	r4, #1
 80090ce:	9305      	str	r3, [sp, #20]
 80090d0:	4619      	mov	r1, r3
 80090d2:	f04f 0c0a 	mov.w	ip, #10
 80090d6:	4620      	mov	r0, r4
 80090d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090dc:	3a30      	subs	r2, #48	@ 0x30
 80090de:	2a09      	cmp	r2, #9
 80090e0:	d903      	bls.n	80090ea <_svfiprintf_r+0x1a6>
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0c6      	beq.n	8009074 <_svfiprintf_r+0x130>
 80090e6:	9105      	str	r1, [sp, #20]
 80090e8:	e7c4      	b.n	8009074 <_svfiprintf_r+0x130>
 80090ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80090ee:	4604      	mov	r4, r0
 80090f0:	2301      	movs	r3, #1
 80090f2:	e7f0      	b.n	80090d6 <_svfiprintf_r+0x192>
 80090f4:	ab03      	add	r3, sp, #12
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	462a      	mov	r2, r5
 80090fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009134 <_svfiprintf_r+0x1f0>)
 80090fc:	a904      	add	r1, sp, #16
 80090fe:	4638      	mov	r0, r7
 8009100:	f7fc fb86 	bl	8005810 <_printf_float>
 8009104:	1c42      	adds	r2, r0, #1
 8009106:	4606      	mov	r6, r0
 8009108:	d1d6      	bne.n	80090b8 <_svfiprintf_r+0x174>
 800910a:	89ab      	ldrh	r3, [r5, #12]
 800910c:	065b      	lsls	r3, r3, #25
 800910e:	f53f af2d 	bmi.w	8008f6c <_svfiprintf_r+0x28>
 8009112:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009114:	e72c      	b.n	8008f70 <_svfiprintf_r+0x2c>
 8009116:	ab03      	add	r3, sp, #12
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	462a      	mov	r2, r5
 800911c:	4b05      	ldr	r3, [pc, #20]	@ (8009134 <_svfiprintf_r+0x1f0>)
 800911e:	a904      	add	r1, sp, #16
 8009120:	4638      	mov	r0, r7
 8009122:	f7fc fe0d 	bl	8005d40 <_printf_i>
 8009126:	e7ed      	b.n	8009104 <_svfiprintf_r+0x1c0>
 8009128:	0800ab99 	.word	0x0800ab99
 800912c:	0800aba3 	.word	0x0800aba3
 8009130:	08005811 	.word	0x08005811
 8009134:	08008e8d 	.word	0x08008e8d
 8009138:	0800ab9f 	.word	0x0800ab9f

0800913c <_sungetc_r>:
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	1c4b      	adds	r3, r1, #1
 8009140:	4614      	mov	r4, r2
 8009142:	d103      	bne.n	800914c <_sungetc_r+0x10>
 8009144:	f04f 35ff 	mov.w	r5, #4294967295
 8009148:	4628      	mov	r0, r5
 800914a:	bd38      	pop	{r3, r4, r5, pc}
 800914c:	8993      	ldrh	r3, [r2, #12]
 800914e:	f023 0320 	bic.w	r3, r3, #32
 8009152:	8193      	strh	r3, [r2, #12]
 8009154:	6853      	ldr	r3, [r2, #4]
 8009156:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009158:	b2cd      	uxtb	r5, r1
 800915a:	b18a      	cbz	r2, 8009180 <_sungetc_r+0x44>
 800915c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800915e:	429a      	cmp	r2, r3
 8009160:	dd08      	ble.n	8009174 <_sungetc_r+0x38>
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	1e5a      	subs	r2, r3, #1
 8009166:	6022      	str	r2, [r4, #0]
 8009168:	f803 5c01 	strb.w	r5, [r3, #-1]
 800916c:	6863      	ldr	r3, [r4, #4]
 800916e:	3301      	adds	r3, #1
 8009170:	6063      	str	r3, [r4, #4]
 8009172:	e7e9      	b.n	8009148 <_sungetc_r+0xc>
 8009174:	4621      	mov	r1, r4
 8009176:	f000 fd84 	bl	8009c82 <__submore>
 800917a:	2800      	cmp	r0, #0
 800917c:	d0f1      	beq.n	8009162 <_sungetc_r+0x26>
 800917e:	e7e1      	b.n	8009144 <_sungetc_r+0x8>
 8009180:	6921      	ldr	r1, [r4, #16]
 8009182:	6822      	ldr	r2, [r4, #0]
 8009184:	b141      	cbz	r1, 8009198 <_sungetc_r+0x5c>
 8009186:	4291      	cmp	r1, r2
 8009188:	d206      	bcs.n	8009198 <_sungetc_r+0x5c>
 800918a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800918e:	42a9      	cmp	r1, r5
 8009190:	d102      	bne.n	8009198 <_sungetc_r+0x5c>
 8009192:	3a01      	subs	r2, #1
 8009194:	6022      	str	r2, [r4, #0]
 8009196:	e7ea      	b.n	800916e <_sungetc_r+0x32>
 8009198:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800919c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80091a2:	2303      	movs	r3, #3
 80091a4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80091a6:	4623      	mov	r3, r4
 80091a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80091ac:	6023      	str	r3, [r4, #0]
 80091ae:	2301      	movs	r3, #1
 80091b0:	e7de      	b.n	8009170 <_sungetc_r+0x34>

080091b2 <__ssrefill_r>:
 80091b2:	b510      	push	{r4, lr}
 80091b4:	460c      	mov	r4, r1
 80091b6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80091b8:	b169      	cbz	r1, 80091d6 <__ssrefill_r+0x24>
 80091ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091be:	4299      	cmp	r1, r3
 80091c0:	d001      	beq.n	80091c6 <__ssrefill_r+0x14>
 80091c2:	f7fe fa2d 	bl	8007620 <_free_r>
 80091c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80091c8:	6063      	str	r3, [r4, #4]
 80091ca:	2000      	movs	r0, #0
 80091cc:	6360      	str	r0, [r4, #52]	@ 0x34
 80091ce:	b113      	cbz	r3, 80091d6 <__ssrefill_r+0x24>
 80091d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80091d2:	6023      	str	r3, [r4, #0]
 80091d4:	bd10      	pop	{r4, pc}
 80091d6:	6923      	ldr	r3, [r4, #16]
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	2300      	movs	r3, #0
 80091dc:	6063      	str	r3, [r4, #4]
 80091de:	89a3      	ldrh	r3, [r4, #12]
 80091e0:	f043 0320 	orr.w	r3, r3, #32
 80091e4:	81a3      	strh	r3, [r4, #12]
 80091e6:	f04f 30ff 	mov.w	r0, #4294967295
 80091ea:	e7f3      	b.n	80091d4 <__ssrefill_r+0x22>

080091ec <__ssvfiscanf_r>:
 80091ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091f0:	460c      	mov	r4, r1
 80091f2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80091f6:	2100      	movs	r1, #0
 80091f8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80091fc:	49a5      	ldr	r1, [pc, #660]	@ (8009494 <__ssvfiscanf_r+0x2a8>)
 80091fe:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009200:	f10d 0804 	add.w	r8, sp, #4
 8009204:	49a4      	ldr	r1, [pc, #656]	@ (8009498 <__ssvfiscanf_r+0x2ac>)
 8009206:	4fa5      	ldr	r7, [pc, #660]	@ (800949c <__ssvfiscanf_r+0x2b0>)
 8009208:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800920c:	4606      	mov	r6, r0
 800920e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	7813      	ldrb	r3, [r2, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	f000 8158 	beq.w	80094ca <__ssvfiscanf_r+0x2de>
 800921a:	5cf9      	ldrb	r1, [r7, r3]
 800921c:	f011 0108 	ands.w	r1, r1, #8
 8009220:	f102 0501 	add.w	r5, r2, #1
 8009224:	d019      	beq.n	800925a <__ssvfiscanf_r+0x6e>
 8009226:	6863      	ldr	r3, [r4, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	dd0f      	ble.n	800924c <__ssvfiscanf_r+0x60>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	781a      	ldrb	r2, [r3, #0]
 8009230:	5cba      	ldrb	r2, [r7, r2]
 8009232:	0712      	lsls	r2, r2, #28
 8009234:	d401      	bmi.n	800923a <__ssvfiscanf_r+0x4e>
 8009236:	462a      	mov	r2, r5
 8009238:	e7eb      	b.n	8009212 <__ssvfiscanf_r+0x26>
 800923a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800923c:	3201      	adds	r2, #1
 800923e:	9245      	str	r2, [sp, #276]	@ 0x114
 8009240:	6862      	ldr	r2, [r4, #4]
 8009242:	3301      	adds	r3, #1
 8009244:	3a01      	subs	r2, #1
 8009246:	6062      	str	r2, [r4, #4]
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	e7ec      	b.n	8009226 <__ssvfiscanf_r+0x3a>
 800924c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800924e:	4621      	mov	r1, r4
 8009250:	4630      	mov	r0, r6
 8009252:	4798      	blx	r3
 8009254:	2800      	cmp	r0, #0
 8009256:	d0e9      	beq.n	800922c <__ssvfiscanf_r+0x40>
 8009258:	e7ed      	b.n	8009236 <__ssvfiscanf_r+0x4a>
 800925a:	2b25      	cmp	r3, #37	@ 0x25
 800925c:	d012      	beq.n	8009284 <__ssvfiscanf_r+0x98>
 800925e:	4699      	mov	r9, r3
 8009260:	6863      	ldr	r3, [r4, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	f340 8093 	ble.w	800938e <__ssvfiscanf_r+0x1a2>
 8009268:	6822      	ldr	r2, [r4, #0]
 800926a:	7813      	ldrb	r3, [r2, #0]
 800926c:	454b      	cmp	r3, r9
 800926e:	f040 812c 	bne.w	80094ca <__ssvfiscanf_r+0x2de>
 8009272:	6863      	ldr	r3, [r4, #4]
 8009274:	3b01      	subs	r3, #1
 8009276:	6063      	str	r3, [r4, #4]
 8009278:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800927a:	3201      	adds	r2, #1
 800927c:	3301      	adds	r3, #1
 800927e:	6022      	str	r2, [r4, #0]
 8009280:	9345      	str	r3, [sp, #276]	@ 0x114
 8009282:	e7d8      	b.n	8009236 <__ssvfiscanf_r+0x4a>
 8009284:	9141      	str	r1, [sp, #260]	@ 0x104
 8009286:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009288:	7853      	ldrb	r3, [r2, #1]
 800928a:	2b2a      	cmp	r3, #42	@ 0x2a
 800928c:	bf02      	ittt	eq
 800928e:	2310      	moveq	r3, #16
 8009290:	1c95      	addeq	r5, r2, #2
 8009292:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009294:	220a      	movs	r2, #10
 8009296:	46a9      	mov	r9, r5
 8009298:	f819 1b01 	ldrb.w	r1, [r9], #1
 800929c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80092a0:	2b09      	cmp	r3, #9
 80092a2:	d91e      	bls.n	80092e2 <__ssvfiscanf_r+0xf6>
 80092a4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80094a0 <__ssvfiscanf_r+0x2b4>
 80092a8:	2203      	movs	r2, #3
 80092aa:	4650      	mov	r0, sl
 80092ac:	f7f6 ff90 	bl	80001d0 <memchr>
 80092b0:	b138      	cbz	r0, 80092c2 <__ssvfiscanf_r+0xd6>
 80092b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80092b4:	eba0 000a 	sub.w	r0, r0, sl
 80092b8:	2301      	movs	r3, #1
 80092ba:	4083      	lsls	r3, r0
 80092bc:	4313      	orrs	r3, r2
 80092be:	9341      	str	r3, [sp, #260]	@ 0x104
 80092c0:	464d      	mov	r5, r9
 80092c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80092c6:	2b78      	cmp	r3, #120	@ 0x78
 80092c8:	d806      	bhi.n	80092d8 <__ssvfiscanf_r+0xec>
 80092ca:	2b57      	cmp	r3, #87	@ 0x57
 80092cc:	d810      	bhi.n	80092f0 <__ssvfiscanf_r+0x104>
 80092ce:	2b25      	cmp	r3, #37	@ 0x25
 80092d0:	d0c5      	beq.n	800925e <__ssvfiscanf_r+0x72>
 80092d2:	d857      	bhi.n	8009384 <__ssvfiscanf_r+0x198>
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d065      	beq.n	80093a4 <__ssvfiscanf_r+0x1b8>
 80092d8:	2303      	movs	r3, #3
 80092da:	9347      	str	r3, [sp, #284]	@ 0x11c
 80092dc:	230a      	movs	r3, #10
 80092de:	9342      	str	r3, [sp, #264]	@ 0x108
 80092e0:	e078      	b.n	80093d4 <__ssvfiscanf_r+0x1e8>
 80092e2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80092e4:	fb02 1103 	mla	r1, r2, r3, r1
 80092e8:	3930      	subs	r1, #48	@ 0x30
 80092ea:	9143      	str	r1, [sp, #268]	@ 0x10c
 80092ec:	464d      	mov	r5, r9
 80092ee:	e7d2      	b.n	8009296 <__ssvfiscanf_r+0xaa>
 80092f0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80092f4:	2a20      	cmp	r2, #32
 80092f6:	d8ef      	bhi.n	80092d8 <__ssvfiscanf_r+0xec>
 80092f8:	a101      	add	r1, pc, #4	@ (adr r1, 8009300 <__ssvfiscanf_r+0x114>)
 80092fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80092fe:	bf00      	nop
 8009300:	080093b3 	.word	0x080093b3
 8009304:	080092d9 	.word	0x080092d9
 8009308:	080092d9 	.word	0x080092d9
 800930c:	0800940d 	.word	0x0800940d
 8009310:	080092d9 	.word	0x080092d9
 8009314:	080092d9 	.word	0x080092d9
 8009318:	080092d9 	.word	0x080092d9
 800931c:	080092d9 	.word	0x080092d9
 8009320:	080092d9 	.word	0x080092d9
 8009324:	080092d9 	.word	0x080092d9
 8009328:	080092d9 	.word	0x080092d9
 800932c:	08009423 	.word	0x08009423
 8009330:	08009409 	.word	0x08009409
 8009334:	0800938b 	.word	0x0800938b
 8009338:	0800938b 	.word	0x0800938b
 800933c:	0800938b 	.word	0x0800938b
 8009340:	080092d9 	.word	0x080092d9
 8009344:	080093c5 	.word	0x080093c5
 8009348:	080092d9 	.word	0x080092d9
 800934c:	080092d9 	.word	0x080092d9
 8009350:	080092d9 	.word	0x080092d9
 8009354:	080092d9 	.word	0x080092d9
 8009358:	08009433 	.word	0x08009433
 800935c:	080093cd 	.word	0x080093cd
 8009360:	080093ab 	.word	0x080093ab
 8009364:	080092d9 	.word	0x080092d9
 8009368:	080092d9 	.word	0x080092d9
 800936c:	0800942f 	.word	0x0800942f
 8009370:	080092d9 	.word	0x080092d9
 8009374:	08009409 	.word	0x08009409
 8009378:	080092d9 	.word	0x080092d9
 800937c:	080092d9 	.word	0x080092d9
 8009380:	080093b3 	.word	0x080093b3
 8009384:	3b45      	subs	r3, #69	@ 0x45
 8009386:	2b02      	cmp	r3, #2
 8009388:	d8a6      	bhi.n	80092d8 <__ssvfiscanf_r+0xec>
 800938a:	2305      	movs	r3, #5
 800938c:	e021      	b.n	80093d2 <__ssvfiscanf_r+0x1e6>
 800938e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009390:	4621      	mov	r1, r4
 8009392:	4630      	mov	r0, r6
 8009394:	4798      	blx	r3
 8009396:	2800      	cmp	r0, #0
 8009398:	f43f af66 	beq.w	8009268 <__ssvfiscanf_r+0x7c>
 800939c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800939e:	2800      	cmp	r0, #0
 80093a0:	f040 808b 	bne.w	80094ba <__ssvfiscanf_r+0x2ce>
 80093a4:	f04f 30ff 	mov.w	r0, #4294967295
 80093a8:	e08b      	b.n	80094c2 <__ssvfiscanf_r+0x2d6>
 80093aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80093ac:	f042 0220 	orr.w	r2, r2, #32
 80093b0:	9241      	str	r2, [sp, #260]	@ 0x104
 80093b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80093b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093b8:	9241      	str	r2, [sp, #260]	@ 0x104
 80093ba:	2210      	movs	r2, #16
 80093bc:	2b6e      	cmp	r3, #110	@ 0x6e
 80093be:	9242      	str	r2, [sp, #264]	@ 0x108
 80093c0:	d902      	bls.n	80093c8 <__ssvfiscanf_r+0x1dc>
 80093c2:	e005      	b.n	80093d0 <__ssvfiscanf_r+0x1e4>
 80093c4:	2300      	movs	r3, #0
 80093c6:	9342      	str	r3, [sp, #264]	@ 0x108
 80093c8:	2303      	movs	r3, #3
 80093ca:	e002      	b.n	80093d2 <__ssvfiscanf_r+0x1e6>
 80093cc:	2308      	movs	r3, #8
 80093ce:	9342      	str	r3, [sp, #264]	@ 0x108
 80093d0:	2304      	movs	r3, #4
 80093d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80093d4:	6863      	ldr	r3, [r4, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	dd39      	ble.n	800944e <__ssvfiscanf_r+0x262>
 80093da:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80093dc:	0659      	lsls	r1, r3, #25
 80093de:	d404      	bmi.n	80093ea <__ssvfiscanf_r+0x1fe>
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	781a      	ldrb	r2, [r3, #0]
 80093e4:	5cba      	ldrb	r2, [r7, r2]
 80093e6:	0712      	lsls	r2, r2, #28
 80093e8:	d438      	bmi.n	800945c <__ssvfiscanf_r+0x270>
 80093ea:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	dc47      	bgt.n	8009480 <__ssvfiscanf_r+0x294>
 80093f0:	466b      	mov	r3, sp
 80093f2:	4622      	mov	r2, r4
 80093f4:	a941      	add	r1, sp, #260	@ 0x104
 80093f6:	4630      	mov	r0, r6
 80093f8:	f000 f9ae 	bl	8009758 <_scanf_chars>
 80093fc:	2801      	cmp	r0, #1
 80093fe:	d064      	beq.n	80094ca <__ssvfiscanf_r+0x2de>
 8009400:	2802      	cmp	r0, #2
 8009402:	f47f af18 	bne.w	8009236 <__ssvfiscanf_r+0x4a>
 8009406:	e7c9      	b.n	800939c <__ssvfiscanf_r+0x1b0>
 8009408:	220a      	movs	r2, #10
 800940a:	e7d7      	b.n	80093bc <__ssvfiscanf_r+0x1d0>
 800940c:	4629      	mov	r1, r5
 800940e:	4640      	mov	r0, r8
 8009410:	f000 fbfe 	bl	8009c10 <__sccl>
 8009414:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800941a:	9341      	str	r3, [sp, #260]	@ 0x104
 800941c:	4605      	mov	r5, r0
 800941e:	2301      	movs	r3, #1
 8009420:	e7d7      	b.n	80093d2 <__ssvfiscanf_r+0x1e6>
 8009422:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009428:	9341      	str	r3, [sp, #260]	@ 0x104
 800942a:	2300      	movs	r3, #0
 800942c:	e7d1      	b.n	80093d2 <__ssvfiscanf_r+0x1e6>
 800942e:	2302      	movs	r3, #2
 8009430:	e7cf      	b.n	80093d2 <__ssvfiscanf_r+0x1e6>
 8009432:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009434:	06c3      	lsls	r3, r0, #27
 8009436:	f53f aefe 	bmi.w	8009236 <__ssvfiscanf_r+0x4a>
 800943a:	9b00      	ldr	r3, [sp, #0]
 800943c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800943e:	1d19      	adds	r1, r3, #4
 8009440:	9100      	str	r1, [sp, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	07c0      	lsls	r0, r0, #31
 8009446:	bf4c      	ite	mi
 8009448:	801a      	strhmi	r2, [r3, #0]
 800944a:	601a      	strpl	r2, [r3, #0]
 800944c:	e6f3      	b.n	8009236 <__ssvfiscanf_r+0x4a>
 800944e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009450:	4621      	mov	r1, r4
 8009452:	4630      	mov	r0, r6
 8009454:	4798      	blx	r3
 8009456:	2800      	cmp	r0, #0
 8009458:	d0bf      	beq.n	80093da <__ssvfiscanf_r+0x1ee>
 800945a:	e79f      	b.n	800939c <__ssvfiscanf_r+0x1b0>
 800945c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800945e:	3201      	adds	r2, #1
 8009460:	9245      	str	r2, [sp, #276]	@ 0x114
 8009462:	6862      	ldr	r2, [r4, #4]
 8009464:	3a01      	subs	r2, #1
 8009466:	2a00      	cmp	r2, #0
 8009468:	6062      	str	r2, [r4, #4]
 800946a:	dd02      	ble.n	8009472 <__ssvfiscanf_r+0x286>
 800946c:	3301      	adds	r3, #1
 800946e:	6023      	str	r3, [r4, #0]
 8009470:	e7b6      	b.n	80093e0 <__ssvfiscanf_r+0x1f4>
 8009472:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009474:	4621      	mov	r1, r4
 8009476:	4630      	mov	r0, r6
 8009478:	4798      	blx	r3
 800947a:	2800      	cmp	r0, #0
 800947c:	d0b0      	beq.n	80093e0 <__ssvfiscanf_r+0x1f4>
 800947e:	e78d      	b.n	800939c <__ssvfiscanf_r+0x1b0>
 8009480:	2b04      	cmp	r3, #4
 8009482:	dc0f      	bgt.n	80094a4 <__ssvfiscanf_r+0x2b8>
 8009484:	466b      	mov	r3, sp
 8009486:	4622      	mov	r2, r4
 8009488:	a941      	add	r1, sp, #260	@ 0x104
 800948a:	4630      	mov	r0, r6
 800948c:	f000 f9be 	bl	800980c <_scanf_i>
 8009490:	e7b4      	b.n	80093fc <__ssvfiscanf_r+0x210>
 8009492:	bf00      	nop
 8009494:	0800913d 	.word	0x0800913d
 8009498:	080091b3 	.word	0x080091b3
 800949c:	0800aa99 	.word	0x0800aa99
 80094a0:	0800ab9f 	.word	0x0800ab9f
 80094a4:	4b0a      	ldr	r3, [pc, #40]	@ (80094d0 <__ssvfiscanf_r+0x2e4>)
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f43f aec5 	beq.w	8009236 <__ssvfiscanf_r+0x4a>
 80094ac:	466b      	mov	r3, sp
 80094ae:	4622      	mov	r2, r4
 80094b0:	a941      	add	r1, sp, #260	@ 0x104
 80094b2:	4630      	mov	r0, r6
 80094b4:	f7fc fd64 	bl	8005f80 <_scanf_float>
 80094b8:	e7a0      	b.n	80093fc <__ssvfiscanf_r+0x210>
 80094ba:	89a3      	ldrh	r3, [r4, #12]
 80094bc:	065b      	lsls	r3, r3, #25
 80094be:	f53f af71 	bmi.w	80093a4 <__ssvfiscanf_r+0x1b8>
 80094c2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80094c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ca:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80094cc:	e7f9      	b.n	80094c2 <__ssvfiscanf_r+0x2d6>
 80094ce:	bf00      	nop
 80094d0:	08005f81 	.word	0x08005f81

080094d4 <__sfputc_r>:
 80094d4:	6893      	ldr	r3, [r2, #8]
 80094d6:	3b01      	subs	r3, #1
 80094d8:	2b00      	cmp	r3, #0
 80094da:	b410      	push	{r4}
 80094dc:	6093      	str	r3, [r2, #8]
 80094de:	da08      	bge.n	80094f2 <__sfputc_r+0x1e>
 80094e0:	6994      	ldr	r4, [r2, #24]
 80094e2:	42a3      	cmp	r3, r4
 80094e4:	db01      	blt.n	80094ea <__sfputc_r+0x16>
 80094e6:	290a      	cmp	r1, #10
 80094e8:	d103      	bne.n	80094f2 <__sfputc_r+0x1e>
 80094ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094ee:	f7fd b91c 	b.w	800672a <__swbuf_r>
 80094f2:	6813      	ldr	r3, [r2, #0]
 80094f4:	1c58      	adds	r0, r3, #1
 80094f6:	6010      	str	r0, [r2, #0]
 80094f8:	7019      	strb	r1, [r3, #0]
 80094fa:	4608      	mov	r0, r1
 80094fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009500:	4770      	bx	lr

08009502 <__sfputs_r>:
 8009502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009504:	4606      	mov	r6, r0
 8009506:	460f      	mov	r7, r1
 8009508:	4614      	mov	r4, r2
 800950a:	18d5      	adds	r5, r2, r3
 800950c:	42ac      	cmp	r4, r5
 800950e:	d101      	bne.n	8009514 <__sfputs_r+0x12>
 8009510:	2000      	movs	r0, #0
 8009512:	e007      	b.n	8009524 <__sfputs_r+0x22>
 8009514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009518:	463a      	mov	r2, r7
 800951a:	4630      	mov	r0, r6
 800951c:	f7ff ffda 	bl	80094d4 <__sfputc_r>
 8009520:	1c43      	adds	r3, r0, #1
 8009522:	d1f3      	bne.n	800950c <__sfputs_r+0xa>
 8009524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009528 <_vfiprintf_r>:
 8009528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800952c:	460d      	mov	r5, r1
 800952e:	b09d      	sub	sp, #116	@ 0x74
 8009530:	4614      	mov	r4, r2
 8009532:	4698      	mov	r8, r3
 8009534:	4606      	mov	r6, r0
 8009536:	b118      	cbz	r0, 8009540 <_vfiprintf_r+0x18>
 8009538:	6a03      	ldr	r3, [r0, #32]
 800953a:	b90b      	cbnz	r3, 8009540 <_vfiprintf_r+0x18>
 800953c:	f7fc ffc0 	bl	80064c0 <__sinit>
 8009540:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009542:	07d9      	lsls	r1, r3, #31
 8009544:	d405      	bmi.n	8009552 <_vfiprintf_r+0x2a>
 8009546:	89ab      	ldrh	r3, [r5, #12]
 8009548:	059a      	lsls	r2, r3, #22
 800954a:	d402      	bmi.n	8009552 <_vfiprintf_r+0x2a>
 800954c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800954e:	f7fd fa10 	bl	8006972 <__retarget_lock_acquire_recursive>
 8009552:	89ab      	ldrh	r3, [r5, #12]
 8009554:	071b      	lsls	r3, r3, #28
 8009556:	d501      	bpl.n	800955c <_vfiprintf_r+0x34>
 8009558:	692b      	ldr	r3, [r5, #16]
 800955a:	b99b      	cbnz	r3, 8009584 <_vfiprintf_r+0x5c>
 800955c:	4629      	mov	r1, r5
 800955e:	4630      	mov	r0, r6
 8009560:	f7fd f922 	bl	80067a8 <__swsetup_r>
 8009564:	b170      	cbz	r0, 8009584 <_vfiprintf_r+0x5c>
 8009566:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009568:	07dc      	lsls	r4, r3, #31
 800956a:	d504      	bpl.n	8009576 <_vfiprintf_r+0x4e>
 800956c:	f04f 30ff 	mov.w	r0, #4294967295
 8009570:	b01d      	add	sp, #116	@ 0x74
 8009572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009576:	89ab      	ldrh	r3, [r5, #12]
 8009578:	0598      	lsls	r0, r3, #22
 800957a:	d4f7      	bmi.n	800956c <_vfiprintf_r+0x44>
 800957c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800957e:	f7fd f9f9 	bl	8006974 <__retarget_lock_release_recursive>
 8009582:	e7f3      	b.n	800956c <_vfiprintf_r+0x44>
 8009584:	2300      	movs	r3, #0
 8009586:	9309      	str	r3, [sp, #36]	@ 0x24
 8009588:	2320      	movs	r3, #32
 800958a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800958e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009592:	2330      	movs	r3, #48	@ 0x30
 8009594:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009744 <_vfiprintf_r+0x21c>
 8009598:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800959c:	f04f 0901 	mov.w	r9, #1
 80095a0:	4623      	mov	r3, r4
 80095a2:	469a      	mov	sl, r3
 80095a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095a8:	b10a      	cbz	r2, 80095ae <_vfiprintf_r+0x86>
 80095aa:	2a25      	cmp	r2, #37	@ 0x25
 80095ac:	d1f9      	bne.n	80095a2 <_vfiprintf_r+0x7a>
 80095ae:	ebba 0b04 	subs.w	fp, sl, r4
 80095b2:	d00b      	beq.n	80095cc <_vfiprintf_r+0xa4>
 80095b4:	465b      	mov	r3, fp
 80095b6:	4622      	mov	r2, r4
 80095b8:	4629      	mov	r1, r5
 80095ba:	4630      	mov	r0, r6
 80095bc:	f7ff ffa1 	bl	8009502 <__sfputs_r>
 80095c0:	3001      	adds	r0, #1
 80095c2:	f000 80a7 	beq.w	8009714 <_vfiprintf_r+0x1ec>
 80095c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095c8:	445a      	add	r2, fp
 80095ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80095cc:	f89a 3000 	ldrb.w	r3, [sl]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f000 809f 	beq.w	8009714 <_vfiprintf_r+0x1ec>
 80095d6:	2300      	movs	r3, #0
 80095d8:	f04f 32ff 	mov.w	r2, #4294967295
 80095dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095e0:	f10a 0a01 	add.w	sl, sl, #1
 80095e4:	9304      	str	r3, [sp, #16]
 80095e6:	9307      	str	r3, [sp, #28]
 80095e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80095ee:	4654      	mov	r4, sl
 80095f0:	2205      	movs	r2, #5
 80095f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095f6:	4853      	ldr	r0, [pc, #332]	@ (8009744 <_vfiprintf_r+0x21c>)
 80095f8:	f7f6 fdea 	bl	80001d0 <memchr>
 80095fc:	9a04      	ldr	r2, [sp, #16]
 80095fe:	b9d8      	cbnz	r0, 8009638 <_vfiprintf_r+0x110>
 8009600:	06d1      	lsls	r1, r2, #27
 8009602:	bf44      	itt	mi
 8009604:	2320      	movmi	r3, #32
 8009606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800960a:	0713      	lsls	r3, r2, #28
 800960c:	bf44      	itt	mi
 800960e:	232b      	movmi	r3, #43	@ 0x2b
 8009610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009614:	f89a 3000 	ldrb.w	r3, [sl]
 8009618:	2b2a      	cmp	r3, #42	@ 0x2a
 800961a:	d015      	beq.n	8009648 <_vfiprintf_r+0x120>
 800961c:	9a07      	ldr	r2, [sp, #28]
 800961e:	4654      	mov	r4, sl
 8009620:	2000      	movs	r0, #0
 8009622:	f04f 0c0a 	mov.w	ip, #10
 8009626:	4621      	mov	r1, r4
 8009628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800962c:	3b30      	subs	r3, #48	@ 0x30
 800962e:	2b09      	cmp	r3, #9
 8009630:	d94b      	bls.n	80096ca <_vfiprintf_r+0x1a2>
 8009632:	b1b0      	cbz	r0, 8009662 <_vfiprintf_r+0x13a>
 8009634:	9207      	str	r2, [sp, #28]
 8009636:	e014      	b.n	8009662 <_vfiprintf_r+0x13a>
 8009638:	eba0 0308 	sub.w	r3, r0, r8
 800963c:	fa09 f303 	lsl.w	r3, r9, r3
 8009640:	4313      	orrs	r3, r2
 8009642:	9304      	str	r3, [sp, #16]
 8009644:	46a2      	mov	sl, r4
 8009646:	e7d2      	b.n	80095ee <_vfiprintf_r+0xc6>
 8009648:	9b03      	ldr	r3, [sp, #12]
 800964a:	1d19      	adds	r1, r3, #4
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	9103      	str	r1, [sp, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	bfbb      	ittet	lt
 8009654:	425b      	neglt	r3, r3
 8009656:	f042 0202 	orrlt.w	r2, r2, #2
 800965a:	9307      	strge	r3, [sp, #28]
 800965c:	9307      	strlt	r3, [sp, #28]
 800965e:	bfb8      	it	lt
 8009660:	9204      	strlt	r2, [sp, #16]
 8009662:	7823      	ldrb	r3, [r4, #0]
 8009664:	2b2e      	cmp	r3, #46	@ 0x2e
 8009666:	d10a      	bne.n	800967e <_vfiprintf_r+0x156>
 8009668:	7863      	ldrb	r3, [r4, #1]
 800966a:	2b2a      	cmp	r3, #42	@ 0x2a
 800966c:	d132      	bne.n	80096d4 <_vfiprintf_r+0x1ac>
 800966e:	9b03      	ldr	r3, [sp, #12]
 8009670:	1d1a      	adds	r2, r3, #4
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	9203      	str	r2, [sp, #12]
 8009676:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800967a:	3402      	adds	r4, #2
 800967c:	9305      	str	r3, [sp, #20]
 800967e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009754 <_vfiprintf_r+0x22c>
 8009682:	7821      	ldrb	r1, [r4, #0]
 8009684:	2203      	movs	r2, #3
 8009686:	4650      	mov	r0, sl
 8009688:	f7f6 fda2 	bl	80001d0 <memchr>
 800968c:	b138      	cbz	r0, 800969e <_vfiprintf_r+0x176>
 800968e:	9b04      	ldr	r3, [sp, #16]
 8009690:	eba0 000a 	sub.w	r0, r0, sl
 8009694:	2240      	movs	r2, #64	@ 0x40
 8009696:	4082      	lsls	r2, r0
 8009698:	4313      	orrs	r3, r2
 800969a:	3401      	adds	r4, #1
 800969c:	9304      	str	r3, [sp, #16]
 800969e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a2:	4829      	ldr	r0, [pc, #164]	@ (8009748 <_vfiprintf_r+0x220>)
 80096a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096a8:	2206      	movs	r2, #6
 80096aa:	f7f6 fd91 	bl	80001d0 <memchr>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d03f      	beq.n	8009732 <_vfiprintf_r+0x20a>
 80096b2:	4b26      	ldr	r3, [pc, #152]	@ (800974c <_vfiprintf_r+0x224>)
 80096b4:	bb1b      	cbnz	r3, 80096fe <_vfiprintf_r+0x1d6>
 80096b6:	9b03      	ldr	r3, [sp, #12]
 80096b8:	3307      	adds	r3, #7
 80096ba:	f023 0307 	bic.w	r3, r3, #7
 80096be:	3308      	adds	r3, #8
 80096c0:	9303      	str	r3, [sp, #12]
 80096c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096c4:	443b      	add	r3, r7
 80096c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80096c8:	e76a      	b.n	80095a0 <_vfiprintf_r+0x78>
 80096ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80096ce:	460c      	mov	r4, r1
 80096d0:	2001      	movs	r0, #1
 80096d2:	e7a8      	b.n	8009626 <_vfiprintf_r+0xfe>
 80096d4:	2300      	movs	r3, #0
 80096d6:	3401      	adds	r4, #1
 80096d8:	9305      	str	r3, [sp, #20]
 80096da:	4619      	mov	r1, r3
 80096dc:	f04f 0c0a 	mov.w	ip, #10
 80096e0:	4620      	mov	r0, r4
 80096e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096e6:	3a30      	subs	r2, #48	@ 0x30
 80096e8:	2a09      	cmp	r2, #9
 80096ea:	d903      	bls.n	80096f4 <_vfiprintf_r+0x1cc>
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d0c6      	beq.n	800967e <_vfiprintf_r+0x156>
 80096f0:	9105      	str	r1, [sp, #20]
 80096f2:	e7c4      	b.n	800967e <_vfiprintf_r+0x156>
 80096f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80096f8:	4604      	mov	r4, r0
 80096fa:	2301      	movs	r3, #1
 80096fc:	e7f0      	b.n	80096e0 <_vfiprintf_r+0x1b8>
 80096fe:	ab03      	add	r3, sp, #12
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	462a      	mov	r2, r5
 8009704:	4b12      	ldr	r3, [pc, #72]	@ (8009750 <_vfiprintf_r+0x228>)
 8009706:	a904      	add	r1, sp, #16
 8009708:	4630      	mov	r0, r6
 800970a:	f7fc f881 	bl	8005810 <_printf_float>
 800970e:	4607      	mov	r7, r0
 8009710:	1c78      	adds	r0, r7, #1
 8009712:	d1d6      	bne.n	80096c2 <_vfiprintf_r+0x19a>
 8009714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009716:	07d9      	lsls	r1, r3, #31
 8009718:	d405      	bmi.n	8009726 <_vfiprintf_r+0x1fe>
 800971a:	89ab      	ldrh	r3, [r5, #12]
 800971c:	059a      	lsls	r2, r3, #22
 800971e:	d402      	bmi.n	8009726 <_vfiprintf_r+0x1fe>
 8009720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009722:	f7fd f927 	bl	8006974 <__retarget_lock_release_recursive>
 8009726:	89ab      	ldrh	r3, [r5, #12]
 8009728:	065b      	lsls	r3, r3, #25
 800972a:	f53f af1f 	bmi.w	800956c <_vfiprintf_r+0x44>
 800972e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009730:	e71e      	b.n	8009570 <_vfiprintf_r+0x48>
 8009732:	ab03      	add	r3, sp, #12
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	462a      	mov	r2, r5
 8009738:	4b05      	ldr	r3, [pc, #20]	@ (8009750 <_vfiprintf_r+0x228>)
 800973a:	a904      	add	r1, sp, #16
 800973c:	4630      	mov	r0, r6
 800973e:	f7fc faff 	bl	8005d40 <_printf_i>
 8009742:	e7e4      	b.n	800970e <_vfiprintf_r+0x1e6>
 8009744:	0800ab99 	.word	0x0800ab99
 8009748:	0800aba3 	.word	0x0800aba3
 800974c:	08005811 	.word	0x08005811
 8009750:	08009503 	.word	0x08009503
 8009754:	0800ab9f 	.word	0x0800ab9f

08009758 <_scanf_chars>:
 8009758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800975c:	4615      	mov	r5, r2
 800975e:	688a      	ldr	r2, [r1, #8]
 8009760:	4680      	mov	r8, r0
 8009762:	460c      	mov	r4, r1
 8009764:	b932      	cbnz	r2, 8009774 <_scanf_chars+0x1c>
 8009766:	698a      	ldr	r2, [r1, #24]
 8009768:	2a00      	cmp	r2, #0
 800976a:	bf14      	ite	ne
 800976c:	f04f 32ff 	movne.w	r2, #4294967295
 8009770:	2201      	moveq	r2, #1
 8009772:	608a      	str	r2, [r1, #8]
 8009774:	6822      	ldr	r2, [r4, #0]
 8009776:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009808 <_scanf_chars+0xb0>
 800977a:	06d1      	lsls	r1, r2, #27
 800977c:	bf5f      	itttt	pl
 800977e:	681a      	ldrpl	r2, [r3, #0]
 8009780:	1d11      	addpl	r1, r2, #4
 8009782:	6019      	strpl	r1, [r3, #0]
 8009784:	6816      	ldrpl	r6, [r2, #0]
 8009786:	2700      	movs	r7, #0
 8009788:	69a0      	ldr	r0, [r4, #24]
 800978a:	b188      	cbz	r0, 80097b0 <_scanf_chars+0x58>
 800978c:	2801      	cmp	r0, #1
 800978e:	d107      	bne.n	80097a0 <_scanf_chars+0x48>
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	781a      	ldrb	r2, [r3, #0]
 8009794:	6963      	ldr	r3, [r4, #20]
 8009796:	5c9b      	ldrb	r3, [r3, r2]
 8009798:	b953      	cbnz	r3, 80097b0 <_scanf_chars+0x58>
 800979a:	2f00      	cmp	r7, #0
 800979c:	d031      	beq.n	8009802 <_scanf_chars+0xaa>
 800979e:	e022      	b.n	80097e6 <_scanf_chars+0x8e>
 80097a0:	2802      	cmp	r0, #2
 80097a2:	d120      	bne.n	80097e6 <_scanf_chars+0x8e>
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80097ac:	071b      	lsls	r3, r3, #28
 80097ae:	d41a      	bmi.n	80097e6 <_scanf_chars+0x8e>
 80097b0:	6823      	ldr	r3, [r4, #0]
 80097b2:	06da      	lsls	r2, r3, #27
 80097b4:	bf5e      	ittt	pl
 80097b6:	682b      	ldrpl	r3, [r5, #0]
 80097b8:	781b      	ldrbpl	r3, [r3, #0]
 80097ba:	f806 3b01 	strbpl.w	r3, [r6], #1
 80097be:	682a      	ldr	r2, [r5, #0]
 80097c0:	686b      	ldr	r3, [r5, #4]
 80097c2:	3201      	adds	r2, #1
 80097c4:	602a      	str	r2, [r5, #0]
 80097c6:	68a2      	ldr	r2, [r4, #8]
 80097c8:	3b01      	subs	r3, #1
 80097ca:	3a01      	subs	r2, #1
 80097cc:	606b      	str	r3, [r5, #4]
 80097ce:	3701      	adds	r7, #1
 80097d0:	60a2      	str	r2, [r4, #8]
 80097d2:	b142      	cbz	r2, 80097e6 <_scanf_chars+0x8e>
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	dcd7      	bgt.n	8009788 <_scanf_chars+0x30>
 80097d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80097dc:	4629      	mov	r1, r5
 80097de:	4640      	mov	r0, r8
 80097e0:	4798      	blx	r3
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d0d0      	beq.n	8009788 <_scanf_chars+0x30>
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	f013 0310 	ands.w	r3, r3, #16
 80097ec:	d105      	bne.n	80097fa <_scanf_chars+0xa2>
 80097ee:	68e2      	ldr	r2, [r4, #12]
 80097f0:	3201      	adds	r2, #1
 80097f2:	60e2      	str	r2, [r4, #12]
 80097f4:	69a2      	ldr	r2, [r4, #24]
 80097f6:	b102      	cbz	r2, 80097fa <_scanf_chars+0xa2>
 80097f8:	7033      	strb	r3, [r6, #0]
 80097fa:	6923      	ldr	r3, [r4, #16]
 80097fc:	443b      	add	r3, r7
 80097fe:	6123      	str	r3, [r4, #16]
 8009800:	2000      	movs	r0, #0
 8009802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009806:	bf00      	nop
 8009808:	0800aa99 	.word	0x0800aa99

0800980c <_scanf_i>:
 800980c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009810:	4698      	mov	r8, r3
 8009812:	4b74      	ldr	r3, [pc, #464]	@ (80099e4 <_scanf_i+0x1d8>)
 8009814:	460c      	mov	r4, r1
 8009816:	4682      	mov	sl, r0
 8009818:	4616      	mov	r6, r2
 800981a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800981e:	b087      	sub	sp, #28
 8009820:	ab03      	add	r3, sp, #12
 8009822:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009826:	4b70      	ldr	r3, [pc, #448]	@ (80099e8 <_scanf_i+0x1dc>)
 8009828:	69a1      	ldr	r1, [r4, #24]
 800982a:	4a70      	ldr	r2, [pc, #448]	@ (80099ec <_scanf_i+0x1e0>)
 800982c:	2903      	cmp	r1, #3
 800982e:	bf08      	it	eq
 8009830:	461a      	moveq	r2, r3
 8009832:	68a3      	ldr	r3, [r4, #8]
 8009834:	9201      	str	r2, [sp, #4]
 8009836:	1e5a      	subs	r2, r3, #1
 8009838:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800983c:	bf88      	it	hi
 800983e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009842:	4627      	mov	r7, r4
 8009844:	bf82      	ittt	hi
 8009846:	eb03 0905 	addhi.w	r9, r3, r5
 800984a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800984e:	60a3      	strhi	r3, [r4, #8]
 8009850:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009854:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009858:	bf98      	it	ls
 800985a:	f04f 0900 	movls.w	r9, #0
 800985e:	6023      	str	r3, [r4, #0]
 8009860:	463d      	mov	r5, r7
 8009862:	f04f 0b00 	mov.w	fp, #0
 8009866:	6831      	ldr	r1, [r6, #0]
 8009868:	ab03      	add	r3, sp, #12
 800986a:	7809      	ldrb	r1, [r1, #0]
 800986c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009870:	2202      	movs	r2, #2
 8009872:	f7f6 fcad 	bl	80001d0 <memchr>
 8009876:	b328      	cbz	r0, 80098c4 <_scanf_i+0xb8>
 8009878:	f1bb 0f01 	cmp.w	fp, #1
 800987c:	d159      	bne.n	8009932 <_scanf_i+0x126>
 800987e:	6862      	ldr	r2, [r4, #4]
 8009880:	b92a      	cbnz	r2, 800988e <_scanf_i+0x82>
 8009882:	6822      	ldr	r2, [r4, #0]
 8009884:	2108      	movs	r1, #8
 8009886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800988a:	6061      	str	r1, [r4, #4]
 800988c:	6022      	str	r2, [r4, #0]
 800988e:	6822      	ldr	r2, [r4, #0]
 8009890:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009894:	6022      	str	r2, [r4, #0]
 8009896:	68a2      	ldr	r2, [r4, #8]
 8009898:	1e51      	subs	r1, r2, #1
 800989a:	60a1      	str	r1, [r4, #8]
 800989c:	b192      	cbz	r2, 80098c4 <_scanf_i+0xb8>
 800989e:	6832      	ldr	r2, [r6, #0]
 80098a0:	1c51      	adds	r1, r2, #1
 80098a2:	6031      	str	r1, [r6, #0]
 80098a4:	7812      	ldrb	r2, [r2, #0]
 80098a6:	f805 2b01 	strb.w	r2, [r5], #1
 80098aa:	6872      	ldr	r2, [r6, #4]
 80098ac:	3a01      	subs	r2, #1
 80098ae:	2a00      	cmp	r2, #0
 80098b0:	6072      	str	r2, [r6, #4]
 80098b2:	dc07      	bgt.n	80098c4 <_scanf_i+0xb8>
 80098b4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80098b8:	4631      	mov	r1, r6
 80098ba:	4650      	mov	r0, sl
 80098bc:	4790      	blx	r2
 80098be:	2800      	cmp	r0, #0
 80098c0:	f040 8085 	bne.w	80099ce <_scanf_i+0x1c2>
 80098c4:	f10b 0b01 	add.w	fp, fp, #1
 80098c8:	f1bb 0f03 	cmp.w	fp, #3
 80098cc:	d1cb      	bne.n	8009866 <_scanf_i+0x5a>
 80098ce:	6863      	ldr	r3, [r4, #4]
 80098d0:	b90b      	cbnz	r3, 80098d6 <_scanf_i+0xca>
 80098d2:	230a      	movs	r3, #10
 80098d4:	6063      	str	r3, [r4, #4]
 80098d6:	6863      	ldr	r3, [r4, #4]
 80098d8:	4945      	ldr	r1, [pc, #276]	@ (80099f0 <_scanf_i+0x1e4>)
 80098da:	6960      	ldr	r0, [r4, #20]
 80098dc:	1ac9      	subs	r1, r1, r3
 80098de:	f000 f997 	bl	8009c10 <__sccl>
 80098e2:	f04f 0b00 	mov.w	fp, #0
 80098e6:	68a3      	ldr	r3, [r4, #8]
 80098e8:	6822      	ldr	r2, [r4, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d03d      	beq.n	800996a <_scanf_i+0x15e>
 80098ee:	6831      	ldr	r1, [r6, #0]
 80098f0:	6960      	ldr	r0, [r4, #20]
 80098f2:	f891 c000 	ldrb.w	ip, [r1]
 80098f6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80098fa:	2800      	cmp	r0, #0
 80098fc:	d035      	beq.n	800996a <_scanf_i+0x15e>
 80098fe:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009902:	d124      	bne.n	800994e <_scanf_i+0x142>
 8009904:	0510      	lsls	r0, r2, #20
 8009906:	d522      	bpl.n	800994e <_scanf_i+0x142>
 8009908:	f10b 0b01 	add.w	fp, fp, #1
 800990c:	f1b9 0f00 	cmp.w	r9, #0
 8009910:	d003      	beq.n	800991a <_scanf_i+0x10e>
 8009912:	3301      	adds	r3, #1
 8009914:	f109 39ff 	add.w	r9, r9, #4294967295
 8009918:	60a3      	str	r3, [r4, #8]
 800991a:	6873      	ldr	r3, [r6, #4]
 800991c:	3b01      	subs	r3, #1
 800991e:	2b00      	cmp	r3, #0
 8009920:	6073      	str	r3, [r6, #4]
 8009922:	dd1b      	ble.n	800995c <_scanf_i+0x150>
 8009924:	6833      	ldr	r3, [r6, #0]
 8009926:	3301      	adds	r3, #1
 8009928:	6033      	str	r3, [r6, #0]
 800992a:	68a3      	ldr	r3, [r4, #8]
 800992c:	3b01      	subs	r3, #1
 800992e:	60a3      	str	r3, [r4, #8]
 8009930:	e7d9      	b.n	80098e6 <_scanf_i+0xda>
 8009932:	f1bb 0f02 	cmp.w	fp, #2
 8009936:	d1ae      	bne.n	8009896 <_scanf_i+0x8a>
 8009938:	6822      	ldr	r2, [r4, #0]
 800993a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800993e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009942:	d1bf      	bne.n	80098c4 <_scanf_i+0xb8>
 8009944:	2110      	movs	r1, #16
 8009946:	6061      	str	r1, [r4, #4]
 8009948:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800994c:	e7a2      	b.n	8009894 <_scanf_i+0x88>
 800994e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009952:	6022      	str	r2, [r4, #0]
 8009954:	780b      	ldrb	r3, [r1, #0]
 8009956:	f805 3b01 	strb.w	r3, [r5], #1
 800995a:	e7de      	b.n	800991a <_scanf_i+0x10e>
 800995c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009960:	4631      	mov	r1, r6
 8009962:	4650      	mov	r0, sl
 8009964:	4798      	blx	r3
 8009966:	2800      	cmp	r0, #0
 8009968:	d0df      	beq.n	800992a <_scanf_i+0x11e>
 800996a:	6823      	ldr	r3, [r4, #0]
 800996c:	05d9      	lsls	r1, r3, #23
 800996e:	d50d      	bpl.n	800998c <_scanf_i+0x180>
 8009970:	42bd      	cmp	r5, r7
 8009972:	d909      	bls.n	8009988 <_scanf_i+0x17c>
 8009974:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009978:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800997c:	4632      	mov	r2, r6
 800997e:	4650      	mov	r0, sl
 8009980:	4798      	blx	r3
 8009982:	f105 39ff 	add.w	r9, r5, #4294967295
 8009986:	464d      	mov	r5, r9
 8009988:	42bd      	cmp	r5, r7
 800998a:	d028      	beq.n	80099de <_scanf_i+0x1d2>
 800998c:	6822      	ldr	r2, [r4, #0]
 800998e:	f012 0210 	ands.w	r2, r2, #16
 8009992:	d113      	bne.n	80099bc <_scanf_i+0x1b0>
 8009994:	702a      	strb	r2, [r5, #0]
 8009996:	6863      	ldr	r3, [r4, #4]
 8009998:	9e01      	ldr	r6, [sp, #4]
 800999a:	4639      	mov	r1, r7
 800999c:	4650      	mov	r0, sl
 800999e:	47b0      	blx	r6
 80099a0:	f8d8 3000 	ldr.w	r3, [r8]
 80099a4:	6821      	ldr	r1, [r4, #0]
 80099a6:	1d1a      	adds	r2, r3, #4
 80099a8:	f8c8 2000 	str.w	r2, [r8]
 80099ac:	f011 0f20 	tst.w	r1, #32
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	d00f      	beq.n	80099d4 <_scanf_i+0x1c8>
 80099b4:	6018      	str	r0, [r3, #0]
 80099b6:	68e3      	ldr	r3, [r4, #12]
 80099b8:	3301      	adds	r3, #1
 80099ba:	60e3      	str	r3, [r4, #12]
 80099bc:	6923      	ldr	r3, [r4, #16]
 80099be:	1bed      	subs	r5, r5, r7
 80099c0:	445d      	add	r5, fp
 80099c2:	442b      	add	r3, r5
 80099c4:	6123      	str	r3, [r4, #16]
 80099c6:	2000      	movs	r0, #0
 80099c8:	b007      	add	sp, #28
 80099ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ce:	f04f 0b00 	mov.w	fp, #0
 80099d2:	e7ca      	b.n	800996a <_scanf_i+0x15e>
 80099d4:	07ca      	lsls	r2, r1, #31
 80099d6:	bf4c      	ite	mi
 80099d8:	8018      	strhmi	r0, [r3, #0]
 80099da:	6018      	strpl	r0, [r3, #0]
 80099dc:	e7eb      	b.n	80099b6 <_scanf_i+0x1aa>
 80099de:	2001      	movs	r0, #1
 80099e0:	e7f2      	b.n	80099c8 <_scanf_i+0x1bc>
 80099e2:	bf00      	nop
 80099e4:	0800a7f4 	.word	0x0800a7f4
 80099e8:	08008e89 	.word	0x08008e89
 80099ec:	0800a5f5 	.word	0x0800a5f5
 80099f0:	0800abba 	.word	0x0800abba

080099f4 <__sflush_r>:
 80099f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099fc:	0716      	lsls	r6, r2, #28
 80099fe:	4605      	mov	r5, r0
 8009a00:	460c      	mov	r4, r1
 8009a02:	d454      	bmi.n	8009aae <__sflush_r+0xba>
 8009a04:	684b      	ldr	r3, [r1, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	dc02      	bgt.n	8009a10 <__sflush_r+0x1c>
 8009a0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	dd48      	ble.n	8009aa2 <__sflush_r+0xae>
 8009a10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a12:	2e00      	cmp	r6, #0
 8009a14:	d045      	beq.n	8009aa2 <__sflush_r+0xae>
 8009a16:	2300      	movs	r3, #0
 8009a18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009a1c:	682f      	ldr	r7, [r5, #0]
 8009a1e:	6a21      	ldr	r1, [r4, #32]
 8009a20:	602b      	str	r3, [r5, #0]
 8009a22:	d030      	beq.n	8009a86 <__sflush_r+0x92>
 8009a24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a26:	89a3      	ldrh	r3, [r4, #12]
 8009a28:	0759      	lsls	r1, r3, #29
 8009a2a:	d505      	bpl.n	8009a38 <__sflush_r+0x44>
 8009a2c:	6863      	ldr	r3, [r4, #4]
 8009a2e:	1ad2      	subs	r2, r2, r3
 8009a30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a32:	b10b      	cbz	r3, 8009a38 <__sflush_r+0x44>
 8009a34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a36:	1ad2      	subs	r2, r2, r3
 8009a38:	2300      	movs	r3, #0
 8009a3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a3c:	6a21      	ldr	r1, [r4, #32]
 8009a3e:	4628      	mov	r0, r5
 8009a40:	47b0      	blx	r6
 8009a42:	1c43      	adds	r3, r0, #1
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	d106      	bne.n	8009a56 <__sflush_r+0x62>
 8009a48:	6829      	ldr	r1, [r5, #0]
 8009a4a:	291d      	cmp	r1, #29
 8009a4c:	d82b      	bhi.n	8009aa6 <__sflush_r+0xb2>
 8009a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8009af8 <__sflush_r+0x104>)
 8009a50:	410a      	asrs	r2, r1
 8009a52:	07d6      	lsls	r6, r2, #31
 8009a54:	d427      	bmi.n	8009aa6 <__sflush_r+0xb2>
 8009a56:	2200      	movs	r2, #0
 8009a58:	6062      	str	r2, [r4, #4]
 8009a5a:	04d9      	lsls	r1, r3, #19
 8009a5c:	6922      	ldr	r2, [r4, #16]
 8009a5e:	6022      	str	r2, [r4, #0]
 8009a60:	d504      	bpl.n	8009a6c <__sflush_r+0x78>
 8009a62:	1c42      	adds	r2, r0, #1
 8009a64:	d101      	bne.n	8009a6a <__sflush_r+0x76>
 8009a66:	682b      	ldr	r3, [r5, #0]
 8009a68:	b903      	cbnz	r3, 8009a6c <__sflush_r+0x78>
 8009a6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a6e:	602f      	str	r7, [r5, #0]
 8009a70:	b1b9      	cbz	r1, 8009aa2 <__sflush_r+0xae>
 8009a72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a76:	4299      	cmp	r1, r3
 8009a78:	d002      	beq.n	8009a80 <__sflush_r+0x8c>
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	f7fd fdd0 	bl	8007620 <_free_r>
 8009a80:	2300      	movs	r3, #0
 8009a82:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a84:	e00d      	b.n	8009aa2 <__sflush_r+0xae>
 8009a86:	2301      	movs	r3, #1
 8009a88:	4628      	mov	r0, r5
 8009a8a:	47b0      	blx	r6
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	1c50      	adds	r0, r2, #1
 8009a90:	d1c9      	bne.n	8009a26 <__sflush_r+0x32>
 8009a92:	682b      	ldr	r3, [r5, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d0c6      	beq.n	8009a26 <__sflush_r+0x32>
 8009a98:	2b1d      	cmp	r3, #29
 8009a9a:	d001      	beq.n	8009aa0 <__sflush_r+0xac>
 8009a9c:	2b16      	cmp	r3, #22
 8009a9e:	d11e      	bne.n	8009ade <__sflush_r+0xea>
 8009aa0:	602f      	str	r7, [r5, #0]
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	e022      	b.n	8009aec <__sflush_r+0xf8>
 8009aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aaa:	b21b      	sxth	r3, r3
 8009aac:	e01b      	b.n	8009ae6 <__sflush_r+0xf2>
 8009aae:	690f      	ldr	r7, [r1, #16]
 8009ab0:	2f00      	cmp	r7, #0
 8009ab2:	d0f6      	beq.n	8009aa2 <__sflush_r+0xae>
 8009ab4:	0793      	lsls	r3, r2, #30
 8009ab6:	680e      	ldr	r6, [r1, #0]
 8009ab8:	bf08      	it	eq
 8009aba:	694b      	ldreq	r3, [r1, #20]
 8009abc:	600f      	str	r7, [r1, #0]
 8009abe:	bf18      	it	ne
 8009ac0:	2300      	movne	r3, #0
 8009ac2:	eba6 0807 	sub.w	r8, r6, r7
 8009ac6:	608b      	str	r3, [r1, #8]
 8009ac8:	f1b8 0f00 	cmp.w	r8, #0
 8009acc:	dde9      	ble.n	8009aa2 <__sflush_r+0xae>
 8009ace:	6a21      	ldr	r1, [r4, #32]
 8009ad0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009ad2:	4643      	mov	r3, r8
 8009ad4:	463a      	mov	r2, r7
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	47b0      	blx	r6
 8009ada:	2800      	cmp	r0, #0
 8009adc:	dc08      	bgt.n	8009af0 <__sflush_r+0xfc>
 8009ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ae6:	81a3      	strh	r3, [r4, #12]
 8009ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af0:	4407      	add	r7, r0
 8009af2:	eba8 0800 	sub.w	r8, r8, r0
 8009af6:	e7e7      	b.n	8009ac8 <__sflush_r+0xd4>
 8009af8:	dfbffffe 	.word	0xdfbffffe

08009afc <_fflush_r>:
 8009afc:	b538      	push	{r3, r4, r5, lr}
 8009afe:	690b      	ldr	r3, [r1, #16]
 8009b00:	4605      	mov	r5, r0
 8009b02:	460c      	mov	r4, r1
 8009b04:	b913      	cbnz	r3, 8009b0c <_fflush_r+0x10>
 8009b06:	2500      	movs	r5, #0
 8009b08:	4628      	mov	r0, r5
 8009b0a:	bd38      	pop	{r3, r4, r5, pc}
 8009b0c:	b118      	cbz	r0, 8009b16 <_fflush_r+0x1a>
 8009b0e:	6a03      	ldr	r3, [r0, #32]
 8009b10:	b90b      	cbnz	r3, 8009b16 <_fflush_r+0x1a>
 8009b12:	f7fc fcd5 	bl	80064c0 <__sinit>
 8009b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d0f3      	beq.n	8009b06 <_fflush_r+0xa>
 8009b1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009b20:	07d0      	lsls	r0, r2, #31
 8009b22:	d404      	bmi.n	8009b2e <_fflush_r+0x32>
 8009b24:	0599      	lsls	r1, r3, #22
 8009b26:	d402      	bmi.n	8009b2e <_fflush_r+0x32>
 8009b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b2a:	f7fc ff22 	bl	8006972 <__retarget_lock_acquire_recursive>
 8009b2e:	4628      	mov	r0, r5
 8009b30:	4621      	mov	r1, r4
 8009b32:	f7ff ff5f 	bl	80099f4 <__sflush_r>
 8009b36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b38:	07da      	lsls	r2, r3, #31
 8009b3a:	4605      	mov	r5, r0
 8009b3c:	d4e4      	bmi.n	8009b08 <_fflush_r+0xc>
 8009b3e:	89a3      	ldrh	r3, [r4, #12]
 8009b40:	059b      	lsls	r3, r3, #22
 8009b42:	d4e1      	bmi.n	8009b08 <_fflush_r+0xc>
 8009b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b46:	f7fc ff15 	bl	8006974 <__retarget_lock_release_recursive>
 8009b4a:	e7dd      	b.n	8009b08 <_fflush_r+0xc>

08009b4c <__swhatbuf_r>:
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	460c      	mov	r4, r1
 8009b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b54:	2900      	cmp	r1, #0
 8009b56:	b096      	sub	sp, #88	@ 0x58
 8009b58:	4615      	mov	r5, r2
 8009b5a:	461e      	mov	r6, r3
 8009b5c:	da0d      	bge.n	8009b7a <__swhatbuf_r+0x2e>
 8009b5e:	89a3      	ldrh	r3, [r4, #12]
 8009b60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b64:	f04f 0100 	mov.w	r1, #0
 8009b68:	bf14      	ite	ne
 8009b6a:	2340      	movne	r3, #64	@ 0x40
 8009b6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b70:	2000      	movs	r0, #0
 8009b72:	6031      	str	r1, [r6, #0]
 8009b74:	602b      	str	r3, [r5, #0]
 8009b76:	b016      	add	sp, #88	@ 0x58
 8009b78:	bd70      	pop	{r4, r5, r6, pc}
 8009b7a:	466a      	mov	r2, sp
 8009b7c:	f000 f8d6 	bl	8009d2c <_fstat_r>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	dbec      	blt.n	8009b5e <__swhatbuf_r+0x12>
 8009b84:	9901      	ldr	r1, [sp, #4]
 8009b86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b8e:	4259      	negs	r1, r3
 8009b90:	4159      	adcs	r1, r3
 8009b92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b96:	e7eb      	b.n	8009b70 <__swhatbuf_r+0x24>

08009b98 <__smakebuf_r>:
 8009b98:	898b      	ldrh	r3, [r1, #12]
 8009b9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b9c:	079d      	lsls	r5, r3, #30
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	d507      	bpl.n	8009bb4 <__smakebuf_r+0x1c>
 8009ba4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009ba8:	6023      	str	r3, [r4, #0]
 8009baa:	6123      	str	r3, [r4, #16]
 8009bac:	2301      	movs	r3, #1
 8009bae:	6163      	str	r3, [r4, #20]
 8009bb0:	b003      	add	sp, #12
 8009bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bb4:	ab01      	add	r3, sp, #4
 8009bb6:	466a      	mov	r2, sp
 8009bb8:	f7ff ffc8 	bl	8009b4c <__swhatbuf_r>
 8009bbc:	9f00      	ldr	r7, [sp, #0]
 8009bbe:	4605      	mov	r5, r0
 8009bc0:	4639      	mov	r1, r7
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	f7fd fda0 	bl	8007708 <_malloc_r>
 8009bc8:	b948      	cbnz	r0, 8009bde <__smakebuf_r+0x46>
 8009bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bce:	059a      	lsls	r2, r3, #22
 8009bd0:	d4ee      	bmi.n	8009bb0 <__smakebuf_r+0x18>
 8009bd2:	f023 0303 	bic.w	r3, r3, #3
 8009bd6:	f043 0302 	orr.w	r3, r3, #2
 8009bda:	81a3      	strh	r3, [r4, #12]
 8009bdc:	e7e2      	b.n	8009ba4 <__smakebuf_r+0xc>
 8009bde:	89a3      	ldrh	r3, [r4, #12]
 8009be0:	6020      	str	r0, [r4, #0]
 8009be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009be6:	81a3      	strh	r3, [r4, #12]
 8009be8:	9b01      	ldr	r3, [sp, #4]
 8009bea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009bee:	b15b      	cbz	r3, 8009c08 <__smakebuf_r+0x70>
 8009bf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f000 f8ab 	bl	8009d50 <_isatty_r>
 8009bfa:	b128      	cbz	r0, 8009c08 <__smakebuf_r+0x70>
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	f023 0303 	bic.w	r3, r3, #3
 8009c02:	f043 0301 	orr.w	r3, r3, #1
 8009c06:	81a3      	strh	r3, [r4, #12]
 8009c08:	89a3      	ldrh	r3, [r4, #12]
 8009c0a:	431d      	orrs	r5, r3
 8009c0c:	81a5      	strh	r5, [r4, #12]
 8009c0e:	e7cf      	b.n	8009bb0 <__smakebuf_r+0x18>

08009c10 <__sccl>:
 8009c10:	b570      	push	{r4, r5, r6, lr}
 8009c12:	780b      	ldrb	r3, [r1, #0]
 8009c14:	4604      	mov	r4, r0
 8009c16:	2b5e      	cmp	r3, #94	@ 0x5e
 8009c18:	bf0b      	itete	eq
 8009c1a:	784b      	ldrbeq	r3, [r1, #1]
 8009c1c:	1c4a      	addne	r2, r1, #1
 8009c1e:	1c8a      	addeq	r2, r1, #2
 8009c20:	2100      	movne	r1, #0
 8009c22:	bf08      	it	eq
 8009c24:	2101      	moveq	r1, #1
 8009c26:	3801      	subs	r0, #1
 8009c28:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009c2c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009c30:	42a8      	cmp	r0, r5
 8009c32:	d1fb      	bne.n	8009c2c <__sccl+0x1c>
 8009c34:	b90b      	cbnz	r3, 8009c3a <__sccl+0x2a>
 8009c36:	1e50      	subs	r0, r2, #1
 8009c38:	bd70      	pop	{r4, r5, r6, pc}
 8009c3a:	f081 0101 	eor.w	r1, r1, #1
 8009c3e:	54e1      	strb	r1, [r4, r3]
 8009c40:	4610      	mov	r0, r2
 8009c42:	4602      	mov	r2, r0
 8009c44:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009c48:	2d2d      	cmp	r5, #45	@ 0x2d
 8009c4a:	d005      	beq.n	8009c58 <__sccl+0x48>
 8009c4c:	2d5d      	cmp	r5, #93	@ 0x5d
 8009c4e:	d016      	beq.n	8009c7e <__sccl+0x6e>
 8009c50:	2d00      	cmp	r5, #0
 8009c52:	d0f1      	beq.n	8009c38 <__sccl+0x28>
 8009c54:	462b      	mov	r3, r5
 8009c56:	e7f2      	b.n	8009c3e <__sccl+0x2e>
 8009c58:	7846      	ldrb	r6, [r0, #1]
 8009c5a:	2e5d      	cmp	r6, #93	@ 0x5d
 8009c5c:	d0fa      	beq.n	8009c54 <__sccl+0x44>
 8009c5e:	42b3      	cmp	r3, r6
 8009c60:	dcf8      	bgt.n	8009c54 <__sccl+0x44>
 8009c62:	3002      	adds	r0, #2
 8009c64:	461a      	mov	r2, r3
 8009c66:	3201      	adds	r2, #1
 8009c68:	4296      	cmp	r6, r2
 8009c6a:	54a1      	strb	r1, [r4, r2]
 8009c6c:	dcfb      	bgt.n	8009c66 <__sccl+0x56>
 8009c6e:	1af2      	subs	r2, r6, r3
 8009c70:	3a01      	subs	r2, #1
 8009c72:	1c5d      	adds	r5, r3, #1
 8009c74:	42b3      	cmp	r3, r6
 8009c76:	bfa8      	it	ge
 8009c78:	2200      	movge	r2, #0
 8009c7a:	18ab      	adds	r3, r5, r2
 8009c7c:	e7e1      	b.n	8009c42 <__sccl+0x32>
 8009c7e:	4610      	mov	r0, r2
 8009c80:	e7da      	b.n	8009c38 <__sccl+0x28>

08009c82 <__submore>:
 8009c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c86:	460c      	mov	r4, r1
 8009c88:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009c8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c8e:	4299      	cmp	r1, r3
 8009c90:	d11d      	bne.n	8009cce <__submore+0x4c>
 8009c92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009c96:	f7fd fd37 	bl	8007708 <_malloc_r>
 8009c9a:	b918      	cbnz	r0, 8009ca4 <__submore+0x22>
 8009c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ca8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009caa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009cae:	6360      	str	r0, [r4, #52]	@ 0x34
 8009cb0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009cb4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009cb8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009cbc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009cc0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009cc4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009cc8:	6020      	str	r0, [r4, #0]
 8009cca:	2000      	movs	r0, #0
 8009ccc:	e7e8      	b.n	8009ca0 <__submore+0x1e>
 8009cce:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009cd0:	0077      	lsls	r7, r6, #1
 8009cd2:	463a      	mov	r2, r7
 8009cd4:	f000 fbf1 	bl	800a4ba <_realloc_r>
 8009cd8:	4605      	mov	r5, r0
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	d0de      	beq.n	8009c9c <__submore+0x1a>
 8009cde:	eb00 0806 	add.w	r8, r0, r6
 8009ce2:	4601      	mov	r1, r0
 8009ce4:	4632      	mov	r2, r6
 8009ce6:	4640      	mov	r0, r8
 8009ce8:	f000 f852 	bl	8009d90 <memcpy>
 8009cec:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009cf0:	f8c4 8000 	str.w	r8, [r4]
 8009cf4:	e7e9      	b.n	8009cca <__submore+0x48>

08009cf6 <memmove>:
 8009cf6:	4288      	cmp	r0, r1
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	eb01 0402 	add.w	r4, r1, r2
 8009cfe:	d902      	bls.n	8009d06 <memmove+0x10>
 8009d00:	4284      	cmp	r4, r0
 8009d02:	4623      	mov	r3, r4
 8009d04:	d807      	bhi.n	8009d16 <memmove+0x20>
 8009d06:	1e43      	subs	r3, r0, #1
 8009d08:	42a1      	cmp	r1, r4
 8009d0a:	d008      	beq.n	8009d1e <memmove+0x28>
 8009d0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d10:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d14:	e7f8      	b.n	8009d08 <memmove+0x12>
 8009d16:	4402      	add	r2, r0
 8009d18:	4601      	mov	r1, r0
 8009d1a:	428a      	cmp	r2, r1
 8009d1c:	d100      	bne.n	8009d20 <memmove+0x2a>
 8009d1e:	bd10      	pop	{r4, pc}
 8009d20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d24:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d28:	e7f7      	b.n	8009d1a <memmove+0x24>
	...

08009d2c <_fstat_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	4d07      	ldr	r5, [pc, #28]	@ (8009d4c <_fstat_r+0x20>)
 8009d30:	2300      	movs	r3, #0
 8009d32:	4604      	mov	r4, r0
 8009d34:	4608      	mov	r0, r1
 8009d36:	4611      	mov	r1, r2
 8009d38:	602b      	str	r3, [r5, #0]
 8009d3a:	f7f7 ffa1 	bl	8001c80 <_fstat>
 8009d3e:	1c43      	adds	r3, r0, #1
 8009d40:	d102      	bne.n	8009d48 <_fstat_r+0x1c>
 8009d42:	682b      	ldr	r3, [r5, #0]
 8009d44:	b103      	cbz	r3, 8009d48 <_fstat_r+0x1c>
 8009d46:	6023      	str	r3, [r4, #0]
 8009d48:	bd38      	pop	{r3, r4, r5, pc}
 8009d4a:	bf00      	nop
 8009d4c:	20000564 	.word	0x20000564

08009d50 <_isatty_r>:
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	4d06      	ldr	r5, [pc, #24]	@ (8009d6c <_isatty_r+0x1c>)
 8009d54:	2300      	movs	r3, #0
 8009d56:	4604      	mov	r4, r0
 8009d58:	4608      	mov	r0, r1
 8009d5a:	602b      	str	r3, [r5, #0]
 8009d5c:	f7f7 ffa0 	bl	8001ca0 <_isatty>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d102      	bne.n	8009d6a <_isatty_r+0x1a>
 8009d64:	682b      	ldr	r3, [r5, #0]
 8009d66:	b103      	cbz	r3, 8009d6a <_isatty_r+0x1a>
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	20000564 	.word	0x20000564

08009d70 <_sbrk_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	4d06      	ldr	r5, [pc, #24]	@ (8009d8c <_sbrk_r+0x1c>)
 8009d74:	2300      	movs	r3, #0
 8009d76:	4604      	mov	r4, r0
 8009d78:	4608      	mov	r0, r1
 8009d7a:	602b      	str	r3, [r5, #0]
 8009d7c:	f7f7 ffa8 	bl	8001cd0 <_sbrk>
 8009d80:	1c43      	adds	r3, r0, #1
 8009d82:	d102      	bne.n	8009d8a <_sbrk_r+0x1a>
 8009d84:	682b      	ldr	r3, [r5, #0]
 8009d86:	b103      	cbz	r3, 8009d8a <_sbrk_r+0x1a>
 8009d88:	6023      	str	r3, [r4, #0]
 8009d8a:	bd38      	pop	{r3, r4, r5, pc}
 8009d8c:	20000564 	.word	0x20000564

08009d90 <memcpy>:
 8009d90:	440a      	add	r2, r1
 8009d92:	4291      	cmp	r1, r2
 8009d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d98:	d100      	bne.n	8009d9c <memcpy+0xc>
 8009d9a:	4770      	bx	lr
 8009d9c:	b510      	push	{r4, lr}
 8009d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009da2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009da6:	4291      	cmp	r1, r2
 8009da8:	d1f9      	bne.n	8009d9e <memcpy+0xe>
 8009daa:	bd10      	pop	{r4, pc}
 8009dac:	0000      	movs	r0, r0
	...

08009db0 <nan>:
 8009db0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009db8 <nan+0x8>
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	00000000 	.word	0x00000000
 8009dbc:	7ff80000 	.word	0x7ff80000

08009dc0 <__assert_func>:
 8009dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009dc2:	4614      	mov	r4, r2
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	4b09      	ldr	r3, [pc, #36]	@ (8009dec <__assert_func+0x2c>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4605      	mov	r5, r0
 8009dcc:	68d8      	ldr	r0, [r3, #12]
 8009dce:	b954      	cbnz	r4, 8009de6 <__assert_func+0x26>
 8009dd0:	4b07      	ldr	r3, [pc, #28]	@ (8009df0 <__assert_func+0x30>)
 8009dd2:	461c      	mov	r4, r3
 8009dd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009dd8:	9100      	str	r1, [sp, #0]
 8009dda:	462b      	mov	r3, r5
 8009ddc:	4905      	ldr	r1, [pc, #20]	@ (8009df4 <__assert_func+0x34>)
 8009dde:	f000 fc19 	bl	800a614 <fiprintf>
 8009de2:	f000 fc29 	bl	800a638 <abort>
 8009de6:	4b04      	ldr	r3, [pc, #16]	@ (8009df8 <__assert_func+0x38>)
 8009de8:	e7f4      	b.n	8009dd4 <__assert_func+0x14>
 8009dea:	bf00      	nop
 8009dec:	20000030 	.word	0x20000030
 8009df0:	0800ac08 	.word	0x0800ac08
 8009df4:	0800abda 	.word	0x0800abda
 8009df8:	0800abcd 	.word	0x0800abcd

08009dfc <_calloc_r>:
 8009dfc:	b570      	push	{r4, r5, r6, lr}
 8009dfe:	fba1 5402 	umull	r5, r4, r1, r2
 8009e02:	b93c      	cbnz	r4, 8009e14 <_calloc_r+0x18>
 8009e04:	4629      	mov	r1, r5
 8009e06:	f7fd fc7f 	bl	8007708 <_malloc_r>
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	b928      	cbnz	r0, 8009e1a <_calloc_r+0x1e>
 8009e0e:	2600      	movs	r6, #0
 8009e10:	4630      	mov	r0, r6
 8009e12:	bd70      	pop	{r4, r5, r6, pc}
 8009e14:	220c      	movs	r2, #12
 8009e16:	6002      	str	r2, [r0, #0]
 8009e18:	e7f9      	b.n	8009e0e <_calloc_r+0x12>
 8009e1a:	462a      	mov	r2, r5
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	f7fc fd19 	bl	8006854 <memset>
 8009e22:	e7f5      	b.n	8009e10 <_calloc_r+0x14>

08009e24 <rshift>:
 8009e24:	6903      	ldr	r3, [r0, #16]
 8009e26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e32:	f100 0414 	add.w	r4, r0, #20
 8009e36:	dd45      	ble.n	8009ec4 <rshift+0xa0>
 8009e38:	f011 011f 	ands.w	r1, r1, #31
 8009e3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e44:	d10c      	bne.n	8009e60 <rshift+0x3c>
 8009e46:	f100 0710 	add.w	r7, r0, #16
 8009e4a:	4629      	mov	r1, r5
 8009e4c:	42b1      	cmp	r1, r6
 8009e4e:	d334      	bcc.n	8009eba <rshift+0x96>
 8009e50:	1a9b      	subs	r3, r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	1eea      	subs	r2, r5, #3
 8009e56:	4296      	cmp	r6, r2
 8009e58:	bf38      	it	cc
 8009e5a:	2300      	movcc	r3, #0
 8009e5c:	4423      	add	r3, r4
 8009e5e:	e015      	b.n	8009e8c <rshift+0x68>
 8009e60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009e64:	f1c1 0820 	rsb	r8, r1, #32
 8009e68:	40cf      	lsrs	r7, r1
 8009e6a:	f105 0e04 	add.w	lr, r5, #4
 8009e6e:	46a1      	mov	r9, r4
 8009e70:	4576      	cmp	r6, lr
 8009e72:	46f4      	mov	ip, lr
 8009e74:	d815      	bhi.n	8009ea2 <rshift+0x7e>
 8009e76:	1a9a      	subs	r2, r3, r2
 8009e78:	0092      	lsls	r2, r2, #2
 8009e7a:	3a04      	subs	r2, #4
 8009e7c:	3501      	adds	r5, #1
 8009e7e:	42ae      	cmp	r6, r5
 8009e80:	bf38      	it	cc
 8009e82:	2200      	movcc	r2, #0
 8009e84:	18a3      	adds	r3, r4, r2
 8009e86:	50a7      	str	r7, [r4, r2]
 8009e88:	b107      	cbz	r7, 8009e8c <rshift+0x68>
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	1b1a      	subs	r2, r3, r4
 8009e8e:	42a3      	cmp	r3, r4
 8009e90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009e94:	bf08      	it	eq
 8009e96:	2300      	moveq	r3, #0
 8009e98:	6102      	str	r2, [r0, #16]
 8009e9a:	bf08      	it	eq
 8009e9c:	6143      	streq	r3, [r0, #20]
 8009e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ea2:	f8dc c000 	ldr.w	ip, [ip]
 8009ea6:	fa0c fc08 	lsl.w	ip, ip, r8
 8009eaa:	ea4c 0707 	orr.w	r7, ip, r7
 8009eae:	f849 7b04 	str.w	r7, [r9], #4
 8009eb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009eb6:	40cf      	lsrs	r7, r1
 8009eb8:	e7da      	b.n	8009e70 <rshift+0x4c>
 8009eba:	f851 cb04 	ldr.w	ip, [r1], #4
 8009ebe:	f847 cf04 	str.w	ip, [r7, #4]!
 8009ec2:	e7c3      	b.n	8009e4c <rshift+0x28>
 8009ec4:	4623      	mov	r3, r4
 8009ec6:	e7e1      	b.n	8009e8c <rshift+0x68>

08009ec8 <__hexdig_fun>:
 8009ec8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009ecc:	2b09      	cmp	r3, #9
 8009ece:	d802      	bhi.n	8009ed6 <__hexdig_fun+0xe>
 8009ed0:	3820      	subs	r0, #32
 8009ed2:	b2c0      	uxtb	r0, r0
 8009ed4:	4770      	bx	lr
 8009ed6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009eda:	2b05      	cmp	r3, #5
 8009edc:	d801      	bhi.n	8009ee2 <__hexdig_fun+0x1a>
 8009ede:	3847      	subs	r0, #71	@ 0x47
 8009ee0:	e7f7      	b.n	8009ed2 <__hexdig_fun+0xa>
 8009ee2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009ee6:	2b05      	cmp	r3, #5
 8009ee8:	d801      	bhi.n	8009eee <__hexdig_fun+0x26>
 8009eea:	3827      	subs	r0, #39	@ 0x27
 8009eec:	e7f1      	b.n	8009ed2 <__hexdig_fun+0xa>
 8009eee:	2000      	movs	r0, #0
 8009ef0:	4770      	bx	lr
	...

08009ef4 <__gethex>:
 8009ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef8:	b085      	sub	sp, #20
 8009efa:	468a      	mov	sl, r1
 8009efc:	9302      	str	r3, [sp, #8]
 8009efe:	680b      	ldr	r3, [r1, #0]
 8009f00:	9001      	str	r0, [sp, #4]
 8009f02:	4690      	mov	r8, r2
 8009f04:	1c9c      	adds	r4, r3, #2
 8009f06:	46a1      	mov	r9, r4
 8009f08:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009f0c:	2830      	cmp	r0, #48	@ 0x30
 8009f0e:	d0fa      	beq.n	8009f06 <__gethex+0x12>
 8009f10:	eba9 0303 	sub.w	r3, r9, r3
 8009f14:	f1a3 0b02 	sub.w	fp, r3, #2
 8009f18:	f7ff ffd6 	bl	8009ec8 <__hexdig_fun>
 8009f1c:	4605      	mov	r5, r0
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d168      	bne.n	8009ff4 <__gethex+0x100>
 8009f22:	49a0      	ldr	r1, [pc, #640]	@ (800a1a4 <__gethex+0x2b0>)
 8009f24:	2201      	movs	r2, #1
 8009f26:	4648      	mov	r0, r9
 8009f28:	f7fc fc9c 	bl	8006864 <strncmp>
 8009f2c:	4607      	mov	r7, r0
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	d167      	bne.n	800a002 <__gethex+0x10e>
 8009f32:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009f36:	4626      	mov	r6, r4
 8009f38:	f7ff ffc6 	bl	8009ec8 <__hexdig_fun>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	d062      	beq.n	800a006 <__gethex+0x112>
 8009f40:	4623      	mov	r3, r4
 8009f42:	7818      	ldrb	r0, [r3, #0]
 8009f44:	2830      	cmp	r0, #48	@ 0x30
 8009f46:	4699      	mov	r9, r3
 8009f48:	f103 0301 	add.w	r3, r3, #1
 8009f4c:	d0f9      	beq.n	8009f42 <__gethex+0x4e>
 8009f4e:	f7ff ffbb 	bl	8009ec8 <__hexdig_fun>
 8009f52:	fab0 f580 	clz	r5, r0
 8009f56:	096d      	lsrs	r5, r5, #5
 8009f58:	f04f 0b01 	mov.w	fp, #1
 8009f5c:	464a      	mov	r2, r9
 8009f5e:	4616      	mov	r6, r2
 8009f60:	3201      	adds	r2, #1
 8009f62:	7830      	ldrb	r0, [r6, #0]
 8009f64:	f7ff ffb0 	bl	8009ec8 <__hexdig_fun>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	d1f8      	bne.n	8009f5e <__gethex+0x6a>
 8009f6c:	498d      	ldr	r1, [pc, #564]	@ (800a1a4 <__gethex+0x2b0>)
 8009f6e:	2201      	movs	r2, #1
 8009f70:	4630      	mov	r0, r6
 8009f72:	f7fc fc77 	bl	8006864 <strncmp>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d13f      	bne.n	8009ffa <__gethex+0x106>
 8009f7a:	b944      	cbnz	r4, 8009f8e <__gethex+0x9a>
 8009f7c:	1c74      	adds	r4, r6, #1
 8009f7e:	4622      	mov	r2, r4
 8009f80:	4616      	mov	r6, r2
 8009f82:	3201      	adds	r2, #1
 8009f84:	7830      	ldrb	r0, [r6, #0]
 8009f86:	f7ff ff9f 	bl	8009ec8 <__hexdig_fun>
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d1f8      	bne.n	8009f80 <__gethex+0x8c>
 8009f8e:	1ba4      	subs	r4, r4, r6
 8009f90:	00a7      	lsls	r7, r4, #2
 8009f92:	7833      	ldrb	r3, [r6, #0]
 8009f94:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009f98:	2b50      	cmp	r3, #80	@ 0x50
 8009f9a:	d13e      	bne.n	800a01a <__gethex+0x126>
 8009f9c:	7873      	ldrb	r3, [r6, #1]
 8009f9e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009fa0:	d033      	beq.n	800a00a <__gethex+0x116>
 8009fa2:	2b2d      	cmp	r3, #45	@ 0x2d
 8009fa4:	d034      	beq.n	800a010 <__gethex+0x11c>
 8009fa6:	1c71      	adds	r1, r6, #1
 8009fa8:	2400      	movs	r4, #0
 8009faa:	7808      	ldrb	r0, [r1, #0]
 8009fac:	f7ff ff8c 	bl	8009ec8 <__hexdig_fun>
 8009fb0:	1e43      	subs	r3, r0, #1
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	2b18      	cmp	r3, #24
 8009fb6:	d830      	bhi.n	800a01a <__gethex+0x126>
 8009fb8:	f1a0 0210 	sub.w	r2, r0, #16
 8009fbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009fc0:	f7ff ff82 	bl	8009ec8 <__hexdig_fun>
 8009fc4:	f100 3cff 	add.w	ip, r0, #4294967295
 8009fc8:	fa5f fc8c 	uxtb.w	ip, ip
 8009fcc:	f1bc 0f18 	cmp.w	ip, #24
 8009fd0:	f04f 030a 	mov.w	r3, #10
 8009fd4:	d91e      	bls.n	800a014 <__gethex+0x120>
 8009fd6:	b104      	cbz	r4, 8009fda <__gethex+0xe6>
 8009fd8:	4252      	negs	r2, r2
 8009fda:	4417      	add	r7, r2
 8009fdc:	f8ca 1000 	str.w	r1, [sl]
 8009fe0:	b1ed      	cbz	r5, 800a01e <__gethex+0x12a>
 8009fe2:	f1bb 0f00 	cmp.w	fp, #0
 8009fe6:	bf0c      	ite	eq
 8009fe8:	2506      	moveq	r5, #6
 8009fea:	2500      	movne	r5, #0
 8009fec:	4628      	mov	r0, r5
 8009fee:	b005      	add	sp, #20
 8009ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff4:	2500      	movs	r5, #0
 8009ff6:	462c      	mov	r4, r5
 8009ff8:	e7b0      	b.n	8009f5c <__gethex+0x68>
 8009ffa:	2c00      	cmp	r4, #0
 8009ffc:	d1c7      	bne.n	8009f8e <__gethex+0x9a>
 8009ffe:	4627      	mov	r7, r4
 800a000:	e7c7      	b.n	8009f92 <__gethex+0x9e>
 800a002:	464e      	mov	r6, r9
 800a004:	462f      	mov	r7, r5
 800a006:	2501      	movs	r5, #1
 800a008:	e7c3      	b.n	8009f92 <__gethex+0x9e>
 800a00a:	2400      	movs	r4, #0
 800a00c:	1cb1      	adds	r1, r6, #2
 800a00e:	e7cc      	b.n	8009faa <__gethex+0xb6>
 800a010:	2401      	movs	r4, #1
 800a012:	e7fb      	b.n	800a00c <__gethex+0x118>
 800a014:	fb03 0002 	mla	r0, r3, r2, r0
 800a018:	e7ce      	b.n	8009fb8 <__gethex+0xc4>
 800a01a:	4631      	mov	r1, r6
 800a01c:	e7de      	b.n	8009fdc <__gethex+0xe8>
 800a01e:	eba6 0309 	sub.w	r3, r6, r9
 800a022:	3b01      	subs	r3, #1
 800a024:	4629      	mov	r1, r5
 800a026:	2b07      	cmp	r3, #7
 800a028:	dc0a      	bgt.n	800a040 <__gethex+0x14c>
 800a02a:	9801      	ldr	r0, [sp, #4]
 800a02c:	f7fd fbf8 	bl	8007820 <_Balloc>
 800a030:	4604      	mov	r4, r0
 800a032:	b940      	cbnz	r0, 800a046 <__gethex+0x152>
 800a034:	4b5c      	ldr	r3, [pc, #368]	@ (800a1a8 <__gethex+0x2b4>)
 800a036:	4602      	mov	r2, r0
 800a038:	21e4      	movs	r1, #228	@ 0xe4
 800a03a:	485c      	ldr	r0, [pc, #368]	@ (800a1ac <__gethex+0x2b8>)
 800a03c:	f7ff fec0 	bl	8009dc0 <__assert_func>
 800a040:	3101      	adds	r1, #1
 800a042:	105b      	asrs	r3, r3, #1
 800a044:	e7ef      	b.n	800a026 <__gethex+0x132>
 800a046:	f100 0a14 	add.w	sl, r0, #20
 800a04a:	2300      	movs	r3, #0
 800a04c:	4655      	mov	r5, sl
 800a04e:	469b      	mov	fp, r3
 800a050:	45b1      	cmp	r9, r6
 800a052:	d337      	bcc.n	800a0c4 <__gethex+0x1d0>
 800a054:	f845 bb04 	str.w	fp, [r5], #4
 800a058:	eba5 050a 	sub.w	r5, r5, sl
 800a05c:	10ad      	asrs	r5, r5, #2
 800a05e:	6125      	str	r5, [r4, #16]
 800a060:	4658      	mov	r0, fp
 800a062:	f7fd fccf 	bl	8007a04 <__hi0bits>
 800a066:	016d      	lsls	r5, r5, #5
 800a068:	f8d8 6000 	ldr.w	r6, [r8]
 800a06c:	1a2d      	subs	r5, r5, r0
 800a06e:	42b5      	cmp	r5, r6
 800a070:	dd54      	ble.n	800a11c <__gethex+0x228>
 800a072:	1bad      	subs	r5, r5, r6
 800a074:	4629      	mov	r1, r5
 800a076:	4620      	mov	r0, r4
 800a078:	f7fe f863 	bl	8008142 <__any_on>
 800a07c:	4681      	mov	r9, r0
 800a07e:	b178      	cbz	r0, 800a0a0 <__gethex+0x1ac>
 800a080:	1e6b      	subs	r3, r5, #1
 800a082:	1159      	asrs	r1, r3, #5
 800a084:	f003 021f 	and.w	r2, r3, #31
 800a088:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a08c:	f04f 0901 	mov.w	r9, #1
 800a090:	fa09 f202 	lsl.w	r2, r9, r2
 800a094:	420a      	tst	r2, r1
 800a096:	d003      	beq.n	800a0a0 <__gethex+0x1ac>
 800a098:	454b      	cmp	r3, r9
 800a09a:	dc36      	bgt.n	800a10a <__gethex+0x216>
 800a09c:	f04f 0902 	mov.w	r9, #2
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f7ff febe 	bl	8009e24 <rshift>
 800a0a8:	442f      	add	r7, r5
 800a0aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0ae:	42bb      	cmp	r3, r7
 800a0b0:	da42      	bge.n	800a138 <__gethex+0x244>
 800a0b2:	9801      	ldr	r0, [sp, #4]
 800a0b4:	4621      	mov	r1, r4
 800a0b6:	f7fd fbf3 	bl	80078a0 <_Bfree>
 800a0ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0bc:	2300      	movs	r3, #0
 800a0be:	6013      	str	r3, [r2, #0]
 800a0c0:	25a3      	movs	r5, #163	@ 0xa3
 800a0c2:	e793      	b.n	8009fec <__gethex+0xf8>
 800a0c4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a0c8:	2a2e      	cmp	r2, #46	@ 0x2e
 800a0ca:	d012      	beq.n	800a0f2 <__gethex+0x1fe>
 800a0cc:	2b20      	cmp	r3, #32
 800a0ce:	d104      	bne.n	800a0da <__gethex+0x1e6>
 800a0d0:	f845 bb04 	str.w	fp, [r5], #4
 800a0d4:	f04f 0b00 	mov.w	fp, #0
 800a0d8:	465b      	mov	r3, fp
 800a0da:	7830      	ldrb	r0, [r6, #0]
 800a0dc:	9303      	str	r3, [sp, #12]
 800a0de:	f7ff fef3 	bl	8009ec8 <__hexdig_fun>
 800a0e2:	9b03      	ldr	r3, [sp, #12]
 800a0e4:	f000 000f 	and.w	r0, r0, #15
 800a0e8:	4098      	lsls	r0, r3
 800a0ea:	ea4b 0b00 	orr.w	fp, fp, r0
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	e7ae      	b.n	800a050 <__gethex+0x15c>
 800a0f2:	45b1      	cmp	r9, r6
 800a0f4:	d8ea      	bhi.n	800a0cc <__gethex+0x1d8>
 800a0f6:	492b      	ldr	r1, [pc, #172]	@ (800a1a4 <__gethex+0x2b0>)
 800a0f8:	9303      	str	r3, [sp, #12]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f7fc fbb1 	bl	8006864 <strncmp>
 800a102:	9b03      	ldr	r3, [sp, #12]
 800a104:	2800      	cmp	r0, #0
 800a106:	d1e1      	bne.n	800a0cc <__gethex+0x1d8>
 800a108:	e7a2      	b.n	800a050 <__gethex+0x15c>
 800a10a:	1ea9      	subs	r1, r5, #2
 800a10c:	4620      	mov	r0, r4
 800a10e:	f7fe f818 	bl	8008142 <__any_on>
 800a112:	2800      	cmp	r0, #0
 800a114:	d0c2      	beq.n	800a09c <__gethex+0x1a8>
 800a116:	f04f 0903 	mov.w	r9, #3
 800a11a:	e7c1      	b.n	800a0a0 <__gethex+0x1ac>
 800a11c:	da09      	bge.n	800a132 <__gethex+0x23e>
 800a11e:	1b75      	subs	r5, r6, r5
 800a120:	4621      	mov	r1, r4
 800a122:	9801      	ldr	r0, [sp, #4]
 800a124:	462a      	mov	r2, r5
 800a126:	f7fd fdd3 	bl	8007cd0 <__lshift>
 800a12a:	1b7f      	subs	r7, r7, r5
 800a12c:	4604      	mov	r4, r0
 800a12e:	f100 0a14 	add.w	sl, r0, #20
 800a132:	f04f 0900 	mov.w	r9, #0
 800a136:	e7b8      	b.n	800a0aa <__gethex+0x1b6>
 800a138:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a13c:	42bd      	cmp	r5, r7
 800a13e:	dd6f      	ble.n	800a220 <__gethex+0x32c>
 800a140:	1bed      	subs	r5, r5, r7
 800a142:	42ae      	cmp	r6, r5
 800a144:	dc34      	bgt.n	800a1b0 <__gethex+0x2bc>
 800a146:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d022      	beq.n	800a194 <__gethex+0x2a0>
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d024      	beq.n	800a19c <__gethex+0x2a8>
 800a152:	2b01      	cmp	r3, #1
 800a154:	d115      	bne.n	800a182 <__gethex+0x28e>
 800a156:	42ae      	cmp	r6, r5
 800a158:	d113      	bne.n	800a182 <__gethex+0x28e>
 800a15a:	2e01      	cmp	r6, #1
 800a15c:	d10b      	bne.n	800a176 <__gethex+0x282>
 800a15e:	9a02      	ldr	r2, [sp, #8]
 800a160:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a164:	6013      	str	r3, [r2, #0]
 800a166:	2301      	movs	r3, #1
 800a168:	6123      	str	r3, [r4, #16]
 800a16a:	f8ca 3000 	str.w	r3, [sl]
 800a16e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a170:	2562      	movs	r5, #98	@ 0x62
 800a172:	601c      	str	r4, [r3, #0]
 800a174:	e73a      	b.n	8009fec <__gethex+0xf8>
 800a176:	1e71      	subs	r1, r6, #1
 800a178:	4620      	mov	r0, r4
 800a17a:	f7fd ffe2 	bl	8008142 <__any_on>
 800a17e:	2800      	cmp	r0, #0
 800a180:	d1ed      	bne.n	800a15e <__gethex+0x26a>
 800a182:	9801      	ldr	r0, [sp, #4]
 800a184:	4621      	mov	r1, r4
 800a186:	f7fd fb8b 	bl	80078a0 <_Bfree>
 800a18a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a18c:	2300      	movs	r3, #0
 800a18e:	6013      	str	r3, [r2, #0]
 800a190:	2550      	movs	r5, #80	@ 0x50
 800a192:	e72b      	b.n	8009fec <__gethex+0xf8>
 800a194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1f3      	bne.n	800a182 <__gethex+0x28e>
 800a19a:	e7e0      	b.n	800a15e <__gethex+0x26a>
 800a19c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1dd      	bne.n	800a15e <__gethex+0x26a>
 800a1a2:	e7ee      	b.n	800a182 <__gethex+0x28e>
 800a1a4:	0800aa40 	.word	0x0800aa40
 800a1a8:	0800a8d3 	.word	0x0800a8d3
 800a1ac:	0800ac09 	.word	0x0800ac09
 800a1b0:	1e6f      	subs	r7, r5, #1
 800a1b2:	f1b9 0f00 	cmp.w	r9, #0
 800a1b6:	d130      	bne.n	800a21a <__gethex+0x326>
 800a1b8:	b127      	cbz	r7, 800a1c4 <__gethex+0x2d0>
 800a1ba:	4639      	mov	r1, r7
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f7fd ffc0 	bl	8008142 <__any_on>
 800a1c2:	4681      	mov	r9, r0
 800a1c4:	117a      	asrs	r2, r7, #5
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a1cc:	f007 071f 	and.w	r7, r7, #31
 800a1d0:	40bb      	lsls	r3, r7
 800a1d2:	4213      	tst	r3, r2
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	bf18      	it	ne
 800a1da:	f049 0902 	orrne.w	r9, r9, #2
 800a1de:	f7ff fe21 	bl	8009e24 <rshift>
 800a1e2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a1e6:	1b76      	subs	r6, r6, r5
 800a1e8:	2502      	movs	r5, #2
 800a1ea:	f1b9 0f00 	cmp.w	r9, #0
 800a1ee:	d047      	beq.n	800a280 <__gethex+0x38c>
 800a1f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d015      	beq.n	800a224 <__gethex+0x330>
 800a1f8:	2b03      	cmp	r3, #3
 800a1fa:	d017      	beq.n	800a22c <__gethex+0x338>
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d109      	bne.n	800a214 <__gethex+0x320>
 800a200:	f019 0f02 	tst.w	r9, #2
 800a204:	d006      	beq.n	800a214 <__gethex+0x320>
 800a206:	f8da 3000 	ldr.w	r3, [sl]
 800a20a:	ea49 0903 	orr.w	r9, r9, r3
 800a20e:	f019 0f01 	tst.w	r9, #1
 800a212:	d10e      	bne.n	800a232 <__gethex+0x33e>
 800a214:	f045 0510 	orr.w	r5, r5, #16
 800a218:	e032      	b.n	800a280 <__gethex+0x38c>
 800a21a:	f04f 0901 	mov.w	r9, #1
 800a21e:	e7d1      	b.n	800a1c4 <__gethex+0x2d0>
 800a220:	2501      	movs	r5, #1
 800a222:	e7e2      	b.n	800a1ea <__gethex+0x2f6>
 800a224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a226:	f1c3 0301 	rsb	r3, r3, #1
 800a22a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a22c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d0f0      	beq.n	800a214 <__gethex+0x320>
 800a232:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a236:	f104 0314 	add.w	r3, r4, #20
 800a23a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a23e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a242:	f04f 0c00 	mov.w	ip, #0
 800a246:	4618      	mov	r0, r3
 800a248:	f853 2b04 	ldr.w	r2, [r3], #4
 800a24c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a250:	d01b      	beq.n	800a28a <__gethex+0x396>
 800a252:	3201      	adds	r2, #1
 800a254:	6002      	str	r2, [r0, #0]
 800a256:	2d02      	cmp	r5, #2
 800a258:	f104 0314 	add.w	r3, r4, #20
 800a25c:	d13c      	bne.n	800a2d8 <__gethex+0x3e4>
 800a25e:	f8d8 2000 	ldr.w	r2, [r8]
 800a262:	3a01      	subs	r2, #1
 800a264:	42b2      	cmp	r2, r6
 800a266:	d109      	bne.n	800a27c <__gethex+0x388>
 800a268:	1171      	asrs	r1, r6, #5
 800a26a:	2201      	movs	r2, #1
 800a26c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a270:	f006 061f 	and.w	r6, r6, #31
 800a274:	fa02 f606 	lsl.w	r6, r2, r6
 800a278:	421e      	tst	r6, r3
 800a27a:	d13a      	bne.n	800a2f2 <__gethex+0x3fe>
 800a27c:	f045 0520 	orr.w	r5, r5, #32
 800a280:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a282:	601c      	str	r4, [r3, #0]
 800a284:	9b02      	ldr	r3, [sp, #8]
 800a286:	601f      	str	r7, [r3, #0]
 800a288:	e6b0      	b.n	8009fec <__gethex+0xf8>
 800a28a:	4299      	cmp	r1, r3
 800a28c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a290:	d8d9      	bhi.n	800a246 <__gethex+0x352>
 800a292:	68a3      	ldr	r3, [r4, #8]
 800a294:	459b      	cmp	fp, r3
 800a296:	db17      	blt.n	800a2c8 <__gethex+0x3d4>
 800a298:	6861      	ldr	r1, [r4, #4]
 800a29a:	9801      	ldr	r0, [sp, #4]
 800a29c:	3101      	adds	r1, #1
 800a29e:	f7fd fabf 	bl	8007820 <_Balloc>
 800a2a2:	4681      	mov	r9, r0
 800a2a4:	b918      	cbnz	r0, 800a2ae <__gethex+0x3ba>
 800a2a6:	4b1a      	ldr	r3, [pc, #104]	@ (800a310 <__gethex+0x41c>)
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	2184      	movs	r1, #132	@ 0x84
 800a2ac:	e6c5      	b.n	800a03a <__gethex+0x146>
 800a2ae:	6922      	ldr	r2, [r4, #16]
 800a2b0:	3202      	adds	r2, #2
 800a2b2:	f104 010c 	add.w	r1, r4, #12
 800a2b6:	0092      	lsls	r2, r2, #2
 800a2b8:	300c      	adds	r0, #12
 800a2ba:	f7ff fd69 	bl	8009d90 <memcpy>
 800a2be:	4621      	mov	r1, r4
 800a2c0:	9801      	ldr	r0, [sp, #4]
 800a2c2:	f7fd faed 	bl	80078a0 <_Bfree>
 800a2c6:	464c      	mov	r4, r9
 800a2c8:	6923      	ldr	r3, [r4, #16]
 800a2ca:	1c5a      	adds	r2, r3, #1
 800a2cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a2d0:	6122      	str	r2, [r4, #16]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	615a      	str	r2, [r3, #20]
 800a2d6:	e7be      	b.n	800a256 <__gethex+0x362>
 800a2d8:	6922      	ldr	r2, [r4, #16]
 800a2da:	455a      	cmp	r2, fp
 800a2dc:	dd0b      	ble.n	800a2f6 <__gethex+0x402>
 800a2de:	2101      	movs	r1, #1
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f7ff fd9f 	bl	8009e24 <rshift>
 800a2e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a2ea:	3701      	adds	r7, #1
 800a2ec:	42bb      	cmp	r3, r7
 800a2ee:	f6ff aee0 	blt.w	800a0b2 <__gethex+0x1be>
 800a2f2:	2501      	movs	r5, #1
 800a2f4:	e7c2      	b.n	800a27c <__gethex+0x388>
 800a2f6:	f016 061f 	ands.w	r6, r6, #31
 800a2fa:	d0fa      	beq.n	800a2f2 <__gethex+0x3fe>
 800a2fc:	4453      	add	r3, sl
 800a2fe:	f1c6 0620 	rsb	r6, r6, #32
 800a302:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a306:	f7fd fb7d 	bl	8007a04 <__hi0bits>
 800a30a:	42b0      	cmp	r0, r6
 800a30c:	dbe7      	blt.n	800a2de <__gethex+0x3ea>
 800a30e:	e7f0      	b.n	800a2f2 <__gethex+0x3fe>
 800a310:	0800a8d3 	.word	0x0800a8d3

0800a314 <L_shift>:
 800a314:	f1c2 0208 	rsb	r2, r2, #8
 800a318:	0092      	lsls	r2, r2, #2
 800a31a:	b570      	push	{r4, r5, r6, lr}
 800a31c:	f1c2 0620 	rsb	r6, r2, #32
 800a320:	6843      	ldr	r3, [r0, #4]
 800a322:	6804      	ldr	r4, [r0, #0]
 800a324:	fa03 f506 	lsl.w	r5, r3, r6
 800a328:	432c      	orrs	r4, r5
 800a32a:	40d3      	lsrs	r3, r2
 800a32c:	6004      	str	r4, [r0, #0]
 800a32e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a332:	4288      	cmp	r0, r1
 800a334:	d3f4      	bcc.n	800a320 <L_shift+0xc>
 800a336:	bd70      	pop	{r4, r5, r6, pc}

0800a338 <__match>:
 800a338:	b530      	push	{r4, r5, lr}
 800a33a:	6803      	ldr	r3, [r0, #0]
 800a33c:	3301      	adds	r3, #1
 800a33e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a342:	b914      	cbnz	r4, 800a34a <__match+0x12>
 800a344:	6003      	str	r3, [r0, #0]
 800a346:	2001      	movs	r0, #1
 800a348:	bd30      	pop	{r4, r5, pc}
 800a34a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a34e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a352:	2d19      	cmp	r5, #25
 800a354:	bf98      	it	ls
 800a356:	3220      	addls	r2, #32
 800a358:	42a2      	cmp	r2, r4
 800a35a:	d0f0      	beq.n	800a33e <__match+0x6>
 800a35c:	2000      	movs	r0, #0
 800a35e:	e7f3      	b.n	800a348 <__match+0x10>

0800a360 <__hexnan>:
 800a360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a364:	680b      	ldr	r3, [r1, #0]
 800a366:	6801      	ldr	r1, [r0, #0]
 800a368:	115e      	asrs	r6, r3, #5
 800a36a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a36e:	f013 031f 	ands.w	r3, r3, #31
 800a372:	b087      	sub	sp, #28
 800a374:	bf18      	it	ne
 800a376:	3604      	addne	r6, #4
 800a378:	2500      	movs	r5, #0
 800a37a:	1f37      	subs	r7, r6, #4
 800a37c:	4682      	mov	sl, r0
 800a37e:	4690      	mov	r8, r2
 800a380:	9301      	str	r3, [sp, #4]
 800a382:	f846 5c04 	str.w	r5, [r6, #-4]
 800a386:	46b9      	mov	r9, r7
 800a388:	463c      	mov	r4, r7
 800a38a:	9502      	str	r5, [sp, #8]
 800a38c:	46ab      	mov	fp, r5
 800a38e:	784a      	ldrb	r2, [r1, #1]
 800a390:	1c4b      	adds	r3, r1, #1
 800a392:	9303      	str	r3, [sp, #12]
 800a394:	b342      	cbz	r2, 800a3e8 <__hexnan+0x88>
 800a396:	4610      	mov	r0, r2
 800a398:	9105      	str	r1, [sp, #20]
 800a39a:	9204      	str	r2, [sp, #16]
 800a39c:	f7ff fd94 	bl	8009ec8 <__hexdig_fun>
 800a3a0:	2800      	cmp	r0, #0
 800a3a2:	d151      	bne.n	800a448 <__hexnan+0xe8>
 800a3a4:	9a04      	ldr	r2, [sp, #16]
 800a3a6:	9905      	ldr	r1, [sp, #20]
 800a3a8:	2a20      	cmp	r2, #32
 800a3aa:	d818      	bhi.n	800a3de <__hexnan+0x7e>
 800a3ac:	9b02      	ldr	r3, [sp, #8]
 800a3ae:	459b      	cmp	fp, r3
 800a3b0:	dd13      	ble.n	800a3da <__hexnan+0x7a>
 800a3b2:	454c      	cmp	r4, r9
 800a3b4:	d206      	bcs.n	800a3c4 <__hexnan+0x64>
 800a3b6:	2d07      	cmp	r5, #7
 800a3b8:	dc04      	bgt.n	800a3c4 <__hexnan+0x64>
 800a3ba:	462a      	mov	r2, r5
 800a3bc:	4649      	mov	r1, r9
 800a3be:	4620      	mov	r0, r4
 800a3c0:	f7ff ffa8 	bl	800a314 <L_shift>
 800a3c4:	4544      	cmp	r4, r8
 800a3c6:	d952      	bls.n	800a46e <__hexnan+0x10e>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f1a4 0904 	sub.w	r9, r4, #4
 800a3ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3d2:	f8cd b008 	str.w	fp, [sp, #8]
 800a3d6:	464c      	mov	r4, r9
 800a3d8:	461d      	mov	r5, r3
 800a3da:	9903      	ldr	r1, [sp, #12]
 800a3dc:	e7d7      	b.n	800a38e <__hexnan+0x2e>
 800a3de:	2a29      	cmp	r2, #41	@ 0x29
 800a3e0:	d157      	bne.n	800a492 <__hexnan+0x132>
 800a3e2:	3102      	adds	r1, #2
 800a3e4:	f8ca 1000 	str.w	r1, [sl]
 800a3e8:	f1bb 0f00 	cmp.w	fp, #0
 800a3ec:	d051      	beq.n	800a492 <__hexnan+0x132>
 800a3ee:	454c      	cmp	r4, r9
 800a3f0:	d206      	bcs.n	800a400 <__hexnan+0xa0>
 800a3f2:	2d07      	cmp	r5, #7
 800a3f4:	dc04      	bgt.n	800a400 <__hexnan+0xa0>
 800a3f6:	462a      	mov	r2, r5
 800a3f8:	4649      	mov	r1, r9
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f7ff ff8a 	bl	800a314 <L_shift>
 800a400:	4544      	cmp	r4, r8
 800a402:	d936      	bls.n	800a472 <__hexnan+0x112>
 800a404:	f1a8 0204 	sub.w	r2, r8, #4
 800a408:	4623      	mov	r3, r4
 800a40a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a40e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a412:	429f      	cmp	r7, r3
 800a414:	d2f9      	bcs.n	800a40a <__hexnan+0xaa>
 800a416:	1b3b      	subs	r3, r7, r4
 800a418:	f023 0303 	bic.w	r3, r3, #3
 800a41c:	3304      	adds	r3, #4
 800a41e:	3401      	adds	r4, #1
 800a420:	3e03      	subs	r6, #3
 800a422:	42b4      	cmp	r4, r6
 800a424:	bf88      	it	hi
 800a426:	2304      	movhi	r3, #4
 800a428:	4443      	add	r3, r8
 800a42a:	2200      	movs	r2, #0
 800a42c:	f843 2b04 	str.w	r2, [r3], #4
 800a430:	429f      	cmp	r7, r3
 800a432:	d2fb      	bcs.n	800a42c <__hexnan+0xcc>
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	b91b      	cbnz	r3, 800a440 <__hexnan+0xe0>
 800a438:	4547      	cmp	r7, r8
 800a43a:	d128      	bne.n	800a48e <__hexnan+0x12e>
 800a43c:	2301      	movs	r3, #1
 800a43e:	603b      	str	r3, [r7, #0]
 800a440:	2005      	movs	r0, #5
 800a442:	b007      	add	sp, #28
 800a444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a448:	3501      	adds	r5, #1
 800a44a:	2d08      	cmp	r5, #8
 800a44c:	f10b 0b01 	add.w	fp, fp, #1
 800a450:	dd06      	ble.n	800a460 <__hexnan+0x100>
 800a452:	4544      	cmp	r4, r8
 800a454:	d9c1      	bls.n	800a3da <__hexnan+0x7a>
 800a456:	2300      	movs	r3, #0
 800a458:	f844 3c04 	str.w	r3, [r4, #-4]
 800a45c:	2501      	movs	r5, #1
 800a45e:	3c04      	subs	r4, #4
 800a460:	6822      	ldr	r2, [r4, #0]
 800a462:	f000 000f 	and.w	r0, r0, #15
 800a466:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a46a:	6020      	str	r0, [r4, #0]
 800a46c:	e7b5      	b.n	800a3da <__hexnan+0x7a>
 800a46e:	2508      	movs	r5, #8
 800a470:	e7b3      	b.n	800a3da <__hexnan+0x7a>
 800a472:	9b01      	ldr	r3, [sp, #4]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d0dd      	beq.n	800a434 <__hexnan+0xd4>
 800a478:	f1c3 0320 	rsb	r3, r3, #32
 800a47c:	f04f 32ff 	mov.w	r2, #4294967295
 800a480:	40da      	lsrs	r2, r3
 800a482:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a486:	4013      	ands	r3, r2
 800a488:	f846 3c04 	str.w	r3, [r6, #-4]
 800a48c:	e7d2      	b.n	800a434 <__hexnan+0xd4>
 800a48e:	3f04      	subs	r7, #4
 800a490:	e7d0      	b.n	800a434 <__hexnan+0xd4>
 800a492:	2004      	movs	r0, #4
 800a494:	e7d5      	b.n	800a442 <__hexnan+0xe2>

0800a496 <__ascii_mbtowc>:
 800a496:	b082      	sub	sp, #8
 800a498:	b901      	cbnz	r1, 800a49c <__ascii_mbtowc+0x6>
 800a49a:	a901      	add	r1, sp, #4
 800a49c:	b142      	cbz	r2, 800a4b0 <__ascii_mbtowc+0x1a>
 800a49e:	b14b      	cbz	r3, 800a4b4 <__ascii_mbtowc+0x1e>
 800a4a0:	7813      	ldrb	r3, [r2, #0]
 800a4a2:	600b      	str	r3, [r1, #0]
 800a4a4:	7812      	ldrb	r2, [r2, #0]
 800a4a6:	1e10      	subs	r0, r2, #0
 800a4a8:	bf18      	it	ne
 800a4aa:	2001      	movne	r0, #1
 800a4ac:	b002      	add	sp, #8
 800a4ae:	4770      	bx	lr
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	e7fb      	b.n	800a4ac <__ascii_mbtowc+0x16>
 800a4b4:	f06f 0001 	mvn.w	r0, #1
 800a4b8:	e7f8      	b.n	800a4ac <__ascii_mbtowc+0x16>

0800a4ba <_realloc_r>:
 800a4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4be:	4680      	mov	r8, r0
 800a4c0:	4615      	mov	r5, r2
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	b921      	cbnz	r1, 800a4d0 <_realloc_r+0x16>
 800a4c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ca:	4611      	mov	r1, r2
 800a4cc:	f7fd b91c 	b.w	8007708 <_malloc_r>
 800a4d0:	b92a      	cbnz	r2, 800a4de <_realloc_r+0x24>
 800a4d2:	f7fd f8a5 	bl	8007620 <_free_r>
 800a4d6:	2400      	movs	r4, #0
 800a4d8:	4620      	mov	r0, r4
 800a4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4de:	f000 f8b2 	bl	800a646 <_malloc_usable_size_r>
 800a4e2:	4285      	cmp	r5, r0
 800a4e4:	4606      	mov	r6, r0
 800a4e6:	d802      	bhi.n	800a4ee <_realloc_r+0x34>
 800a4e8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a4ec:	d8f4      	bhi.n	800a4d8 <_realloc_r+0x1e>
 800a4ee:	4629      	mov	r1, r5
 800a4f0:	4640      	mov	r0, r8
 800a4f2:	f7fd f909 	bl	8007708 <_malloc_r>
 800a4f6:	4607      	mov	r7, r0
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	d0ec      	beq.n	800a4d6 <_realloc_r+0x1c>
 800a4fc:	42b5      	cmp	r5, r6
 800a4fe:	462a      	mov	r2, r5
 800a500:	4621      	mov	r1, r4
 800a502:	bf28      	it	cs
 800a504:	4632      	movcs	r2, r6
 800a506:	f7ff fc43 	bl	8009d90 <memcpy>
 800a50a:	4621      	mov	r1, r4
 800a50c:	4640      	mov	r0, r8
 800a50e:	f7fd f887 	bl	8007620 <_free_r>
 800a512:	463c      	mov	r4, r7
 800a514:	e7e0      	b.n	800a4d8 <_realloc_r+0x1e>
	...

0800a518 <_strtoul_l.constprop.0>:
 800a518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a51c:	4e34      	ldr	r6, [pc, #208]	@ (800a5f0 <_strtoul_l.constprop.0+0xd8>)
 800a51e:	4686      	mov	lr, r0
 800a520:	460d      	mov	r5, r1
 800a522:	4628      	mov	r0, r5
 800a524:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a528:	5d37      	ldrb	r7, [r6, r4]
 800a52a:	f017 0708 	ands.w	r7, r7, #8
 800a52e:	d1f8      	bne.n	800a522 <_strtoul_l.constprop.0+0xa>
 800a530:	2c2d      	cmp	r4, #45	@ 0x2d
 800a532:	d12f      	bne.n	800a594 <_strtoul_l.constprop.0+0x7c>
 800a534:	782c      	ldrb	r4, [r5, #0]
 800a536:	2701      	movs	r7, #1
 800a538:	1c85      	adds	r5, r0, #2
 800a53a:	f033 0010 	bics.w	r0, r3, #16
 800a53e:	d109      	bne.n	800a554 <_strtoul_l.constprop.0+0x3c>
 800a540:	2c30      	cmp	r4, #48	@ 0x30
 800a542:	d12c      	bne.n	800a59e <_strtoul_l.constprop.0+0x86>
 800a544:	7828      	ldrb	r0, [r5, #0]
 800a546:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a54a:	2858      	cmp	r0, #88	@ 0x58
 800a54c:	d127      	bne.n	800a59e <_strtoul_l.constprop.0+0x86>
 800a54e:	786c      	ldrb	r4, [r5, #1]
 800a550:	2310      	movs	r3, #16
 800a552:	3502      	adds	r5, #2
 800a554:	f04f 38ff 	mov.w	r8, #4294967295
 800a558:	2600      	movs	r6, #0
 800a55a:	fbb8 f8f3 	udiv	r8, r8, r3
 800a55e:	fb03 f908 	mul.w	r9, r3, r8
 800a562:	ea6f 0909 	mvn.w	r9, r9
 800a566:	4630      	mov	r0, r6
 800a568:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a56c:	f1bc 0f09 	cmp.w	ip, #9
 800a570:	d81c      	bhi.n	800a5ac <_strtoul_l.constprop.0+0x94>
 800a572:	4664      	mov	r4, ip
 800a574:	42a3      	cmp	r3, r4
 800a576:	dd2a      	ble.n	800a5ce <_strtoul_l.constprop.0+0xb6>
 800a578:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a57c:	d007      	beq.n	800a58e <_strtoul_l.constprop.0+0x76>
 800a57e:	4580      	cmp	r8, r0
 800a580:	d322      	bcc.n	800a5c8 <_strtoul_l.constprop.0+0xb0>
 800a582:	d101      	bne.n	800a588 <_strtoul_l.constprop.0+0x70>
 800a584:	45a1      	cmp	r9, r4
 800a586:	db1f      	blt.n	800a5c8 <_strtoul_l.constprop.0+0xb0>
 800a588:	fb00 4003 	mla	r0, r0, r3, r4
 800a58c:	2601      	movs	r6, #1
 800a58e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a592:	e7e9      	b.n	800a568 <_strtoul_l.constprop.0+0x50>
 800a594:	2c2b      	cmp	r4, #43	@ 0x2b
 800a596:	bf04      	itt	eq
 800a598:	782c      	ldrbeq	r4, [r5, #0]
 800a59a:	1c85      	addeq	r5, r0, #2
 800a59c:	e7cd      	b.n	800a53a <_strtoul_l.constprop.0+0x22>
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1d8      	bne.n	800a554 <_strtoul_l.constprop.0+0x3c>
 800a5a2:	2c30      	cmp	r4, #48	@ 0x30
 800a5a4:	bf0c      	ite	eq
 800a5a6:	2308      	moveq	r3, #8
 800a5a8:	230a      	movne	r3, #10
 800a5aa:	e7d3      	b.n	800a554 <_strtoul_l.constprop.0+0x3c>
 800a5ac:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a5b0:	f1bc 0f19 	cmp.w	ip, #25
 800a5b4:	d801      	bhi.n	800a5ba <_strtoul_l.constprop.0+0xa2>
 800a5b6:	3c37      	subs	r4, #55	@ 0x37
 800a5b8:	e7dc      	b.n	800a574 <_strtoul_l.constprop.0+0x5c>
 800a5ba:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a5be:	f1bc 0f19 	cmp.w	ip, #25
 800a5c2:	d804      	bhi.n	800a5ce <_strtoul_l.constprop.0+0xb6>
 800a5c4:	3c57      	subs	r4, #87	@ 0x57
 800a5c6:	e7d5      	b.n	800a574 <_strtoul_l.constprop.0+0x5c>
 800a5c8:	f04f 36ff 	mov.w	r6, #4294967295
 800a5cc:	e7df      	b.n	800a58e <_strtoul_l.constprop.0+0x76>
 800a5ce:	1c73      	adds	r3, r6, #1
 800a5d0:	d106      	bne.n	800a5e0 <_strtoul_l.constprop.0+0xc8>
 800a5d2:	2322      	movs	r3, #34	@ 0x22
 800a5d4:	f8ce 3000 	str.w	r3, [lr]
 800a5d8:	4630      	mov	r0, r6
 800a5da:	b932      	cbnz	r2, 800a5ea <_strtoul_l.constprop.0+0xd2>
 800a5dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5e0:	b107      	cbz	r7, 800a5e4 <_strtoul_l.constprop.0+0xcc>
 800a5e2:	4240      	negs	r0, r0
 800a5e4:	2a00      	cmp	r2, #0
 800a5e6:	d0f9      	beq.n	800a5dc <_strtoul_l.constprop.0+0xc4>
 800a5e8:	b106      	cbz	r6, 800a5ec <_strtoul_l.constprop.0+0xd4>
 800a5ea:	1e69      	subs	r1, r5, #1
 800a5ec:	6011      	str	r1, [r2, #0]
 800a5ee:	e7f5      	b.n	800a5dc <_strtoul_l.constprop.0+0xc4>
 800a5f0:	0800aa99 	.word	0x0800aa99

0800a5f4 <_strtoul_r>:
 800a5f4:	f7ff bf90 	b.w	800a518 <_strtoul_l.constprop.0>

0800a5f8 <__ascii_wctomb>:
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	4608      	mov	r0, r1
 800a5fc:	b141      	cbz	r1, 800a610 <__ascii_wctomb+0x18>
 800a5fe:	2aff      	cmp	r2, #255	@ 0xff
 800a600:	d904      	bls.n	800a60c <__ascii_wctomb+0x14>
 800a602:	228a      	movs	r2, #138	@ 0x8a
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	f04f 30ff 	mov.w	r0, #4294967295
 800a60a:	4770      	bx	lr
 800a60c:	700a      	strb	r2, [r1, #0]
 800a60e:	2001      	movs	r0, #1
 800a610:	4770      	bx	lr
	...

0800a614 <fiprintf>:
 800a614:	b40e      	push	{r1, r2, r3}
 800a616:	b503      	push	{r0, r1, lr}
 800a618:	4601      	mov	r1, r0
 800a61a:	ab03      	add	r3, sp, #12
 800a61c:	4805      	ldr	r0, [pc, #20]	@ (800a634 <fiprintf+0x20>)
 800a61e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a622:	6800      	ldr	r0, [r0, #0]
 800a624:	9301      	str	r3, [sp, #4]
 800a626:	f7fe ff7f 	bl	8009528 <_vfiprintf_r>
 800a62a:	b002      	add	sp, #8
 800a62c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a630:	b003      	add	sp, #12
 800a632:	4770      	bx	lr
 800a634:	20000030 	.word	0x20000030

0800a638 <abort>:
 800a638:	b508      	push	{r3, lr}
 800a63a:	2006      	movs	r0, #6
 800a63c:	f000 f834 	bl	800a6a8 <raise>
 800a640:	2001      	movs	r0, #1
 800a642:	f7f7 fae9 	bl	8001c18 <_exit>

0800a646 <_malloc_usable_size_r>:
 800a646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a64a:	1f18      	subs	r0, r3, #4
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	bfbc      	itt	lt
 800a650:	580b      	ldrlt	r3, [r1, r0]
 800a652:	18c0      	addlt	r0, r0, r3
 800a654:	4770      	bx	lr

0800a656 <_raise_r>:
 800a656:	291f      	cmp	r1, #31
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4605      	mov	r5, r0
 800a65c:	460c      	mov	r4, r1
 800a65e:	d904      	bls.n	800a66a <_raise_r+0x14>
 800a660:	2316      	movs	r3, #22
 800a662:	6003      	str	r3, [r0, #0]
 800a664:	f04f 30ff 	mov.w	r0, #4294967295
 800a668:	bd38      	pop	{r3, r4, r5, pc}
 800a66a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a66c:	b112      	cbz	r2, 800a674 <_raise_r+0x1e>
 800a66e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a672:	b94b      	cbnz	r3, 800a688 <_raise_r+0x32>
 800a674:	4628      	mov	r0, r5
 800a676:	f000 f831 	bl	800a6dc <_getpid_r>
 800a67a:	4622      	mov	r2, r4
 800a67c:	4601      	mov	r1, r0
 800a67e:	4628      	mov	r0, r5
 800a680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a684:	f000 b818 	b.w	800a6b8 <_kill_r>
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d00a      	beq.n	800a6a2 <_raise_r+0x4c>
 800a68c:	1c59      	adds	r1, r3, #1
 800a68e:	d103      	bne.n	800a698 <_raise_r+0x42>
 800a690:	2316      	movs	r3, #22
 800a692:	6003      	str	r3, [r0, #0]
 800a694:	2001      	movs	r0, #1
 800a696:	e7e7      	b.n	800a668 <_raise_r+0x12>
 800a698:	2100      	movs	r1, #0
 800a69a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a69e:	4620      	mov	r0, r4
 800a6a0:	4798      	blx	r3
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	e7e0      	b.n	800a668 <_raise_r+0x12>
	...

0800a6a8 <raise>:
 800a6a8:	4b02      	ldr	r3, [pc, #8]	@ (800a6b4 <raise+0xc>)
 800a6aa:	4601      	mov	r1, r0
 800a6ac:	6818      	ldr	r0, [r3, #0]
 800a6ae:	f7ff bfd2 	b.w	800a656 <_raise_r>
 800a6b2:	bf00      	nop
 800a6b4:	20000030 	.word	0x20000030

0800a6b8 <_kill_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	4d07      	ldr	r5, [pc, #28]	@ (800a6d8 <_kill_r+0x20>)
 800a6bc:	2300      	movs	r3, #0
 800a6be:	4604      	mov	r4, r0
 800a6c0:	4608      	mov	r0, r1
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	602b      	str	r3, [r5, #0]
 800a6c6:	f7f7 fa97 	bl	8001bf8 <_kill>
 800a6ca:	1c43      	adds	r3, r0, #1
 800a6cc:	d102      	bne.n	800a6d4 <_kill_r+0x1c>
 800a6ce:	682b      	ldr	r3, [r5, #0]
 800a6d0:	b103      	cbz	r3, 800a6d4 <_kill_r+0x1c>
 800a6d2:	6023      	str	r3, [r4, #0]
 800a6d4:	bd38      	pop	{r3, r4, r5, pc}
 800a6d6:	bf00      	nop
 800a6d8:	20000564 	.word	0x20000564

0800a6dc <_getpid_r>:
 800a6dc:	f7f7 ba84 	b.w	8001be8 <_getpid>

0800a6e0 <_init>:
 800a6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e2:	bf00      	nop
 800a6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e6:	bc08      	pop	{r3}
 800a6e8:	469e      	mov	lr, r3
 800a6ea:	4770      	bx	lr

0800a6ec <_fini>:
 800a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ee:	bf00      	nop
 800a6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6f2:	bc08      	pop	{r3}
 800a6f4:	469e      	mov	lr, r3
 800a6f6:	4770      	bx	lr
