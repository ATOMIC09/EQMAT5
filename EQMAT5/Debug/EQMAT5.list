
EQMAT5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043ac  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004534  08004534  00005534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004554  08004554  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004554  08004554  00005554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800455c  0800455c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800455c  0800455c  0000555c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004560  08004560  00005560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004564  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000001d8  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001e4  200001e4  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aaf9  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001da4  00000000  00000000  00010b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d8  00000000  00000000  000128e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ca  00000000  00000000  000131b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dff8  00000000  00000000  00013882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bf07  00000000  00000000  0003187a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b60c9  00000000  00000000  0003d781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f384a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002348  00000000  00000000  000f3890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  000f5bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800451c 	.word	0x0800451c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800451c 	.word	0x0800451c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fcf4 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f854 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f93e 	bl	8000744 <MX_GPIO_Init>
  MX_DMA_Init();
 80004c8:	f000 f914 	bl	80006f4 <MX_DMA_Init>
  MX_I2S2_Init();
 80004cc:	f000 f8b8 	bl	8000640 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80004d0:	f000 f8e6 	bl	80006a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, 4);
 80004d4:	2304      	movs	r3, #4
 80004d6:	4a12      	ldr	r2, [pc, #72]	@ (8000520 <main+0x68>)
 80004d8:	4912      	ldr	r1, [pc, #72]	@ (8000524 <main+0x6c>)
 80004da:	4813      	ldr	r0, [pc, #76]	@ (8000528 <main+0x70>)
 80004dc:	f001 fe66 	bl	80021ac <HAL_I2SEx_TransmitReceive_DMA>


  //left-channel, High-Pass, 1kHz, fs=96kHz, q=0.7
  l_a0 = 0.9543457485325094f;
 80004e0:	4b12      	ldr	r3, [pc, #72]	@ (800052c <main+0x74>)
 80004e2:	4a13      	ldr	r2, [pc, #76]	@ (8000530 <main+0x78>)
 80004e4:	601a      	str	r2, [r3, #0]
  l_a1 = -1.9086914970650188f;
 80004e6:	4b13      	ldr	r3, [pc, #76]	@ (8000534 <main+0x7c>)
 80004e8:	4a13      	ldr	r2, [pc, #76]	@ (8000538 <main+0x80>)
 80004ea:	601a      	str	r2, [r3, #0]
  l_a2 = 0.9543457485325094f;
 80004ec:	4b13      	ldr	r3, [pc, #76]	@ (800053c <main+0x84>)
 80004ee:	4a10      	ldr	r2, [pc, #64]	@ (8000530 <main+0x78>)
 80004f0:	601a      	str	r2, [r3, #0]
  l_b1 = -1.9066459797557103f;
 80004f2:	4b13      	ldr	r3, [pc, #76]	@ (8000540 <main+0x88>)
 80004f4:	4a13      	ldr	r2, [pc, #76]	@ (8000544 <main+0x8c>)
 80004f6:	601a      	str	r2, [r3, #0]
  l_b2 = 0.9107370143743273f;
 80004f8:	4b13      	ldr	r3, [pc, #76]	@ (8000548 <main+0x90>)
 80004fa:	4a14      	ldr	r2, [pc, #80]	@ (800054c <main+0x94>)
 80004fc:	601a      	str	r2, [r3, #0]

  //right-channel, Low-Pass, 1kHz, fs)96 kHz, q=0.7
  r_a0 = 0.0010227586546542474f;
 80004fe:	4b14      	ldr	r3, [pc, #80]	@ (8000550 <main+0x98>)
 8000500:	4a14      	ldr	r2, [pc, #80]	@ (8000554 <main+0x9c>)
 8000502:	601a      	str	r2, [r3, #0]
  r_a1 = 0.002045517309308495f;
 8000504:	4b14      	ldr	r3, [pc, #80]	@ (8000558 <main+0xa0>)
 8000506:	4a15      	ldr	r2, [pc, #84]	@ (800055c <main+0xa4>)
 8000508:	601a      	str	r2, [r3, #0]
  r_a2 = 0.0010227586546542474f;
 800050a:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <main+0xa8>)
 800050c:	4a11      	ldr	r2, [pc, #68]	@ (8000554 <main+0x9c>)
 800050e:	601a      	str	r2, [r3, #0]
  r_b1 = -1.9066459797557103f;
 8000510:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <main+0xac>)
 8000512:	4a0c      	ldr	r2, [pc, #48]	@ (8000544 <main+0x8c>)
 8000514:	601a      	str	r2, [r3, #0]
  r_b2 = 0.9107370143743273f;
 8000516:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <main+0xb0>)
 8000518:	4a0c      	ldr	r2, [pc, #48]	@ (800054c <main+0x94>)
 800051a:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <main+0x64>
 8000520:	200001c0 	.word	0x200001c0
 8000524:	200001d0 	.word	0x200001d0
 8000528:	20000028 	.word	0x20000028
 800052c:	20000178 	.word	0x20000178
 8000530:	3f745001 	.word	0x3f745001
 8000534:	2000017c 	.word	0x2000017c
 8000538:	bff45001 	.word	0xbff45001
 800053c:	20000180 	.word	0x20000180
 8000540:	20000184 	.word	0x20000184
 8000544:	bff40cfa 	.word	0xbff40cfa
 8000548:	20000188 	.word	0x20000188
 800054c:	3f692610 	.word	0x3f692610
 8000550:	2000019c 	.word	0x2000019c
 8000554:	3a860e16 	.word	0x3a860e16
 8000558:	200001a0 	.word	0x200001a0
 800055c:	3b060e16 	.word	0x3b060e16
 8000560:	200001a4 	.word	0x200001a4
 8000564:	200001a8 	.word	0x200001a8
 8000568:	200001ac 	.word	0x200001ac

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	@ 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	@ 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 ffa2 	bl	80044c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b28      	ldr	r3, [pc, #160]	@ (8000638 <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	4a27      	ldr	r2, [pc, #156]	@ (8000638 <SystemClock_Config+0xcc>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a0:	4b25      	ldr	r3, [pc, #148]	@ (8000638 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b22      	ldr	r3, [pc, #136]	@ (800063c <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a21      	ldr	r2, [pc, #132]	@ (800063c <SystemClock_Config+0xd0>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1f      	ldr	r3, [pc, #124]	@ (800063c <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005dc:	2308      	movs	r3, #8
 80005de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ea:	2304      	movs	r3, #4
 80005ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fa6e 	bl	8002ad4 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005fe:	f000 fa4f 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000612:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000614:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000618:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2105      	movs	r1, #5
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fccf 	bl	8002fc4 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800062c:	f000 fa38 	bl	8000aa0 <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3750      	adds	r7, #80	@ 0x50
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000644:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <MX_I2S2_Init+0x54>)
 8000646:	4a14      	ldr	r2, [pc, #80]	@ (8000698 <MX_I2S2_Init+0x58>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <MX_I2S2_Init+0x54>)
 800064c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000650:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000652:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <MX_I2S2_Init+0x54>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000658:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_I2S2_Init+0x54>)
 800065a:	2203      	movs	r2, #3
 800065c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800065e:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <MX_I2S2_Init+0x54>)
 8000660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000664:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <MX_I2S2_Init+0x54>)
 8000668:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <MX_I2S2_Init+0x5c>)
 800066a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_I2S2_Init+0x54>)
 800066e:	2200      	movs	r2, #0
 8000670:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000672:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <MX_I2S2_Init+0x54>)
 8000674:	2200      	movs	r2, #0
 8000676:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_I2S2_Init+0x54>)
 800067a:	2201      	movs	r2, #1
 800067c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	@ (8000694 <MX_I2S2_Init+0x54>)
 8000680:	f001 fb4e 	bl	8001d20 <HAL_I2S_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800068a:	f000 fa09 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000028 	.word	0x20000028
 8000698:	40003800 	.word	0x40003800
 800069c:	00017700 	.word	0x00017700

080006a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <MX_USART1_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006d8:	f002 ffd6 	bl	8003688 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f9dd 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000130 	.word	0x20000130
 80006f0:	40011000 	.word	0x40011000

080006f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <MX_DMA_Init+0x4c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a0f      	ldr	r2, [pc, #60]	@ (8000740 <MX_DMA_Init+0x4c>)
 8000704:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <MX_DMA_Init+0x4c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	200e      	movs	r0, #14
 800071c:	f000 fd11 	bl	8001142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000720:	200e      	movs	r0, #14
 8000722:	f000 fd2a 	bl	800117a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	200f      	movs	r0, #15
 800072c:	f000 fd09 	bl	8001142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000730:	200f      	movs	r0, #15
 8000732:	f000 fd22 	bl	800117a <HAL_NVIC_EnableIRQ>

}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	@ 0x28
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	4b26      	ldr	r3, [pc, #152]	@ (80007f8 <MX_GPIO_Init+0xb4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a25      	ldr	r2, [pc, #148]	@ (80007f8 <MX_GPIO_Init+0xb4>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <MX_GPIO_Init+0xb4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <MX_GPIO_Init+0xb4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a1e      	ldr	r2, [pc, #120]	@ (80007f8 <MX_GPIO_Init+0xb4>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <MX_GPIO_Init+0xb4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <MX_GPIO_Init+0xb4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a17      	ldr	r2, [pc, #92]	@ (80007f8 <MX_GPIO_Init+0xb4>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <MX_GPIO_Init+0xb4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_GPIO_Init+0xb4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a10      	ldr	r2, [pc, #64]	@ (80007f8 <MX_GPIO_Init+0xb4>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_GPIO_Init+0xb4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2104      	movs	r1, #4
 80007ce:	480b      	ldr	r0, [pc, #44]	@ (80007fc <MX_GPIO_Init+0xb8>)
 80007d0:	f001 fa8c 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007d4:	2304      	movs	r3, #4
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	4804      	ldr	r0, [pc, #16]	@ (80007fc <MX_GPIO_Init+0xb8>)
 80007ec:	f001 f8e2 	bl	80019b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	@ 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020400 	.word	0x40020400

08000800 <Calc_IIR_Left>:

/* USER CODE BEGIN 4 */

int Calc_IIR_Left (int inSample) {
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	float inSampleF = (float)inSample;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	ee07 3a90 	vmov	s15, r3
 800080e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000812:	edc7 7a03 	vstr	s15, [r7, #12]
	float outSampleF =
			l_a0 * inSampleF
 8000816:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <Calc_IIR_Left+0xac>)
 8000818:	ed93 7a00 	vldr	s14, [r3]
 800081c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000820:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ l_a1 * lin_z1
 8000824:	4b22      	ldr	r3, [pc, #136]	@ (80008b0 <Calc_IIR_Left+0xb0>)
 8000826:	edd3 6a00 	vldr	s13, [r3]
 800082a:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <Calc_IIR_Left+0xb4>)
 800082c:	edd3 7a00 	vldr	s15, [r3]
 8000830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000834:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ l_a2 * lin_z2
 8000838:	4b1f      	ldr	r3, [pc, #124]	@ (80008b8 <Calc_IIR_Left+0xb8>)
 800083a:	edd3 6a00 	vldr	s13, [r3]
 800083e:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <Calc_IIR_Left+0xbc>)
 8000840:	edd3 7a00 	vldr	s15, [r3]
 8000844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000848:	ee37 7a27 	vadd.f32	s14, s14, s15
			- l_b1 * lout_z1
 800084c:	4b1c      	ldr	r3, [pc, #112]	@ (80008c0 <Calc_IIR_Left+0xc0>)
 800084e:	edd3 6a00 	vldr	s13, [r3]
 8000852:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <Calc_IIR_Left+0xc4>)
 8000854:	edd3 7a00 	vldr	s15, [r3]
 8000858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800085c:	ee37 7a67 	vsub.f32	s14, s14, s15
			- l_b2 * lout_z2;
 8000860:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <Calc_IIR_Left+0xc8>)
 8000862:	edd3 6a00 	vldr	s13, [r3]
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <Calc_IIR_Left+0xcc>)
 8000868:	edd3 7a00 	vldr	s15, [r3]
 800086c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float outSampleF =
 8000870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000874:	edc7 7a02 	vstr	s15, [r7, #8]
	lin_z2 = lin_z1;
 8000878:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <Calc_IIR_Left+0xb4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0f      	ldr	r2, [pc, #60]	@ (80008bc <Calc_IIR_Left+0xbc>)
 800087e:	6013      	str	r3, [r2, #0]
	lin_z1 = inSampleF;
 8000880:	4a0c      	ldr	r2, [pc, #48]	@ (80008b4 <Calc_IIR_Left+0xb4>)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	6013      	str	r3, [r2, #0]
	lout_z2 = lout_z1;
 8000886:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <Calc_IIR_Left+0xc4>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a10      	ldr	r2, [pc, #64]	@ (80008cc <Calc_IIR_Left+0xcc>)
 800088c:	6013      	str	r3, [r2, #0]
	lout_z1 = outSampleF;
 800088e:	4a0d      	ldr	r2, [pc, #52]	@ (80008c4 <Calc_IIR_Left+0xc4>)
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	6013      	str	r3, [r2, #0]

	return (int) outSampleF;
 8000894:	edd7 7a02 	vldr	s15, [r7, #8]
 8000898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800089c:	ee17 3a90 	vmov	r3, s15
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	20000178 	.word	0x20000178
 80008b0:	2000017c 	.word	0x2000017c
 80008b4:	2000018c 	.word	0x2000018c
 80008b8:	20000180 	.word	0x20000180
 80008bc:	20000190 	.word	0x20000190
 80008c0:	20000184 	.word	0x20000184
 80008c4:	20000194 	.word	0x20000194
 80008c8:	20000188 	.word	0x20000188
 80008cc:	20000198 	.word	0x20000198

080008d0 <Calc_IIR_Right>:

int Calc_IIR_Right (int inSample) {
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	float inSampleF = (float)inSample;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	ee07 3a90 	vmov	s15, r3
 80008de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008e2:	edc7 7a03 	vstr	s15, [r7, #12]
	float outSampleF =
			r_a0 * inSampleF
 80008e6:	4b25      	ldr	r3, [pc, #148]	@ (800097c <Calc_IIR_Right+0xac>)
 80008e8:	ed93 7a00 	vldr	s14, [r3]
 80008ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80008f0:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ r_a1 * rin_z1
 80008f4:	4b22      	ldr	r3, [pc, #136]	@ (8000980 <Calc_IIR_Right+0xb0>)
 80008f6:	edd3 6a00 	vldr	s13, [r3]
 80008fa:	4b22      	ldr	r3, [pc, #136]	@ (8000984 <Calc_IIR_Right+0xb4>)
 80008fc:	edd3 7a00 	vldr	s15, [r3]
 8000900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000904:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ r_a2 * rin_z2
 8000908:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <Calc_IIR_Right+0xb8>)
 800090a:	edd3 6a00 	vldr	s13, [r3]
 800090e:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <Calc_IIR_Right+0xbc>)
 8000910:	edd3 7a00 	vldr	s15, [r3]
 8000914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000918:	ee37 7a27 	vadd.f32	s14, s14, s15
			- r_b1 * rout_z1
 800091c:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <Calc_IIR_Right+0xc0>)
 800091e:	edd3 6a00 	vldr	s13, [r3]
 8000922:	4b1c      	ldr	r3, [pc, #112]	@ (8000994 <Calc_IIR_Right+0xc4>)
 8000924:	edd3 7a00 	vldr	s15, [r3]
 8000928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800092c:	ee37 7a67 	vsub.f32	s14, s14, s15
			- r_b2 * rout_z2;
 8000930:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <Calc_IIR_Right+0xc8>)
 8000932:	edd3 6a00 	vldr	s13, [r3]
 8000936:	4b19      	ldr	r3, [pc, #100]	@ (800099c <Calc_IIR_Right+0xcc>)
 8000938:	edd3 7a00 	vldr	s15, [r3]
 800093c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float outSampleF =
 8000940:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000944:	edc7 7a02 	vstr	s15, [r7, #8]
	rin_z2 = rin_z1;
 8000948:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <Calc_IIR_Right+0xb4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0f      	ldr	r2, [pc, #60]	@ (800098c <Calc_IIR_Right+0xbc>)
 800094e:	6013      	str	r3, [r2, #0]
	rin_z1 = inSampleF;
 8000950:	4a0c      	ldr	r2, [pc, #48]	@ (8000984 <Calc_IIR_Right+0xb4>)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	6013      	str	r3, [r2, #0]
	rout_z2 = rout_z1;
 8000956:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <Calc_IIR_Right+0xc4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a10      	ldr	r2, [pc, #64]	@ (800099c <Calc_IIR_Right+0xcc>)
 800095c:	6013      	str	r3, [r2, #0]
	rout_z1 = outSampleF;
 800095e:	4a0d      	ldr	r2, [pc, #52]	@ (8000994 <Calc_IIR_Right+0xc4>)
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	6013      	str	r3, [r2, #0]

	return (int) outSampleF;
 8000964:	edd7 7a02 	vldr	s15, [r7, #8]
 8000968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800096c:	ee17 3a90 	vmov	r3, s15
}
 8000970:	4618      	mov	r0, r3
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	2000019c 	.word	0x2000019c
 8000980:	200001a0 	.word	0x200001a0
 8000984:	200001b0 	.word	0x200001b0
 8000988:	200001a4 	.word	0x200001a4
 800098c:	200001b4 	.word	0x200001b4
 8000990:	200001a8 	.word	0x200001a8
 8000994:	200001b8 	.word	0x200001b8
 8000998:	200001ac 	.word	0x200001ac
 800099c:	200001bc 	.word	0x200001bc

080009a0 <HAL_I2SEx_TxRxHalfCpltCallback>:

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[0]<<16)|rxBuf[1];
 80009a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	041b      	lsls	r3, r3, #16
 80009ae:	4a1a      	ldr	r2, [pc, #104]	@ (8000a18 <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 80009b0:	8852      	ldrh	r2, [r2, #2]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
	int rSample = (int) (rxBuf[2]<<16)|rxBuf[3];
 80009b6:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 80009b8:	889b      	ldrh	r3, [r3, #4]
 80009ba:	041b      	lsls	r3, r3, #16
 80009bc:	4a16      	ldr	r2, [pc, #88]	@ (8000a18 <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 80009be:	88d2      	ldrh	r2, [r2, #6]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]

	// divide by 2 (rightshift) -> -3dB per sample
	lSample = lSample>>1;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	105b      	asrs	r3, r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
	rSample = rSample>>1;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	105b      	asrs	r3, r3, #1
 80009ce:	60bb      	str	r3, [r7, #8]

	//sum to mono
	lSample = rSample + lSample;
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	4413      	add	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]
	rSample = lSample;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	60bb      	str	r3, [r7, #8]

	//run HP on left channel and LP on right channel
	lSample = Calc_IIR_Left(lSample);
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f7ff ff0f 	bl	8000800 <Calc_IIR_Left>
 80009e2:	60f8      	str	r0, [r7, #12]
	rSample = Calc_IIR_Right(rSample);
 80009e4:	68b8      	ldr	r0, [r7, #8]
 80009e6:	f7ff ff73 	bl	80008d0 <Calc_IIR_Right>
 80009ea:	60b8      	str	r0, [r7, #8]

	//restore to buffer
	txBuf[0] = (lSample>>16)&0xFFFF;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	0c1b      	lsrs	r3, r3, #16
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 80009f4:	801a      	strh	r2, [r3, #0]
	txBuf[1] = lSample&0xFFFF;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 80009fc:	805a      	strh	r2, [r3, #2]
	txBuf[2] = (rSample>>16)&0xFFFF;
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	0c1b      	lsrs	r3, r3, #16
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 8000a06:	809a      	strh	r2, [r3, #4]
	txBuf[3] = rSample&0xFFFF;
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	4b03      	ldr	r3, [pc, #12]	@ (8000a1c <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 8000a0e:	80da      	strh	r2, [r3, #6]
}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200001c0 	.word	0x200001c0
 8000a1c:	200001d0 	.word	0x200001d0

08000a20 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[4]<<16)|rxBuf[5];
 8000a28:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <HAL_I2SEx_TxRxCpltCallback+0x78>)
 8000a2a:	891b      	ldrh	r3, [r3, #8]
 8000a2c:	041b      	lsls	r3, r3, #16
 8000a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8000a98 <HAL_I2SEx_TxRxCpltCallback+0x78>)
 8000a30:	8952      	ldrh	r2, [r2, #10]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
	int rSample = (int) (rxBuf[6]<<16)|rxBuf[7];
 8000a36:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <HAL_I2SEx_TxRxCpltCallback+0x78>)
 8000a38:	899b      	ldrh	r3, [r3, #12]
 8000a3a:	041b      	lsls	r3, r3, #16
 8000a3c:	4a16      	ldr	r2, [pc, #88]	@ (8000a98 <HAL_I2SEx_TxRxCpltCallback+0x78>)
 8000a3e:	89d2      	ldrh	r2, [r2, #14]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]

	// divide by 2 (rightshift) -> -3dB per sample
	lSample = lSample>>1;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	105b      	asrs	r3, r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
	rSample = rSample>>1;
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	105b      	asrs	r3, r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]

	//sum to mono
	lSample = rSample + lSample;
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	4413      	add	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]
	rSample = lSample;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	60bb      	str	r3, [r7, #8]

	//run HP on left channel and LP on right channel
	lSample = Calc_IIR_Left(lSample);
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f7ff fecf 	bl	8000800 <Calc_IIR_Left>
 8000a62:	60f8      	str	r0, [r7, #12]
	rSample = Calc_IIR_Right(rSample);
 8000a64:	68b8      	ldr	r0, [r7, #8]
 8000a66:	f7ff ff33 	bl	80008d0 <Calc_IIR_Right>
 8000a6a:	60b8      	str	r0, [r7, #8]

	//restore to buffer
	txBuf[4] = (lSample>>16)&0xFFFF;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	0c1b      	lsrs	r3, r3, #16
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 8000a74:	811a      	strh	r2, [r3, #8]
	txBuf[5] = lSample&0xFFFF;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 8000a7c:	815a      	strh	r2, [r3, #10]
	txBuf[6] = (rSample>>16)&0xFFFF;
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	0c1b      	lsrs	r3, r3, #16
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 8000a86:	819a      	strh	r2, [r3, #12]
	txBuf[7] = rSample&0xFFFF;
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	4b03      	ldr	r3, [pc, #12]	@ (8000a9c <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 8000a8e:	81da      	strh	r2, [r3, #14]
}
 8000a90:	bf00      	nop
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200001c0 	.word	0x200001c0
 8000a9c:	200001d0 	.word	0x200001d0

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <Error_Handler+0x8>

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <HAL_MspInit+0x4c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	4a0f      	ldr	r2, [pc, #60]	@ (8000af8 <HAL_MspInit+0x4c>)
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <HAL_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	4a08      	ldr	r2, [pc, #32]	@ (8000af8 <HAL_MspInit+0x4c>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08e      	sub	sp, #56	@ 0x38
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a6b      	ldr	r2, [pc, #428]	@ (8000cd4 <HAL_I2S_MspInit+0x1d8>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	f040 80cf 	bne.w	8000ccc <HAL_I2S_MspInit+0x1d0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b32:	23c0      	movs	r3, #192	@ 0xc0
 8000b34:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f002 fc60 	bl	8003404 <HAL_RCCEx_PeriphCLKConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000b4a:	f7ff ffa9 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b61      	ldr	r3, [pc, #388]	@ (8000cd8 <HAL_I2S_MspInit+0x1dc>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b56:	4a60      	ldr	r2, [pc, #384]	@ (8000cd8 <HAL_I2S_MspInit+0x1dc>)
 8000b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5e:	4b5e      	ldr	r3, [pc, #376]	@ (8000cd8 <HAL_I2S_MspInit+0x1dc>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8000cd8 <HAL_I2S_MspInit+0x1dc>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a59      	ldr	r2, [pc, #356]	@ (8000cd8 <HAL_I2S_MspInit+0x1dc>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b57      	ldr	r3, [pc, #348]	@ (8000cd8 <HAL_I2S_MspInit+0x1dc>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	4b53      	ldr	r3, [pc, #332]	@ (8000cd8 <HAL_I2S_MspInit+0x1dc>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a52      	ldr	r2, [pc, #328]	@ (8000cd8 <HAL_I2S_MspInit+0x1dc>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b50      	ldr	r3, [pc, #320]	@ (8000cd8 <HAL_I2S_MspInit+0x1dc>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000ba2:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4847      	ldr	r0, [pc, #284]	@ (8000cdc <HAL_I2S_MspInit+0x1e0>)
 8000bc0:	f000 fef8 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000bc4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000bd6:	2306      	movs	r3, #6
 8000bd8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bde:	4619      	mov	r1, r3
 8000be0:	483e      	ldr	r0, [pc, #248]	@ (8000cdc <HAL_I2S_MspInit+0x1e0>)
 8000be2:	f000 fee7 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000be6:	2340      	movs	r3, #64	@ 0x40
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4837      	ldr	r0, [pc, #220]	@ (8000ce0 <HAL_I2S_MspInit+0x1e4>)
 8000c02:	f000 fed7 	bl	80019b4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000c06:	4b37      	ldr	r3, [pc, #220]	@ (8000ce4 <HAL_I2S_MspInit+0x1e8>)
 8000c08:	4a37      	ldr	r2, [pc, #220]	@ (8000ce8 <HAL_I2S_MspInit+0x1ec>)
 8000c0a:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000c0c:	4b35      	ldr	r3, [pc, #212]	@ (8000ce4 <HAL_I2S_MspInit+0x1e8>)
 8000c0e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000c12:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c14:	4b33      	ldr	r3, [pc, #204]	@ (8000ce4 <HAL_I2S_MspInit+0x1e8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ce4 <HAL_I2S_MspInit+0x1e8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c20:	4b30      	ldr	r3, [pc, #192]	@ (8000ce4 <HAL_I2S_MspInit+0x1e8>)
 8000c22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c26:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c28:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce4 <HAL_I2S_MspInit+0x1e8>)
 8000c2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c2e:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c30:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce4 <HAL_I2S_MspInit+0x1e8>)
 8000c32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c36:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000c38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce4 <HAL_I2S_MspInit+0x1e8>)
 8000c3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c3e:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c40:	4b28      	ldr	r3, [pc, #160]	@ (8000ce4 <HAL_I2S_MspInit+0x1e8>)
 8000c42:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c46:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c48:	4b26      	ldr	r3, [pc, #152]	@ (8000ce4 <HAL_I2S_MspInit+0x1e8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000c4e:	4825      	ldr	r0, [pc, #148]	@ (8000ce4 <HAL_I2S_MspInit+0x1e8>)
 8000c50:	f000 faae 	bl	80011b0 <HAL_DMA_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 8000c5a:	f7ff ff21 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a20      	ldr	r2, [pc, #128]	@ (8000ce4 <HAL_I2S_MspInit+0x1e8>)
 8000c62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c64:	4a1f      	ldr	r2, [pc, #124]	@ (8000ce4 <HAL_I2S_MspInit+0x1e8>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000c6a:	4b20      	ldr	r3, [pc, #128]	@ (8000cec <HAL_I2S_MspInit+0x1f0>)
 8000c6c:	4a20      	ldr	r2, [pc, #128]	@ (8000cf0 <HAL_I2S_MspInit+0x1f4>)
 8000c6e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000c70:	4b1e      	ldr	r3, [pc, #120]	@ (8000cec <HAL_I2S_MspInit+0x1f0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c76:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <HAL_I2S_MspInit+0x1f0>)
 8000c78:	2240      	movs	r2, #64	@ 0x40
 8000c7a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <HAL_I2S_MspInit+0x1f0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	@ (8000cec <HAL_I2S_MspInit+0x1f0>)
 8000c84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c88:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <HAL_I2S_MspInit+0x1f0>)
 8000c8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c90:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c92:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <HAL_I2S_MspInit+0x1f0>)
 8000c94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c98:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <HAL_I2S_MspInit+0x1f0>)
 8000c9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ca0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ca2:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <HAL_I2S_MspInit+0x1f0>)
 8000ca4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ca8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000caa:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <HAL_I2S_MspInit+0x1f0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000cb0:	480e      	ldr	r0, [pc, #56]	@ (8000cec <HAL_I2S_MspInit+0x1f0>)
 8000cb2:	f000 fa7d 	bl	80011b0 <HAL_DMA_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 8000cbc:	f7ff fef0 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <HAL_I2S_MspInit+0x1f0>)
 8000cc4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cc6:	4a09      	ldr	r2, [pc, #36]	@ (8000cec <HAL_I2S_MspInit+0x1f0>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ccc:	bf00      	nop
 8000cce:	3738      	adds	r7, #56	@ 0x38
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40003800 	.word	0x40003800
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020400 	.word	0x40020400
 8000ce0:	40020800 	.word	0x40020800
 8000ce4:	20000070 	.word	0x20000070
 8000ce8:	40026058 	.word	0x40026058
 8000cec:	200000d0 	.word	0x200000d0
 8000cf0:	40026070 	.word	0x40026070

08000cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a1d      	ldr	r2, [pc, #116]	@ (8000d88 <HAL_UART_MspInit+0x94>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d134      	bne.n	8000d80 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d8c <HAL_UART_MspInit+0x98>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8000d8c <HAL_UART_MspInit+0x98>)
 8000d20:	f043 0310 	orr.w	r3, r3, #16
 8000d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d26:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <HAL_UART_MspInit+0x98>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2a:	f003 0310 	and.w	r3, r3, #16
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <HAL_UART_MspInit+0x98>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a14      	ldr	r2, [pc, #80]	@ (8000d8c <HAL_UART_MspInit+0x98>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <HAL_UART_MspInit+0x98>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d4e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d60:	2307      	movs	r3, #7
 8000d62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4809      	ldr	r0, [pc, #36]	@ (8000d90 <HAL_UART_MspInit+0x9c>)
 8000d6c:	f000 fe22 	bl	80019b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	2025      	movs	r0, #37	@ 0x25
 8000d76:	f000 f9e4 	bl	8001142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d7a:	2025      	movs	r0, #37	@ 0x25
 8000d7c:	f000 f9fd 	bl	800117a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	@ 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40011000 	.word	0x40011000
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020000 	.word	0x40020000

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <NMI_Handler+0x4>

08000d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <MemManage_Handler+0x4>

08000dac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dea:	f000 f8af 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000df8:	4802      	ldr	r0, [pc, #8]	@ (8000e04 <DMA1_Stream3_IRQHandler+0x10>)
 8000dfa:	f000 fb71 	bl	80014e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000070 	.word	0x20000070

08000e08 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000e0c:	4802      	ldr	r0, [pc, #8]	@ (8000e18 <DMA1_Stream4_IRQHandler+0x10>)
 8000e0e:	f000 fb67 	bl	80014e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000d0 	.word	0x200000d0

08000e1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e20:	4802      	ldr	r0, [pc, #8]	@ (8000e2c <USART1_IRQHandler+0x10>)
 8000e22:	f002 fc81 	bl	8003728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000130 	.word	0x20000130

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e58:	f7ff ffea 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	@ (8000e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e82:	f003 fb27 	bl	80044d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fb17 	bl	80004b8 <main>
  bx  lr    
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e98:	08004564 	.word	0x08004564
  ldr r2, =_sbss
 8000e9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ea0:	200001e4 	.word	0x200001e4

08000ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f92b 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fde6 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f943 	bl	8001196 <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 f90b 	bl	8001142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000004 	.word	0x20000004

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	200001e0 	.word	0x200001e0

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200001e0 	.word	0x200001e0

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fbe:	4a04      	ldr	r2, [pc, #16]	@ (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	db0b      	blt.n	800101a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f003 021f 	and.w	r2, r3, #31
 8001008:	4907      	ldr	r1, [pc, #28]	@ (8001028 <__NVIC_EnableIRQ+0x38>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	095b      	lsrs	r3, r3, #5
 8001010:	2001      	movs	r0, #1
 8001012:	fa00 f202 	lsl.w	r2, r0, r2
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000e100 	.word	0xe000e100

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	@ (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	@ (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	@ 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	@ 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f7ff ff8e 	bl	800102c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff29 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001154:	f7ff ff3e 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 8001158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ff8e 	bl	8001080 <NVIC_EncodePriority>
 8001164:	4602      	mov	r2, r0
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff5d 	bl	800102c <__NVIC_SetPriority>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff31 	bl	8000ff0 <__NVIC_EnableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffa2 	bl	80010e8 <SysTick_Config>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff feda 	bl	8000f74 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e099      	b.n	8001300 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2202      	movs	r2, #2
 80011d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0201 	bic.w	r2, r2, #1
 80011ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ec:	e00f      	b.n	800120e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ee:	f7ff fec1 	bl	8000f74 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b05      	cmp	r3, #5
 80011fa:	d908      	bls.n	800120e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2220      	movs	r2, #32
 8001200:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2203      	movs	r2, #3
 8001206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e078      	b.n	8001300 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1e8      	bne.n	80011ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	4b38      	ldr	r3, [pc, #224]	@ (8001308 <HAL_DMA_Init+0x158>)
 8001228:	4013      	ands	r3, r2
 800122a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800123a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001246:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001252:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4313      	orrs	r3, r2
 800125e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001264:	2b04      	cmp	r3, #4
 8001266:	d107      	bne.n	8001278 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001270:	4313      	orrs	r3, r2
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4313      	orrs	r3, r2
 8001276:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f023 0307 	bic.w	r3, r3, #7
 800128e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	4313      	orrs	r3, r2
 8001298:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d117      	bne.n	80012d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00e      	beq.n	80012d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 fb01 	bl	80018bc <DMA_CheckFifoParam>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d008      	beq.n	80012d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2240      	movs	r2, #64	@ 0x40
 80012c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80012ce:	2301      	movs	r3, #1
 80012d0:	e016      	b.n	8001300 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 fab8 	bl	8001850 <DMA_CalcBaseAndBitshift>
 80012e0:	4603      	mov	r3, r0
 80012e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012e8:	223f      	movs	r2, #63	@ 0x3f
 80012ea:	409a      	lsls	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	f010803f 	.word	0xf010803f

0800130c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001322:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800132a:	2b01      	cmp	r3, #1
 800132c:	d101      	bne.n	8001332 <HAL_DMA_Start_IT+0x26>
 800132e:	2302      	movs	r3, #2
 8001330:	e040      	b.n	80013b4 <HAL_DMA_Start_IT+0xa8>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b01      	cmp	r3, #1
 8001344:	d12f      	bne.n	80013a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2202      	movs	r2, #2
 800134a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2200      	movs	r2, #0
 8001352:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f000 fa4a 	bl	80017f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001364:	223f      	movs	r2, #63	@ 0x3f
 8001366:	409a      	lsls	r2, r3
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 0216 	orr.w	r2, r2, #22
 800137a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	2b00      	cmp	r3, #0
 8001382:	d007      	beq.n	8001394 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0208 	orr.w	r2, r2, #8
 8001392:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0201 	orr.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	e005      	b.n	80013b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013ae:	2302      	movs	r3, #2
 80013b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013ca:	f7ff fdd3 	bl	8000f74 <HAL_GetTick>
 80013ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d008      	beq.n	80013ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2280      	movs	r2, #128	@ 0x80
 80013e0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e052      	b.n	8001494 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0216 	bic.w	r2, r2, #22
 80013fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	695a      	ldr	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800140c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	2b00      	cmp	r3, #0
 8001414:	d103      	bne.n	800141e <HAL_DMA_Abort+0x62>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800141a:	2b00      	cmp	r3, #0
 800141c:	d007      	beq.n	800142e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0208 	bic.w	r2, r2, #8
 800142c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0201 	bic.w	r2, r2, #1
 800143c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800143e:	e013      	b.n	8001468 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001440:	f7ff fd98 	bl	8000f74 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b05      	cmp	r3, #5
 800144c:	d90c      	bls.n	8001468 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2220      	movs	r2, #32
 8001452:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2203      	movs	r2, #3
 8001458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e015      	b.n	8001494 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1e4      	bne.n	8001440 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800147a:	223f      	movs	r2, #63	@ 0x3f
 800147c:	409a      	lsls	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d004      	beq.n	80014ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2280      	movs	r2, #128	@ 0x80
 80014b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00c      	b.n	80014d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2205      	movs	r2, #5
 80014be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 0201 	bic.w	r2, r2, #1
 80014d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014ec:	4b8e      	ldr	r3, [pc, #568]	@ (8001728 <HAL_DMA_IRQHandler+0x248>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a8e      	ldr	r2, [pc, #568]	@ (800172c <HAL_DMA_IRQHandler+0x24c>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	0a9b      	lsrs	r3, r3, #10
 80014f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800150a:	2208      	movs	r2, #8
 800150c:	409a      	lsls	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4013      	ands	r3, r2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d01a      	beq.n	800154c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d013      	beq.n	800154c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0204 	bic.w	r2, r2, #4
 8001532:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001538:	2208      	movs	r2, #8
 800153a:	409a      	lsls	r2, r3
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001544:	f043 0201 	orr.w	r2, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001550:	2201      	movs	r2, #1
 8001552:	409a      	lsls	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d012      	beq.n	8001582 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00b      	beq.n	8001582 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800156e:	2201      	movs	r2, #1
 8001570:	409a      	lsls	r2, r3
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800157a:	f043 0202 	orr.w	r2, r3, #2
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001586:	2204      	movs	r2, #4
 8001588:	409a      	lsls	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4013      	ands	r3, r2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d012      	beq.n	80015b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00b      	beq.n	80015b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a4:	2204      	movs	r2, #4
 80015a6:	409a      	lsls	r2, r3
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b0:	f043 0204 	orr.w	r2, r3, #4
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015bc:	2210      	movs	r2, #16
 80015be:	409a      	lsls	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4013      	ands	r3, r2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d043      	beq.n	8001650 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d03c      	beq.n	8001650 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015da:	2210      	movs	r2, #16
 80015dc:	409a      	lsls	r2, r3
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d018      	beq.n	8001622 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d108      	bne.n	8001610 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	2b00      	cmp	r3, #0
 8001604:	d024      	beq.n	8001650 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	4798      	blx	r3
 800160e:	e01f      	b.n	8001650 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001614:	2b00      	cmp	r3, #0
 8001616:	d01b      	beq.n	8001650 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	4798      	blx	r3
 8001620:	e016      	b.n	8001650 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162c:	2b00      	cmp	r3, #0
 800162e:	d107      	bne.n	8001640 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0208 	bic.w	r2, r2, #8
 800163e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001654:	2220      	movs	r2, #32
 8001656:	409a      	lsls	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 808f 	beq.w	8001780 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0310 	and.w	r3, r3, #16
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 8087 	beq.w	8001780 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001676:	2220      	movs	r2, #32
 8001678:	409a      	lsls	r2, r3
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b05      	cmp	r3, #5
 8001688:	d136      	bne.n	80016f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0216 	bic.w	r2, r2, #22
 8001698:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	695a      	ldr	r2, [r3, #20]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d103      	bne.n	80016ba <HAL_DMA_IRQHandler+0x1da>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0208 	bic.w	r2, r2, #8
 80016c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ce:	223f      	movs	r2, #63	@ 0x3f
 80016d0:	409a      	lsls	r2, r3
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d07e      	beq.n	80017ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	4798      	blx	r3
        }
        return;
 80016f6:	e079      	b.n	80017ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d01d      	beq.n	8001742 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10d      	bne.n	8001730 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001718:	2b00      	cmp	r3, #0
 800171a:	d031      	beq.n	8001780 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	4798      	blx	r3
 8001724:	e02c      	b.n	8001780 <HAL_DMA_IRQHandler+0x2a0>
 8001726:	bf00      	nop
 8001728:	20000000 	.word	0x20000000
 800172c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001734:	2b00      	cmp	r3, #0
 8001736:	d023      	beq.n	8001780 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	4798      	blx	r3
 8001740:	e01e      	b.n	8001780 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10f      	bne.n	8001770 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0210 	bic.w	r2, r2, #16
 800175e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001784:	2b00      	cmp	r3, #0
 8001786:	d032      	beq.n	80017ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d022      	beq.n	80017da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2205      	movs	r2, #5
 8001798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0201 	bic.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	3301      	adds	r3, #1
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d307      	bcc.n	80017c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f2      	bne.n	80017ac <HAL_DMA_IRQHandler+0x2cc>
 80017c6:	e000      	b.n	80017ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	4798      	blx	r3
 80017ea:	e000      	b.n	80017ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80017ec:	bf00      	nop
    }
  }
}
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001810:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b40      	cmp	r3, #64	@ 0x40
 8001820:	d108      	bne.n	8001834 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001832:	e007      	b.n	8001844 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	60da      	str	r2, [r3, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	3b10      	subs	r3, #16
 8001860:	4a14      	ldr	r2, [pc, #80]	@ (80018b4 <DMA_CalcBaseAndBitshift+0x64>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800186a:	4a13      	ldr	r2, [pc, #76]	@ (80018b8 <DMA_CalcBaseAndBitshift+0x68>)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b03      	cmp	r3, #3
 800187c:	d909      	bls.n	8001892 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001886:	f023 0303 	bic.w	r3, r3, #3
 800188a:	1d1a      	adds	r2, r3, #4
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001890:	e007      	b.n	80018a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800189a:	f023 0303 	bic.w	r3, r3, #3
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	aaaaaaab 	.word	0xaaaaaaab
 80018b8:	0800454c 	.word	0x0800454c

080018bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d11f      	bne.n	8001916 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d856      	bhi.n	800198a <DMA_CheckFifoParam+0xce>
 80018dc:	a201      	add	r2, pc, #4	@ (adr r2, 80018e4 <DMA_CheckFifoParam+0x28>)
 80018de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e2:	bf00      	nop
 80018e4:	080018f5 	.word	0x080018f5
 80018e8:	08001907 	.word	0x08001907
 80018ec:	080018f5 	.word	0x080018f5
 80018f0:	0800198b 	.word	0x0800198b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d046      	beq.n	800198e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001904:	e043      	b.n	800198e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800190e:	d140      	bne.n	8001992 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001914:	e03d      	b.n	8001992 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800191e:	d121      	bne.n	8001964 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2b03      	cmp	r3, #3
 8001924:	d837      	bhi.n	8001996 <DMA_CheckFifoParam+0xda>
 8001926:	a201      	add	r2, pc, #4	@ (adr r2, 800192c <DMA_CheckFifoParam+0x70>)
 8001928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192c:	0800193d 	.word	0x0800193d
 8001930:	08001943 	.word	0x08001943
 8001934:	0800193d 	.word	0x0800193d
 8001938:	08001955 	.word	0x08001955
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
      break;
 8001940:	e030      	b.n	80019a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001946:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d025      	beq.n	800199a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001952:	e022      	b.n	800199a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001958:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800195c:	d11f      	bne.n	800199e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001962:	e01c      	b.n	800199e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d903      	bls.n	8001972 <DMA_CheckFifoParam+0xb6>
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d003      	beq.n	8001978 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001970:	e018      	b.n	80019a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
      break;
 8001976:	e015      	b.n	80019a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00e      	beq.n	80019a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
      break;
 8001988:	e00b      	b.n	80019a2 <DMA_CheckFifoParam+0xe6>
      break;
 800198a:	bf00      	nop
 800198c:	e00a      	b.n	80019a4 <DMA_CheckFifoParam+0xe8>
      break;
 800198e:	bf00      	nop
 8001990:	e008      	b.n	80019a4 <DMA_CheckFifoParam+0xe8>
      break;
 8001992:	bf00      	nop
 8001994:	e006      	b.n	80019a4 <DMA_CheckFifoParam+0xe8>
      break;
 8001996:	bf00      	nop
 8001998:	e004      	b.n	80019a4 <DMA_CheckFifoParam+0xe8>
      break;
 800199a:	bf00      	nop
 800199c:	e002      	b.n	80019a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800199e:	bf00      	nop
 80019a0:	e000      	b.n	80019a4 <DMA_CheckFifoParam+0xe8>
      break;
 80019a2:	bf00      	nop
    }
  } 
  
  return status; 
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	@ 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	e16b      	b.n	8001ca8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d0:	2201      	movs	r2, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	f040 815a 	bne.w	8001ca2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d005      	beq.n	8001a06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d130      	bne.n	8001a68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 0201 	and.w	r2, r3, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d017      	beq.n	8001aa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d123      	bne.n	8001af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	08da      	lsrs	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3208      	adds	r2, #8
 8001ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	08da      	lsrs	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3208      	adds	r2, #8
 8001af2:	69b9      	ldr	r1, [r7, #24]
 8001af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0203 	and.w	r2, r3, #3
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80b4 	beq.w	8001ca2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b60      	ldr	r3, [pc, #384]	@ (8001cc0 <HAL_GPIO_Init+0x30c>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b42:	4a5f      	ldr	r2, [pc, #380]	@ (8001cc0 <HAL_GPIO_Init+0x30c>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b4a:	4b5d      	ldr	r3, [pc, #372]	@ (8001cc0 <HAL_GPIO_Init+0x30c>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b56:	4a5b      	ldr	r2, [pc, #364]	@ (8001cc4 <HAL_GPIO_Init+0x310>)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a52      	ldr	r2, [pc, #328]	@ (8001cc8 <HAL_GPIO_Init+0x314>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d02b      	beq.n	8001bda <HAL_GPIO_Init+0x226>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a51      	ldr	r2, [pc, #324]	@ (8001ccc <HAL_GPIO_Init+0x318>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d025      	beq.n	8001bd6 <HAL_GPIO_Init+0x222>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a50      	ldr	r2, [pc, #320]	@ (8001cd0 <HAL_GPIO_Init+0x31c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d01f      	beq.n	8001bd2 <HAL_GPIO_Init+0x21e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4f      	ldr	r2, [pc, #316]	@ (8001cd4 <HAL_GPIO_Init+0x320>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d019      	beq.n	8001bce <HAL_GPIO_Init+0x21a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4e      	ldr	r2, [pc, #312]	@ (8001cd8 <HAL_GPIO_Init+0x324>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_GPIO_Init+0x216>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4d      	ldr	r2, [pc, #308]	@ (8001cdc <HAL_GPIO_Init+0x328>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_GPIO_Init+0x212>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4c      	ldr	r2, [pc, #304]	@ (8001ce0 <HAL_GPIO_Init+0x32c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d007      	beq.n	8001bc2 <HAL_GPIO_Init+0x20e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ce4 <HAL_GPIO_Init+0x330>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_GPIO_Init+0x20a>
 8001bba:	2307      	movs	r3, #7
 8001bbc:	e00e      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	e00c      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bc2:	2306      	movs	r3, #6
 8001bc4:	e00a      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bc6:	2305      	movs	r3, #5
 8001bc8:	e008      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bca:	2304      	movs	r3, #4
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e004      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e002      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	f002 0203 	and.w	r2, r2, #3
 8001be2:	0092      	lsls	r2, r2, #2
 8001be4:	4093      	lsls	r3, r2
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bec:	4935      	ldr	r1, [pc, #212]	@ (8001cc4 <HAL_GPIO_Init+0x310>)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce8 <HAL_GPIO_Init+0x334>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c1e:	4a32      	ldr	r2, [pc, #200]	@ (8001ce8 <HAL_GPIO_Init+0x334>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c24:	4b30      	ldr	r3, [pc, #192]	@ (8001ce8 <HAL_GPIO_Init+0x334>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c48:	4a27      	ldr	r2, [pc, #156]	@ (8001ce8 <HAL_GPIO_Init+0x334>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ce8 <HAL_GPIO_Init+0x334>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c72:	4a1d      	ldr	r2, [pc, #116]	@ (8001ce8 <HAL_GPIO_Init+0x334>)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce8 <HAL_GPIO_Init+0x334>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c9c:	4a12      	ldr	r2, [pc, #72]	@ (8001ce8 <HAL_GPIO_Init+0x334>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	2b0f      	cmp	r3, #15
 8001cac:	f67f ae90 	bls.w	80019d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3724      	adds	r7, #36	@ 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40013800 	.word	0x40013800
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	40020c00 	.word	0x40020c00
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40021400 	.word	0x40021400
 8001ce0:	40021800 	.word	0x40021800
 8001ce4:	40021c00 	.word	0x40021c00
 8001ce8:	40013c00 	.word	0x40013c00

08001cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cfc:	787b      	ldrb	r3, [r7, #1]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d02:	887a      	ldrh	r2, [r7, #2]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d08:	e003      	b.n	8001d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d0a:	887b      	ldrh	r3, [r7, #2]
 8001d0c:	041a      	lsls	r2, r3, #16
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	619a      	str	r2, [r3, #24]
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e128      	b.n	8001f84 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a90      	ldr	r2, [pc, #576]	@ (8001f8c <HAL_I2S_Init+0x26c>)
 8001d4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7fe fed5 	bl	8000afc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2202      	movs	r2, #2
 8001d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001d68:	f023 030f 	bic.w	r3, r3, #15
 8001d6c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2202      	movs	r2, #2
 8001d74:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d060      	beq.n	8001e40 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001d86:	2310      	movs	r3, #16
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e001      	b.n	8001d90 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001d8c:	2320      	movs	r3, #32
 8001d8e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b20      	cmp	r3, #32
 8001d96:	d802      	bhi.n	8001d9e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f001 fc12 	bl	80035c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001da4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dae:	d125      	bne.n	8001dfc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d010      	beq.n	8001dda <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	461a      	mov	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	3305      	adds	r3, #5
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	e01f      	b.n	8001e1a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	461a      	mov	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	3305      	adds	r3, #5
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	e00e      	b.n	8001e1a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	3305      	adds	r3, #5
 8001e18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4a5c      	ldr	r2, [pc, #368]	@ (8001f90 <HAL_I2S_Init+0x270>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	08db      	lsrs	r3, r3, #3
 8001e24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	085b      	lsrs	r3, r3, #1
 8001e36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	021b      	lsls	r3, r3, #8
 8001e3c:	61bb      	str	r3, [r7, #24]
 8001e3e:	e003      	b.n	8001e48 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001e40:	2302      	movs	r3, #2
 8001e42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d902      	bls.n	8001e54 <HAL_I2S_Init+0x134>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	2bff      	cmp	r3, #255	@ 0xff
 8001e52:	d907      	bls.n	8001e64 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e58:	f043 0210 	orr.w	r2, r3, #16
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e08f      	b.n	8001f84 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	ea42 0103 	orr.w	r1, r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	69fa      	ldr	r2, [r7, #28]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001e82:	f023 030f 	bic.w	r3, r3, #15
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6851      	ldr	r1, [r2, #4]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6892      	ldr	r2, [r2, #8]
 8001e8e:	4311      	orrs	r1, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	68d2      	ldr	r2, [r2, #12]
 8001e94:	4311      	orrs	r1, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6992      	ldr	r2, [r2, #24]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ea6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d161      	bne.n	8001f74 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a38      	ldr	r2, [pc, #224]	@ (8001f94 <HAL_I2S_Init+0x274>)
 8001eb4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a37      	ldr	r2, [pc, #220]	@ (8001f98 <HAL_I2S_Init+0x278>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d101      	bne.n	8001ec4 <HAL_I2S_Init+0x1a4>
 8001ec0:	4b36      	ldr	r3, [pc, #216]	@ (8001f9c <HAL_I2S_Init+0x27c>)
 8001ec2:	e001      	b.n	8001ec8 <HAL_I2S_Init+0x1a8>
 8001ec4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	4932      	ldr	r1, [pc, #200]	@ (8001f98 <HAL_I2S_Init+0x278>)
 8001ed0:	428a      	cmp	r2, r1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_I2S_Init+0x1b8>
 8001ed4:	4a31      	ldr	r2, [pc, #196]	@ (8001f9c <HAL_I2S_Init+0x27c>)
 8001ed6:	e001      	b.n	8001edc <HAL_I2S_Init+0x1bc>
 8001ed8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001edc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001ee0:	f023 030f 	bic.w	r3, r3, #15
 8001ee4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a2b      	ldr	r2, [pc, #172]	@ (8001f98 <HAL_I2S_Init+0x278>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d101      	bne.n	8001ef4 <HAL_I2S_Init+0x1d4>
 8001ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f9c <HAL_I2S_Init+0x27c>)
 8001ef2:	e001      	b.n	8001ef8 <HAL_I2S_Init+0x1d8>
 8001ef4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ef8:	2202      	movs	r2, #2
 8001efa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a25      	ldr	r2, [pc, #148]	@ (8001f98 <HAL_I2S_Init+0x278>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d101      	bne.n	8001f0a <HAL_I2S_Init+0x1ea>
 8001f06:	4b25      	ldr	r3, [pc, #148]	@ (8001f9c <HAL_I2S_Init+0x27c>)
 8001f08:	e001      	b.n	8001f0e <HAL_I2S_Init+0x1ee>
 8001f0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f1a:	d003      	beq.n	8001f24 <HAL_I2S_Init+0x204>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d103      	bne.n	8001f2c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001f24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	e001      	b.n	8001f30 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f44:	4313      	orrs	r3, r2
 8001f46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	897b      	ldrh	r3, [r7, #10]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f5c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a0d      	ldr	r2, [pc, #52]	@ (8001f98 <HAL_I2S_Init+0x278>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d101      	bne.n	8001f6c <HAL_I2S_Init+0x24c>
 8001f68:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <HAL_I2S_Init+0x27c>)
 8001f6a:	e001      	b.n	8001f70 <HAL_I2S_Init+0x250>
 8001f6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f70:	897a      	ldrh	r2, [r7, #10]
 8001f72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	08002097 	.word	0x08002097
 8001f90:	cccccccd 	.word	0xcccccccd
 8001f94:	080024c1 	.word	0x080024c1
 8001f98:	40003800 	.word	0x40003800
 8001f9c:	40003400 	.word	0x40003400

08001fa0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe8:	881a      	ldrh	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	1c9a      	adds	r2, r3, #2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10e      	bne.n	8002030 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002020:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ffb8 	bl	8001fa0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204a:	b292      	uxth	r2, r2
 800204c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002052:	1c9a      	adds	r2, r3, #2
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800205c:	b29b      	uxth	r3, r3
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800206a:	b29b      	uxth	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10e      	bne.n	800208e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800207e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff93 	bl	8001fb4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d13a      	bne.n	8002128 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d109      	bne.n	80020d0 <I2S_IRQHandler+0x3a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c6:	2b40      	cmp	r3, #64	@ 0x40
 80020c8:	d102      	bne.n	80020d0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ffb4 	bl	8002038 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d6:	2b40      	cmp	r3, #64	@ 0x40
 80020d8:	d126      	bne.n	8002128 <I2S_IRQHandler+0x92>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	2b20      	cmp	r3, #32
 80020e6:	d11f      	bne.n	8002128 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80020f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	f043 0202 	orr.w	r2, r3, #2
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ff50 	bl	8001fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b03      	cmp	r3, #3
 8002132:	d136      	bne.n	80021a2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b02      	cmp	r3, #2
 800213c:	d109      	bne.n	8002152 <I2S_IRQHandler+0xbc>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002148:	2b80      	cmp	r3, #128	@ 0x80
 800214a:	d102      	bne.n	8002152 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff45 	bl	8001fdc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b08      	cmp	r3, #8
 800215a:	d122      	bne.n	80021a2 <I2S_IRQHandler+0x10c>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b20      	cmp	r3, #32
 8002168:	d11b      	bne.n	80021a2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002178:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002194:	f043 0204 	orr.w	r2, r3, #4
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ff13 	bl	8001fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021a2:	bf00      	nop
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d002      	beq.n	80021d8 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
 80021d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021d6:	e160      	b.n	800249a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80021e4:	887b      	ldrh	r3, [r7, #2]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e15a      	b.n	80024a4 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_I2SEx_TransmitReceive_DMA+0x52>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e152      	b.n	80024a4 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  hi2s->pTxBuffPtr = pTxData;
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->pRxBuffPtr = pRxData;
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d002      	beq.n	800222a <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	2b05      	cmp	r3, #5
 8002228:	d114      	bne.n	8002254 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002234:	887b      	ldrh	r3, [r7, #2]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002248:	887b      	ldrh	r3, [r7, #2]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	865a      	strh	r2, [r3, #50]	@ 0x32
 8002252:	e00b      	b.n	800226c <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	887a      	ldrh	r2, [r7, #2]
 8002258:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	887a      	ldrh	r2, [r7, #2]
 800225e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = Size;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	887a      	ldrh	r2, [r7, #2]
 8002264:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	887a      	ldrh	r2, [r7, #2]
 800226a:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2205      	movs	r2, #5
 8002276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227e:	4a8b      	ldr	r2, [pc, #556]	@ (80024ac <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002280:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002286:	4a8a      	ldr	r2, [pc, #552]	@ (80024b0 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002288:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800228e:	4a89      	ldr	r2, [pc, #548]	@ (80024b4 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002290:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002296:	2200      	movs	r2, #0
 8002298:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229e:	2200      	movs	r2, #0
 80022a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a6:	4a83      	ldr	r2, [pc, #524]	@ (80024b4 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80022a8:	64da      	str	r2, [r3, #76]	@ 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022b4:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022bc:	d002      	beq.n	80022c4 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d16b      	bne.n	800239c <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a79      	ldr	r2, [pc, #484]	@ (80024b8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d101      	bne.n	80022da <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 80022d6:	4b79      	ldr	r3, [pc, #484]	@ (80024bc <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80022d8:	e001      	b.n	80022de <HAL_I2SEx_TransmitReceive_DMA+0x132>
 80022da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022de:	330c      	adds	r3, #12
 80022e0:	4619      	mov	r1, r3
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	f7ff f80e 	bl	800130c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a70      	ldr	r2, [pc, #448]	@ (80024b8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_I2SEx_TransmitReceive_DMA+0x152>
 80022fa:	4b70      	ldr	r3, [pc, #448]	@ (80024bc <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80022fc:	e001      	b.n	8002302 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 80022fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	496b      	ldr	r1, [pc, #428]	@ (80024b8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800230a:	428b      	cmp	r3, r1
 800230c:	d101      	bne.n	8002312 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 800230e:	4b6b      	ldr	r3, [pc, #428]	@ (80024bc <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002310:	e001      	b.n	8002316 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002312:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800231c:	f107 0308 	add.w	r3, r7, #8
 8002320:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	6819      	ldr	r1, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	330c      	adds	r3, #12
 8002330:	461a      	mov	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002336:	b29b      	uxth	r3, r3
 8002338:	f7fe ffe8 	bl	800130c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0202 	orr.w	r2, r2, #2
 800234a:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800235a:	f000 809e 	beq.w	800249a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a55      	ldr	r2, [pc, #340]	@ (80024b8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d101      	bne.n	800236c <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002368:	4b54      	ldr	r3, [pc, #336]	@ (80024bc <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800236a:	e001      	b.n	8002370 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 800236c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4950      	ldr	r1, [pc, #320]	@ (80024b8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002378:	428b      	cmp	r3, r1
 800237a:	d101      	bne.n	8002380 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 800237c:	4b4f      	ldr	r3, [pc, #316]	@ (80024bc <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800237e:	e001      	b.n	8002384 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002380:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002384:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002388:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69da      	ldr	r2, [r3, #28]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002398:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800239a:	e07e      	b.n	800249a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80023aa:	d10a      	bne.n	80023c2 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80023c2:	f107 0308 	add.w	r3, r7, #8
 80023c6:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	6819      	ldr	r1, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a38      	ldr	r2, [pc, #224]	@ (80024b8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d101      	bne.n	80023de <HAL_I2SEx_TransmitReceive_DMA+0x232>
 80023da:	4b38      	ldr	r3, [pc, #224]	@ (80024bc <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80023dc:	e001      	b.n	80023e2 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 80023de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023e2:	330c      	adds	r3, #12
 80023e4:	461a      	mov	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	f7fe ff8e 	bl	800130c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a30      	ldr	r2, [pc, #192]	@ (80024b8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d101      	bne.n	80023fe <HAL_I2SEx_TransmitReceive_DMA+0x252>
 80023fa:	4b30      	ldr	r3, [pc, #192]	@ (80024bc <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80023fc:	e001      	b.n	8002402 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 80023fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	492b      	ldr	r1, [pc, #172]	@ (80024b8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800240a:	428b      	cmp	r3, r1
 800240c:	d101      	bne.n	8002412 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 800240e:	4b2b      	ldr	r3, [pc, #172]	@ (80024bc <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002410:	e001      	b.n	8002416 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002412:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002416:	f042 0202 	orr.w	r2, r2, #2
 800241a:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	330c      	adds	r3, #12
 800242a:	4619      	mov	r1, r3
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002434:	b29b      	uxth	r3, r3
 8002436:	f7fe ff69 	bl	800130c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0201 	orr.w	r2, r2, #1
 8002448:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002458:	d01e      	beq.n	8002498 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a16      	ldr	r2, [pc, #88]	@ (80024b8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d101      	bne.n	8002468 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002464:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002466:	e001      	b.n	800246c <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002468:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800246c:	69da      	ldr	r2, [r3, #28]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4911      	ldr	r1, [pc, #68]	@ (80024b8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002474:	428b      	cmp	r3, r1
 8002476:	d101      	bne.n	800247c <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002478:	4b10      	ldr	r3, [pc, #64]	@ (80024bc <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800247a:	e001      	b.n	8002480 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 800247c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002480:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002484:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	69da      	ldr	r2, [r3, #28]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002494:	61da      	str	r2, [r3, #28]
 8002496:	e000      	b.n	800249a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002498:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return errorcode;
 80024a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	08002769 	.word	0x08002769
 80024b0:	08002785 	.word	0x08002785
 80024b4:	0800285d 	.word	0x0800285d
 80024b8:	40003800 	.word	0x40003800
 80024bc:	40003400 	.word	0x40003400

080024c0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a92      	ldr	r2, [pc, #584]	@ (8002720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d101      	bne.n	80024de <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80024da:	4b92      	ldr	r3, [pc, #584]	@ (8002724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80024dc:	e001      	b.n	80024e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80024de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a8b      	ldr	r2, [pc, #556]	@ (8002720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d101      	bne.n	80024fc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80024f8:	4b8a      	ldr	r3, [pc, #552]	@ (8002724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80024fa:	e001      	b.n	8002500 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80024fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800250c:	d004      	beq.n	8002518 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f040 8099 	bne.w	800264a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b02      	cmp	r3, #2
 8002520:	d107      	bne.n	8002532 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f9d5 	bl	80028dc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	d107      	bne.n	800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fa78 	bl	8002a3c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002552:	2b40      	cmp	r3, #64	@ 0x40
 8002554:	d13a      	bne.n	80025cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	d035      	beq.n	80025cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a6e      	ldr	r2, [pc, #440]	@ (8002720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800256a:	4b6e      	ldr	r3, [pc, #440]	@ (8002724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800256c:	e001      	b.n	8002572 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800256e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4969      	ldr	r1, [pc, #420]	@ (8002720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800257a:	428b      	cmp	r3, r1
 800257c:	d101      	bne.n	8002582 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800257e:	4b69      	ldr	r3, [pc, #420]	@ (8002724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002580:	e001      	b.n	8002586 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002582:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002586:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800258a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800259a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025be:	f043 0202 	orr.w	r2, r3, #2
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff fcfe 	bl	8001fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	f040 80c3 	bne.w	800275e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 80bd 	beq.w	800275e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80025f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a49      	ldr	r2, [pc, #292]	@ (8002720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d101      	bne.n	8002602 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80025fe:	4b49      	ldr	r3, [pc, #292]	@ (8002724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002600:	e001      	b.n	8002606 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002602:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4944      	ldr	r1, [pc, #272]	@ (8002720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800260e:	428b      	cmp	r3, r1
 8002610:	d101      	bne.n	8002616 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002612:	4b44      	ldr	r3, [pc, #272]	@ (8002724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002614:	e001      	b.n	800261a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002616:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800261a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800261e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002620:	2300      	movs	r3, #0
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	f043 0204 	orr.w	r2, r3, #4
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fcc0 	bl	8001fc8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002648:	e089      	b.n	800275e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b02      	cmp	r3, #2
 8002652:	d107      	bne.n	8002664 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f96e 	bl	8002940 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d107      	bne.n	800267e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f9ad 	bl	80029d8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002684:	2b40      	cmp	r3, #64	@ 0x40
 8002686:	d12f      	bne.n	80026e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b00      	cmp	r3, #0
 8002690:	d02a      	beq.n	80026e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80026a0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d101      	bne.n	80026b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80026ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026ae:	e001      	b.n	80026b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80026b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4919      	ldr	r1, [pc, #100]	@ (8002720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026bc:	428b      	cmp	r3, r1
 80026be:	d101      	bne.n	80026c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80026c0:	4b18      	ldr	r3, [pc, #96]	@ (8002724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026c2:	e001      	b.n	80026c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80026c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80026c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80026cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026da:	f043 0202 	orr.w	r2, r3, #2
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff fc70 	bl	8001fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d136      	bne.n	8002760 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d031      	beq.n	8002760 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a07      	ldr	r2, [pc, #28]	@ (8002720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d101      	bne.n	800270a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002706:	4b07      	ldr	r3, [pc, #28]	@ (8002724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002708:	e001      	b.n	800270e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800270a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4902      	ldr	r1, [pc, #8]	@ (8002720 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002716:	428b      	cmp	r3, r1
 8002718:	d106      	bne.n	8002728 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800271a:	4b02      	ldr	r3, [pc, #8]	@ (8002724 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800271c:	e006      	b.n	800272c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800271e:	bf00      	nop
 8002720:	40003800 	.word	0x40003800
 8002724:	40003400 	.word	0x40003400
 8002728:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800272c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002730:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002740:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274e:	f043 0204 	orr.w	r2, r3, #4
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff fc36 	bl	8001fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800275c:	e000      	b.n	8002760 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800275e:	bf00      	nop
}
 8002760:	bf00      	nop
 8002762:	3720      	adds	r7, #32
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002774:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7fe f912 	bl	80009a0 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002790:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d155      	bne.n	8002846 <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027a8:	d006      	beq.n	80027b8 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d11e      	bne.n	80027f6 <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a25      	ldr	r2, [pc, #148]	@ (8002854 <I2SEx_TxRxDMACplt+0xd0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d101      	bne.n	80027c6 <I2SEx_TxRxDMACplt+0x42>
 80027c2:	4b25      	ldr	r3, [pc, #148]	@ (8002858 <I2SEx_TxRxDMACplt+0xd4>)
 80027c4:	e001      	b.n	80027ca <I2SEx_TxRxDMACplt+0x46>
 80027c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4920      	ldr	r1, [pc, #128]	@ (8002854 <I2SEx_TxRxDMACplt+0xd0>)
 80027d2:	428b      	cmp	r3, r1
 80027d4:	d101      	bne.n	80027da <I2SEx_TxRxDMACplt+0x56>
 80027d6:	4b20      	ldr	r3, [pc, #128]	@ (8002858 <I2SEx_TxRxDMACplt+0xd4>)
 80027d8:	e001      	b.n	80027de <I2SEx_TxRxDMACplt+0x5a>
 80027da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0202 	bic.w	r2, r2, #2
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	e01d      	b.n	8002832 <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a12      	ldr	r2, [pc, #72]	@ (8002854 <I2SEx_TxRxDMACplt+0xd0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d101      	bne.n	8002814 <I2SEx_TxRxDMACplt+0x90>
 8002810:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <I2SEx_TxRxDMACplt+0xd4>)
 8002812:	e001      	b.n	8002818 <I2SEx_TxRxDMACplt+0x94>
 8002814:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	490d      	ldr	r1, [pc, #52]	@ (8002854 <I2SEx_TxRxDMACplt+0xd0>)
 8002820:	428b      	cmp	r3, r1
 8002822:	d101      	bne.n	8002828 <I2SEx_TxRxDMACplt+0xa4>
 8002824:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <I2SEx_TxRxDMACplt+0xd4>)
 8002826:	e001      	b.n	800282c <I2SEx_TxRxDMACplt+0xa8>
 8002828:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800282c:	f022 0202 	bic.w	r2, r2, #2
 8002830:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->TxXferCount = 0U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f7fe f8ea 	bl	8000a20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800284c:	bf00      	nop
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40003800 	.word	0x40003800
 8002858:	40003400 	.word	0x40003400

0800285c <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002868:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0203 	bic.w	r2, r2, #3
 8002878:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a15      	ldr	r2, [pc, #84]	@ (80028d4 <I2SEx_TxRxDMAError+0x78>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d101      	bne.n	8002888 <I2SEx_TxRxDMAError+0x2c>
 8002884:	4b14      	ldr	r3, [pc, #80]	@ (80028d8 <I2SEx_TxRxDMAError+0x7c>)
 8002886:	e001      	b.n	800288c <I2SEx_TxRxDMAError+0x30>
 8002888:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4910      	ldr	r1, [pc, #64]	@ (80028d4 <I2SEx_TxRxDMAError+0x78>)
 8002894:	428b      	cmp	r3, r1
 8002896:	d101      	bne.n	800289c <I2SEx_TxRxDMAError+0x40>
 8002898:	4b0f      	ldr	r3, [pc, #60]	@ (80028d8 <I2SEx_TxRxDMAError+0x7c>)
 800289a:	e001      	b.n	80028a0 <I2SEx_TxRxDMAError+0x44>
 800289c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028a0:	f022 0203 	bic.w	r2, r2, #3
 80028a4:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028be:	f043 0208 	orr.w	r2, r3, #8
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7ff fb7e 	bl	8001fc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40003800 	.word	0x40003800
 80028d8:	40003400 	.word	0x40003400

080028dc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	1c99      	adds	r1, r3, #2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6251      	str	r1, [r2, #36]	@ 0x24
 80028ee:	881a      	ldrh	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d113      	bne.n	8002936 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800291c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002922:	b29b      	uxth	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d106      	bne.n	8002936 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7fe f875 	bl	8000a20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294c:	1c99      	adds	r1, r3, #2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6251      	str	r1, [r2, #36]	@ 0x24
 8002952:	8819      	ldrh	r1, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1d      	ldr	r2, [pc, #116]	@ (80029d0 <I2SEx_TxISR_I2SExt+0x90>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <I2SEx_TxISR_I2SExt+0x22>
 800295e:	4b1d      	ldr	r3, [pc, #116]	@ (80029d4 <I2SEx_TxISR_I2SExt+0x94>)
 8002960:	e001      	b.n	8002966 <I2SEx_TxISR_I2SExt+0x26>
 8002962:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002966:	460a      	mov	r2, r1
 8002968:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d121      	bne.n	80029c6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a12      	ldr	r2, [pc, #72]	@ (80029d0 <I2SEx_TxISR_I2SExt+0x90>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d101      	bne.n	8002990 <I2SEx_TxISR_I2SExt+0x50>
 800298c:	4b11      	ldr	r3, [pc, #68]	@ (80029d4 <I2SEx_TxISR_I2SExt+0x94>)
 800298e:	e001      	b.n	8002994 <I2SEx_TxISR_I2SExt+0x54>
 8002990:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	490d      	ldr	r1, [pc, #52]	@ (80029d0 <I2SEx_TxISR_I2SExt+0x90>)
 800299c:	428b      	cmp	r3, r1
 800299e:	d101      	bne.n	80029a4 <I2SEx_TxISR_I2SExt+0x64>
 80029a0:	4b0c      	ldr	r3, [pc, #48]	@ (80029d4 <I2SEx_TxISR_I2SExt+0x94>)
 80029a2:	e001      	b.n	80029a8 <I2SEx_TxISR_I2SExt+0x68>
 80029a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80029ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d106      	bne.n	80029c6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7fe f82d 	bl	8000a20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40003800 	.word	0x40003800
 80029d4:	40003400 	.word	0x40003400

080029d8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68d8      	ldr	r0, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ea:	1c99      	adds	r1, r3, #2
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80029f0:	b282      	uxth	r2, r0
 80029f2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d113      	bne.n	8002a34 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a1a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fd fff6 	bl	8000a20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a20      	ldr	r2, [pc, #128]	@ (8002acc <I2SEx_RxISR_I2SExt+0x90>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <I2SEx_RxISR_I2SExt+0x16>
 8002a4e:	4b20      	ldr	r3, [pc, #128]	@ (8002ad0 <I2SEx_RxISR_I2SExt+0x94>)
 8002a50:	e001      	b.n	8002a56 <I2SEx_RxISR_I2SExt+0x1a>
 8002a52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a56:	68d8      	ldr	r0, [r3, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	1c99      	adds	r1, r3, #2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002a62:	b282      	uxth	r2, r0
 8002a64:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d121      	bne.n	8002ac2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a12      	ldr	r2, [pc, #72]	@ (8002acc <I2SEx_RxISR_I2SExt+0x90>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d101      	bne.n	8002a8c <I2SEx_RxISR_I2SExt+0x50>
 8002a88:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <I2SEx_RxISR_I2SExt+0x94>)
 8002a8a:	e001      	b.n	8002a90 <I2SEx_RxISR_I2SExt+0x54>
 8002a8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	490d      	ldr	r1, [pc, #52]	@ (8002acc <I2SEx_RxISR_I2SExt+0x90>)
 8002a98:	428b      	cmp	r3, r1
 8002a9a:	d101      	bne.n	8002aa0 <I2SEx_RxISR_I2SExt+0x64>
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad0 <I2SEx_RxISR_I2SExt+0x94>)
 8002a9e:	e001      	b.n	8002aa4 <I2SEx_RxISR_I2SExt+0x68>
 8002aa0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002aa4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002aa8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d106      	bne.n	8002ac2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7fd ffaf 	bl	8000a20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40003800 	.word	0x40003800
 8002ad0:	40003400 	.word	0x40003400

08002ad4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e267      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d075      	beq.n	8002bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af2:	4b88      	ldr	r3, [pc, #544]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d00c      	beq.n	8002b18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002afe:	4b85      	ldr	r3, [pc, #532]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d112      	bne.n	8002b30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0a:	4b82      	ldr	r3, [pc, #520]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b16:	d10b      	bne.n	8002b30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b18:	4b7e      	ldr	r3, [pc, #504]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d05b      	beq.n	8002bdc <HAL_RCC_OscConfig+0x108>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d157      	bne.n	8002bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e242      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b38:	d106      	bne.n	8002b48 <HAL_RCC_OscConfig+0x74>
 8002b3a:	4b76      	ldr	r3, [pc, #472]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a75      	ldr	r2, [pc, #468]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e01d      	b.n	8002b84 <HAL_RCC_OscConfig+0xb0>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x98>
 8002b52:	4b70      	ldr	r3, [pc, #448]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a6f      	ldr	r2, [pc, #444]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a6c      	ldr	r2, [pc, #432]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e00b      	b.n	8002b84 <HAL_RCC_OscConfig+0xb0>
 8002b6c:	4b69      	ldr	r3, [pc, #420]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a68      	ldr	r2, [pc, #416]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b66      	ldr	r3, [pc, #408]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a65      	ldr	r2, [pc, #404]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d013      	beq.n	8002bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe f9f2 	bl	8000f74 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b94:	f7fe f9ee 	bl	8000f74 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e207      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b5b      	ldr	r3, [pc, #364]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0xc0>
 8002bb2:	e014      	b.n	8002bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe f9de 	bl	8000f74 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bbc:	f7fe f9da 	bl	8000f74 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	@ 0x64
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e1f3      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bce:	4b51      	ldr	r3, [pc, #324]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0xe8>
 8002bda:	e000      	b.n	8002bde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d063      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bea:	4b4a      	ldr	r3, [pc, #296]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bf6:	4b47      	ldr	r3, [pc, #284]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d11c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c02:	4b44      	ldr	r3, [pc, #272]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d116      	bne.n	8002c3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	4b41      	ldr	r3, [pc, #260]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_RCC_OscConfig+0x152>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e1c7      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c26:	4b3b      	ldr	r3, [pc, #236]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4937      	ldr	r1, [pc, #220]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3a:	e03a      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d020      	beq.n	8002c86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c44:	4b34      	ldr	r3, [pc, #208]	@ (8002d18 <HAL_RCC_OscConfig+0x244>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4a:	f7fe f993 	bl	8000f74 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c52:	f7fe f98f 	bl	8000f74 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e1a8      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c64:	4b2b      	ldr	r3, [pc, #172]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c70:	4b28      	ldr	r3, [pc, #160]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4925      	ldr	r1, [pc, #148]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	600b      	str	r3, [r1, #0]
 8002c84:	e015      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c86:	4b24      	ldr	r3, [pc, #144]	@ (8002d18 <HAL_RCC_OscConfig+0x244>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe f972 	bl	8000f74 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c94:	f7fe f96e 	bl	8000f74 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e187      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d036      	beq.n	8002d2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d016      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc6:	4b15      	ldr	r3, [pc, #84]	@ (8002d1c <HAL_RCC_OscConfig+0x248>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ccc:	f7fe f952 	bl	8000f74 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd4:	f7fe f94e 	bl	8000f74 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e167      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x200>
 8002cf2:	e01b      	b.n	8002d2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf4:	4b09      	ldr	r3, [pc, #36]	@ (8002d1c <HAL_RCC_OscConfig+0x248>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfa:	f7fe f93b 	bl	8000f74 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d00:	e00e      	b.n	8002d20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d02:	f7fe f937 	bl	8000f74 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d907      	bls.n	8002d20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e150      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
 8002d14:	40023800 	.word	0x40023800
 8002d18:	42470000 	.word	0x42470000
 8002d1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d20:	4b88      	ldr	r3, [pc, #544]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ea      	bne.n	8002d02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8097 	beq.w	8002e68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3e:	4b81      	ldr	r3, [pc, #516]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10f      	bne.n	8002d6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	4a7c      	ldr	r2, [pc, #496]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6a:	4b77      	ldr	r3, [pc, #476]	@ (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d118      	bne.n	8002da8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d76:	4b74      	ldr	r3, [pc, #464]	@ (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a73      	ldr	r2, [pc, #460]	@ (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d82:	f7fe f8f7 	bl	8000f74 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8a:	f7fe f8f3 	bl	8000f74 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e10c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d106      	bne.n	8002dbe <HAL_RCC_OscConfig+0x2ea>
 8002db0:	4b64      	ldr	r3, [pc, #400]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db4:	4a63      	ldr	r2, [pc, #396]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dbc:	e01c      	b.n	8002df8 <HAL_RCC_OscConfig+0x324>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b05      	cmp	r3, #5
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x30c>
 8002dc6:	4b5f      	ldr	r3, [pc, #380]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dca:	4a5e      	ldr	r2, [pc, #376]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	f043 0304 	orr.w	r3, r3, #4
 8002dd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd6:	4a5b      	ldr	r2, [pc, #364]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dde:	e00b      	b.n	8002df8 <HAL_RCC_OscConfig+0x324>
 8002de0:	4b58      	ldr	r3, [pc, #352]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de4:	4a57      	ldr	r2, [pc, #348]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002de6:	f023 0301 	bic.w	r3, r3, #1
 8002dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dec:	4b55      	ldr	r3, [pc, #340]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df0:	4a54      	ldr	r2, [pc, #336]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002df2:	f023 0304 	bic.w	r3, r3, #4
 8002df6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d015      	beq.n	8002e2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7fe f8b8 	bl	8000f74 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e08:	f7fe f8b4 	bl	8000f74 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e0cb      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1e:	4b49      	ldr	r3, [pc, #292]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0ee      	beq.n	8002e08 <HAL_RCC_OscConfig+0x334>
 8002e2a:	e014      	b.n	8002e56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2c:	f7fe f8a2 	bl	8000f74 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e32:	e00a      	b.n	8002e4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e34:	f7fe f89e 	bl	8000f74 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e0b5      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1ee      	bne.n	8002e34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5c:	4b39      	ldr	r3, [pc, #228]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	4a38      	ldr	r2, [pc, #224]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80a1 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e72:	4b34      	ldr	r3, [pc, #208]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d05c      	beq.n	8002f38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d141      	bne.n	8002f0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e86:	4b31      	ldr	r3, [pc, #196]	@ (8002f4c <HAL_RCC_OscConfig+0x478>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fe f872 	bl	8000f74 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e94:	f7fe f86e 	bl	8000f74 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e087      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	4b27      	ldr	r3, [pc, #156]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	019b      	lsls	r3, r3, #6
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec8:	085b      	lsrs	r3, r3, #1
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	041b      	lsls	r3, r3, #16
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	061b      	lsls	r3, r3, #24
 8002ed6:	491b      	ldr	r1, [pc, #108]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002edc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f4c <HAL_RCC_OscConfig+0x478>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee2:	f7fe f847 	bl	8000f74 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eea:	f7fe f843 	bl	8000f74 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e05c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efc:	4b11      	ldr	r3, [pc, #68]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x416>
 8002f08:	e054      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0a:	4b10      	ldr	r3, [pc, #64]	@ (8002f4c <HAL_RCC_OscConfig+0x478>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fe f830 	bl	8000f74 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f18:	f7fe f82c 	bl	8000f74 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e045      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x444>
 8002f36:	e03d      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d107      	bne.n	8002f50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e038      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40007000 	.word	0x40007000
 8002f4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f50:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc0 <HAL_RCC_OscConfig+0x4ec>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d028      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d121      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d11a      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f80:	4013      	ands	r3, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d111      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002faa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800

08002fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0cc      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b68      	ldr	r3, [pc, #416]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d90c      	bls.n	8003000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b65      	ldr	r3, [pc, #404]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b63      	ldr	r3, [pc, #396]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0b8      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003018:	4b59      	ldr	r3, [pc, #356]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4a58      	ldr	r2, [pc, #352]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003022:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003030:	4b53      	ldr	r3, [pc, #332]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4a52      	ldr	r2, [pc, #328]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800303a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303c:	4b50      	ldr	r3, [pc, #320]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	494d      	ldr	r1, [pc, #308]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d044      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	4b47      	ldr	r3, [pc, #284]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d119      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e07f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d003      	beq.n	8003082 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800307e:	2b03      	cmp	r3, #3
 8003080:	d107      	bne.n	8003092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003082:	4b3f      	ldr	r3, [pc, #252]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e06f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003092:	4b3b      	ldr	r3, [pc, #236]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e067      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a2:	4b37      	ldr	r3, [pc, #220]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f023 0203 	bic.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4934      	ldr	r1, [pc, #208]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b4:	f7fd ff5e 	bl	8000f74 <HAL_GetTick>
 80030b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030bc:	f7fd ff5a 	bl	8000f74 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e04f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 020c 	and.w	r2, r3, #12
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d1eb      	bne.n	80030bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e4:	4b25      	ldr	r3, [pc, #148]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d20c      	bcs.n	800310c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b22      	ldr	r3, [pc, #136]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b20      	ldr	r3, [pc, #128]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e032      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003118:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4916      	ldr	r1, [pc, #88]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003136:	4b12      	ldr	r3, [pc, #72]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	490e      	ldr	r1, [pc, #56]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800314a:	f000 f821 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 800314e:	4602      	mov	r2, r0
 8003150:	4b0b      	ldr	r3, [pc, #44]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	490a      	ldr	r1, [pc, #40]	@ (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 800315c:	5ccb      	ldrb	r3, [r1, r3]
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	4a09      	ldr	r2, [pc, #36]	@ (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003166:	4b09      	ldr	r3, [pc, #36]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd febe 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40023c00 	.word	0x40023c00
 8003180:	40023800 	.word	0x40023800
 8003184:	08004534 	.word	0x08004534
 8003188:	20000000 	.word	0x20000000
 800318c:	20000004 	.word	0x20000004

08003190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003194:	b094      	sub	sp, #80	@ 0x50
 8003196:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	647b      	str	r3, [r7, #68]	@ 0x44
 800319c:	2300      	movs	r3, #0
 800319e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031a0:	2300      	movs	r3, #0
 80031a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a8:	4b79      	ldr	r3, [pc, #484]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x200>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d00d      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x40>
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	f200 80e1 	bhi.w	800337c <HAL_RCC_GetSysClockFreq+0x1ec>
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0x34>
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d003      	beq.n	80031ca <HAL_RCC_GetSysClockFreq+0x3a>
 80031c2:	e0db      	b.n	800337c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031c4:	4b73      	ldr	r3, [pc, #460]	@ (8003394 <HAL_RCC_GetSysClockFreq+0x204>)
 80031c6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80031c8:	e0db      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ca:	4b73      	ldr	r3, [pc, #460]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x208>)
 80031cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031ce:	e0d8      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x200>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031da:	4b6d      	ldr	r3, [pc, #436]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x200>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d063      	beq.n	80032ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	099b      	lsrs	r3, r3, #6
 80031ec:	2200      	movs	r2, #0
 80031ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80031f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80031fa:	2300      	movs	r3, #0
 80031fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80031fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003202:	4622      	mov	r2, r4
 8003204:	462b      	mov	r3, r5
 8003206:	f04f 0000 	mov.w	r0, #0
 800320a:	f04f 0100 	mov.w	r1, #0
 800320e:	0159      	lsls	r1, r3, #5
 8003210:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003214:	0150      	lsls	r0, r2, #5
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4621      	mov	r1, r4
 800321c:	1a51      	subs	r1, r2, r1
 800321e:	6139      	str	r1, [r7, #16]
 8003220:	4629      	mov	r1, r5
 8003222:	eb63 0301 	sbc.w	r3, r3, r1
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003234:	4659      	mov	r1, fp
 8003236:	018b      	lsls	r3, r1, #6
 8003238:	4651      	mov	r1, sl
 800323a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800323e:	4651      	mov	r1, sl
 8003240:	018a      	lsls	r2, r1, #6
 8003242:	4651      	mov	r1, sl
 8003244:	ebb2 0801 	subs.w	r8, r2, r1
 8003248:	4659      	mov	r1, fp
 800324a:	eb63 0901 	sbc.w	r9, r3, r1
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800325a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800325e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003262:	4690      	mov	r8, r2
 8003264:	4699      	mov	r9, r3
 8003266:	4623      	mov	r3, r4
 8003268:	eb18 0303 	adds.w	r3, r8, r3
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	462b      	mov	r3, r5
 8003270:	eb49 0303 	adc.w	r3, r9, r3
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003282:	4629      	mov	r1, r5
 8003284:	024b      	lsls	r3, r1, #9
 8003286:	4621      	mov	r1, r4
 8003288:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800328c:	4621      	mov	r1, r4
 800328e:	024a      	lsls	r2, r1, #9
 8003290:	4610      	mov	r0, r2
 8003292:	4619      	mov	r1, r3
 8003294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003296:	2200      	movs	r2, #0
 8003298:	62bb      	str	r3, [r7, #40]	@ 0x28
 800329a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800329c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032a0:	f7fc ff92 	bl	80001c8 <__aeabi_uldivmod>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4613      	mov	r3, r2
 80032aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032ac:	e058      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ae:	4b38      	ldr	r3, [pc, #224]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	099b      	lsrs	r3, r3, #6
 80032b4:	2200      	movs	r2, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	4611      	mov	r1, r2
 80032ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032be:	623b      	str	r3, [r7, #32]
 80032c0:	2300      	movs	r3, #0
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80032c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032c8:	4642      	mov	r2, r8
 80032ca:	464b      	mov	r3, r9
 80032cc:	f04f 0000 	mov.w	r0, #0
 80032d0:	f04f 0100 	mov.w	r1, #0
 80032d4:	0159      	lsls	r1, r3, #5
 80032d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032da:	0150      	lsls	r0, r2, #5
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4641      	mov	r1, r8
 80032e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80032e6:	4649      	mov	r1, r9
 80032e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003300:	ebb2 040a 	subs.w	r4, r2, sl
 8003304:	eb63 050b 	sbc.w	r5, r3, fp
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	00eb      	lsls	r3, r5, #3
 8003312:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003316:	00e2      	lsls	r2, r4, #3
 8003318:	4614      	mov	r4, r2
 800331a:	461d      	mov	r5, r3
 800331c:	4643      	mov	r3, r8
 800331e:	18e3      	adds	r3, r4, r3
 8003320:	603b      	str	r3, [r7, #0]
 8003322:	464b      	mov	r3, r9
 8003324:	eb45 0303 	adc.w	r3, r5, r3
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003336:	4629      	mov	r1, r5
 8003338:	028b      	lsls	r3, r1, #10
 800333a:	4621      	mov	r1, r4
 800333c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003340:	4621      	mov	r1, r4
 8003342:	028a      	lsls	r2, r1, #10
 8003344:	4610      	mov	r0, r2
 8003346:	4619      	mov	r1, r3
 8003348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800334a:	2200      	movs	r2, #0
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	61fa      	str	r2, [r7, #28]
 8003350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003354:	f7fc ff38 	bl	80001c8 <__aeabi_uldivmod>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4613      	mov	r3, r2
 800335e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003360:	4b0b      	ldr	r3, [pc, #44]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x200>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	0c1b      	lsrs	r3, r3, #16
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	3301      	adds	r3, #1
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003370:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800337a:	e002      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800337c:	4b05      	ldr	r3, [pc, #20]	@ (8003394 <HAL_RCC_GetSysClockFreq+0x204>)
 800337e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003380:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003384:	4618      	mov	r0, r3
 8003386:	3750      	adds	r7, #80	@ 0x50
 8003388:	46bd      	mov	sp, r7
 800338a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800338e:	bf00      	nop
 8003390:	40023800 	.word	0x40023800
 8003394:	00f42400 	.word	0x00f42400
 8003398:	007a1200 	.word	0x007a1200

0800339c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a0:	4b03      	ldr	r3, [pc, #12]	@ (80033b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20000000 	.word	0x20000000

080033b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033b8:	f7ff fff0 	bl	800339c <HAL_RCC_GetHCLKFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b05      	ldr	r3, [pc, #20]	@ (80033d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	0a9b      	lsrs	r3, r3, #10
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	4903      	ldr	r1, [pc, #12]	@ (80033d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ca:	5ccb      	ldrb	r3, [r1, r3]
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40023800 	.word	0x40023800
 80033d8:	08004544 	.word	0x08004544

080033dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033e0:	f7ff ffdc 	bl	800339c <HAL_RCC_GetHCLKFreq>
 80033e4:	4602      	mov	r2, r0
 80033e6:	4b05      	ldr	r3, [pc, #20]	@ (80033fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	0b5b      	lsrs	r3, r3, #13
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	4903      	ldr	r1, [pc, #12]	@ (8003400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033f2:	5ccb      	ldrb	r3, [r1, r3]
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40023800 	.word	0x40023800
 8003400:	08004544 	.word	0x08004544

08003404 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d105      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003428:	2b00      	cmp	r3, #0
 800342a:	d035      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800342c:	4b62      	ldr	r3, [pc, #392]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003432:	f7fd fd9f 	bl	8000f74 <HAL_GetTick>
 8003436:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003438:	e008      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800343a:	f7fd fd9b 	bl	8000f74 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e0b0      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800344c:	4b5b      	ldr	r3, [pc, #364]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f0      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	019a      	lsls	r2, r3, #6
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	071b      	lsls	r3, r3, #28
 8003464:	4955      	ldr	r1, [pc, #340]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800346c:	4b52      	ldr	r3, [pc, #328]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003472:	f7fd fd7f 	bl	8000f74 <HAL_GetTick>
 8003476:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003478:	e008      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800347a:	f7fd fd7b 	bl	8000f74 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e090      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800348c:	4b4b      	ldr	r3, [pc, #300]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8083 	beq.w	80035ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	4b44      	ldr	r3, [pc, #272]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	4a43      	ldr	r2, [pc, #268]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034b6:	4b41      	ldr	r3, [pc, #260]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80034c2:	4b3f      	ldr	r3, [pc, #252]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a3e      	ldr	r2, [pc, #248]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034ce:	f7fd fd51 	bl	8000f74 <HAL_GetTick>
 80034d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034d4:	e008      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034d6:	f7fd fd4d 	bl	8000f74 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e062      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034e8:	4b35      	ldr	r3, [pc, #212]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034f4:	4b31      	ldr	r3, [pc, #196]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d02f      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	429a      	cmp	r2, r3
 8003510:	d028      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003512:	4b2a      	ldr	r3, [pc, #168]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003516:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800351a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800351c:	4b29      	ldr	r3, [pc, #164]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003522:	4b28      	ldr	r3, [pc, #160]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003528:	4a24      	ldr	r2, [pc, #144]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800352e:	4b23      	ldr	r3, [pc, #140]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b01      	cmp	r3, #1
 8003538:	d114      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800353a:	f7fd fd1b 	bl	8000f74 <HAL_GetTick>
 800353e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003540:	e00a      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003542:	f7fd fd17 	bl	8000f74 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003550:	4293      	cmp	r3, r2
 8003552:	d901      	bls.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e02a      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003558:	4b18      	ldr	r3, [pc, #96]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800355a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0ee      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800356c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003570:	d10d      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003572:	4b12      	ldr	r3, [pc, #72]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003582:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003586:	490d      	ldr	r1, [pc, #52]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003588:	4313      	orrs	r3, r2
 800358a:	608b      	str	r3, [r1, #8]
 800358c:	e005      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800358e:	4b0b      	ldr	r3, [pc, #44]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	4a0a      	ldr	r2, [pc, #40]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003594:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003598:	6093      	str	r3, [r2, #8]
 800359a:	4b08      	ldr	r3, [pc, #32]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800359c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a6:	4905      	ldr	r1, [pc, #20]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	42470068 	.word	0x42470068
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40007000 	.word	0x40007000
 80035c4:	42470e40 	.word	0x42470e40

080035c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d13f      	bne.n	8003666 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80035e6:	4b24      	ldr	r3, [pc, #144]	@ (8003678 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d006      	beq.n	8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035fc:	d12f      	bne.n	800365e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80035fe:	4b1f      	ldr	r3, [pc, #124]	@ (800367c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003600:	617b      	str	r3, [r7, #20]
          break;
 8003602:	e02f      	b.n	8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003604:	4b1c      	ldr	r3, [pc, #112]	@ (8003678 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800360c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003610:	d108      	bne.n	8003624 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003612:	4b19      	ldr	r3, [pc, #100]	@ (8003678 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800361a:	4a19      	ldr	r2, [pc, #100]	@ (8003680 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800361c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	e007      	b.n	8003634 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003624:	4b14      	ldr	r3, [pc, #80]	@ (8003678 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800362c:	4a15      	ldr	r2, [pc, #84]	@ (8003684 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800362e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003632:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003634:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800363a:	099b      	lsrs	r3, r3, #6
 800363c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003648:	4b0b      	ldr	r3, [pc, #44]	@ (8003678 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800364a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800364e:	0f1b      	lsrs	r3, r3, #28
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	fbb2 f3f3 	udiv	r3, r2, r3
 800365a:	617b      	str	r3, [r7, #20]
          break;
 800365c:	e002      	b.n	8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]
          break;
 8003662:	bf00      	nop
        }
      }
      break;
 8003664:	e000      	b.n	8003668 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8003666:	bf00      	nop
    }
  }
  return frequency;
 8003668:	697b      	ldr	r3, [r7, #20]
}
 800366a:	4618      	mov	r0, r3
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800
 800367c:	00bb8000 	.word	0x00bb8000
 8003680:	007a1200 	.word	0x007a1200
 8003684:	00f42400 	.word	0x00f42400

08003688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e042      	b.n	8003720 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd fb20 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2224      	movs	r2, #36	@ 0x24
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fc85 	bl	8003fdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b0ba      	sub	sp, #232	@ 0xe8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800374e:	2300      	movs	r3, #0
 8003750:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003754:	2300      	movs	r3, #0
 8003756:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800375a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003766:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10f      	bne.n	800378e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800376e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <HAL_UART_IRQHandler+0x66>
 800377a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fb69 	bl	8003e5e <UART_Receive_IT>
      return;
 800378c:	e25b      	b.n	8003c46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800378e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 80de 	beq.w	8003954 <HAL_UART_IRQHandler+0x22c>
 8003798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d106      	bne.n	80037b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80d1 	beq.w	8003954 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00b      	beq.n	80037d6 <HAL_UART_IRQHandler+0xae>
 80037be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ce:	f043 0201 	orr.w	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00b      	beq.n	80037fa <HAL_UART_IRQHandler+0xd2>
 80037e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f2:	f043 0202 	orr.w	r2, r3, #2
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00b      	beq.n	800381e <HAL_UART_IRQHandler+0xf6>
 8003806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003816:	f043 0204 	orr.w	r2, r3, #4
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800381e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d011      	beq.n	800384e <HAL_UART_IRQHandler+0x126>
 800382a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d105      	bne.n	8003842 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	f043 0208 	orr.w	r2, r3, #8
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 81f2 	beq.w	8003c3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_UART_IRQHandler+0x14e>
 8003864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 faf4 	bl	8003e5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003880:	2b40      	cmp	r3, #64	@ 0x40
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d103      	bne.n	80038a2 <HAL_UART_IRQHandler+0x17a>
 800389a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d04f      	beq.n	8003942 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f9fc 	bl	8003ca0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b2:	2b40      	cmp	r3, #64	@ 0x40
 80038b4:	d141      	bne.n	800393a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3314      	adds	r3, #20
 80038bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038c4:	e853 3f00 	ldrex	r3, [r3]
 80038c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3314      	adds	r3, #20
 80038de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038f2:	e841 2300 	strex	r3, r2, [r1]
 80038f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1d9      	bne.n	80038b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d013      	beq.n	8003932 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390e:	4a7e      	ldr	r2, [pc, #504]	@ (8003b08 <HAL_UART_IRQHandler+0x3e0>)
 8003910:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003916:	4618      	mov	r0, r3
 8003918:	f7fd fdc0 	bl	800149c <HAL_DMA_Abort_IT>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d016      	beq.n	8003950 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800392c:	4610      	mov	r0, r2
 800392e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003930:	e00e      	b.n	8003950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f99e 	bl	8003c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003938:	e00a      	b.n	8003950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f99a 	bl	8003c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003940:	e006      	b.n	8003950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f996 	bl	8003c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800394e:	e175      	b.n	8003c3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003950:	bf00      	nop
    return;
 8003952:	e173      	b.n	8003c3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003958:	2b01      	cmp	r3, #1
 800395a:	f040 814f 	bne.w	8003bfc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800395e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8148 	beq.w	8003bfc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800396c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 8141 	beq.w	8003bfc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800397a:	2300      	movs	r3, #0
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399a:	2b40      	cmp	r3, #64	@ 0x40
 800399c:	f040 80b6 	bne.w	8003b0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 8145 	beq.w	8003c40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039be:	429a      	cmp	r2, r3
 80039c0:	f080 813e 	bcs.w	8003c40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039d6:	f000 8088 	beq.w	8003aea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	330c      	adds	r3, #12
 80039e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	330c      	adds	r3, #12
 8003a02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1d9      	bne.n	80039da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3314      	adds	r3, #20
 8003a2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3314      	adds	r3, #20
 8003a46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1e1      	bne.n	8003a26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3314      	adds	r3, #20
 8003a68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3314      	adds	r3, #20
 8003a82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e3      	bne.n	8003a62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	330c      	adds	r3, #12
 8003aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ab2:	e853 3f00 	ldrex	r3, [r3]
 8003ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aba:	f023 0310 	bic.w	r3, r3, #16
 8003abe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	330c      	adds	r3, #12
 8003ac8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003acc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ace:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ad2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ad4:	e841 2300 	strex	r3, r2, [r1]
 8003ad8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ada:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e3      	bne.n	8003aa8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fd fc69 	bl	80013bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2202      	movs	r2, #2
 8003aee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	4619      	mov	r1, r3
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f8c1 	bl	8003c88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b06:	e09b      	b.n	8003c40 <HAL_UART_IRQHandler+0x518>
 8003b08:	08003d67 	.word	0x08003d67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 808e 	beq.w	8003c44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8089 	beq.w	8003c44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	330c      	adds	r3, #12
 8003b38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b56:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b5e:	e841 2300 	strex	r3, r2, [r1]
 8003b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1e3      	bne.n	8003b32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3314      	adds	r3, #20
 8003b70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	623b      	str	r3, [r7, #32]
   return(result);
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3314      	adds	r3, #20
 8003b8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b96:	e841 2300 	strex	r3, r2, [r1]
 8003b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1e3      	bne.n	8003b6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0310 	bic.w	r3, r3, #16
 8003bc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003bd4:	61fa      	str	r2, [r7, #28]
 8003bd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	69b9      	ldr	r1, [r7, #24]
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	617b      	str	r3, [r7, #20]
   return(result);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e3      	bne.n	8003bb0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f847 	bl	8003c88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bfa:	e023      	b.n	8003c44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d009      	beq.n	8003c1c <HAL_UART_IRQHandler+0x4f4>
 8003c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f8ba 	bl	8003d8e <UART_Transmit_IT>
    return;
 8003c1a:	e014      	b.n	8003c46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00e      	beq.n	8003c46 <HAL_UART_IRQHandler+0x51e>
 8003c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f8fa 	bl	8003e2e <UART_EndTransmit_IT>
    return;
 8003c3a:	e004      	b.n	8003c46 <HAL_UART_IRQHandler+0x51e>
    return;
 8003c3c:	bf00      	nop
 8003c3e:	e002      	b.n	8003c46 <HAL_UART_IRQHandler+0x51e>
      return;
 8003c40:	bf00      	nop
 8003c42:	e000      	b.n	8003c46 <HAL_UART_IRQHandler+0x51e>
      return;
 8003c44:	bf00      	nop
  }
}
 8003c46:	37e8      	adds	r7, #232	@ 0xe8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b095      	sub	sp, #84	@ 0x54
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	330c      	adds	r3, #12
 8003cae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	330c      	adds	r3, #12
 8003cc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cc8:	643a      	str	r2, [r7, #64]	@ 0x40
 8003cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ccc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cd0:	e841 2300 	strex	r3, r2, [r1]
 8003cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e5      	bne.n	8003ca8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3314      	adds	r3, #20
 8003ce2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	e853 3f00 	ldrex	r3, [r3]
 8003cea:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3314      	adds	r3, #20
 8003cfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d04:	e841 2300 	strex	r3, r2, [r1]
 8003d08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e5      	bne.n	8003cdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d119      	bne.n	8003d4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f023 0310 	bic.w	r3, r3, #16
 8003d2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	330c      	adds	r3, #12
 8003d36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d38:	61ba      	str	r2, [r7, #24]
 8003d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6979      	ldr	r1, [r7, #20]
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	613b      	str	r3, [r7, #16]
   return(result);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e5      	bne.n	8003d18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d5a:	bf00      	nop
 8003d5c:	3754      	adds	r7, #84	@ 0x54
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f7ff ff77 	bl	8003c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b085      	sub	sp, #20
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b21      	cmp	r3, #33	@ 0x21
 8003da0:	d13e      	bne.n	8003e20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003daa:	d114      	bne.n	8003dd6 <UART_Transmit_IT+0x48>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d110      	bne.n	8003dd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	1c9a      	adds	r2, r3, #2
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	621a      	str	r2, [r3, #32]
 8003dd4:	e008      	b.n	8003de8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	1c59      	adds	r1, r3, #1
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6211      	str	r1, [r2, #32]
 8003de0:	781a      	ldrb	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4619      	mov	r1, r3
 8003df6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10f      	bne.n	8003e1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e000      	b.n	8003e22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e20:	2302      	movs	r3, #2
  }
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff fefc 	bl	8003c4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b08c      	sub	sp, #48	@ 0x30
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b22      	cmp	r3, #34	@ 0x22
 8003e70:	f040 80ae 	bne.w	8003fd0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e7c:	d117      	bne.n	8003eae <UART_Receive_IT+0x50>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d113      	bne.n	8003eae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea6:	1c9a      	adds	r2, r3, #2
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	629a      	str	r2, [r3, #40]	@ 0x28
 8003eac:	e026      	b.n	8003efc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec0:	d007      	beq.n	8003ed2 <UART_Receive_IT+0x74>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <UART_Receive_IT+0x82>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	e008      	b.n	8003ef2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d15d      	bne.n	8003fcc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0220 	bic.w	r2, r2, #32
 8003f1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695a      	ldr	r2, [r3, #20]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0201 	bic.w	r2, r2, #1
 8003f3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d135      	bne.n	8003fc2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	330c      	adds	r3, #12
 8003f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	e853 3f00 	ldrex	r3, [r3]
 8003f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f023 0310 	bic.w	r3, r3, #16
 8003f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	330c      	adds	r3, #12
 8003f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f7c:	623a      	str	r2, [r7, #32]
 8003f7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	69f9      	ldr	r1, [r7, #28]
 8003f82:	6a3a      	ldr	r2, [r7, #32]
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e5      	bne.n	8003f5c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	2b10      	cmp	r3, #16
 8003f9c:	d10a      	bne.n	8003fb4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fb8:	4619      	mov	r1, r3
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fe64 	bl	8003c88 <HAL_UARTEx_RxEventCallback>
 8003fc0:	e002      	b.n	8003fc8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff fe4c 	bl	8003c60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e002      	b.n	8003fd2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e000      	b.n	8003fd2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
  }
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3730      	adds	r7, #48	@ 0x30
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fe0:	b0c0      	sub	sp, #256	@ 0x100
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff8:	68d9      	ldr	r1, [r3, #12]
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	ea40 0301 	orr.w	r3, r0, r1
 8004004:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	431a      	orrs	r2, r3
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	431a      	orrs	r2, r3
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004034:	f021 010c 	bic.w	r1, r1, #12
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004042:	430b      	orrs	r3, r1
 8004044:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004056:	6999      	ldr	r1, [r3, #24]
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	ea40 0301 	orr.w	r3, r0, r1
 8004062:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	4b8f      	ldr	r3, [pc, #572]	@ (80042a8 <UART_SetConfig+0x2cc>)
 800406c:	429a      	cmp	r2, r3
 800406e:	d005      	beq.n	800407c <UART_SetConfig+0xa0>
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	4b8d      	ldr	r3, [pc, #564]	@ (80042ac <UART_SetConfig+0x2d0>)
 8004078:	429a      	cmp	r2, r3
 800407a:	d104      	bne.n	8004086 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800407c:	f7ff f9ae 	bl	80033dc <HAL_RCC_GetPCLK2Freq>
 8004080:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004084:	e003      	b.n	800408e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004086:	f7ff f995 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 800408a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800408e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004098:	f040 810c 	bne.w	80042b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800409c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040ae:	4622      	mov	r2, r4
 80040b0:	462b      	mov	r3, r5
 80040b2:	1891      	adds	r1, r2, r2
 80040b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040b6:	415b      	adcs	r3, r3
 80040b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040be:	4621      	mov	r1, r4
 80040c0:	eb12 0801 	adds.w	r8, r2, r1
 80040c4:	4629      	mov	r1, r5
 80040c6:	eb43 0901 	adc.w	r9, r3, r1
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040de:	4690      	mov	r8, r2
 80040e0:	4699      	mov	r9, r3
 80040e2:	4623      	mov	r3, r4
 80040e4:	eb18 0303 	adds.w	r3, r8, r3
 80040e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040ec:	462b      	mov	r3, r5
 80040ee:	eb49 0303 	adc.w	r3, r9, r3
 80040f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004102:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004106:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800410a:	460b      	mov	r3, r1
 800410c:	18db      	adds	r3, r3, r3
 800410e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004110:	4613      	mov	r3, r2
 8004112:	eb42 0303 	adc.w	r3, r2, r3
 8004116:	657b      	str	r3, [r7, #84]	@ 0x54
 8004118:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800411c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004120:	f7fc f852 	bl	80001c8 <__aeabi_uldivmod>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4b61      	ldr	r3, [pc, #388]	@ (80042b0 <UART_SetConfig+0x2d4>)
 800412a:	fba3 2302 	umull	r2, r3, r3, r2
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	011c      	lsls	r4, r3, #4
 8004132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004136:	2200      	movs	r2, #0
 8004138:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800413c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004140:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004144:	4642      	mov	r2, r8
 8004146:	464b      	mov	r3, r9
 8004148:	1891      	adds	r1, r2, r2
 800414a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800414c:	415b      	adcs	r3, r3
 800414e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004150:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004154:	4641      	mov	r1, r8
 8004156:	eb12 0a01 	adds.w	sl, r2, r1
 800415a:	4649      	mov	r1, r9
 800415c:	eb43 0b01 	adc.w	fp, r3, r1
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800416c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004170:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004174:	4692      	mov	sl, r2
 8004176:	469b      	mov	fp, r3
 8004178:	4643      	mov	r3, r8
 800417a:	eb1a 0303 	adds.w	r3, sl, r3
 800417e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004182:	464b      	mov	r3, r9
 8004184:	eb4b 0303 	adc.w	r3, fp, r3
 8004188:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004198:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800419c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041a0:	460b      	mov	r3, r1
 80041a2:	18db      	adds	r3, r3, r3
 80041a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80041a6:	4613      	mov	r3, r2
 80041a8:	eb42 0303 	adc.w	r3, r2, r3
 80041ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80041ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041b6:	f7fc f807 	bl	80001c8 <__aeabi_uldivmod>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4611      	mov	r1, r2
 80041c0:	4b3b      	ldr	r3, [pc, #236]	@ (80042b0 <UART_SetConfig+0x2d4>)
 80041c2:	fba3 2301 	umull	r2, r3, r3, r1
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	2264      	movs	r2, #100	@ 0x64
 80041ca:	fb02 f303 	mul.w	r3, r2, r3
 80041ce:	1acb      	subs	r3, r1, r3
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041d6:	4b36      	ldr	r3, [pc, #216]	@ (80042b0 <UART_SetConfig+0x2d4>)
 80041d8:	fba3 2302 	umull	r2, r3, r3, r2
 80041dc:	095b      	lsrs	r3, r3, #5
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80041e4:	441c      	add	r4, r3
 80041e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041f8:	4642      	mov	r2, r8
 80041fa:	464b      	mov	r3, r9
 80041fc:	1891      	adds	r1, r2, r2
 80041fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004200:	415b      	adcs	r3, r3
 8004202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004204:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004208:	4641      	mov	r1, r8
 800420a:	1851      	adds	r1, r2, r1
 800420c:	6339      	str	r1, [r7, #48]	@ 0x30
 800420e:	4649      	mov	r1, r9
 8004210:	414b      	adcs	r3, r1
 8004212:	637b      	str	r3, [r7, #52]	@ 0x34
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004220:	4659      	mov	r1, fp
 8004222:	00cb      	lsls	r3, r1, #3
 8004224:	4651      	mov	r1, sl
 8004226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800422a:	4651      	mov	r1, sl
 800422c:	00ca      	lsls	r2, r1, #3
 800422e:	4610      	mov	r0, r2
 8004230:	4619      	mov	r1, r3
 8004232:	4603      	mov	r3, r0
 8004234:	4642      	mov	r2, r8
 8004236:	189b      	adds	r3, r3, r2
 8004238:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800423c:	464b      	mov	r3, r9
 800423e:	460a      	mov	r2, r1
 8004240:	eb42 0303 	adc.w	r3, r2, r3
 8004244:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004254:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004258:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800425c:	460b      	mov	r3, r1
 800425e:	18db      	adds	r3, r3, r3
 8004260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004262:	4613      	mov	r3, r2
 8004264:	eb42 0303 	adc.w	r3, r2, r3
 8004268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800426a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800426e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004272:	f7fb ffa9 	bl	80001c8 <__aeabi_uldivmod>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4b0d      	ldr	r3, [pc, #52]	@ (80042b0 <UART_SetConfig+0x2d4>)
 800427c:	fba3 1302 	umull	r1, r3, r3, r2
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	2164      	movs	r1, #100	@ 0x64
 8004284:	fb01 f303 	mul.w	r3, r1, r3
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	3332      	adds	r3, #50	@ 0x32
 800428e:	4a08      	ldr	r2, [pc, #32]	@ (80042b0 <UART_SetConfig+0x2d4>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	f003 0207 	and.w	r2, r3, #7
 800429a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4422      	add	r2, r4
 80042a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042a4:	e106      	b.n	80044b4 <UART_SetConfig+0x4d8>
 80042a6:	bf00      	nop
 80042a8:	40011000 	.word	0x40011000
 80042ac:	40011400 	.word	0x40011400
 80042b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042b8:	2200      	movs	r2, #0
 80042ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042c6:	4642      	mov	r2, r8
 80042c8:	464b      	mov	r3, r9
 80042ca:	1891      	adds	r1, r2, r2
 80042cc:	6239      	str	r1, [r7, #32]
 80042ce:	415b      	adcs	r3, r3
 80042d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042d6:	4641      	mov	r1, r8
 80042d8:	1854      	adds	r4, r2, r1
 80042da:	4649      	mov	r1, r9
 80042dc:	eb43 0501 	adc.w	r5, r3, r1
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	00eb      	lsls	r3, r5, #3
 80042ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ee:	00e2      	lsls	r2, r4, #3
 80042f0:	4614      	mov	r4, r2
 80042f2:	461d      	mov	r5, r3
 80042f4:	4643      	mov	r3, r8
 80042f6:	18e3      	adds	r3, r4, r3
 80042f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042fc:	464b      	mov	r3, r9
 80042fe:	eb45 0303 	adc.w	r3, r5, r3
 8004302:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004312:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004322:	4629      	mov	r1, r5
 8004324:	008b      	lsls	r3, r1, #2
 8004326:	4621      	mov	r1, r4
 8004328:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800432c:	4621      	mov	r1, r4
 800432e:	008a      	lsls	r2, r1, #2
 8004330:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004334:	f7fb ff48 	bl	80001c8 <__aeabi_uldivmod>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4b60      	ldr	r3, [pc, #384]	@ (80044c0 <UART_SetConfig+0x4e4>)
 800433e:	fba3 2302 	umull	r2, r3, r3, r2
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	011c      	lsls	r4, r3, #4
 8004346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800434a:	2200      	movs	r2, #0
 800434c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004350:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004354:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004358:	4642      	mov	r2, r8
 800435a:	464b      	mov	r3, r9
 800435c:	1891      	adds	r1, r2, r2
 800435e:	61b9      	str	r1, [r7, #24]
 8004360:	415b      	adcs	r3, r3
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004368:	4641      	mov	r1, r8
 800436a:	1851      	adds	r1, r2, r1
 800436c:	6139      	str	r1, [r7, #16]
 800436e:	4649      	mov	r1, r9
 8004370:	414b      	adcs	r3, r1
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004380:	4659      	mov	r1, fp
 8004382:	00cb      	lsls	r3, r1, #3
 8004384:	4651      	mov	r1, sl
 8004386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800438a:	4651      	mov	r1, sl
 800438c:	00ca      	lsls	r2, r1, #3
 800438e:	4610      	mov	r0, r2
 8004390:	4619      	mov	r1, r3
 8004392:	4603      	mov	r3, r0
 8004394:	4642      	mov	r2, r8
 8004396:	189b      	adds	r3, r3, r2
 8004398:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800439c:	464b      	mov	r3, r9
 800439e:	460a      	mov	r2, r1
 80043a0:	eb42 0303 	adc.w	r3, r2, r3
 80043a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043c0:	4649      	mov	r1, r9
 80043c2:	008b      	lsls	r3, r1, #2
 80043c4:	4641      	mov	r1, r8
 80043c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ca:	4641      	mov	r1, r8
 80043cc:	008a      	lsls	r2, r1, #2
 80043ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80043d2:	f7fb fef9 	bl	80001c8 <__aeabi_uldivmod>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4611      	mov	r1, r2
 80043dc:	4b38      	ldr	r3, [pc, #224]	@ (80044c0 <UART_SetConfig+0x4e4>)
 80043de:	fba3 2301 	umull	r2, r3, r3, r1
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	2264      	movs	r2, #100	@ 0x64
 80043e6:	fb02 f303 	mul.w	r3, r2, r3
 80043ea:	1acb      	subs	r3, r1, r3
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	3332      	adds	r3, #50	@ 0x32
 80043f0:	4a33      	ldr	r2, [pc, #204]	@ (80044c0 <UART_SetConfig+0x4e4>)
 80043f2:	fba2 2303 	umull	r2, r3, r2, r3
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043fc:	441c      	add	r4, r3
 80043fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004402:	2200      	movs	r2, #0
 8004404:	673b      	str	r3, [r7, #112]	@ 0x70
 8004406:	677a      	str	r2, [r7, #116]	@ 0x74
 8004408:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800440c:	4642      	mov	r2, r8
 800440e:	464b      	mov	r3, r9
 8004410:	1891      	adds	r1, r2, r2
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	415b      	adcs	r3, r3
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800441c:	4641      	mov	r1, r8
 800441e:	1851      	adds	r1, r2, r1
 8004420:	6039      	str	r1, [r7, #0]
 8004422:	4649      	mov	r1, r9
 8004424:	414b      	adcs	r3, r1
 8004426:	607b      	str	r3, [r7, #4]
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004434:	4659      	mov	r1, fp
 8004436:	00cb      	lsls	r3, r1, #3
 8004438:	4651      	mov	r1, sl
 800443a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800443e:	4651      	mov	r1, sl
 8004440:	00ca      	lsls	r2, r1, #3
 8004442:	4610      	mov	r0, r2
 8004444:	4619      	mov	r1, r3
 8004446:	4603      	mov	r3, r0
 8004448:	4642      	mov	r2, r8
 800444a:	189b      	adds	r3, r3, r2
 800444c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800444e:	464b      	mov	r3, r9
 8004450:	460a      	mov	r2, r1
 8004452:	eb42 0303 	adc.w	r3, r2, r3
 8004456:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	663b      	str	r3, [r7, #96]	@ 0x60
 8004462:	667a      	str	r2, [r7, #100]	@ 0x64
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004470:	4649      	mov	r1, r9
 8004472:	008b      	lsls	r3, r1, #2
 8004474:	4641      	mov	r1, r8
 8004476:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800447a:	4641      	mov	r1, r8
 800447c:	008a      	lsls	r2, r1, #2
 800447e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004482:	f7fb fea1 	bl	80001c8 <__aeabi_uldivmod>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	4b0d      	ldr	r3, [pc, #52]	@ (80044c0 <UART_SetConfig+0x4e4>)
 800448c:	fba3 1302 	umull	r1, r3, r3, r2
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	2164      	movs	r1, #100	@ 0x64
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	3332      	adds	r3, #50	@ 0x32
 800449e:	4a08      	ldr	r2, [pc, #32]	@ (80044c0 <UART_SetConfig+0x4e4>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	f003 020f 	and.w	r2, r3, #15
 80044aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4422      	add	r2, r4
 80044b2:	609a      	str	r2, [r3, #8]
}
 80044b4:	bf00      	nop
 80044b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044ba:	46bd      	mov	sp, r7
 80044bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044c0:	51eb851f 	.word	0x51eb851f

080044c4 <memset>:
 80044c4:	4402      	add	r2, r0
 80044c6:	4603      	mov	r3, r0
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d100      	bne.n	80044ce <memset+0xa>
 80044cc:	4770      	bx	lr
 80044ce:	f803 1b01 	strb.w	r1, [r3], #1
 80044d2:	e7f9      	b.n	80044c8 <memset+0x4>

080044d4 <__libc_init_array>:
 80044d4:	b570      	push	{r4, r5, r6, lr}
 80044d6:	4d0d      	ldr	r5, [pc, #52]	@ (800450c <__libc_init_array+0x38>)
 80044d8:	4c0d      	ldr	r4, [pc, #52]	@ (8004510 <__libc_init_array+0x3c>)
 80044da:	1b64      	subs	r4, r4, r5
 80044dc:	10a4      	asrs	r4, r4, #2
 80044de:	2600      	movs	r6, #0
 80044e0:	42a6      	cmp	r6, r4
 80044e2:	d109      	bne.n	80044f8 <__libc_init_array+0x24>
 80044e4:	4d0b      	ldr	r5, [pc, #44]	@ (8004514 <__libc_init_array+0x40>)
 80044e6:	4c0c      	ldr	r4, [pc, #48]	@ (8004518 <__libc_init_array+0x44>)
 80044e8:	f000 f818 	bl	800451c <_init>
 80044ec:	1b64      	subs	r4, r4, r5
 80044ee:	10a4      	asrs	r4, r4, #2
 80044f0:	2600      	movs	r6, #0
 80044f2:	42a6      	cmp	r6, r4
 80044f4:	d105      	bne.n	8004502 <__libc_init_array+0x2e>
 80044f6:	bd70      	pop	{r4, r5, r6, pc}
 80044f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044fc:	4798      	blx	r3
 80044fe:	3601      	adds	r6, #1
 8004500:	e7ee      	b.n	80044e0 <__libc_init_array+0xc>
 8004502:	f855 3b04 	ldr.w	r3, [r5], #4
 8004506:	4798      	blx	r3
 8004508:	3601      	adds	r6, #1
 800450a:	e7f2      	b.n	80044f2 <__libc_init_array+0x1e>
 800450c:	0800455c 	.word	0x0800455c
 8004510:	0800455c 	.word	0x0800455c
 8004514:	0800455c 	.word	0x0800455c
 8004518:	08004560 	.word	0x08004560

0800451c <_init>:
 800451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451e:	bf00      	nop
 8004520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004522:	bc08      	pop	{r3}
 8004524:	469e      	mov	lr, r3
 8004526:	4770      	bx	lr

08004528 <_fini>:
 8004528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452a:	bf00      	nop
 800452c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452e:	bc08      	pop	{r3}
 8004530:	469e      	mov	lr, r3
 8004532:	4770      	bx	lr
