
EQMAT5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  0800a938  0800a938  0000b938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af54  0800af54  0000c1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800af54  0800af54  0000bf54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af5c  0800af5c  0000c1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af5c  0800af5c  0000bf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800af60  0800af60  0000bf60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800af64  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1ec  2**0
                  CONTENTS
 10 .bss          000003b4  200001ec  200001ec  0000c1ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005a0  200005a0  0000c1ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b752  00000000  00000000  0000c21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020bb  00000000  00000000  0001796e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  00019a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000765  00000000  00000000  0001a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fa7b  00000000  00000000  0001ab4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d0a7  00000000  00000000  0003a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb9d9  00000000  00000000  0004766f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00103048  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003eb4  00000000  00000000  0010308c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00106f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a920 	.word	0x0800a920

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800a920 	.word	0x0800a920

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ff0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d013      	beq.n	8001024 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ffc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001000:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001004:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00b      	beq.n	8001024 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800100c:	e000      	b.n	8001010 <ITM_SendChar+0x2c>
    {
      __NOP();
 800100e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001010:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f9      	beq.n	800100e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800101a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f000 ffe8 	bl	800200c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f836 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f000 f920 	bl	8001284 <MX_GPIO_Init>
  MX_DMA_Init();
 8001044:	f000 f8f6 	bl	8001234 <MX_DMA_Init>
  MX_I2S2_Init();
 8001048:	f000 f89a 	bl	8001180 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800104c:	f000 f8c8 	bl	80011e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Start UART communication
  HAL_UART_Transmit(&huart1, tx_buffer, sizeof(tx_buffer), 10); // Send ready message
 8001050:	230a      	movs	r3, #10
 8001052:	2211      	movs	r2, #17
 8001054:	490d      	ldr	r1, [pc, #52]	@ (800108c <main+0x58>)
 8001056:	480e      	ldr	r0, [pc, #56]	@ (8001090 <main+0x5c>)
 8001058:	f003 fc56 	bl	8004908 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer)); // Start UART receive
 800105c:	224b      	movs	r2, #75	@ 0x4b
 800105e:	490d      	ldr	r1, [pc, #52]	@ (8001094 <main+0x60>)
 8001060:	480b      	ldr	r0, [pc, #44]	@ (8001090 <main+0x5c>)
 8001062:	f003 fcdc 	bl	8004a1e <HAL_UART_Receive_IT>

  // Set default filter coefficients
  parseAndStoreCoeffs("Reset");
 8001066:	480c      	ldr	r0, [pc, #48]	@ (8001098 <main+0x64>)
 8001068:	f000 f9b8 	bl	80013dc <parseAndStoreCoeffs>

  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, AUDIO_BUFFER_SIZE/2);
 800106c:	2304      	movs	r3, #4
 800106e:	4a0b      	ldr	r2, [pc, #44]	@ (800109c <main+0x68>)
 8001070:	490b      	ldr	r1, [pc, #44]	@ (80010a0 <main+0x6c>)
 8001072:	480c      	ldr	r0, [pc, #48]	@ (80010a4 <main+0x70>)
 8001074:	f002 f98a 	bl	800338c <HAL_I2SEx_TransmitReceive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Blink the LED while working
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001078:	2104      	movs	r1, #4
 800107a:	480b      	ldr	r0, [pc, #44]	@ (80010a8 <main+0x74>)
 800107c:	f001 ff25 	bl	8002eca <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8001080:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001084:	f001 f834 	bl	80020f0 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001088:	bf00      	nop
 800108a:	e7f5      	b.n	8001078 <main+0x44>
 800108c:	20000000 	.word	0x20000000
 8001090:	20000310 	.word	0x20000310
 8001094:	20000358 	.word	0x20000358
 8001098:	0800a938 	.word	0x0800a938
 800109c:	200003b4 	.word	0x200003b4
 80010a0:	200003c4 	.word	0x200003c4
 80010a4:	20000208 	.word	0x20000208
 80010a8:	40020400 	.word	0x40020400

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b094      	sub	sp, #80	@ 0x50
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0320 	add.w	r3, r7, #32
 80010b6:	2230      	movs	r2, #48	@ 0x30
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f005 fcec 	bl	8006a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	4b28      	ldr	r3, [pc, #160]	@ (8001178 <SystemClock_Config+0xcc>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d8:	4a27      	ldr	r2, [pc, #156]	@ (8001178 <SystemClock_Config+0xcc>)
 80010da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010de:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e0:	4b25      	ldr	r3, [pc, #148]	@ (8001178 <SystemClock_Config+0xcc>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	4b22      	ldr	r3, [pc, #136]	@ (800117c <SystemClock_Config+0xd0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a21      	ldr	r2, [pc, #132]	@ (800117c <SystemClock_Config+0xd0>)
 80010f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	4b1f      	ldr	r3, [pc, #124]	@ (800117c <SystemClock_Config+0xd0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001108:	2301      	movs	r3, #1
 800110a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800110c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001112:	2302      	movs	r3, #2
 8001114:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001116:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800111a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800111c:	2308      	movs	r3, #8
 800111e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001120:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001124:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001126:	2302      	movs	r3, #2
 8001128:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800112a:	2304      	movs	r3, #4
 800112c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	4618      	mov	r0, r3
 8001134:	f002 fdbe 	bl	8003cb4 <HAL_RCC_OscConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800113e:	f000 fcb7 	bl	8001ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001142:	230f      	movs	r3, #15
 8001144:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001146:	2302      	movs	r3, #2
 8001148:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800114e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001152:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001158:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	2105      	movs	r1, #5
 8001160:	4618      	mov	r0, r3
 8001162:	f003 f81f 	bl	80041a4 <HAL_RCC_ClockConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800116c:	f000 fca0 	bl	8001ab0 <Error_Handler>
  }
}
 8001170:	bf00      	nop
 8001172:	3750      	adds	r7, #80	@ 0x50
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800
 800117c:	40007000 	.word	0x40007000

08001180 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001184:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <MX_I2S2_Init+0x54>)
 8001186:	4a14      	ldr	r2, [pc, #80]	@ (80011d8 <MX_I2S2_Init+0x58>)
 8001188:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800118a:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <MX_I2S2_Init+0x54>)
 800118c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001190:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <MX_I2S2_Init+0x54>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001198:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <MX_I2S2_Init+0x54>)
 800119a:	2203      	movs	r2, #3
 800119c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800119e:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <MX_I2S2_Init+0x54>)
 80011a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011a4:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <MX_I2S2_Init+0x54>)
 80011a8:	4a0c      	ldr	r2, [pc, #48]	@ (80011dc <MX_I2S2_Init+0x5c>)
 80011aa:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <MX_I2S2_Init+0x54>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <MX_I2S2_Init+0x54>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <MX_I2S2_Init+0x54>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <MX_I2S2_Init+0x54>)
 80011c0:	f001 fe9e 	bl	8002f00 <HAL_I2S_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80011ca:	f000 fc71 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000208 	.word	0x20000208
 80011d8:	40003800 	.word	0x40003800
 80011dc:	00017700 	.word	0x00017700

080011e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011e4:	4b11      	ldr	r3, [pc, #68]	@ (800122c <MX_USART1_UART_Init+0x4c>)
 80011e6:	4a12      	ldr	r2, [pc, #72]	@ (8001230 <MX_USART1_UART_Init+0x50>)
 80011e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <MX_USART1_UART_Init+0x4c>)
 80011ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <MX_USART1_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <MX_USART1_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <MX_USART1_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001204:	4b09      	ldr	r3, [pc, #36]	@ (800122c <MX_USART1_UART_Init+0x4c>)
 8001206:	220c      	movs	r2, #12
 8001208:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <MX_USART1_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <MX_USART1_UART_Init+0x4c>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001216:	4805      	ldr	r0, [pc, #20]	@ (800122c <MX_USART1_UART_Init+0x4c>)
 8001218:	f003 fb26 	bl	8004868 <HAL_UART_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001222:	f000 fc45 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000310 	.word	0x20000310
 8001230:	40011000 	.word	0x40011000

08001234 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <MX_DMA_Init+0x4c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a0f      	ldr	r2, [pc, #60]	@ (8001280 <MX_DMA_Init+0x4c>)
 8001244:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <MX_DMA_Init+0x4c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	200e      	movs	r0, #14
 800125c:	f001 f847 	bl	80022ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001260:	200e      	movs	r0, #14
 8001262:	f001 f860 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	200f      	movs	r0, #15
 800126c:	f001 f83f 	bl	80022ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001270:	200f      	movs	r0, #15
 8001272:	f001 f858 	bl	8002326 <HAL_NVIC_EnableIRQ>

}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	@ 0x28
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <MX_GPIO_Init+0xb4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a25      	ldr	r2, [pc, #148]	@ (8001338 <MX_GPIO_Init+0xb4>)
 80012a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b23      	ldr	r3, [pc, #140]	@ (8001338 <MX_GPIO_Init+0xb4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001338 <MX_GPIO_Init+0xb4>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a1e      	ldr	r2, [pc, #120]	@ (8001338 <MX_GPIO_Init+0xb4>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <MX_GPIO_Init+0xb4>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <MX_GPIO_Init+0xb4>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	4a17      	ldr	r2, [pc, #92]	@ (8001338 <MX_GPIO_Init+0xb4>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <MX_GPIO_Init+0xb4>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_GPIO_Init+0xb4>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	4a10      	ldr	r2, [pc, #64]	@ (8001338 <MX_GPIO_Init+0xb4>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_GPIO_Init+0xb4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2104      	movs	r1, #4
 800130e:	480b      	ldr	r0, [pc, #44]	@ (800133c <MX_GPIO_Init+0xb8>)
 8001310:	f001 fdc2 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001314:	2304      	movs	r3, #4
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	4804      	ldr	r0, [pc, #16]	@ (800133c <MX_GPIO_Init+0xb8>)
 800132c:	f001 fc18 	bl	8002b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	@ 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	40020400 	.word	0x40020400

08001340 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	e009      	b.n	8001366 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	60ba      	str	r2, [r7, #8]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fe42 	bl	8000fe4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	3301      	adds	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	429a      	cmp	r2, r3
 800136c:	dbf1      	blt.n	8001352 <_write+0x12>
  }
  return len;
 800136e:	687b      	ldr	r3, [r7, #4]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  // HAL_UART_Transmit(&huart1, rx_buffer, sizeof(rx_buffer), 10); // Echo the received data
  printf("Received UART: %s\n", rx_buffer); // Print the received data to serial
 8001380:	4910      	ldr	r1, [pc, #64]	@ (80013c4 <HAL_UART_RxCpltCallback+0x4c>)
 8001382:	4811      	ldr	r0, [pc, #68]	@ (80013c8 <HAL_UART_RxCpltCallback+0x50>)
 8001384:	f005 f9f4 	bl	8006770 <iprintf>

  isConfigComplete = 0;
 8001388:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <HAL_UART_RxCpltCallback+0x54>)
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
  printf("Configuring...0\n");
 800138e:	4810      	ldr	r0, [pc, #64]	@ (80013d0 <HAL_UART_RxCpltCallback+0x58>)
 8001390:	f005 fa56 	bl	8006840 <puts>
  parseAndStoreCoeffs((char *)rx_buffer); // Parse the received data
 8001394:	480b      	ldr	r0, [pc, #44]	@ (80013c4 <HAL_UART_RxCpltCallback+0x4c>)
 8001396:	f000 f821 	bl	80013dc <parseAndStoreCoeffs>
  isConfigComplete = 1;
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <HAL_UART_RxCpltCallback+0x54>)
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]
  printf("Configured...1\n");
 80013a0:	480c      	ldr	r0, [pc, #48]	@ (80013d4 <HAL_UART_RxCpltCallback+0x5c>)
 80013a2:	f005 fa4d 	bl	8006840 <puts>
  memset(rx_buffer, 0, sizeof(rx_buffer)); // Clear the buffer
 80013a6:	224b      	movs	r2, #75	@ 0x4b
 80013a8:	2100      	movs	r1, #0
 80013aa:	4806      	ldr	r0, [pc, #24]	@ (80013c4 <HAL_UART_RxCpltCallback+0x4c>)
 80013ac:	f005 fb74 	bl	8006a98 <memset>
  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer)); // Start the next receive
 80013b0:	224b      	movs	r2, #75	@ 0x4b
 80013b2:	4904      	ldr	r1, [pc, #16]	@ (80013c4 <HAL_UART_RxCpltCallback+0x4c>)
 80013b4:	4808      	ldr	r0, [pc, #32]	@ (80013d8 <HAL_UART_RxCpltCallback+0x60>)
 80013b6:	f003 fb32 	bl	8004a1e <HAL_UART_Receive_IT>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000358 	.word	0x20000358
 80013c8:	0800a940 	.word	0x0800a940
 80013cc:	20000014 	.word	0x20000014
 80013d0:	0800a954 	.word	0x0800a954
 80013d4:	0800a964 	.word	0x0800a964
 80013d8:	20000310 	.word	0x20000310

080013dc <parseAndStoreCoeffs>:

void parseAndStoreCoeffs(char *rx_buffer) {
 80013dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013e0:	b090      	sub	sp, #64	@ 0x40
 80013e2:	af0a      	add	r7, sp, #40	@ 0x28
 80013e4:	6178      	str	r0, [r7, #20]
    // Determine which band the coefficients are for
    if (strncmp(rx_buffer, "LowMid", 6) == 0) {
 80013e6:	2206      	movs	r2, #6
 80013e8:	497a      	ldr	r1, [pc, #488]	@ (80015d4 <parseAndStoreCoeffs+0x1f8>)
 80013ea:	6978      	ldr	r0, [r7, #20]
 80013ec:	f005 fb5c 	bl	8006aa8 <strncmp>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d149      	bne.n	800148a <parseAndStoreCoeffs+0xae>
        sscanf(rx_buffer, "LowMid %f %f %f %f %f %f", 
 80013f6:	4b78      	ldr	r3, [pc, #480]	@ (80015d8 <parseAndStoreCoeffs+0x1fc>)
 80013f8:	9303      	str	r3, [sp, #12]
 80013fa:	4b78      	ldr	r3, [pc, #480]	@ (80015dc <parseAndStoreCoeffs+0x200>)
 80013fc:	9302      	str	r3, [sp, #8]
 80013fe:	4b78      	ldr	r3, [pc, #480]	@ (80015e0 <parseAndStoreCoeffs+0x204>)
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	4b78      	ldr	r3, [pc, #480]	@ (80015e4 <parseAndStoreCoeffs+0x208>)
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	4b78      	ldr	r3, [pc, #480]	@ (80015e8 <parseAndStoreCoeffs+0x20c>)
 8001408:	4a78      	ldr	r2, [pc, #480]	@ (80015ec <parseAndStoreCoeffs+0x210>)
 800140a:	4979      	ldr	r1, [pc, #484]	@ (80015f0 <parseAndStoreCoeffs+0x214>)
 800140c:	6978      	ldr	r0, [r7, #20]
 800140e:	f005 fa3f 	bl	8006890 <siscanf>
               &midLowCoeffs.a0, &midLowCoeffs.a1, &midLowCoeffs.a2, 
               &midLowCoeffs.b0, &midLowCoeffs.b1, &midLowCoeffs.b2);
        printf("Parsed LowMid: %f %f %f %f %f %f\n",
                midLowCoeffs.a0, midLowCoeffs.a1, midLowCoeffs.a2, 
 8001412:	4b76      	ldr	r3, [pc, #472]	@ (80015ec <parseAndStoreCoeffs+0x210>)
 8001414:	681b      	ldr	r3, [r3, #0]
        printf("Parsed LowMid: %f %f %f %f %f %f\n",
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f896 	bl	8000548 <__aeabi_f2d>
 800141c:	e9c7 0102 	strd	r0, r1, [r7, #8]
                midLowCoeffs.a0, midLowCoeffs.a1, midLowCoeffs.a2, 
 8001420:	4b72      	ldr	r3, [pc, #456]	@ (80015ec <parseAndStoreCoeffs+0x210>)
 8001422:	685b      	ldr	r3, [r3, #4]
        printf("Parsed LowMid: %f %f %f %f %f %f\n",
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f88f 	bl	8000548 <__aeabi_f2d>
 800142a:	4604      	mov	r4, r0
 800142c:	460d      	mov	r5, r1
                midLowCoeffs.a0, midLowCoeffs.a1, midLowCoeffs.a2, 
 800142e:	4b6f      	ldr	r3, [pc, #444]	@ (80015ec <parseAndStoreCoeffs+0x210>)
 8001430:	689b      	ldr	r3, [r3, #8]
        printf("Parsed LowMid: %f %f %f %f %f %f\n",
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f888 	bl	8000548 <__aeabi_f2d>
 8001438:	4680      	mov	r8, r0
 800143a:	4689      	mov	r9, r1
                midLowCoeffs.b0, midLowCoeffs.b1, midLowCoeffs.b2);
 800143c:	4b6b      	ldr	r3, [pc, #428]	@ (80015ec <parseAndStoreCoeffs+0x210>)
 800143e:	68db      	ldr	r3, [r3, #12]
        printf("Parsed LowMid: %f %f %f %f %f %f\n",
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f881 	bl	8000548 <__aeabi_f2d>
 8001446:	4682      	mov	sl, r0
 8001448:	468b      	mov	fp, r1
                midLowCoeffs.b0, midLowCoeffs.b1, midLowCoeffs.b2);
 800144a:	4b68      	ldr	r3, [pc, #416]	@ (80015ec <parseAndStoreCoeffs+0x210>)
 800144c:	691b      	ldr	r3, [r3, #16]
        printf("Parsed LowMid: %f %f %f %f %f %f\n",
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f87a 	bl	8000548 <__aeabi_f2d>
 8001454:	e9c7 0100 	strd	r0, r1, [r7]
                midLowCoeffs.b0, midLowCoeffs.b1, midLowCoeffs.b2);
 8001458:	4b64      	ldr	r3, [pc, #400]	@ (80015ec <parseAndStoreCoeffs+0x210>)
 800145a:	695b      	ldr	r3, [r3, #20]
        printf("Parsed LowMid: %f %f %f %f %f %f\n",
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f873 	bl	8000548 <__aeabi_f2d>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800146a:	ed97 7b00 	vldr	d7, [r7]
 800146e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001472:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001476:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800147a:	e9cd 4500 	strd	r4, r5, [sp]
 800147e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001482:	485c      	ldr	r0, [pc, #368]	@ (80015f4 <parseAndStoreCoeffs+0x218>)
 8001484:	f005 f974 	bl	8006770 <iprintf>

        printf("Coefficients reset!\n");
    } else {
        printf("Invalid parameter\n");
    }
}
 8001488:	e1ef      	b.n	800186a <parseAndStoreCoeffs+0x48e>
    } else if (strncmp(rx_buffer, "HighMid", 7) == 0) {
 800148a:	2207      	movs	r2, #7
 800148c:	495a      	ldr	r1, [pc, #360]	@ (80015f8 <parseAndStoreCoeffs+0x21c>)
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f005 fb0a 	bl	8006aa8 <strncmp>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d149      	bne.n	800152e <parseAndStoreCoeffs+0x152>
        sscanf(rx_buffer, "HighMid %f %f %f %f %f %f", 
 800149a:	4b58      	ldr	r3, [pc, #352]	@ (80015fc <parseAndStoreCoeffs+0x220>)
 800149c:	9303      	str	r3, [sp, #12]
 800149e:	4b58      	ldr	r3, [pc, #352]	@ (8001600 <parseAndStoreCoeffs+0x224>)
 80014a0:	9302      	str	r3, [sp, #8]
 80014a2:	4b58      	ldr	r3, [pc, #352]	@ (8001604 <parseAndStoreCoeffs+0x228>)
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	4b58      	ldr	r3, [pc, #352]	@ (8001608 <parseAndStoreCoeffs+0x22c>)
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	4b58      	ldr	r3, [pc, #352]	@ (800160c <parseAndStoreCoeffs+0x230>)
 80014ac:	4a58      	ldr	r2, [pc, #352]	@ (8001610 <parseAndStoreCoeffs+0x234>)
 80014ae:	4959      	ldr	r1, [pc, #356]	@ (8001614 <parseAndStoreCoeffs+0x238>)
 80014b0:	6978      	ldr	r0, [r7, #20]
 80014b2:	f005 f9ed 	bl	8006890 <siscanf>
                midHighCoeffs.a0, midHighCoeffs.a1, midHighCoeffs.a2, 
 80014b6:	4b56      	ldr	r3, [pc, #344]	@ (8001610 <parseAndStoreCoeffs+0x234>)
 80014b8:	681b      	ldr	r3, [r3, #0]
        printf("Parsed HighMid: %f %f %f %f %f %f\n",
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f844 	bl	8000548 <__aeabi_f2d>
 80014c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
                midHighCoeffs.a0, midHighCoeffs.a1, midHighCoeffs.a2, 
 80014c4:	4b52      	ldr	r3, [pc, #328]	@ (8001610 <parseAndStoreCoeffs+0x234>)
 80014c6:	685b      	ldr	r3, [r3, #4]
        printf("Parsed HighMid: %f %f %f %f %f %f\n",
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f83d 	bl	8000548 <__aeabi_f2d>
 80014ce:	4604      	mov	r4, r0
 80014d0:	460d      	mov	r5, r1
                midHighCoeffs.a0, midHighCoeffs.a1, midHighCoeffs.a2, 
 80014d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001610 <parseAndStoreCoeffs+0x234>)
 80014d4:	689b      	ldr	r3, [r3, #8]
        printf("Parsed HighMid: %f %f %f %f %f %f\n",
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f836 	bl	8000548 <__aeabi_f2d>
 80014dc:	4680      	mov	r8, r0
 80014de:	4689      	mov	r9, r1
                midHighCoeffs.b0, midHighCoeffs.b1, midHighCoeffs.b2);
 80014e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001610 <parseAndStoreCoeffs+0x234>)
 80014e2:	68db      	ldr	r3, [r3, #12]
        printf("Parsed HighMid: %f %f %f %f %f %f\n",
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f82f 	bl	8000548 <__aeabi_f2d>
 80014ea:	4682      	mov	sl, r0
 80014ec:	468b      	mov	fp, r1
                midHighCoeffs.b0, midHighCoeffs.b1, midHighCoeffs.b2);
 80014ee:	4b48      	ldr	r3, [pc, #288]	@ (8001610 <parseAndStoreCoeffs+0x234>)
 80014f0:	691b      	ldr	r3, [r3, #16]
        printf("Parsed HighMid: %f %f %f %f %f %f\n",
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f828 	bl	8000548 <__aeabi_f2d>
 80014f8:	e9c7 0100 	strd	r0, r1, [r7]
                midHighCoeffs.b0, midHighCoeffs.b1, midHighCoeffs.b2);
 80014fc:	4b44      	ldr	r3, [pc, #272]	@ (8001610 <parseAndStoreCoeffs+0x234>)
 80014fe:	695b      	ldr	r3, [r3, #20]
        printf("Parsed HighMid: %f %f %f %f %f %f\n",
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f821 	bl	8000548 <__aeabi_f2d>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800150e:	ed97 7b00 	vldr	d7, [r7]
 8001512:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001516:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800151a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800151e:	e9cd 4500 	strd	r4, r5, [sp]
 8001522:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001526:	483c      	ldr	r0, [pc, #240]	@ (8001618 <parseAndStoreCoeffs+0x23c>)
 8001528:	f005 f922 	bl	8006770 <iprintf>
}
 800152c:	e19d      	b.n	800186a <parseAndStoreCoeffs+0x48e>
    } else if (strncmp(rx_buffer, "High", 4) == 0) {
 800152e:	2204      	movs	r2, #4
 8001530:	493a      	ldr	r1, [pc, #232]	@ (800161c <parseAndStoreCoeffs+0x240>)
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f005 fab8 	bl	8006aa8 <strncmp>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	f040 8080 	bne.w	8001640 <parseAndStoreCoeffs+0x264>
        sscanf(rx_buffer, "High %f %f %f %f %f %f", 
 8001540:	4b37      	ldr	r3, [pc, #220]	@ (8001620 <parseAndStoreCoeffs+0x244>)
 8001542:	9303      	str	r3, [sp, #12]
 8001544:	4b37      	ldr	r3, [pc, #220]	@ (8001624 <parseAndStoreCoeffs+0x248>)
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	4b37      	ldr	r3, [pc, #220]	@ (8001628 <parseAndStoreCoeffs+0x24c>)
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	4b37      	ldr	r3, [pc, #220]	@ (800162c <parseAndStoreCoeffs+0x250>)
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4b37      	ldr	r3, [pc, #220]	@ (8001630 <parseAndStoreCoeffs+0x254>)
 8001552:	4a38      	ldr	r2, [pc, #224]	@ (8001634 <parseAndStoreCoeffs+0x258>)
 8001554:	4938      	ldr	r1, [pc, #224]	@ (8001638 <parseAndStoreCoeffs+0x25c>)
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f005 f99a 	bl	8006890 <siscanf>
                highBandCoeffs.a0, highBandCoeffs.a1, highBandCoeffs.a2, 
 800155c:	4b35      	ldr	r3, [pc, #212]	@ (8001634 <parseAndStoreCoeffs+0x258>)
 800155e:	681b      	ldr	r3, [r3, #0]
        printf("Parsed High: %f %f %f %f %f %f\n",
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe fff1 	bl	8000548 <__aeabi_f2d>
 8001566:	e9c7 0102 	strd	r0, r1, [r7, #8]
                highBandCoeffs.a0, highBandCoeffs.a1, highBandCoeffs.a2, 
 800156a:	4b32      	ldr	r3, [pc, #200]	@ (8001634 <parseAndStoreCoeffs+0x258>)
 800156c:	685b      	ldr	r3, [r3, #4]
        printf("Parsed High: %f %f %f %f %f %f\n",
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffea 	bl	8000548 <__aeabi_f2d>
 8001574:	4604      	mov	r4, r0
 8001576:	460d      	mov	r5, r1
                highBandCoeffs.a0, highBandCoeffs.a1, highBandCoeffs.a2, 
 8001578:	4b2e      	ldr	r3, [pc, #184]	@ (8001634 <parseAndStoreCoeffs+0x258>)
 800157a:	689b      	ldr	r3, [r3, #8]
        printf("Parsed High: %f %f %f %f %f %f\n",
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffe3 	bl	8000548 <__aeabi_f2d>
 8001582:	4680      	mov	r8, r0
 8001584:	4689      	mov	r9, r1
                highBandCoeffs.b0, highBandCoeffs.b1, highBandCoeffs.b2);
 8001586:	4b2b      	ldr	r3, [pc, #172]	@ (8001634 <parseAndStoreCoeffs+0x258>)
 8001588:	68db      	ldr	r3, [r3, #12]
        printf("Parsed High: %f %f %f %f %f %f\n",
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffdc 	bl	8000548 <__aeabi_f2d>
 8001590:	4682      	mov	sl, r0
 8001592:	468b      	mov	fp, r1
                highBandCoeffs.b0, highBandCoeffs.b1, highBandCoeffs.b2);
 8001594:	4b27      	ldr	r3, [pc, #156]	@ (8001634 <parseAndStoreCoeffs+0x258>)
 8001596:	691b      	ldr	r3, [r3, #16]
        printf("Parsed High: %f %f %f %f %f %f\n",
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ffd5 	bl	8000548 <__aeabi_f2d>
 800159e:	e9c7 0100 	strd	r0, r1, [r7]
                highBandCoeffs.b0, highBandCoeffs.b1, highBandCoeffs.b2);
 80015a2:	4b24      	ldr	r3, [pc, #144]	@ (8001634 <parseAndStoreCoeffs+0x258>)
 80015a4:	695b      	ldr	r3, [r3, #20]
        printf("Parsed High: %f %f %f %f %f %f\n",
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ffce 	bl	8000548 <__aeabi_f2d>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80015b4:	ed97 7b00 	vldr	d7, [r7]
 80015b8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80015bc:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80015c0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015c4:	e9cd 4500 	strd	r4, r5, [sp]
 80015c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015cc:	481b      	ldr	r0, [pc, #108]	@ (800163c <parseAndStoreCoeffs+0x260>)
 80015ce:	f005 f8cf 	bl	8006770 <iprintf>
}
 80015d2:	e14a      	b.n	800186a <parseAndStoreCoeffs+0x48e>
 80015d4:	0800a974 	.word	0x0800a974
 80015d8:	20000400 	.word	0x20000400
 80015dc:	200003fc 	.word	0x200003fc
 80015e0:	200003f8 	.word	0x200003f8
 80015e4:	200003f4 	.word	0x200003f4
 80015e8:	200003f0 	.word	0x200003f0
 80015ec:	200003ec 	.word	0x200003ec
 80015f0:	0800a97c 	.word	0x0800a97c
 80015f4:	0800a998 	.word	0x0800a998
 80015f8:	0800a9bc 	.word	0x0800a9bc
 80015fc:	20000430 	.word	0x20000430
 8001600:	2000042c 	.word	0x2000042c
 8001604:	20000428 	.word	0x20000428
 8001608:	20000424 	.word	0x20000424
 800160c:	20000420 	.word	0x20000420
 8001610:	2000041c 	.word	0x2000041c
 8001614:	0800a9c4 	.word	0x0800a9c4
 8001618:	0800a9e0 	.word	0x0800a9e0
 800161c:	0800aa04 	.word	0x0800aa04
 8001620:	20000448 	.word	0x20000448
 8001624:	20000444 	.word	0x20000444
 8001628:	20000440 	.word	0x20000440
 800162c:	2000043c 	.word	0x2000043c
 8001630:	20000438 	.word	0x20000438
 8001634:	20000434 	.word	0x20000434
 8001638:	0800aa0c 	.word	0x0800aa0c
 800163c:	0800aa24 	.word	0x0800aa24
    } else if (strncmp(rx_buffer, "Mid", 3) == 0) {
 8001640:	2203      	movs	r2, #3
 8001642:	498c      	ldr	r1, [pc, #560]	@ (8001874 <parseAndStoreCoeffs+0x498>)
 8001644:	6978      	ldr	r0, [r7, #20]
 8001646:	f005 fa2f 	bl	8006aa8 <strncmp>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d149      	bne.n	80016e4 <parseAndStoreCoeffs+0x308>
        sscanf(rx_buffer, "Mid %f %f %f %f %f %f", 
 8001650:	4b89      	ldr	r3, [pc, #548]	@ (8001878 <parseAndStoreCoeffs+0x49c>)
 8001652:	9303      	str	r3, [sp, #12]
 8001654:	4b89      	ldr	r3, [pc, #548]	@ (800187c <parseAndStoreCoeffs+0x4a0>)
 8001656:	9302      	str	r3, [sp, #8]
 8001658:	4b89      	ldr	r3, [pc, #548]	@ (8001880 <parseAndStoreCoeffs+0x4a4>)
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	4b89      	ldr	r3, [pc, #548]	@ (8001884 <parseAndStoreCoeffs+0x4a8>)
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	4b89      	ldr	r3, [pc, #548]	@ (8001888 <parseAndStoreCoeffs+0x4ac>)
 8001662:	4a8a      	ldr	r2, [pc, #552]	@ (800188c <parseAndStoreCoeffs+0x4b0>)
 8001664:	498a      	ldr	r1, [pc, #552]	@ (8001890 <parseAndStoreCoeffs+0x4b4>)
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f005 f912 	bl	8006890 <siscanf>
                midBandCoeffs.a0, midBandCoeffs.a1, midBandCoeffs.a2, 
 800166c:	4b87      	ldr	r3, [pc, #540]	@ (800188c <parseAndStoreCoeffs+0x4b0>)
 800166e:	681b      	ldr	r3, [r3, #0]
        printf("Parsed Mid: %f %f %f %f %f %f\n",
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff69 	bl	8000548 <__aeabi_f2d>
 8001676:	e9c7 0102 	strd	r0, r1, [r7, #8]
                midBandCoeffs.a0, midBandCoeffs.a1, midBandCoeffs.a2, 
 800167a:	4b84      	ldr	r3, [pc, #528]	@ (800188c <parseAndStoreCoeffs+0x4b0>)
 800167c:	685b      	ldr	r3, [r3, #4]
        printf("Parsed Mid: %f %f %f %f %f %f\n",
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff62 	bl	8000548 <__aeabi_f2d>
 8001684:	4604      	mov	r4, r0
 8001686:	460d      	mov	r5, r1
                midBandCoeffs.a0, midBandCoeffs.a1, midBandCoeffs.a2, 
 8001688:	4b80      	ldr	r3, [pc, #512]	@ (800188c <parseAndStoreCoeffs+0x4b0>)
 800168a:	689b      	ldr	r3, [r3, #8]
        printf("Parsed Mid: %f %f %f %f %f %f\n",
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff5b 	bl	8000548 <__aeabi_f2d>
 8001692:	4680      	mov	r8, r0
 8001694:	4689      	mov	r9, r1
                midBandCoeffs.b0, midBandCoeffs.b1, midBandCoeffs.b2);
 8001696:	4b7d      	ldr	r3, [pc, #500]	@ (800188c <parseAndStoreCoeffs+0x4b0>)
 8001698:	68db      	ldr	r3, [r3, #12]
        printf("Parsed Mid: %f %f %f %f %f %f\n",
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe ff54 	bl	8000548 <__aeabi_f2d>
 80016a0:	4682      	mov	sl, r0
 80016a2:	468b      	mov	fp, r1
                midBandCoeffs.b0, midBandCoeffs.b1, midBandCoeffs.b2);
 80016a4:	4b79      	ldr	r3, [pc, #484]	@ (800188c <parseAndStoreCoeffs+0x4b0>)
 80016a6:	691b      	ldr	r3, [r3, #16]
        printf("Parsed Mid: %f %f %f %f %f %f\n",
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ff4d 	bl	8000548 <__aeabi_f2d>
 80016ae:	e9c7 0100 	strd	r0, r1, [r7]
                midBandCoeffs.b0, midBandCoeffs.b1, midBandCoeffs.b2);
 80016b2:	4b76      	ldr	r3, [pc, #472]	@ (800188c <parseAndStoreCoeffs+0x4b0>)
 80016b4:	695b      	ldr	r3, [r3, #20]
        printf("Parsed Mid: %f %f %f %f %f %f\n",
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff46 	bl	8000548 <__aeabi_f2d>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80016c4:	ed97 7b00 	vldr	d7, [r7]
 80016c8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80016cc:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80016d0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80016d4:	e9cd 4500 	strd	r4, r5, [sp]
 80016d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016dc:	486d      	ldr	r0, [pc, #436]	@ (8001894 <parseAndStoreCoeffs+0x4b8>)
 80016de:	f005 f847 	bl	8006770 <iprintf>
}
 80016e2:	e0c2      	b.n	800186a <parseAndStoreCoeffs+0x48e>
    } else if (strncmp(rx_buffer, "Low", 3) == 0) {
 80016e4:	2203      	movs	r2, #3
 80016e6:	496c      	ldr	r1, [pc, #432]	@ (8001898 <parseAndStoreCoeffs+0x4bc>)
 80016e8:	6978      	ldr	r0, [r7, #20]
 80016ea:	f005 f9dd 	bl	8006aa8 <strncmp>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d147      	bne.n	8001784 <parseAndStoreCoeffs+0x3a8>
        sscanf(rx_buffer, "Low %f %f %f %f %f", 
 80016f4:	4b69      	ldr	r3, [pc, #420]	@ (800189c <parseAndStoreCoeffs+0x4c0>)
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	4b69      	ldr	r3, [pc, #420]	@ (80018a0 <parseAndStoreCoeffs+0x4c4>)
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	4b69      	ldr	r3, [pc, #420]	@ (80018a4 <parseAndStoreCoeffs+0x4c8>)
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	4b69      	ldr	r3, [pc, #420]	@ (80018a8 <parseAndStoreCoeffs+0x4cc>)
 8001702:	4a6a      	ldr	r2, [pc, #424]	@ (80018ac <parseAndStoreCoeffs+0x4d0>)
 8001704:	496a      	ldr	r1, [pc, #424]	@ (80018b0 <parseAndStoreCoeffs+0x4d4>)
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f005 f8c2 	bl	8006890 <siscanf>
               lowBandCoeffs.a0, lowBandCoeffs.a1, lowBandCoeffs.a2, 
 800170c:	4b67      	ldr	r3, [pc, #412]	@ (80018ac <parseAndStoreCoeffs+0x4d0>)
 800170e:	681b      	ldr	r3, [r3, #0]
        printf("Parsed Low: %f %f %f %f %f %f\n", 
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ff19 	bl	8000548 <__aeabi_f2d>
 8001716:	e9c7 0102 	strd	r0, r1, [r7, #8]
               lowBandCoeffs.a0, lowBandCoeffs.a1, lowBandCoeffs.a2, 
 800171a:	4b64      	ldr	r3, [pc, #400]	@ (80018ac <parseAndStoreCoeffs+0x4d0>)
 800171c:	685b      	ldr	r3, [r3, #4]
        printf("Parsed Low: %f %f %f %f %f %f\n", 
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe ff12 	bl	8000548 <__aeabi_f2d>
 8001724:	4604      	mov	r4, r0
 8001726:	460d      	mov	r5, r1
               lowBandCoeffs.a0, lowBandCoeffs.a1, lowBandCoeffs.a2, 
 8001728:	4b60      	ldr	r3, [pc, #384]	@ (80018ac <parseAndStoreCoeffs+0x4d0>)
 800172a:	689b      	ldr	r3, [r3, #8]
        printf("Parsed Low: %f %f %f %f %f %f\n", 
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe ff0b 	bl	8000548 <__aeabi_f2d>
 8001732:	4680      	mov	r8, r0
 8001734:	4689      	mov	r9, r1
               lowBandCoeffs.b0, lowBandCoeffs.b1, lowBandCoeffs.b2);
 8001736:	4b5d      	ldr	r3, [pc, #372]	@ (80018ac <parseAndStoreCoeffs+0x4d0>)
 8001738:	68db      	ldr	r3, [r3, #12]
        printf("Parsed Low: %f %f %f %f %f %f\n", 
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff04 	bl	8000548 <__aeabi_f2d>
 8001740:	4682      	mov	sl, r0
 8001742:	468b      	mov	fp, r1
               lowBandCoeffs.b0, lowBandCoeffs.b1, lowBandCoeffs.b2);
 8001744:	4b59      	ldr	r3, [pc, #356]	@ (80018ac <parseAndStoreCoeffs+0x4d0>)
 8001746:	691b      	ldr	r3, [r3, #16]
        printf("Parsed Low: %f %f %f %f %f %f\n", 
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fefd 	bl	8000548 <__aeabi_f2d>
 800174e:	e9c7 0100 	strd	r0, r1, [r7]
               lowBandCoeffs.b0, lowBandCoeffs.b1, lowBandCoeffs.b2);
 8001752:	4b56      	ldr	r3, [pc, #344]	@ (80018ac <parseAndStoreCoeffs+0x4d0>)
 8001754:	695b      	ldr	r3, [r3, #20]
        printf("Parsed Low: %f %f %f %f %f %f\n", 
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fef6 	bl	8000548 <__aeabi_f2d>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001764:	ed97 7b00 	vldr	d7, [r7]
 8001768:	ed8d 7b06 	vstr	d7, [sp, #24]
 800176c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001770:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001774:	e9cd 4500 	strd	r4, r5, [sp]
 8001778:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800177c:	484d      	ldr	r0, [pc, #308]	@ (80018b4 <parseAndStoreCoeffs+0x4d8>)
 800177e:	f004 fff7 	bl	8006770 <iprintf>
}
 8001782:	e072      	b.n	800186a <parseAndStoreCoeffs+0x48e>
    } else if (strncmp(rx_buffer, "Reset", 5) == 0) {
 8001784:	2205      	movs	r2, #5
 8001786:	494c      	ldr	r1, [pc, #304]	@ (80018b8 <parseAndStoreCoeffs+0x4dc>)
 8001788:	6978      	ldr	r0, [r7, #20]
 800178a:	f005 f98d 	bl	8006aa8 <strncmp>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d167      	bne.n	8001864 <parseAndStoreCoeffs+0x488>
        lowBandCoeffs.a0 = 1.000000f;
 8001794:	4b45      	ldr	r3, [pc, #276]	@ (80018ac <parseAndStoreCoeffs+0x4d0>)
 8001796:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800179a:	601a      	str	r2, [r3, #0]
        lowBandCoeffs.a1 = -1.9967221676279703f;
 800179c:	4b43      	ldr	r3, [pc, #268]	@ (80018ac <parseAndStoreCoeffs+0x4d0>)
 800179e:	4a47      	ldr	r2, [pc, #284]	@ (80018bc <parseAndStoreCoeffs+0x4e0>)
 80017a0:	605a      	str	r2, [r3, #4]
        lowBandCoeffs.a2 = 0.9967328593303515f;
 80017a2:	4b42      	ldr	r3, [pc, #264]	@ (80018ac <parseAndStoreCoeffs+0x4d0>)
 80017a4:	4a46      	ldr	r2, [pc, #280]	@ (80018c0 <parseAndStoreCoeffs+0x4e4>)
 80017a6:	609a      	str	r2, [r3, #8]
        lowBandCoeffs.b0 = 0.0f; // Unused
 80017a8:	4b40      	ldr	r3, [pc, #256]	@ (80018ac <parseAndStoreCoeffs+0x4d0>)
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	60da      	str	r2, [r3, #12]
        lowBandCoeffs.b1 = -1.9967221676279703f;
 80017b0:	4b3e      	ldr	r3, [pc, #248]	@ (80018ac <parseAndStoreCoeffs+0x4d0>)
 80017b2:	4a42      	ldr	r2, [pc, #264]	@ (80018bc <parseAndStoreCoeffs+0x4e0>)
 80017b4:	611a      	str	r2, [r3, #16]
        lowBandCoeffs.b2 = 0.9967328593303515f;
 80017b6:	4b3d      	ldr	r3, [pc, #244]	@ (80018ac <parseAndStoreCoeffs+0x4d0>)
 80017b8:	4a41      	ldr	r2, [pc, #260]	@ (80018c0 <parseAndStoreCoeffs+0x4e4>)
 80017ba:	615a      	str	r2, [r3, #20]
        midLowCoeffs.a0 = 1.000000f;
 80017bc:	4b41      	ldr	r3, [pc, #260]	@ (80018c4 <parseAndStoreCoeffs+0x4e8>)
 80017be:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80017c2:	601a      	str	r2, [r3, #0]
        midLowCoeffs.a1 = -1.9868252854194832f;
 80017c4:	4b3f      	ldr	r3, [pc, #252]	@ (80018c4 <parseAndStoreCoeffs+0x4e8>)
 80017c6:	4a40      	ldr	r2, [pc, #256]	@ (80018c8 <parseAndStoreCoeffs+0x4ec>)
 80017c8:	605a      	str	r2, [r3, #4]
        midLowCoeffs.a2 = 0.9869955161457885f;
 80017ca:	4b3e      	ldr	r3, [pc, #248]	@ (80018c4 <parseAndStoreCoeffs+0x4e8>)
 80017cc:	4a3f      	ldr	r2, [pc, #252]	@ (80018cc <parseAndStoreCoeffs+0x4f0>)
 80017ce:	609a      	str	r2, [r3, #8]
        midLowCoeffs.b0 = 0.0f; // Unused
 80017d0:	4b3c      	ldr	r3, [pc, #240]	@ (80018c4 <parseAndStoreCoeffs+0x4e8>)
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	60da      	str	r2, [r3, #12]
        midLowCoeffs.b1 = -1.9868252854194832f;
 80017d8:	4b3a      	ldr	r3, [pc, #232]	@ (80018c4 <parseAndStoreCoeffs+0x4e8>)
 80017da:	4a3b      	ldr	r2, [pc, #236]	@ (80018c8 <parseAndStoreCoeffs+0x4ec>)
 80017dc:	611a      	str	r2, [r3, #16]
        midLowCoeffs.b2 = 0.9869955161457885f;
 80017de:	4b39      	ldr	r3, [pc, #228]	@ (80018c4 <parseAndStoreCoeffs+0x4e8>)
 80017e0:	4a3a      	ldr	r2, [pc, #232]	@ (80018cc <parseAndStoreCoeffs+0x4f0>)
 80017e2:	615a      	str	r2, [r3, #20]
        midBandCoeffs.a0 = 1.000000f;
 80017e4:	4b29      	ldr	r3, [pc, #164]	@ (800188c <parseAndStoreCoeffs+0x4b0>)
 80017e6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80017ea:	601a      	str	r2, [r3, #0]
        midBandCoeffs.a1 = -1.8973814990203015f;
 80017ec:	4b27      	ldr	r3, [pc, #156]	@ (800188c <parseAndStoreCoeffs+0x4b0>)
 80017ee:	4a38      	ldr	r2, [pc, #224]	@ (80018d0 <parseAndStoreCoeffs+0x4f4>)
 80017f0:	605a      	str	r2, [r3, #4]
        midBandCoeffs.a2 = 0.9065621167287853f;
 80017f2:	4b26      	ldr	r3, [pc, #152]	@ (800188c <parseAndStoreCoeffs+0x4b0>)
 80017f4:	4a37      	ldr	r2, [pc, #220]	@ (80018d4 <parseAndStoreCoeffs+0x4f8>)
 80017f6:	609a      	str	r2, [r3, #8]
        midBandCoeffs.b0 = 0.0f; // Unused
 80017f8:	4b24      	ldr	r3, [pc, #144]	@ (800188c <parseAndStoreCoeffs+0x4b0>)
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
        midBandCoeffs.b1 = -1.8973814990203015f;
 8001800:	4b22      	ldr	r3, [pc, #136]	@ (800188c <parseAndStoreCoeffs+0x4b0>)
 8001802:	4a33      	ldr	r2, [pc, #204]	@ (80018d0 <parseAndStoreCoeffs+0x4f4>)
 8001804:	611a      	str	r2, [r3, #16]
        midBandCoeffs.b2 = 0.9065621167287853f;
 8001806:	4b21      	ldr	r3, [pc, #132]	@ (800188c <parseAndStoreCoeffs+0x4b0>)
 8001808:	4a32      	ldr	r2, [pc, #200]	@ (80018d4 <parseAndStoreCoeffs+0x4f8>)
 800180a:	615a      	str	r2, [r3, #20]
        midHighCoeffs.a0 = 0.9999999999999999f;
 800180c:	4b32      	ldr	r3, [pc, #200]	@ (80018d8 <parseAndStoreCoeffs+0x4fc>)
 800180e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001812:	601a      	str	r2, [r3, #0]
        midHighCoeffs.a1 = -1.7872344851894877f;
 8001814:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <parseAndStoreCoeffs+0x4fc>)
 8001816:	4a31      	ldr	r2, [pc, #196]	@ (80018dc <parseAndStoreCoeffs+0x500>)
 8001818:	605a      	str	r2, [r3, #4]
        midHighCoeffs.a2 = 0.8222484787441973f;
 800181a:	4b2f      	ldr	r3, [pc, #188]	@ (80018d8 <parseAndStoreCoeffs+0x4fc>)
 800181c:	4a30      	ldr	r2, [pc, #192]	@ (80018e0 <parseAndStoreCoeffs+0x504>)
 800181e:	609a      	str	r2, [r3, #8]
        midHighCoeffs.b0 = 0.0f; // Unused
 8001820:	4b2d      	ldr	r3, [pc, #180]	@ (80018d8 <parseAndStoreCoeffs+0x4fc>)
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	60da      	str	r2, [r3, #12]
        midHighCoeffs.b1 = -1.7872344851894877f;
 8001828:	4b2b      	ldr	r3, [pc, #172]	@ (80018d8 <parseAndStoreCoeffs+0x4fc>)
 800182a:	4a2c      	ldr	r2, [pc, #176]	@ (80018dc <parseAndStoreCoeffs+0x500>)
 800182c:	611a      	str	r2, [r3, #16]
        midHighCoeffs.b2 = 0.8222484787441973f;
 800182e:	4b2a      	ldr	r3, [pc, #168]	@ (80018d8 <parseAndStoreCoeffs+0x4fc>)
 8001830:	4a2b      	ldr	r2, [pc, #172]	@ (80018e0 <parseAndStoreCoeffs+0x504>)
 8001832:	615a      	str	r2, [r3, #20]
        highBandCoeffs.a0 = 0.9999999999999999f;
 8001834:	4b2b      	ldr	r3, [pc, #172]	@ (80018e4 <parseAndStoreCoeffs+0x508>)
 8001836:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800183a:	601a      	str	r2, [r3, #0]
        highBandCoeffs.a1 = -1.2164444497980702f;
 800183c:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <parseAndStoreCoeffs+0x508>)
 800183e:	4a2a      	ldr	r2, [pc, #168]	@ (80018e8 <parseAndStoreCoeffs+0x50c>)
 8001840:	605a      	str	r2, [r3, #4]
        highBandCoeffs.a2 = 0.5332946721463616f;
 8001842:	4b28      	ldr	r3, [pc, #160]	@ (80018e4 <parseAndStoreCoeffs+0x508>)
 8001844:	4a29      	ldr	r2, [pc, #164]	@ (80018ec <parseAndStoreCoeffs+0x510>)
 8001846:	609a      	str	r2, [r3, #8]
        highBandCoeffs.b0 = 0.0f; // Unused
 8001848:	4b26      	ldr	r3, [pc, #152]	@ (80018e4 <parseAndStoreCoeffs+0x508>)
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
        highBandCoeffs.b1 = -1.2164444497980702f;
 8001850:	4b24      	ldr	r3, [pc, #144]	@ (80018e4 <parseAndStoreCoeffs+0x508>)
 8001852:	4a25      	ldr	r2, [pc, #148]	@ (80018e8 <parseAndStoreCoeffs+0x50c>)
 8001854:	611a      	str	r2, [r3, #16]
        highBandCoeffs.b2 = 0.5332946721463616f;
 8001856:	4b23      	ldr	r3, [pc, #140]	@ (80018e4 <parseAndStoreCoeffs+0x508>)
 8001858:	4a24      	ldr	r2, [pc, #144]	@ (80018ec <parseAndStoreCoeffs+0x510>)
 800185a:	615a      	str	r2, [r3, #20]
        printf("Coefficients reset!\n");
 800185c:	4824      	ldr	r0, [pc, #144]	@ (80018f0 <parseAndStoreCoeffs+0x514>)
 800185e:	f004 ffef 	bl	8006840 <puts>
}
 8001862:	e002      	b.n	800186a <parseAndStoreCoeffs+0x48e>
        printf("Invalid parameter\n");
 8001864:	4823      	ldr	r0, [pc, #140]	@ (80018f4 <parseAndStoreCoeffs+0x518>)
 8001866:	f004 ffeb 	bl	8006840 <puts>
}
 800186a:	bf00      	nop
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001874:	0800aa44 	.word	0x0800aa44
 8001878:	20000418 	.word	0x20000418
 800187c:	20000414 	.word	0x20000414
 8001880:	20000410 	.word	0x20000410
 8001884:	2000040c 	.word	0x2000040c
 8001888:	20000408 	.word	0x20000408
 800188c:	20000404 	.word	0x20000404
 8001890:	0800aa48 	.word	0x0800aa48
 8001894:	0800aa60 	.word	0x0800aa60
 8001898:	0800aa80 	.word	0x0800aa80
 800189c:	200003e4 	.word	0x200003e4
 80018a0:	200003e0 	.word	0x200003e0
 80018a4:	200003dc 	.word	0x200003dc
 80018a8:	200003d8 	.word	0x200003d8
 80018ac:	200003d4 	.word	0x200003d4
 80018b0:	0800aa84 	.word	0x0800aa84
 80018b4:	0800aa98 	.word	0x0800aa98
 80018b8:	0800a938 	.word	0x0800a938
 80018bc:	bfff9498 	.word	0xbfff9498
 80018c0:	3f7f29e2 	.word	0x3f7f29e2
 80018c4:	200003ec 	.word	0x200003ec
 80018c8:	bffe504a 	.word	0xbffe504a
 80018cc:	3f7cabbd 	.word	0x3f7cabbd
 80018d0:	bff2dd66 	.word	0xbff2dd66
 80018d4:	3f681474 	.word	0x3f681474
 80018d8:	2000041c 	.word	0x2000041c
 80018dc:	bfe4c41a 	.word	0xbfe4c41a
 80018e0:	3f527ee0 	.word	0x3f527ee0
 80018e4:	20000434 	.word	0x20000434
 80018e8:	bf9bb474 	.word	0xbf9bb474
 80018ec:	3f088600 	.word	0x3f088600
 80018f0:	0800aab8 	.word	0x0800aab8
 80018f4:	0800aacc 	.word	0x0800aacc

080018f8 <CalPeakingLow>:
//   highBandCoeffs.b0 = highBandCoeffs.b0 * 1.0f;
//   highBandCoeffs.b1 = highBandCoeffs.b1 * 1.0f;
//   highBandCoeffs.b2 = highBandCoeffs.b2 * 1.0f;
// }

int CalPeakingLow(int inSample) {
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if (isConfigComplete == 0) {
 8001900:	4b2b      	ldr	r3, [pc, #172]	@ (80019b0 <CalPeakingLow+0xb8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <CalPeakingLow+0x14>
    return inSample;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	e04b      	b.n	80019a4 <CalPeakingLow+0xac>
  }
  
  float inSampleF = (float)inSample;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	ee07 3a90 	vmov	s15, r3
 8001912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001916:	edc7 7a03 	vstr	s15, [r7, #12]
  float outSampleF =
      (lowBandCoeffs.a0 * inSampleF
 800191a:	4b26      	ldr	r3, [pc, #152]	@ (80019b4 <CalPeakingLow+0xbc>)
 800191c:	ed93 7a00 	vldr	s14, [r3]
 8001920:	edd7 7a03 	vldr	s15, [r7, #12]
 8001924:	ee27 7a27 	vmul.f32	s14, s14, s15
      + lowBandCoeffs.a1 * in_z1
 8001928:	4b22      	ldr	r3, [pc, #136]	@ (80019b4 <CalPeakingLow+0xbc>)
 800192a:	edd3 6a01 	vldr	s13, [r3, #4]
 800192e:	4b22      	ldr	r3, [pc, #136]	@ (80019b8 <CalPeakingLow+0xc0>)
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001938:	ee37 7a27 	vadd.f32	s14, s14, s15
      + lowBandCoeffs.a2 * in_z2
 800193c:	4b1d      	ldr	r3, [pc, #116]	@ (80019b4 <CalPeakingLow+0xbc>)
 800193e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001942:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <CalPeakingLow+0xc4>)
 8001944:	edd3 7a00 	vldr	s15, [r3]
 8001948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800194c:	ee37 7a27 	vadd.f32	s14, s14, s15
      - lowBandCoeffs.b1 * out_z1
 8001950:	4b18      	ldr	r3, [pc, #96]	@ (80019b4 <CalPeakingLow+0xbc>)
 8001952:	edd3 6a04 	vldr	s13, [r3, #16]
 8001956:	4b1a      	ldr	r3, [pc, #104]	@ (80019c0 <CalPeakingLow+0xc8>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001960:	ee37 7a67 	vsub.f32	s14, s14, s15
      - lowBandCoeffs.b2 * out_z2);// / lowBandCoeffs.b0; // Phil lab = *, EasyEQ = /
 8001964:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <CalPeakingLow+0xbc>)
 8001966:	edd3 6a05 	vldr	s13, [r3, #20]
 800196a:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <CalPeakingLow+0xcc>)
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	ee66 7aa7 	vmul.f32	s15, s13, s15
  float outSampleF =
 8001974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001978:	edc7 7a02 	vstr	s15, [r7, #8]
  in_z2 = in_z1;
 800197c:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <CalPeakingLow+0xc0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0e      	ldr	r2, [pc, #56]	@ (80019bc <CalPeakingLow+0xc4>)
 8001982:	6013      	str	r3, [r2, #0]
  in_z1 = inSampleF;
 8001984:	4a0c      	ldr	r2, [pc, #48]	@ (80019b8 <CalPeakingLow+0xc0>)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6013      	str	r3, [r2, #0]
  out_z2 = out_z1;
 800198a:	4b0d      	ldr	r3, [pc, #52]	@ (80019c0 <CalPeakingLow+0xc8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <CalPeakingLow+0xcc>)
 8001990:	6013      	str	r3, [r2, #0]
  out_z1 = outSampleF;
 8001992:	4a0b      	ldr	r2, [pc, #44]	@ (80019c0 <CalPeakingLow+0xc8>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	6013      	str	r3, [r2, #0]
  
  return (int) outSampleF;
 8001998:	edd7 7a02 	vldr	s15, [r7, #8]
 800199c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a0:	ee17 3a90 	vmov	r3, s15
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	20000014 	.word	0x20000014
 80019b4:	200003d4 	.word	0x200003d4
 80019b8:	200003a4 	.word	0x200003a4
 80019bc:	200003a8 	.word	0x200003a8
 80019c0:	200003ac 	.word	0x200003ac
 80019c4:	200003b0 	.word	0x200003b0

080019c8 <HAL_I2SEx_TxRxHalfCpltCallback>:

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if (isConfigComplete == 1) {
 80019d0:	4b17      	ldr	r3, [pc, #92]	@ (8001a30 <HAL_I2SEx_TxRxHalfCpltCallback+0x68>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d127      	bne.n	8001a28 <HAL_I2SEx_TxRxHalfCpltCallback+0x60>
    //restore signed 24 bit sample from 16-bit buffers to 32-bit 
    int lSample = (int) (rxBuf[0]<<16)|rxBuf[1];
 80019d8:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	041b      	lsls	r3, r3, #16
 80019de:	4a15      	ldr	r2, [pc, #84]	@ (8001a34 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 80019e0:	8852      	ldrh	r2, [r2, #2]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
    int rSample = (int) (rxBuf[2]<<16)|rxBuf[3];
 80019e6:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 80019e8:	889b      	ldrh	r3, [r3, #4]
 80019ea:	041b      	lsls	r3, r3, #16
 80019ec:	4a11      	ldr	r2, [pc, #68]	@ (8001a34 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 80019ee:	88d2      	ldrh	r2, [r2, #6]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]

    //run HP on left channel and LP on right channel
    // lSample = Calc_IIR(lSample);
    // rSample = Calc_IIR(rSample);
      // printf("Filter Mode: Low\n");
      rSample = CalPeakingLow(rSample);
 80019f4:	68b8      	ldr	r0, [r7, #8]
 80019f6:	f7ff ff7f 	bl	80018f8 <CalPeakingLow>
 80019fa:	60b8      	str	r0, [r7, #8]
      lSample = CalPeakingLow(lSample);
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7ff ff7b 	bl	80018f8 <CalPeakingLow>
 8001a02:	60f8      	str	r0, [r7, #12]
    // } else {
    //   printf("Bypass Mode\n");


    //restore to buffer
    txBuf[0] = (lSample>>16)&0xFFFF;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 8001a0c:	801a      	strh	r2, [r3, #0]
    txBuf[1] = lSample&0xFFFF;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 8001a14:	805a      	strh	r2, [r3, #2]
    txBuf[2] = (rSample>>16)&0xFFFF;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	0c1b      	lsrs	r3, r3, #16
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 8001a1e:	809a      	strh	r2, [r3, #4]
    txBuf[3] = rSample&0xFFFF;
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	4b04      	ldr	r3, [pc, #16]	@ (8001a38 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 8001a26:	80da      	strh	r2, [r3, #6]
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000014 	.word	0x20000014
 8001a34:	200003b4 	.word	0x200003b4
 8001a38:	200003c4 	.word	0x200003c4

08001a3c <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	//restore signed 24 bit sample from 16-bit buffers
  if (isConfigComplete == 1) {
 8001a44:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d127      	bne.n	8001a9c <HAL_I2SEx_TxRxCpltCallback+0x60>
    int lSample = (int) (rxBuf[4]<<16)|rxBuf[5];
 8001a4c:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8001a4e:	891b      	ldrh	r3, [r3, #8]
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	4a15      	ldr	r2, [pc, #84]	@ (8001aa8 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8001a54:	8952      	ldrh	r2, [r2, #10]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
    int rSample = (int) (rxBuf[6]<<16)|rxBuf[7];
 8001a5a:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8001a5c:	899b      	ldrh	r3, [r3, #12]
 8001a5e:	041b      	lsls	r3, r3, #16
 8001a60:	4a11      	ldr	r2, [pc, #68]	@ (8001aa8 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8001a62:	89d2      	ldrh	r2, [r2, #14]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]

    //run HP on left channel and LP on right channel
    // lSample = Calc_IIR(lSample);
    // rSample = Calc_IIR(rSample);
      rSample = CalPeakingLow(rSample);
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f7ff ff45 	bl	80018f8 <CalPeakingLow>
 8001a6e:	60b8      	str	r0, [r7, #8]
      lSample = CalPeakingLow(lSample);
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f7ff ff41 	bl	80018f8 <CalPeakingLow>
 8001a76:	60f8      	str	r0, [r7, #12]
    // } else {
    //   printf("Bypass Mode\n");

    //restore to buffer
    txBuf[4] = (lSample>>16)&0xFFFF;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	0c1b      	lsrs	r3, r3, #16
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <HAL_I2SEx_TxRxCpltCallback+0x70>)
 8001a80:	811a      	strh	r2, [r3, #8]
    txBuf[5] = lSample&0xFFFF;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <HAL_I2SEx_TxRxCpltCallback+0x70>)
 8001a88:	815a      	strh	r2, [r3, #10]
    txBuf[6] = (rSample>>16)&0xFFFF;
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	0c1b      	lsrs	r3, r3, #16
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <HAL_I2SEx_TxRxCpltCallback+0x70>)
 8001a92:	819a      	strh	r2, [r3, #12]
    txBuf[7] = rSample&0xFFFF;
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	4b04      	ldr	r3, [pc, #16]	@ (8001aac <HAL_I2SEx_TxRxCpltCallback+0x70>)
 8001a9a:	81da      	strh	r2, [r3, #14]
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000014 	.word	0x20000014
 8001aa8:	200003b4 	.word	0x200003b4
 8001aac:	200003c4 	.word	0x200003c4

08001ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab4:	b672      	cpsid	i
}
 8001ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <Error_Handler+0x8>

08001abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	4b10      	ldr	r3, [pc, #64]	@ (8001b08 <HAL_MspInit+0x4c>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aca:	4a0f      	ldr	r2, [pc, #60]	@ (8001b08 <HAL_MspInit+0x4c>)
 8001acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8001b08 <HAL_MspInit+0x4c>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <HAL_MspInit+0x4c>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	4a08      	ldr	r2, [pc, #32]	@ (8001b08 <HAL_MspInit+0x4c>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <HAL_MspInit+0x4c>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800

08001b0c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08e      	sub	sp, #56	@ 0x38
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a6b      	ldr	r2, [pc, #428]	@ (8001ce4 <HAL_I2S_MspInit+0x1d8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	f040 80cf 	bne.w	8001cdc <HAL_I2S_MspInit+0x1d0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001b42:	23c0      	movs	r3, #192	@ 0xc0
 8001b44:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001b46:	2302      	movs	r3, #2
 8001b48:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 fd48 	bl	80045e4 <HAL_RCCEx_PeriphCLKConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001b5a:	f7ff ffa9 	bl	8001ab0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	4b61      	ldr	r3, [pc, #388]	@ (8001ce8 <HAL_I2S_MspInit+0x1dc>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	4a60      	ldr	r2, [pc, #384]	@ (8001ce8 <HAL_I2S_MspInit+0x1dc>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b6e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ce8 <HAL_I2S_MspInit+0x1dc>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ce8 <HAL_I2S_MspInit+0x1dc>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	4a59      	ldr	r2, [pc, #356]	@ (8001ce8 <HAL_I2S_MspInit+0x1dc>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8a:	4b57      	ldr	r3, [pc, #348]	@ (8001ce8 <HAL_I2S_MspInit+0x1dc>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	4b53      	ldr	r3, [pc, #332]	@ (8001ce8 <HAL_I2S_MspInit+0x1dc>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	4a52      	ldr	r2, [pc, #328]	@ (8001ce8 <HAL_I2S_MspInit+0x1dc>)
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba6:	4b50      	ldr	r3, [pc, #320]	@ (8001ce8 <HAL_I2S_MspInit+0x1dc>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001bb2:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bc4:	2305      	movs	r3, #5
 8001bc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4847      	ldr	r0, [pc, #284]	@ (8001cec <HAL_I2S_MspInit+0x1e0>)
 8001bd0:	f000 ffc6 	bl	8002b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001bd4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001be6:	2306      	movs	r3, #6
 8001be8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bee:	4619      	mov	r1, r3
 8001bf0:	483e      	ldr	r0, [pc, #248]	@ (8001cec <HAL_I2S_MspInit+0x1e0>)
 8001bf2:	f000 ffb5 	bl	8002b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bf6:	2340      	movs	r3, #64	@ 0x40
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c06:	2305      	movs	r3, #5
 8001c08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4837      	ldr	r0, [pc, #220]	@ (8001cf0 <HAL_I2S_MspInit+0x1e4>)
 8001c12:	f000 ffa5 	bl	8002b60 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8001c16:	4b37      	ldr	r3, [pc, #220]	@ (8001cf4 <HAL_I2S_MspInit+0x1e8>)
 8001c18:	4a37      	ldr	r2, [pc, #220]	@ (8001cf8 <HAL_I2S_MspInit+0x1ec>)
 8001c1a:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001c1c:	4b35      	ldr	r3, [pc, #212]	@ (8001cf4 <HAL_I2S_MspInit+0x1e8>)
 8001c1e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001c22:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c24:	4b33      	ldr	r3, [pc, #204]	@ (8001cf4 <HAL_I2S_MspInit+0x1e8>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c2a:	4b32      	ldr	r3, [pc, #200]	@ (8001cf4 <HAL_I2S_MspInit+0x1e8>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c30:	4b30      	ldr	r3, [pc, #192]	@ (8001cf4 <HAL_I2S_MspInit+0x1e8>)
 8001c32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c36:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c38:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf4 <HAL_I2S_MspInit+0x1e8>)
 8001c3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c3e:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c40:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf4 <HAL_I2S_MspInit+0x1e8>)
 8001c42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c46:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001c48:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf4 <HAL_I2S_MspInit+0x1e8>)
 8001c4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c4e:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001c50:	4b28      	ldr	r3, [pc, #160]	@ (8001cf4 <HAL_I2S_MspInit+0x1e8>)
 8001c52:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c56:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c58:	4b26      	ldr	r3, [pc, #152]	@ (8001cf4 <HAL_I2S_MspInit+0x1e8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8001c5e:	4825      	ldr	r0, [pc, #148]	@ (8001cf4 <HAL_I2S_MspInit+0x1e8>)
 8001c60:	f000 fb7c 	bl	800235c <HAL_DMA_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 8001c6a:	f7ff ff21 	bl	8001ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a20      	ldr	r2, [pc, #128]	@ (8001cf4 <HAL_I2S_MspInit+0x1e8>)
 8001c72:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c74:	4a1f      	ldr	r2, [pc, #124]	@ (8001cf4 <HAL_I2S_MspInit+0x1e8>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001c7a:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <HAL_I2S_MspInit+0x1f0>)
 8001c7c:	4a20      	ldr	r2, [pc, #128]	@ (8001d00 <HAL_I2S_MspInit+0x1f4>)
 8001c7e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001c80:	4b1e      	ldr	r3, [pc, #120]	@ (8001cfc <HAL_I2S_MspInit+0x1f0>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c86:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <HAL_I2S_MspInit+0x1f0>)
 8001c88:	2240      	movs	r2, #64	@ 0x40
 8001c8a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <HAL_I2S_MspInit+0x1f0>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c92:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <HAL_I2S_MspInit+0x1f0>)
 8001c94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c98:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c9a:	4b18      	ldr	r3, [pc, #96]	@ (8001cfc <HAL_I2S_MspInit+0x1f0>)
 8001c9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ca0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ca2:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <HAL_I2S_MspInit+0x1f0>)
 8001ca4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ca8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001caa:	4b14      	ldr	r3, [pc, #80]	@ (8001cfc <HAL_I2S_MspInit+0x1f0>)
 8001cac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cb0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001cb2:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <HAL_I2S_MspInit+0x1f0>)
 8001cb4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cb8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <HAL_I2S_MspInit+0x1f0>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001cc0:	480e      	ldr	r0, [pc, #56]	@ (8001cfc <HAL_I2S_MspInit+0x1f0>)
 8001cc2:	f000 fb4b 	bl	800235c <HAL_DMA_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 8001ccc:	f7ff fef0 	bl	8001ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <HAL_I2S_MspInit+0x1f0>)
 8001cd4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cd6:	4a09      	ldr	r2, [pc, #36]	@ (8001cfc <HAL_I2S_MspInit+0x1f0>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001cdc:	bf00      	nop
 8001cde:	3738      	adds	r7, #56	@ 0x38
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40003800 	.word	0x40003800
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	40020800 	.word	0x40020800
 8001cf4:	20000250 	.word	0x20000250
 8001cf8:	40026058 	.word	0x40026058
 8001cfc:	200002b0 	.word	0x200002b0
 8001d00:	40026070 	.word	0x40026070

08001d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	@ 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1d      	ldr	r2, [pc, #116]	@ (8001d98 <HAL_UART_MspInit+0x94>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d134      	bne.n	8001d90 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d9c <HAL_UART_MspInit+0x98>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001d9c <HAL_UART_MspInit+0x98>)
 8001d30:	f043 0310 	orr.w	r3, r3, #16
 8001d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d36:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <HAL_UART_MspInit+0x98>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <HAL_UART_MspInit+0x98>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	4a14      	ldr	r2, [pc, #80]	@ (8001d9c <HAL_UART_MspInit+0x98>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d52:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <HAL_UART_MspInit+0x98>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d5e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d70:	2307      	movs	r3, #7
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4809      	ldr	r0, [pc, #36]	@ (8001da0 <HAL_UART_MspInit+0x9c>)
 8001d7c:	f000 fef0 	bl	8002b60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	2025      	movs	r0, #37	@ 0x25
 8001d86:	f000 fab2 	bl	80022ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d8a:	2025      	movs	r0, #37	@ 0x25
 8001d8c:	f000 facb 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	@ 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40011000 	.word	0x40011000
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020000 	.word	0x40020000

08001da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <NMI_Handler+0x4>

08001dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <HardFault_Handler+0x4>

08001db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <MemManage_Handler+0x4>

08001dbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <BusFault_Handler+0x4>

08001dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <UsageFault_Handler+0x4>

08001dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dfa:	f000 f959 	bl	80020b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001e08:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <DMA1_Stream3_IRQHandler+0x10>)
 8001e0a:	f000 fc3f 	bl	800268c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000250 	.word	0x20000250

08001e18 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001e1c:	4802      	ldr	r0, [pc, #8]	@ (8001e28 <DMA1_Stream4_IRQHandler+0x10>)
 8001e1e:	f000 fc35 	bl	800268c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200002b0 	.word	0x200002b0

08001e2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e30:	4802      	ldr	r0, [pc, #8]	@ (8001e3c <USART1_IRQHandler+0x10>)
 8001e32:	f002 fe19 	bl	8004a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000310 	.word	0x20000310

08001e40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return 1;
 8001e44:	2301      	movs	r3, #1
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <_kill>:

int _kill(int pid, int sig)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e5a:	f004 fe81 	bl	8006b60 <__errno>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2216      	movs	r2, #22
 8001e62:	601a      	str	r2, [r3, #0]
  return -1;
 8001e64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <_exit>:

void _exit (int status)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e78:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ffe7 	bl	8001e50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e82:	bf00      	nop
 8001e84:	e7fd      	b.n	8001e82 <_exit+0x12>

08001e86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e00a      	b.n	8001eae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e98:	f3af 8000 	nop.w
 8001e9c:	4601      	mov	r1, r0
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	60ba      	str	r2, [r7, #8]
 8001ea4:	b2ca      	uxtb	r2, r1
 8001ea6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	dbf0      	blt.n	8001e98 <_read+0x12>
  }

  return len;
 8001eb6:	687b      	ldr	r3, [r7, #4]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ee8:	605a      	str	r2, [r3, #4]
  return 0;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <_isatty>:

int _isatty(int file)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f00:	2301      	movs	r3, #1
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b085      	sub	sp, #20
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f30:	4a14      	ldr	r2, [pc, #80]	@ (8001f84 <_sbrk+0x5c>)
 8001f32:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <_sbrk+0x60>)
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f3c:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f44:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <_sbrk+0x64>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	@ (8001f90 <_sbrk+0x68>)
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4a:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d207      	bcs.n	8001f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f58:	f004 fe02 	bl	8006b60 <__errno>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	220c      	movs	r2, #12
 8001f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	e009      	b.n	8001f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f68:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <_sbrk+0x64>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	4a05      	ldr	r2, [pc, #20]	@ (8001f8c <_sbrk+0x64>)
 8001f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20020000 	.word	0x20020000
 8001f88:	00000400 	.word	0x00000400
 8001f8c:	2000044c 	.word	0x2000044c
 8001f90:	200005a0 	.word	0x200005a0

08001f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f98:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <SystemInit+0x20>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f9e:	4a05      	ldr	r2, [pc, #20]	@ (8001fb4 <SystemInit+0x20>)
 8001fa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ff0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fbc:	f7ff ffea 	bl	8001f94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc0:	480c      	ldr	r0, [pc, #48]	@ (8001ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fc2:	490d      	ldr	r1, [pc, #52]	@ (8001ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc8:	e002      	b.n	8001fd0 <LoopCopyDataInit>

08001fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fce:	3304      	adds	r3, #4

08001fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd4:	d3f9      	bcc.n	8001fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8002004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fdc:	e001      	b.n	8001fe2 <LoopFillZerobss>

08001fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe0:	3204      	adds	r2, #4

08001fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe4:	d3fb      	bcc.n	8001fde <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001fe6:	f004 fdc1 	bl	8006b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fea:	f7ff f823 	bl	8001034 <main>
  bx  lr    
 8001fee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ff0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001ffc:	0800af64 	.word	0x0800af64
  ldr r2, =_sbss
 8002000:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002004:	200005a0 	.word	0x200005a0

08002008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002008:	e7fe      	b.n	8002008 <ADC_IRQHandler>
	...

0800200c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002010:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <HAL_Init+0x40>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <HAL_Init+0x40>)
 8002016:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800201a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800201c:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <HAL_Init+0x40>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <HAL_Init+0x40>)
 8002022:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002028:	4b08      	ldr	r3, [pc, #32]	@ (800204c <HAL_Init+0x40>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a07      	ldr	r2, [pc, #28]	@ (800204c <HAL_Init+0x40>)
 800202e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002034:	2003      	movs	r0, #3
 8002036:	f000 f94f 	bl	80022d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800203a:	200f      	movs	r0, #15
 800203c:	f000 f808 	bl	8002050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002040:	f7ff fd3c 	bl	8001abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023c00 	.word	0x40023c00

08002050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002058:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <HAL_InitTick+0x54>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <HAL_InitTick+0x58>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4619      	mov	r1, r3
 8002062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002066:	fbb3 f3f1 	udiv	r3, r3, r1
 800206a:	fbb2 f3f3 	udiv	r3, r2, r3
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f967 	bl	8002342 <HAL_SYSTICK_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e00e      	b.n	800209c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	d80a      	bhi.n	800209a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002084:	2200      	movs	r2, #0
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f000 f92f 	bl	80022ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002090:	4a06      	ldr	r2, [pc, #24]	@ (80020ac <HAL_InitTick+0x5c>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000018 	.word	0x20000018
 80020a8:	20000020 	.word	0x20000020
 80020ac:	2000001c 	.word	0x2000001c

080020b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b4:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <HAL_IncTick+0x20>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <HAL_IncTick+0x24>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	4a04      	ldr	r2, [pc, #16]	@ (80020d4 <HAL_IncTick+0x24>)
 80020c2:	6013      	str	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000020 	.word	0x20000020
 80020d4:	20000450 	.word	0x20000450

080020d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return uwTick;
 80020dc:	4b03      	ldr	r3, [pc, #12]	@ (80020ec <HAL_GetTick+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000450 	.word	0x20000450

080020f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f8:	f7ff ffee 	bl	80020d8 <HAL_GetTick>
 80020fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d005      	beq.n	8002116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800210a:	4b0a      	ldr	r3, [pc, #40]	@ (8002134 <HAL_Delay+0x44>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002116:	bf00      	nop
 8002118:	f7ff ffde 	bl	80020d8 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	429a      	cmp	r2, r3
 8002126:	d8f7      	bhi.n	8002118 <HAL_Delay+0x28>
  {
  }
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000020 	.word	0x20000020

08002138 <__NVIC_SetPriorityGrouping>:
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002148:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <__NVIC_SetPriorityGrouping+0x44>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002154:	4013      	ands	r3, r2
 8002156:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002160:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216a:	4a04      	ldr	r2, [pc, #16]	@ (800217c <__NVIC_SetPriorityGrouping+0x44>)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	60d3      	str	r3, [r2, #12]
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <__NVIC_GetPriorityGrouping>:
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002184:	4b04      	ldr	r3, [pc, #16]	@ (8002198 <__NVIC_GetPriorityGrouping+0x18>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	0a1b      	lsrs	r3, r3, #8
 800218a:	f003 0307 	and.w	r3, r3, #7
}
 800218e:	4618      	mov	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <__NVIC_EnableIRQ>:
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	db0b      	blt.n	80021c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	f003 021f 	and.w	r2, r3, #31
 80021b4:	4907      	ldr	r1, [pc, #28]	@ (80021d4 <__NVIC_EnableIRQ+0x38>)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	2001      	movs	r0, #1
 80021be:	fa00 f202 	lsl.w	r2, r0, r2
 80021c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000e100 	.word	0xe000e100

080021d8 <__NVIC_SetPriority>:
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	6039      	str	r1, [r7, #0]
 80021e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	db0a      	blt.n	8002202 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	490c      	ldr	r1, [pc, #48]	@ (8002224 <__NVIC_SetPriority+0x4c>)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	0112      	lsls	r2, r2, #4
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	440b      	add	r3, r1
 80021fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002200:	e00a      	b.n	8002218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4908      	ldr	r1, [pc, #32]	@ (8002228 <__NVIC_SetPriority+0x50>)
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	3b04      	subs	r3, #4
 8002210:	0112      	lsls	r2, r2, #4
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	440b      	add	r3, r1
 8002216:	761a      	strb	r2, [r3, #24]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000e100 	.word	0xe000e100
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <NVIC_EncodePriority>:
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	@ 0x24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f1c3 0307 	rsb	r3, r3, #7
 8002246:	2b04      	cmp	r3, #4
 8002248:	bf28      	it	cs
 800224a:	2304      	movcs	r3, #4
 800224c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3304      	adds	r3, #4
 8002252:	2b06      	cmp	r3, #6
 8002254:	d902      	bls.n	800225c <NVIC_EncodePriority+0x30>
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3b03      	subs	r3, #3
 800225a:	e000      	b.n	800225e <NVIC_EncodePriority+0x32>
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	f04f 32ff 	mov.w	r2, #4294967295
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43da      	mvns	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	401a      	ands	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002274:	f04f 31ff 	mov.w	r1, #4294967295
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	fa01 f303 	lsl.w	r3, r1, r3
 800227e:	43d9      	mvns	r1, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002284:	4313      	orrs	r3, r2
}
 8002286:	4618      	mov	r0, r3
 8002288:	3724      	adds	r7, #36	@ 0x24
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <SysTick_Config>:
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022a4:	d301      	bcc.n	80022aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00f      	b.n	80022ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022aa:	4a0a      	ldr	r2, [pc, #40]	@ (80022d4 <SysTick_Config+0x40>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b2:	210f      	movs	r1, #15
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	f7ff ff8e 	bl	80021d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022bc:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <SysTick_Config+0x40>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c2:	4b04      	ldr	r3, [pc, #16]	@ (80022d4 <SysTick_Config+0x40>)
 80022c4:	2207      	movs	r2, #7
 80022c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	e000e010 	.word	0xe000e010

080022d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff ff29 	bl	8002138 <__NVIC_SetPriorityGrouping>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b086      	sub	sp, #24
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4603      	mov	r3, r0
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002300:	f7ff ff3e 	bl	8002180 <__NVIC_GetPriorityGrouping>
 8002304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	6978      	ldr	r0, [r7, #20]
 800230c:	f7ff ff8e 	bl	800222c <NVIC_EncodePriority>
 8002310:	4602      	mov	r2, r0
 8002312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff5d 	bl	80021d8 <__NVIC_SetPriority>
}
 800231e:	bf00      	nop
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff31 	bl	800219c <__NVIC_EnableIRQ>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff ffa2 	bl	8002294 <SysTick_Config>
 8002350:	4603      	mov	r3, r0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002368:	f7ff feb6 	bl	80020d8 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e099      	b.n	80024ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002398:	e00f      	b.n	80023ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800239a:	f7ff fe9d 	bl	80020d8 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	d908      	bls.n	80023ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2220      	movs	r2, #32
 80023ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2203      	movs	r2, #3
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e078      	b.n	80024ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1e8      	bne.n	800239a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	4b38      	ldr	r3, [pc, #224]	@ (80024b4 <HAL_DMA_Init+0x158>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002410:	2b04      	cmp	r3, #4
 8002412:	d107      	bne.n	8002424 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241c:	4313      	orrs	r3, r2
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f023 0307 	bic.w	r3, r3, #7
 800243a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244a:	2b04      	cmp	r3, #4
 800244c:	d117      	bne.n	800247e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00e      	beq.n	800247e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fb01 	bl	8002a68 <DMA_CheckFifoParam>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2240      	movs	r2, #64	@ 0x40
 8002470:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800247a:	2301      	movs	r3, #1
 800247c:	e016      	b.n	80024ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fab8 	bl	80029fc <DMA_CalcBaseAndBitshift>
 800248c:	4603      	mov	r3, r0
 800248e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002494:	223f      	movs	r2, #63	@ 0x3f
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	f010803f 	.word	0xf010803f

080024b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_DMA_Start_IT+0x26>
 80024da:	2302      	movs	r3, #2
 80024dc:	e040      	b.n	8002560 <HAL_DMA_Start_IT+0xa8>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d12f      	bne.n	8002552 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2202      	movs	r2, #2
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fa4a 	bl	80029a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002510:	223f      	movs	r2, #63	@ 0x3f
 8002512:	409a      	lsls	r2, r3
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0216 	orr.w	r2, r2, #22
 8002526:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0208 	orr.w	r2, r2, #8
 800253e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	e005      	b.n	800255e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800255a:	2302      	movs	r3, #2
 800255c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800255e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002574:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002576:	f7ff fdaf 	bl	80020d8 <HAL_GetTick>
 800257a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d008      	beq.n	800259a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2280      	movs	r2, #128	@ 0x80
 800258c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e052      	b.n	8002640 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0216 	bic.w	r2, r2, #22
 80025a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d103      	bne.n	80025ca <HAL_DMA_Abort+0x62>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0208 	bic.w	r2, r2, #8
 80025d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0201 	bic.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ea:	e013      	b.n	8002614 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ec:	f7ff fd74 	bl	80020d8 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b05      	cmp	r3, #5
 80025f8:	d90c      	bls.n	8002614 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2220      	movs	r2, #32
 80025fe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2203      	movs	r2, #3
 8002604:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e015      	b.n	8002640 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1e4      	bne.n	80025ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002626:	223f      	movs	r2, #63	@ 0x3f
 8002628:	409a      	lsls	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d004      	beq.n	8002666 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2280      	movs	r2, #128	@ 0x80
 8002660:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e00c      	b.n	8002680 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2205      	movs	r2, #5
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0201 	bic.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002698:	4b8e      	ldr	r3, [pc, #568]	@ (80028d4 <HAL_DMA_IRQHandler+0x248>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a8e      	ldr	r2, [pc, #568]	@ (80028d8 <HAL_DMA_IRQHandler+0x24c>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	0a9b      	lsrs	r3, r3, #10
 80026a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b6:	2208      	movs	r2, #8
 80026b8:	409a      	lsls	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01a      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0204 	bic.w	r2, r2, #4
 80026de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e4:	2208      	movs	r2, #8
 80026e6:	409a      	lsls	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f0:	f043 0201 	orr.w	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fc:	2201      	movs	r2, #1
 80026fe:	409a      	lsls	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d012      	beq.n	800272e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271a:	2201      	movs	r2, #1
 800271c:	409a      	lsls	r2, r3
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002726:	f043 0202 	orr.w	r2, r3, #2
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002732:	2204      	movs	r2, #4
 8002734:	409a      	lsls	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d012      	beq.n	8002764 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00b      	beq.n	8002764 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002750:	2204      	movs	r2, #4
 8002752:	409a      	lsls	r2, r3
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275c:	f043 0204 	orr.w	r2, r3, #4
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002768:	2210      	movs	r2, #16
 800276a:	409a      	lsls	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d043      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d03c      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002786:	2210      	movs	r2, #16
 8002788:	409a      	lsls	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d108      	bne.n	80027bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d024      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
 80027ba:	e01f      	b.n	80027fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01b      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
 80027cc:	e016      	b.n	80027fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d107      	bne.n	80027ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0208 	bic.w	r2, r2, #8
 80027ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002800:	2220      	movs	r2, #32
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 808f 	beq.w	800292c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8087 	beq.w	800292c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002822:	2220      	movs	r2, #32
 8002824:	409a      	lsls	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b05      	cmp	r3, #5
 8002834:	d136      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0216 	bic.w	r2, r2, #22
 8002844:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002854:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <HAL_DMA_IRQHandler+0x1da>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002862:	2b00      	cmp	r3, #0
 8002864:	d007      	beq.n	8002876 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0208 	bic.w	r2, r2, #8
 8002874:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287a:	223f      	movs	r2, #63	@ 0x3f
 800287c:	409a      	lsls	r2, r3
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002896:	2b00      	cmp	r3, #0
 8002898:	d07e      	beq.n	8002998 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4798      	blx	r3
        }
        return;
 80028a2:	e079      	b.n	8002998 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01d      	beq.n	80028ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10d      	bne.n	80028dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d031      	beq.n	800292c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
 80028d0:	e02c      	b.n	800292c <HAL_DMA_IRQHandler+0x2a0>
 80028d2:	bf00      	nop
 80028d4:	20000018 	.word	0x20000018
 80028d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d023      	beq.n	800292c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
 80028ec:	e01e      	b.n	800292c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10f      	bne.n	800291c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0210 	bic.w	r2, r2, #16
 800290a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002930:	2b00      	cmp	r3, #0
 8002932:	d032      	beq.n	800299a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d022      	beq.n	8002986 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2205      	movs	r2, #5
 8002944:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	3301      	adds	r3, #1
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	429a      	cmp	r2, r3
 8002962:	d307      	bcc.n	8002974 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f2      	bne.n	8002958 <HAL_DMA_IRQHandler+0x2cc>
 8002972:	e000      	b.n	8002976 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002974:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
 8002996:	e000      	b.n	800299a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002998:	bf00      	nop
    }
  }
}
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80029bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b40      	cmp	r3, #64	@ 0x40
 80029cc:	d108      	bne.n	80029e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029de:	e007      	b.n	80029f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	3b10      	subs	r3, #16
 8002a0c:	4a14      	ldr	r2, [pc, #80]	@ (8002a60 <DMA_CalcBaseAndBitshift+0x64>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a16:	4a13      	ldr	r2, [pc, #76]	@ (8002a64 <DMA_CalcBaseAndBitshift+0x68>)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d909      	bls.n	8002a3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a32:	f023 0303 	bic.w	r3, r3, #3
 8002a36:	1d1a      	adds	r2, r3, #4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a3c:	e007      	b.n	8002a4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a46:	f023 0303 	bic.w	r3, r3, #3
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	aaaaaaab 	.word	0xaaaaaaab
 8002a64:	0800ab04 	.word	0x0800ab04

08002a68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d11f      	bne.n	8002ac2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d856      	bhi.n	8002b36 <DMA_CheckFifoParam+0xce>
 8002a88:	a201      	add	r2, pc, #4	@ (adr r2, 8002a90 <DMA_CheckFifoParam+0x28>)
 8002a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8e:	bf00      	nop
 8002a90:	08002aa1 	.word	0x08002aa1
 8002a94:	08002ab3 	.word	0x08002ab3
 8002a98:	08002aa1 	.word	0x08002aa1
 8002a9c:	08002b37 	.word	0x08002b37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d046      	beq.n	8002b3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab0:	e043      	b.n	8002b3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002aba:	d140      	bne.n	8002b3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac0:	e03d      	b.n	8002b3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002aca:	d121      	bne.n	8002b10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d837      	bhi.n	8002b42 <DMA_CheckFifoParam+0xda>
 8002ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad8 <DMA_CheckFifoParam+0x70>)
 8002ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad8:	08002ae9 	.word	0x08002ae9
 8002adc:	08002aef 	.word	0x08002aef
 8002ae0:	08002ae9 	.word	0x08002ae9
 8002ae4:	08002b01 	.word	0x08002b01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
      break;
 8002aec:	e030      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d025      	beq.n	8002b46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002afe:	e022      	b.n	8002b46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b04:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b08:	d11f      	bne.n	8002b4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b0e:	e01c      	b.n	8002b4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d903      	bls.n	8002b1e <DMA_CheckFifoParam+0xb6>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d003      	beq.n	8002b24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b1c:	e018      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
      break;
 8002b22:	e015      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00e      	beq.n	8002b4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
      break;
 8002b34:	e00b      	b.n	8002b4e <DMA_CheckFifoParam+0xe6>
      break;
 8002b36:	bf00      	nop
 8002b38:	e00a      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b3a:	bf00      	nop
 8002b3c:	e008      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e006      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b42:	bf00      	nop
 8002b44:	e004      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b46:	bf00      	nop
 8002b48:	e002      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b4a:	bf00      	nop
 8002b4c:	e000      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b4e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop

08002b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	@ 0x24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	e16b      	b.n	8002e54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	f040 815a 	bne.w	8002e4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d005      	beq.n	8002bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d130      	bne.n	8002c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002be8:	2201      	movs	r2, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 0201 	and.w	r2, r3, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d017      	beq.n	8002c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d123      	bne.n	8002ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	08da      	lsrs	r2, r3, #3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3208      	adds	r2, #8
 8002c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	220f      	movs	r2, #15
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	08da      	lsrs	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3208      	adds	r2, #8
 8002c9e:	69b9      	ldr	r1, [r7, #24]
 8002ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	2203      	movs	r2, #3
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0203 	and.w	r2, r3, #3
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80b4 	beq.w	8002e4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	4b60      	ldr	r3, [pc, #384]	@ (8002e6c <HAL_GPIO_Init+0x30c>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	4a5f      	ldr	r2, [pc, #380]	@ (8002e6c <HAL_GPIO_Init+0x30c>)
 8002cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cf6:	4b5d      	ldr	r3, [pc, #372]	@ (8002e6c <HAL_GPIO_Init+0x30c>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d02:	4a5b      	ldr	r2, [pc, #364]	@ (8002e70 <HAL_GPIO_Init+0x310>)
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	089b      	lsrs	r3, r3, #2
 8002d08:	3302      	adds	r3, #2
 8002d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	220f      	movs	r2, #15
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a52      	ldr	r2, [pc, #328]	@ (8002e74 <HAL_GPIO_Init+0x314>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d02b      	beq.n	8002d86 <HAL_GPIO_Init+0x226>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a51      	ldr	r2, [pc, #324]	@ (8002e78 <HAL_GPIO_Init+0x318>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d025      	beq.n	8002d82 <HAL_GPIO_Init+0x222>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a50      	ldr	r2, [pc, #320]	@ (8002e7c <HAL_GPIO_Init+0x31c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01f      	beq.n	8002d7e <HAL_GPIO_Init+0x21e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a4f      	ldr	r2, [pc, #316]	@ (8002e80 <HAL_GPIO_Init+0x320>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d019      	beq.n	8002d7a <HAL_GPIO_Init+0x21a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a4e      	ldr	r2, [pc, #312]	@ (8002e84 <HAL_GPIO_Init+0x324>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_GPIO_Init+0x216>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4d      	ldr	r2, [pc, #308]	@ (8002e88 <HAL_GPIO_Init+0x328>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00d      	beq.n	8002d72 <HAL_GPIO_Init+0x212>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a4c      	ldr	r2, [pc, #304]	@ (8002e8c <HAL_GPIO_Init+0x32c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d007      	beq.n	8002d6e <HAL_GPIO_Init+0x20e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4b      	ldr	r2, [pc, #300]	@ (8002e90 <HAL_GPIO_Init+0x330>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_GPIO_Init+0x20a>
 8002d66:	2307      	movs	r3, #7
 8002d68:	e00e      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d6a:	2308      	movs	r3, #8
 8002d6c:	e00c      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d6e:	2306      	movs	r3, #6
 8002d70:	e00a      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d72:	2305      	movs	r3, #5
 8002d74:	e008      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d76:	2304      	movs	r3, #4
 8002d78:	e006      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e004      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e002      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d86:	2300      	movs	r3, #0
 8002d88:	69fa      	ldr	r2, [r7, #28]
 8002d8a:	f002 0203 	and.w	r2, r2, #3
 8002d8e:	0092      	lsls	r2, r2, #2
 8002d90:	4093      	lsls	r3, r2
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d98:	4935      	ldr	r1, [pc, #212]	@ (8002e70 <HAL_GPIO_Init+0x310>)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	089b      	lsrs	r3, r3, #2
 8002d9e:	3302      	adds	r3, #2
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002da6:	4b3b      	ldr	r3, [pc, #236]	@ (8002e94 <HAL_GPIO_Init+0x334>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dca:	4a32      	ldr	r2, [pc, #200]	@ (8002e94 <HAL_GPIO_Init+0x334>)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd0:	4b30      	ldr	r3, [pc, #192]	@ (8002e94 <HAL_GPIO_Init+0x334>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002df4:	4a27      	ldr	r2, [pc, #156]	@ (8002e94 <HAL_GPIO_Init+0x334>)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dfa:	4b26      	ldr	r3, [pc, #152]	@ (8002e94 <HAL_GPIO_Init+0x334>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002e94 <HAL_GPIO_Init+0x334>)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e24:	4b1b      	ldr	r3, [pc, #108]	@ (8002e94 <HAL_GPIO_Init+0x334>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e48:	4a12      	ldr	r2, [pc, #72]	@ (8002e94 <HAL_GPIO_Init+0x334>)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3301      	adds	r3, #1
 8002e52:	61fb      	str	r3, [r7, #28]
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	2b0f      	cmp	r3, #15
 8002e58:	f67f ae90 	bls.w	8002b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	3724      	adds	r7, #36	@ 0x24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40013800 	.word	0x40013800
 8002e74:	40020000 	.word	0x40020000
 8002e78:	40020400 	.word	0x40020400
 8002e7c:	40020800 	.word	0x40020800
 8002e80:	40020c00 	.word	0x40020c00
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40021400 	.word	0x40021400
 8002e8c:	40021800 	.word	0x40021800
 8002e90:	40021c00 	.word	0x40021c00
 8002e94:	40013c00 	.word	0x40013c00

08002e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ea8:	787b      	ldrb	r3, [r7, #1]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eae:	887a      	ldrh	r2, [r7, #2]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002eb4:	e003      	b.n	8002ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eb6:	887b      	ldrh	r3, [r7, #2]
 8002eb8:	041a      	lsls	r2, r3, #16
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	619a      	str	r2, [r3, #24]
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b085      	sub	sp, #20
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002edc:	887a      	ldrh	r2, [r7, #2]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	041a      	lsls	r2, r3, #16
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	43d9      	mvns	r1, r3
 8002ee8:	887b      	ldrh	r3, [r7, #2]
 8002eea:	400b      	ands	r3, r1
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	619a      	str	r2, [r3, #24]
}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e128      	b.n	8003164 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a90      	ldr	r2, [pc, #576]	@ (800316c <HAL_I2S_Init+0x26c>)
 8002f2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7fe fded 	bl	8001b0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2202      	movs	r2, #2
 8002f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002f48:	f023 030f 	bic.w	r3, r3, #15
 8002f4c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2202      	movs	r2, #2
 8002f54:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d060      	beq.n	8003020 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f66:	2310      	movs	r3, #16
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	e001      	b.n	8002f70 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f6c:	2320      	movs	r3, #32
 8002f6e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d802      	bhi.n	8002f7e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f001 fc12 	bl	80047a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f84:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f8e:	d125      	bne.n	8002fdc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d010      	beq.n	8002fba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	461a      	mov	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb4:	3305      	adds	r3, #5
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	e01f      	b.n	8002ffa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	461a      	mov	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd6:	3305      	adds	r3, #5
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	e00e      	b.n	8002ffa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	461a      	mov	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff6:	3305      	adds	r3, #5
 8002ff8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4a5c      	ldr	r2, [pc, #368]	@ (8003170 <HAL_I2S_Init+0x270>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	08db      	lsrs	r3, r3, #3
 8003004:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	085b      	lsrs	r3, r3, #1
 8003016:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	e003      	b.n	8003028 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003020:	2302      	movs	r3, #2
 8003022:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d902      	bls.n	8003034 <HAL_I2S_Init+0x134>
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	2bff      	cmp	r3, #255	@ 0xff
 8003032:	d907      	bls.n	8003044 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003038:	f043 0210 	orr.w	r2, r3, #16
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e08f      	b.n	8003164 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	ea42 0103 	orr.w	r1, r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	430a      	orrs	r2, r1
 8003056:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003062:	f023 030f 	bic.w	r3, r3, #15
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6851      	ldr	r1, [r2, #4]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6892      	ldr	r2, [r2, #8]
 800306e:	4311      	orrs	r1, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68d2      	ldr	r2, [r2, #12]
 8003074:	4311      	orrs	r1, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6992      	ldr	r2, [r2, #24]
 800307a:	430a      	orrs	r2, r1
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003086:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d161      	bne.n	8003154 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a38      	ldr	r2, [pc, #224]	@ (8003174 <HAL_I2S_Init+0x274>)
 8003094:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a37      	ldr	r2, [pc, #220]	@ (8003178 <HAL_I2S_Init+0x278>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d101      	bne.n	80030a4 <HAL_I2S_Init+0x1a4>
 80030a0:	4b36      	ldr	r3, [pc, #216]	@ (800317c <HAL_I2S_Init+0x27c>)
 80030a2:	e001      	b.n	80030a8 <HAL_I2S_Init+0x1a8>
 80030a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6812      	ldr	r2, [r2, #0]
 80030ae:	4932      	ldr	r1, [pc, #200]	@ (8003178 <HAL_I2S_Init+0x278>)
 80030b0:	428a      	cmp	r2, r1
 80030b2:	d101      	bne.n	80030b8 <HAL_I2S_Init+0x1b8>
 80030b4:	4a31      	ldr	r2, [pc, #196]	@ (800317c <HAL_I2S_Init+0x27c>)
 80030b6:	e001      	b.n	80030bc <HAL_I2S_Init+0x1bc>
 80030b8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80030bc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80030c0:	f023 030f 	bic.w	r3, r3, #15
 80030c4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003178 <HAL_I2S_Init+0x278>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d101      	bne.n	80030d4 <HAL_I2S_Init+0x1d4>
 80030d0:	4b2a      	ldr	r3, [pc, #168]	@ (800317c <HAL_I2S_Init+0x27c>)
 80030d2:	e001      	b.n	80030d8 <HAL_I2S_Init+0x1d8>
 80030d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030d8:	2202      	movs	r2, #2
 80030da:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a25      	ldr	r2, [pc, #148]	@ (8003178 <HAL_I2S_Init+0x278>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <HAL_I2S_Init+0x1ea>
 80030e6:	4b25      	ldr	r3, [pc, #148]	@ (800317c <HAL_I2S_Init+0x27c>)
 80030e8:	e001      	b.n	80030ee <HAL_I2S_Init+0x1ee>
 80030ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030fa:	d003      	beq.n	8003104 <HAL_I2S_Init+0x204>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d103      	bne.n	800310c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003104:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	e001      	b.n	8003110 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800311a:	4313      	orrs	r3, r2
 800311c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003124:	4313      	orrs	r3, r2
 8003126:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800312e:	4313      	orrs	r3, r2
 8003130:	b29a      	uxth	r2, r3
 8003132:	897b      	ldrh	r3, [r7, #10]
 8003134:	4313      	orrs	r3, r2
 8003136:	b29b      	uxth	r3, r3
 8003138:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800313c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a0d      	ldr	r2, [pc, #52]	@ (8003178 <HAL_I2S_Init+0x278>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d101      	bne.n	800314c <HAL_I2S_Init+0x24c>
 8003148:	4b0c      	ldr	r3, [pc, #48]	@ (800317c <HAL_I2S_Init+0x27c>)
 800314a:	e001      	b.n	8003150 <HAL_I2S_Init+0x250>
 800314c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003150:	897a      	ldrh	r2, [r7, #10]
 8003152:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3720      	adds	r7, #32
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	08003277 	.word	0x08003277
 8003170:	cccccccd 	.word	0xcccccccd
 8003174:	080036a1 	.word	0x080036a1
 8003178:	40003800 	.word	0x40003800
 800317c:	40003400 	.word	0x40003400

08003180 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	881a      	ldrh	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d4:	1c9a      	adds	r2, r3, #2
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10e      	bne.n	8003210 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003200:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff ffb8 	bl	8003180 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322a:	b292      	uxth	r2, r2
 800322c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003232:	1c9a      	adds	r2, r3, #2
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800323c:	b29b      	uxth	r3, r3
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10e      	bne.n	800326e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800325e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ff93 	bl	8003194 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b086      	sub	sp, #24
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b04      	cmp	r3, #4
 8003290:	d13a      	bne.n	8003308 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b01      	cmp	r3, #1
 800329a:	d109      	bne.n	80032b0 <I2S_IRQHandler+0x3a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a6:	2b40      	cmp	r3, #64	@ 0x40
 80032a8:	d102      	bne.n	80032b0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff ffb4 	bl	8003218 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b6:	2b40      	cmp	r3, #64	@ 0x40
 80032b8:	d126      	bne.n	8003308 <I2S_IRQHandler+0x92>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d11f      	bne.n	8003308 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032d8:	2300      	movs	r3, #0
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	f043 0202 	orr.w	r2, r3, #2
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ff50 	bl	80031a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b03      	cmp	r3, #3
 8003312:	d136      	bne.n	8003382 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b02      	cmp	r3, #2
 800331c:	d109      	bne.n	8003332 <I2S_IRQHandler+0xbc>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003328:	2b80      	cmp	r3, #128	@ 0x80
 800332a:	d102      	bne.n	8003332 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ff45 	bl	80031bc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b08      	cmp	r3, #8
 800333a:	d122      	bne.n	8003382 <I2S_IRQHandler+0x10c>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b20      	cmp	r3, #32
 8003348:	d11b      	bne.n	8003382 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003358:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003374:	f043 0204 	orr.w	r2, r3, #4
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff ff13 	bl	80031a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003382:	bf00      	nop
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d002      	beq.n	80033b8 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
 80033b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033b6:	e160      	b.n	800367a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d005      	beq.n	80033ca <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80033c4:	887b      	ldrh	r3, [r7, #2]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e15a      	b.n	8003684 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_I2SEx_TransmitReceive_DMA+0x52>
 80033da:	2302      	movs	r3, #2
 80033dc:	e152      	b.n	8003684 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  hi2s->pTxBuffPtr = pTxData;
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->pRxBuffPtr = pRxData;
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b03      	cmp	r3, #3
 8003402:	d002      	beq.n	800340a <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2b05      	cmp	r3, #5
 8003408:	d114      	bne.n	8003434 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800340a:	887b      	ldrh	r3, [r7, #2]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003414:	887b      	ldrh	r3, [r7, #2]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 800341e:	887b      	ldrh	r3, [r7, #2]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8003428:	887b      	ldrh	r3, [r7, #2]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	865a      	strh	r2, [r3, #50]	@ 0x32
 8003432:	e00b      	b.n	800344c <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	887a      	ldrh	r2, [r7, #2]
 8003438:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	887a      	ldrh	r2, [r7, #2]
 800343e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	887a      	ldrh	r2, [r7, #2]
 8003444:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	887a      	ldrh	r2, [r7, #2]
 800344a:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2205      	movs	r2, #5
 8003456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345e:	4a8b      	ldr	r2, [pc, #556]	@ (800368c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8003460:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003466:	4a8a      	ldr	r2, [pc, #552]	@ (8003690 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8003468:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800346e:	4a89      	ldr	r2, [pc, #548]	@ (8003694 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003470:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003476:	2200      	movs	r2, #0
 8003478:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347e:	2200      	movs	r2, #0
 8003480:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003486:	4a83      	ldr	r2, [pc, #524]	@ (8003694 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003488:	64da      	str	r2, [r3, #76]	@ 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003494:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800349c:	d002      	beq.n	80034a4 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d16b      	bne.n	800357c <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80034a4:	1d3b      	adds	r3, r7, #4
 80034a6:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a79      	ldr	r2, [pc, #484]	@ (8003698 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d101      	bne.n	80034ba <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 80034b6:	4b79      	ldr	r3, [pc, #484]	@ (800369c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80034b8:	e001      	b.n	80034be <HAL_I2SEx_TransmitReceive_DMA+0x132>
 80034ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034be:	330c      	adds	r3, #12
 80034c0:	4619      	mov	r1, r3
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	f7fe fff4 	bl	80024b8 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a70      	ldr	r2, [pc, #448]	@ (8003698 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d101      	bne.n	80034de <HAL_I2SEx_TransmitReceive_DMA+0x152>
 80034da:	4b70      	ldr	r3, [pc, #448]	@ (800369c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80034dc:	e001      	b.n	80034e2 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 80034de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	496b      	ldr	r1, [pc, #428]	@ (8003698 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80034ea:	428b      	cmp	r3, r1
 80034ec:	d101      	bne.n	80034f2 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 80034ee:	4b6b      	ldr	r3, [pc, #428]	@ (800369c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80034f0:	e001      	b.n	80034f6 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 80034f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80034fc:	f107 0308 	add.w	r3, r7, #8
 8003500:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	6819      	ldr	r1, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	330c      	adds	r3, #12
 8003510:	461a      	mov	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003516:	b29b      	uxth	r3, r3
 8003518:	f7fe ffce 	bl	80024b8 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0202 	orr.w	r2, r2, #2
 800352a:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800353a:	f000 809e 	beq.w	800367a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a55      	ldr	r2, [pc, #340]	@ (8003698 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d101      	bne.n	800354c <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8003548:	4b54      	ldr	r3, [pc, #336]	@ (800369c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800354a:	e001      	b.n	8003550 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 800354c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4950      	ldr	r1, [pc, #320]	@ (8003698 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003558:	428b      	cmp	r3, r1
 800355a:	d101      	bne.n	8003560 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 800355c:	4b4f      	ldr	r3, [pc, #316]	@ (800369c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800355e:	e001      	b.n	8003564 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8003560:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003564:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003568:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003578:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800357a:	e07e      	b.n	800367a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003586:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800358a:	d10a      	bne.n	80035a2 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800358c:	2300      	movs	r3, #0
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80035a2:	f107 0308 	add.w	r3, r7, #8
 80035a6:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	6819      	ldr	r1, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a38      	ldr	r2, [pc, #224]	@ (8003698 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d101      	bne.n	80035be <HAL_I2SEx_TransmitReceive_DMA+0x232>
 80035ba:	4b38      	ldr	r3, [pc, #224]	@ (800369c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80035bc:	e001      	b.n	80035c2 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 80035be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035c2:	330c      	adds	r3, #12
 80035c4:	461a      	mov	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f7fe ff74 	bl	80024b8 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a30      	ldr	r2, [pc, #192]	@ (8003698 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d101      	bne.n	80035de <HAL_I2SEx_TransmitReceive_DMA+0x252>
 80035da:	4b30      	ldr	r3, [pc, #192]	@ (800369c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80035dc:	e001      	b.n	80035e2 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 80035de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	492b      	ldr	r1, [pc, #172]	@ (8003698 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80035ea:	428b      	cmp	r3, r1
 80035ec:	d101      	bne.n	80035f2 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 80035ee:	4b2b      	ldr	r3, [pc, #172]	@ (800369c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80035f0:	e001      	b.n	80035f6 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 80035f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035f6:	f042 0202 	orr.w	r2, r2, #2
 80035fa:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80035fc:	1d3b      	adds	r3, r7, #4
 80035fe:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	330c      	adds	r3, #12
 800360a:	4619      	mov	r1, r3
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8003614:	b29b      	uxth	r3, r3
 8003616:	f7fe ff4f 	bl	80024b8 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003638:	d01e      	beq.n	8003678 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a16      	ldr	r2, [pc, #88]	@ (8003698 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d101      	bne.n	8003648 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8003644:	4b15      	ldr	r3, [pc, #84]	@ (800369c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003646:	e001      	b.n	800364c <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8003648:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800364c:	69da      	ldr	r2, [r3, #28]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4911      	ldr	r1, [pc, #68]	@ (8003698 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003654:	428b      	cmp	r3, r1
 8003656:	d101      	bne.n	800365c <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8003658:	4b10      	ldr	r3, [pc, #64]	@ (800369c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800365a:	e001      	b.n	8003660 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 800365c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003660:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003664:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003674:	61da      	str	r2, [r3, #28]
 8003676:	e000      	b.n	800367a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8003678:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return errorcode;
 8003682:	7ffb      	ldrb	r3, [r7, #31]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3720      	adds	r7, #32
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	08003949 	.word	0x08003949
 8003690:	08003965 	.word	0x08003965
 8003694:	08003a3d 	.word	0x08003a3d
 8003698:	40003800 	.word	0x40003800
 800369c:	40003400 	.word	0x40003400

080036a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a92      	ldr	r2, [pc, #584]	@ (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d101      	bne.n	80036be <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80036ba:	4b92      	ldr	r3, [pc, #584]	@ (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036bc:	e001      	b.n	80036c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80036be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a8b      	ldr	r2, [pc, #556]	@ (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d101      	bne.n	80036dc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80036d8:	4b8a      	ldr	r3, [pc, #552]	@ (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036da:	e001      	b.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80036dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036ec:	d004      	beq.n	80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f040 8099 	bne.w	800382a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d107      	bne.n	8003712 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f9d5 	bl	8003abc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b01      	cmp	r3, #1
 800371a:	d107      	bne.n	800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa78 	bl	8003c1c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003732:	2b40      	cmp	r3, #64	@ 0x40
 8003734:	d13a      	bne.n	80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d035      	beq.n	80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a6e      	ldr	r2, [pc, #440]	@ (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d101      	bne.n	800374e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800374a:	4b6e      	ldr	r3, [pc, #440]	@ (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800374c:	e001      	b.n	8003752 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800374e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4969      	ldr	r1, [pc, #420]	@ (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800375a:	428b      	cmp	r3, r1
 800375c:	d101      	bne.n	8003762 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800375e:	4b69      	ldr	r3, [pc, #420]	@ (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003760:	e001      	b.n	8003766 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003762:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003766:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800376a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800377a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379e:	f043 0202 	orr.w	r2, r3, #2
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff fcfe 	bl	80031a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	f040 80c3 	bne.w	800393e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80bd 	beq.w	800393e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80037d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a49      	ldr	r2, [pc, #292]	@ (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d101      	bne.n	80037e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80037de:	4b49      	ldr	r3, [pc, #292]	@ (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037e0:	e001      	b.n	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80037e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4944      	ldr	r1, [pc, #272]	@ (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ee:	428b      	cmp	r3, r1
 80037f0:	d101      	bne.n	80037f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80037f2:	4b44      	ldr	r3, [pc, #272]	@ (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037f4:	e001      	b.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80037f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80037fe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003800:	2300      	movs	r3, #0
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381a:	f043 0204 	orr.w	r2, r3, #4
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff fcc0 	bl	80031a8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003828:	e089      	b.n	800393e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b02      	cmp	r3, #2
 8003832:	d107      	bne.n	8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f96e 	bl	8003b20 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b01      	cmp	r3, #1
 800384c:	d107      	bne.n	800385e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f9ad 	bl	8003bb8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003864:	2b40      	cmp	r3, #64	@ 0x40
 8003866:	d12f      	bne.n	80038c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	d02a      	beq.n	80038c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003880:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1e      	ldr	r2, [pc, #120]	@ (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d101      	bne.n	8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800388c:	4b1d      	ldr	r3, [pc, #116]	@ (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800388e:	e001      	b.n	8003894 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003890:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4919      	ldr	r1, [pc, #100]	@ (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800389c:	428b      	cmp	r3, r1
 800389e:	d101      	bne.n	80038a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80038a0:	4b18      	ldr	r3, [pc, #96]	@ (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038a2:	e001      	b.n	80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80038a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80038ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ba:	f043 0202 	orr.w	r2, r3, #2
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff fc70 	bl	80031a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d136      	bne.n	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d031      	beq.n	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a07      	ldr	r2, [pc, #28]	@ (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d101      	bne.n	80038ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80038e6:	4b07      	ldr	r3, [pc, #28]	@ (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038e8:	e001      	b.n	80038ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80038ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4902      	ldr	r1, [pc, #8]	@ (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038f6:	428b      	cmp	r3, r1
 80038f8:	d106      	bne.n	8003908 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80038fa:	4b02      	ldr	r3, [pc, #8]	@ (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038fc:	e006      	b.n	800390c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80038fe:	bf00      	nop
 8003900:	40003800 	.word	0x40003800
 8003904:	40003400 	.word	0x40003400
 8003908:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800390c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003910:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003920:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392e:	f043 0204 	orr.w	r2, r3, #4
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff fc36 	bl	80031a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800393c:	e000      	b.n	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800393e:	bf00      	nop
}
 8003940:	bf00      	nop
 8003942:	3720      	adds	r7, #32
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003954:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f7fe f836 	bl	80019c8 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800395c:	bf00      	nop
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003970:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d155      	bne.n	8003a26 <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003988:	d006      	beq.n	8003998 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003994:	2b00      	cmp	r3, #0
 8003996:	d11e      	bne.n	80039d6 <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a25      	ldr	r2, [pc, #148]	@ (8003a34 <I2SEx_TxRxDMACplt+0xd0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d101      	bne.n	80039a6 <I2SEx_TxRxDMACplt+0x42>
 80039a2:	4b25      	ldr	r3, [pc, #148]	@ (8003a38 <I2SEx_TxRxDMACplt+0xd4>)
 80039a4:	e001      	b.n	80039aa <I2SEx_TxRxDMACplt+0x46>
 80039a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4920      	ldr	r1, [pc, #128]	@ (8003a34 <I2SEx_TxRxDMACplt+0xd0>)
 80039b2:	428b      	cmp	r3, r1
 80039b4:	d101      	bne.n	80039ba <I2SEx_TxRxDMACplt+0x56>
 80039b6:	4b20      	ldr	r3, [pc, #128]	@ (8003a38 <I2SEx_TxRxDMACplt+0xd4>)
 80039b8:	e001      	b.n	80039be <I2SEx_TxRxDMACplt+0x5a>
 80039ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0202 	bic.w	r2, r2, #2
 80039d2:	605a      	str	r2, [r3, #4]
 80039d4:	e01d      	b.n	8003a12 <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0201 	bic.w	r2, r2, #1
 80039e4:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a12      	ldr	r2, [pc, #72]	@ (8003a34 <I2SEx_TxRxDMACplt+0xd0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d101      	bne.n	80039f4 <I2SEx_TxRxDMACplt+0x90>
 80039f0:	4b11      	ldr	r3, [pc, #68]	@ (8003a38 <I2SEx_TxRxDMACplt+0xd4>)
 80039f2:	e001      	b.n	80039f8 <I2SEx_TxRxDMACplt+0x94>
 80039f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	490d      	ldr	r1, [pc, #52]	@ (8003a34 <I2SEx_TxRxDMACplt+0xd0>)
 8003a00:	428b      	cmp	r3, r1
 8003a02:	d101      	bne.n	8003a08 <I2SEx_TxRxDMACplt+0xa4>
 8003a04:	4b0c      	ldr	r3, [pc, #48]	@ (8003a38 <I2SEx_TxRxDMACplt+0xd4>)
 8003a06:	e001      	b.n	8003a0c <I2SEx_TxRxDMACplt+0xa8>
 8003a08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a0c:	f022 0202 	bic.w	r2, r2, #2
 8003a10:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->TxXferCount = 0U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f7fe f808 	bl	8001a3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40003800 	.word	0x40003800
 8003a38:	40003400 	.word	0x40003400

08003a3c <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0203 	bic.w	r2, r2, #3
 8003a58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a15      	ldr	r2, [pc, #84]	@ (8003ab4 <I2SEx_TxRxDMAError+0x78>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d101      	bne.n	8003a68 <I2SEx_TxRxDMAError+0x2c>
 8003a64:	4b14      	ldr	r3, [pc, #80]	@ (8003ab8 <I2SEx_TxRxDMAError+0x7c>)
 8003a66:	e001      	b.n	8003a6c <I2SEx_TxRxDMAError+0x30>
 8003a68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4910      	ldr	r1, [pc, #64]	@ (8003ab4 <I2SEx_TxRxDMAError+0x78>)
 8003a74:	428b      	cmp	r3, r1
 8003a76:	d101      	bne.n	8003a7c <I2SEx_TxRxDMAError+0x40>
 8003a78:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab8 <I2SEx_TxRxDMAError+0x7c>)
 8003a7a:	e001      	b.n	8003a80 <I2SEx_TxRxDMAError+0x44>
 8003a7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a80:	f022 0203 	bic.w	r2, r2, #3
 8003a84:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9e:	f043 0208 	orr.w	r2, r3, #8
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f7ff fb7e 	bl	80031a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003aac:	bf00      	nop
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40003800 	.word	0x40003800
 8003ab8:	40003400 	.word	0x40003400

08003abc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	1c99      	adds	r1, r3, #2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6251      	str	r1, [r2, #36]	@ 0x24
 8003ace:	881a      	ldrh	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d113      	bne.n	8003b16 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003afc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7fd ff93 	bl	8001a3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2c:	1c99      	adds	r1, r3, #2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6251      	str	r1, [r2, #36]	@ 0x24
 8003b32:	8819      	ldrh	r1, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb0 <I2SEx_TxISR_I2SExt+0x90>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d101      	bne.n	8003b42 <I2SEx_TxISR_I2SExt+0x22>
 8003b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb4 <I2SEx_TxISR_I2SExt+0x94>)
 8003b40:	e001      	b.n	8003b46 <I2SEx_TxISR_I2SExt+0x26>
 8003b42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b46:	460a      	mov	r2, r1
 8003b48:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d121      	bne.n	8003ba6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a12      	ldr	r2, [pc, #72]	@ (8003bb0 <I2SEx_TxISR_I2SExt+0x90>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d101      	bne.n	8003b70 <I2SEx_TxISR_I2SExt+0x50>
 8003b6c:	4b11      	ldr	r3, [pc, #68]	@ (8003bb4 <I2SEx_TxISR_I2SExt+0x94>)
 8003b6e:	e001      	b.n	8003b74 <I2SEx_TxISR_I2SExt+0x54>
 8003b70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	490d      	ldr	r1, [pc, #52]	@ (8003bb0 <I2SEx_TxISR_I2SExt+0x90>)
 8003b7c:	428b      	cmp	r3, r1
 8003b7e:	d101      	bne.n	8003b84 <I2SEx_TxISR_I2SExt+0x64>
 8003b80:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb4 <I2SEx_TxISR_I2SExt+0x94>)
 8003b82:	e001      	b.n	8003b88 <I2SEx_TxISR_I2SExt+0x68>
 8003b84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d106      	bne.n	8003ba6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7fd ff4b 	bl	8001a3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40003800 	.word	0x40003800
 8003bb4:	40003400 	.word	0x40003400

08003bb8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68d8      	ldr	r0, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bca:	1c99      	adds	r1, r3, #2
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003bd0:	b282      	uxth	r2, r0
 8003bd2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d113      	bne.n	8003c14 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003bfa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fd ff14 	bl	8001a3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a20      	ldr	r2, [pc, #128]	@ (8003cac <I2SEx_RxISR_I2SExt+0x90>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d101      	bne.n	8003c32 <I2SEx_RxISR_I2SExt+0x16>
 8003c2e:	4b20      	ldr	r3, [pc, #128]	@ (8003cb0 <I2SEx_RxISR_I2SExt+0x94>)
 8003c30:	e001      	b.n	8003c36 <I2SEx_RxISR_I2SExt+0x1a>
 8003c32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c36:	68d8      	ldr	r0, [r3, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3c:	1c99      	adds	r1, r3, #2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003c42:	b282      	uxth	r2, r0
 8003c44:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d121      	bne.n	8003ca2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a12      	ldr	r2, [pc, #72]	@ (8003cac <I2SEx_RxISR_I2SExt+0x90>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d101      	bne.n	8003c6c <I2SEx_RxISR_I2SExt+0x50>
 8003c68:	4b11      	ldr	r3, [pc, #68]	@ (8003cb0 <I2SEx_RxISR_I2SExt+0x94>)
 8003c6a:	e001      	b.n	8003c70 <I2SEx_RxISR_I2SExt+0x54>
 8003c6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	490d      	ldr	r1, [pc, #52]	@ (8003cac <I2SEx_RxISR_I2SExt+0x90>)
 8003c78:	428b      	cmp	r3, r1
 8003c7a:	d101      	bne.n	8003c80 <I2SEx_RxISR_I2SExt+0x64>
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb0 <I2SEx_RxISR_I2SExt+0x94>)
 8003c7e:	e001      	b.n	8003c84 <I2SEx_RxISR_I2SExt+0x68>
 8003c80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c84:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c88:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d106      	bne.n	8003ca2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7fd fecd 	bl	8001a3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40003800 	.word	0x40003800
 8003cb0:	40003400 	.word	0x40003400

08003cb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e267      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d075      	beq.n	8003dbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cd2:	4b88      	ldr	r3, [pc, #544]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d00c      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cde:	4b85      	ldr	r3, [pc, #532]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d112      	bne.n	8003d10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cea:	4b82      	ldr	r3, [pc, #520]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cf2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cf6:	d10b      	bne.n	8003d10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d05b      	beq.n	8003dbc <HAL_RCC_OscConfig+0x108>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d157      	bne.n	8003dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e242      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d18:	d106      	bne.n	8003d28 <HAL_RCC_OscConfig+0x74>
 8003d1a:	4b76      	ldr	r3, [pc, #472]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a75      	ldr	r2, [pc, #468]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e01d      	b.n	8003d64 <HAL_RCC_OscConfig+0xb0>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d30:	d10c      	bne.n	8003d4c <HAL_RCC_OscConfig+0x98>
 8003d32:	4b70      	ldr	r3, [pc, #448]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a6f      	ldr	r2, [pc, #444]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a6c      	ldr	r2, [pc, #432]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	e00b      	b.n	8003d64 <HAL_RCC_OscConfig+0xb0>
 8003d4c:	4b69      	ldr	r3, [pc, #420]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a68      	ldr	r2, [pc, #416]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	4b66      	ldr	r3, [pc, #408]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a65      	ldr	r2, [pc, #404]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d013      	beq.n	8003d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7fe f9b4 	bl	80020d8 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d74:	f7fe f9b0 	bl	80020d8 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b64      	cmp	r3, #100	@ 0x64
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e207      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d86:	4b5b      	ldr	r3, [pc, #364]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0xc0>
 8003d92:	e014      	b.n	8003dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7fe f9a0 	bl	80020d8 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7fe f99c 	bl	80020d8 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	@ 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e1f3      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dae:	4b51      	ldr	r3, [pc, #324]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0xe8>
 8003dba:	e000      	b.n	8003dbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d063      	beq.n	8003e92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dca:	4b4a      	ldr	r3, [pc, #296]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd6:	4b47      	ldr	r3, [pc, #284]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d11c      	bne.n	8003e1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de2:	4b44      	ldr	r3, [pc, #272]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d116      	bne.n	8003e1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dee:	4b41      	ldr	r3, [pc, #260]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_RCC_OscConfig+0x152>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d001      	beq.n	8003e06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e1c7      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e06:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4937      	ldr	r1, [pc, #220]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1a:	e03a      	b.n	8003e92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e24:	4b34      	ldr	r3, [pc, #208]	@ (8003ef8 <HAL_RCC_OscConfig+0x244>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2a:	f7fe f955 	bl	80020d8 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e32:	f7fe f951 	bl	80020d8 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e1a8      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e44:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e50:	4b28      	ldr	r3, [pc, #160]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4925      	ldr	r1, [pc, #148]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	600b      	str	r3, [r1, #0]
 8003e64:	e015      	b.n	8003e92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e66:	4b24      	ldr	r3, [pc, #144]	@ (8003ef8 <HAL_RCC_OscConfig+0x244>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fe f934 	bl	80020d8 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e74:	f7fe f930 	bl	80020d8 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e187      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e86:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d036      	beq.n	8003f0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea6:	4b15      	ldr	r3, [pc, #84]	@ (8003efc <HAL_RCC_OscConfig+0x248>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eac:	f7fe f914 	bl	80020d8 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb4:	f7fe f910 	bl	80020d8 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e167      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x200>
 8003ed2:	e01b      	b.n	8003f0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed4:	4b09      	ldr	r3, [pc, #36]	@ (8003efc <HAL_RCC_OscConfig+0x248>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eda:	f7fe f8fd 	bl	80020d8 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee0:	e00e      	b.n	8003f00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ee2:	f7fe f8f9 	bl	80020d8 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d907      	bls.n	8003f00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e150      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	42470000 	.word	0x42470000
 8003efc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f00:	4b88      	ldr	r3, [pc, #544]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1ea      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8097 	beq.w	8004048 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f1e:	4b81      	ldr	r3, [pc, #516]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10f      	bne.n	8003f4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	4b7d      	ldr	r3, [pc, #500]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	4a7c      	ldr	r2, [pc, #496]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f3a:	4b7a      	ldr	r3, [pc, #488]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f46:	2301      	movs	r3, #1
 8003f48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4a:	4b77      	ldr	r3, [pc, #476]	@ (8004128 <HAL_RCC_OscConfig+0x474>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d118      	bne.n	8003f88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f56:	4b74      	ldr	r3, [pc, #464]	@ (8004128 <HAL_RCC_OscConfig+0x474>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a73      	ldr	r2, [pc, #460]	@ (8004128 <HAL_RCC_OscConfig+0x474>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f62:	f7fe f8b9 	bl	80020d8 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6a:	f7fe f8b5 	bl	80020d8 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e10c      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7c:	4b6a      	ldr	r3, [pc, #424]	@ (8004128 <HAL_RCC_OscConfig+0x474>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x2ea>
 8003f90:	4b64      	ldr	r3, [pc, #400]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f94:	4a63      	ldr	r2, [pc, #396]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f9c:	e01c      	b.n	8003fd8 <HAL_RCC_OscConfig+0x324>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b05      	cmp	r3, #5
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x30c>
 8003fa6:	4b5f      	ldr	r3, [pc, #380]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003faa:	4a5e      	ldr	r2, [pc, #376]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fac:	f043 0304 	orr.w	r3, r3, #4
 8003fb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb2:	4b5c      	ldr	r3, [pc, #368]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb6:	4a5b      	ldr	r2, [pc, #364]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fbe:	e00b      	b.n	8003fd8 <HAL_RCC_OscConfig+0x324>
 8003fc0:	4b58      	ldr	r3, [pc, #352]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc4:	4a57      	ldr	r2, [pc, #348]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fcc:	4b55      	ldr	r3, [pc, #340]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd0:	4a54      	ldr	r2, [pc, #336]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	f023 0304 	bic.w	r3, r3, #4
 8003fd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d015      	beq.n	800400c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe0:	f7fe f87a 	bl	80020d8 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe6:	e00a      	b.n	8003ffe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe8:	f7fe f876 	bl	80020d8 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e0cb      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffe:	4b49      	ldr	r3, [pc, #292]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0ee      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x334>
 800400a:	e014      	b.n	8004036 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800400c:	f7fe f864 	bl	80020d8 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004012:	e00a      	b.n	800402a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004014:	f7fe f860 	bl	80020d8 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e0b5      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800402a:	4b3e      	ldr	r3, [pc, #248]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1ee      	bne.n	8004014 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004036:	7dfb      	ldrb	r3, [r7, #23]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d105      	bne.n	8004048 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800403c:	4b39      	ldr	r3, [pc, #228]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 800403e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004040:	4a38      	ldr	r2, [pc, #224]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8004042:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004046:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80a1 	beq.w	8004194 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004052:	4b34      	ldr	r3, [pc, #208]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	2b08      	cmp	r3, #8
 800405c:	d05c      	beq.n	8004118 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d141      	bne.n	80040ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004066:	4b31      	ldr	r3, [pc, #196]	@ (800412c <HAL_RCC_OscConfig+0x478>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406c:	f7fe f834 	bl	80020d8 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004074:	f7fe f830 	bl	80020d8 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e087      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004086:	4b27      	ldr	r3, [pc, #156]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a0:	019b      	lsls	r3, r3, #6
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	3b01      	subs	r3, #1
 80040ac:	041b      	lsls	r3, r3, #16
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	061b      	lsls	r3, r3, #24
 80040b6:	491b      	ldr	r1, [pc, #108]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040bc:	4b1b      	ldr	r3, [pc, #108]	@ (800412c <HAL_RCC_OscConfig+0x478>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c2:	f7fe f809 	bl	80020d8 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ca:	f7fe f805 	bl	80020d8 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e05c      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040dc:	4b11      	ldr	r3, [pc, #68]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x416>
 80040e8:	e054      	b.n	8004194 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ea:	4b10      	ldr	r3, [pc, #64]	@ (800412c <HAL_RCC_OscConfig+0x478>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f0:	f7fd fff2 	bl	80020d8 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f8:	f7fd ffee 	bl	80020d8 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e045      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410a:	4b06      	ldr	r3, [pc, #24]	@ (8004124 <HAL_RCC_OscConfig+0x470>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x444>
 8004116:	e03d      	b.n	8004194 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d107      	bne.n	8004130 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e038      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
 8004124:	40023800 	.word	0x40023800
 8004128:	40007000 	.word	0x40007000
 800412c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004130:	4b1b      	ldr	r3, [pc, #108]	@ (80041a0 <HAL_RCC_OscConfig+0x4ec>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d028      	beq.n	8004190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004148:	429a      	cmp	r2, r3
 800414a:	d121      	bne.n	8004190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d11a      	bne.n	8004190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004160:	4013      	ands	r3, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004168:	4293      	cmp	r3, r2
 800416a:	d111      	bne.n	8004190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004176:	085b      	lsrs	r3, r3, #1
 8004178:	3b01      	subs	r3, #1
 800417a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800417c:	429a      	cmp	r2, r3
 800417e:	d107      	bne.n	8004190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40023800 	.word	0x40023800

080041a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0cc      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041b8:	4b68      	ldr	r3, [pc, #416]	@ (800435c <HAL_RCC_ClockConfig+0x1b8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d90c      	bls.n	80041e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c6:	4b65      	ldr	r3, [pc, #404]	@ (800435c <HAL_RCC_ClockConfig+0x1b8>)
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ce:	4b63      	ldr	r3, [pc, #396]	@ (800435c <HAL_RCC_ClockConfig+0x1b8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d001      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0b8      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d020      	beq.n	800422e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041f8:	4b59      	ldr	r3, [pc, #356]	@ (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a58      	ldr	r2, [pc, #352]	@ (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004202:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004210:	4b53      	ldr	r3, [pc, #332]	@ (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	4a52      	ldr	r2, [pc, #328]	@ (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800421a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800421c:	4b50      	ldr	r3, [pc, #320]	@ (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	494d      	ldr	r1, [pc, #308]	@ (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d044      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d107      	bne.n	8004252 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004242:	4b47      	ldr	r3, [pc, #284]	@ (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d119      	bne.n	8004282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e07f      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d003      	beq.n	8004262 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800425e:	2b03      	cmp	r3, #3
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004262:	4b3f      	ldr	r3, [pc, #252]	@ (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e06f      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004272:	4b3b      	ldr	r3, [pc, #236]	@ (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e067      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004282:	4b37      	ldr	r3, [pc, #220]	@ (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f023 0203 	bic.w	r2, r3, #3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	4934      	ldr	r1, [pc, #208]	@ (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	4313      	orrs	r3, r2
 8004292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004294:	f7fd ff20 	bl	80020d8 <HAL_GetTick>
 8004298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429a:	e00a      	b.n	80042b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429c:	f7fd ff1c 	bl	80020d8 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e04f      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 020c 	and.w	r2, r3, #12
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d1eb      	bne.n	800429c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042c4:	4b25      	ldr	r3, [pc, #148]	@ (800435c <HAL_RCC_ClockConfig+0x1b8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d20c      	bcs.n	80042ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b22      	ldr	r3, [pc, #136]	@ (800435c <HAL_RCC_ClockConfig+0x1b8>)
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b20      	ldr	r3, [pc, #128]	@ (800435c <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e032      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042f8:	4b19      	ldr	r3, [pc, #100]	@ (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4916      	ldr	r1, [pc, #88]	@ (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	4313      	orrs	r3, r2
 8004308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004316:	4b12      	ldr	r3, [pc, #72]	@ (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	490e      	ldr	r1, [pc, #56]	@ (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800432a:	f000 f821 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 800432e:	4602      	mov	r2, r0
 8004330:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	091b      	lsrs	r3, r3, #4
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	490a      	ldr	r1, [pc, #40]	@ (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 800433c:	5ccb      	ldrb	r3, [r1, r3]
 800433e:	fa22 f303 	lsr.w	r3, r2, r3
 8004342:	4a09      	ldr	r2, [pc, #36]	@ (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004346:	4b09      	ldr	r3, [pc, #36]	@ (800436c <HAL_RCC_ClockConfig+0x1c8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f7fd fe80 	bl	8002050 <HAL_InitTick>

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40023c00 	.word	0x40023c00
 8004360:	40023800 	.word	0x40023800
 8004364:	0800aaec 	.word	0x0800aaec
 8004368:	20000018 	.word	0x20000018
 800436c:	2000001c 	.word	0x2000001c

08004370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004374:	b094      	sub	sp, #80	@ 0x50
 8004376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	647b      	str	r3, [r7, #68]	@ 0x44
 800437c:	2300      	movs	r3, #0
 800437e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004380:	2300      	movs	r3, #0
 8004382:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004388:	4b79      	ldr	r3, [pc, #484]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x200>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 030c 	and.w	r3, r3, #12
 8004390:	2b08      	cmp	r3, #8
 8004392:	d00d      	beq.n	80043b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004394:	2b08      	cmp	r3, #8
 8004396:	f200 80e1 	bhi.w	800455c <HAL_RCC_GetSysClockFreq+0x1ec>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x34>
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d003      	beq.n	80043aa <HAL_RCC_GetSysClockFreq+0x3a>
 80043a2:	e0db      	b.n	800455c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043a4:	4b73      	ldr	r3, [pc, #460]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x204>)
 80043a6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80043a8:	e0db      	b.n	8004562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043aa:	4b73      	ldr	r3, [pc, #460]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x208>)
 80043ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043ae:	e0d8      	b.n	8004562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x200>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d063      	beq.n	800448e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	099b      	lsrs	r3, r3, #6
 80043cc:	2200      	movs	r2, #0
 80043ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043da:	2300      	movs	r3, #0
 80043dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80043de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043e2:	4622      	mov	r2, r4
 80043e4:	462b      	mov	r3, r5
 80043e6:	f04f 0000 	mov.w	r0, #0
 80043ea:	f04f 0100 	mov.w	r1, #0
 80043ee:	0159      	lsls	r1, r3, #5
 80043f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043f4:	0150      	lsls	r0, r2, #5
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4621      	mov	r1, r4
 80043fc:	1a51      	subs	r1, r2, r1
 80043fe:	6139      	str	r1, [r7, #16]
 8004400:	4629      	mov	r1, r5
 8004402:	eb63 0301 	sbc.w	r3, r3, r1
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004414:	4659      	mov	r1, fp
 8004416:	018b      	lsls	r3, r1, #6
 8004418:	4651      	mov	r1, sl
 800441a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800441e:	4651      	mov	r1, sl
 8004420:	018a      	lsls	r2, r1, #6
 8004422:	4651      	mov	r1, sl
 8004424:	ebb2 0801 	subs.w	r8, r2, r1
 8004428:	4659      	mov	r1, fp
 800442a:	eb63 0901 	sbc.w	r9, r3, r1
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800443a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800443e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004442:	4690      	mov	r8, r2
 8004444:	4699      	mov	r9, r3
 8004446:	4623      	mov	r3, r4
 8004448:	eb18 0303 	adds.w	r3, r8, r3
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	462b      	mov	r3, r5
 8004450:	eb49 0303 	adc.w	r3, r9, r3
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004462:	4629      	mov	r1, r5
 8004464:	024b      	lsls	r3, r1, #9
 8004466:	4621      	mov	r1, r4
 8004468:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800446c:	4621      	mov	r1, r4
 800446e:	024a      	lsls	r2, r1, #9
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004476:	2200      	movs	r2, #0
 8004478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800447a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800447c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004480:	f7fc fc02 	bl	8000c88 <__aeabi_uldivmod>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4613      	mov	r3, r2
 800448a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800448c:	e058      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800448e:	4b38      	ldr	r3, [pc, #224]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x200>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	099b      	lsrs	r3, r3, #6
 8004494:	2200      	movs	r2, #0
 8004496:	4618      	mov	r0, r3
 8004498:	4611      	mov	r1, r2
 800449a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800449e:	623b      	str	r3, [r7, #32]
 80044a0:	2300      	movs	r3, #0
 80044a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80044a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044a8:	4642      	mov	r2, r8
 80044aa:	464b      	mov	r3, r9
 80044ac:	f04f 0000 	mov.w	r0, #0
 80044b0:	f04f 0100 	mov.w	r1, #0
 80044b4:	0159      	lsls	r1, r3, #5
 80044b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044ba:	0150      	lsls	r0, r2, #5
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4641      	mov	r1, r8
 80044c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80044c6:	4649      	mov	r1, r9
 80044c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044e0:	ebb2 040a 	subs.w	r4, r2, sl
 80044e4:	eb63 050b 	sbc.w	r5, r3, fp
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	00eb      	lsls	r3, r5, #3
 80044f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044f6:	00e2      	lsls	r2, r4, #3
 80044f8:	4614      	mov	r4, r2
 80044fa:	461d      	mov	r5, r3
 80044fc:	4643      	mov	r3, r8
 80044fe:	18e3      	adds	r3, r4, r3
 8004500:	603b      	str	r3, [r7, #0]
 8004502:	464b      	mov	r3, r9
 8004504:	eb45 0303 	adc.w	r3, r5, r3
 8004508:	607b      	str	r3, [r7, #4]
 800450a:	f04f 0200 	mov.w	r2, #0
 800450e:	f04f 0300 	mov.w	r3, #0
 8004512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004516:	4629      	mov	r1, r5
 8004518:	028b      	lsls	r3, r1, #10
 800451a:	4621      	mov	r1, r4
 800451c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004520:	4621      	mov	r1, r4
 8004522:	028a      	lsls	r2, r1, #10
 8004524:	4610      	mov	r0, r2
 8004526:	4619      	mov	r1, r3
 8004528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800452a:	2200      	movs	r2, #0
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	61fa      	str	r2, [r7, #28]
 8004530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004534:	f7fc fba8 	bl	8000c88 <__aeabi_uldivmod>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4613      	mov	r3, r2
 800453e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004540:	4b0b      	ldr	r3, [pc, #44]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x200>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	0c1b      	lsrs	r3, r3, #16
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	3301      	adds	r3, #1
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004550:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800455a:	e002      	b.n	8004562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800455c:	4b05      	ldr	r3, [pc, #20]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x204>)
 800455e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004564:	4618      	mov	r0, r3
 8004566:	3750      	adds	r7, #80	@ 0x50
 8004568:	46bd      	mov	sp, r7
 800456a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800456e:	bf00      	nop
 8004570:	40023800 	.word	0x40023800
 8004574:	00f42400 	.word	0x00f42400
 8004578:	007a1200 	.word	0x007a1200

0800457c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004580:	4b03      	ldr	r3, [pc, #12]	@ (8004590 <HAL_RCC_GetHCLKFreq+0x14>)
 8004582:	681b      	ldr	r3, [r3, #0]
}
 8004584:	4618      	mov	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	20000018 	.word	0x20000018

08004594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004598:	f7ff fff0 	bl	800457c <HAL_RCC_GetHCLKFreq>
 800459c:	4602      	mov	r2, r0
 800459e:	4b05      	ldr	r3, [pc, #20]	@ (80045b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	0a9b      	lsrs	r3, r3, #10
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	4903      	ldr	r1, [pc, #12]	@ (80045b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045aa:	5ccb      	ldrb	r3, [r1, r3]
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40023800 	.word	0x40023800
 80045b8:	0800aafc 	.word	0x0800aafc

080045bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045c0:	f7ff ffdc 	bl	800457c <HAL_RCC_GetHCLKFreq>
 80045c4:	4602      	mov	r2, r0
 80045c6:	4b05      	ldr	r3, [pc, #20]	@ (80045dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	0b5b      	lsrs	r3, r3, #13
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	4903      	ldr	r1, [pc, #12]	@ (80045e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045d2:	5ccb      	ldrb	r3, [r1, r3]
 80045d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d8:	4618      	mov	r0, r3
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40023800 	.word	0x40023800
 80045e0:	0800aafc 	.word	0x0800aafc

080045e4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d105      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004608:	2b00      	cmp	r3, #0
 800460a:	d035      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800460c:	4b62      	ldr	r3, [pc, #392]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004612:	f7fd fd61 	bl	80020d8 <HAL_GetTick>
 8004616:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004618:	e008      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800461a:	f7fd fd5d 	bl	80020d8 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e0b0      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800462c:	4b5b      	ldr	r3, [pc, #364]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1f0      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	019a      	lsls	r2, r3, #6
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	071b      	lsls	r3, r3, #28
 8004644:	4955      	ldr	r1, [pc, #340]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800464c:	4b52      	ldr	r3, [pc, #328]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800464e:	2201      	movs	r2, #1
 8004650:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004652:	f7fd fd41 	bl	80020d8 <HAL_GetTick>
 8004656:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004658:	e008      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800465a:	f7fd fd3d 	bl	80020d8 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e090      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800466c:	4b4b      	ldr	r3, [pc, #300]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f0      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8083 	beq.w	800478c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	4b44      	ldr	r3, [pc, #272]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	4a43      	ldr	r2, [pc, #268]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004694:	6413      	str	r3, [r2, #64]	@ 0x40
 8004696:	4b41      	ldr	r3, [pc, #260]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046a2:	4b3f      	ldr	r3, [pc, #252]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a3e      	ldr	r2, [pc, #248]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046ae:	f7fd fd13 	bl	80020d8 <HAL_GetTick>
 80046b2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046b4:	e008      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046b6:	f7fd fd0f 	bl	80020d8 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e062      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046c8:	4b35      	ldr	r3, [pc, #212]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0f0      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046d4:	4b31      	ldr	r3, [pc, #196]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046dc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d02f      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d028      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046f2:	4b2a      	ldr	r3, [pc, #168]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046fa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046fc:	4b29      	ldr	r3, [pc, #164]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046fe:	2201      	movs	r2, #1
 8004700:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004702:	4b28      	ldr	r3, [pc, #160]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004708:	4a24      	ldr	r2, [pc, #144]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800470e:	4b23      	ldr	r3, [pc, #140]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b01      	cmp	r3, #1
 8004718:	d114      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800471a:	f7fd fcdd 	bl	80020d8 <HAL_GetTick>
 800471e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004720:	e00a      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004722:	f7fd fcd9 	bl	80020d8 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004730:	4293      	cmp	r3, r2
 8004732:	d901      	bls.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e02a      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004738:	4b18      	ldr	r3, [pc, #96]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0ee      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800474c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004750:	d10d      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004752:	4b12      	ldr	r3, [pc, #72]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004762:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004766:	490d      	ldr	r1, [pc, #52]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004768:	4313      	orrs	r3, r2
 800476a:	608b      	str	r3, [r1, #8]
 800476c:	e005      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800476e:	4b0b      	ldr	r3, [pc, #44]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	4a0a      	ldr	r2, [pc, #40]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004774:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004778:	6093      	str	r3, [r2, #8]
 800477a:	4b08      	ldr	r3, [pc, #32]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800477c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004786:	4905      	ldr	r1, [pc, #20]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004788:	4313      	orrs	r3, r2
 800478a:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	42470068 	.word	0x42470068
 800479c:	40023800 	.word	0x40023800
 80047a0:	40007000 	.word	0x40007000
 80047a4:	42470e40 	.word	0x42470e40

080047a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d13f      	bne.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047c6:	4b24      	ldr	r3, [pc, #144]	@ (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d006      	beq.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047dc:	d12f      	bne.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80047de:	4b1f      	ldr	r3, [pc, #124]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047e0:	617b      	str	r3, [r7, #20]
          break;
 80047e2:	e02f      	b.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047f0:	d108      	bne.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047f2:	4b19      	ldr	r3, [pc, #100]	@ (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047fa:	4a19      	ldr	r2, [pc, #100]	@ (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	e007      	b.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004804:	4b14      	ldr	r3, [pc, #80]	@ (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800480c:	4a15      	ldr	r2, [pc, #84]	@ (8004864 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800480e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004812:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004814:	4b10      	ldr	r3, [pc, #64]	@ (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800481a:	099b      	lsrs	r3, r3, #6
 800481c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004828:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800482a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800482e:	0f1b      	lsrs	r3, r3, #28
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	fbb2 f3f3 	udiv	r3, r2, r3
 800483a:	617b      	str	r3, [r7, #20]
          break;
 800483c:	e002      	b.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
          break;
 8004842:	bf00      	nop
        }
      }
      break;
 8004844:	e000      	b.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004846:	bf00      	nop
    }
  }
  return frequency;
 8004848:	697b      	ldr	r3, [r7, #20]
}
 800484a:	4618      	mov	r0, r3
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40023800 	.word	0x40023800
 800485c:	00bb8000 	.word	0x00bb8000
 8004860:	007a1200 	.word	0x007a1200
 8004864:	00f42400 	.word	0x00f42400

08004868 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e042      	b.n	8004900 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fd fa38 	bl	8001d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2224      	movs	r2, #36	@ 0x24
 8004898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fdbd 	bl	800542c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695a      	ldr	r2, [r3, #20]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	@ 0x28
 800490c:	af02      	add	r7, sp, #8
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	4613      	mov	r3, r2
 8004916:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b20      	cmp	r3, #32
 8004926:	d175      	bne.n	8004a14 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <HAL_UART_Transmit+0x2c>
 800492e:	88fb      	ldrh	r3, [r7, #6]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e06e      	b.n	8004a16 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2221      	movs	r2, #33	@ 0x21
 8004942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004946:	f7fd fbc7 	bl	80020d8 <HAL_GetTick>
 800494a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	88fa      	ldrh	r2, [r7, #6]
 8004950:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	88fa      	ldrh	r2, [r7, #6]
 8004956:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004960:	d108      	bne.n	8004974 <HAL_UART_Transmit+0x6c>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d104      	bne.n	8004974 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800496a:	2300      	movs	r3, #0
 800496c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	e003      	b.n	800497c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004978:	2300      	movs	r3, #0
 800497a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800497c:	e02e      	b.n	80049dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2200      	movs	r2, #0
 8004986:	2180      	movs	r1, #128	@ 0x80
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 fb1f 	bl	8004fcc <UART_WaitOnFlagUntilTimeout>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e03a      	b.n	8004a16 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10b      	bne.n	80049be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	3302      	adds	r3, #2
 80049ba:	61bb      	str	r3, [r7, #24]
 80049bc:	e007      	b.n	80049ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	781a      	ldrb	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	3301      	adds	r3, #1
 80049cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1cb      	bne.n	800497e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2200      	movs	r2, #0
 80049ee:	2140      	movs	r1, #64	@ 0x40
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 faeb 	bl	8004fcc <UART_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e006      	b.n	8004a16 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e000      	b.n	8004a16 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a14:	2302      	movs	r3, #2
  }
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3720      	adds	r7, #32
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b20      	cmp	r3, #32
 8004a36:	d112      	bne.n	8004a5e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <HAL_UART_Receive_IT+0x26>
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e00b      	b.n	8004a60 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	461a      	mov	r2, r3
 8004a52:	68b9      	ldr	r1, [r7, #8]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fb12 	bl	800507e <UART_Start_Receive_IT>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	e000      	b.n	8004a60 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004a5e:	2302      	movs	r3, #2
  }
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b0ba      	sub	sp, #232	@ 0xe8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004aa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10f      	bne.n	8004ace <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d009      	beq.n	8004ace <HAL_UART_IRQHandler+0x66>
 8004aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004abe:	f003 0320 	and.w	r3, r3, #32
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fbf2 	bl	80052b0 <UART_Receive_IT>
      return;
 8004acc:	e25b      	b.n	8004f86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ace:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 80de 	beq.w	8004c94 <HAL_UART_IRQHandler+0x22c>
 8004ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d106      	bne.n	8004af2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ae8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 80d1 	beq.w	8004c94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00b      	beq.n	8004b16 <HAL_UART_IRQHandler+0xae>
 8004afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0e:	f043 0201 	orr.w	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00b      	beq.n	8004b3a <HAL_UART_IRQHandler+0xd2>
 8004b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b32:	f043 0202 	orr.w	r2, r3, #2
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00b      	beq.n	8004b5e <HAL_UART_IRQHandler+0xf6>
 8004b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b56:	f043 0204 	orr.w	r2, r3, #4
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d011      	beq.n	8004b8e <HAL_UART_IRQHandler+0x126>
 8004b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b6e:	f003 0320 	and.w	r3, r3, #32
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d105      	bne.n	8004b82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d005      	beq.n	8004b8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b86:	f043 0208 	orr.w	r2, r3, #8
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 81f2 	beq.w	8004f7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b9c:	f003 0320 	and.w	r3, r3, #32
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x14e>
 8004ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fb7d 	bl	80052b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc0:	2b40      	cmp	r3, #64	@ 0x40
 8004bc2:	bf0c      	ite	eq
 8004bc4:	2301      	moveq	r3, #1
 8004bc6:	2300      	movne	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d103      	bne.n	8004be2 <HAL_UART_IRQHandler+0x17a>
 8004bda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d04f      	beq.n	8004c82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fa85 	bl	80050f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf2:	2b40      	cmp	r3, #64	@ 0x40
 8004bf4:	d141      	bne.n	8004c7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3314      	adds	r3, #20
 8004bfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3314      	adds	r3, #20
 8004c1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c32:	e841 2300 	strex	r3, r2, [r1]
 8004c36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1d9      	bne.n	8004bf6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d013      	beq.n	8004c72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e48 <HAL_UART_IRQHandler+0x3e0>)
 8004c50:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fd fcf6 	bl	8002648 <HAL_DMA_Abort_IT>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d016      	beq.n	8004c90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c70:	e00e      	b.n	8004c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f994 	bl	8004fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c78:	e00a      	b.n	8004c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f990 	bl	8004fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c80:	e006      	b.n	8004c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f98c 	bl	8004fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c8e:	e175      	b.n	8004f7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c90:	bf00      	nop
    return;
 8004c92:	e173      	b.n	8004f7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	f040 814f 	bne.w	8004f3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ca2:	f003 0310 	and.w	r3, r3, #16
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 8148 	beq.w	8004f3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cb0:	f003 0310 	and.w	r3, r3, #16
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8141 	beq.w	8004f3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cda:	2b40      	cmp	r3, #64	@ 0x40
 8004cdc:	f040 80b6 	bne.w	8004e4c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8145 	beq.w	8004f80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	f080 813e 	bcs.w	8004f80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d16:	f000 8088 	beq.w	8004e2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	330c      	adds	r3, #12
 8004d20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1d9      	bne.n	8004d1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3314      	adds	r3, #20
 8004d6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d78:	f023 0301 	bic.w	r3, r3, #1
 8004d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3314      	adds	r3, #20
 8004d86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e1      	bne.n	8004d66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3314      	adds	r3, #20
 8004da8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004db2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004db4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004db8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3314      	adds	r3, #20
 8004dc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004dc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004dcc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004dd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1e3      	bne.n	8004da2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	330c      	adds	r3, #12
 8004dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004df8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dfa:	f023 0310 	bic.w	r3, r3, #16
 8004dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	330c      	adds	r3, #12
 8004e08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e0e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e3      	bne.n	8004de8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fd fb9f 	bl	8002568 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	4619      	mov	r1, r3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f8b7 	bl	8004fb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e46:	e09b      	b.n	8004f80 <HAL_UART_IRQHandler+0x518>
 8004e48:	080051b9 	.word	0x080051b9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 808e 	beq.w	8004f84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8089 	beq.w	8004f84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	330c      	adds	r3, #12
 8004e78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	330c      	adds	r3, #12
 8004e92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e96:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e9e:	e841 2300 	strex	r3, r2, [r1]
 8004ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1e3      	bne.n	8004e72 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3314      	adds	r3, #20
 8004eb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	e853 3f00 	ldrex	r3, [r3]
 8004eb8:	623b      	str	r3, [r7, #32]
   return(result);
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	f023 0301 	bic.w	r3, r3, #1
 8004ec0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3314      	adds	r3, #20
 8004eca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ece:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ed6:	e841 2300 	strex	r3, r2, [r1]
 8004eda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e3      	bne.n	8004eaa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	330c      	adds	r3, #12
 8004ef6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0310 	bic.w	r3, r3, #16
 8004f06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	330c      	adds	r3, #12
 8004f10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f14:	61fa      	str	r2, [r7, #28]
 8004f16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f18:	69b9      	ldr	r1, [r7, #24]
 8004f1a:	69fa      	ldr	r2, [r7, #28]
 8004f1c:	e841 2300 	strex	r3, r2, [r1]
 8004f20:	617b      	str	r3, [r7, #20]
   return(result);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e3      	bne.n	8004ef0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f32:	4619      	mov	r1, r3
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f83d 	bl	8004fb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f3a:	e023      	b.n	8004f84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d009      	beq.n	8004f5c <HAL_UART_IRQHandler+0x4f4>
 8004f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f943 	bl	80051e0 <UART_Transmit_IT>
    return;
 8004f5a:	e014      	b.n	8004f86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00e      	beq.n	8004f86 <HAL_UART_IRQHandler+0x51e>
 8004f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d008      	beq.n	8004f86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f983 	bl	8005280 <UART_EndTransmit_IT>
    return;
 8004f7a:	e004      	b.n	8004f86 <HAL_UART_IRQHandler+0x51e>
    return;
 8004f7c:	bf00      	nop
 8004f7e:	e002      	b.n	8004f86 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f80:	bf00      	nop
 8004f82:	e000      	b.n	8004f86 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f84:	bf00      	nop
  }
}
 8004f86:	37e8      	adds	r7, #232	@ 0xe8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fdc:	e03b      	b.n	8005056 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe4:	d037      	beq.n	8005056 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe6:	f7fd f877 	bl	80020d8 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	6a3a      	ldr	r2, [r7, #32]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d302      	bcc.n	8004ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e03a      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b00      	cmp	r3, #0
 800500c:	d023      	beq.n	8005056 <UART_WaitOnFlagUntilTimeout+0x8a>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b80      	cmp	r3, #128	@ 0x80
 8005012:	d020      	beq.n	8005056 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b40      	cmp	r3, #64	@ 0x40
 8005018:	d01d      	beq.n	8005056 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b08      	cmp	r3, #8
 8005026:	d116      	bne.n	8005056 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005028:	2300      	movs	r3, #0
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 f857 	bl	80050f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2208      	movs	r2, #8
 8005048:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e00f      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4013      	ands	r3, r2
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	429a      	cmp	r2, r3
 8005064:	bf0c      	ite	eq
 8005066:	2301      	moveq	r3, #1
 8005068:	2300      	movne	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	461a      	mov	r2, r3
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	429a      	cmp	r2, r3
 8005072:	d0b4      	beq.n	8004fde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800507e:	b480      	push	{r7}
 8005080:	b085      	sub	sp, #20
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	4613      	mov	r3, r2
 800508a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	88fa      	ldrh	r2, [r7, #6]
 8005096:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	88fa      	ldrh	r2, [r7, #6]
 800509c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2222      	movs	r2, #34	@ 0x22
 80050a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d007      	beq.n	80050c4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050c2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695a      	ldr	r2, [r3, #20]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0220 	orr.w	r2, r2, #32
 80050e2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b095      	sub	sp, #84	@ 0x54
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	330c      	adds	r3, #12
 8005100:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800510a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005110:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	330c      	adds	r3, #12
 8005118:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800511a:	643a      	str	r2, [r7, #64]	@ 0x40
 800511c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005120:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e5      	bne.n	80050fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3314      	adds	r3, #20
 8005134:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	61fb      	str	r3, [r7, #28]
   return(result);
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3314      	adds	r3, #20
 800514c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800514e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005150:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005154:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800515c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e5      	bne.n	800512e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005166:	2b01      	cmp	r3, #1
 8005168:	d119      	bne.n	800519e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	330c      	adds	r3, #12
 8005170:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	60bb      	str	r3, [r7, #8]
   return(result);
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f023 0310 	bic.w	r3, r3, #16
 8005180:	647b      	str	r3, [r7, #68]	@ 0x44
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	330c      	adds	r3, #12
 8005188:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800518a:	61ba      	str	r2, [r7, #24]
 800518c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518e:	6979      	ldr	r1, [r7, #20]
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	e841 2300 	strex	r3, r2, [r1]
 8005196:	613b      	str	r3, [r7, #16]
   return(result);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1e5      	bne.n	800516a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80051ac:	bf00      	nop
 80051ae:	3754      	adds	r7, #84	@ 0x54
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f7ff fee4 	bl	8004fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b21      	cmp	r3, #33	@ 0x21
 80051f2:	d13e      	bne.n	8005272 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051fc:	d114      	bne.n	8005228 <UART_Transmit_IT+0x48>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d110      	bne.n	8005228 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	461a      	mov	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800521a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	1c9a      	adds	r2, r3, #2
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	621a      	str	r2, [r3, #32]
 8005226:	e008      	b.n	800523a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	1c59      	adds	r1, r3, #1
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6211      	str	r1, [r2, #32]
 8005232:	781a      	ldrb	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800523e:	b29b      	uxth	r3, r3
 8005240:	3b01      	subs	r3, #1
 8005242:	b29b      	uxth	r3, r3
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	4619      	mov	r1, r3
 8005248:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10f      	bne.n	800526e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800525c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800526c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	e000      	b.n	8005274 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005272:	2302      	movs	r3, #2
  }
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005296:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff fe73 	bl	8004f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08c      	sub	sp, #48	@ 0x30
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b22      	cmp	r3, #34	@ 0x22
 80052c2:	f040 80ae 	bne.w	8005422 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ce:	d117      	bne.n	8005300 <UART_Receive_IT+0x50>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d113      	bne.n	8005300 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052d8:	2300      	movs	r3, #0
 80052da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f8:	1c9a      	adds	r2, r3, #2
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80052fe:	e026      	b.n	800534e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005304:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005306:	2300      	movs	r3, #0
 8005308:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005312:	d007      	beq.n	8005324 <UART_Receive_IT+0x74>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10a      	bne.n	8005332 <UART_Receive_IT+0x82>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d106      	bne.n	8005332 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	b2da      	uxtb	r2, r3
 800532c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532e:	701a      	strb	r2, [r3, #0]
 8005330:	e008      	b.n	8005344 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	b2db      	uxtb	r3, r3
 800533a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800533e:	b2da      	uxtb	r2, r3
 8005340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005342:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b01      	subs	r3, #1
 8005356:	b29b      	uxth	r3, r3
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	4619      	mov	r1, r3
 800535c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800535e:	2b00      	cmp	r3, #0
 8005360:	d15d      	bne.n	800541e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0220 	bic.w	r2, r2, #32
 8005370:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005380:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695a      	ldr	r2, [r3, #20]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0201 	bic.w	r2, r2, #1
 8005390:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2220      	movs	r2, #32
 8005396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d135      	bne.n	8005414 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	330c      	adds	r3, #12
 80053b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	613b      	str	r3, [r7, #16]
   return(result);
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f023 0310 	bic.w	r3, r3, #16
 80053c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	330c      	adds	r3, #12
 80053cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ce:	623a      	str	r2, [r7, #32]
 80053d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	69f9      	ldr	r1, [r7, #28]
 80053d4:	6a3a      	ldr	r2, [r7, #32]
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	61bb      	str	r3, [r7, #24]
   return(result);
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e5      	bne.n	80053ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d10a      	bne.n	8005406 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800540a:	4619      	mov	r1, r3
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff fdd1 	bl	8004fb4 <HAL_UARTEx_RxEventCallback>
 8005412:	e002      	b.n	800541a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7fb ffaf 	bl	8001378 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	e002      	b.n	8005424 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	e000      	b.n	8005424 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005422:	2302      	movs	r3, #2
  }
}
 8005424:	4618      	mov	r0, r3
 8005426:	3730      	adds	r7, #48	@ 0x30
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800542c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005430:	b0c0      	sub	sp, #256	@ 0x100
 8005432:	af00      	add	r7, sp, #0
 8005434:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005448:	68d9      	ldr	r1, [r3, #12]
 800544a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	ea40 0301 	orr.w	r3, r0, r1
 8005454:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	431a      	orrs	r2, r3
 8005464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	431a      	orrs	r2, r3
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005484:	f021 010c 	bic.w	r1, r1, #12
 8005488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005492:	430b      	orrs	r3, r1
 8005494:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80054a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a6:	6999      	ldr	r1, [r3, #24]
 80054a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	ea40 0301 	orr.w	r3, r0, r1
 80054b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	4b8f      	ldr	r3, [pc, #572]	@ (80056f8 <UART_SetConfig+0x2cc>)
 80054bc:	429a      	cmp	r2, r3
 80054be:	d005      	beq.n	80054cc <UART_SetConfig+0xa0>
 80054c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	4b8d      	ldr	r3, [pc, #564]	@ (80056fc <UART_SetConfig+0x2d0>)
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d104      	bne.n	80054d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054cc:	f7ff f876 	bl	80045bc <HAL_RCC_GetPCLK2Freq>
 80054d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80054d4:	e003      	b.n	80054de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054d6:	f7ff f85d 	bl	8004594 <HAL_RCC_GetPCLK1Freq>
 80054da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054e8:	f040 810c 	bne.w	8005704 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80054f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80054fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80054fe:	4622      	mov	r2, r4
 8005500:	462b      	mov	r3, r5
 8005502:	1891      	adds	r1, r2, r2
 8005504:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005506:	415b      	adcs	r3, r3
 8005508:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800550a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800550e:	4621      	mov	r1, r4
 8005510:	eb12 0801 	adds.w	r8, r2, r1
 8005514:	4629      	mov	r1, r5
 8005516:	eb43 0901 	adc.w	r9, r3, r1
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	f04f 0300 	mov.w	r3, #0
 8005522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800552a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800552e:	4690      	mov	r8, r2
 8005530:	4699      	mov	r9, r3
 8005532:	4623      	mov	r3, r4
 8005534:	eb18 0303 	adds.w	r3, r8, r3
 8005538:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800553c:	462b      	mov	r3, r5
 800553e:	eb49 0303 	adc.w	r3, r9, r3
 8005542:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005552:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005556:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800555a:	460b      	mov	r3, r1
 800555c:	18db      	adds	r3, r3, r3
 800555e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005560:	4613      	mov	r3, r2
 8005562:	eb42 0303 	adc.w	r3, r2, r3
 8005566:	657b      	str	r3, [r7, #84]	@ 0x54
 8005568:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800556c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005570:	f7fb fb8a 	bl	8000c88 <__aeabi_uldivmod>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4b61      	ldr	r3, [pc, #388]	@ (8005700 <UART_SetConfig+0x2d4>)
 800557a:	fba3 2302 	umull	r2, r3, r3, r2
 800557e:	095b      	lsrs	r3, r3, #5
 8005580:	011c      	lsls	r4, r3, #4
 8005582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005586:	2200      	movs	r2, #0
 8005588:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800558c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005590:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005594:	4642      	mov	r2, r8
 8005596:	464b      	mov	r3, r9
 8005598:	1891      	adds	r1, r2, r2
 800559a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800559c:	415b      	adcs	r3, r3
 800559e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055a4:	4641      	mov	r1, r8
 80055a6:	eb12 0a01 	adds.w	sl, r2, r1
 80055aa:	4649      	mov	r1, r9
 80055ac:	eb43 0b01 	adc.w	fp, r3, r1
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	f04f 0300 	mov.w	r3, #0
 80055b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055c4:	4692      	mov	sl, r2
 80055c6:	469b      	mov	fp, r3
 80055c8:	4643      	mov	r3, r8
 80055ca:	eb1a 0303 	adds.w	r3, sl, r3
 80055ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055d2:	464b      	mov	r3, r9
 80055d4:	eb4b 0303 	adc.w	r3, fp, r3
 80055d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80055ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055f0:	460b      	mov	r3, r1
 80055f2:	18db      	adds	r3, r3, r3
 80055f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80055f6:	4613      	mov	r3, r2
 80055f8:	eb42 0303 	adc.w	r3, r2, r3
 80055fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80055fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005602:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005606:	f7fb fb3f 	bl	8000c88 <__aeabi_uldivmod>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	4611      	mov	r1, r2
 8005610:	4b3b      	ldr	r3, [pc, #236]	@ (8005700 <UART_SetConfig+0x2d4>)
 8005612:	fba3 2301 	umull	r2, r3, r3, r1
 8005616:	095b      	lsrs	r3, r3, #5
 8005618:	2264      	movs	r2, #100	@ 0x64
 800561a:	fb02 f303 	mul.w	r3, r2, r3
 800561e:	1acb      	subs	r3, r1, r3
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005626:	4b36      	ldr	r3, [pc, #216]	@ (8005700 <UART_SetConfig+0x2d4>)
 8005628:	fba3 2302 	umull	r2, r3, r3, r2
 800562c:	095b      	lsrs	r3, r3, #5
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005634:	441c      	add	r4, r3
 8005636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800563a:	2200      	movs	r2, #0
 800563c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005640:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005644:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005648:	4642      	mov	r2, r8
 800564a:	464b      	mov	r3, r9
 800564c:	1891      	adds	r1, r2, r2
 800564e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005650:	415b      	adcs	r3, r3
 8005652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005654:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005658:	4641      	mov	r1, r8
 800565a:	1851      	adds	r1, r2, r1
 800565c:	6339      	str	r1, [r7, #48]	@ 0x30
 800565e:	4649      	mov	r1, r9
 8005660:	414b      	adcs	r3, r1
 8005662:	637b      	str	r3, [r7, #52]	@ 0x34
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005670:	4659      	mov	r1, fp
 8005672:	00cb      	lsls	r3, r1, #3
 8005674:	4651      	mov	r1, sl
 8005676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800567a:	4651      	mov	r1, sl
 800567c:	00ca      	lsls	r2, r1, #3
 800567e:	4610      	mov	r0, r2
 8005680:	4619      	mov	r1, r3
 8005682:	4603      	mov	r3, r0
 8005684:	4642      	mov	r2, r8
 8005686:	189b      	adds	r3, r3, r2
 8005688:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800568c:	464b      	mov	r3, r9
 800568e:	460a      	mov	r2, r1
 8005690:	eb42 0303 	adc.w	r3, r2, r3
 8005694:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056ac:	460b      	mov	r3, r1
 80056ae:	18db      	adds	r3, r3, r3
 80056b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056b2:	4613      	mov	r3, r2
 80056b4:	eb42 0303 	adc.w	r3, r2, r3
 80056b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80056c2:	f7fb fae1 	bl	8000c88 <__aeabi_uldivmod>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005700 <UART_SetConfig+0x2d4>)
 80056cc:	fba3 1302 	umull	r1, r3, r3, r2
 80056d0:	095b      	lsrs	r3, r3, #5
 80056d2:	2164      	movs	r1, #100	@ 0x64
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	3332      	adds	r3, #50	@ 0x32
 80056de:	4a08      	ldr	r2, [pc, #32]	@ (8005700 <UART_SetConfig+0x2d4>)
 80056e0:	fba2 2303 	umull	r2, r3, r2, r3
 80056e4:	095b      	lsrs	r3, r3, #5
 80056e6:	f003 0207 	and.w	r2, r3, #7
 80056ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4422      	add	r2, r4
 80056f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056f4:	e106      	b.n	8005904 <UART_SetConfig+0x4d8>
 80056f6:	bf00      	nop
 80056f8:	40011000 	.word	0x40011000
 80056fc:	40011400 	.word	0x40011400
 8005700:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005708:	2200      	movs	r2, #0
 800570a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800570e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005712:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005716:	4642      	mov	r2, r8
 8005718:	464b      	mov	r3, r9
 800571a:	1891      	adds	r1, r2, r2
 800571c:	6239      	str	r1, [r7, #32]
 800571e:	415b      	adcs	r3, r3
 8005720:	627b      	str	r3, [r7, #36]	@ 0x24
 8005722:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005726:	4641      	mov	r1, r8
 8005728:	1854      	adds	r4, r2, r1
 800572a:	4649      	mov	r1, r9
 800572c:	eb43 0501 	adc.w	r5, r3, r1
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	00eb      	lsls	r3, r5, #3
 800573a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800573e:	00e2      	lsls	r2, r4, #3
 8005740:	4614      	mov	r4, r2
 8005742:	461d      	mov	r5, r3
 8005744:	4643      	mov	r3, r8
 8005746:	18e3      	adds	r3, r4, r3
 8005748:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800574c:	464b      	mov	r3, r9
 800574e:	eb45 0303 	adc.w	r3, r5, r3
 8005752:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005762:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005766:	f04f 0200 	mov.w	r2, #0
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005772:	4629      	mov	r1, r5
 8005774:	008b      	lsls	r3, r1, #2
 8005776:	4621      	mov	r1, r4
 8005778:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800577c:	4621      	mov	r1, r4
 800577e:	008a      	lsls	r2, r1, #2
 8005780:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005784:	f7fb fa80 	bl	8000c88 <__aeabi_uldivmod>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4b60      	ldr	r3, [pc, #384]	@ (8005910 <UART_SetConfig+0x4e4>)
 800578e:	fba3 2302 	umull	r2, r3, r3, r2
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	011c      	lsls	r4, r3, #4
 8005796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800579a:	2200      	movs	r2, #0
 800579c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80057a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057a8:	4642      	mov	r2, r8
 80057aa:	464b      	mov	r3, r9
 80057ac:	1891      	adds	r1, r2, r2
 80057ae:	61b9      	str	r1, [r7, #24]
 80057b0:	415b      	adcs	r3, r3
 80057b2:	61fb      	str	r3, [r7, #28]
 80057b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057b8:	4641      	mov	r1, r8
 80057ba:	1851      	adds	r1, r2, r1
 80057bc:	6139      	str	r1, [r7, #16]
 80057be:	4649      	mov	r1, r9
 80057c0:	414b      	adcs	r3, r1
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057d0:	4659      	mov	r1, fp
 80057d2:	00cb      	lsls	r3, r1, #3
 80057d4:	4651      	mov	r1, sl
 80057d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057da:	4651      	mov	r1, sl
 80057dc:	00ca      	lsls	r2, r1, #3
 80057de:	4610      	mov	r0, r2
 80057e0:	4619      	mov	r1, r3
 80057e2:	4603      	mov	r3, r0
 80057e4:	4642      	mov	r2, r8
 80057e6:	189b      	adds	r3, r3, r2
 80057e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057ec:	464b      	mov	r3, r9
 80057ee:	460a      	mov	r2, r1
 80057f0:	eb42 0303 	adc.w	r3, r2, r3
 80057f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005802:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005810:	4649      	mov	r1, r9
 8005812:	008b      	lsls	r3, r1, #2
 8005814:	4641      	mov	r1, r8
 8005816:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800581a:	4641      	mov	r1, r8
 800581c:	008a      	lsls	r2, r1, #2
 800581e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005822:	f7fb fa31 	bl	8000c88 <__aeabi_uldivmod>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4611      	mov	r1, r2
 800582c:	4b38      	ldr	r3, [pc, #224]	@ (8005910 <UART_SetConfig+0x4e4>)
 800582e:	fba3 2301 	umull	r2, r3, r3, r1
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	2264      	movs	r2, #100	@ 0x64
 8005836:	fb02 f303 	mul.w	r3, r2, r3
 800583a:	1acb      	subs	r3, r1, r3
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	3332      	adds	r3, #50	@ 0x32
 8005840:	4a33      	ldr	r2, [pc, #204]	@ (8005910 <UART_SetConfig+0x4e4>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	095b      	lsrs	r3, r3, #5
 8005848:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800584c:	441c      	add	r4, r3
 800584e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005852:	2200      	movs	r2, #0
 8005854:	673b      	str	r3, [r7, #112]	@ 0x70
 8005856:	677a      	str	r2, [r7, #116]	@ 0x74
 8005858:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800585c:	4642      	mov	r2, r8
 800585e:	464b      	mov	r3, r9
 8005860:	1891      	adds	r1, r2, r2
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	415b      	adcs	r3, r3
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800586c:	4641      	mov	r1, r8
 800586e:	1851      	adds	r1, r2, r1
 8005870:	6039      	str	r1, [r7, #0]
 8005872:	4649      	mov	r1, r9
 8005874:	414b      	adcs	r3, r1
 8005876:	607b      	str	r3, [r7, #4]
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	f04f 0300 	mov.w	r3, #0
 8005880:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005884:	4659      	mov	r1, fp
 8005886:	00cb      	lsls	r3, r1, #3
 8005888:	4651      	mov	r1, sl
 800588a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800588e:	4651      	mov	r1, sl
 8005890:	00ca      	lsls	r2, r1, #3
 8005892:	4610      	mov	r0, r2
 8005894:	4619      	mov	r1, r3
 8005896:	4603      	mov	r3, r0
 8005898:	4642      	mov	r2, r8
 800589a:	189b      	adds	r3, r3, r2
 800589c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800589e:	464b      	mov	r3, r9
 80058a0:	460a      	mov	r2, r1
 80058a2:	eb42 0303 	adc.w	r3, r2, r3
 80058a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80058b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	f04f 0300 	mov.w	r3, #0
 80058bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80058c0:	4649      	mov	r1, r9
 80058c2:	008b      	lsls	r3, r1, #2
 80058c4:	4641      	mov	r1, r8
 80058c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ca:	4641      	mov	r1, r8
 80058cc:	008a      	lsls	r2, r1, #2
 80058ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80058d2:	f7fb f9d9 	bl	8000c88 <__aeabi_uldivmod>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4b0d      	ldr	r3, [pc, #52]	@ (8005910 <UART_SetConfig+0x4e4>)
 80058dc:	fba3 1302 	umull	r1, r3, r3, r2
 80058e0:	095b      	lsrs	r3, r3, #5
 80058e2:	2164      	movs	r1, #100	@ 0x64
 80058e4:	fb01 f303 	mul.w	r3, r1, r3
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	3332      	adds	r3, #50	@ 0x32
 80058ee:	4a08      	ldr	r2, [pc, #32]	@ (8005910 <UART_SetConfig+0x4e4>)
 80058f0:	fba2 2303 	umull	r2, r3, r2, r3
 80058f4:	095b      	lsrs	r3, r3, #5
 80058f6:	f003 020f 	and.w	r2, r3, #15
 80058fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4422      	add	r2, r4
 8005902:	609a      	str	r2, [r3, #8]
}
 8005904:	bf00      	nop
 8005906:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800590a:	46bd      	mov	sp, r7
 800590c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005910:	51eb851f 	.word	0x51eb851f

08005914 <__cvt>:
 8005914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005918:	ec57 6b10 	vmov	r6, r7, d0
 800591c:	2f00      	cmp	r7, #0
 800591e:	460c      	mov	r4, r1
 8005920:	4619      	mov	r1, r3
 8005922:	463b      	mov	r3, r7
 8005924:	bfbb      	ittet	lt
 8005926:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800592a:	461f      	movlt	r7, r3
 800592c:	2300      	movge	r3, #0
 800592e:	232d      	movlt	r3, #45	@ 0x2d
 8005930:	700b      	strb	r3, [r1, #0]
 8005932:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005934:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005938:	4691      	mov	r9, r2
 800593a:	f023 0820 	bic.w	r8, r3, #32
 800593e:	bfbc      	itt	lt
 8005940:	4632      	movlt	r2, r6
 8005942:	4616      	movlt	r6, r2
 8005944:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005948:	d005      	beq.n	8005956 <__cvt+0x42>
 800594a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800594e:	d100      	bne.n	8005952 <__cvt+0x3e>
 8005950:	3401      	adds	r4, #1
 8005952:	2102      	movs	r1, #2
 8005954:	e000      	b.n	8005958 <__cvt+0x44>
 8005956:	2103      	movs	r1, #3
 8005958:	ab03      	add	r3, sp, #12
 800595a:	9301      	str	r3, [sp, #4]
 800595c:	ab02      	add	r3, sp, #8
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	ec47 6b10 	vmov	d0, r6, r7
 8005964:	4653      	mov	r3, sl
 8005966:	4622      	mov	r2, r4
 8005968:	f001 f9b6 	bl	8006cd8 <_dtoa_r>
 800596c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005970:	4605      	mov	r5, r0
 8005972:	d119      	bne.n	80059a8 <__cvt+0x94>
 8005974:	f019 0f01 	tst.w	r9, #1
 8005978:	d00e      	beq.n	8005998 <__cvt+0x84>
 800597a:	eb00 0904 	add.w	r9, r0, r4
 800597e:	2200      	movs	r2, #0
 8005980:	2300      	movs	r3, #0
 8005982:	4630      	mov	r0, r6
 8005984:	4639      	mov	r1, r7
 8005986:	f7fb f89f 	bl	8000ac8 <__aeabi_dcmpeq>
 800598a:	b108      	cbz	r0, 8005990 <__cvt+0x7c>
 800598c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005990:	2230      	movs	r2, #48	@ 0x30
 8005992:	9b03      	ldr	r3, [sp, #12]
 8005994:	454b      	cmp	r3, r9
 8005996:	d31e      	bcc.n	80059d6 <__cvt+0xc2>
 8005998:	9b03      	ldr	r3, [sp, #12]
 800599a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800599c:	1b5b      	subs	r3, r3, r5
 800599e:	4628      	mov	r0, r5
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	b004      	add	sp, #16
 80059a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059ac:	eb00 0904 	add.w	r9, r0, r4
 80059b0:	d1e5      	bne.n	800597e <__cvt+0x6a>
 80059b2:	7803      	ldrb	r3, [r0, #0]
 80059b4:	2b30      	cmp	r3, #48	@ 0x30
 80059b6:	d10a      	bne.n	80059ce <__cvt+0xba>
 80059b8:	2200      	movs	r2, #0
 80059ba:	2300      	movs	r3, #0
 80059bc:	4630      	mov	r0, r6
 80059be:	4639      	mov	r1, r7
 80059c0:	f7fb f882 	bl	8000ac8 <__aeabi_dcmpeq>
 80059c4:	b918      	cbnz	r0, 80059ce <__cvt+0xba>
 80059c6:	f1c4 0401 	rsb	r4, r4, #1
 80059ca:	f8ca 4000 	str.w	r4, [sl]
 80059ce:	f8da 3000 	ldr.w	r3, [sl]
 80059d2:	4499      	add	r9, r3
 80059d4:	e7d3      	b.n	800597e <__cvt+0x6a>
 80059d6:	1c59      	adds	r1, r3, #1
 80059d8:	9103      	str	r1, [sp, #12]
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	e7d9      	b.n	8005992 <__cvt+0x7e>

080059de <__exponent>:
 80059de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059e0:	2900      	cmp	r1, #0
 80059e2:	bfba      	itte	lt
 80059e4:	4249      	neglt	r1, r1
 80059e6:	232d      	movlt	r3, #45	@ 0x2d
 80059e8:	232b      	movge	r3, #43	@ 0x2b
 80059ea:	2909      	cmp	r1, #9
 80059ec:	7002      	strb	r2, [r0, #0]
 80059ee:	7043      	strb	r3, [r0, #1]
 80059f0:	dd29      	ble.n	8005a46 <__exponent+0x68>
 80059f2:	f10d 0307 	add.w	r3, sp, #7
 80059f6:	461d      	mov	r5, r3
 80059f8:	270a      	movs	r7, #10
 80059fa:	461a      	mov	r2, r3
 80059fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8005a00:	fb07 1416 	mls	r4, r7, r6, r1
 8005a04:	3430      	adds	r4, #48	@ 0x30
 8005a06:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	2c63      	cmp	r4, #99	@ 0x63
 8005a0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a12:	4631      	mov	r1, r6
 8005a14:	dcf1      	bgt.n	80059fa <__exponent+0x1c>
 8005a16:	3130      	adds	r1, #48	@ 0x30
 8005a18:	1e94      	subs	r4, r2, #2
 8005a1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a1e:	1c41      	adds	r1, r0, #1
 8005a20:	4623      	mov	r3, r4
 8005a22:	42ab      	cmp	r3, r5
 8005a24:	d30a      	bcc.n	8005a3c <__exponent+0x5e>
 8005a26:	f10d 0309 	add.w	r3, sp, #9
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	42ac      	cmp	r4, r5
 8005a2e:	bf88      	it	hi
 8005a30:	2300      	movhi	r3, #0
 8005a32:	3302      	adds	r3, #2
 8005a34:	4403      	add	r3, r0
 8005a36:	1a18      	subs	r0, r3, r0
 8005a38:	b003      	add	sp, #12
 8005a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a3c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a40:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005a44:	e7ed      	b.n	8005a22 <__exponent+0x44>
 8005a46:	2330      	movs	r3, #48	@ 0x30
 8005a48:	3130      	adds	r1, #48	@ 0x30
 8005a4a:	7083      	strb	r3, [r0, #2]
 8005a4c:	70c1      	strb	r1, [r0, #3]
 8005a4e:	1d03      	adds	r3, r0, #4
 8005a50:	e7f1      	b.n	8005a36 <__exponent+0x58>
	...

08005a54 <_printf_float>:
 8005a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a58:	b08d      	sub	sp, #52	@ 0x34
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005a60:	4616      	mov	r6, r2
 8005a62:	461f      	mov	r7, r3
 8005a64:	4605      	mov	r5, r0
 8005a66:	f001 f831 	bl	8006acc <_localeconv_r>
 8005a6a:	6803      	ldr	r3, [r0, #0]
 8005a6c:	9304      	str	r3, [sp, #16]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fa fbfe 	bl	8000270 <strlen>
 8005a74:	2300      	movs	r3, #0
 8005a76:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a78:	f8d8 3000 	ldr.w	r3, [r8]
 8005a7c:	9005      	str	r0, [sp, #20]
 8005a7e:	3307      	adds	r3, #7
 8005a80:	f023 0307 	bic.w	r3, r3, #7
 8005a84:	f103 0208 	add.w	r2, r3, #8
 8005a88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005a8c:	f8d4 b000 	ldr.w	fp, [r4]
 8005a90:	f8c8 2000 	str.w	r2, [r8]
 8005a94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005a9c:	9307      	str	r3, [sp, #28]
 8005a9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005aa2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005aa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005aaa:	4b9c      	ldr	r3, [pc, #624]	@ (8005d1c <_printf_float+0x2c8>)
 8005aac:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab0:	f7fb f83c 	bl	8000b2c <__aeabi_dcmpun>
 8005ab4:	bb70      	cbnz	r0, 8005b14 <_printf_float+0xc0>
 8005ab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005aba:	4b98      	ldr	r3, [pc, #608]	@ (8005d1c <_printf_float+0x2c8>)
 8005abc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac0:	f7fb f816 	bl	8000af0 <__aeabi_dcmple>
 8005ac4:	bb30      	cbnz	r0, 8005b14 <_printf_float+0xc0>
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	2300      	movs	r3, #0
 8005aca:	4640      	mov	r0, r8
 8005acc:	4649      	mov	r1, r9
 8005ace:	f7fb f805 	bl	8000adc <__aeabi_dcmplt>
 8005ad2:	b110      	cbz	r0, 8005ada <_printf_float+0x86>
 8005ad4:	232d      	movs	r3, #45	@ 0x2d
 8005ad6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ada:	4a91      	ldr	r2, [pc, #580]	@ (8005d20 <_printf_float+0x2cc>)
 8005adc:	4b91      	ldr	r3, [pc, #580]	@ (8005d24 <_printf_float+0x2d0>)
 8005ade:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005ae2:	bf94      	ite	ls
 8005ae4:	4690      	movls	r8, r2
 8005ae6:	4698      	movhi	r8, r3
 8005ae8:	2303      	movs	r3, #3
 8005aea:	6123      	str	r3, [r4, #16]
 8005aec:	f02b 0304 	bic.w	r3, fp, #4
 8005af0:	6023      	str	r3, [r4, #0]
 8005af2:	f04f 0900 	mov.w	r9, #0
 8005af6:	9700      	str	r7, [sp, #0]
 8005af8:	4633      	mov	r3, r6
 8005afa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005afc:	4621      	mov	r1, r4
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 f9d2 	bl	8005ea8 <_printf_common>
 8005b04:	3001      	adds	r0, #1
 8005b06:	f040 808d 	bne.w	8005c24 <_printf_float+0x1d0>
 8005b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0e:	b00d      	add	sp, #52	@ 0x34
 8005b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b14:	4642      	mov	r2, r8
 8005b16:	464b      	mov	r3, r9
 8005b18:	4640      	mov	r0, r8
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	f7fb f806 	bl	8000b2c <__aeabi_dcmpun>
 8005b20:	b140      	cbz	r0, 8005b34 <_printf_float+0xe0>
 8005b22:	464b      	mov	r3, r9
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	bfbc      	itt	lt
 8005b28:	232d      	movlt	r3, #45	@ 0x2d
 8005b2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005b2e:	4a7e      	ldr	r2, [pc, #504]	@ (8005d28 <_printf_float+0x2d4>)
 8005b30:	4b7e      	ldr	r3, [pc, #504]	@ (8005d2c <_printf_float+0x2d8>)
 8005b32:	e7d4      	b.n	8005ade <_printf_float+0x8a>
 8005b34:	6863      	ldr	r3, [r4, #4]
 8005b36:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005b3a:	9206      	str	r2, [sp, #24]
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	d13b      	bne.n	8005bb8 <_printf_float+0x164>
 8005b40:	2306      	movs	r3, #6
 8005b42:	6063      	str	r3, [r4, #4]
 8005b44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005b48:	2300      	movs	r3, #0
 8005b4a:	6022      	str	r2, [r4, #0]
 8005b4c:	9303      	str	r3, [sp, #12]
 8005b4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005b50:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005b54:	ab09      	add	r3, sp, #36	@ 0x24
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	6861      	ldr	r1, [r4, #4]
 8005b5a:	ec49 8b10 	vmov	d0, r8, r9
 8005b5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005b62:	4628      	mov	r0, r5
 8005b64:	f7ff fed6 	bl	8005914 <__cvt>
 8005b68:	9b06      	ldr	r3, [sp, #24]
 8005b6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b6c:	2b47      	cmp	r3, #71	@ 0x47
 8005b6e:	4680      	mov	r8, r0
 8005b70:	d129      	bne.n	8005bc6 <_printf_float+0x172>
 8005b72:	1cc8      	adds	r0, r1, #3
 8005b74:	db02      	blt.n	8005b7c <_printf_float+0x128>
 8005b76:	6863      	ldr	r3, [r4, #4]
 8005b78:	4299      	cmp	r1, r3
 8005b7a:	dd41      	ble.n	8005c00 <_printf_float+0x1ac>
 8005b7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005b80:	fa5f fa8a 	uxtb.w	sl, sl
 8005b84:	3901      	subs	r1, #1
 8005b86:	4652      	mov	r2, sl
 8005b88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005b8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005b8e:	f7ff ff26 	bl	80059de <__exponent>
 8005b92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b94:	1813      	adds	r3, r2, r0
 8005b96:	2a01      	cmp	r2, #1
 8005b98:	4681      	mov	r9, r0
 8005b9a:	6123      	str	r3, [r4, #16]
 8005b9c:	dc02      	bgt.n	8005ba4 <_printf_float+0x150>
 8005b9e:	6822      	ldr	r2, [r4, #0]
 8005ba0:	07d2      	lsls	r2, r2, #31
 8005ba2:	d501      	bpl.n	8005ba8 <_printf_float+0x154>
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	6123      	str	r3, [r4, #16]
 8005ba8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0a2      	beq.n	8005af6 <_printf_float+0xa2>
 8005bb0:	232d      	movs	r3, #45	@ 0x2d
 8005bb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bb6:	e79e      	b.n	8005af6 <_printf_float+0xa2>
 8005bb8:	9a06      	ldr	r2, [sp, #24]
 8005bba:	2a47      	cmp	r2, #71	@ 0x47
 8005bbc:	d1c2      	bne.n	8005b44 <_printf_float+0xf0>
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1c0      	bne.n	8005b44 <_printf_float+0xf0>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e7bd      	b.n	8005b42 <_printf_float+0xee>
 8005bc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005bca:	d9db      	bls.n	8005b84 <_printf_float+0x130>
 8005bcc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005bd0:	d118      	bne.n	8005c04 <_printf_float+0x1b0>
 8005bd2:	2900      	cmp	r1, #0
 8005bd4:	6863      	ldr	r3, [r4, #4]
 8005bd6:	dd0b      	ble.n	8005bf0 <_printf_float+0x19c>
 8005bd8:	6121      	str	r1, [r4, #16]
 8005bda:	b913      	cbnz	r3, 8005be2 <_printf_float+0x18e>
 8005bdc:	6822      	ldr	r2, [r4, #0]
 8005bde:	07d0      	lsls	r0, r2, #31
 8005be0:	d502      	bpl.n	8005be8 <_printf_float+0x194>
 8005be2:	3301      	adds	r3, #1
 8005be4:	440b      	add	r3, r1
 8005be6:	6123      	str	r3, [r4, #16]
 8005be8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005bea:	f04f 0900 	mov.w	r9, #0
 8005bee:	e7db      	b.n	8005ba8 <_printf_float+0x154>
 8005bf0:	b913      	cbnz	r3, 8005bf8 <_printf_float+0x1a4>
 8005bf2:	6822      	ldr	r2, [r4, #0]
 8005bf4:	07d2      	lsls	r2, r2, #31
 8005bf6:	d501      	bpl.n	8005bfc <_printf_float+0x1a8>
 8005bf8:	3302      	adds	r3, #2
 8005bfa:	e7f4      	b.n	8005be6 <_printf_float+0x192>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e7f2      	b.n	8005be6 <_printf_float+0x192>
 8005c00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005c04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c06:	4299      	cmp	r1, r3
 8005c08:	db05      	blt.n	8005c16 <_printf_float+0x1c2>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	6121      	str	r1, [r4, #16]
 8005c0e:	07d8      	lsls	r0, r3, #31
 8005c10:	d5ea      	bpl.n	8005be8 <_printf_float+0x194>
 8005c12:	1c4b      	adds	r3, r1, #1
 8005c14:	e7e7      	b.n	8005be6 <_printf_float+0x192>
 8005c16:	2900      	cmp	r1, #0
 8005c18:	bfd4      	ite	le
 8005c1a:	f1c1 0202 	rsble	r2, r1, #2
 8005c1e:	2201      	movgt	r2, #1
 8005c20:	4413      	add	r3, r2
 8005c22:	e7e0      	b.n	8005be6 <_printf_float+0x192>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	055a      	lsls	r2, r3, #21
 8005c28:	d407      	bmi.n	8005c3a <_printf_float+0x1e6>
 8005c2a:	6923      	ldr	r3, [r4, #16]
 8005c2c:	4642      	mov	r2, r8
 8005c2e:	4631      	mov	r1, r6
 8005c30:	4628      	mov	r0, r5
 8005c32:	47b8      	blx	r7
 8005c34:	3001      	adds	r0, #1
 8005c36:	d12b      	bne.n	8005c90 <_printf_float+0x23c>
 8005c38:	e767      	b.n	8005b0a <_printf_float+0xb6>
 8005c3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c3e:	f240 80dd 	bls.w	8005dfc <_printf_float+0x3a8>
 8005c42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c46:	2200      	movs	r2, #0
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f7fa ff3d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	d033      	beq.n	8005cba <_printf_float+0x266>
 8005c52:	4a37      	ldr	r2, [pc, #220]	@ (8005d30 <_printf_float+0x2dc>)
 8005c54:	2301      	movs	r3, #1
 8005c56:	4631      	mov	r1, r6
 8005c58:	4628      	mov	r0, r5
 8005c5a:	47b8      	blx	r7
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	f43f af54 	beq.w	8005b0a <_printf_float+0xb6>
 8005c62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005c66:	4543      	cmp	r3, r8
 8005c68:	db02      	blt.n	8005c70 <_printf_float+0x21c>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	07d8      	lsls	r0, r3, #31
 8005c6e:	d50f      	bpl.n	8005c90 <_printf_float+0x23c>
 8005c70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c74:	4631      	mov	r1, r6
 8005c76:	4628      	mov	r0, r5
 8005c78:	47b8      	blx	r7
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	f43f af45 	beq.w	8005b0a <_printf_float+0xb6>
 8005c80:	f04f 0900 	mov.w	r9, #0
 8005c84:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c88:	f104 0a1a 	add.w	sl, r4, #26
 8005c8c:	45c8      	cmp	r8, r9
 8005c8e:	dc09      	bgt.n	8005ca4 <_printf_float+0x250>
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	079b      	lsls	r3, r3, #30
 8005c94:	f100 8103 	bmi.w	8005e9e <_printf_float+0x44a>
 8005c98:	68e0      	ldr	r0, [r4, #12]
 8005c9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c9c:	4298      	cmp	r0, r3
 8005c9e:	bfb8      	it	lt
 8005ca0:	4618      	movlt	r0, r3
 8005ca2:	e734      	b.n	8005b0e <_printf_float+0xba>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	4652      	mov	r2, sl
 8005ca8:	4631      	mov	r1, r6
 8005caa:	4628      	mov	r0, r5
 8005cac:	47b8      	blx	r7
 8005cae:	3001      	adds	r0, #1
 8005cb0:	f43f af2b 	beq.w	8005b0a <_printf_float+0xb6>
 8005cb4:	f109 0901 	add.w	r9, r9, #1
 8005cb8:	e7e8      	b.n	8005c8c <_printf_float+0x238>
 8005cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	dc39      	bgt.n	8005d34 <_printf_float+0x2e0>
 8005cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d30 <_printf_float+0x2dc>)
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	4631      	mov	r1, r6
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	47b8      	blx	r7
 8005cca:	3001      	adds	r0, #1
 8005ccc:	f43f af1d 	beq.w	8005b0a <_printf_float+0xb6>
 8005cd0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005cd4:	ea59 0303 	orrs.w	r3, r9, r3
 8005cd8:	d102      	bne.n	8005ce0 <_printf_float+0x28c>
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	07d9      	lsls	r1, r3, #31
 8005cde:	d5d7      	bpl.n	8005c90 <_printf_float+0x23c>
 8005ce0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ce4:	4631      	mov	r1, r6
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	47b8      	blx	r7
 8005cea:	3001      	adds	r0, #1
 8005cec:	f43f af0d 	beq.w	8005b0a <_printf_float+0xb6>
 8005cf0:	f04f 0a00 	mov.w	sl, #0
 8005cf4:	f104 0b1a 	add.w	fp, r4, #26
 8005cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cfa:	425b      	negs	r3, r3
 8005cfc:	4553      	cmp	r3, sl
 8005cfe:	dc01      	bgt.n	8005d04 <_printf_float+0x2b0>
 8005d00:	464b      	mov	r3, r9
 8005d02:	e793      	b.n	8005c2c <_printf_float+0x1d8>
 8005d04:	2301      	movs	r3, #1
 8005d06:	465a      	mov	r2, fp
 8005d08:	4631      	mov	r1, r6
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	47b8      	blx	r7
 8005d0e:	3001      	adds	r0, #1
 8005d10:	f43f aefb 	beq.w	8005b0a <_printf_float+0xb6>
 8005d14:	f10a 0a01 	add.w	sl, sl, #1
 8005d18:	e7ee      	b.n	8005cf8 <_printf_float+0x2a4>
 8005d1a:	bf00      	nop
 8005d1c:	7fefffff 	.word	0x7fefffff
 8005d20:	0800ab0c 	.word	0x0800ab0c
 8005d24:	0800ab10 	.word	0x0800ab10
 8005d28:	0800ab14 	.word	0x0800ab14
 8005d2c:	0800ab18 	.word	0x0800ab18
 8005d30:	0800aea8 	.word	0x0800aea8
 8005d34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005d3a:	4553      	cmp	r3, sl
 8005d3c:	bfa8      	it	ge
 8005d3e:	4653      	movge	r3, sl
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	4699      	mov	r9, r3
 8005d44:	dc36      	bgt.n	8005db4 <_printf_float+0x360>
 8005d46:	f04f 0b00 	mov.w	fp, #0
 8005d4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d4e:	f104 021a 	add.w	r2, r4, #26
 8005d52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d54:	9306      	str	r3, [sp, #24]
 8005d56:	eba3 0309 	sub.w	r3, r3, r9
 8005d5a:	455b      	cmp	r3, fp
 8005d5c:	dc31      	bgt.n	8005dc2 <_printf_float+0x36e>
 8005d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d60:	459a      	cmp	sl, r3
 8005d62:	dc3a      	bgt.n	8005dda <_printf_float+0x386>
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	07da      	lsls	r2, r3, #31
 8005d68:	d437      	bmi.n	8005dda <_printf_float+0x386>
 8005d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d6c:	ebaa 0903 	sub.w	r9, sl, r3
 8005d70:	9b06      	ldr	r3, [sp, #24]
 8005d72:	ebaa 0303 	sub.w	r3, sl, r3
 8005d76:	4599      	cmp	r9, r3
 8005d78:	bfa8      	it	ge
 8005d7a:	4699      	movge	r9, r3
 8005d7c:	f1b9 0f00 	cmp.w	r9, #0
 8005d80:	dc33      	bgt.n	8005dea <_printf_float+0x396>
 8005d82:	f04f 0800 	mov.w	r8, #0
 8005d86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d8a:	f104 0b1a 	add.w	fp, r4, #26
 8005d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d90:	ebaa 0303 	sub.w	r3, sl, r3
 8005d94:	eba3 0309 	sub.w	r3, r3, r9
 8005d98:	4543      	cmp	r3, r8
 8005d9a:	f77f af79 	ble.w	8005c90 <_printf_float+0x23c>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	465a      	mov	r2, fp
 8005da2:	4631      	mov	r1, r6
 8005da4:	4628      	mov	r0, r5
 8005da6:	47b8      	blx	r7
 8005da8:	3001      	adds	r0, #1
 8005daa:	f43f aeae 	beq.w	8005b0a <_printf_float+0xb6>
 8005dae:	f108 0801 	add.w	r8, r8, #1
 8005db2:	e7ec      	b.n	8005d8e <_printf_float+0x33a>
 8005db4:	4642      	mov	r2, r8
 8005db6:	4631      	mov	r1, r6
 8005db8:	4628      	mov	r0, r5
 8005dba:	47b8      	blx	r7
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d1c2      	bne.n	8005d46 <_printf_float+0x2f2>
 8005dc0:	e6a3      	b.n	8005b0a <_printf_float+0xb6>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	9206      	str	r2, [sp, #24]
 8005dca:	47b8      	blx	r7
 8005dcc:	3001      	adds	r0, #1
 8005dce:	f43f ae9c 	beq.w	8005b0a <_printf_float+0xb6>
 8005dd2:	9a06      	ldr	r2, [sp, #24]
 8005dd4:	f10b 0b01 	add.w	fp, fp, #1
 8005dd8:	e7bb      	b.n	8005d52 <_printf_float+0x2fe>
 8005dda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dde:	4631      	mov	r1, r6
 8005de0:	4628      	mov	r0, r5
 8005de2:	47b8      	blx	r7
 8005de4:	3001      	adds	r0, #1
 8005de6:	d1c0      	bne.n	8005d6a <_printf_float+0x316>
 8005de8:	e68f      	b.n	8005b0a <_printf_float+0xb6>
 8005dea:	9a06      	ldr	r2, [sp, #24]
 8005dec:	464b      	mov	r3, r9
 8005dee:	4442      	add	r2, r8
 8005df0:	4631      	mov	r1, r6
 8005df2:	4628      	mov	r0, r5
 8005df4:	47b8      	blx	r7
 8005df6:	3001      	adds	r0, #1
 8005df8:	d1c3      	bne.n	8005d82 <_printf_float+0x32e>
 8005dfa:	e686      	b.n	8005b0a <_printf_float+0xb6>
 8005dfc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e00:	f1ba 0f01 	cmp.w	sl, #1
 8005e04:	dc01      	bgt.n	8005e0a <_printf_float+0x3b6>
 8005e06:	07db      	lsls	r3, r3, #31
 8005e08:	d536      	bpl.n	8005e78 <_printf_float+0x424>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	4631      	mov	r1, r6
 8005e10:	4628      	mov	r0, r5
 8005e12:	47b8      	blx	r7
 8005e14:	3001      	adds	r0, #1
 8005e16:	f43f ae78 	beq.w	8005b0a <_printf_float+0xb6>
 8005e1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4628      	mov	r0, r5
 8005e22:	47b8      	blx	r7
 8005e24:	3001      	adds	r0, #1
 8005e26:	f43f ae70 	beq.w	8005b0a <_printf_float+0xb6>
 8005e2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e2e:	2200      	movs	r2, #0
 8005e30:	2300      	movs	r3, #0
 8005e32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e36:	f7fa fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e3a:	b9c0      	cbnz	r0, 8005e6e <_printf_float+0x41a>
 8005e3c:	4653      	mov	r3, sl
 8005e3e:	f108 0201 	add.w	r2, r8, #1
 8005e42:	4631      	mov	r1, r6
 8005e44:	4628      	mov	r0, r5
 8005e46:	47b8      	blx	r7
 8005e48:	3001      	adds	r0, #1
 8005e4a:	d10c      	bne.n	8005e66 <_printf_float+0x412>
 8005e4c:	e65d      	b.n	8005b0a <_printf_float+0xb6>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	465a      	mov	r2, fp
 8005e52:	4631      	mov	r1, r6
 8005e54:	4628      	mov	r0, r5
 8005e56:	47b8      	blx	r7
 8005e58:	3001      	adds	r0, #1
 8005e5a:	f43f ae56 	beq.w	8005b0a <_printf_float+0xb6>
 8005e5e:	f108 0801 	add.w	r8, r8, #1
 8005e62:	45d0      	cmp	r8, sl
 8005e64:	dbf3      	blt.n	8005e4e <_printf_float+0x3fa>
 8005e66:	464b      	mov	r3, r9
 8005e68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005e6c:	e6df      	b.n	8005c2e <_printf_float+0x1da>
 8005e6e:	f04f 0800 	mov.w	r8, #0
 8005e72:	f104 0b1a 	add.w	fp, r4, #26
 8005e76:	e7f4      	b.n	8005e62 <_printf_float+0x40e>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	4642      	mov	r2, r8
 8005e7c:	e7e1      	b.n	8005e42 <_printf_float+0x3ee>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	464a      	mov	r2, r9
 8005e82:	4631      	mov	r1, r6
 8005e84:	4628      	mov	r0, r5
 8005e86:	47b8      	blx	r7
 8005e88:	3001      	adds	r0, #1
 8005e8a:	f43f ae3e 	beq.w	8005b0a <_printf_float+0xb6>
 8005e8e:	f108 0801 	add.w	r8, r8, #1
 8005e92:	68e3      	ldr	r3, [r4, #12]
 8005e94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e96:	1a5b      	subs	r3, r3, r1
 8005e98:	4543      	cmp	r3, r8
 8005e9a:	dcf0      	bgt.n	8005e7e <_printf_float+0x42a>
 8005e9c:	e6fc      	b.n	8005c98 <_printf_float+0x244>
 8005e9e:	f04f 0800 	mov.w	r8, #0
 8005ea2:	f104 0919 	add.w	r9, r4, #25
 8005ea6:	e7f4      	b.n	8005e92 <_printf_float+0x43e>

08005ea8 <_printf_common>:
 8005ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eac:	4616      	mov	r6, r2
 8005eae:	4698      	mov	r8, r3
 8005eb0:	688a      	ldr	r2, [r1, #8]
 8005eb2:	690b      	ldr	r3, [r1, #16]
 8005eb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	bfb8      	it	lt
 8005ebc:	4613      	movlt	r3, r2
 8005ebe:	6033      	str	r3, [r6, #0]
 8005ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ec4:	4607      	mov	r7, r0
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	b10a      	cbz	r2, 8005ece <_printf_common+0x26>
 8005eca:	3301      	adds	r3, #1
 8005ecc:	6033      	str	r3, [r6, #0]
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	0699      	lsls	r1, r3, #26
 8005ed2:	bf42      	ittt	mi
 8005ed4:	6833      	ldrmi	r3, [r6, #0]
 8005ed6:	3302      	addmi	r3, #2
 8005ed8:	6033      	strmi	r3, [r6, #0]
 8005eda:	6825      	ldr	r5, [r4, #0]
 8005edc:	f015 0506 	ands.w	r5, r5, #6
 8005ee0:	d106      	bne.n	8005ef0 <_printf_common+0x48>
 8005ee2:	f104 0a19 	add.w	sl, r4, #25
 8005ee6:	68e3      	ldr	r3, [r4, #12]
 8005ee8:	6832      	ldr	r2, [r6, #0]
 8005eea:	1a9b      	subs	r3, r3, r2
 8005eec:	42ab      	cmp	r3, r5
 8005eee:	dc26      	bgt.n	8005f3e <_printf_common+0x96>
 8005ef0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ef4:	6822      	ldr	r2, [r4, #0]
 8005ef6:	3b00      	subs	r3, #0
 8005ef8:	bf18      	it	ne
 8005efa:	2301      	movne	r3, #1
 8005efc:	0692      	lsls	r2, r2, #26
 8005efe:	d42b      	bmi.n	8005f58 <_printf_common+0xb0>
 8005f00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f04:	4641      	mov	r1, r8
 8005f06:	4638      	mov	r0, r7
 8005f08:	47c8      	blx	r9
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	d01e      	beq.n	8005f4c <_printf_common+0xa4>
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	6922      	ldr	r2, [r4, #16]
 8005f12:	f003 0306 	and.w	r3, r3, #6
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	bf02      	ittt	eq
 8005f1a:	68e5      	ldreq	r5, [r4, #12]
 8005f1c:	6833      	ldreq	r3, [r6, #0]
 8005f1e:	1aed      	subeq	r5, r5, r3
 8005f20:	68a3      	ldr	r3, [r4, #8]
 8005f22:	bf0c      	ite	eq
 8005f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f28:	2500      	movne	r5, #0
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	bfc4      	itt	gt
 8005f2e:	1a9b      	subgt	r3, r3, r2
 8005f30:	18ed      	addgt	r5, r5, r3
 8005f32:	2600      	movs	r6, #0
 8005f34:	341a      	adds	r4, #26
 8005f36:	42b5      	cmp	r5, r6
 8005f38:	d11a      	bne.n	8005f70 <_printf_common+0xc8>
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	e008      	b.n	8005f50 <_printf_common+0xa8>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	4652      	mov	r2, sl
 8005f42:	4641      	mov	r1, r8
 8005f44:	4638      	mov	r0, r7
 8005f46:	47c8      	blx	r9
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d103      	bne.n	8005f54 <_printf_common+0xac>
 8005f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f54:	3501      	adds	r5, #1
 8005f56:	e7c6      	b.n	8005ee6 <_printf_common+0x3e>
 8005f58:	18e1      	adds	r1, r4, r3
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	2030      	movs	r0, #48	@ 0x30
 8005f5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f62:	4422      	add	r2, r4
 8005f64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f6c:	3302      	adds	r3, #2
 8005f6e:	e7c7      	b.n	8005f00 <_printf_common+0x58>
 8005f70:	2301      	movs	r3, #1
 8005f72:	4622      	mov	r2, r4
 8005f74:	4641      	mov	r1, r8
 8005f76:	4638      	mov	r0, r7
 8005f78:	47c8      	blx	r9
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	d0e6      	beq.n	8005f4c <_printf_common+0xa4>
 8005f7e:	3601      	adds	r6, #1
 8005f80:	e7d9      	b.n	8005f36 <_printf_common+0x8e>
	...

08005f84 <_printf_i>:
 8005f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f88:	7e0f      	ldrb	r7, [r1, #24]
 8005f8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f8c:	2f78      	cmp	r7, #120	@ 0x78
 8005f8e:	4691      	mov	r9, r2
 8005f90:	4680      	mov	r8, r0
 8005f92:	460c      	mov	r4, r1
 8005f94:	469a      	mov	sl, r3
 8005f96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f9a:	d807      	bhi.n	8005fac <_printf_i+0x28>
 8005f9c:	2f62      	cmp	r7, #98	@ 0x62
 8005f9e:	d80a      	bhi.n	8005fb6 <_printf_i+0x32>
 8005fa0:	2f00      	cmp	r7, #0
 8005fa2:	f000 80d2 	beq.w	800614a <_printf_i+0x1c6>
 8005fa6:	2f58      	cmp	r7, #88	@ 0x58
 8005fa8:	f000 80b9 	beq.w	800611e <_printf_i+0x19a>
 8005fac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fb4:	e03a      	b.n	800602c <_printf_i+0xa8>
 8005fb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fba:	2b15      	cmp	r3, #21
 8005fbc:	d8f6      	bhi.n	8005fac <_printf_i+0x28>
 8005fbe:	a101      	add	r1, pc, #4	@ (adr r1, 8005fc4 <_printf_i+0x40>)
 8005fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fc4:	0800601d 	.word	0x0800601d
 8005fc8:	08006031 	.word	0x08006031
 8005fcc:	08005fad 	.word	0x08005fad
 8005fd0:	08005fad 	.word	0x08005fad
 8005fd4:	08005fad 	.word	0x08005fad
 8005fd8:	08005fad 	.word	0x08005fad
 8005fdc:	08006031 	.word	0x08006031
 8005fe0:	08005fad 	.word	0x08005fad
 8005fe4:	08005fad 	.word	0x08005fad
 8005fe8:	08005fad 	.word	0x08005fad
 8005fec:	08005fad 	.word	0x08005fad
 8005ff0:	08006131 	.word	0x08006131
 8005ff4:	0800605b 	.word	0x0800605b
 8005ff8:	080060eb 	.word	0x080060eb
 8005ffc:	08005fad 	.word	0x08005fad
 8006000:	08005fad 	.word	0x08005fad
 8006004:	08006153 	.word	0x08006153
 8006008:	08005fad 	.word	0x08005fad
 800600c:	0800605b 	.word	0x0800605b
 8006010:	08005fad 	.word	0x08005fad
 8006014:	08005fad 	.word	0x08005fad
 8006018:	080060f3 	.word	0x080060f3
 800601c:	6833      	ldr	r3, [r6, #0]
 800601e:	1d1a      	adds	r2, r3, #4
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6032      	str	r2, [r6, #0]
 8006024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006028:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800602c:	2301      	movs	r3, #1
 800602e:	e09d      	b.n	800616c <_printf_i+0x1e8>
 8006030:	6833      	ldr	r3, [r6, #0]
 8006032:	6820      	ldr	r0, [r4, #0]
 8006034:	1d19      	adds	r1, r3, #4
 8006036:	6031      	str	r1, [r6, #0]
 8006038:	0606      	lsls	r6, r0, #24
 800603a:	d501      	bpl.n	8006040 <_printf_i+0xbc>
 800603c:	681d      	ldr	r5, [r3, #0]
 800603e:	e003      	b.n	8006048 <_printf_i+0xc4>
 8006040:	0645      	lsls	r5, r0, #25
 8006042:	d5fb      	bpl.n	800603c <_printf_i+0xb8>
 8006044:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006048:	2d00      	cmp	r5, #0
 800604a:	da03      	bge.n	8006054 <_printf_i+0xd0>
 800604c:	232d      	movs	r3, #45	@ 0x2d
 800604e:	426d      	negs	r5, r5
 8006050:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006054:	4859      	ldr	r0, [pc, #356]	@ (80061bc <_printf_i+0x238>)
 8006056:	230a      	movs	r3, #10
 8006058:	e011      	b.n	800607e <_printf_i+0xfa>
 800605a:	6821      	ldr	r1, [r4, #0]
 800605c:	6833      	ldr	r3, [r6, #0]
 800605e:	0608      	lsls	r0, r1, #24
 8006060:	f853 5b04 	ldr.w	r5, [r3], #4
 8006064:	d402      	bmi.n	800606c <_printf_i+0xe8>
 8006066:	0649      	lsls	r1, r1, #25
 8006068:	bf48      	it	mi
 800606a:	b2ad      	uxthmi	r5, r5
 800606c:	2f6f      	cmp	r7, #111	@ 0x6f
 800606e:	4853      	ldr	r0, [pc, #332]	@ (80061bc <_printf_i+0x238>)
 8006070:	6033      	str	r3, [r6, #0]
 8006072:	bf14      	ite	ne
 8006074:	230a      	movne	r3, #10
 8006076:	2308      	moveq	r3, #8
 8006078:	2100      	movs	r1, #0
 800607a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800607e:	6866      	ldr	r6, [r4, #4]
 8006080:	60a6      	str	r6, [r4, #8]
 8006082:	2e00      	cmp	r6, #0
 8006084:	bfa2      	ittt	ge
 8006086:	6821      	ldrge	r1, [r4, #0]
 8006088:	f021 0104 	bicge.w	r1, r1, #4
 800608c:	6021      	strge	r1, [r4, #0]
 800608e:	b90d      	cbnz	r5, 8006094 <_printf_i+0x110>
 8006090:	2e00      	cmp	r6, #0
 8006092:	d04b      	beq.n	800612c <_printf_i+0x1a8>
 8006094:	4616      	mov	r6, r2
 8006096:	fbb5 f1f3 	udiv	r1, r5, r3
 800609a:	fb03 5711 	mls	r7, r3, r1, r5
 800609e:	5dc7      	ldrb	r7, [r0, r7]
 80060a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060a4:	462f      	mov	r7, r5
 80060a6:	42bb      	cmp	r3, r7
 80060a8:	460d      	mov	r5, r1
 80060aa:	d9f4      	bls.n	8006096 <_printf_i+0x112>
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	d10b      	bne.n	80060c8 <_printf_i+0x144>
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	07df      	lsls	r7, r3, #31
 80060b4:	d508      	bpl.n	80060c8 <_printf_i+0x144>
 80060b6:	6923      	ldr	r3, [r4, #16]
 80060b8:	6861      	ldr	r1, [r4, #4]
 80060ba:	4299      	cmp	r1, r3
 80060bc:	bfde      	ittt	le
 80060be:	2330      	movle	r3, #48	@ 0x30
 80060c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060c8:	1b92      	subs	r2, r2, r6
 80060ca:	6122      	str	r2, [r4, #16]
 80060cc:	f8cd a000 	str.w	sl, [sp]
 80060d0:	464b      	mov	r3, r9
 80060d2:	aa03      	add	r2, sp, #12
 80060d4:	4621      	mov	r1, r4
 80060d6:	4640      	mov	r0, r8
 80060d8:	f7ff fee6 	bl	8005ea8 <_printf_common>
 80060dc:	3001      	adds	r0, #1
 80060de:	d14a      	bne.n	8006176 <_printf_i+0x1f2>
 80060e0:	f04f 30ff 	mov.w	r0, #4294967295
 80060e4:	b004      	add	sp, #16
 80060e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	f043 0320 	orr.w	r3, r3, #32
 80060f0:	6023      	str	r3, [r4, #0]
 80060f2:	4833      	ldr	r0, [pc, #204]	@ (80061c0 <_printf_i+0x23c>)
 80060f4:	2778      	movs	r7, #120	@ 0x78
 80060f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	6831      	ldr	r1, [r6, #0]
 80060fe:	061f      	lsls	r7, r3, #24
 8006100:	f851 5b04 	ldr.w	r5, [r1], #4
 8006104:	d402      	bmi.n	800610c <_printf_i+0x188>
 8006106:	065f      	lsls	r7, r3, #25
 8006108:	bf48      	it	mi
 800610a:	b2ad      	uxthmi	r5, r5
 800610c:	6031      	str	r1, [r6, #0]
 800610e:	07d9      	lsls	r1, r3, #31
 8006110:	bf44      	itt	mi
 8006112:	f043 0320 	orrmi.w	r3, r3, #32
 8006116:	6023      	strmi	r3, [r4, #0]
 8006118:	b11d      	cbz	r5, 8006122 <_printf_i+0x19e>
 800611a:	2310      	movs	r3, #16
 800611c:	e7ac      	b.n	8006078 <_printf_i+0xf4>
 800611e:	4827      	ldr	r0, [pc, #156]	@ (80061bc <_printf_i+0x238>)
 8006120:	e7e9      	b.n	80060f6 <_printf_i+0x172>
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	f023 0320 	bic.w	r3, r3, #32
 8006128:	6023      	str	r3, [r4, #0]
 800612a:	e7f6      	b.n	800611a <_printf_i+0x196>
 800612c:	4616      	mov	r6, r2
 800612e:	e7bd      	b.n	80060ac <_printf_i+0x128>
 8006130:	6833      	ldr	r3, [r6, #0]
 8006132:	6825      	ldr	r5, [r4, #0]
 8006134:	6961      	ldr	r1, [r4, #20]
 8006136:	1d18      	adds	r0, r3, #4
 8006138:	6030      	str	r0, [r6, #0]
 800613a:	062e      	lsls	r6, r5, #24
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	d501      	bpl.n	8006144 <_printf_i+0x1c0>
 8006140:	6019      	str	r1, [r3, #0]
 8006142:	e002      	b.n	800614a <_printf_i+0x1c6>
 8006144:	0668      	lsls	r0, r5, #25
 8006146:	d5fb      	bpl.n	8006140 <_printf_i+0x1bc>
 8006148:	8019      	strh	r1, [r3, #0]
 800614a:	2300      	movs	r3, #0
 800614c:	6123      	str	r3, [r4, #16]
 800614e:	4616      	mov	r6, r2
 8006150:	e7bc      	b.n	80060cc <_printf_i+0x148>
 8006152:	6833      	ldr	r3, [r6, #0]
 8006154:	1d1a      	adds	r2, r3, #4
 8006156:	6032      	str	r2, [r6, #0]
 8006158:	681e      	ldr	r6, [r3, #0]
 800615a:	6862      	ldr	r2, [r4, #4]
 800615c:	2100      	movs	r1, #0
 800615e:	4630      	mov	r0, r6
 8006160:	f7fa f836 	bl	80001d0 <memchr>
 8006164:	b108      	cbz	r0, 800616a <_printf_i+0x1e6>
 8006166:	1b80      	subs	r0, r0, r6
 8006168:	6060      	str	r0, [r4, #4]
 800616a:	6863      	ldr	r3, [r4, #4]
 800616c:	6123      	str	r3, [r4, #16]
 800616e:	2300      	movs	r3, #0
 8006170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006174:	e7aa      	b.n	80060cc <_printf_i+0x148>
 8006176:	6923      	ldr	r3, [r4, #16]
 8006178:	4632      	mov	r2, r6
 800617a:	4649      	mov	r1, r9
 800617c:	4640      	mov	r0, r8
 800617e:	47d0      	blx	sl
 8006180:	3001      	adds	r0, #1
 8006182:	d0ad      	beq.n	80060e0 <_printf_i+0x15c>
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	079b      	lsls	r3, r3, #30
 8006188:	d413      	bmi.n	80061b2 <_printf_i+0x22e>
 800618a:	68e0      	ldr	r0, [r4, #12]
 800618c:	9b03      	ldr	r3, [sp, #12]
 800618e:	4298      	cmp	r0, r3
 8006190:	bfb8      	it	lt
 8006192:	4618      	movlt	r0, r3
 8006194:	e7a6      	b.n	80060e4 <_printf_i+0x160>
 8006196:	2301      	movs	r3, #1
 8006198:	4632      	mov	r2, r6
 800619a:	4649      	mov	r1, r9
 800619c:	4640      	mov	r0, r8
 800619e:	47d0      	blx	sl
 80061a0:	3001      	adds	r0, #1
 80061a2:	d09d      	beq.n	80060e0 <_printf_i+0x15c>
 80061a4:	3501      	adds	r5, #1
 80061a6:	68e3      	ldr	r3, [r4, #12]
 80061a8:	9903      	ldr	r1, [sp, #12]
 80061aa:	1a5b      	subs	r3, r3, r1
 80061ac:	42ab      	cmp	r3, r5
 80061ae:	dcf2      	bgt.n	8006196 <_printf_i+0x212>
 80061b0:	e7eb      	b.n	800618a <_printf_i+0x206>
 80061b2:	2500      	movs	r5, #0
 80061b4:	f104 0619 	add.w	r6, r4, #25
 80061b8:	e7f5      	b.n	80061a6 <_printf_i+0x222>
 80061ba:	bf00      	nop
 80061bc:	0800ab1c 	.word	0x0800ab1c
 80061c0:	0800ab2d 	.word	0x0800ab2d

080061c4 <_scanf_float>:
 80061c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c8:	b087      	sub	sp, #28
 80061ca:	4617      	mov	r7, r2
 80061cc:	9303      	str	r3, [sp, #12]
 80061ce:	688b      	ldr	r3, [r1, #8]
 80061d0:	1e5a      	subs	r2, r3, #1
 80061d2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80061d6:	bf81      	itttt	hi
 80061d8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80061dc:	eb03 0b05 	addhi.w	fp, r3, r5
 80061e0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80061e4:	608b      	strhi	r3, [r1, #8]
 80061e6:	680b      	ldr	r3, [r1, #0]
 80061e8:	460a      	mov	r2, r1
 80061ea:	f04f 0500 	mov.w	r5, #0
 80061ee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80061f2:	f842 3b1c 	str.w	r3, [r2], #28
 80061f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80061fa:	4680      	mov	r8, r0
 80061fc:	460c      	mov	r4, r1
 80061fe:	bf98      	it	ls
 8006200:	f04f 0b00 	movls.w	fp, #0
 8006204:	9201      	str	r2, [sp, #4]
 8006206:	4616      	mov	r6, r2
 8006208:	46aa      	mov	sl, r5
 800620a:	46a9      	mov	r9, r5
 800620c:	9502      	str	r5, [sp, #8]
 800620e:	68a2      	ldr	r2, [r4, #8]
 8006210:	b152      	cbz	r2, 8006228 <_scanf_float+0x64>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	2b4e      	cmp	r3, #78	@ 0x4e
 8006218:	d864      	bhi.n	80062e4 <_scanf_float+0x120>
 800621a:	2b40      	cmp	r3, #64	@ 0x40
 800621c:	d83c      	bhi.n	8006298 <_scanf_float+0xd4>
 800621e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006222:	b2c8      	uxtb	r0, r1
 8006224:	280e      	cmp	r0, #14
 8006226:	d93a      	bls.n	800629e <_scanf_float+0xda>
 8006228:	f1b9 0f00 	cmp.w	r9, #0
 800622c:	d003      	beq.n	8006236 <_scanf_float+0x72>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	f10a 3aff 	add.w	sl, sl, #4294967295
 800623a:	f1ba 0f01 	cmp.w	sl, #1
 800623e:	f200 8117 	bhi.w	8006470 <_scanf_float+0x2ac>
 8006242:	9b01      	ldr	r3, [sp, #4]
 8006244:	429e      	cmp	r6, r3
 8006246:	f200 8108 	bhi.w	800645a <_scanf_float+0x296>
 800624a:	2001      	movs	r0, #1
 800624c:	b007      	add	sp, #28
 800624e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006252:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006256:	2a0d      	cmp	r2, #13
 8006258:	d8e6      	bhi.n	8006228 <_scanf_float+0x64>
 800625a:	a101      	add	r1, pc, #4	@ (adr r1, 8006260 <_scanf_float+0x9c>)
 800625c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006260:	080063a7 	.word	0x080063a7
 8006264:	08006229 	.word	0x08006229
 8006268:	08006229 	.word	0x08006229
 800626c:	08006229 	.word	0x08006229
 8006270:	08006407 	.word	0x08006407
 8006274:	080063df 	.word	0x080063df
 8006278:	08006229 	.word	0x08006229
 800627c:	08006229 	.word	0x08006229
 8006280:	080063b5 	.word	0x080063b5
 8006284:	08006229 	.word	0x08006229
 8006288:	08006229 	.word	0x08006229
 800628c:	08006229 	.word	0x08006229
 8006290:	08006229 	.word	0x08006229
 8006294:	0800636d 	.word	0x0800636d
 8006298:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800629c:	e7db      	b.n	8006256 <_scanf_float+0x92>
 800629e:	290e      	cmp	r1, #14
 80062a0:	d8c2      	bhi.n	8006228 <_scanf_float+0x64>
 80062a2:	a001      	add	r0, pc, #4	@ (adr r0, 80062a8 <_scanf_float+0xe4>)
 80062a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80062a8:	0800635d 	.word	0x0800635d
 80062ac:	08006229 	.word	0x08006229
 80062b0:	0800635d 	.word	0x0800635d
 80062b4:	080063f3 	.word	0x080063f3
 80062b8:	08006229 	.word	0x08006229
 80062bc:	08006305 	.word	0x08006305
 80062c0:	08006343 	.word	0x08006343
 80062c4:	08006343 	.word	0x08006343
 80062c8:	08006343 	.word	0x08006343
 80062cc:	08006343 	.word	0x08006343
 80062d0:	08006343 	.word	0x08006343
 80062d4:	08006343 	.word	0x08006343
 80062d8:	08006343 	.word	0x08006343
 80062dc:	08006343 	.word	0x08006343
 80062e0:	08006343 	.word	0x08006343
 80062e4:	2b6e      	cmp	r3, #110	@ 0x6e
 80062e6:	d809      	bhi.n	80062fc <_scanf_float+0x138>
 80062e8:	2b60      	cmp	r3, #96	@ 0x60
 80062ea:	d8b2      	bhi.n	8006252 <_scanf_float+0x8e>
 80062ec:	2b54      	cmp	r3, #84	@ 0x54
 80062ee:	d07b      	beq.n	80063e8 <_scanf_float+0x224>
 80062f0:	2b59      	cmp	r3, #89	@ 0x59
 80062f2:	d199      	bne.n	8006228 <_scanf_float+0x64>
 80062f4:	2d07      	cmp	r5, #7
 80062f6:	d197      	bne.n	8006228 <_scanf_float+0x64>
 80062f8:	2508      	movs	r5, #8
 80062fa:	e02c      	b.n	8006356 <_scanf_float+0x192>
 80062fc:	2b74      	cmp	r3, #116	@ 0x74
 80062fe:	d073      	beq.n	80063e8 <_scanf_float+0x224>
 8006300:	2b79      	cmp	r3, #121	@ 0x79
 8006302:	e7f6      	b.n	80062f2 <_scanf_float+0x12e>
 8006304:	6821      	ldr	r1, [r4, #0]
 8006306:	05c8      	lsls	r0, r1, #23
 8006308:	d51b      	bpl.n	8006342 <_scanf_float+0x17e>
 800630a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800630e:	6021      	str	r1, [r4, #0]
 8006310:	f109 0901 	add.w	r9, r9, #1
 8006314:	f1bb 0f00 	cmp.w	fp, #0
 8006318:	d003      	beq.n	8006322 <_scanf_float+0x15e>
 800631a:	3201      	adds	r2, #1
 800631c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006320:	60a2      	str	r2, [r4, #8]
 8006322:	68a3      	ldr	r3, [r4, #8]
 8006324:	3b01      	subs	r3, #1
 8006326:	60a3      	str	r3, [r4, #8]
 8006328:	6923      	ldr	r3, [r4, #16]
 800632a:	3301      	adds	r3, #1
 800632c:	6123      	str	r3, [r4, #16]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3b01      	subs	r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	607b      	str	r3, [r7, #4]
 8006336:	f340 8087 	ble.w	8006448 <_scanf_float+0x284>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	3301      	adds	r3, #1
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	e765      	b.n	800620e <_scanf_float+0x4a>
 8006342:	eb1a 0105 	adds.w	r1, sl, r5
 8006346:	f47f af6f 	bne.w	8006228 <_scanf_float+0x64>
 800634a:	6822      	ldr	r2, [r4, #0]
 800634c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006350:	6022      	str	r2, [r4, #0]
 8006352:	460d      	mov	r5, r1
 8006354:	468a      	mov	sl, r1
 8006356:	f806 3b01 	strb.w	r3, [r6], #1
 800635a:	e7e2      	b.n	8006322 <_scanf_float+0x15e>
 800635c:	6822      	ldr	r2, [r4, #0]
 800635e:	0610      	lsls	r0, r2, #24
 8006360:	f57f af62 	bpl.w	8006228 <_scanf_float+0x64>
 8006364:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006368:	6022      	str	r2, [r4, #0]
 800636a:	e7f4      	b.n	8006356 <_scanf_float+0x192>
 800636c:	f1ba 0f00 	cmp.w	sl, #0
 8006370:	d10e      	bne.n	8006390 <_scanf_float+0x1cc>
 8006372:	f1b9 0f00 	cmp.w	r9, #0
 8006376:	d10e      	bne.n	8006396 <_scanf_float+0x1d2>
 8006378:	6822      	ldr	r2, [r4, #0]
 800637a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800637e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006382:	d108      	bne.n	8006396 <_scanf_float+0x1d2>
 8006384:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006388:	6022      	str	r2, [r4, #0]
 800638a:	f04f 0a01 	mov.w	sl, #1
 800638e:	e7e2      	b.n	8006356 <_scanf_float+0x192>
 8006390:	f1ba 0f02 	cmp.w	sl, #2
 8006394:	d055      	beq.n	8006442 <_scanf_float+0x27e>
 8006396:	2d01      	cmp	r5, #1
 8006398:	d002      	beq.n	80063a0 <_scanf_float+0x1dc>
 800639a:	2d04      	cmp	r5, #4
 800639c:	f47f af44 	bne.w	8006228 <_scanf_float+0x64>
 80063a0:	3501      	adds	r5, #1
 80063a2:	b2ed      	uxtb	r5, r5
 80063a4:	e7d7      	b.n	8006356 <_scanf_float+0x192>
 80063a6:	f1ba 0f01 	cmp.w	sl, #1
 80063aa:	f47f af3d 	bne.w	8006228 <_scanf_float+0x64>
 80063ae:	f04f 0a02 	mov.w	sl, #2
 80063b2:	e7d0      	b.n	8006356 <_scanf_float+0x192>
 80063b4:	b97d      	cbnz	r5, 80063d6 <_scanf_float+0x212>
 80063b6:	f1b9 0f00 	cmp.w	r9, #0
 80063ba:	f47f af38 	bne.w	800622e <_scanf_float+0x6a>
 80063be:	6822      	ldr	r2, [r4, #0]
 80063c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80063c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80063c8:	f040 8108 	bne.w	80065dc <_scanf_float+0x418>
 80063cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80063d0:	6022      	str	r2, [r4, #0]
 80063d2:	2501      	movs	r5, #1
 80063d4:	e7bf      	b.n	8006356 <_scanf_float+0x192>
 80063d6:	2d03      	cmp	r5, #3
 80063d8:	d0e2      	beq.n	80063a0 <_scanf_float+0x1dc>
 80063da:	2d05      	cmp	r5, #5
 80063dc:	e7de      	b.n	800639c <_scanf_float+0x1d8>
 80063de:	2d02      	cmp	r5, #2
 80063e0:	f47f af22 	bne.w	8006228 <_scanf_float+0x64>
 80063e4:	2503      	movs	r5, #3
 80063e6:	e7b6      	b.n	8006356 <_scanf_float+0x192>
 80063e8:	2d06      	cmp	r5, #6
 80063ea:	f47f af1d 	bne.w	8006228 <_scanf_float+0x64>
 80063ee:	2507      	movs	r5, #7
 80063f0:	e7b1      	b.n	8006356 <_scanf_float+0x192>
 80063f2:	6822      	ldr	r2, [r4, #0]
 80063f4:	0591      	lsls	r1, r2, #22
 80063f6:	f57f af17 	bpl.w	8006228 <_scanf_float+0x64>
 80063fa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80063fe:	6022      	str	r2, [r4, #0]
 8006400:	f8cd 9008 	str.w	r9, [sp, #8]
 8006404:	e7a7      	b.n	8006356 <_scanf_float+0x192>
 8006406:	6822      	ldr	r2, [r4, #0]
 8006408:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800640c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006410:	d006      	beq.n	8006420 <_scanf_float+0x25c>
 8006412:	0550      	lsls	r0, r2, #21
 8006414:	f57f af08 	bpl.w	8006228 <_scanf_float+0x64>
 8006418:	f1b9 0f00 	cmp.w	r9, #0
 800641c:	f000 80de 	beq.w	80065dc <_scanf_float+0x418>
 8006420:	0591      	lsls	r1, r2, #22
 8006422:	bf58      	it	pl
 8006424:	9902      	ldrpl	r1, [sp, #8]
 8006426:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800642a:	bf58      	it	pl
 800642c:	eba9 0101 	subpl.w	r1, r9, r1
 8006430:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006434:	bf58      	it	pl
 8006436:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800643a:	6022      	str	r2, [r4, #0]
 800643c:	f04f 0900 	mov.w	r9, #0
 8006440:	e789      	b.n	8006356 <_scanf_float+0x192>
 8006442:	f04f 0a03 	mov.w	sl, #3
 8006446:	e786      	b.n	8006356 <_scanf_float+0x192>
 8006448:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800644c:	4639      	mov	r1, r7
 800644e:	4640      	mov	r0, r8
 8006450:	4798      	blx	r3
 8006452:	2800      	cmp	r0, #0
 8006454:	f43f aedb 	beq.w	800620e <_scanf_float+0x4a>
 8006458:	e6e6      	b.n	8006228 <_scanf_float+0x64>
 800645a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800645e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006462:	463a      	mov	r2, r7
 8006464:	4640      	mov	r0, r8
 8006466:	4798      	blx	r3
 8006468:	6923      	ldr	r3, [r4, #16]
 800646a:	3b01      	subs	r3, #1
 800646c:	6123      	str	r3, [r4, #16]
 800646e:	e6e8      	b.n	8006242 <_scanf_float+0x7e>
 8006470:	1e6b      	subs	r3, r5, #1
 8006472:	2b06      	cmp	r3, #6
 8006474:	d824      	bhi.n	80064c0 <_scanf_float+0x2fc>
 8006476:	2d02      	cmp	r5, #2
 8006478:	d836      	bhi.n	80064e8 <_scanf_float+0x324>
 800647a:	9b01      	ldr	r3, [sp, #4]
 800647c:	429e      	cmp	r6, r3
 800647e:	f67f aee4 	bls.w	800624a <_scanf_float+0x86>
 8006482:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006486:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800648a:	463a      	mov	r2, r7
 800648c:	4640      	mov	r0, r8
 800648e:	4798      	blx	r3
 8006490:	6923      	ldr	r3, [r4, #16]
 8006492:	3b01      	subs	r3, #1
 8006494:	6123      	str	r3, [r4, #16]
 8006496:	e7f0      	b.n	800647a <_scanf_float+0x2b6>
 8006498:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800649c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80064a0:	463a      	mov	r2, r7
 80064a2:	4640      	mov	r0, r8
 80064a4:	4798      	blx	r3
 80064a6:	6923      	ldr	r3, [r4, #16]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	6123      	str	r3, [r4, #16]
 80064ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064b0:	fa5f fa8a 	uxtb.w	sl, sl
 80064b4:	f1ba 0f02 	cmp.w	sl, #2
 80064b8:	d1ee      	bne.n	8006498 <_scanf_float+0x2d4>
 80064ba:	3d03      	subs	r5, #3
 80064bc:	b2ed      	uxtb	r5, r5
 80064be:	1b76      	subs	r6, r6, r5
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	05da      	lsls	r2, r3, #23
 80064c4:	d530      	bpl.n	8006528 <_scanf_float+0x364>
 80064c6:	055b      	lsls	r3, r3, #21
 80064c8:	d511      	bpl.n	80064ee <_scanf_float+0x32a>
 80064ca:	9b01      	ldr	r3, [sp, #4]
 80064cc:	429e      	cmp	r6, r3
 80064ce:	f67f aebc 	bls.w	800624a <_scanf_float+0x86>
 80064d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80064d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80064da:	463a      	mov	r2, r7
 80064dc:	4640      	mov	r0, r8
 80064de:	4798      	blx	r3
 80064e0:	6923      	ldr	r3, [r4, #16]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	6123      	str	r3, [r4, #16]
 80064e6:	e7f0      	b.n	80064ca <_scanf_float+0x306>
 80064e8:	46aa      	mov	sl, r5
 80064ea:	46b3      	mov	fp, r6
 80064ec:	e7de      	b.n	80064ac <_scanf_float+0x2e8>
 80064ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80064f2:	6923      	ldr	r3, [r4, #16]
 80064f4:	2965      	cmp	r1, #101	@ 0x65
 80064f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80064fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80064fe:	6123      	str	r3, [r4, #16]
 8006500:	d00c      	beq.n	800651c <_scanf_float+0x358>
 8006502:	2945      	cmp	r1, #69	@ 0x45
 8006504:	d00a      	beq.n	800651c <_scanf_float+0x358>
 8006506:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800650a:	463a      	mov	r2, r7
 800650c:	4640      	mov	r0, r8
 800650e:	4798      	blx	r3
 8006510:	6923      	ldr	r3, [r4, #16]
 8006512:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006516:	3b01      	subs	r3, #1
 8006518:	1eb5      	subs	r5, r6, #2
 800651a:	6123      	str	r3, [r4, #16]
 800651c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006520:	463a      	mov	r2, r7
 8006522:	4640      	mov	r0, r8
 8006524:	4798      	blx	r3
 8006526:	462e      	mov	r6, r5
 8006528:	6822      	ldr	r2, [r4, #0]
 800652a:	f012 0210 	ands.w	r2, r2, #16
 800652e:	d001      	beq.n	8006534 <_scanf_float+0x370>
 8006530:	2000      	movs	r0, #0
 8006532:	e68b      	b.n	800624c <_scanf_float+0x88>
 8006534:	7032      	strb	r2, [r6, #0]
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800653c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006540:	d11c      	bne.n	800657c <_scanf_float+0x3b8>
 8006542:	9b02      	ldr	r3, [sp, #8]
 8006544:	454b      	cmp	r3, r9
 8006546:	eba3 0209 	sub.w	r2, r3, r9
 800654a:	d123      	bne.n	8006594 <_scanf_float+0x3d0>
 800654c:	9901      	ldr	r1, [sp, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	4640      	mov	r0, r8
 8006552:	f002 fd39 	bl	8008fc8 <_strtod_r>
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	6821      	ldr	r1, [r4, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f011 0f02 	tst.w	r1, #2
 8006560:	ec57 6b10 	vmov	r6, r7, d0
 8006564:	f103 0204 	add.w	r2, r3, #4
 8006568:	d01f      	beq.n	80065aa <_scanf_float+0x3e6>
 800656a:	9903      	ldr	r1, [sp, #12]
 800656c:	600a      	str	r2, [r1, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	e9c3 6700 	strd	r6, r7, [r3]
 8006574:	68e3      	ldr	r3, [r4, #12]
 8006576:	3301      	adds	r3, #1
 8006578:	60e3      	str	r3, [r4, #12]
 800657a:	e7d9      	b.n	8006530 <_scanf_float+0x36c>
 800657c:	9b04      	ldr	r3, [sp, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d0e4      	beq.n	800654c <_scanf_float+0x388>
 8006582:	9905      	ldr	r1, [sp, #20]
 8006584:	230a      	movs	r3, #10
 8006586:	3101      	adds	r1, #1
 8006588:	4640      	mov	r0, r8
 800658a:	f002 fd9d 	bl	80090c8 <_strtol_r>
 800658e:	9b04      	ldr	r3, [sp, #16]
 8006590:	9e05      	ldr	r6, [sp, #20]
 8006592:	1ac2      	subs	r2, r0, r3
 8006594:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006598:	429e      	cmp	r6, r3
 800659a:	bf28      	it	cs
 800659c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80065a0:	4910      	ldr	r1, [pc, #64]	@ (80065e4 <_scanf_float+0x420>)
 80065a2:	4630      	mov	r0, r6
 80065a4:	f000 f954 	bl	8006850 <siprintf>
 80065a8:	e7d0      	b.n	800654c <_scanf_float+0x388>
 80065aa:	f011 0f04 	tst.w	r1, #4
 80065ae:	9903      	ldr	r1, [sp, #12]
 80065b0:	600a      	str	r2, [r1, #0]
 80065b2:	d1dc      	bne.n	800656e <_scanf_float+0x3aa>
 80065b4:	681d      	ldr	r5, [r3, #0]
 80065b6:	4632      	mov	r2, r6
 80065b8:	463b      	mov	r3, r7
 80065ba:	4630      	mov	r0, r6
 80065bc:	4639      	mov	r1, r7
 80065be:	f7fa fab5 	bl	8000b2c <__aeabi_dcmpun>
 80065c2:	b128      	cbz	r0, 80065d0 <_scanf_float+0x40c>
 80065c4:	4808      	ldr	r0, [pc, #32]	@ (80065e8 <_scanf_float+0x424>)
 80065c6:	f000 faf9 	bl	8006bbc <nanf>
 80065ca:	ed85 0a00 	vstr	s0, [r5]
 80065ce:	e7d1      	b.n	8006574 <_scanf_float+0x3b0>
 80065d0:	4630      	mov	r0, r6
 80065d2:	4639      	mov	r1, r7
 80065d4:	f7fa fb08 	bl	8000be8 <__aeabi_d2f>
 80065d8:	6028      	str	r0, [r5, #0]
 80065da:	e7cb      	b.n	8006574 <_scanf_float+0x3b0>
 80065dc:	f04f 0900 	mov.w	r9, #0
 80065e0:	e629      	b.n	8006236 <_scanf_float+0x72>
 80065e2:	bf00      	nop
 80065e4:	0800ab3e 	.word	0x0800ab3e
 80065e8:	0800aef0 	.word	0x0800aef0

080065ec <std>:
 80065ec:	2300      	movs	r3, #0
 80065ee:	b510      	push	{r4, lr}
 80065f0:	4604      	mov	r4, r0
 80065f2:	e9c0 3300 	strd	r3, r3, [r0]
 80065f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065fa:	6083      	str	r3, [r0, #8]
 80065fc:	8181      	strh	r1, [r0, #12]
 80065fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006600:	81c2      	strh	r2, [r0, #14]
 8006602:	6183      	str	r3, [r0, #24]
 8006604:	4619      	mov	r1, r3
 8006606:	2208      	movs	r2, #8
 8006608:	305c      	adds	r0, #92	@ 0x5c
 800660a:	f000 fa45 	bl	8006a98 <memset>
 800660e:	4b0d      	ldr	r3, [pc, #52]	@ (8006644 <std+0x58>)
 8006610:	6263      	str	r3, [r4, #36]	@ 0x24
 8006612:	4b0d      	ldr	r3, [pc, #52]	@ (8006648 <std+0x5c>)
 8006614:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006616:	4b0d      	ldr	r3, [pc, #52]	@ (800664c <std+0x60>)
 8006618:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800661a:	4b0d      	ldr	r3, [pc, #52]	@ (8006650 <std+0x64>)
 800661c:	6323      	str	r3, [r4, #48]	@ 0x30
 800661e:	4b0d      	ldr	r3, [pc, #52]	@ (8006654 <std+0x68>)
 8006620:	6224      	str	r4, [r4, #32]
 8006622:	429c      	cmp	r4, r3
 8006624:	d006      	beq.n	8006634 <std+0x48>
 8006626:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800662a:	4294      	cmp	r4, r2
 800662c:	d002      	beq.n	8006634 <std+0x48>
 800662e:	33d0      	adds	r3, #208	@ 0xd0
 8006630:	429c      	cmp	r4, r3
 8006632:	d105      	bne.n	8006640 <std+0x54>
 8006634:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800663c:	f000 baba 	b.w	8006bb4 <__retarget_lock_init_recursive>
 8006640:	bd10      	pop	{r4, pc}
 8006642:	bf00      	nop
 8006644:	080068e5 	.word	0x080068e5
 8006648:	0800690b 	.word	0x0800690b
 800664c:	08006943 	.word	0x08006943
 8006650:	08006967 	.word	0x08006967
 8006654:	20000454 	.word	0x20000454

08006658 <stdio_exit_handler>:
 8006658:	4a02      	ldr	r2, [pc, #8]	@ (8006664 <stdio_exit_handler+0xc>)
 800665a:	4903      	ldr	r1, [pc, #12]	@ (8006668 <stdio_exit_handler+0x10>)
 800665c:	4803      	ldr	r0, [pc, #12]	@ (800666c <stdio_exit_handler+0x14>)
 800665e:	f000 b869 	b.w	8006734 <_fwalk_sglue>
 8006662:	bf00      	nop
 8006664:	20000024 	.word	0x20000024
 8006668:	08009d3d 	.word	0x08009d3d
 800666c:	20000034 	.word	0x20000034

08006670 <cleanup_stdio>:
 8006670:	6841      	ldr	r1, [r0, #4]
 8006672:	4b0c      	ldr	r3, [pc, #48]	@ (80066a4 <cleanup_stdio+0x34>)
 8006674:	4299      	cmp	r1, r3
 8006676:	b510      	push	{r4, lr}
 8006678:	4604      	mov	r4, r0
 800667a:	d001      	beq.n	8006680 <cleanup_stdio+0x10>
 800667c:	f003 fb5e 	bl	8009d3c <_fflush_r>
 8006680:	68a1      	ldr	r1, [r4, #8]
 8006682:	4b09      	ldr	r3, [pc, #36]	@ (80066a8 <cleanup_stdio+0x38>)
 8006684:	4299      	cmp	r1, r3
 8006686:	d002      	beq.n	800668e <cleanup_stdio+0x1e>
 8006688:	4620      	mov	r0, r4
 800668a:	f003 fb57 	bl	8009d3c <_fflush_r>
 800668e:	68e1      	ldr	r1, [r4, #12]
 8006690:	4b06      	ldr	r3, [pc, #24]	@ (80066ac <cleanup_stdio+0x3c>)
 8006692:	4299      	cmp	r1, r3
 8006694:	d004      	beq.n	80066a0 <cleanup_stdio+0x30>
 8006696:	4620      	mov	r0, r4
 8006698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800669c:	f003 bb4e 	b.w	8009d3c <_fflush_r>
 80066a0:	bd10      	pop	{r4, pc}
 80066a2:	bf00      	nop
 80066a4:	20000454 	.word	0x20000454
 80066a8:	200004bc 	.word	0x200004bc
 80066ac:	20000524 	.word	0x20000524

080066b0 <global_stdio_init.part.0>:
 80066b0:	b510      	push	{r4, lr}
 80066b2:	4b0b      	ldr	r3, [pc, #44]	@ (80066e0 <global_stdio_init.part.0+0x30>)
 80066b4:	4c0b      	ldr	r4, [pc, #44]	@ (80066e4 <global_stdio_init.part.0+0x34>)
 80066b6:	4a0c      	ldr	r2, [pc, #48]	@ (80066e8 <global_stdio_init.part.0+0x38>)
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	4620      	mov	r0, r4
 80066bc:	2200      	movs	r2, #0
 80066be:	2104      	movs	r1, #4
 80066c0:	f7ff ff94 	bl	80065ec <std>
 80066c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80066c8:	2201      	movs	r2, #1
 80066ca:	2109      	movs	r1, #9
 80066cc:	f7ff ff8e 	bl	80065ec <std>
 80066d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80066d4:	2202      	movs	r2, #2
 80066d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066da:	2112      	movs	r1, #18
 80066dc:	f7ff bf86 	b.w	80065ec <std>
 80066e0:	2000058c 	.word	0x2000058c
 80066e4:	20000454 	.word	0x20000454
 80066e8:	08006659 	.word	0x08006659

080066ec <__sfp_lock_acquire>:
 80066ec:	4801      	ldr	r0, [pc, #4]	@ (80066f4 <__sfp_lock_acquire+0x8>)
 80066ee:	f000 ba62 	b.w	8006bb6 <__retarget_lock_acquire_recursive>
 80066f2:	bf00      	nop
 80066f4:	20000595 	.word	0x20000595

080066f8 <__sfp_lock_release>:
 80066f8:	4801      	ldr	r0, [pc, #4]	@ (8006700 <__sfp_lock_release+0x8>)
 80066fa:	f000 ba5d 	b.w	8006bb8 <__retarget_lock_release_recursive>
 80066fe:	bf00      	nop
 8006700:	20000595 	.word	0x20000595

08006704 <__sinit>:
 8006704:	b510      	push	{r4, lr}
 8006706:	4604      	mov	r4, r0
 8006708:	f7ff fff0 	bl	80066ec <__sfp_lock_acquire>
 800670c:	6a23      	ldr	r3, [r4, #32]
 800670e:	b11b      	cbz	r3, 8006718 <__sinit+0x14>
 8006710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006714:	f7ff bff0 	b.w	80066f8 <__sfp_lock_release>
 8006718:	4b04      	ldr	r3, [pc, #16]	@ (800672c <__sinit+0x28>)
 800671a:	6223      	str	r3, [r4, #32]
 800671c:	4b04      	ldr	r3, [pc, #16]	@ (8006730 <__sinit+0x2c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1f5      	bne.n	8006710 <__sinit+0xc>
 8006724:	f7ff ffc4 	bl	80066b0 <global_stdio_init.part.0>
 8006728:	e7f2      	b.n	8006710 <__sinit+0xc>
 800672a:	bf00      	nop
 800672c:	08006671 	.word	0x08006671
 8006730:	2000058c 	.word	0x2000058c

08006734 <_fwalk_sglue>:
 8006734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006738:	4607      	mov	r7, r0
 800673a:	4688      	mov	r8, r1
 800673c:	4614      	mov	r4, r2
 800673e:	2600      	movs	r6, #0
 8006740:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006744:	f1b9 0901 	subs.w	r9, r9, #1
 8006748:	d505      	bpl.n	8006756 <_fwalk_sglue+0x22>
 800674a:	6824      	ldr	r4, [r4, #0]
 800674c:	2c00      	cmp	r4, #0
 800674e:	d1f7      	bne.n	8006740 <_fwalk_sglue+0xc>
 8006750:	4630      	mov	r0, r6
 8006752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006756:	89ab      	ldrh	r3, [r5, #12]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d907      	bls.n	800676c <_fwalk_sglue+0x38>
 800675c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006760:	3301      	adds	r3, #1
 8006762:	d003      	beq.n	800676c <_fwalk_sglue+0x38>
 8006764:	4629      	mov	r1, r5
 8006766:	4638      	mov	r0, r7
 8006768:	47c0      	blx	r8
 800676a:	4306      	orrs	r6, r0
 800676c:	3568      	adds	r5, #104	@ 0x68
 800676e:	e7e9      	b.n	8006744 <_fwalk_sglue+0x10>

08006770 <iprintf>:
 8006770:	b40f      	push	{r0, r1, r2, r3}
 8006772:	b507      	push	{r0, r1, r2, lr}
 8006774:	4906      	ldr	r1, [pc, #24]	@ (8006790 <iprintf+0x20>)
 8006776:	ab04      	add	r3, sp, #16
 8006778:	6808      	ldr	r0, [r1, #0]
 800677a:	f853 2b04 	ldr.w	r2, [r3], #4
 800677e:	6881      	ldr	r1, [r0, #8]
 8006780:	9301      	str	r3, [sp, #4]
 8006782:	f002 fff1 	bl	8009768 <_vfiprintf_r>
 8006786:	b003      	add	sp, #12
 8006788:	f85d eb04 	ldr.w	lr, [sp], #4
 800678c:	b004      	add	sp, #16
 800678e:	4770      	bx	lr
 8006790:	20000030 	.word	0x20000030

08006794 <_puts_r>:
 8006794:	6a03      	ldr	r3, [r0, #32]
 8006796:	b570      	push	{r4, r5, r6, lr}
 8006798:	6884      	ldr	r4, [r0, #8]
 800679a:	4605      	mov	r5, r0
 800679c:	460e      	mov	r6, r1
 800679e:	b90b      	cbnz	r3, 80067a4 <_puts_r+0x10>
 80067a0:	f7ff ffb0 	bl	8006704 <__sinit>
 80067a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067a6:	07db      	lsls	r3, r3, #31
 80067a8:	d405      	bmi.n	80067b6 <_puts_r+0x22>
 80067aa:	89a3      	ldrh	r3, [r4, #12]
 80067ac:	0598      	lsls	r0, r3, #22
 80067ae:	d402      	bmi.n	80067b6 <_puts_r+0x22>
 80067b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067b2:	f000 fa00 	bl	8006bb6 <__retarget_lock_acquire_recursive>
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	0719      	lsls	r1, r3, #28
 80067ba:	d502      	bpl.n	80067c2 <_puts_r+0x2e>
 80067bc:	6923      	ldr	r3, [r4, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d135      	bne.n	800682e <_puts_r+0x9a>
 80067c2:	4621      	mov	r1, r4
 80067c4:	4628      	mov	r0, r5
 80067c6:	f000 f911 	bl	80069ec <__swsetup_r>
 80067ca:	b380      	cbz	r0, 800682e <_puts_r+0x9a>
 80067cc:	f04f 35ff 	mov.w	r5, #4294967295
 80067d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067d2:	07da      	lsls	r2, r3, #31
 80067d4:	d405      	bmi.n	80067e2 <_puts_r+0x4e>
 80067d6:	89a3      	ldrh	r3, [r4, #12]
 80067d8:	059b      	lsls	r3, r3, #22
 80067da:	d402      	bmi.n	80067e2 <_puts_r+0x4e>
 80067dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067de:	f000 f9eb 	bl	8006bb8 <__retarget_lock_release_recursive>
 80067e2:	4628      	mov	r0, r5
 80067e4:	bd70      	pop	{r4, r5, r6, pc}
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	da04      	bge.n	80067f4 <_puts_r+0x60>
 80067ea:	69a2      	ldr	r2, [r4, #24]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	dc17      	bgt.n	8006820 <_puts_r+0x8c>
 80067f0:	290a      	cmp	r1, #10
 80067f2:	d015      	beq.n	8006820 <_puts_r+0x8c>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	6022      	str	r2, [r4, #0]
 80067fa:	7019      	strb	r1, [r3, #0]
 80067fc:	68a3      	ldr	r3, [r4, #8]
 80067fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006802:	3b01      	subs	r3, #1
 8006804:	60a3      	str	r3, [r4, #8]
 8006806:	2900      	cmp	r1, #0
 8006808:	d1ed      	bne.n	80067e6 <_puts_r+0x52>
 800680a:	2b00      	cmp	r3, #0
 800680c:	da11      	bge.n	8006832 <_puts_r+0x9e>
 800680e:	4622      	mov	r2, r4
 8006810:	210a      	movs	r1, #10
 8006812:	4628      	mov	r0, r5
 8006814:	f000 f8ab 	bl	800696e <__swbuf_r>
 8006818:	3001      	adds	r0, #1
 800681a:	d0d7      	beq.n	80067cc <_puts_r+0x38>
 800681c:	250a      	movs	r5, #10
 800681e:	e7d7      	b.n	80067d0 <_puts_r+0x3c>
 8006820:	4622      	mov	r2, r4
 8006822:	4628      	mov	r0, r5
 8006824:	f000 f8a3 	bl	800696e <__swbuf_r>
 8006828:	3001      	adds	r0, #1
 800682a:	d1e7      	bne.n	80067fc <_puts_r+0x68>
 800682c:	e7ce      	b.n	80067cc <_puts_r+0x38>
 800682e:	3e01      	subs	r6, #1
 8006830:	e7e4      	b.n	80067fc <_puts_r+0x68>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	6022      	str	r2, [r4, #0]
 8006838:	220a      	movs	r2, #10
 800683a:	701a      	strb	r2, [r3, #0]
 800683c:	e7ee      	b.n	800681c <_puts_r+0x88>
	...

08006840 <puts>:
 8006840:	4b02      	ldr	r3, [pc, #8]	@ (800684c <puts+0xc>)
 8006842:	4601      	mov	r1, r0
 8006844:	6818      	ldr	r0, [r3, #0]
 8006846:	f7ff bfa5 	b.w	8006794 <_puts_r>
 800684a:	bf00      	nop
 800684c:	20000030 	.word	0x20000030

08006850 <siprintf>:
 8006850:	b40e      	push	{r1, r2, r3}
 8006852:	b500      	push	{lr}
 8006854:	b09c      	sub	sp, #112	@ 0x70
 8006856:	ab1d      	add	r3, sp, #116	@ 0x74
 8006858:	9002      	str	r0, [sp, #8]
 800685a:	9006      	str	r0, [sp, #24]
 800685c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006860:	4809      	ldr	r0, [pc, #36]	@ (8006888 <siprintf+0x38>)
 8006862:	9107      	str	r1, [sp, #28]
 8006864:	9104      	str	r1, [sp, #16]
 8006866:	4909      	ldr	r1, [pc, #36]	@ (800688c <siprintf+0x3c>)
 8006868:	f853 2b04 	ldr.w	r2, [r3], #4
 800686c:	9105      	str	r1, [sp, #20]
 800686e:	6800      	ldr	r0, [r0, #0]
 8006870:	9301      	str	r3, [sp, #4]
 8006872:	a902      	add	r1, sp, #8
 8006874:	f002 fc86 	bl	8009184 <_svfiprintf_r>
 8006878:	9b02      	ldr	r3, [sp, #8]
 800687a:	2200      	movs	r2, #0
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	b01c      	add	sp, #112	@ 0x70
 8006880:	f85d eb04 	ldr.w	lr, [sp], #4
 8006884:	b003      	add	sp, #12
 8006886:	4770      	bx	lr
 8006888:	20000030 	.word	0x20000030
 800688c:	ffff0208 	.word	0xffff0208

08006890 <siscanf>:
 8006890:	b40e      	push	{r1, r2, r3}
 8006892:	b530      	push	{r4, r5, lr}
 8006894:	b09c      	sub	sp, #112	@ 0x70
 8006896:	ac1f      	add	r4, sp, #124	@ 0x7c
 8006898:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800689c:	f854 5b04 	ldr.w	r5, [r4], #4
 80068a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80068a4:	9002      	str	r0, [sp, #8]
 80068a6:	9006      	str	r0, [sp, #24]
 80068a8:	f7f9 fce2 	bl	8000270 <strlen>
 80068ac:	4b0b      	ldr	r3, [pc, #44]	@ (80068dc <siscanf+0x4c>)
 80068ae:	9003      	str	r0, [sp, #12]
 80068b0:	9007      	str	r0, [sp, #28]
 80068b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068b4:	480a      	ldr	r0, [pc, #40]	@ (80068e0 <siscanf+0x50>)
 80068b6:	9401      	str	r4, [sp, #4]
 80068b8:	2300      	movs	r3, #0
 80068ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80068bc:	9314      	str	r3, [sp, #80]	@ 0x50
 80068be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80068c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80068c6:	462a      	mov	r2, r5
 80068c8:	4623      	mov	r3, r4
 80068ca:	a902      	add	r1, sp, #8
 80068cc:	6800      	ldr	r0, [r0, #0]
 80068ce:	f002 fdad 	bl	800942c <__ssvfiscanf_r>
 80068d2:	b01c      	add	sp, #112	@ 0x70
 80068d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068d8:	b003      	add	sp, #12
 80068da:	4770      	bx	lr
 80068dc:	08006907 	.word	0x08006907
 80068e0:	20000030 	.word	0x20000030

080068e4 <__sread>:
 80068e4:	b510      	push	{r4, lr}
 80068e6:	460c      	mov	r4, r1
 80068e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ec:	f000 f914 	bl	8006b18 <_read_r>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	bfab      	itete	ge
 80068f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068f6:	89a3      	ldrhlt	r3, [r4, #12]
 80068f8:	181b      	addge	r3, r3, r0
 80068fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068fe:	bfac      	ite	ge
 8006900:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006902:	81a3      	strhlt	r3, [r4, #12]
 8006904:	bd10      	pop	{r4, pc}

08006906 <__seofread>:
 8006906:	2000      	movs	r0, #0
 8006908:	4770      	bx	lr

0800690a <__swrite>:
 800690a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800690e:	461f      	mov	r7, r3
 8006910:	898b      	ldrh	r3, [r1, #12]
 8006912:	05db      	lsls	r3, r3, #23
 8006914:	4605      	mov	r5, r0
 8006916:	460c      	mov	r4, r1
 8006918:	4616      	mov	r6, r2
 800691a:	d505      	bpl.n	8006928 <__swrite+0x1e>
 800691c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006920:	2302      	movs	r3, #2
 8006922:	2200      	movs	r2, #0
 8006924:	f000 f8e6 	bl	8006af4 <_lseek_r>
 8006928:	89a3      	ldrh	r3, [r4, #12]
 800692a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800692e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006932:	81a3      	strh	r3, [r4, #12]
 8006934:	4632      	mov	r2, r6
 8006936:	463b      	mov	r3, r7
 8006938:	4628      	mov	r0, r5
 800693a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800693e:	f000 b8fd 	b.w	8006b3c <_write_r>

08006942 <__sseek>:
 8006942:	b510      	push	{r4, lr}
 8006944:	460c      	mov	r4, r1
 8006946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800694a:	f000 f8d3 	bl	8006af4 <_lseek_r>
 800694e:	1c43      	adds	r3, r0, #1
 8006950:	89a3      	ldrh	r3, [r4, #12]
 8006952:	bf15      	itete	ne
 8006954:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006956:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800695a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800695e:	81a3      	strheq	r3, [r4, #12]
 8006960:	bf18      	it	ne
 8006962:	81a3      	strhne	r3, [r4, #12]
 8006964:	bd10      	pop	{r4, pc}

08006966 <__sclose>:
 8006966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800696a:	f000 b8b3 	b.w	8006ad4 <_close_r>

0800696e <__swbuf_r>:
 800696e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006970:	460e      	mov	r6, r1
 8006972:	4614      	mov	r4, r2
 8006974:	4605      	mov	r5, r0
 8006976:	b118      	cbz	r0, 8006980 <__swbuf_r+0x12>
 8006978:	6a03      	ldr	r3, [r0, #32]
 800697a:	b90b      	cbnz	r3, 8006980 <__swbuf_r+0x12>
 800697c:	f7ff fec2 	bl	8006704 <__sinit>
 8006980:	69a3      	ldr	r3, [r4, #24]
 8006982:	60a3      	str	r3, [r4, #8]
 8006984:	89a3      	ldrh	r3, [r4, #12]
 8006986:	071a      	lsls	r2, r3, #28
 8006988:	d501      	bpl.n	800698e <__swbuf_r+0x20>
 800698a:	6923      	ldr	r3, [r4, #16]
 800698c:	b943      	cbnz	r3, 80069a0 <__swbuf_r+0x32>
 800698e:	4621      	mov	r1, r4
 8006990:	4628      	mov	r0, r5
 8006992:	f000 f82b 	bl	80069ec <__swsetup_r>
 8006996:	b118      	cbz	r0, 80069a0 <__swbuf_r+0x32>
 8006998:	f04f 37ff 	mov.w	r7, #4294967295
 800699c:	4638      	mov	r0, r7
 800699e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	6922      	ldr	r2, [r4, #16]
 80069a4:	1a98      	subs	r0, r3, r2
 80069a6:	6963      	ldr	r3, [r4, #20]
 80069a8:	b2f6      	uxtb	r6, r6
 80069aa:	4283      	cmp	r3, r0
 80069ac:	4637      	mov	r7, r6
 80069ae:	dc05      	bgt.n	80069bc <__swbuf_r+0x4e>
 80069b0:	4621      	mov	r1, r4
 80069b2:	4628      	mov	r0, r5
 80069b4:	f003 f9c2 	bl	8009d3c <_fflush_r>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d1ed      	bne.n	8006998 <__swbuf_r+0x2a>
 80069bc:	68a3      	ldr	r3, [r4, #8]
 80069be:	3b01      	subs	r3, #1
 80069c0:	60a3      	str	r3, [r4, #8]
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	1c5a      	adds	r2, r3, #1
 80069c6:	6022      	str	r2, [r4, #0]
 80069c8:	701e      	strb	r6, [r3, #0]
 80069ca:	6962      	ldr	r2, [r4, #20]
 80069cc:	1c43      	adds	r3, r0, #1
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d004      	beq.n	80069dc <__swbuf_r+0x6e>
 80069d2:	89a3      	ldrh	r3, [r4, #12]
 80069d4:	07db      	lsls	r3, r3, #31
 80069d6:	d5e1      	bpl.n	800699c <__swbuf_r+0x2e>
 80069d8:	2e0a      	cmp	r6, #10
 80069da:	d1df      	bne.n	800699c <__swbuf_r+0x2e>
 80069dc:	4621      	mov	r1, r4
 80069de:	4628      	mov	r0, r5
 80069e0:	f003 f9ac 	bl	8009d3c <_fflush_r>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	d0d9      	beq.n	800699c <__swbuf_r+0x2e>
 80069e8:	e7d6      	b.n	8006998 <__swbuf_r+0x2a>
	...

080069ec <__swsetup_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	4b29      	ldr	r3, [pc, #164]	@ (8006a94 <__swsetup_r+0xa8>)
 80069f0:	4605      	mov	r5, r0
 80069f2:	6818      	ldr	r0, [r3, #0]
 80069f4:	460c      	mov	r4, r1
 80069f6:	b118      	cbz	r0, 8006a00 <__swsetup_r+0x14>
 80069f8:	6a03      	ldr	r3, [r0, #32]
 80069fa:	b90b      	cbnz	r3, 8006a00 <__swsetup_r+0x14>
 80069fc:	f7ff fe82 	bl	8006704 <__sinit>
 8006a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a04:	0719      	lsls	r1, r3, #28
 8006a06:	d422      	bmi.n	8006a4e <__swsetup_r+0x62>
 8006a08:	06da      	lsls	r2, r3, #27
 8006a0a:	d407      	bmi.n	8006a1c <__swsetup_r+0x30>
 8006a0c:	2209      	movs	r2, #9
 8006a0e:	602a      	str	r2, [r5, #0]
 8006a10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a14:	81a3      	strh	r3, [r4, #12]
 8006a16:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1a:	e033      	b.n	8006a84 <__swsetup_r+0x98>
 8006a1c:	0758      	lsls	r0, r3, #29
 8006a1e:	d512      	bpl.n	8006a46 <__swsetup_r+0x5a>
 8006a20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a22:	b141      	cbz	r1, 8006a36 <__swsetup_r+0x4a>
 8006a24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a28:	4299      	cmp	r1, r3
 8006a2a:	d002      	beq.n	8006a32 <__swsetup_r+0x46>
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	f000 ff17 	bl	8007860 <_free_r>
 8006a32:	2300      	movs	r3, #0
 8006a34:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a36:	89a3      	ldrh	r3, [r4, #12]
 8006a38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a3c:	81a3      	strh	r3, [r4, #12]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	6063      	str	r3, [r4, #4]
 8006a42:	6923      	ldr	r3, [r4, #16]
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	89a3      	ldrh	r3, [r4, #12]
 8006a48:	f043 0308 	orr.w	r3, r3, #8
 8006a4c:	81a3      	strh	r3, [r4, #12]
 8006a4e:	6923      	ldr	r3, [r4, #16]
 8006a50:	b94b      	cbnz	r3, 8006a66 <__swsetup_r+0x7a>
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a5c:	d003      	beq.n	8006a66 <__swsetup_r+0x7a>
 8006a5e:	4621      	mov	r1, r4
 8006a60:	4628      	mov	r0, r5
 8006a62:	f003 f9b9 	bl	8009dd8 <__smakebuf_r>
 8006a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a6a:	f013 0201 	ands.w	r2, r3, #1
 8006a6e:	d00a      	beq.n	8006a86 <__swsetup_r+0x9a>
 8006a70:	2200      	movs	r2, #0
 8006a72:	60a2      	str	r2, [r4, #8]
 8006a74:	6962      	ldr	r2, [r4, #20]
 8006a76:	4252      	negs	r2, r2
 8006a78:	61a2      	str	r2, [r4, #24]
 8006a7a:	6922      	ldr	r2, [r4, #16]
 8006a7c:	b942      	cbnz	r2, 8006a90 <__swsetup_r+0xa4>
 8006a7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a82:	d1c5      	bne.n	8006a10 <__swsetup_r+0x24>
 8006a84:	bd38      	pop	{r3, r4, r5, pc}
 8006a86:	0799      	lsls	r1, r3, #30
 8006a88:	bf58      	it	pl
 8006a8a:	6962      	ldrpl	r2, [r4, #20]
 8006a8c:	60a2      	str	r2, [r4, #8]
 8006a8e:	e7f4      	b.n	8006a7a <__swsetup_r+0x8e>
 8006a90:	2000      	movs	r0, #0
 8006a92:	e7f7      	b.n	8006a84 <__swsetup_r+0x98>
 8006a94:	20000030 	.word	0x20000030

08006a98 <memset>:
 8006a98:	4402      	add	r2, r0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d100      	bne.n	8006aa2 <memset+0xa>
 8006aa0:	4770      	bx	lr
 8006aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8006aa6:	e7f9      	b.n	8006a9c <memset+0x4>

08006aa8 <strncmp>:
 8006aa8:	b510      	push	{r4, lr}
 8006aaa:	b16a      	cbz	r2, 8006ac8 <strncmp+0x20>
 8006aac:	3901      	subs	r1, #1
 8006aae:	1884      	adds	r4, r0, r2
 8006ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ab4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d103      	bne.n	8006ac4 <strncmp+0x1c>
 8006abc:	42a0      	cmp	r0, r4
 8006abe:	d001      	beq.n	8006ac4 <strncmp+0x1c>
 8006ac0:	2a00      	cmp	r2, #0
 8006ac2:	d1f5      	bne.n	8006ab0 <strncmp+0x8>
 8006ac4:	1ad0      	subs	r0, r2, r3
 8006ac6:	bd10      	pop	{r4, pc}
 8006ac8:	4610      	mov	r0, r2
 8006aca:	e7fc      	b.n	8006ac6 <strncmp+0x1e>

08006acc <_localeconv_r>:
 8006acc:	4800      	ldr	r0, [pc, #0]	@ (8006ad0 <_localeconv_r+0x4>)
 8006ace:	4770      	bx	lr
 8006ad0:	20000170 	.word	0x20000170

08006ad4 <_close_r>:
 8006ad4:	b538      	push	{r3, r4, r5, lr}
 8006ad6:	4d06      	ldr	r5, [pc, #24]	@ (8006af0 <_close_r+0x1c>)
 8006ad8:	2300      	movs	r3, #0
 8006ada:	4604      	mov	r4, r0
 8006adc:	4608      	mov	r0, r1
 8006ade:	602b      	str	r3, [r5, #0]
 8006ae0:	f7fb f9ee 	bl	8001ec0 <_close>
 8006ae4:	1c43      	adds	r3, r0, #1
 8006ae6:	d102      	bne.n	8006aee <_close_r+0x1a>
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	b103      	cbz	r3, 8006aee <_close_r+0x1a>
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	bd38      	pop	{r3, r4, r5, pc}
 8006af0:	20000590 	.word	0x20000590

08006af4 <_lseek_r>:
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	4d07      	ldr	r5, [pc, #28]	@ (8006b14 <_lseek_r+0x20>)
 8006af8:	4604      	mov	r4, r0
 8006afa:	4608      	mov	r0, r1
 8006afc:	4611      	mov	r1, r2
 8006afe:	2200      	movs	r2, #0
 8006b00:	602a      	str	r2, [r5, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	f7fb fa03 	bl	8001f0e <_lseek>
 8006b08:	1c43      	adds	r3, r0, #1
 8006b0a:	d102      	bne.n	8006b12 <_lseek_r+0x1e>
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	b103      	cbz	r3, 8006b12 <_lseek_r+0x1e>
 8006b10:	6023      	str	r3, [r4, #0]
 8006b12:	bd38      	pop	{r3, r4, r5, pc}
 8006b14:	20000590 	.word	0x20000590

08006b18 <_read_r>:
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	4d07      	ldr	r5, [pc, #28]	@ (8006b38 <_read_r+0x20>)
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	4608      	mov	r0, r1
 8006b20:	4611      	mov	r1, r2
 8006b22:	2200      	movs	r2, #0
 8006b24:	602a      	str	r2, [r5, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	f7fb f9ad 	bl	8001e86 <_read>
 8006b2c:	1c43      	adds	r3, r0, #1
 8006b2e:	d102      	bne.n	8006b36 <_read_r+0x1e>
 8006b30:	682b      	ldr	r3, [r5, #0]
 8006b32:	b103      	cbz	r3, 8006b36 <_read_r+0x1e>
 8006b34:	6023      	str	r3, [r4, #0]
 8006b36:	bd38      	pop	{r3, r4, r5, pc}
 8006b38:	20000590 	.word	0x20000590

08006b3c <_write_r>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	4d07      	ldr	r5, [pc, #28]	@ (8006b5c <_write_r+0x20>)
 8006b40:	4604      	mov	r4, r0
 8006b42:	4608      	mov	r0, r1
 8006b44:	4611      	mov	r1, r2
 8006b46:	2200      	movs	r2, #0
 8006b48:	602a      	str	r2, [r5, #0]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	f7fa fbf8 	bl	8001340 <_write>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d102      	bne.n	8006b5a <_write_r+0x1e>
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	b103      	cbz	r3, 8006b5a <_write_r+0x1e>
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	20000590 	.word	0x20000590

08006b60 <__errno>:
 8006b60:	4b01      	ldr	r3, [pc, #4]	@ (8006b68 <__errno+0x8>)
 8006b62:	6818      	ldr	r0, [r3, #0]
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20000030 	.word	0x20000030

08006b6c <__libc_init_array>:
 8006b6c:	b570      	push	{r4, r5, r6, lr}
 8006b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8006ba4 <__libc_init_array+0x38>)
 8006b70:	4c0d      	ldr	r4, [pc, #52]	@ (8006ba8 <__libc_init_array+0x3c>)
 8006b72:	1b64      	subs	r4, r4, r5
 8006b74:	10a4      	asrs	r4, r4, #2
 8006b76:	2600      	movs	r6, #0
 8006b78:	42a6      	cmp	r6, r4
 8006b7a:	d109      	bne.n	8006b90 <__libc_init_array+0x24>
 8006b7c:	4d0b      	ldr	r5, [pc, #44]	@ (8006bac <__libc_init_array+0x40>)
 8006b7e:	4c0c      	ldr	r4, [pc, #48]	@ (8006bb0 <__libc_init_array+0x44>)
 8006b80:	f003 fece 	bl	800a920 <_init>
 8006b84:	1b64      	subs	r4, r4, r5
 8006b86:	10a4      	asrs	r4, r4, #2
 8006b88:	2600      	movs	r6, #0
 8006b8a:	42a6      	cmp	r6, r4
 8006b8c:	d105      	bne.n	8006b9a <__libc_init_array+0x2e>
 8006b8e:	bd70      	pop	{r4, r5, r6, pc}
 8006b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b94:	4798      	blx	r3
 8006b96:	3601      	adds	r6, #1
 8006b98:	e7ee      	b.n	8006b78 <__libc_init_array+0xc>
 8006b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b9e:	4798      	blx	r3
 8006ba0:	3601      	adds	r6, #1
 8006ba2:	e7f2      	b.n	8006b8a <__libc_init_array+0x1e>
 8006ba4:	0800af5c 	.word	0x0800af5c
 8006ba8:	0800af5c 	.word	0x0800af5c
 8006bac:	0800af5c 	.word	0x0800af5c
 8006bb0:	0800af60 	.word	0x0800af60

08006bb4 <__retarget_lock_init_recursive>:
 8006bb4:	4770      	bx	lr

08006bb6 <__retarget_lock_acquire_recursive>:
 8006bb6:	4770      	bx	lr

08006bb8 <__retarget_lock_release_recursive>:
 8006bb8:	4770      	bx	lr
	...

08006bbc <nanf>:
 8006bbc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006bc4 <nanf+0x8>
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	7fc00000 	.word	0x7fc00000

08006bc8 <quorem>:
 8006bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bcc:	6903      	ldr	r3, [r0, #16]
 8006bce:	690c      	ldr	r4, [r1, #16]
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	4607      	mov	r7, r0
 8006bd4:	db7e      	blt.n	8006cd4 <quorem+0x10c>
 8006bd6:	3c01      	subs	r4, #1
 8006bd8:	f101 0814 	add.w	r8, r1, #20
 8006bdc:	00a3      	lsls	r3, r4, #2
 8006bde:	f100 0514 	add.w	r5, r0, #20
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006be8:	9301      	str	r3, [sp, #4]
 8006bea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006bee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006bfa:	fbb2 f6f3 	udiv	r6, r2, r3
 8006bfe:	d32e      	bcc.n	8006c5e <quorem+0x96>
 8006c00:	f04f 0a00 	mov.w	sl, #0
 8006c04:	46c4      	mov	ip, r8
 8006c06:	46ae      	mov	lr, r5
 8006c08:	46d3      	mov	fp, sl
 8006c0a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c0e:	b298      	uxth	r0, r3
 8006c10:	fb06 a000 	mla	r0, r6, r0, sl
 8006c14:	0c02      	lsrs	r2, r0, #16
 8006c16:	0c1b      	lsrs	r3, r3, #16
 8006c18:	fb06 2303 	mla	r3, r6, r3, r2
 8006c1c:	f8de 2000 	ldr.w	r2, [lr]
 8006c20:	b280      	uxth	r0, r0
 8006c22:	b292      	uxth	r2, r2
 8006c24:	1a12      	subs	r2, r2, r0
 8006c26:	445a      	add	r2, fp
 8006c28:	f8de 0000 	ldr.w	r0, [lr]
 8006c2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006c36:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006c3a:	b292      	uxth	r2, r2
 8006c3c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006c40:	45e1      	cmp	r9, ip
 8006c42:	f84e 2b04 	str.w	r2, [lr], #4
 8006c46:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006c4a:	d2de      	bcs.n	8006c0a <quorem+0x42>
 8006c4c:	9b00      	ldr	r3, [sp, #0]
 8006c4e:	58eb      	ldr	r3, [r5, r3]
 8006c50:	b92b      	cbnz	r3, 8006c5e <quorem+0x96>
 8006c52:	9b01      	ldr	r3, [sp, #4]
 8006c54:	3b04      	subs	r3, #4
 8006c56:	429d      	cmp	r5, r3
 8006c58:	461a      	mov	r2, r3
 8006c5a:	d32f      	bcc.n	8006cbc <quorem+0xf4>
 8006c5c:	613c      	str	r4, [r7, #16]
 8006c5e:	4638      	mov	r0, r7
 8006c60:	f001 f9c2 	bl	8007fe8 <__mcmp>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	db25      	blt.n	8006cb4 <quorem+0xec>
 8006c68:	4629      	mov	r1, r5
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c70:	f8d1 c000 	ldr.w	ip, [r1]
 8006c74:	fa1f fe82 	uxth.w	lr, r2
 8006c78:	fa1f f38c 	uxth.w	r3, ip
 8006c7c:	eba3 030e 	sub.w	r3, r3, lr
 8006c80:	4403      	add	r3, r0
 8006c82:	0c12      	lsrs	r2, r2, #16
 8006c84:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006c88:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c92:	45c1      	cmp	r9, r8
 8006c94:	f841 3b04 	str.w	r3, [r1], #4
 8006c98:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c9c:	d2e6      	bcs.n	8006c6c <quorem+0xa4>
 8006c9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ca2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ca6:	b922      	cbnz	r2, 8006cb2 <quorem+0xea>
 8006ca8:	3b04      	subs	r3, #4
 8006caa:	429d      	cmp	r5, r3
 8006cac:	461a      	mov	r2, r3
 8006cae:	d30b      	bcc.n	8006cc8 <quorem+0x100>
 8006cb0:	613c      	str	r4, [r7, #16]
 8006cb2:	3601      	adds	r6, #1
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	b003      	add	sp, #12
 8006cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cbc:	6812      	ldr	r2, [r2, #0]
 8006cbe:	3b04      	subs	r3, #4
 8006cc0:	2a00      	cmp	r2, #0
 8006cc2:	d1cb      	bne.n	8006c5c <quorem+0x94>
 8006cc4:	3c01      	subs	r4, #1
 8006cc6:	e7c6      	b.n	8006c56 <quorem+0x8e>
 8006cc8:	6812      	ldr	r2, [r2, #0]
 8006cca:	3b04      	subs	r3, #4
 8006ccc:	2a00      	cmp	r2, #0
 8006cce:	d1ef      	bne.n	8006cb0 <quorem+0xe8>
 8006cd0:	3c01      	subs	r4, #1
 8006cd2:	e7ea      	b.n	8006caa <quorem+0xe2>
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	e7ee      	b.n	8006cb6 <quorem+0xee>

08006cd8 <_dtoa_r>:
 8006cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cdc:	69c7      	ldr	r7, [r0, #28]
 8006cde:	b099      	sub	sp, #100	@ 0x64
 8006ce0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006ce4:	ec55 4b10 	vmov	r4, r5, d0
 8006ce8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006cea:	9109      	str	r1, [sp, #36]	@ 0x24
 8006cec:	4683      	mov	fp, r0
 8006cee:	920e      	str	r2, [sp, #56]	@ 0x38
 8006cf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006cf2:	b97f      	cbnz	r7, 8006d14 <_dtoa_r+0x3c>
 8006cf4:	2010      	movs	r0, #16
 8006cf6:	f000 fdfd 	bl	80078f4 <malloc>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	f8cb 001c 	str.w	r0, [fp, #28]
 8006d00:	b920      	cbnz	r0, 8006d0c <_dtoa_r+0x34>
 8006d02:	4ba7      	ldr	r3, [pc, #668]	@ (8006fa0 <_dtoa_r+0x2c8>)
 8006d04:	21ef      	movs	r1, #239	@ 0xef
 8006d06:	48a7      	ldr	r0, [pc, #668]	@ (8006fa4 <_dtoa_r+0x2cc>)
 8006d08:	f003 f97a 	bl	800a000 <__assert_func>
 8006d0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006d10:	6007      	str	r7, [r0, #0]
 8006d12:	60c7      	str	r7, [r0, #12]
 8006d14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d18:	6819      	ldr	r1, [r3, #0]
 8006d1a:	b159      	cbz	r1, 8006d34 <_dtoa_r+0x5c>
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	604a      	str	r2, [r1, #4]
 8006d20:	2301      	movs	r3, #1
 8006d22:	4093      	lsls	r3, r2
 8006d24:	608b      	str	r3, [r1, #8]
 8006d26:	4658      	mov	r0, fp
 8006d28:	f000 feda 	bl	8007ae0 <_Bfree>
 8006d2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d30:	2200      	movs	r2, #0
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	1e2b      	subs	r3, r5, #0
 8006d36:	bfb9      	ittee	lt
 8006d38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006d3c:	9303      	strlt	r3, [sp, #12]
 8006d3e:	2300      	movge	r3, #0
 8006d40:	6033      	strge	r3, [r6, #0]
 8006d42:	9f03      	ldr	r7, [sp, #12]
 8006d44:	4b98      	ldr	r3, [pc, #608]	@ (8006fa8 <_dtoa_r+0x2d0>)
 8006d46:	bfbc      	itt	lt
 8006d48:	2201      	movlt	r2, #1
 8006d4a:	6032      	strlt	r2, [r6, #0]
 8006d4c:	43bb      	bics	r3, r7
 8006d4e:	d112      	bne.n	8006d76 <_dtoa_r+0x9e>
 8006d50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d52:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d5c:	4323      	orrs	r3, r4
 8006d5e:	f000 854d 	beq.w	80077fc <_dtoa_r+0xb24>
 8006d62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006fbc <_dtoa_r+0x2e4>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 854f 	beq.w	800780c <_dtoa_r+0xb34>
 8006d6e:	f10a 0303 	add.w	r3, sl, #3
 8006d72:	f000 bd49 	b.w	8007808 <_dtoa_r+0xb30>
 8006d76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	ec51 0b17 	vmov	r0, r1, d7
 8006d80:	2300      	movs	r3, #0
 8006d82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006d86:	f7f9 fe9f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d8a:	4680      	mov	r8, r0
 8006d8c:	b158      	cbz	r0, 8006da6 <_dtoa_r+0xce>
 8006d8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d90:	2301      	movs	r3, #1
 8006d92:	6013      	str	r3, [r2, #0]
 8006d94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d96:	b113      	cbz	r3, 8006d9e <_dtoa_r+0xc6>
 8006d98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d9a:	4b84      	ldr	r3, [pc, #528]	@ (8006fac <_dtoa_r+0x2d4>)
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006fc0 <_dtoa_r+0x2e8>
 8006da2:	f000 bd33 	b.w	800780c <_dtoa_r+0xb34>
 8006da6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006daa:	aa16      	add	r2, sp, #88	@ 0x58
 8006dac:	a917      	add	r1, sp, #92	@ 0x5c
 8006dae:	4658      	mov	r0, fp
 8006db0:	f001 fa3a 	bl	8008228 <__d2b>
 8006db4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006db8:	4681      	mov	r9, r0
 8006dba:	2e00      	cmp	r6, #0
 8006dbc:	d077      	beq.n	8006eae <_dtoa_r+0x1d6>
 8006dbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006dc0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dcc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006dd0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006dd4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006dd8:	4619      	mov	r1, r3
 8006dda:	2200      	movs	r2, #0
 8006ddc:	4b74      	ldr	r3, [pc, #464]	@ (8006fb0 <_dtoa_r+0x2d8>)
 8006dde:	f7f9 fa53 	bl	8000288 <__aeabi_dsub>
 8006de2:	a369      	add	r3, pc, #420	@ (adr r3, 8006f88 <_dtoa_r+0x2b0>)
 8006de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de8:	f7f9 fc06 	bl	80005f8 <__aeabi_dmul>
 8006dec:	a368      	add	r3, pc, #416	@ (adr r3, 8006f90 <_dtoa_r+0x2b8>)
 8006dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df2:	f7f9 fa4b 	bl	800028c <__adddf3>
 8006df6:	4604      	mov	r4, r0
 8006df8:	4630      	mov	r0, r6
 8006dfa:	460d      	mov	r5, r1
 8006dfc:	f7f9 fb92 	bl	8000524 <__aeabi_i2d>
 8006e00:	a365      	add	r3, pc, #404	@ (adr r3, 8006f98 <_dtoa_r+0x2c0>)
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	f7f9 fbf7 	bl	80005f8 <__aeabi_dmul>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4620      	mov	r0, r4
 8006e10:	4629      	mov	r1, r5
 8006e12:	f7f9 fa3b 	bl	800028c <__adddf3>
 8006e16:	4604      	mov	r4, r0
 8006e18:	460d      	mov	r5, r1
 8006e1a:	f7f9 fe9d 	bl	8000b58 <__aeabi_d2iz>
 8006e1e:	2200      	movs	r2, #0
 8006e20:	4607      	mov	r7, r0
 8006e22:	2300      	movs	r3, #0
 8006e24:	4620      	mov	r0, r4
 8006e26:	4629      	mov	r1, r5
 8006e28:	f7f9 fe58 	bl	8000adc <__aeabi_dcmplt>
 8006e2c:	b140      	cbz	r0, 8006e40 <_dtoa_r+0x168>
 8006e2e:	4638      	mov	r0, r7
 8006e30:	f7f9 fb78 	bl	8000524 <__aeabi_i2d>
 8006e34:	4622      	mov	r2, r4
 8006e36:	462b      	mov	r3, r5
 8006e38:	f7f9 fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e3c:	b900      	cbnz	r0, 8006e40 <_dtoa_r+0x168>
 8006e3e:	3f01      	subs	r7, #1
 8006e40:	2f16      	cmp	r7, #22
 8006e42:	d851      	bhi.n	8006ee8 <_dtoa_r+0x210>
 8006e44:	4b5b      	ldr	r3, [pc, #364]	@ (8006fb4 <_dtoa_r+0x2dc>)
 8006e46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e52:	f7f9 fe43 	bl	8000adc <__aeabi_dcmplt>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d048      	beq.n	8006eec <_dtoa_r+0x214>
 8006e5a:	3f01      	subs	r7, #1
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006e60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006e62:	1b9b      	subs	r3, r3, r6
 8006e64:	1e5a      	subs	r2, r3, #1
 8006e66:	bf44      	itt	mi
 8006e68:	f1c3 0801 	rsbmi	r8, r3, #1
 8006e6c:	2300      	movmi	r3, #0
 8006e6e:	9208      	str	r2, [sp, #32]
 8006e70:	bf54      	ite	pl
 8006e72:	f04f 0800 	movpl.w	r8, #0
 8006e76:	9308      	strmi	r3, [sp, #32]
 8006e78:	2f00      	cmp	r7, #0
 8006e7a:	db39      	blt.n	8006ef0 <_dtoa_r+0x218>
 8006e7c:	9b08      	ldr	r3, [sp, #32]
 8006e7e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006e80:	443b      	add	r3, r7
 8006e82:	9308      	str	r3, [sp, #32]
 8006e84:	2300      	movs	r3, #0
 8006e86:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e8a:	2b09      	cmp	r3, #9
 8006e8c:	d864      	bhi.n	8006f58 <_dtoa_r+0x280>
 8006e8e:	2b05      	cmp	r3, #5
 8006e90:	bfc4      	itt	gt
 8006e92:	3b04      	subgt	r3, #4
 8006e94:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e98:	f1a3 0302 	sub.w	r3, r3, #2
 8006e9c:	bfcc      	ite	gt
 8006e9e:	2400      	movgt	r4, #0
 8006ea0:	2401      	movle	r4, #1
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d863      	bhi.n	8006f6e <_dtoa_r+0x296>
 8006ea6:	e8df f003 	tbb	[pc, r3]
 8006eaa:	372a      	.short	0x372a
 8006eac:	5535      	.short	0x5535
 8006eae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006eb2:	441e      	add	r6, r3
 8006eb4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	bfc1      	itttt	gt
 8006ebc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ec0:	409f      	lslgt	r7, r3
 8006ec2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006ec6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006eca:	bfd6      	itet	le
 8006ecc:	f1c3 0320 	rsble	r3, r3, #32
 8006ed0:	ea47 0003 	orrgt.w	r0, r7, r3
 8006ed4:	fa04 f003 	lslle.w	r0, r4, r3
 8006ed8:	f7f9 fb14 	bl	8000504 <__aeabi_ui2d>
 8006edc:	2201      	movs	r2, #1
 8006ede:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ee2:	3e01      	subs	r6, #1
 8006ee4:	9214      	str	r2, [sp, #80]	@ 0x50
 8006ee6:	e777      	b.n	8006dd8 <_dtoa_r+0x100>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e7b8      	b.n	8006e5e <_dtoa_r+0x186>
 8006eec:	9012      	str	r0, [sp, #72]	@ 0x48
 8006eee:	e7b7      	b.n	8006e60 <_dtoa_r+0x188>
 8006ef0:	427b      	negs	r3, r7
 8006ef2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	eba8 0807 	sub.w	r8, r8, r7
 8006efa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006efc:	e7c4      	b.n	8006e88 <_dtoa_r+0x1b0>
 8006efe:	2300      	movs	r3, #0
 8006f00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	dc35      	bgt.n	8006f74 <_dtoa_r+0x29c>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	9307      	str	r3, [sp, #28]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f12:	e00b      	b.n	8006f2c <_dtoa_r+0x254>
 8006f14:	2301      	movs	r3, #1
 8006f16:	e7f3      	b.n	8006f00 <_dtoa_r+0x228>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f1e:	18fb      	adds	r3, r7, r3
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	3301      	adds	r3, #1
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	9307      	str	r3, [sp, #28]
 8006f28:	bfb8      	it	lt
 8006f2a:	2301      	movlt	r3, #1
 8006f2c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006f30:	2100      	movs	r1, #0
 8006f32:	2204      	movs	r2, #4
 8006f34:	f102 0514 	add.w	r5, r2, #20
 8006f38:	429d      	cmp	r5, r3
 8006f3a:	d91f      	bls.n	8006f7c <_dtoa_r+0x2a4>
 8006f3c:	6041      	str	r1, [r0, #4]
 8006f3e:	4658      	mov	r0, fp
 8006f40:	f000 fd8e 	bl	8007a60 <_Balloc>
 8006f44:	4682      	mov	sl, r0
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d13c      	bne.n	8006fc4 <_dtoa_r+0x2ec>
 8006f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8006fb8 <_dtoa_r+0x2e0>)
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006f52:	e6d8      	b.n	8006d06 <_dtoa_r+0x2e>
 8006f54:	2301      	movs	r3, #1
 8006f56:	e7e0      	b.n	8006f1a <_dtoa_r+0x242>
 8006f58:	2401      	movs	r4, #1
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f60:	f04f 33ff 	mov.w	r3, #4294967295
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	9307      	str	r3, [sp, #28]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	2312      	movs	r3, #18
 8006f6c:	e7d0      	b.n	8006f10 <_dtoa_r+0x238>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f72:	e7f5      	b.n	8006f60 <_dtoa_r+0x288>
 8006f74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	9307      	str	r3, [sp, #28]
 8006f7a:	e7d7      	b.n	8006f2c <_dtoa_r+0x254>
 8006f7c:	3101      	adds	r1, #1
 8006f7e:	0052      	lsls	r2, r2, #1
 8006f80:	e7d8      	b.n	8006f34 <_dtoa_r+0x25c>
 8006f82:	bf00      	nop
 8006f84:	f3af 8000 	nop.w
 8006f88:	636f4361 	.word	0x636f4361
 8006f8c:	3fd287a7 	.word	0x3fd287a7
 8006f90:	8b60c8b3 	.word	0x8b60c8b3
 8006f94:	3fc68a28 	.word	0x3fc68a28
 8006f98:	509f79fb 	.word	0x509f79fb
 8006f9c:	3fd34413 	.word	0x3fd34413
 8006fa0:	0800ab50 	.word	0x0800ab50
 8006fa4:	0800ab67 	.word	0x0800ab67
 8006fa8:	7ff00000 	.word	0x7ff00000
 8006fac:	0800aea9 	.word	0x0800aea9
 8006fb0:	3ff80000 	.word	0x3ff80000
 8006fb4:	0800ac60 	.word	0x0800ac60
 8006fb8:	0800abbf 	.word	0x0800abbf
 8006fbc:	0800ab4c 	.word	0x0800ab4c
 8006fc0:	0800aea8 	.word	0x0800aea8
 8006fc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006fc8:	6018      	str	r0, [r3, #0]
 8006fca:	9b07      	ldr	r3, [sp, #28]
 8006fcc:	2b0e      	cmp	r3, #14
 8006fce:	f200 80a4 	bhi.w	800711a <_dtoa_r+0x442>
 8006fd2:	2c00      	cmp	r4, #0
 8006fd4:	f000 80a1 	beq.w	800711a <_dtoa_r+0x442>
 8006fd8:	2f00      	cmp	r7, #0
 8006fda:	dd33      	ble.n	8007044 <_dtoa_r+0x36c>
 8006fdc:	4bad      	ldr	r3, [pc, #692]	@ (8007294 <_dtoa_r+0x5bc>)
 8006fde:	f007 020f 	and.w	r2, r7, #15
 8006fe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fe6:	ed93 7b00 	vldr	d7, [r3]
 8006fea:	05f8      	lsls	r0, r7, #23
 8006fec:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006ff0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006ff4:	d516      	bpl.n	8007024 <_dtoa_r+0x34c>
 8006ff6:	4ba8      	ldr	r3, [pc, #672]	@ (8007298 <_dtoa_r+0x5c0>)
 8006ff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ffc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007000:	f7f9 fc24 	bl	800084c <__aeabi_ddiv>
 8007004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007008:	f004 040f 	and.w	r4, r4, #15
 800700c:	2603      	movs	r6, #3
 800700e:	4da2      	ldr	r5, [pc, #648]	@ (8007298 <_dtoa_r+0x5c0>)
 8007010:	b954      	cbnz	r4, 8007028 <_dtoa_r+0x350>
 8007012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800701a:	f7f9 fc17 	bl	800084c <__aeabi_ddiv>
 800701e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007022:	e028      	b.n	8007076 <_dtoa_r+0x39e>
 8007024:	2602      	movs	r6, #2
 8007026:	e7f2      	b.n	800700e <_dtoa_r+0x336>
 8007028:	07e1      	lsls	r1, r4, #31
 800702a:	d508      	bpl.n	800703e <_dtoa_r+0x366>
 800702c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007030:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007034:	f7f9 fae0 	bl	80005f8 <__aeabi_dmul>
 8007038:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800703c:	3601      	adds	r6, #1
 800703e:	1064      	asrs	r4, r4, #1
 8007040:	3508      	adds	r5, #8
 8007042:	e7e5      	b.n	8007010 <_dtoa_r+0x338>
 8007044:	f000 80d2 	beq.w	80071ec <_dtoa_r+0x514>
 8007048:	427c      	negs	r4, r7
 800704a:	4b92      	ldr	r3, [pc, #584]	@ (8007294 <_dtoa_r+0x5bc>)
 800704c:	4d92      	ldr	r5, [pc, #584]	@ (8007298 <_dtoa_r+0x5c0>)
 800704e:	f004 020f 	and.w	r2, r4, #15
 8007052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800705e:	f7f9 facb 	bl	80005f8 <__aeabi_dmul>
 8007062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007066:	1124      	asrs	r4, r4, #4
 8007068:	2300      	movs	r3, #0
 800706a:	2602      	movs	r6, #2
 800706c:	2c00      	cmp	r4, #0
 800706e:	f040 80b2 	bne.w	80071d6 <_dtoa_r+0x4fe>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1d3      	bne.n	800701e <_dtoa_r+0x346>
 8007076:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007078:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 80b7 	beq.w	80071f0 <_dtoa_r+0x518>
 8007082:	4b86      	ldr	r3, [pc, #536]	@ (800729c <_dtoa_r+0x5c4>)
 8007084:	2200      	movs	r2, #0
 8007086:	4620      	mov	r0, r4
 8007088:	4629      	mov	r1, r5
 800708a:	f7f9 fd27 	bl	8000adc <__aeabi_dcmplt>
 800708e:	2800      	cmp	r0, #0
 8007090:	f000 80ae 	beq.w	80071f0 <_dtoa_r+0x518>
 8007094:	9b07      	ldr	r3, [sp, #28]
 8007096:	2b00      	cmp	r3, #0
 8007098:	f000 80aa 	beq.w	80071f0 <_dtoa_r+0x518>
 800709c:	9b00      	ldr	r3, [sp, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	dd37      	ble.n	8007112 <_dtoa_r+0x43a>
 80070a2:	1e7b      	subs	r3, r7, #1
 80070a4:	9304      	str	r3, [sp, #16]
 80070a6:	4620      	mov	r0, r4
 80070a8:	4b7d      	ldr	r3, [pc, #500]	@ (80072a0 <_dtoa_r+0x5c8>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	4629      	mov	r1, r5
 80070ae:	f7f9 faa3 	bl	80005f8 <__aeabi_dmul>
 80070b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070b6:	9c00      	ldr	r4, [sp, #0]
 80070b8:	3601      	adds	r6, #1
 80070ba:	4630      	mov	r0, r6
 80070bc:	f7f9 fa32 	bl	8000524 <__aeabi_i2d>
 80070c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070c4:	f7f9 fa98 	bl	80005f8 <__aeabi_dmul>
 80070c8:	4b76      	ldr	r3, [pc, #472]	@ (80072a4 <_dtoa_r+0x5cc>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	f7f9 f8de 	bl	800028c <__adddf3>
 80070d0:	4605      	mov	r5, r0
 80070d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80070d6:	2c00      	cmp	r4, #0
 80070d8:	f040 808d 	bne.w	80071f6 <_dtoa_r+0x51e>
 80070dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070e0:	4b71      	ldr	r3, [pc, #452]	@ (80072a8 <_dtoa_r+0x5d0>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	f7f9 f8d0 	bl	8000288 <__aeabi_dsub>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070f0:	462a      	mov	r2, r5
 80070f2:	4633      	mov	r3, r6
 80070f4:	f7f9 fd10 	bl	8000b18 <__aeabi_dcmpgt>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	f040 828b 	bne.w	8007614 <_dtoa_r+0x93c>
 80070fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007102:	462a      	mov	r2, r5
 8007104:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007108:	f7f9 fce8 	bl	8000adc <__aeabi_dcmplt>
 800710c:	2800      	cmp	r0, #0
 800710e:	f040 8128 	bne.w	8007362 <_dtoa_r+0x68a>
 8007112:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007116:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800711a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800711c:	2b00      	cmp	r3, #0
 800711e:	f2c0 815a 	blt.w	80073d6 <_dtoa_r+0x6fe>
 8007122:	2f0e      	cmp	r7, #14
 8007124:	f300 8157 	bgt.w	80073d6 <_dtoa_r+0x6fe>
 8007128:	4b5a      	ldr	r3, [pc, #360]	@ (8007294 <_dtoa_r+0x5bc>)
 800712a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800712e:	ed93 7b00 	vldr	d7, [r3]
 8007132:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007134:	2b00      	cmp	r3, #0
 8007136:	ed8d 7b00 	vstr	d7, [sp]
 800713a:	da03      	bge.n	8007144 <_dtoa_r+0x46c>
 800713c:	9b07      	ldr	r3, [sp, #28]
 800713e:	2b00      	cmp	r3, #0
 8007140:	f340 8101 	ble.w	8007346 <_dtoa_r+0x66e>
 8007144:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007148:	4656      	mov	r6, sl
 800714a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800714e:	4620      	mov	r0, r4
 8007150:	4629      	mov	r1, r5
 8007152:	f7f9 fb7b 	bl	800084c <__aeabi_ddiv>
 8007156:	f7f9 fcff 	bl	8000b58 <__aeabi_d2iz>
 800715a:	4680      	mov	r8, r0
 800715c:	f7f9 f9e2 	bl	8000524 <__aeabi_i2d>
 8007160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007164:	f7f9 fa48 	bl	80005f8 <__aeabi_dmul>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4620      	mov	r0, r4
 800716e:	4629      	mov	r1, r5
 8007170:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007174:	f7f9 f888 	bl	8000288 <__aeabi_dsub>
 8007178:	f806 4b01 	strb.w	r4, [r6], #1
 800717c:	9d07      	ldr	r5, [sp, #28]
 800717e:	eba6 040a 	sub.w	r4, r6, sl
 8007182:	42a5      	cmp	r5, r4
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	f040 8117 	bne.w	80073ba <_dtoa_r+0x6e2>
 800718c:	f7f9 f87e 	bl	800028c <__adddf3>
 8007190:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007194:	4604      	mov	r4, r0
 8007196:	460d      	mov	r5, r1
 8007198:	f7f9 fcbe 	bl	8000b18 <__aeabi_dcmpgt>
 800719c:	2800      	cmp	r0, #0
 800719e:	f040 80f9 	bne.w	8007394 <_dtoa_r+0x6bc>
 80071a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071a6:	4620      	mov	r0, r4
 80071a8:	4629      	mov	r1, r5
 80071aa:	f7f9 fc8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80071ae:	b118      	cbz	r0, 80071b8 <_dtoa_r+0x4e0>
 80071b0:	f018 0f01 	tst.w	r8, #1
 80071b4:	f040 80ee 	bne.w	8007394 <_dtoa_r+0x6bc>
 80071b8:	4649      	mov	r1, r9
 80071ba:	4658      	mov	r0, fp
 80071bc:	f000 fc90 	bl	8007ae0 <_Bfree>
 80071c0:	2300      	movs	r3, #0
 80071c2:	7033      	strb	r3, [r6, #0]
 80071c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80071c6:	3701      	adds	r7, #1
 80071c8:	601f      	str	r7, [r3, #0]
 80071ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 831d 	beq.w	800780c <_dtoa_r+0xb34>
 80071d2:	601e      	str	r6, [r3, #0]
 80071d4:	e31a      	b.n	800780c <_dtoa_r+0xb34>
 80071d6:	07e2      	lsls	r2, r4, #31
 80071d8:	d505      	bpl.n	80071e6 <_dtoa_r+0x50e>
 80071da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071de:	f7f9 fa0b 	bl	80005f8 <__aeabi_dmul>
 80071e2:	3601      	adds	r6, #1
 80071e4:	2301      	movs	r3, #1
 80071e6:	1064      	asrs	r4, r4, #1
 80071e8:	3508      	adds	r5, #8
 80071ea:	e73f      	b.n	800706c <_dtoa_r+0x394>
 80071ec:	2602      	movs	r6, #2
 80071ee:	e742      	b.n	8007076 <_dtoa_r+0x39e>
 80071f0:	9c07      	ldr	r4, [sp, #28]
 80071f2:	9704      	str	r7, [sp, #16]
 80071f4:	e761      	b.n	80070ba <_dtoa_r+0x3e2>
 80071f6:	4b27      	ldr	r3, [pc, #156]	@ (8007294 <_dtoa_r+0x5bc>)
 80071f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80071fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007202:	4454      	add	r4, sl
 8007204:	2900      	cmp	r1, #0
 8007206:	d053      	beq.n	80072b0 <_dtoa_r+0x5d8>
 8007208:	4928      	ldr	r1, [pc, #160]	@ (80072ac <_dtoa_r+0x5d4>)
 800720a:	2000      	movs	r0, #0
 800720c:	f7f9 fb1e 	bl	800084c <__aeabi_ddiv>
 8007210:	4633      	mov	r3, r6
 8007212:	462a      	mov	r2, r5
 8007214:	f7f9 f838 	bl	8000288 <__aeabi_dsub>
 8007218:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800721c:	4656      	mov	r6, sl
 800721e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007222:	f7f9 fc99 	bl	8000b58 <__aeabi_d2iz>
 8007226:	4605      	mov	r5, r0
 8007228:	f7f9 f97c 	bl	8000524 <__aeabi_i2d>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007234:	f7f9 f828 	bl	8000288 <__aeabi_dsub>
 8007238:	3530      	adds	r5, #48	@ 0x30
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007242:	f806 5b01 	strb.w	r5, [r6], #1
 8007246:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800724a:	f7f9 fc47 	bl	8000adc <__aeabi_dcmplt>
 800724e:	2800      	cmp	r0, #0
 8007250:	d171      	bne.n	8007336 <_dtoa_r+0x65e>
 8007252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007256:	4911      	ldr	r1, [pc, #68]	@ (800729c <_dtoa_r+0x5c4>)
 8007258:	2000      	movs	r0, #0
 800725a:	f7f9 f815 	bl	8000288 <__aeabi_dsub>
 800725e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007262:	f7f9 fc3b 	bl	8000adc <__aeabi_dcmplt>
 8007266:	2800      	cmp	r0, #0
 8007268:	f040 8095 	bne.w	8007396 <_dtoa_r+0x6be>
 800726c:	42a6      	cmp	r6, r4
 800726e:	f43f af50 	beq.w	8007112 <_dtoa_r+0x43a>
 8007272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007276:	4b0a      	ldr	r3, [pc, #40]	@ (80072a0 <_dtoa_r+0x5c8>)
 8007278:	2200      	movs	r2, #0
 800727a:	f7f9 f9bd 	bl	80005f8 <__aeabi_dmul>
 800727e:	4b08      	ldr	r3, [pc, #32]	@ (80072a0 <_dtoa_r+0x5c8>)
 8007280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007284:	2200      	movs	r2, #0
 8007286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800728a:	f7f9 f9b5 	bl	80005f8 <__aeabi_dmul>
 800728e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007292:	e7c4      	b.n	800721e <_dtoa_r+0x546>
 8007294:	0800ac60 	.word	0x0800ac60
 8007298:	0800ac38 	.word	0x0800ac38
 800729c:	3ff00000 	.word	0x3ff00000
 80072a0:	40240000 	.word	0x40240000
 80072a4:	401c0000 	.word	0x401c0000
 80072a8:	40140000 	.word	0x40140000
 80072ac:	3fe00000 	.word	0x3fe00000
 80072b0:	4631      	mov	r1, r6
 80072b2:	4628      	mov	r0, r5
 80072b4:	f7f9 f9a0 	bl	80005f8 <__aeabi_dmul>
 80072b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80072be:	4656      	mov	r6, sl
 80072c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072c4:	f7f9 fc48 	bl	8000b58 <__aeabi_d2iz>
 80072c8:	4605      	mov	r5, r0
 80072ca:	f7f9 f92b 	bl	8000524 <__aeabi_i2d>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072d6:	f7f8 ffd7 	bl	8000288 <__aeabi_dsub>
 80072da:	3530      	adds	r5, #48	@ 0x30
 80072dc:	f806 5b01 	strb.w	r5, [r6], #1
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	42a6      	cmp	r6, r4
 80072e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072ea:	f04f 0200 	mov.w	r2, #0
 80072ee:	d124      	bne.n	800733a <_dtoa_r+0x662>
 80072f0:	4bac      	ldr	r3, [pc, #688]	@ (80075a4 <_dtoa_r+0x8cc>)
 80072f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80072f6:	f7f8 ffc9 	bl	800028c <__adddf3>
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007302:	f7f9 fc09 	bl	8000b18 <__aeabi_dcmpgt>
 8007306:	2800      	cmp	r0, #0
 8007308:	d145      	bne.n	8007396 <_dtoa_r+0x6be>
 800730a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800730e:	49a5      	ldr	r1, [pc, #660]	@ (80075a4 <_dtoa_r+0x8cc>)
 8007310:	2000      	movs	r0, #0
 8007312:	f7f8 ffb9 	bl	8000288 <__aeabi_dsub>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800731e:	f7f9 fbdd 	bl	8000adc <__aeabi_dcmplt>
 8007322:	2800      	cmp	r0, #0
 8007324:	f43f aef5 	beq.w	8007112 <_dtoa_r+0x43a>
 8007328:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800732a:	1e73      	subs	r3, r6, #1
 800732c:	9315      	str	r3, [sp, #84]	@ 0x54
 800732e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007332:	2b30      	cmp	r3, #48	@ 0x30
 8007334:	d0f8      	beq.n	8007328 <_dtoa_r+0x650>
 8007336:	9f04      	ldr	r7, [sp, #16]
 8007338:	e73e      	b.n	80071b8 <_dtoa_r+0x4e0>
 800733a:	4b9b      	ldr	r3, [pc, #620]	@ (80075a8 <_dtoa_r+0x8d0>)
 800733c:	f7f9 f95c 	bl	80005f8 <__aeabi_dmul>
 8007340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007344:	e7bc      	b.n	80072c0 <_dtoa_r+0x5e8>
 8007346:	d10c      	bne.n	8007362 <_dtoa_r+0x68a>
 8007348:	4b98      	ldr	r3, [pc, #608]	@ (80075ac <_dtoa_r+0x8d4>)
 800734a:	2200      	movs	r2, #0
 800734c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007350:	f7f9 f952 	bl	80005f8 <__aeabi_dmul>
 8007354:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007358:	f7f9 fbd4 	bl	8000b04 <__aeabi_dcmpge>
 800735c:	2800      	cmp	r0, #0
 800735e:	f000 8157 	beq.w	8007610 <_dtoa_r+0x938>
 8007362:	2400      	movs	r4, #0
 8007364:	4625      	mov	r5, r4
 8007366:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007368:	43db      	mvns	r3, r3
 800736a:	9304      	str	r3, [sp, #16]
 800736c:	4656      	mov	r6, sl
 800736e:	2700      	movs	r7, #0
 8007370:	4621      	mov	r1, r4
 8007372:	4658      	mov	r0, fp
 8007374:	f000 fbb4 	bl	8007ae0 <_Bfree>
 8007378:	2d00      	cmp	r5, #0
 800737a:	d0dc      	beq.n	8007336 <_dtoa_r+0x65e>
 800737c:	b12f      	cbz	r7, 800738a <_dtoa_r+0x6b2>
 800737e:	42af      	cmp	r7, r5
 8007380:	d003      	beq.n	800738a <_dtoa_r+0x6b2>
 8007382:	4639      	mov	r1, r7
 8007384:	4658      	mov	r0, fp
 8007386:	f000 fbab 	bl	8007ae0 <_Bfree>
 800738a:	4629      	mov	r1, r5
 800738c:	4658      	mov	r0, fp
 800738e:	f000 fba7 	bl	8007ae0 <_Bfree>
 8007392:	e7d0      	b.n	8007336 <_dtoa_r+0x65e>
 8007394:	9704      	str	r7, [sp, #16]
 8007396:	4633      	mov	r3, r6
 8007398:	461e      	mov	r6, r3
 800739a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800739e:	2a39      	cmp	r2, #57	@ 0x39
 80073a0:	d107      	bne.n	80073b2 <_dtoa_r+0x6da>
 80073a2:	459a      	cmp	sl, r3
 80073a4:	d1f8      	bne.n	8007398 <_dtoa_r+0x6c0>
 80073a6:	9a04      	ldr	r2, [sp, #16]
 80073a8:	3201      	adds	r2, #1
 80073aa:	9204      	str	r2, [sp, #16]
 80073ac:	2230      	movs	r2, #48	@ 0x30
 80073ae:	f88a 2000 	strb.w	r2, [sl]
 80073b2:	781a      	ldrb	r2, [r3, #0]
 80073b4:	3201      	adds	r2, #1
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	e7bd      	b.n	8007336 <_dtoa_r+0x65e>
 80073ba:	4b7b      	ldr	r3, [pc, #492]	@ (80075a8 <_dtoa_r+0x8d0>)
 80073bc:	2200      	movs	r2, #0
 80073be:	f7f9 f91b 	bl	80005f8 <__aeabi_dmul>
 80073c2:	2200      	movs	r2, #0
 80073c4:	2300      	movs	r3, #0
 80073c6:	4604      	mov	r4, r0
 80073c8:	460d      	mov	r5, r1
 80073ca:	f7f9 fb7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	f43f aebb 	beq.w	800714a <_dtoa_r+0x472>
 80073d4:	e6f0      	b.n	80071b8 <_dtoa_r+0x4e0>
 80073d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80073d8:	2a00      	cmp	r2, #0
 80073da:	f000 80db 	beq.w	8007594 <_dtoa_r+0x8bc>
 80073de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073e0:	2a01      	cmp	r2, #1
 80073e2:	f300 80bf 	bgt.w	8007564 <_dtoa_r+0x88c>
 80073e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80073e8:	2a00      	cmp	r2, #0
 80073ea:	f000 80b7 	beq.w	800755c <_dtoa_r+0x884>
 80073ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80073f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80073f4:	4646      	mov	r6, r8
 80073f6:	9a08      	ldr	r2, [sp, #32]
 80073f8:	2101      	movs	r1, #1
 80073fa:	441a      	add	r2, r3
 80073fc:	4658      	mov	r0, fp
 80073fe:	4498      	add	r8, r3
 8007400:	9208      	str	r2, [sp, #32]
 8007402:	f000 fc6b 	bl	8007cdc <__i2b>
 8007406:	4605      	mov	r5, r0
 8007408:	b15e      	cbz	r6, 8007422 <_dtoa_r+0x74a>
 800740a:	9b08      	ldr	r3, [sp, #32]
 800740c:	2b00      	cmp	r3, #0
 800740e:	dd08      	ble.n	8007422 <_dtoa_r+0x74a>
 8007410:	42b3      	cmp	r3, r6
 8007412:	9a08      	ldr	r2, [sp, #32]
 8007414:	bfa8      	it	ge
 8007416:	4633      	movge	r3, r6
 8007418:	eba8 0803 	sub.w	r8, r8, r3
 800741c:	1af6      	subs	r6, r6, r3
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	9308      	str	r3, [sp, #32]
 8007422:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007424:	b1f3      	cbz	r3, 8007464 <_dtoa_r+0x78c>
 8007426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 80b7 	beq.w	800759c <_dtoa_r+0x8c4>
 800742e:	b18c      	cbz	r4, 8007454 <_dtoa_r+0x77c>
 8007430:	4629      	mov	r1, r5
 8007432:	4622      	mov	r2, r4
 8007434:	4658      	mov	r0, fp
 8007436:	f000 fd11 	bl	8007e5c <__pow5mult>
 800743a:	464a      	mov	r2, r9
 800743c:	4601      	mov	r1, r0
 800743e:	4605      	mov	r5, r0
 8007440:	4658      	mov	r0, fp
 8007442:	f000 fc61 	bl	8007d08 <__multiply>
 8007446:	4649      	mov	r1, r9
 8007448:	9004      	str	r0, [sp, #16]
 800744a:	4658      	mov	r0, fp
 800744c:	f000 fb48 	bl	8007ae0 <_Bfree>
 8007450:	9b04      	ldr	r3, [sp, #16]
 8007452:	4699      	mov	r9, r3
 8007454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007456:	1b1a      	subs	r2, r3, r4
 8007458:	d004      	beq.n	8007464 <_dtoa_r+0x78c>
 800745a:	4649      	mov	r1, r9
 800745c:	4658      	mov	r0, fp
 800745e:	f000 fcfd 	bl	8007e5c <__pow5mult>
 8007462:	4681      	mov	r9, r0
 8007464:	2101      	movs	r1, #1
 8007466:	4658      	mov	r0, fp
 8007468:	f000 fc38 	bl	8007cdc <__i2b>
 800746c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800746e:	4604      	mov	r4, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 81cf 	beq.w	8007814 <_dtoa_r+0xb3c>
 8007476:	461a      	mov	r2, r3
 8007478:	4601      	mov	r1, r0
 800747a:	4658      	mov	r0, fp
 800747c:	f000 fcee 	bl	8007e5c <__pow5mult>
 8007480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007482:	2b01      	cmp	r3, #1
 8007484:	4604      	mov	r4, r0
 8007486:	f300 8095 	bgt.w	80075b4 <_dtoa_r+0x8dc>
 800748a:	9b02      	ldr	r3, [sp, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	f040 8087 	bne.w	80075a0 <_dtoa_r+0x8c8>
 8007492:	9b03      	ldr	r3, [sp, #12]
 8007494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007498:	2b00      	cmp	r3, #0
 800749a:	f040 8089 	bne.w	80075b0 <_dtoa_r+0x8d8>
 800749e:	9b03      	ldr	r3, [sp, #12]
 80074a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074a4:	0d1b      	lsrs	r3, r3, #20
 80074a6:	051b      	lsls	r3, r3, #20
 80074a8:	b12b      	cbz	r3, 80074b6 <_dtoa_r+0x7de>
 80074aa:	9b08      	ldr	r3, [sp, #32]
 80074ac:	3301      	adds	r3, #1
 80074ae:	9308      	str	r3, [sp, #32]
 80074b0:	f108 0801 	add.w	r8, r8, #1
 80074b4:	2301      	movs	r3, #1
 80074b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80074b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 81b0 	beq.w	8007820 <_dtoa_r+0xb48>
 80074c0:	6923      	ldr	r3, [r4, #16]
 80074c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074c6:	6918      	ldr	r0, [r3, #16]
 80074c8:	f000 fbbc 	bl	8007c44 <__hi0bits>
 80074cc:	f1c0 0020 	rsb	r0, r0, #32
 80074d0:	9b08      	ldr	r3, [sp, #32]
 80074d2:	4418      	add	r0, r3
 80074d4:	f010 001f 	ands.w	r0, r0, #31
 80074d8:	d077      	beq.n	80075ca <_dtoa_r+0x8f2>
 80074da:	f1c0 0320 	rsb	r3, r0, #32
 80074de:	2b04      	cmp	r3, #4
 80074e0:	dd6b      	ble.n	80075ba <_dtoa_r+0x8e2>
 80074e2:	9b08      	ldr	r3, [sp, #32]
 80074e4:	f1c0 001c 	rsb	r0, r0, #28
 80074e8:	4403      	add	r3, r0
 80074ea:	4480      	add	r8, r0
 80074ec:	4406      	add	r6, r0
 80074ee:	9308      	str	r3, [sp, #32]
 80074f0:	f1b8 0f00 	cmp.w	r8, #0
 80074f4:	dd05      	ble.n	8007502 <_dtoa_r+0x82a>
 80074f6:	4649      	mov	r1, r9
 80074f8:	4642      	mov	r2, r8
 80074fa:	4658      	mov	r0, fp
 80074fc:	f000 fd08 	bl	8007f10 <__lshift>
 8007500:	4681      	mov	r9, r0
 8007502:	9b08      	ldr	r3, [sp, #32]
 8007504:	2b00      	cmp	r3, #0
 8007506:	dd05      	ble.n	8007514 <_dtoa_r+0x83c>
 8007508:	4621      	mov	r1, r4
 800750a:	461a      	mov	r2, r3
 800750c:	4658      	mov	r0, fp
 800750e:	f000 fcff 	bl	8007f10 <__lshift>
 8007512:	4604      	mov	r4, r0
 8007514:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007516:	2b00      	cmp	r3, #0
 8007518:	d059      	beq.n	80075ce <_dtoa_r+0x8f6>
 800751a:	4621      	mov	r1, r4
 800751c:	4648      	mov	r0, r9
 800751e:	f000 fd63 	bl	8007fe8 <__mcmp>
 8007522:	2800      	cmp	r0, #0
 8007524:	da53      	bge.n	80075ce <_dtoa_r+0x8f6>
 8007526:	1e7b      	subs	r3, r7, #1
 8007528:	9304      	str	r3, [sp, #16]
 800752a:	4649      	mov	r1, r9
 800752c:	2300      	movs	r3, #0
 800752e:	220a      	movs	r2, #10
 8007530:	4658      	mov	r0, fp
 8007532:	f000 faf7 	bl	8007b24 <__multadd>
 8007536:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007538:	4681      	mov	r9, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 8172 	beq.w	8007824 <_dtoa_r+0xb4c>
 8007540:	2300      	movs	r3, #0
 8007542:	4629      	mov	r1, r5
 8007544:	220a      	movs	r2, #10
 8007546:	4658      	mov	r0, fp
 8007548:	f000 faec 	bl	8007b24 <__multadd>
 800754c:	9b00      	ldr	r3, [sp, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	4605      	mov	r5, r0
 8007552:	dc67      	bgt.n	8007624 <_dtoa_r+0x94c>
 8007554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007556:	2b02      	cmp	r3, #2
 8007558:	dc41      	bgt.n	80075de <_dtoa_r+0x906>
 800755a:	e063      	b.n	8007624 <_dtoa_r+0x94c>
 800755c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800755e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007562:	e746      	b.n	80073f2 <_dtoa_r+0x71a>
 8007564:	9b07      	ldr	r3, [sp, #28]
 8007566:	1e5c      	subs	r4, r3, #1
 8007568:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800756a:	42a3      	cmp	r3, r4
 800756c:	bfbf      	itttt	lt
 800756e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007570:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007572:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007574:	1ae3      	sublt	r3, r4, r3
 8007576:	bfb4      	ite	lt
 8007578:	18d2      	addlt	r2, r2, r3
 800757a:	1b1c      	subge	r4, r3, r4
 800757c:	9b07      	ldr	r3, [sp, #28]
 800757e:	bfbc      	itt	lt
 8007580:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007582:	2400      	movlt	r4, #0
 8007584:	2b00      	cmp	r3, #0
 8007586:	bfb5      	itete	lt
 8007588:	eba8 0603 	sublt.w	r6, r8, r3
 800758c:	9b07      	ldrge	r3, [sp, #28]
 800758e:	2300      	movlt	r3, #0
 8007590:	4646      	movge	r6, r8
 8007592:	e730      	b.n	80073f6 <_dtoa_r+0x71e>
 8007594:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007596:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007598:	4646      	mov	r6, r8
 800759a:	e735      	b.n	8007408 <_dtoa_r+0x730>
 800759c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800759e:	e75c      	b.n	800745a <_dtoa_r+0x782>
 80075a0:	2300      	movs	r3, #0
 80075a2:	e788      	b.n	80074b6 <_dtoa_r+0x7de>
 80075a4:	3fe00000 	.word	0x3fe00000
 80075a8:	40240000 	.word	0x40240000
 80075ac:	40140000 	.word	0x40140000
 80075b0:	9b02      	ldr	r3, [sp, #8]
 80075b2:	e780      	b.n	80074b6 <_dtoa_r+0x7de>
 80075b4:	2300      	movs	r3, #0
 80075b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80075b8:	e782      	b.n	80074c0 <_dtoa_r+0x7e8>
 80075ba:	d099      	beq.n	80074f0 <_dtoa_r+0x818>
 80075bc:	9a08      	ldr	r2, [sp, #32]
 80075be:	331c      	adds	r3, #28
 80075c0:	441a      	add	r2, r3
 80075c2:	4498      	add	r8, r3
 80075c4:	441e      	add	r6, r3
 80075c6:	9208      	str	r2, [sp, #32]
 80075c8:	e792      	b.n	80074f0 <_dtoa_r+0x818>
 80075ca:	4603      	mov	r3, r0
 80075cc:	e7f6      	b.n	80075bc <_dtoa_r+0x8e4>
 80075ce:	9b07      	ldr	r3, [sp, #28]
 80075d0:	9704      	str	r7, [sp, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	dc20      	bgt.n	8007618 <_dtoa_r+0x940>
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075da:	2b02      	cmp	r3, #2
 80075dc:	dd1e      	ble.n	800761c <_dtoa_r+0x944>
 80075de:	9b00      	ldr	r3, [sp, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f47f aec0 	bne.w	8007366 <_dtoa_r+0x68e>
 80075e6:	4621      	mov	r1, r4
 80075e8:	2205      	movs	r2, #5
 80075ea:	4658      	mov	r0, fp
 80075ec:	f000 fa9a 	bl	8007b24 <__multadd>
 80075f0:	4601      	mov	r1, r0
 80075f2:	4604      	mov	r4, r0
 80075f4:	4648      	mov	r0, r9
 80075f6:	f000 fcf7 	bl	8007fe8 <__mcmp>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	f77f aeb3 	ble.w	8007366 <_dtoa_r+0x68e>
 8007600:	4656      	mov	r6, sl
 8007602:	2331      	movs	r3, #49	@ 0x31
 8007604:	f806 3b01 	strb.w	r3, [r6], #1
 8007608:	9b04      	ldr	r3, [sp, #16]
 800760a:	3301      	adds	r3, #1
 800760c:	9304      	str	r3, [sp, #16]
 800760e:	e6ae      	b.n	800736e <_dtoa_r+0x696>
 8007610:	9c07      	ldr	r4, [sp, #28]
 8007612:	9704      	str	r7, [sp, #16]
 8007614:	4625      	mov	r5, r4
 8007616:	e7f3      	b.n	8007600 <_dtoa_r+0x928>
 8007618:	9b07      	ldr	r3, [sp, #28]
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 8104 	beq.w	800782c <_dtoa_r+0xb54>
 8007624:	2e00      	cmp	r6, #0
 8007626:	dd05      	ble.n	8007634 <_dtoa_r+0x95c>
 8007628:	4629      	mov	r1, r5
 800762a:	4632      	mov	r2, r6
 800762c:	4658      	mov	r0, fp
 800762e:	f000 fc6f 	bl	8007f10 <__lshift>
 8007632:	4605      	mov	r5, r0
 8007634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007636:	2b00      	cmp	r3, #0
 8007638:	d05a      	beq.n	80076f0 <_dtoa_r+0xa18>
 800763a:	6869      	ldr	r1, [r5, #4]
 800763c:	4658      	mov	r0, fp
 800763e:	f000 fa0f 	bl	8007a60 <_Balloc>
 8007642:	4606      	mov	r6, r0
 8007644:	b928      	cbnz	r0, 8007652 <_dtoa_r+0x97a>
 8007646:	4b84      	ldr	r3, [pc, #528]	@ (8007858 <_dtoa_r+0xb80>)
 8007648:	4602      	mov	r2, r0
 800764a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800764e:	f7ff bb5a 	b.w	8006d06 <_dtoa_r+0x2e>
 8007652:	692a      	ldr	r2, [r5, #16]
 8007654:	3202      	adds	r2, #2
 8007656:	0092      	lsls	r2, r2, #2
 8007658:	f105 010c 	add.w	r1, r5, #12
 800765c:	300c      	adds	r0, #12
 800765e:	f002 fcb7 	bl	8009fd0 <memcpy>
 8007662:	2201      	movs	r2, #1
 8007664:	4631      	mov	r1, r6
 8007666:	4658      	mov	r0, fp
 8007668:	f000 fc52 	bl	8007f10 <__lshift>
 800766c:	f10a 0301 	add.w	r3, sl, #1
 8007670:	9307      	str	r3, [sp, #28]
 8007672:	9b00      	ldr	r3, [sp, #0]
 8007674:	4453      	add	r3, sl
 8007676:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007678:	9b02      	ldr	r3, [sp, #8]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	462f      	mov	r7, r5
 8007680:	930a      	str	r3, [sp, #40]	@ 0x28
 8007682:	4605      	mov	r5, r0
 8007684:	9b07      	ldr	r3, [sp, #28]
 8007686:	4621      	mov	r1, r4
 8007688:	3b01      	subs	r3, #1
 800768a:	4648      	mov	r0, r9
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	f7ff fa9b 	bl	8006bc8 <quorem>
 8007692:	4639      	mov	r1, r7
 8007694:	9002      	str	r0, [sp, #8]
 8007696:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800769a:	4648      	mov	r0, r9
 800769c:	f000 fca4 	bl	8007fe8 <__mcmp>
 80076a0:	462a      	mov	r2, r5
 80076a2:	9008      	str	r0, [sp, #32]
 80076a4:	4621      	mov	r1, r4
 80076a6:	4658      	mov	r0, fp
 80076a8:	f000 fcba 	bl	8008020 <__mdiff>
 80076ac:	68c2      	ldr	r2, [r0, #12]
 80076ae:	4606      	mov	r6, r0
 80076b0:	bb02      	cbnz	r2, 80076f4 <_dtoa_r+0xa1c>
 80076b2:	4601      	mov	r1, r0
 80076b4:	4648      	mov	r0, r9
 80076b6:	f000 fc97 	bl	8007fe8 <__mcmp>
 80076ba:	4602      	mov	r2, r0
 80076bc:	4631      	mov	r1, r6
 80076be:	4658      	mov	r0, fp
 80076c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80076c2:	f000 fa0d 	bl	8007ae0 <_Bfree>
 80076c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076ca:	9e07      	ldr	r6, [sp, #28]
 80076cc:	ea43 0102 	orr.w	r1, r3, r2
 80076d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076d2:	4319      	orrs	r1, r3
 80076d4:	d110      	bne.n	80076f8 <_dtoa_r+0xa20>
 80076d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076da:	d029      	beq.n	8007730 <_dtoa_r+0xa58>
 80076dc:	9b08      	ldr	r3, [sp, #32]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	dd02      	ble.n	80076e8 <_dtoa_r+0xa10>
 80076e2:	9b02      	ldr	r3, [sp, #8]
 80076e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80076e8:	9b00      	ldr	r3, [sp, #0]
 80076ea:	f883 8000 	strb.w	r8, [r3]
 80076ee:	e63f      	b.n	8007370 <_dtoa_r+0x698>
 80076f0:	4628      	mov	r0, r5
 80076f2:	e7bb      	b.n	800766c <_dtoa_r+0x994>
 80076f4:	2201      	movs	r2, #1
 80076f6:	e7e1      	b.n	80076bc <_dtoa_r+0x9e4>
 80076f8:	9b08      	ldr	r3, [sp, #32]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	db04      	blt.n	8007708 <_dtoa_r+0xa30>
 80076fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007700:	430b      	orrs	r3, r1
 8007702:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007704:	430b      	orrs	r3, r1
 8007706:	d120      	bne.n	800774a <_dtoa_r+0xa72>
 8007708:	2a00      	cmp	r2, #0
 800770a:	dded      	ble.n	80076e8 <_dtoa_r+0xa10>
 800770c:	4649      	mov	r1, r9
 800770e:	2201      	movs	r2, #1
 8007710:	4658      	mov	r0, fp
 8007712:	f000 fbfd 	bl	8007f10 <__lshift>
 8007716:	4621      	mov	r1, r4
 8007718:	4681      	mov	r9, r0
 800771a:	f000 fc65 	bl	8007fe8 <__mcmp>
 800771e:	2800      	cmp	r0, #0
 8007720:	dc03      	bgt.n	800772a <_dtoa_r+0xa52>
 8007722:	d1e1      	bne.n	80076e8 <_dtoa_r+0xa10>
 8007724:	f018 0f01 	tst.w	r8, #1
 8007728:	d0de      	beq.n	80076e8 <_dtoa_r+0xa10>
 800772a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800772e:	d1d8      	bne.n	80076e2 <_dtoa_r+0xa0a>
 8007730:	9a00      	ldr	r2, [sp, #0]
 8007732:	2339      	movs	r3, #57	@ 0x39
 8007734:	7013      	strb	r3, [r2, #0]
 8007736:	4633      	mov	r3, r6
 8007738:	461e      	mov	r6, r3
 800773a:	3b01      	subs	r3, #1
 800773c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007740:	2a39      	cmp	r2, #57	@ 0x39
 8007742:	d052      	beq.n	80077ea <_dtoa_r+0xb12>
 8007744:	3201      	adds	r2, #1
 8007746:	701a      	strb	r2, [r3, #0]
 8007748:	e612      	b.n	8007370 <_dtoa_r+0x698>
 800774a:	2a00      	cmp	r2, #0
 800774c:	dd07      	ble.n	800775e <_dtoa_r+0xa86>
 800774e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007752:	d0ed      	beq.n	8007730 <_dtoa_r+0xa58>
 8007754:	9a00      	ldr	r2, [sp, #0]
 8007756:	f108 0301 	add.w	r3, r8, #1
 800775a:	7013      	strb	r3, [r2, #0]
 800775c:	e608      	b.n	8007370 <_dtoa_r+0x698>
 800775e:	9b07      	ldr	r3, [sp, #28]
 8007760:	9a07      	ldr	r2, [sp, #28]
 8007762:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007766:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007768:	4293      	cmp	r3, r2
 800776a:	d028      	beq.n	80077be <_dtoa_r+0xae6>
 800776c:	4649      	mov	r1, r9
 800776e:	2300      	movs	r3, #0
 8007770:	220a      	movs	r2, #10
 8007772:	4658      	mov	r0, fp
 8007774:	f000 f9d6 	bl	8007b24 <__multadd>
 8007778:	42af      	cmp	r7, r5
 800777a:	4681      	mov	r9, r0
 800777c:	f04f 0300 	mov.w	r3, #0
 8007780:	f04f 020a 	mov.w	r2, #10
 8007784:	4639      	mov	r1, r7
 8007786:	4658      	mov	r0, fp
 8007788:	d107      	bne.n	800779a <_dtoa_r+0xac2>
 800778a:	f000 f9cb 	bl	8007b24 <__multadd>
 800778e:	4607      	mov	r7, r0
 8007790:	4605      	mov	r5, r0
 8007792:	9b07      	ldr	r3, [sp, #28]
 8007794:	3301      	adds	r3, #1
 8007796:	9307      	str	r3, [sp, #28]
 8007798:	e774      	b.n	8007684 <_dtoa_r+0x9ac>
 800779a:	f000 f9c3 	bl	8007b24 <__multadd>
 800779e:	4629      	mov	r1, r5
 80077a0:	4607      	mov	r7, r0
 80077a2:	2300      	movs	r3, #0
 80077a4:	220a      	movs	r2, #10
 80077a6:	4658      	mov	r0, fp
 80077a8:	f000 f9bc 	bl	8007b24 <__multadd>
 80077ac:	4605      	mov	r5, r0
 80077ae:	e7f0      	b.n	8007792 <_dtoa_r+0xaba>
 80077b0:	9b00      	ldr	r3, [sp, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	bfcc      	ite	gt
 80077b6:	461e      	movgt	r6, r3
 80077b8:	2601      	movle	r6, #1
 80077ba:	4456      	add	r6, sl
 80077bc:	2700      	movs	r7, #0
 80077be:	4649      	mov	r1, r9
 80077c0:	2201      	movs	r2, #1
 80077c2:	4658      	mov	r0, fp
 80077c4:	f000 fba4 	bl	8007f10 <__lshift>
 80077c8:	4621      	mov	r1, r4
 80077ca:	4681      	mov	r9, r0
 80077cc:	f000 fc0c 	bl	8007fe8 <__mcmp>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	dcb0      	bgt.n	8007736 <_dtoa_r+0xa5e>
 80077d4:	d102      	bne.n	80077dc <_dtoa_r+0xb04>
 80077d6:	f018 0f01 	tst.w	r8, #1
 80077da:	d1ac      	bne.n	8007736 <_dtoa_r+0xa5e>
 80077dc:	4633      	mov	r3, r6
 80077de:	461e      	mov	r6, r3
 80077e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077e4:	2a30      	cmp	r2, #48	@ 0x30
 80077e6:	d0fa      	beq.n	80077de <_dtoa_r+0xb06>
 80077e8:	e5c2      	b.n	8007370 <_dtoa_r+0x698>
 80077ea:	459a      	cmp	sl, r3
 80077ec:	d1a4      	bne.n	8007738 <_dtoa_r+0xa60>
 80077ee:	9b04      	ldr	r3, [sp, #16]
 80077f0:	3301      	adds	r3, #1
 80077f2:	9304      	str	r3, [sp, #16]
 80077f4:	2331      	movs	r3, #49	@ 0x31
 80077f6:	f88a 3000 	strb.w	r3, [sl]
 80077fa:	e5b9      	b.n	8007370 <_dtoa_r+0x698>
 80077fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800785c <_dtoa_r+0xb84>
 8007802:	b11b      	cbz	r3, 800780c <_dtoa_r+0xb34>
 8007804:	f10a 0308 	add.w	r3, sl, #8
 8007808:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	4650      	mov	r0, sl
 800780e:	b019      	add	sp, #100	@ 0x64
 8007810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007816:	2b01      	cmp	r3, #1
 8007818:	f77f ae37 	ble.w	800748a <_dtoa_r+0x7b2>
 800781c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800781e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007820:	2001      	movs	r0, #1
 8007822:	e655      	b.n	80074d0 <_dtoa_r+0x7f8>
 8007824:	9b00      	ldr	r3, [sp, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	f77f aed6 	ble.w	80075d8 <_dtoa_r+0x900>
 800782c:	4656      	mov	r6, sl
 800782e:	4621      	mov	r1, r4
 8007830:	4648      	mov	r0, r9
 8007832:	f7ff f9c9 	bl	8006bc8 <quorem>
 8007836:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800783a:	f806 8b01 	strb.w	r8, [r6], #1
 800783e:	9b00      	ldr	r3, [sp, #0]
 8007840:	eba6 020a 	sub.w	r2, r6, sl
 8007844:	4293      	cmp	r3, r2
 8007846:	ddb3      	ble.n	80077b0 <_dtoa_r+0xad8>
 8007848:	4649      	mov	r1, r9
 800784a:	2300      	movs	r3, #0
 800784c:	220a      	movs	r2, #10
 800784e:	4658      	mov	r0, fp
 8007850:	f000 f968 	bl	8007b24 <__multadd>
 8007854:	4681      	mov	r9, r0
 8007856:	e7ea      	b.n	800782e <_dtoa_r+0xb56>
 8007858:	0800abbf 	.word	0x0800abbf
 800785c:	0800ab43 	.word	0x0800ab43

08007860 <_free_r>:
 8007860:	b538      	push	{r3, r4, r5, lr}
 8007862:	4605      	mov	r5, r0
 8007864:	2900      	cmp	r1, #0
 8007866:	d041      	beq.n	80078ec <_free_r+0x8c>
 8007868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800786c:	1f0c      	subs	r4, r1, #4
 800786e:	2b00      	cmp	r3, #0
 8007870:	bfb8      	it	lt
 8007872:	18e4      	addlt	r4, r4, r3
 8007874:	f000 f8e8 	bl	8007a48 <__malloc_lock>
 8007878:	4a1d      	ldr	r2, [pc, #116]	@ (80078f0 <_free_r+0x90>)
 800787a:	6813      	ldr	r3, [r2, #0]
 800787c:	b933      	cbnz	r3, 800788c <_free_r+0x2c>
 800787e:	6063      	str	r3, [r4, #4]
 8007880:	6014      	str	r4, [r2, #0]
 8007882:	4628      	mov	r0, r5
 8007884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007888:	f000 b8e4 	b.w	8007a54 <__malloc_unlock>
 800788c:	42a3      	cmp	r3, r4
 800788e:	d908      	bls.n	80078a2 <_free_r+0x42>
 8007890:	6820      	ldr	r0, [r4, #0]
 8007892:	1821      	adds	r1, r4, r0
 8007894:	428b      	cmp	r3, r1
 8007896:	bf01      	itttt	eq
 8007898:	6819      	ldreq	r1, [r3, #0]
 800789a:	685b      	ldreq	r3, [r3, #4]
 800789c:	1809      	addeq	r1, r1, r0
 800789e:	6021      	streq	r1, [r4, #0]
 80078a0:	e7ed      	b.n	800787e <_free_r+0x1e>
 80078a2:	461a      	mov	r2, r3
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	b10b      	cbz	r3, 80078ac <_free_r+0x4c>
 80078a8:	42a3      	cmp	r3, r4
 80078aa:	d9fa      	bls.n	80078a2 <_free_r+0x42>
 80078ac:	6811      	ldr	r1, [r2, #0]
 80078ae:	1850      	adds	r0, r2, r1
 80078b0:	42a0      	cmp	r0, r4
 80078b2:	d10b      	bne.n	80078cc <_free_r+0x6c>
 80078b4:	6820      	ldr	r0, [r4, #0]
 80078b6:	4401      	add	r1, r0
 80078b8:	1850      	adds	r0, r2, r1
 80078ba:	4283      	cmp	r3, r0
 80078bc:	6011      	str	r1, [r2, #0]
 80078be:	d1e0      	bne.n	8007882 <_free_r+0x22>
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	6053      	str	r3, [r2, #4]
 80078c6:	4408      	add	r0, r1
 80078c8:	6010      	str	r0, [r2, #0]
 80078ca:	e7da      	b.n	8007882 <_free_r+0x22>
 80078cc:	d902      	bls.n	80078d4 <_free_r+0x74>
 80078ce:	230c      	movs	r3, #12
 80078d0:	602b      	str	r3, [r5, #0]
 80078d2:	e7d6      	b.n	8007882 <_free_r+0x22>
 80078d4:	6820      	ldr	r0, [r4, #0]
 80078d6:	1821      	adds	r1, r4, r0
 80078d8:	428b      	cmp	r3, r1
 80078da:	bf04      	itt	eq
 80078dc:	6819      	ldreq	r1, [r3, #0]
 80078de:	685b      	ldreq	r3, [r3, #4]
 80078e0:	6063      	str	r3, [r4, #4]
 80078e2:	bf04      	itt	eq
 80078e4:	1809      	addeq	r1, r1, r0
 80078e6:	6021      	streq	r1, [r4, #0]
 80078e8:	6054      	str	r4, [r2, #4]
 80078ea:	e7ca      	b.n	8007882 <_free_r+0x22>
 80078ec:	bd38      	pop	{r3, r4, r5, pc}
 80078ee:	bf00      	nop
 80078f0:	2000059c 	.word	0x2000059c

080078f4 <malloc>:
 80078f4:	4b02      	ldr	r3, [pc, #8]	@ (8007900 <malloc+0xc>)
 80078f6:	4601      	mov	r1, r0
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	f000 b825 	b.w	8007948 <_malloc_r>
 80078fe:	bf00      	nop
 8007900:	20000030 	.word	0x20000030

08007904 <sbrk_aligned>:
 8007904:	b570      	push	{r4, r5, r6, lr}
 8007906:	4e0f      	ldr	r6, [pc, #60]	@ (8007944 <sbrk_aligned+0x40>)
 8007908:	460c      	mov	r4, r1
 800790a:	6831      	ldr	r1, [r6, #0]
 800790c:	4605      	mov	r5, r0
 800790e:	b911      	cbnz	r1, 8007916 <sbrk_aligned+0x12>
 8007910:	f002 fb4e 	bl	8009fb0 <_sbrk_r>
 8007914:	6030      	str	r0, [r6, #0]
 8007916:	4621      	mov	r1, r4
 8007918:	4628      	mov	r0, r5
 800791a:	f002 fb49 	bl	8009fb0 <_sbrk_r>
 800791e:	1c43      	adds	r3, r0, #1
 8007920:	d103      	bne.n	800792a <sbrk_aligned+0x26>
 8007922:	f04f 34ff 	mov.w	r4, #4294967295
 8007926:	4620      	mov	r0, r4
 8007928:	bd70      	pop	{r4, r5, r6, pc}
 800792a:	1cc4      	adds	r4, r0, #3
 800792c:	f024 0403 	bic.w	r4, r4, #3
 8007930:	42a0      	cmp	r0, r4
 8007932:	d0f8      	beq.n	8007926 <sbrk_aligned+0x22>
 8007934:	1a21      	subs	r1, r4, r0
 8007936:	4628      	mov	r0, r5
 8007938:	f002 fb3a 	bl	8009fb0 <_sbrk_r>
 800793c:	3001      	adds	r0, #1
 800793e:	d1f2      	bne.n	8007926 <sbrk_aligned+0x22>
 8007940:	e7ef      	b.n	8007922 <sbrk_aligned+0x1e>
 8007942:	bf00      	nop
 8007944:	20000598 	.word	0x20000598

08007948 <_malloc_r>:
 8007948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800794c:	1ccd      	adds	r5, r1, #3
 800794e:	f025 0503 	bic.w	r5, r5, #3
 8007952:	3508      	adds	r5, #8
 8007954:	2d0c      	cmp	r5, #12
 8007956:	bf38      	it	cc
 8007958:	250c      	movcc	r5, #12
 800795a:	2d00      	cmp	r5, #0
 800795c:	4606      	mov	r6, r0
 800795e:	db01      	blt.n	8007964 <_malloc_r+0x1c>
 8007960:	42a9      	cmp	r1, r5
 8007962:	d904      	bls.n	800796e <_malloc_r+0x26>
 8007964:	230c      	movs	r3, #12
 8007966:	6033      	str	r3, [r6, #0]
 8007968:	2000      	movs	r0, #0
 800796a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800796e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a44 <_malloc_r+0xfc>
 8007972:	f000 f869 	bl	8007a48 <__malloc_lock>
 8007976:	f8d8 3000 	ldr.w	r3, [r8]
 800797a:	461c      	mov	r4, r3
 800797c:	bb44      	cbnz	r4, 80079d0 <_malloc_r+0x88>
 800797e:	4629      	mov	r1, r5
 8007980:	4630      	mov	r0, r6
 8007982:	f7ff ffbf 	bl	8007904 <sbrk_aligned>
 8007986:	1c43      	adds	r3, r0, #1
 8007988:	4604      	mov	r4, r0
 800798a:	d158      	bne.n	8007a3e <_malloc_r+0xf6>
 800798c:	f8d8 4000 	ldr.w	r4, [r8]
 8007990:	4627      	mov	r7, r4
 8007992:	2f00      	cmp	r7, #0
 8007994:	d143      	bne.n	8007a1e <_malloc_r+0xd6>
 8007996:	2c00      	cmp	r4, #0
 8007998:	d04b      	beq.n	8007a32 <_malloc_r+0xea>
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	4639      	mov	r1, r7
 800799e:	4630      	mov	r0, r6
 80079a0:	eb04 0903 	add.w	r9, r4, r3
 80079a4:	f002 fb04 	bl	8009fb0 <_sbrk_r>
 80079a8:	4581      	cmp	r9, r0
 80079aa:	d142      	bne.n	8007a32 <_malloc_r+0xea>
 80079ac:	6821      	ldr	r1, [r4, #0]
 80079ae:	1a6d      	subs	r5, r5, r1
 80079b0:	4629      	mov	r1, r5
 80079b2:	4630      	mov	r0, r6
 80079b4:	f7ff ffa6 	bl	8007904 <sbrk_aligned>
 80079b8:	3001      	adds	r0, #1
 80079ba:	d03a      	beq.n	8007a32 <_malloc_r+0xea>
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	442b      	add	r3, r5
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	f8d8 3000 	ldr.w	r3, [r8]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	bb62      	cbnz	r2, 8007a24 <_malloc_r+0xdc>
 80079ca:	f8c8 7000 	str.w	r7, [r8]
 80079ce:	e00f      	b.n	80079f0 <_malloc_r+0xa8>
 80079d0:	6822      	ldr	r2, [r4, #0]
 80079d2:	1b52      	subs	r2, r2, r5
 80079d4:	d420      	bmi.n	8007a18 <_malloc_r+0xd0>
 80079d6:	2a0b      	cmp	r2, #11
 80079d8:	d917      	bls.n	8007a0a <_malloc_r+0xc2>
 80079da:	1961      	adds	r1, r4, r5
 80079dc:	42a3      	cmp	r3, r4
 80079de:	6025      	str	r5, [r4, #0]
 80079e0:	bf18      	it	ne
 80079e2:	6059      	strne	r1, [r3, #4]
 80079e4:	6863      	ldr	r3, [r4, #4]
 80079e6:	bf08      	it	eq
 80079e8:	f8c8 1000 	streq.w	r1, [r8]
 80079ec:	5162      	str	r2, [r4, r5]
 80079ee:	604b      	str	r3, [r1, #4]
 80079f0:	4630      	mov	r0, r6
 80079f2:	f000 f82f 	bl	8007a54 <__malloc_unlock>
 80079f6:	f104 000b 	add.w	r0, r4, #11
 80079fa:	1d23      	adds	r3, r4, #4
 80079fc:	f020 0007 	bic.w	r0, r0, #7
 8007a00:	1ac2      	subs	r2, r0, r3
 8007a02:	bf1c      	itt	ne
 8007a04:	1a1b      	subne	r3, r3, r0
 8007a06:	50a3      	strne	r3, [r4, r2]
 8007a08:	e7af      	b.n	800796a <_malloc_r+0x22>
 8007a0a:	6862      	ldr	r2, [r4, #4]
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	bf0c      	ite	eq
 8007a10:	f8c8 2000 	streq.w	r2, [r8]
 8007a14:	605a      	strne	r2, [r3, #4]
 8007a16:	e7eb      	b.n	80079f0 <_malloc_r+0xa8>
 8007a18:	4623      	mov	r3, r4
 8007a1a:	6864      	ldr	r4, [r4, #4]
 8007a1c:	e7ae      	b.n	800797c <_malloc_r+0x34>
 8007a1e:	463c      	mov	r4, r7
 8007a20:	687f      	ldr	r7, [r7, #4]
 8007a22:	e7b6      	b.n	8007992 <_malloc_r+0x4a>
 8007a24:	461a      	mov	r2, r3
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	42a3      	cmp	r3, r4
 8007a2a:	d1fb      	bne.n	8007a24 <_malloc_r+0xdc>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	6053      	str	r3, [r2, #4]
 8007a30:	e7de      	b.n	80079f0 <_malloc_r+0xa8>
 8007a32:	230c      	movs	r3, #12
 8007a34:	6033      	str	r3, [r6, #0]
 8007a36:	4630      	mov	r0, r6
 8007a38:	f000 f80c 	bl	8007a54 <__malloc_unlock>
 8007a3c:	e794      	b.n	8007968 <_malloc_r+0x20>
 8007a3e:	6005      	str	r5, [r0, #0]
 8007a40:	e7d6      	b.n	80079f0 <_malloc_r+0xa8>
 8007a42:	bf00      	nop
 8007a44:	2000059c 	.word	0x2000059c

08007a48 <__malloc_lock>:
 8007a48:	4801      	ldr	r0, [pc, #4]	@ (8007a50 <__malloc_lock+0x8>)
 8007a4a:	f7ff b8b4 	b.w	8006bb6 <__retarget_lock_acquire_recursive>
 8007a4e:	bf00      	nop
 8007a50:	20000594 	.word	0x20000594

08007a54 <__malloc_unlock>:
 8007a54:	4801      	ldr	r0, [pc, #4]	@ (8007a5c <__malloc_unlock+0x8>)
 8007a56:	f7ff b8af 	b.w	8006bb8 <__retarget_lock_release_recursive>
 8007a5a:	bf00      	nop
 8007a5c:	20000594 	.word	0x20000594

08007a60 <_Balloc>:
 8007a60:	b570      	push	{r4, r5, r6, lr}
 8007a62:	69c6      	ldr	r6, [r0, #28]
 8007a64:	4604      	mov	r4, r0
 8007a66:	460d      	mov	r5, r1
 8007a68:	b976      	cbnz	r6, 8007a88 <_Balloc+0x28>
 8007a6a:	2010      	movs	r0, #16
 8007a6c:	f7ff ff42 	bl	80078f4 <malloc>
 8007a70:	4602      	mov	r2, r0
 8007a72:	61e0      	str	r0, [r4, #28]
 8007a74:	b920      	cbnz	r0, 8007a80 <_Balloc+0x20>
 8007a76:	4b18      	ldr	r3, [pc, #96]	@ (8007ad8 <_Balloc+0x78>)
 8007a78:	4818      	ldr	r0, [pc, #96]	@ (8007adc <_Balloc+0x7c>)
 8007a7a:	216b      	movs	r1, #107	@ 0x6b
 8007a7c:	f002 fac0 	bl	800a000 <__assert_func>
 8007a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a84:	6006      	str	r6, [r0, #0]
 8007a86:	60c6      	str	r6, [r0, #12]
 8007a88:	69e6      	ldr	r6, [r4, #28]
 8007a8a:	68f3      	ldr	r3, [r6, #12]
 8007a8c:	b183      	cbz	r3, 8007ab0 <_Balloc+0x50>
 8007a8e:	69e3      	ldr	r3, [r4, #28]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a96:	b9b8      	cbnz	r0, 8007ac8 <_Balloc+0x68>
 8007a98:	2101      	movs	r1, #1
 8007a9a:	fa01 f605 	lsl.w	r6, r1, r5
 8007a9e:	1d72      	adds	r2, r6, #5
 8007aa0:	0092      	lsls	r2, r2, #2
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f002 faca 	bl	800a03c <_calloc_r>
 8007aa8:	b160      	cbz	r0, 8007ac4 <_Balloc+0x64>
 8007aaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007aae:	e00e      	b.n	8007ace <_Balloc+0x6e>
 8007ab0:	2221      	movs	r2, #33	@ 0x21
 8007ab2:	2104      	movs	r1, #4
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f002 fac1 	bl	800a03c <_calloc_r>
 8007aba:	69e3      	ldr	r3, [r4, #28]
 8007abc:	60f0      	str	r0, [r6, #12]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e4      	bne.n	8007a8e <_Balloc+0x2e>
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	bd70      	pop	{r4, r5, r6, pc}
 8007ac8:	6802      	ldr	r2, [r0, #0]
 8007aca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ace:	2300      	movs	r3, #0
 8007ad0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ad4:	e7f7      	b.n	8007ac6 <_Balloc+0x66>
 8007ad6:	bf00      	nop
 8007ad8:	0800ab50 	.word	0x0800ab50
 8007adc:	0800abd0 	.word	0x0800abd0

08007ae0 <_Bfree>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	69c6      	ldr	r6, [r0, #28]
 8007ae4:	4605      	mov	r5, r0
 8007ae6:	460c      	mov	r4, r1
 8007ae8:	b976      	cbnz	r6, 8007b08 <_Bfree+0x28>
 8007aea:	2010      	movs	r0, #16
 8007aec:	f7ff ff02 	bl	80078f4 <malloc>
 8007af0:	4602      	mov	r2, r0
 8007af2:	61e8      	str	r0, [r5, #28]
 8007af4:	b920      	cbnz	r0, 8007b00 <_Bfree+0x20>
 8007af6:	4b09      	ldr	r3, [pc, #36]	@ (8007b1c <_Bfree+0x3c>)
 8007af8:	4809      	ldr	r0, [pc, #36]	@ (8007b20 <_Bfree+0x40>)
 8007afa:	218f      	movs	r1, #143	@ 0x8f
 8007afc:	f002 fa80 	bl	800a000 <__assert_func>
 8007b00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b04:	6006      	str	r6, [r0, #0]
 8007b06:	60c6      	str	r6, [r0, #12]
 8007b08:	b13c      	cbz	r4, 8007b1a <_Bfree+0x3a>
 8007b0a:	69eb      	ldr	r3, [r5, #28]
 8007b0c:	6862      	ldr	r2, [r4, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b14:	6021      	str	r1, [r4, #0]
 8007b16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b1a:	bd70      	pop	{r4, r5, r6, pc}
 8007b1c:	0800ab50 	.word	0x0800ab50
 8007b20:	0800abd0 	.word	0x0800abd0

08007b24 <__multadd>:
 8007b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b28:	690d      	ldr	r5, [r1, #16]
 8007b2a:	4607      	mov	r7, r0
 8007b2c:	460c      	mov	r4, r1
 8007b2e:	461e      	mov	r6, r3
 8007b30:	f101 0c14 	add.w	ip, r1, #20
 8007b34:	2000      	movs	r0, #0
 8007b36:	f8dc 3000 	ldr.w	r3, [ip]
 8007b3a:	b299      	uxth	r1, r3
 8007b3c:	fb02 6101 	mla	r1, r2, r1, r6
 8007b40:	0c1e      	lsrs	r6, r3, #16
 8007b42:	0c0b      	lsrs	r3, r1, #16
 8007b44:	fb02 3306 	mla	r3, r2, r6, r3
 8007b48:	b289      	uxth	r1, r1
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b50:	4285      	cmp	r5, r0
 8007b52:	f84c 1b04 	str.w	r1, [ip], #4
 8007b56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b5a:	dcec      	bgt.n	8007b36 <__multadd+0x12>
 8007b5c:	b30e      	cbz	r6, 8007ba2 <__multadd+0x7e>
 8007b5e:	68a3      	ldr	r3, [r4, #8]
 8007b60:	42ab      	cmp	r3, r5
 8007b62:	dc19      	bgt.n	8007b98 <__multadd+0x74>
 8007b64:	6861      	ldr	r1, [r4, #4]
 8007b66:	4638      	mov	r0, r7
 8007b68:	3101      	adds	r1, #1
 8007b6a:	f7ff ff79 	bl	8007a60 <_Balloc>
 8007b6e:	4680      	mov	r8, r0
 8007b70:	b928      	cbnz	r0, 8007b7e <__multadd+0x5a>
 8007b72:	4602      	mov	r2, r0
 8007b74:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba8 <__multadd+0x84>)
 8007b76:	480d      	ldr	r0, [pc, #52]	@ (8007bac <__multadd+0x88>)
 8007b78:	21ba      	movs	r1, #186	@ 0xba
 8007b7a:	f002 fa41 	bl	800a000 <__assert_func>
 8007b7e:	6922      	ldr	r2, [r4, #16]
 8007b80:	3202      	adds	r2, #2
 8007b82:	f104 010c 	add.w	r1, r4, #12
 8007b86:	0092      	lsls	r2, r2, #2
 8007b88:	300c      	adds	r0, #12
 8007b8a:	f002 fa21 	bl	8009fd0 <memcpy>
 8007b8e:	4621      	mov	r1, r4
 8007b90:	4638      	mov	r0, r7
 8007b92:	f7ff ffa5 	bl	8007ae0 <_Bfree>
 8007b96:	4644      	mov	r4, r8
 8007b98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b9c:	3501      	adds	r5, #1
 8007b9e:	615e      	str	r6, [r3, #20]
 8007ba0:	6125      	str	r5, [r4, #16]
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ba8:	0800abbf 	.word	0x0800abbf
 8007bac:	0800abd0 	.word	0x0800abd0

08007bb0 <__s2b>:
 8007bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	4615      	mov	r5, r2
 8007bb8:	461f      	mov	r7, r3
 8007bba:	2209      	movs	r2, #9
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	db09      	blt.n	8007be0 <__s2b+0x30>
 8007bcc:	4630      	mov	r0, r6
 8007bce:	f7ff ff47 	bl	8007a60 <_Balloc>
 8007bd2:	b940      	cbnz	r0, 8007be6 <__s2b+0x36>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	4b19      	ldr	r3, [pc, #100]	@ (8007c3c <__s2b+0x8c>)
 8007bd8:	4819      	ldr	r0, [pc, #100]	@ (8007c40 <__s2b+0x90>)
 8007bda:	21d3      	movs	r1, #211	@ 0xd3
 8007bdc:	f002 fa10 	bl	800a000 <__assert_func>
 8007be0:	0052      	lsls	r2, r2, #1
 8007be2:	3101      	adds	r1, #1
 8007be4:	e7f0      	b.n	8007bc8 <__s2b+0x18>
 8007be6:	9b08      	ldr	r3, [sp, #32]
 8007be8:	6143      	str	r3, [r0, #20]
 8007bea:	2d09      	cmp	r5, #9
 8007bec:	f04f 0301 	mov.w	r3, #1
 8007bf0:	6103      	str	r3, [r0, #16]
 8007bf2:	dd16      	ble.n	8007c22 <__s2b+0x72>
 8007bf4:	f104 0909 	add.w	r9, r4, #9
 8007bf8:	46c8      	mov	r8, r9
 8007bfa:	442c      	add	r4, r5
 8007bfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007c00:	4601      	mov	r1, r0
 8007c02:	3b30      	subs	r3, #48	@ 0x30
 8007c04:	220a      	movs	r2, #10
 8007c06:	4630      	mov	r0, r6
 8007c08:	f7ff ff8c 	bl	8007b24 <__multadd>
 8007c0c:	45a0      	cmp	r8, r4
 8007c0e:	d1f5      	bne.n	8007bfc <__s2b+0x4c>
 8007c10:	f1a5 0408 	sub.w	r4, r5, #8
 8007c14:	444c      	add	r4, r9
 8007c16:	1b2d      	subs	r5, r5, r4
 8007c18:	1963      	adds	r3, r4, r5
 8007c1a:	42bb      	cmp	r3, r7
 8007c1c:	db04      	blt.n	8007c28 <__s2b+0x78>
 8007c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c22:	340a      	adds	r4, #10
 8007c24:	2509      	movs	r5, #9
 8007c26:	e7f6      	b.n	8007c16 <__s2b+0x66>
 8007c28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c2c:	4601      	mov	r1, r0
 8007c2e:	3b30      	subs	r3, #48	@ 0x30
 8007c30:	220a      	movs	r2, #10
 8007c32:	4630      	mov	r0, r6
 8007c34:	f7ff ff76 	bl	8007b24 <__multadd>
 8007c38:	e7ee      	b.n	8007c18 <__s2b+0x68>
 8007c3a:	bf00      	nop
 8007c3c:	0800abbf 	.word	0x0800abbf
 8007c40:	0800abd0 	.word	0x0800abd0

08007c44 <__hi0bits>:
 8007c44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007c48:	4603      	mov	r3, r0
 8007c4a:	bf36      	itet	cc
 8007c4c:	0403      	lslcc	r3, r0, #16
 8007c4e:	2000      	movcs	r0, #0
 8007c50:	2010      	movcc	r0, #16
 8007c52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c56:	bf3c      	itt	cc
 8007c58:	021b      	lslcc	r3, r3, #8
 8007c5a:	3008      	addcc	r0, #8
 8007c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c60:	bf3c      	itt	cc
 8007c62:	011b      	lslcc	r3, r3, #4
 8007c64:	3004      	addcc	r0, #4
 8007c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c6a:	bf3c      	itt	cc
 8007c6c:	009b      	lslcc	r3, r3, #2
 8007c6e:	3002      	addcc	r0, #2
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	db05      	blt.n	8007c80 <__hi0bits+0x3c>
 8007c74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007c78:	f100 0001 	add.w	r0, r0, #1
 8007c7c:	bf08      	it	eq
 8007c7e:	2020      	moveq	r0, #32
 8007c80:	4770      	bx	lr

08007c82 <__lo0bits>:
 8007c82:	6803      	ldr	r3, [r0, #0]
 8007c84:	4602      	mov	r2, r0
 8007c86:	f013 0007 	ands.w	r0, r3, #7
 8007c8a:	d00b      	beq.n	8007ca4 <__lo0bits+0x22>
 8007c8c:	07d9      	lsls	r1, r3, #31
 8007c8e:	d421      	bmi.n	8007cd4 <__lo0bits+0x52>
 8007c90:	0798      	lsls	r0, r3, #30
 8007c92:	bf49      	itett	mi
 8007c94:	085b      	lsrmi	r3, r3, #1
 8007c96:	089b      	lsrpl	r3, r3, #2
 8007c98:	2001      	movmi	r0, #1
 8007c9a:	6013      	strmi	r3, [r2, #0]
 8007c9c:	bf5c      	itt	pl
 8007c9e:	6013      	strpl	r3, [r2, #0]
 8007ca0:	2002      	movpl	r0, #2
 8007ca2:	4770      	bx	lr
 8007ca4:	b299      	uxth	r1, r3
 8007ca6:	b909      	cbnz	r1, 8007cac <__lo0bits+0x2a>
 8007ca8:	0c1b      	lsrs	r3, r3, #16
 8007caa:	2010      	movs	r0, #16
 8007cac:	b2d9      	uxtb	r1, r3
 8007cae:	b909      	cbnz	r1, 8007cb4 <__lo0bits+0x32>
 8007cb0:	3008      	adds	r0, #8
 8007cb2:	0a1b      	lsrs	r3, r3, #8
 8007cb4:	0719      	lsls	r1, r3, #28
 8007cb6:	bf04      	itt	eq
 8007cb8:	091b      	lsreq	r3, r3, #4
 8007cba:	3004      	addeq	r0, #4
 8007cbc:	0799      	lsls	r1, r3, #30
 8007cbe:	bf04      	itt	eq
 8007cc0:	089b      	lsreq	r3, r3, #2
 8007cc2:	3002      	addeq	r0, #2
 8007cc4:	07d9      	lsls	r1, r3, #31
 8007cc6:	d403      	bmi.n	8007cd0 <__lo0bits+0x4e>
 8007cc8:	085b      	lsrs	r3, r3, #1
 8007cca:	f100 0001 	add.w	r0, r0, #1
 8007cce:	d003      	beq.n	8007cd8 <__lo0bits+0x56>
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	4770      	bx	lr
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	4770      	bx	lr
 8007cd8:	2020      	movs	r0, #32
 8007cda:	4770      	bx	lr

08007cdc <__i2b>:
 8007cdc:	b510      	push	{r4, lr}
 8007cde:	460c      	mov	r4, r1
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	f7ff febd 	bl	8007a60 <_Balloc>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	b928      	cbnz	r0, 8007cf6 <__i2b+0x1a>
 8007cea:	4b05      	ldr	r3, [pc, #20]	@ (8007d00 <__i2b+0x24>)
 8007cec:	4805      	ldr	r0, [pc, #20]	@ (8007d04 <__i2b+0x28>)
 8007cee:	f240 1145 	movw	r1, #325	@ 0x145
 8007cf2:	f002 f985 	bl	800a000 <__assert_func>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	6144      	str	r4, [r0, #20]
 8007cfa:	6103      	str	r3, [r0, #16]
 8007cfc:	bd10      	pop	{r4, pc}
 8007cfe:	bf00      	nop
 8007d00:	0800abbf 	.word	0x0800abbf
 8007d04:	0800abd0 	.word	0x0800abd0

08007d08 <__multiply>:
 8007d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	4614      	mov	r4, r2
 8007d0e:	690a      	ldr	r2, [r1, #16]
 8007d10:	6923      	ldr	r3, [r4, #16]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	bfa8      	it	ge
 8007d16:	4623      	movge	r3, r4
 8007d18:	460f      	mov	r7, r1
 8007d1a:	bfa4      	itt	ge
 8007d1c:	460c      	movge	r4, r1
 8007d1e:	461f      	movge	r7, r3
 8007d20:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007d24:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007d28:	68a3      	ldr	r3, [r4, #8]
 8007d2a:	6861      	ldr	r1, [r4, #4]
 8007d2c:	eb0a 0609 	add.w	r6, sl, r9
 8007d30:	42b3      	cmp	r3, r6
 8007d32:	b085      	sub	sp, #20
 8007d34:	bfb8      	it	lt
 8007d36:	3101      	addlt	r1, #1
 8007d38:	f7ff fe92 	bl	8007a60 <_Balloc>
 8007d3c:	b930      	cbnz	r0, 8007d4c <__multiply+0x44>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	4b44      	ldr	r3, [pc, #272]	@ (8007e54 <__multiply+0x14c>)
 8007d42:	4845      	ldr	r0, [pc, #276]	@ (8007e58 <__multiply+0x150>)
 8007d44:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007d48:	f002 f95a 	bl	800a000 <__assert_func>
 8007d4c:	f100 0514 	add.w	r5, r0, #20
 8007d50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d54:	462b      	mov	r3, r5
 8007d56:	2200      	movs	r2, #0
 8007d58:	4543      	cmp	r3, r8
 8007d5a:	d321      	bcc.n	8007da0 <__multiply+0x98>
 8007d5c:	f107 0114 	add.w	r1, r7, #20
 8007d60:	f104 0214 	add.w	r2, r4, #20
 8007d64:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007d68:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007d6c:	9302      	str	r3, [sp, #8]
 8007d6e:	1b13      	subs	r3, r2, r4
 8007d70:	3b15      	subs	r3, #21
 8007d72:	f023 0303 	bic.w	r3, r3, #3
 8007d76:	3304      	adds	r3, #4
 8007d78:	f104 0715 	add.w	r7, r4, #21
 8007d7c:	42ba      	cmp	r2, r7
 8007d7e:	bf38      	it	cc
 8007d80:	2304      	movcc	r3, #4
 8007d82:	9301      	str	r3, [sp, #4]
 8007d84:	9b02      	ldr	r3, [sp, #8]
 8007d86:	9103      	str	r1, [sp, #12]
 8007d88:	428b      	cmp	r3, r1
 8007d8a:	d80c      	bhi.n	8007da6 <__multiply+0x9e>
 8007d8c:	2e00      	cmp	r6, #0
 8007d8e:	dd03      	ble.n	8007d98 <__multiply+0x90>
 8007d90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d05b      	beq.n	8007e50 <__multiply+0x148>
 8007d98:	6106      	str	r6, [r0, #16]
 8007d9a:	b005      	add	sp, #20
 8007d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da0:	f843 2b04 	str.w	r2, [r3], #4
 8007da4:	e7d8      	b.n	8007d58 <__multiply+0x50>
 8007da6:	f8b1 a000 	ldrh.w	sl, [r1]
 8007daa:	f1ba 0f00 	cmp.w	sl, #0
 8007dae:	d024      	beq.n	8007dfa <__multiply+0xf2>
 8007db0:	f104 0e14 	add.w	lr, r4, #20
 8007db4:	46a9      	mov	r9, r5
 8007db6:	f04f 0c00 	mov.w	ip, #0
 8007dba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007dbe:	f8d9 3000 	ldr.w	r3, [r9]
 8007dc2:	fa1f fb87 	uxth.w	fp, r7
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	fb0a 330b 	mla	r3, sl, fp, r3
 8007dcc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007dd0:	f8d9 7000 	ldr.w	r7, [r9]
 8007dd4:	4463      	add	r3, ip
 8007dd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007dda:	fb0a c70b 	mla	r7, sl, fp, ip
 8007dde:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007de8:	4572      	cmp	r2, lr
 8007dea:	f849 3b04 	str.w	r3, [r9], #4
 8007dee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007df2:	d8e2      	bhi.n	8007dba <__multiply+0xb2>
 8007df4:	9b01      	ldr	r3, [sp, #4]
 8007df6:	f845 c003 	str.w	ip, [r5, r3]
 8007dfa:	9b03      	ldr	r3, [sp, #12]
 8007dfc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007e00:	3104      	adds	r1, #4
 8007e02:	f1b9 0f00 	cmp.w	r9, #0
 8007e06:	d021      	beq.n	8007e4c <__multiply+0x144>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	f104 0c14 	add.w	ip, r4, #20
 8007e0e:	46ae      	mov	lr, r5
 8007e10:	f04f 0a00 	mov.w	sl, #0
 8007e14:	f8bc b000 	ldrh.w	fp, [ip]
 8007e18:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007e1c:	fb09 770b 	mla	r7, r9, fp, r7
 8007e20:	4457      	add	r7, sl
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e28:	f84e 3b04 	str.w	r3, [lr], #4
 8007e2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e34:	f8be 3000 	ldrh.w	r3, [lr]
 8007e38:	fb09 330a 	mla	r3, r9, sl, r3
 8007e3c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007e40:	4562      	cmp	r2, ip
 8007e42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e46:	d8e5      	bhi.n	8007e14 <__multiply+0x10c>
 8007e48:	9f01      	ldr	r7, [sp, #4]
 8007e4a:	51eb      	str	r3, [r5, r7]
 8007e4c:	3504      	adds	r5, #4
 8007e4e:	e799      	b.n	8007d84 <__multiply+0x7c>
 8007e50:	3e01      	subs	r6, #1
 8007e52:	e79b      	b.n	8007d8c <__multiply+0x84>
 8007e54:	0800abbf 	.word	0x0800abbf
 8007e58:	0800abd0 	.word	0x0800abd0

08007e5c <__pow5mult>:
 8007e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e60:	4615      	mov	r5, r2
 8007e62:	f012 0203 	ands.w	r2, r2, #3
 8007e66:	4607      	mov	r7, r0
 8007e68:	460e      	mov	r6, r1
 8007e6a:	d007      	beq.n	8007e7c <__pow5mult+0x20>
 8007e6c:	4c25      	ldr	r4, [pc, #148]	@ (8007f04 <__pow5mult+0xa8>)
 8007e6e:	3a01      	subs	r2, #1
 8007e70:	2300      	movs	r3, #0
 8007e72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e76:	f7ff fe55 	bl	8007b24 <__multadd>
 8007e7a:	4606      	mov	r6, r0
 8007e7c:	10ad      	asrs	r5, r5, #2
 8007e7e:	d03d      	beq.n	8007efc <__pow5mult+0xa0>
 8007e80:	69fc      	ldr	r4, [r7, #28]
 8007e82:	b97c      	cbnz	r4, 8007ea4 <__pow5mult+0x48>
 8007e84:	2010      	movs	r0, #16
 8007e86:	f7ff fd35 	bl	80078f4 <malloc>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	61f8      	str	r0, [r7, #28]
 8007e8e:	b928      	cbnz	r0, 8007e9c <__pow5mult+0x40>
 8007e90:	4b1d      	ldr	r3, [pc, #116]	@ (8007f08 <__pow5mult+0xac>)
 8007e92:	481e      	ldr	r0, [pc, #120]	@ (8007f0c <__pow5mult+0xb0>)
 8007e94:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007e98:	f002 f8b2 	bl	800a000 <__assert_func>
 8007e9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ea0:	6004      	str	r4, [r0, #0]
 8007ea2:	60c4      	str	r4, [r0, #12]
 8007ea4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ea8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007eac:	b94c      	cbnz	r4, 8007ec2 <__pow5mult+0x66>
 8007eae:	f240 2171 	movw	r1, #625	@ 0x271
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	f7ff ff12 	bl	8007cdc <__i2b>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	6003      	str	r3, [r0, #0]
 8007ec2:	f04f 0900 	mov.w	r9, #0
 8007ec6:	07eb      	lsls	r3, r5, #31
 8007ec8:	d50a      	bpl.n	8007ee0 <__pow5mult+0x84>
 8007eca:	4631      	mov	r1, r6
 8007ecc:	4622      	mov	r2, r4
 8007ece:	4638      	mov	r0, r7
 8007ed0:	f7ff ff1a 	bl	8007d08 <__multiply>
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	4680      	mov	r8, r0
 8007ed8:	4638      	mov	r0, r7
 8007eda:	f7ff fe01 	bl	8007ae0 <_Bfree>
 8007ede:	4646      	mov	r6, r8
 8007ee0:	106d      	asrs	r5, r5, #1
 8007ee2:	d00b      	beq.n	8007efc <__pow5mult+0xa0>
 8007ee4:	6820      	ldr	r0, [r4, #0]
 8007ee6:	b938      	cbnz	r0, 8007ef8 <__pow5mult+0x9c>
 8007ee8:	4622      	mov	r2, r4
 8007eea:	4621      	mov	r1, r4
 8007eec:	4638      	mov	r0, r7
 8007eee:	f7ff ff0b 	bl	8007d08 <__multiply>
 8007ef2:	6020      	str	r0, [r4, #0]
 8007ef4:	f8c0 9000 	str.w	r9, [r0]
 8007ef8:	4604      	mov	r4, r0
 8007efa:	e7e4      	b.n	8007ec6 <__pow5mult+0x6a>
 8007efc:	4630      	mov	r0, r6
 8007efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f02:	bf00      	nop
 8007f04:	0800ac2c 	.word	0x0800ac2c
 8007f08:	0800ab50 	.word	0x0800ab50
 8007f0c:	0800abd0 	.word	0x0800abd0

08007f10 <__lshift>:
 8007f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f14:	460c      	mov	r4, r1
 8007f16:	6849      	ldr	r1, [r1, #4]
 8007f18:	6923      	ldr	r3, [r4, #16]
 8007f1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f1e:	68a3      	ldr	r3, [r4, #8]
 8007f20:	4607      	mov	r7, r0
 8007f22:	4691      	mov	r9, r2
 8007f24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f28:	f108 0601 	add.w	r6, r8, #1
 8007f2c:	42b3      	cmp	r3, r6
 8007f2e:	db0b      	blt.n	8007f48 <__lshift+0x38>
 8007f30:	4638      	mov	r0, r7
 8007f32:	f7ff fd95 	bl	8007a60 <_Balloc>
 8007f36:	4605      	mov	r5, r0
 8007f38:	b948      	cbnz	r0, 8007f4e <__lshift+0x3e>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	4b28      	ldr	r3, [pc, #160]	@ (8007fe0 <__lshift+0xd0>)
 8007f3e:	4829      	ldr	r0, [pc, #164]	@ (8007fe4 <__lshift+0xd4>)
 8007f40:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007f44:	f002 f85c 	bl	800a000 <__assert_func>
 8007f48:	3101      	adds	r1, #1
 8007f4a:	005b      	lsls	r3, r3, #1
 8007f4c:	e7ee      	b.n	8007f2c <__lshift+0x1c>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f100 0114 	add.w	r1, r0, #20
 8007f54:	f100 0210 	add.w	r2, r0, #16
 8007f58:	4618      	mov	r0, r3
 8007f5a:	4553      	cmp	r3, sl
 8007f5c:	db33      	blt.n	8007fc6 <__lshift+0xb6>
 8007f5e:	6920      	ldr	r0, [r4, #16]
 8007f60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f64:	f104 0314 	add.w	r3, r4, #20
 8007f68:	f019 091f 	ands.w	r9, r9, #31
 8007f6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f74:	d02b      	beq.n	8007fce <__lshift+0xbe>
 8007f76:	f1c9 0e20 	rsb	lr, r9, #32
 8007f7a:	468a      	mov	sl, r1
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	6818      	ldr	r0, [r3, #0]
 8007f80:	fa00 f009 	lsl.w	r0, r0, r9
 8007f84:	4310      	orrs	r0, r2
 8007f86:	f84a 0b04 	str.w	r0, [sl], #4
 8007f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f8e:	459c      	cmp	ip, r3
 8007f90:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f94:	d8f3      	bhi.n	8007f7e <__lshift+0x6e>
 8007f96:	ebac 0304 	sub.w	r3, ip, r4
 8007f9a:	3b15      	subs	r3, #21
 8007f9c:	f023 0303 	bic.w	r3, r3, #3
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	f104 0015 	add.w	r0, r4, #21
 8007fa6:	4584      	cmp	ip, r0
 8007fa8:	bf38      	it	cc
 8007faa:	2304      	movcc	r3, #4
 8007fac:	50ca      	str	r2, [r1, r3]
 8007fae:	b10a      	cbz	r2, 8007fb4 <__lshift+0xa4>
 8007fb0:	f108 0602 	add.w	r6, r8, #2
 8007fb4:	3e01      	subs	r6, #1
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	612e      	str	r6, [r5, #16]
 8007fba:	4621      	mov	r1, r4
 8007fbc:	f7ff fd90 	bl	8007ae0 <_Bfree>
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fca:	3301      	adds	r3, #1
 8007fcc:	e7c5      	b.n	8007f5a <__lshift+0x4a>
 8007fce:	3904      	subs	r1, #4
 8007fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fd4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fd8:	459c      	cmp	ip, r3
 8007fda:	d8f9      	bhi.n	8007fd0 <__lshift+0xc0>
 8007fdc:	e7ea      	b.n	8007fb4 <__lshift+0xa4>
 8007fde:	bf00      	nop
 8007fe0:	0800abbf 	.word	0x0800abbf
 8007fe4:	0800abd0 	.word	0x0800abd0

08007fe8 <__mcmp>:
 8007fe8:	690a      	ldr	r2, [r1, #16]
 8007fea:	4603      	mov	r3, r0
 8007fec:	6900      	ldr	r0, [r0, #16]
 8007fee:	1a80      	subs	r0, r0, r2
 8007ff0:	b530      	push	{r4, r5, lr}
 8007ff2:	d10e      	bne.n	8008012 <__mcmp+0x2a>
 8007ff4:	3314      	adds	r3, #20
 8007ff6:	3114      	adds	r1, #20
 8007ff8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ffc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008000:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008004:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008008:	4295      	cmp	r5, r2
 800800a:	d003      	beq.n	8008014 <__mcmp+0x2c>
 800800c:	d205      	bcs.n	800801a <__mcmp+0x32>
 800800e:	f04f 30ff 	mov.w	r0, #4294967295
 8008012:	bd30      	pop	{r4, r5, pc}
 8008014:	42a3      	cmp	r3, r4
 8008016:	d3f3      	bcc.n	8008000 <__mcmp+0x18>
 8008018:	e7fb      	b.n	8008012 <__mcmp+0x2a>
 800801a:	2001      	movs	r0, #1
 800801c:	e7f9      	b.n	8008012 <__mcmp+0x2a>
	...

08008020 <__mdiff>:
 8008020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008024:	4689      	mov	r9, r1
 8008026:	4606      	mov	r6, r0
 8008028:	4611      	mov	r1, r2
 800802a:	4648      	mov	r0, r9
 800802c:	4614      	mov	r4, r2
 800802e:	f7ff ffdb 	bl	8007fe8 <__mcmp>
 8008032:	1e05      	subs	r5, r0, #0
 8008034:	d112      	bne.n	800805c <__mdiff+0x3c>
 8008036:	4629      	mov	r1, r5
 8008038:	4630      	mov	r0, r6
 800803a:	f7ff fd11 	bl	8007a60 <_Balloc>
 800803e:	4602      	mov	r2, r0
 8008040:	b928      	cbnz	r0, 800804e <__mdiff+0x2e>
 8008042:	4b3f      	ldr	r3, [pc, #252]	@ (8008140 <__mdiff+0x120>)
 8008044:	f240 2137 	movw	r1, #567	@ 0x237
 8008048:	483e      	ldr	r0, [pc, #248]	@ (8008144 <__mdiff+0x124>)
 800804a:	f001 ffd9 	bl	800a000 <__assert_func>
 800804e:	2301      	movs	r3, #1
 8008050:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008054:	4610      	mov	r0, r2
 8008056:	b003      	add	sp, #12
 8008058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800805c:	bfbc      	itt	lt
 800805e:	464b      	movlt	r3, r9
 8008060:	46a1      	movlt	r9, r4
 8008062:	4630      	mov	r0, r6
 8008064:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008068:	bfba      	itte	lt
 800806a:	461c      	movlt	r4, r3
 800806c:	2501      	movlt	r5, #1
 800806e:	2500      	movge	r5, #0
 8008070:	f7ff fcf6 	bl	8007a60 <_Balloc>
 8008074:	4602      	mov	r2, r0
 8008076:	b918      	cbnz	r0, 8008080 <__mdiff+0x60>
 8008078:	4b31      	ldr	r3, [pc, #196]	@ (8008140 <__mdiff+0x120>)
 800807a:	f240 2145 	movw	r1, #581	@ 0x245
 800807e:	e7e3      	b.n	8008048 <__mdiff+0x28>
 8008080:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008084:	6926      	ldr	r6, [r4, #16]
 8008086:	60c5      	str	r5, [r0, #12]
 8008088:	f109 0310 	add.w	r3, r9, #16
 800808c:	f109 0514 	add.w	r5, r9, #20
 8008090:	f104 0e14 	add.w	lr, r4, #20
 8008094:	f100 0b14 	add.w	fp, r0, #20
 8008098:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800809c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80080a0:	9301      	str	r3, [sp, #4]
 80080a2:	46d9      	mov	r9, fp
 80080a4:	f04f 0c00 	mov.w	ip, #0
 80080a8:	9b01      	ldr	r3, [sp, #4]
 80080aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80080ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 80080b2:	9301      	str	r3, [sp, #4]
 80080b4:	fa1f f38a 	uxth.w	r3, sl
 80080b8:	4619      	mov	r1, r3
 80080ba:	b283      	uxth	r3, r0
 80080bc:	1acb      	subs	r3, r1, r3
 80080be:	0c00      	lsrs	r0, r0, #16
 80080c0:	4463      	add	r3, ip
 80080c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80080c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80080d0:	4576      	cmp	r6, lr
 80080d2:	f849 3b04 	str.w	r3, [r9], #4
 80080d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080da:	d8e5      	bhi.n	80080a8 <__mdiff+0x88>
 80080dc:	1b33      	subs	r3, r6, r4
 80080de:	3b15      	subs	r3, #21
 80080e0:	f023 0303 	bic.w	r3, r3, #3
 80080e4:	3415      	adds	r4, #21
 80080e6:	3304      	adds	r3, #4
 80080e8:	42a6      	cmp	r6, r4
 80080ea:	bf38      	it	cc
 80080ec:	2304      	movcc	r3, #4
 80080ee:	441d      	add	r5, r3
 80080f0:	445b      	add	r3, fp
 80080f2:	461e      	mov	r6, r3
 80080f4:	462c      	mov	r4, r5
 80080f6:	4544      	cmp	r4, r8
 80080f8:	d30e      	bcc.n	8008118 <__mdiff+0xf8>
 80080fa:	f108 0103 	add.w	r1, r8, #3
 80080fe:	1b49      	subs	r1, r1, r5
 8008100:	f021 0103 	bic.w	r1, r1, #3
 8008104:	3d03      	subs	r5, #3
 8008106:	45a8      	cmp	r8, r5
 8008108:	bf38      	it	cc
 800810a:	2100      	movcc	r1, #0
 800810c:	440b      	add	r3, r1
 800810e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008112:	b191      	cbz	r1, 800813a <__mdiff+0x11a>
 8008114:	6117      	str	r7, [r2, #16]
 8008116:	e79d      	b.n	8008054 <__mdiff+0x34>
 8008118:	f854 1b04 	ldr.w	r1, [r4], #4
 800811c:	46e6      	mov	lr, ip
 800811e:	0c08      	lsrs	r0, r1, #16
 8008120:	fa1c fc81 	uxtah	ip, ip, r1
 8008124:	4471      	add	r1, lr
 8008126:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800812a:	b289      	uxth	r1, r1
 800812c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008130:	f846 1b04 	str.w	r1, [r6], #4
 8008134:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008138:	e7dd      	b.n	80080f6 <__mdiff+0xd6>
 800813a:	3f01      	subs	r7, #1
 800813c:	e7e7      	b.n	800810e <__mdiff+0xee>
 800813e:	bf00      	nop
 8008140:	0800abbf 	.word	0x0800abbf
 8008144:	0800abd0 	.word	0x0800abd0

08008148 <__ulp>:
 8008148:	b082      	sub	sp, #8
 800814a:	ed8d 0b00 	vstr	d0, [sp]
 800814e:	9a01      	ldr	r2, [sp, #4]
 8008150:	4b0f      	ldr	r3, [pc, #60]	@ (8008190 <__ulp+0x48>)
 8008152:	4013      	ands	r3, r2
 8008154:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008158:	2b00      	cmp	r3, #0
 800815a:	dc08      	bgt.n	800816e <__ulp+0x26>
 800815c:	425b      	negs	r3, r3
 800815e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008162:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008166:	da04      	bge.n	8008172 <__ulp+0x2a>
 8008168:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800816c:	4113      	asrs	r3, r2
 800816e:	2200      	movs	r2, #0
 8008170:	e008      	b.n	8008184 <__ulp+0x3c>
 8008172:	f1a2 0314 	sub.w	r3, r2, #20
 8008176:	2b1e      	cmp	r3, #30
 8008178:	bfda      	itte	le
 800817a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800817e:	40da      	lsrle	r2, r3
 8008180:	2201      	movgt	r2, #1
 8008182:	2300      	movs	r3, #0
 8008184:	4619      	mov	r1, r3
 8008186:	4610      	mov	r0, r2
 8008188:	ec41 0b10 	vmov	d0, r0, r1
 800818c:	b002      	add	sp, #8
 800818e:	4770      	bx	lr
 8008190:	7ff00000 	.word	0x7ff00000

08008194 <__b2d>:
 8008194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008198:	6906      	ldr	r6, [r0, #16]
 800819a:	f100 0814 	add.w	r8, r0, #20
 800819e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80081a2:	1f37      	subs	r7, r6, #4
 80081a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80081a8:	4610      	mov	r0, r2
 80081aa:	f7ff fd4b 	bl	8007c44 <__hi0bits>
 80081ae:	f1c0 0320 	rsb	r3, r0, #32
 80081b2:	280a      	cmp	r0, #10
 80081b4:	600b      	str	r3, [r1, #0]
 80081b6:	491b      	ldr	r1, [pc, #108]	@ (8008224 <__b2d+0x90>)
 80081b8:	dc15      	bgt.n	80081e6 <__b2d+0x52>
 80081ba:	f1c0 0c0b 	rsb	ip, r0, #11
 80081be:	fa22 f30c 	lsr.w	r3, r2, ip
 80081c2:	45b8      	cmp	r8, r7
 80081c4:	ea43 0501 	orr.w	r5, r3, r1
 80081c8:	bf34      	ite	cc
 80081ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80081ce:	2300      	movcs	r3, #0
 80081d0:	3015      	adds	r0, #21
 80081d2:	fa02 f000 	lsl.w	r0, r2, r0
 80081d6:	fa23 f30c 	lsr.w	r3, r3, ip
 80081da:	4303      	orrs	r3, r0
 80081dc:	461c      	mov	r4, r3
 80081de:	ec45 4b10 	vmov	d0, r4, r5
 80081e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e6:	45b8      	cmp	r8, r7
 80081e8:	bf3a      	itte	cc
 80081ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80081ee:	f1a6 0708 	subcc.w	r7, r6, #8
 80081f2:	2300      	movcs	r3, #0
 80081f4:	380b      	subs	r0, #11
 80081f6:	d012      	beq.n	800821e <__b2d+0x8a>
 80081f8:	f1c0 0120 	rsb	r1, r0, #32
 80081fc:	fa23 f401 	lsr.w	r4, r3, r1
 8008200:	4082      	lsls	r2, r0
 8008202:	4322      	orrs	r2, r4
 8008204:	4547      	cmp	r7, r8
 8008206:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800820a:	bf8c      	ite	hi
 800820c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008210:	2200      	movls	r2, #0
 8008212:	4083      	lsls	r3, r0
 8008214:	40ca      	lsrs	r2, r1
 8008216:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800821a:	4313      	orrs	r3, r2
 800821c:	e7de      	b.n	80081dc <__b2d+0x48>
 800821e:	ea42 0501 	orr.w	r5, r2, r1
 8008222:	e7db      	b.n	80081dc <__b2d+0x48>
 8008224:	3ff00000 	.word	0x3ff00000

08008228 <__d2b>:
 8008228:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800822c:	460f      	mov	r7, r1
 800822e:	2101      	movs	r1, #1
 8008230:	ec59 8b10 	vmov	r8, r9, d0
 8008234:	4616      	mov	r6, r2
 8008236:	f7ff fc13 	bl	8007a60 <_Balloc>
 800823a:	4604      	mov	r4, r0
 800823c:	b930      	cbnz	r0, 800824c <__d2b+0x24>
 800823e:	4602      	mov	r2, r0
 8008240:	4b23      	ldr	r3, [pc, #140]	@ (80082d0 <__d2b+0xa8>)
 8008242:	4824      	ldr	r0, [pc, #144]	@ (80082d4 <__d2b+0xac>)
 8008244:	f240 310f 	movw	r1, #783	@ 0x30f
 8008248:	f001 feda 	bl	800a000 <__assert_func>
 800824c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008250:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008254:	b10d      	cbz	r5, 800825a <__d2b+0x32>
 8008256:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	f1b8 0300 	subs.w	r3, r8, #0
 8008260:	d023      	beq.n	80082aa <__d2b+0x82>
 8008262:	4668      	mov	r0, sp
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	f7ff fd0c 	bl	8007c82 <__lo0bits>
 800826a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800826e:	b1d0      	cbz	r0, 80082a6 <__d2b+0x7e>
 8008270:	f1c0 0320 	rsb	r3, r0, #32
 8008274:	fa02 f303 	lsl.w	r3, r2, r3
 8008278:	430b      	orrs	r3, r1
 800827a:	40c2      	lsrs	r2, r0
 800827c:	6163      	str	r3, [r4, #20]
 800827e:	9201      	str	r2, [sp, #4]
 8008280:	9b01      	ldr	r3, [sp, #4]
 8008282:	61a3      	str	r3, [r4, #24]
 8008284:	2b00      	cmp	r3, #0
 8008286:	bf0c      	ite	eq
 8008288:	2201      	moveq	r2, #1
 800828a:	2202      	movne	r2, #2
 800828c:	6122      	str	r2, [r4, #16]
 800828e:	b1a5      	cbz	r5, 80082ba <__d2b+0x92>
 8008290:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008294:	4405      	add	r5, r0
 8008296:	603d      	str	r5, [r7, #0]
 8008298:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800829c:	6030      	str	r0, [r6, #0]
 800829e:	4620      	mov	r0, r4
 80082a0:	b003      	add	sp, #12
 80082a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082a6:	6161      	str	r1, [r4, #20]
 80082a8:	e7ea      	b.n	8008280 <__d2b+0x58>
 80082aa:	a801      	add	r0, sp, #4
 80082ac:	f7ff fce9 	bl	8007c82 <__lo0bits>
 80082b0:	9b01      	ldr	r3, [sp, #4]
 80082b2:	6163      	str	r3, [r4, #20]
 80082b4:	3020      	adds	r0, #32
 80082b6:	2201      	movs	r2, #1
 80082b8:	e7e8      	b.n	800828c <__d2b+0x64>
 80082ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80082c2:	6038      	str	r0, [r7, #0]
 80082c4:	6918      	ldr	r0, [r3, #16]
 80082c6:	f7ff fcbd 	bl	8007c44 <__hi0bits>
 80082ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082ce:	e7e5      	b.n	800829c <__d2b+0x74>
 80082d0:	0800abbf 	.word	0x0800abbf
 80082d4:	0800abd0 	.word	0x0800abd0

080082d8 <__ratio>:
 80082d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	b085      	sub	sp, #20
 80082de:	e9cd 1000 	strd	r1, r0, [sp]
 80082e2:	a902      	add	r1, sp, #8
 80082e4:	f7ff ff56 	bl	8008194 <__b2d>
 80082e8:	9800      	ldr	r0, [sp, #0]
 80082ea:	a903      	add	r1, sp, #12
 80082ec:	ec55 4b10 	vmov	r4, r5, d0
 80082f0:	f7ff ff50 	bl	8008194 <__b2d>
 80082f4:	9b01      	ldr	r3, [sp, #4]
 80082f6:	6919      	ldr	r1, [r3, #16]
 80082f8:	9b00      	ldr	r3, [sp, #0]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	1ac9      	subs	r1, r1, r3
 80082fe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008302:	1a9b      	subs	r3, r3, r2
 8008304:	ec5b ab10 	vmov	sl, fp, d0
 8008308:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800830c:	2b00      	cmp	r3, #0
 800830e:	bfce      	itee	gt
 8008310:	462a      	movgt	r2, r5
 8008312:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008316:	465a      	movle	r2, fp
 8008318:	462f      	mov	r7, r5
 800831a:	46d9      	mov	r9, fp
 800831c:	bfcc      	ite	gt
 800831e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008322:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008326:	464b      	mov	r3, r9
 8008328:	4652      	mov	r2, sl
 800832a:	4620      	mov	r0, r4
 800832c:	4639      	mov	r1, r7
 800832e:	f7f8 fa8d 	bl	800084c <__aeabi_ddiv>
 8008332:	ec41 0b10 	vmov	d0, r0, r1
 8008336:	b005      	add	sp, #20
 8008338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800833c <__copybits>:
 800833c:	3901      	subs	r1, #1
 800833e:	b570      	push	{r4, r5, r6, lr}
 8008340:	1149      	asrs	r1, r1, #5
 8008342:	6914      	ldr	r4, [r2, #16]
 8008344:	3101      	adds	r1, #1
 8008346:	f102 0314 	add.w	r3, r2, #20
 800834a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800834e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008352:	1f05      	subs	r5, r0, #4
 8008354:	42a3      	cmp	r3, r4
 8008356:	d30c      	bcc.n	8008372 <__copybits+0x36>
 8008358:	1aa3      	subs	r3, r4, r2
 800835a:	3b11      	subs	r3, #17
 800835c:	f023 0303 	bic.w	r3, r3, #3
 8008360:	3211      	adds	r2, #17
 8008362:	42a2      	cmp	r2, r4
 8008364:	bf88      	it	hi
 8008366:	2300      	movhi	r3, #0
 8008368:	4418      	add	r0, r3
 800836a:	2300      	movs	r3, #0
 800836c:	4288      	cmp	r0, r1
 800836e:	d305      	bcc.n	800837c <__copybits+0x40>
 8008370:	bd70      	pop	{r4, r5, r6, pc}
 8008372:	f853 6b04 	ldr.w	r6, [r3], #4
 8008376:	f845 6f04 	str.w	r6, [r5, #4]!
 800837a:	e7eb      	b.n	8008354 <__copybits+0x18>
 800837c:	f840 3b04 	str.w	r3, [r0], #4
 8008380:	e7f4      	b.n	800836c <__copybits+0x30>

08008382 <__any_on>:
 8008382:	f100 0214 	add.w	r2, r0, #20
 8008386:	6900      	ldr	r0, [r0, #16]
 8008388:	114b      	asrs	r3, r1, #5
 800838a:	4298      	cmp	r0, r3
 800838c:	b510      	push	{r4, lr}
 800838e:	db11      	blt.n	80083b4 <__any_on+0x32>
 8008390:	dd0a      	ble.n	80083a8 <__any_on+0x26>
 8008392:	f011 011f 	ands.w	r1, r1, #31
 8008396:	d007      	beq.n	80083a8 <__any_on+0x26>
 8008398:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800839c:	fa24 f001 	lsr.w	r0, r4, r1
 80083a0:	fa00 f101 	lsl.w	r1, r0, r1
 80083a4:	428c      	cmp	r4, r1
 80083a6:	d10b      	bne.n	80083c0 <__any_on+0x3e>
 80083a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d803      	bhi.n	80083b8 <__any_on+0x36>
 80083b0:	2000      	movs	r0, #0
 80083b2:	bd10      	pop	{r4, pc}
 80083b4:	4603      	mov	r3, r0
 80083b6:	e7f7      	b.n	80083a8 <__any_on+0x26>
 80083b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083bc:	2900      	cmp	r1, #0
 80083be:	d0f5      	beq.n	80083ac <__any_on+0x2a>
 80083c0:	2001      	movs	r0, #1
 80083c2:	e7f6      	b.n	80083b2 <__any_on+0x30>

080083c4 <sulp>:
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	4604      	mov	r4, r0
 80083c8:	460d      	mov	r5, r1
 80083ca:	ec45 4b10 	vmov	d0, r4, r5
 80083ce:	4616      	mov	r6, r2
 80083d0:	f7ff feba 	bl	8008148 <__ulp>
 80083d4:	ec51 0b10 	vmov	r0, r1, d0
 80083d8:	b17e      	cbz	r6, 80083fa <sulp+0x36>
 80083da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80083de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	dd09      	ble.n	80083fa <sulp+0x36>
 80083e6:	051b      	lsls	r3, r3, #20
 80083e8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80083ec:	2400      	movs	r4, #0
 80083ee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80083f2:	4622      	mov	r2, r4
 80083f4:	462b      	mov	r3, r5
 80083f6:	f7f8 f8ff 	bl	80005f8 <__aeabi_dmul>
 80083fa:	ec41 0b10 	vmov	d0, r0, r1
 80083fe:	bd70      	pop	{r4, r5, r6, pc}

08008400 <_strtod_l>:
 8008400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008404:	b09f      	sub	sp, #124	@ 0x7c
 8008406:	460c      	mov	r4, r1
 8008408:	9217      	str	r2, [sp, #92]	@ 0x5c
 800840a:	2200      	movs	r2, #0
 800840c:	921a      	str	r2, [sp, #104]	@ 0x68
 800840e:	9005      	str	r0, [sp, #20]
 8008410:	f04f 0a00 	mov.w	sl, #0
 8008414:	f04f 0b00 	mov.w	fp, #0
 8008418:	460a      	mov	r2, r1
 800841a:	9219      	str	r2, [sp, #100]	@ 0x64
 800841c:	7811      	ldrb	r1, [r2, #0]
 800841e:	292b      	cmp	r1, #43	@ 0x2b
 8008420:	d04a      	beq.n	80084b8 <_strtod_l+0xb8>
 8008422:	d838      	bhi.n	8008496 <_strtod_l+0x96>
 8008424:	290d      	cmp	r1, #13
 8008426:	d832      	bhi.n	800848e <_strtod_l+0x8e>
 8008428:	2908      	cmp	r1, #8
 800842a:	d832      	bhi.n	8008492 <_strtod_l+0x92>
 800842c:	2900      	cmp	r1, #0
 800842e:	d03b      	beq.n	80084a8 <_strtod_l+0xa8>
 8008430:	2200      	movs	r2, #0
 8008432:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008434:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008436:	782a      	ldrb	r2, [r5, #0]
 8008438:	2a30      	cmp	r2, #48	@ 0x30
 800843a:	f040 80b3 	bne.w	80085a4 <_strtod_l+0x1a4>
 800843e:	786a      	ldrb	r2, [r5, #1]
 8008440:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008444:	2a58      	cmp	r2, #88	@ 0x58
 8008446:	d16e      	bne.n	8008526 <_strtod_l+0x126>
 8008448:	9302      	str	r3, [sp, #8]
 800844a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800844c:	9301      	str	r3, [sp, #4]
 800844e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	4a8e      	ldr	r2, [pc, #568]	@ (800868c <_strtod_l+0x28c>)
 8008454:	9805      	ldr	r0, [sp, #20]
 8008456:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008458:	a919      	add	r1, sp, #100	@ 0x64
 800845a:	f001 fe6b 	bl	800a134 <__gethex>
 800845e:	f010 060f 	ands.w	r6, r0, #15
 8008462:	4604      	mov	r4, r0
 8008464:	d005      	beq.n	8008472 <_strtod_l+0x72>
 8008466:	2e06      	cmp	r6, #6
 8008468:	d128      	bne.n	80084bc <_strtod_l+0xbc>
 800846a:	3501      	adds	r5, #1
 800846c:	2300      	movs	r3, #0
 800846e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008470:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008472:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008474:	2b00      	cmp	r3, #0
 8008476:	f040 858e 	bne.w	8008f96 <_strtod_l+0xb96>
 800847a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800847c:	b1cb      	cbz	r3, 80084b2 <_strtod_l+0xb2>
 800847e:	4652      	mov	r2, sl
 8008480:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008484:	ec43 2b10 	vmov	d0, r2, r3
 8008488:	b01f      	add	sp, #124	@ 0x7c
 800848a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848e:	2920      	cmp	r1, #32
 8008490:	d1ce      	bne.n	8008430 <_strtod_l+0x30>
 8008492:	3201      	adds	r2, #1
 8008494:	e7c1      	b.n	800841a <_strtod_l+0x1a>
 8008496:	292d      	cmp	r1, #45	@ 0x2d
 8008498:	d1ca      	bne.n	8008430 <_strtod_l+0x30>
 800849a:	2101      	movs	r1, #1
 800849c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800849e:	1c51      	adds	r1, r2, #1
 80084a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80084a2:	7852      	ldrb	r2, [r2, #1]
 80084a4:	2a00      	cmp	r2, #0
 80084a6:	d1c5      	bne.n	8008434 <_strtod_l+0x34>
 80084a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80084aa:	9419      	str	r4, [sp, #100]	@ 0x64
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f040 8570 	bne.w	8008f92 <_strtod_l+0xb92>
 80084b2:	4652      	mov	r2, sl
 80084b4:	465b      	mov	r3, fp
 80084b6:	e7e5      	b.n	8008484 <_strtod_l+0x84>
 80084b8:	2100      	movs	r1, #0
 80084ba:	e7ef      	b.n	800849c <_strtod_l+0x9c>
 80084bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80084be:	b13a      	cbz	r2, 80084d0 <_strtod_l+0xd0>
 80084c0:	2135      	movs	r1, #53	@ 0x35
 80084c2:	a81c      	add	r0, sp, #112	@ 0x70
 80084c4:	f7ff ff3a 	bl	800833c <__copybits>
 80084c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80084ca:	9805      	ldr	r0, [sp, #20]
 80084cc:	f7ff fb08 	bl	8007ae0 <_Bfree>
 80084d0:	3e01      	subs	r6, #1
 80084d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80084d4:	2e04      	cmp	r6, #4
 80084d6:	d806      	bhi.n	80084e6 <_strtod_l+0xe6>
 80084d8:	e8df f006 	tbb	[pc, r6]
 80084dc:	201d0314 	.word	0x201d0314
 80084e0:	14          	.byte	0x14
 80084e1:	00          	.byte	0x00
 80084e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80084e6:	05e1      	lsls	r1, r4, #23
 80084e8:	bf48      	it	mi
 80084ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80084ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80084f2:	0d1b      	lsrs	r3, r3, #20
 80084f4:	051b      	lsls	r3, r3, #20
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1bb      	bne.n	8008472 <_strtod_l+0x72>
 80084fa:	f7fe fb31 	bl	8006b60 <__errno>
 80084fe:	2322      	movs	r3, #34	@ 0x22
 8008500:	6003      	str	r3, [r0, #0]
 8008502:	e7b6      	b.n	8008472 <_strtod_l+0x72>
 8008504:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008508:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800850c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008510:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008514:	e7e7      	b.n	80084e6 <_strtod_l+0xe6>
 8008516:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008694 <_strtod_l+0x294>
 800851a:	e7e4      	b.n	80084e6 <_strtod_l+0xe6>
 800851c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008520:	f04f 3aff 	mov.w	sl, #4294967295
 8008524:	e7df      	b.n	80084e6 <_strtod_l+0xe6>
 8008526:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008528:	1c5a      	adds	r2, r3, #1
 800852a:	9219      	str	r2, [sp, #100]	@ 0x64
 800852c:	785b      	ldrb	r3, [r3, #1]
 800852e:	2b30      	cmp	r3, #48	@ 0x30
 8008530:	d0f9      	beq.n	8008526 <_strtod_l+0x126>
 8008532:	2b00      	cmp	r3, #0
 8008534:	d09d      	beq.n	8008472 <_strtod_l+0x72>
 8008536:	2301      	movs	r3, #1
 8008538:	9309      	str	r3, [sp, #36]	@ 0x24
 800853a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800853c:	930c      	str	r3, [sp, #48]	@ 0x30
 800853e:	2300      	movs	r3, #0
 8008540:	9308      	str	r3, [sp, #32]
 8008542:	930a      	str	r3, [sp, #40]	@ 0x28
 8008544:	461f      	mov	r7, r3
 8008546:	220a      	movs	r2, #10
 8008548:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800854a:	7805      	ldrb	r5, [r0, #0]
 800854c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008550:	b2d9      	uxtb	r1, r3
 8008552:	2909      	cmp	r1, #9
 8008554:	d928      	bls.n	80085a8 <_strtod_l+0x1a8>
 8008556:	494e      	ldr	r1, [pc, #312]	@ (8008690 <_strtod_l+0x290>)
 8008558:	2201      	movs	r2, #1
 800855a:	f7fe faa5 	bl	8006aa8 <strncmp>
 800855e:	2800      	cmp	r0, #0
 8008560:	d032      	beq.n	80085c8 <_strtod_l+0x1c8>
 8008562:	2000      	movs	r0, #0
 8008564:	462a      	mov	r2, r5
 8008566:	4681      	mov	r9, r0
 8008568:	463d      	mov	r5, r7
 800856a:	4603      	mov	r3, r0
 800856c:	2a65      	cmp	r2, #101	@ 0x65
 800856e:	d001      	beq.n	8008574 <_strtod_l+0x174>
 8008570:	2a45      	cmp	r2, #69	@ 0x45
 8008572:	d114      	bne.n	800859e <_strtod_l+0x19e>
 8008574:	b91d      	cbnz	r5, 800857e <_strtod_l+0x17e>
 8008576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008578:	4302      	orrs	r2, r0
 800857a:	d095      	beq.n	80084a8 <_strtod_l+0xa8>
 800857c:	2500      	movs	r5, #0
 800857e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008580:	1c62      	adds	r2, r4, #1
 8008582:	9219      	str	r2, [sp, #100]	@ 0x64
 8008584:	7862      	ldrb	r2, [r4, #1]
 8008586:	2a2b      	cmp	r2, #43	@ 0x2b
 8008588:	d077      	beq.n	800867a <_strtod_l+0x27a>
 800858a:	2a2d      	cmp	r2, #45	@ 0x2d
 800858c:	d07b      	beq.n	8008686 <_strtod_l+0x286>
 800858e:	f04f 0c00 	mov.w	ip, #0
 8008592:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008596:	2909      	cmp	r1, #9
 8008598:	f240 8082 	bls.w	80086a0 <_strtod_l+0x2a0>
 800859c:	9419      	str	r4, [sp, #100]	@ 0x64
 800859e:	f04f 0800 	mov.w	r8, #0
 80085a2:	e0a2      	b.n	80086ea <_strtod_l+0x2ea>
 80085a4:	2300      	movs	r3, #0
 80085a6:	e7c7      	b.n	8008538 <_strtod_l+0x138>
 80085a8:	2f08      	cmp	r7, #8
 80085aa:	bfd5      	itete	le
 80085ac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80085ae:	9908      	ldrgt	r1, [sp, #32]
 80085b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80085b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80085b8:	f100 0001 	add.w	r0, r0, #1
 80085bc:	bfd4      	ite	le
 80085be:	930a      	strle	r3, [sp, #40]	@ 0x28
 80085c0:	9308      	strgt	r3, [sp, #32]
 80085c2:	3701      	adds	r7, #1
 80085c4:	9019      	str	r0, [sp, #100]	@ 0x64
 80085c6:	e7bf      	b.n	8008548 <_strtod_l+0x148>
 80085c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085ca:	1c5a      	adds	r2, r3, #1
 80085cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80085ce:	785a      	ldrb	r2, [r3, #1]
 80085d0:	b37f      	cbz	r7, 8008632 <_strtod_l+0x232>
 80085d2:	4681      	mov	r9, r0
 80085d4:	463d      	mov	r5, r7
 80085d6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80085da:	2b09      	cmp	r3, #9
 80085dc:	d912      	bls.n	8008604 <_strtod_l+0x204>
 80085de:	2301      	movs	r3, #1
 80085e0:	e7c4      	b.n	800856c <_strtod_l+0x16c>
 80085e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085e4:	1c5a      	adds	r2, r3, #1
 80085e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80085e8:	785a      	ldrb	r2, [r3, #1]
 80085ea:	3001      	adds	r0, #1
 80085ec:	2a30      	cmp	r2, #48	@ 0x30
 80085ee:	d0f8      	beq.n	80085e2 <_strtod_l+0x1e2>
 80085f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	f200 84d3 	bhi.w	8008fa0 <_strtod_l+0xba0>
 80085fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80085fe:	4681      	mov	r9, r0
 8008600:	2000      	movs	r0, #0
 8008602:	4605      	mov	r5, r0
 8008604:	3a30      	subs	r2, #48	@ 0x30
 8008606:	f100 0301 	add.w	r3, r0, #1
 800860a:	d02a      	beq.n	8008662 <_strtod_l+0x262>
 800860c:	4499      	add	r9, r3
 800860e:	eb00 0c05 	add.w	ip, r0, r5
 8008612:	462b      	mov	r3, r5
 8008614:	210a      	movs	r1, #10
 8008616:	4563      	cmp	r3, ip
 8008618:	d10d      	bne.n	8008636 <_strtod_l+0x236>
 800861a:	1c69      	adds	r1, r5, #1
 800861c:	4401      	add	r1, r0
 800861e:	4428      	add	r0, r5
 8008620:	2808      	cmp	r0, #8
 8008622:	dc16      	bgt.n	8008652 <_strtod_l+0x252>
 8008624:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008626:	230a      	movs	r3, #10
 8008628:	fb03 2300 	mla	r3, r3, r0, r2
 800862c:	930a      	str	r3, [sp, #40]	@ 0x28
 800862e:	2300      	movs	r3, #0
 8008630:	e018      	b.n	8008664 <_strtod_l+0x264>
 8008632:	4638      	mov	r0, r7
 8008634:	e7da      	b.n	80085ec <_strtod_l+0x1ec>
 8008636:	2b08      	cmp	r3, #8
 8008638:	f103 0301 	add.w	r3, r3, #1
 800863c:	dc03      	bgt.n	8008646 <_strtod_l+0x246>
 800863e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008640:	434e      	muls	r6, r1
 8008642:	960a      	str	r6, [sp, #40]	@ 0x28
 8008644:	e7e7      	b.n	8008616 <_strtod_l+0x216>
 8008646:	2b10      	cmp	r3, #16
 8008648:	bfde      	ittt	le
 800864a:	9e08      	ldrle	r6, [sp, #32]
 800864c:	434e      	mulle	r6, r1
 800864e:	9608      	strle	r6, [sp, #32]
 8008650:	e7e1      	b.n	8008616 <_strtod_l+0x216>
 8008652:	280f      	cmp	r0, #15
 8008654:	dceb      	bgt.n	800862e <_strtod_l+0x22e>
 8008656:	9808      	ldr	r0, [sp, #32]
 8008658:	230a      	movs	r3, #10
 800865a:	fb03 2300 	mla	r3, r3, r0, r2
 800865e:	9308      	str	r3, [sp, #32]
 8008660:	e7e5      	b.n	800862e <_strtod_l+0x22e>
 8008662:	4629      	mov	r1, r5
 8008664:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008666:	1c50      	adds	r0, r2, #1
 8008668:	9019      	str	r0, [sp, #100]	@ 0x64
 800866a:	7852      	ldrb	r2, [r2, #1]
 800866c:	4618      	mov	r0, r3
 800866e:	460d      	mov	r5, r1
 8008670:	e7b1      	b.n	80085d6 <_strtod_l+0x1d6>
 8008672:	f04f 0900 	mov.w	r9, #0
 8008676:	2301      	movs	r3, #1
 8008678:	e77d      	b.n	8008576 <_strtod_l+0x176>
 800867a:	f04f 0c00 	mov.w	ip, #0
 800867e:	1ca2      	adds	r2, r4, #2
 8008680:	9219      	str	r2, [sp, #100]	@ 0x64
 8008682:	78a2      	ldrb	r2, [r4, #2]
 8008684:	e785      	b.n	8008592 <_strtod_l+0x192>
 8008686:	f04f 0c01 	mov.w	ip, #1
 800868a:	e7f8      	b.n	800867e <_strtod_l+0x27e>
 800868c:	0800ad40 	.word	0x0800ad40
 8008690:	0800ad28 	.word	0x0800ad28
 8008694:	7ff00000 	.word	0x7ff00000
 8008698:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800869a:	1c51      	adds	r1, r2, #1
 800869c:	9119      	str	r1, [sp, #100]	@ 0x64
 800869e:	7852      	ldrb	r2, [r2, #1]
 80086a0:	2a30      	cmp	r2, #48	@ 0x30
 80086a2:	d0f9      	beq.n	8008698 <_strtod_l+0x298>
 80086a4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80086a8:	2908      	cmp	r1, #8
 80086aa:	f63f af78 	bhi.w	800859e <_strtod_l+0x19e>
 80086ae:	3a30      	subs	r2, #48	@ 0x30
 80086b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80086b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80086b6:	f04f 080a 	mov.w	r8, #10
 80086ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086bc:	1c56      	adds	r6, r2, #1
 80086be:	9619      	str	r6, [sp, #100]	@ 0x64
 80086c0:	7852      	ldrb	r2, [r2, #1]
 80086c2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80086c6:	f1be 0f09 	cmp.w	lr, #9
 80086ca:	d939      	bls.n	8008740 <_strtod_l+0x340>
 80086cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80086ce:	1a76      	subs	r6, r6, r1
 80086d0:	2e08      	cmp	r6, #8
 80086d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80086d6:	dc03      	bgt.n	80086e0 <_strtod_l+0x2e0>
 80086d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80086da:	4588      	cmp	r8, r1
 80086dc:	bfa8      	it	ge
 80086de:	4688      	movge	r8, r1
 80086e0:	f1bc 0f00 	cmp.w	ip, #0
 80086e4:	d001      	beq.n	80086ea <_strtod_l+0x2ea>
 80086e6:	f1c8 0800 	rsb	r8, r8, #0
 80086ea:	2d00      	cmp	r5, #0
 80086ec:	d14e      	bne.n	800878c <_strtod_l+0x38c>
 80086ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086f0:	4308      	orrs	r0, r1
 80086f2:	f47f aebe 	bne.w	8008472 <_strtod_l+0x72>
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f47f aed6 	bne.w	80084a8 <_strtod_l+0xa8>
 80086fc:	2a69      	cmp	r2, #105	@ 0x69
 80086fe:	d028      	beq.n	8008752 <_strtod_l+0x352>
 8008700:	dc25      	bgt.n	800874e <_strtod_l+0x34e>
 8008702:	2a49      	cmp	r2, #73	@ 0x49
 8008704:	d025      	beq.n	8008752 <_strtod_l+0x352>
 8008706:	2a4e      	cmp	r2, #78	@ 0x4e
 8008708:	f47f aece 	bne.w	80084a8 <_strtod_l+0xa8>
 800870c:	499b      	ldr	r1, [pc, #620]	@ (800897c <_strtod_l+0x57c>)
 800870e:	a819      	add	r0, sp, #100	@ 0x64
 8008710:	f001 ff32 	bl	800a578 <__match>
 8008714:	2800      	cmp	r0, #0
 8008716:	f43f aec7 	beq.w	80084a8 <_strtod_l+0xa8>
 800871a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	2b28      	cmp	r3, #40	@ 0x28
 8008720:	d12e      	bne.n	8008780 <_strtod_l+0x380>
 8008722:	4997      	ldr	r1, [pc, #604]	@ (8008980 <_strtod_l+0x580>)
 8008724:	aa1c      	add	r2, sp, #112	@ 0x70
 8008726:	a819      	add	r0, sp, #100	@ 0x64
 8008728:	f001 ff3a 	bl	800a5a0 <__hexnan>
 800872c:	2805      	cmp	r0, #5
 800872e:	d127      	bne.n	8008780 <_strtod_l+0x380>
 8008730:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008732:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008736:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800873a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800873e:	e698      	b.n	8008472 <_strtod_l+0x72>
 8008740:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008742:	fb08 2101 	mla	r1, r8, r1, r2
 8008746:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800874a:	920e      	str	r2, [sp, #56]	@ 0x38
 800874c:	e7b5      	b.n	80086ba <_strtod_l+0x2ba>
 800874e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008750:	e7da      	b.n	8008708 <_strtod_l+0x308>
 8008752:	498c      	ldr	r1, [pc, #560]	@ (8008984 <_strtod_l+0x584>)
 8008754:	a819      	add	r0, sp, #100	@ 0x64
 8008756:	f001 ff0f 	bl	800a578 <__match>
 800875a:	2800      	cmp	r0, #0
 800875c:	f43f aea4 	beq.w	80084a8 <_strtod_l+0xa8>
 8008760:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008762:	4989      	ldr	r1, [pc, #548]	@ (8008988 <_strtod_l+0x588>)
 8008764:	3b01      	subs	r3, #1
 8008766:	a819      	add	r0, sp, #100	@ 0x64
 8008768:	9319      	str	r3, [sp, #100]	@ 0x64
 800876a:	f001 ff05 	bl	800a578 <__match>
 800876e:	b910      	cbnz	r0, 8008776 <_strtod_l+0x376>
 8008770:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008772:	3301      	adds	r3, #1
 8008774:	9319      	str	r3, [sp, #100]	@ 0x64
 8008776:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008998 <_strtod_l+0x598>
 800877a:	f04f 0a00 	mov.w	sl, #0
 800877e:	e678      	b.n	8008472 <_strtod_l+0x72>
 8008780:	4882      	ldr	r0, [pc, #520]	@ (800898c <_strtod_l+0x58c>)
 8008782:	f001 fc35 	bl	8009ff0 <nan>
 8008786:	ec5b ab10 	vmov	sl, fp, d0
 800878a:	e672      	b.n	8008472 <_strtod_l+0x72>
 800878c:	eba8 0309 	sub.w	r3, r8, r9
 8008790:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008792:	9309      	str	r3, [sp, #36]	@ 0x24
 8008794:	2f00      	cmp	r7, #0
 8008796:	bf08      	it	eq
 8008798:	462f      	moveq	r7, r5
 800879a:	2d10      	cmp	r5, #16
 800879c:	462c      	mov	r4, r5
 800879e:	bfa8      	it	ge
 80087a0:	2410      	movge	r4, #16
 80087a2:	f7f7 feaf 	bl	8000504 <__aeabi_ui2d>
 80087a6:	2d09      	cmp	r5, #9
 80087a8:	4682      	mov	sl, r0
 80087aa:	468b      	mov	fp, r1
 80087ac:	dc13      	bgt.n	80087d6 <_strtod_l+0x3d6>
 80087ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f43f ae5e 	beq.w	8008472 <_strtod_l+0x72>
 80087b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087b8:	dd78      	ble.n	80088ac <_strtod_l+0x4ac>
 80087ba:	2b16      	cmp	r3, #22
 80087bc:	dc5f      	bgt.n	800887e <_strtod_l+0x47e>
 80087be:	4974      	ldr	r1, [pc, #464]	@ (8008990 <_strtod_l+0x590>)
 80087c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087c8:	4652      	mov	r2, sl
 80087ca:	465b      	mov	r3, fp
 80087cc:	f7f7 ff14 	bl	80005f8 <__aeabi_dmul>
 80087d0:	4682      	mov	sl, r0
 80087d2:	468b      	mov	fp, r1
 80087d4:	e64d      	b.n	8008472 <_strtod_l+0x72>
 80087d6:	4b6e      	ldr	r3, [pc, #440]	@ (8008990 <_strtod_l+0x590>)
 80087d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80087dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80087e0:	f7f7 ff0a 	bl	80005f8 <__aeabi_dmul>
 80087e4:	4682      	mov	sl, r0
 80087e6:	9808      	ldr	r0, [sp, #32]
 80087e8:	468b      	mov	fp, r1
 80087ea:	f7f7 fe8b 	bl	8000504 <__aeabi_ui2d>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	4650      	mov	r0, sl
 80087f4:	4659      	mov	r1, fp
 80087f6:	f7f7 fd49 	bl	800028c <__adddf3>
 80087fa:	2d0f      	cmp	r5, #15
 80087fc:	4682      	mov	sl, r0
 80087fe:	468b      	mov	fp, r1
 8008800:	ddd5      	ble.n	80087ae <_strtod_l+0x3ae>
 8008802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008804:	1b2c      	subs	r4, r5, r4
 8008806:	441c      	add	r4, r3
 8008808:	2c00      	cmp	r4, #0
 800880a:	f340 8096 	ble.w	800893a <_strtod_l+0x53a>
 800880e:	f014 030f 	ands.w	r3, r4, #15
 8008812:	d00a      	beq.n	800882a <_strtod_l+0x42a>
 8008814:	495e      	ldr	r1, [pc, #376]	@ (8008990 <_strtod_l+0x590>)
 8008816:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800881a:	4652      	mov	r2, sl
 800881c:	465b      	mov	r3, fp
 800881e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008822:	f7f7 fee9 	bl	80005f8 <__aeabi_dmul>
 8008826:	4682      	mov	sl, r0
 8008828:	468b      	mov	fp, r1
 800882a:	f034 040f 	bics.w	r4, r4, #15
 800882e:	d073      	beq.n	8008918 <_strtod_l+0x518>
 8008830:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008834:	dd48      	ble.n	80088c8 <_strtod_l+0x4c8>
 8008836:	2400      	movs	r4, #0
 8008838:	46a0      	mov	r8, r4
 800883a:	940a      	str	r4, [sp, #40]	@ 0x28
 800883c:	46a1      	mov	r9, r4
 800883e:	9a05      	ldr	r2, [sp, #20]
 8008840:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008998 <_strtod_l+0x598>
 8008844:	2322      	movs	r3, #34	@ 0x22
 8008846:	6013      	str	r3, [r2, #0]
 8008848:	f04f 0a00 	mov.w	sl, #0
 800884c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800884e:	2b00      	cmp	r3, #0
 8008850:	f43f ae0f 	beq.w	8008472 <_strtod_l+0x72>
 8008854:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008856:	9805      	ldr	r0, [sp, #20]
 8008858:	f7ff f942 	bl	8007ae0 <_Bfree>
 800885c:	9805      	ldr	r0, [sp, #20]
 800885e:	4649      	mov	r1, r9
 8008860:	f7ff f93e 	bl	8007ae0 <_Bfree>
 8008864:	9805      	ldr	r0, [sp, #20]
 8008866:	4641      	mov	r1, r8
 8008868:	f7ff f93a 	bl	8007ae0 <_Bfree>
 800886c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800886e:	9805      	ldr	r0, [sp, #20]
 8008870:	f7ff f936 	bl	8007ae0 <_Bfree>
 8008874:	9805      	ldr	r0, [sp, #20]
 8008876:	4621      	mov	r1, r4
 8008878:	f7ff f932 	bl	8007ae0 <_Bfree>
 800887c:	e5f9      	b.n	8008472 <_strtod_l+0x72>
 800887e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008880:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008884:	4293      	cmp	r3, r2
 8008886:	dbbc      	blt.n	8008802 <_strtod_l+0x402>
 8008888:	4c41      	ldr	r4, [pc, #260]	@ (8008990 <_strtod_l+0x590>)
 800888a:	f1c5 050f 	rsb	r5, r5, #15
 800888e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008892:	4652      	mov	r2, sl
 8008894:	465b      	mov	r3, fp
 8008896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800889a:	f7f7 fead 	bl	80005f8 <__aeabi_dmul>
 800889e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088a0:	1b5d      	subs	r5, r3, r5
 80088a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80088a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80088aa:	e78f      	b.n	80087cc <_strtod_l+0x3cc>
 80088ac:	3316      	adds	r3, #22
 80088ae:	dba8      	blt.n	8008802 <_strtod_l+0x402>
 80088b0:	4b37      	ldr	r3, [pc, #220]	@ (8008990 <_strtod_l+0x590>)
 80088b2:	eba9 0808 	sub.w	r8, r9, r8
 80088b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80088ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 80088be:	4650      	mov	r0, sl
 80088c0:	4659      	mov	r1, fp
 80088c2:	f7f7 ffc3 	bl	800084c <__aeabi_ddiv>
 80088c6:	e783      	b.n	80087d0 <_strtod_l+0x3d0>
 80088c8:	4b32      	ldr	r3, [pc, #200]	@ (8008994 <_strtod_l+0x594>)
 80088ca:	9308      	str	r3, [sp, #32]
 80088cc:	2300      	movs	r3, #0
 80088ce:	1124      	asrs	r4, r4, #4
 80088d0:	4650      	mov	r0, sl
 80088d2:	4659      	mov	r1, fp
 80088d4:	461e      	mov	r6, r3
 80088d6:	2c01      	cmp	r4, #1
 80088d8:	dc21      	bgt.n	800891e <_strtod_l+0x51e>
 80088da:	b10b      	cbz	r3, 80088e0 <_strtod_l+0x4e0>
 80088dc:	4682      	mov	sl, r0
 80088de:	468b      	mov	fp, r1
 80088e0:	492c      	ldr	r1, [pc, #176]	@ (8008994 <_strtod_l+0x594>)
 80088e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80088e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80088ea:	4652      	mov	r2, sl
 80088ec:	465b      	mov	r3, fp
 80088ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088f2:	f7f7 fe81 	bl	80005f8 <__aeabi_dmul>
 80088f6:	4b28      	ldr	r3, [pc, #160]	@ (8008998 <_strtod_l+0x598>)
 80088f8:	460a      	mov	r2, r1
 80088fa:	400b      	ands	r3, r1
 80088fc:	4927      	ldr	r1, [pc, #156]	@ (800899c <_strtod_l+0x59c>)
 80088fe:	428b      	cmp	r3, r1
 8008900:	4682      	mov	sl, r0
 8008902:	d898      	bhi.n	8008836 <_strtod_l+0x436>
 8008904:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008908:	428b      	cmp	r3, r1
 800890a:	bf86      	itte	hi
 800890c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80089a0 <_strtod_l+0x5a0>
 8008910:	f04f 3aff 	movhi.w	sl, #4294967295
 8008914:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008918:	2300      	movs	r3, #0
 800891a:	9308      	str	r3, [sp, #32]
 800891c:	e07a      	b.n	8008a14 <_strtod_l+0x614>
 800891e:	07e2      	lsls	r2, r4, #31
 8008920:	d505      	bpl.n	800892e <_strtod_l+0x52e>
 8008922:	9b08      	ldr	r3, [sp, #32]
 8008924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008928:	f7f7 fe66 	bl	80005f8 <__aeabi_dmul>
 800892c:	2301      	movs	r3, #1
 800892e:	9a08      	ldr	r2, [sp, #32]
 8008930:	3208      	adds	r2, #8
 8008932:	3601      	adds	r6, #1
 8008934:	1064      	asrs	r4, r4, #1
 8008936:	9208      	str	r2, [sp, #32]
 8008938:	e7cd      	b.n	80088d6 <_strtod_l+0x4d6>
 800893a:	d0ed      	beq.n	8008918 <_strtod_l+0x518>
 800893c:	4264      	negs	r4, r4
 800893e:	f014 020f 	ands.w	r2, r4, #15
 8008942:	d00a      	beq.n	800895a <_strtod_l+0x55a>
 8008944:	4b12      	ldr	r3, [pc, #72]	@ (8008990 <_strtod_l+0x590>)
 8008946:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800894a:	4650      	mov	r0, sl
 800894c:	4659      	mov	r1, fp
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	f7f7 ff7b 	bl	800084c <__aeabi_ddiv>
 8008956:	4682      	mov	sl, r0
 8008958:	468b      	mov	fp, r1
 800895a:	1124      	asrs	r4, r4, #4
 800895c:	d0dc      	beq.n	8008918 <_strtod_l+0x518>
 800895e:	2c1f      	cmp	r4, #31
 8008960:	dd20      	ble.n	80089a4 <_strtod_l+0x5a4>
 8008962:	2400      	movs	r4, #0
 8008964:	46a0      	mov	r8, r4
 8008966:	940a      	str	r4, [sp, #40]	@ 0x28
 8008968:	46a1      	mov	r9, r4
 800896a:	9a05      	ldr	r2, [sp, #20]
 800896c:	2322      	movs	r3, #34	@ 0x22
 800896e:	f04f 0a00 	mov.w	sl, #0
 8008972:	f04f 0b00 	mov.w	fp, #0
 8008976:	6013      	str	r3, [r2, #0]
 8008978:	e768      	b.n	800884c <_strtod_l+0x44c>
 800897a:	bf00      	nop
 800897c:	0800ab19 	.word	0x0800ab19
 8008980:	0800ad2c 	.word	0x0800ad2c
 8008984:	0800ab11 	.word	0x0800ab11
 8008988:	0800ab46 	.word	0x0800ab46
 800898c:	0800aef0 	.word	0x0800aef0
 8008990:	0800ac60 	.word	0x0800ac60
 8008994:	0800ac38 	.word	0x0800ac38
 8008998:	7ff00000 	.word	0x7ff00000
 800899c:	7ca00000 	.word	0x7ca00000
 80089a0:	7fefffff 	.word	0x7fefffff
 80089a4:	f014 0310 	ands.w	r3, r4, #16
 80089a8:	bf18      	it	ne
 80089aa:	236a      	movne	r3, #106	@ 0x6a
 80089ac:	4ea9      	ldr	r6, [pc, #676]	@ (8008c54 <_strtod_l+0x854>)
 80089ae:	9308      	str	r3, [sp, #32]
 80089b0:	4650      	mov	r0, sl
 80089b2:	4659      	mov	r1, fp
 80089b4:	2300      	movs	r3, #0
 80089b6:	07e2      	lsls	r2, r4, #31
 80089b8:	d504      	bpl.n	80089c4 <_strtod_l+0x5c4>
 80089ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80089be:	f7f7 fe1b 	bl	80005f8 <__aeabi_dmul>
 80089c2:	2301      	movs	r3, #1
 80089c4:	1064      	asrs	r4, r4, #1
 80089c6:	f106 0608 	add.w	r6, r6, #8
 80089ca:	d1f4      	bne.n	80089b6 <_strtod_l+0x5b6>
 80089cc:	b10b      	cbz	r3, 80089d2 <_strtod_l+0x5d2>
 80089ce:	4682      	mov	sl, r0
 80089d0:	468b      	mov	fp, r1
 80089d2:	9b08      	ldr	r3, [sp, #32]
 80089d4:	b1b3      	cbz	r3, 8008a04 <_strtod_l+0x604>
 80089d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80089da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80089de:	2b00      	cmp	r3, #0
 80089e0:	4659      	mov	r1, fp
 80089e2:	dd0f      	ble.n	8008a04 <_strtod_l+0x604>
 80089e4:	2b1f      	cmp	r3, #31
 80089e6:	dd55      	ble.n	8008a94 <_strtod_l+0x694>
 80089e8:	2b34      	cmp	r3, #52	@ 0x34
 80089ea:	bfde      	ittt	le
 80089ec:	f04f 33ff 	movle.w	r3, #4294967295
 80089f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80089f4:	4093      	lslle	r3, r2
 80089f6:	f04f 0a00 	mov.w	sl, #0
 80089fa:	bfcc      	ite	gt
 80089fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008a00:	ea03 0b01 	andle.w	fp, r3, r1
 8008a04:	2200      	movs	r2, #0
 8008a06:	2300      	movs	r3, #0
 8008a08:	4650      	mov	r0, sl
 8008a0a:	4659      	mov	r1, fp
 8008a0c:	f7f8 f85c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d1a6      	bne.n	8008962 <_strtod_l+0x562>
 8008a14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008a1a:	9805      	ldr	r0, [sp, #20]
 8008a1c:	462b      	mov	r3, r5
 8008a1e:	463a      	mov	r2, r7
 8008a20:	f7ff f8c6 	bl	8007bb0 <__s2b>
 8008a24:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a26:	2800      	cmp	r0, #0
 8008a28:	f43f af05 	beq.w	8008836 <_strtod_l+0x436>
 8008a2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a2e:	2a00      	cmp	r2, #0
 8008a30:	eba9 0308 	sub.w	r3, r9, r8
 8008a34:	bfa8      	it	ge
 8008a36:	2300      	movge	r3, #0
 8008a38:	9312      	str	r3, [sp, #72]	@ 0x48
 8008a3a:	2400      	movs	r4, #0
 8008a3c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008a40:	9316      	str	r3, [sp, #88]	@ 0x58
 8008a42:	46a0      	mov	r8, r4
 8008a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a46:	9805      	ldr	r0, [sp, #20]
 8008a48:	6859      	ldr	r1, [r3, #4]
 8008a4a:	f7ff f809 	bl	8007a60 <_Balloc>
 8008a4e:	4681      	mov	r9, r0
 8008a50:	2800      	cmp	r0, #0
 8008a52:	f43f aef4 	beq.w	800883e <_strtod_l+0x43e>
 8008a56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a58:	691a      	ldr	r2, [r3, #16]
 8008a5a:	3202      	adds	r2, #2
 8008a5c:	f103 010c 	add.w	r1, r3, #12
 8008a60:	0092      	lsls	r2, r2, #2
 8008a62:	300c      	adds	r0, #12
 8008a64:	f001 fab4 	bl	8009fd0 <memcpy>
 8008a68:	ec4b ab10 	vmov	d0, sl, fp
 8008a6c:	9805      	ldr	r0, [sp, #20]
 8008a6e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008a70:	a91b      	add	r1, sp, #108	@ 0x6c
 8008a72:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008a76:	f7ff fbd7 	bl	8008228 <__d2b>
 8008a7a:	901a      	str	r0, [sp, #104]	@ 0x68
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	f43f aede 	beq.w	800883e <_strtod_l+0x43e>
 8008a82:	9805      	ldr	r0, [sp, #20]
 8008a84:	2101      	movs	r1, #1
 8008a86:	f7ff f929 	bl	8007cdc <__i2b>
 8008a8a:	4680      	mov	r8, r0
 8008a8c:	b948      	cbnz	r0, 8008aa2 <_strtod_l+0x6a2>
 8008a8e:	f04f 0800 	mov.w	r8, #0
 8008a92:	e6d4      	b.n	800883e <_strtod_l+0x43e>
 8008a94:	f04f 32ff 	mov.w	r2, #4294967295
 8008a98:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9c:	ea03 0a0a 	and.w	sl, r3, sl
 8008aa0:	e7b0      	b.n	8008a04 <_strtod_l+0x604>
 8008aa2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008aa4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008aa6:	2d00      	cmp	r5, #0
 8008aa8:	bfab      	itete	ge
 8008aaa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008aac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008aae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008ab0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008ab2:	bfac      	ite	ge
 8008ab4:	18ef      	addge	r7, r5, r3
 8008ab6:	1b5e      	sublt	r6, r3, r5
 8008ab8:	9b08      	ldr	r3, [sp, #32]
 8008aba:	1aed      	subs	r5, r5, r3
 8008abc:	4415      	add	r5, r2
 8008abe:	4b66      	ldr	r3, [pc, #408]	@ (8008c58 <_strtod_l+0x858>)
 8008ac0:	3d01      	subs	r5, #1
 8008ac2:	429d      	cmp	r5, r3
 8008ac4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008ac8:	da50      	bge.n	8008b6c <_strtod_l+0x76c>
 8008aca:	1b5b      	subs	r3, r3, r5
 8008acc:	2b1f      	cmp	r3, #31
 8008ace:	eba2 0203 	sub.w	r2, r2, r3
 8008ad2:	f04f 0101 	mov.w	r1, #1
 8008ad6:	dc3d      	bgt.n	8008b54 <_strtod_l+0x754>
 8008ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8008adc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008ade:	2300      	movs	r3, #0
 8008ae0:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ae2:	18bd      	adds	r5, r7, r2
 8008ae4:	9b08      	ldr	r3, [sp, #32]
 8008ae6:	42af      	cmp	r7, r5
 8008ae8:	4416      	add	r6, r2
 8008aea:	441e      	add	r6, r3
 8008aec:	463b      	mov	r3, r7
 8008aee:	bfa8      	it	ge
 8008af0:	462b      	movge	r3, r5
 8008af2:	42b3      	cmp	r3, r6
 8008af4:	bfa8      	it	ge
 8008af6:	4633      	movge	r3, r6
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	bfc2      	ittt	gt
 8008afc:	1aed      	subgt	r5, r5, r3
 8008afe:	1af6      	subgt	r6, r6, r3
 8008b00:	1aff      	subgt	r7, r7, r3
 8008b02:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	dd16      	ble.n	8008b36 <_strtod_l+0x736>
 8008b08:	4641      	mov	r1, r8
 8008b0a:	9805      	ldr	r0, [sp, #20]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	f7ff f9a5 	bl	8007e5c <__pow5mult>
 8008b12:	4680      	mov	r8, r0
 8008b14:	2800      	cmp	r0, #0
 8008b16:	d0ba      	beq.n	8008a8e <_strtod_l+0x68e>
 8008b18:	4601      	mov	r1, r0
 8008b1a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008b1c:	9805      	ldr	r0, [sp, #20]
 8008b1e:	f7ff f8f3 	bl	8007d08 <__multiply>
 8008b22:	900e      	str	r0, [sp, #56]	@ 0x38
 8008b24:	2800      	cmp	r0, #0
 8008b26:	f43f ae8a 	beq.w	800883e <_strtod_l+0x43e>
 8008b2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b2c:	9805      	ldr	r0, [sp, #20]
 8008b2e:	f7fe ffd7 	bl	8007ae0 <_Bfree>
 8008b32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b34:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b36:	2d00      	cmp	r5, #0
 8008b38:	dc1d      	bgt.n	8008b76 <_strtod_l+0x776>
 8008b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	dd23      	ble.n	8008b88 <_strtod_l+0x788>
 8008b40:	4649      	mov	r1, r9
 8008b42:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008b44:	9805      	ldr	r0, [sp, #20]
 8008b46:	f7ff f989 	bl	8007e5c <__pow5mult>
 8008b4a:	4681      	mov	r9, r0
 8008b4c:	b9e0      	cbnz	r0, 8008b88 <_strtod_l+0x788>
 8008b4e:	f04f 0900 	mov.w	r9, #0
 8008b52:	e674      	b.n	800883e <_strtod_l+0x43e>
 8008b54:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008b58:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008b5c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008b60:	35e2      	adds	r5, #226	@ 0xe2
 8008b62:	fa01 f305 	lsl.w	r3, r1, r5
 8008b66:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b68:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008b6a:	e7ba      	b.n	8008ae2 <_strtod_l+0x6e2>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b70:	2301      	movs	r3, #1
 8008b72:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b74:	e7b5      	b.n	8008ae2 <_strtod_l+0x6e2>
 8008b76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b78:	9805      	ldr	r0, [sp, #20]
 8008b7a:	462a      	mov	r2, r5
 8008b7c:	f7ff f9c8 	bl	8007f10 <__lshift>
 8008b80:	901a      	str	r0, [sp, #104]	@ 0x68
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d1d9      	bne.n	8008b3a <_strtod_l+0x73a>
 8008b86:	e65a      	b.n	800883e <_strtod_l+0x43e>
 8008b88:	2e00      	cmp	r6, #0
 8008b8a:	dd07      	ble.n	8008b9c <_strtod_l+0x79c>
 8008b8c:	4649      	mov	r1, r9
 8008b8e:	9805      	ldr	r0, [sp, #20]
 8008b90:	4632      	mov	r2, r6
 8008b92:	f7ff f9bd 	bl	8007f10 <__lshift>
 8008b96:	4681      	mov	r9, r0
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d0d8      	beq.n	8008b4e <_strtod_l+0x74e>
 8008b9c:	2f00      	cmp	r7, #0
 8008b9e:	dd08      	ble.n	8008bb2 <_strtod_l+0x7b2>
 8008ba0:	4641      	mov	r1, r8
 8008ba2:	9805      	ldr	r0, [sp, #20]
 8008ba4:	463a      	mov	r2, r7
 8008ba6:	f7ff f9b3 	bl	8007f10 <__lshift>
 8008baa:	4680      	mov	r8, r0
 8008bac:	2800      	cmp	r0, #0
 8008bae:	f43f ae46 	beq.w	800883e <_strtod_l+0x43e>
 8008bb2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bb4:	9805      	ldr	r0, [sp, #20]
 8008bb6:	464a      	mov	r2, r9
 8008bb8:	f7ff fa32 	bl	8008020 <__mdiff>
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	f43f ae3d 	beq.w	800883e <_strtod_l+0x43e>
 8008bc4:	68c3      	ldr	r3, [r0, #12]
 8008bc6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008bc8:	2300      	movs	r3, #0
 8008bca:	60c3      	str	r3, [r0, #12]
 8008bcc:	4641      	mov	r1, r8
 8008bce:	f7ff fa0b 	bl	8007fe8 <__mcmp>
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	da46      	bge.n	8008c64 <_strtod_l+0x864>
 8008bd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bd8:	ea53 030a 	orrs.w	r3, r3, sl
 8008bdc:	d16c      	bne.n	8008cb8 <_strtod_l+0x8b8>
 8008bde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d168      	bne.n	8008cb8 <_strtod_l+0x8b8>
 8008be6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008bea:	0d1b      	lsrs	r3, r3, #20
 8008bec:	051b      	lsls	r3, r3, #20
 8008bee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008bf2:	d961      	bls.n	8008cb8 <_strtod_l+0x8b8>
 8008bf4:	6963      	ldr	r3, [r4, #20]
 8008bf6:	b913      	cbnz	r3, 8008bfe <_strtod_l+0x7fe>
 8008bf8:	6923      	ldr	r3, [r4, #16]
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	dd5c      	ble.n	8008cb8 <_strtod_l+0x8b8>
 8008bfe:	4621      	mov	r1, r4
 8008c00:	2201      	movs	r2, #1
 8008c02:	9805      	ldr	r0, [sp, #20]
 8008c04:	f7ff f984 	bl	8007f10 <__lshift>
 8008c08:	4641      	mov	r1, r8
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	f7ff f9ec 	bl	8007fe8 <__mcmp>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	dd51      	ble.n	8008cb8 <_strtod_l+0x8b8>
 8008c14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c18:	9a08      	ldr	r2, [sp, #32]
 8008c1a:	0d1b      	lsrs	r3, r3, #20
 8008c1c:	051b      	lsls	r3, r3, #20
 8008c1e:	2a00      	cmp	r2, #0
 8008c20:	d06b      	beq.n	8008cfa <_strtod_l+0x8fa>
 8008c22:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008c26:	d868      	bhi.n	8008cfa <_strtod_l+0x8fa>
 8008c28:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008c2c:	f67f ae9d 	bls.w	800896a <_strtod_l+0x56a>
 8008c30:	4b0a      	ldr	r3, [pc, #40]	@ (8008c5c <_strtod_l+0x85c>)
 8008c32:	4650      	mov	r0, sl
 8008c34:	4659      	mov	r1, fp
 8008c36:	2200      	movs	r2, #0
 8008c38:	f7f7 fcde 	bl	80005f8 <__aeabi_dmul>
 8008c3c:	4b08      	ldr	r3, [pc, #32]	@ (8008c60 <_strtod_l+0x860>)
 8008c3e:	400b      	ands	r3, r1
 8008c40:	4682      	mov	sl, r0
 8008c42:	468b      	mov	fp, r1
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f47f ae05 	bne.w	8008854 <_strtod_l+0x454>
 8008c4a:	9a05      	ldr	r2, [sp, #20]
 8008c4c:	2322      	movs	r3, #34	@ 0x22
 8008c4e:	6013      	str	r3, [r2, #0]
 8008c50:	e600      	b.n	8008854 <_strtod_l+0x454>
 8008c52:	bf00      	nop
 8008c54:	0800ad58 	.word	0x0800ad58
 8008c58:	fffffc02 	.word	0xfffffc02
 8008c5c:	39500000 	.word	0x39500000
 8008c60:	7ff00000 	.word	0x7ff00000
 8008c64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008c68:	d165      	bne.n	8008d36 <_strtod_l+0x936>
 8008c6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008c6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c70:	b35a      	cbz	r2, 8008cca <_strtod_l+0x8ca>
 8008c72:	4a9f      	ldr	r2, [pc, #636]	@ (8008ef0 <_strtod_l+0xaf0>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d12b      	bne.n	8008cd0 <_strtod_l+0x8d0>
 8008c78:	9b08      	ldr	r3, [sp, #32]
 8008c7a:	4651      	mov	r1, sl
 8008c7c:	b303      	cbz	r3, 8008cc0 <_strtod_l+0x8c0>
 8008c7e:	4b9d      	ldr	r3, [pc, #628]	@ (8008ef4 <_strtod_l+0xaf4>)
 8008c80:	465a      	mov	r2, fp
 8008c82:	4013      	ands	r3, r2
 8008c84:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008c88:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8c:	d81b      	bhi.n	8008cc6 <_strtod_l+0x8c6>
 8008c8e:	0d1b      	lsrs	r3, r3, #20
 8008c90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008c94:	fa02 f303 	lsl.w	r3, r2, r3
 8008c98:	4299      	cmp	r1, r3
 8008c9a:	d119      	bne.n	8008cd0 <_strtod_l+0x8d0>
 8008c9c:	4b96      	ldr	r3, [pc, #600]	@ (8008ef8 <_strtod_l+0xaf8>)
 8008c9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d102      	bne.n	8008caa <_strtod_l+0x8aa>
 8008ca4:	3101      	adds	r1, #1
 8008ca6:	f43f adca 	beq.w	800883e <_strtod_l+0x43e>
 8008caa:	4b92      	ldr	r3, [pc, #584]	@ (8008ef4 <_strtod_l+0xaf4>)
 8008cac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cae:	401a      	ands	r2, r3
 8008cb0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008cb4:	f04f 0a00 	mov.w	sl, #0
 8008cb8:	9b08      	ldr	r3, [sp, #32]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d1b8      	bne.n	8008c30 <_strtod_l+0x830>
 8008cbe:	e5c9      	b.n	8008854 <_strtod_l+0x454>
 8008cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc4:	e7e8      	b.n	8008c98 <_strtod_l+0x898>
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	e7e6      	b.n	8008c98 <_strtod_l+0x898>
 8008cca:	ea53 030a 	orrs.w	r3, r3, sl
 8008cce:	d0a1      	beq.n	8008c14 <_strtod_l+0x814>
 8008cd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008cd2:	b1db      	cbz	r3, 8008d0c <_strtod_l+0x90c>
 8008cd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cd6:	4213      	tst	r3, r2
 8008cd8:	d0ee      	beq.n	8008cb8 <_strtod_l+0x8b8>
 8008cda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cdc:	9a08      	ldr	r2, [sp, #32]
 8008cde:	4650      	mov	r0, sl
 8008ce0:	4659      	mov	r1, fp
 8008ce2:	b1bb      	cbz	r3, 8008d14 <_strtod_l+0x914>
 8008ce4:	f7ff fb6e 	bl	80083c4 <sulp>
 8008ce8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cec:	ec53 2b10 	vmov	r2, r3, d0
 8008cf0:	f7f7 facc 	bl	800028c <__adddf3>
 8008cf4:	4682      	mov	sl, r0
 8008cf6:	468b      	mov	fp, r1
 8008cf8:	e7de      	b.n	8008cb8 <_strtod_l+0x8b8>
 8008cfa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008cfe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008d02:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008d06:	f04f 3aff 	mov.w	sl, #4294967295
 8008d0a:	e7d5      	b.n	8008cb8 <_strtod_l+0x8b8>
 8008d0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d0e:	ea13 0f0a 	tst.w	r3, sl
 8008d12:	e7e1      	b.n	8008cd8 <_strtod_l+0x8d8>
 8008d14:	f7ff fb56 	bl	80083c4 <sulp>
 8008d18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d1c:	ec53 2b10 	vmov	r2, r3, d0
 8008d20:	f7f7 fab2 	bl	8000288 <__aeabi_dsub>
 8008d24:	2200      	movs	r2, #0
 8008d26:	2300      	movs	r3, #0
 8008d28:	4682      	mov	sl, r0
 8008d2a:	468b      	mov	fp, r1
 8008d2c:	f7f7 fecc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d30:	2800      	cmp	r0, #0
 8008d32:	d0c1      	beq.n	8008cb8 <_strtod_l+0x8b8>
 8008d34:	e619      	b.n	800896a <_strtod_l+0x56a>
 8008d36:	4641      	mov	r1, r8
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f7ff facd 	bl	80082d8 <__ratio>
 8008d3e:	ec57 6b10 	vmov	r6, r7, d0
 8008d42:	2200      	movs	r2, #0
 8008d44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008d48:	4630      	mov	r0, r6
 8008d4a:	4639      	mov	r1, r7
 8008d4c:	f7f7 fed0 	bl	8000af0 <__aeabi_dcmple>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d06f      	beq.n	8008e34 <_strtod_l+0xa34>
 8008d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d17a      	bne.n	8008e50 <_strtod_l+0xa50>
 8008d5a:	f1ba 0f00 	cmp.w	sl, #0
 8008d5e:	d158      	bne.n	8008e12 <_strtod_l+0xa12>
 8008d60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d15a      	bne.n	8008e20 <_strtod_l+0xa20>
 8008d6a:	4b64      	ldr	r3, [pc, #400]	@ (8008efc <_strtod_l+0xafc>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	4630      	mov	r0, r6
 8008d70:	4639      	mov	r1, r7
 8008d72:	f7f7 feb3 	bl	8000adc <__aeabi_dcmplt>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d159      	bne.n	8008e2e <_strtod_l+0xa2e>
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	4639      	mov	r1, r7
 8008d7e:	4b60      	ldr	r3, [pc, #384]	@ (8008f00 <_strtod_l+0xb00>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	f7f7 fc39 	bl	80005f8 <__aeabi_dmul>
 8008d86:	4606      	mov	r6, r0
 8008d88:	460f      	mov	r7, r1
 8008d8a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008d8e:	9606      	str	r6, [sp, #24]
 8008d90:	9307      	str	r3, [sp, #28]
 8008d92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d96:	4d57      	ldr	r5, [pc, #348]	@ (8008ef4 <_strtod_l+0xaf4>)
 8008d98:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d9e:	401d      	ands	r5, r3
 8008da0:	4b58      	ldr	r3, [pc, #352]	@ (8008f04 <_strtod_l+0xb04>)
 8008da2:	429d      	cmp	r5, r3
 8008da4:	f040 80b2 	bne.w	8008f0c <_strtod_l+0xb0c>
 8008da8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008daa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008dae:	ec4b ab10 	vmov	d0, sl, fp
 8008db2:	f7ff f9c9 	bl	8008148 <__ulp>
 8008db6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008dba:	ec51 0b10 	vmov	r0, r1, d0
 8008dbe:	f7f7 fc1b 	bl	80005f8 <__aeabi_dmul>
 8008dc2:	4652      	mov	r2, sl
 8008dc4:	465b      	mov	r3, fp
 8008dc6:	f7f7 fa61 	bl	800028c <__adddf3>
 8008dca:	460b      	mov	r3, r1
 8008dcc:	4949      	ldr	r1, [pc, #292]	@ (8008ef4 <_strtod_l+0xaf4>)
 8008dce:	4a4e      	ldr	r2, [pc, #312]	@ (8008f08 <_strtod_l+0xb08>)
 8008dd0:	4019      	ands	r1, r3
 8008dd2:	4291      	cmp	r1, r2
 8008dd4:	4682      	mov	sl, r0
 8008dd6:	d942      	bls.n	8008e5e <_strtod_l+0xa5e>
 8008dd8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008dda:	4b47      	ldr	r3, [pc, #284]	@ (8008ef8 <_strtod_l+0xaf8>)
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d103      	bne.n	8008de8 <_strtod_l+0x9e8>
 8008de0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008de2:	3301      	adds	r3, #1
 8008de4:	f43f ad2b 	beq.w	800883e <_strtod_l+0x43e>
 8008de8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008ef8 <_strtod_l+0xaf8>
 8008dec:	f04f 3aff 	mov.w	sl, #4294967295
 8008df0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008df2:	9805      	ldr	r0, [sp, #20]
 8008df4:	f7fe fe74 	bl	8007ae0 <_Bfree>
 8008df8:	9805      	ldr	r0, [sp, #20]
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	f7fe fe70 	bl	8007ae0 <_Bfree>
 8008e00:	9805      	ldr	r0, [sp, #20]
 8008e02:	4641      	mov	r1, r8
 8008e04:	f7fe fe6c 	bl	8007ae0 <_Bfree>
 8008e08:	9805      	ldr	r0, [sp, #20]
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	f7fe fe68 	bl	8007ae0 <_Bfree>
 8008e10:	e618      	b.n	8008a44 <_strtod_l+0x644>
 8008e12:	f1ba 0f01 	cmp.w	sl, #1
 8008e16:	d103      	bne.n	8008e20 <_strtod_l+0xa20>
 8008e18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f43f ada5 	beq.w	800896a <_strtod_l+0x56a>
 8008e20:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008ed0 <_strtod_l+0xad0>
 8008e24:	4f35      	ldr	r7, [pc, #212]	@ (8008efc <_strtod_l+0xafc>)
 8008e26:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008e2a:	2600      	movs	r6, #0
 8008e2c:	e7b1      	b.n	8008d92 <_strtod_l+0x992>
 8008e2e:	4f34      	ldr	r7, [pc, #208]	@ (8008f00 <_strtod_l+0xb00>)
 8008e30:	2600      	movs	r6, #0
 8008e32:	e7aa      	b.n	8008d8a <_strtod_l+0x98a>
 8008e34:	4b32      	ldr	r3, [pc, #200]	@ (8008f00 <_strtod_l+0xb00>)
 8008e36:	4630      	mov	r0, r6
 8008e38:	4639      	mov	r1, r7
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f7f7 fbdc 	bl	80005f8 <__aeabi_dmul>
 8008e40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e42:	4606      	mov	r6, r0
 8008e44:	460f      	mov	r7, r1
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d09f      	beq.n	8008d8a <_strtod_l+0x98a>
 8008e4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008e4e:	e7a0      	b.n	8008d92 <_strtod_l+0x992>
 8008e50:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008ed8 <_strtod_l+0xad8>
 8008e54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008e58:	ec57 6b17 	vmov	r6, r7, d7
 8008e5c:	e799      	b.n	8008d92 <_strtod_l+0x992>
 8008e5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008e62:	9b08      	ldr	r3, [sp, #32]
 8008e64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1c1      	bne.n	8008df0 <_strtod_l+0x9f0>
 8008e6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e70:	0d1b      	lsrs	r3, r3, #20
 8008e72:	051b      	lsls	r3, r3, #20
 8008e74:	429d      	cmp	r5, r3
 8008e76:	d1bb      	bne.n	8008df0 <_strtod_l+0x9f0>
 8008e78:	4630      	mov	r0, r6
 8008e7a:	4639      	mov	r1, r7
 8008e7c:	f7f7 ff1c 	bl	8000cb8 <__aeabi_d2lz>
 8008e80:	f7f7 fb8c 	bl	800059c <__aeabi_l2d>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4630      	mov	r0, r6
 8008e8a:	4639      	mov	r1, r7
 8008e8c:	f7f7 f9fc 	bl	8000288 <__aeabi_dsub>
 8008e90:	460b      	mov	r3, r1
 8008e92:	4602      	mov	r2, r0
 8008e94:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008e98:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e9e:	ea46 060a 	orr.w	r6, r6, sl
 8008ea2:	431e      	orrs	r6, r3
 8008ea4:	d06f      	beq.n	8008f86 <_strtod_l+0xb86>
 8008ea6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ee0 <_strtod_l+0xae0>)
 8008ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eac:	f7f7 fe16 	bl	8000adc <__aeabi_dcmplt>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	f47f accf 	bne.w	8008854 <_strtod_l+0x454>
 8008eb6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008ee8 <_strtod_l+0xae8>)
 8008eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ec0:	f7f7 fe2a 	bl	8000b18 <__aeabi_dcmpgt>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d093      	beq.n	8008df0 <_strtod_l+0x9f0>
 8008ec8:	e4c4      	b.n	8008854 <_strtod_l+0x454>
 8008eca:	bf00      	nop
 8008ecc:	f3af 8000 	nop.w
 8008ed0:	00000000 	.word	0x00000000
 8008ed4:	bff00000 	.word	0xbff00000
 8008ed8:	00000000 	.word	0x00000000
 8008edc:	3ff00000 	.word	0x3ff00000
 8008ee0:	94a03595 	.word	0x94a03595
 8008ee4:	3fdfffff 	.word	0x3fdfffff
 8008ee8:	35afe535 	.word	0x35afe535
 8008eec:	3fe00000 	.word	0x3fe00000
 8008ef0:	000fffff 	.word	0x000fffff
 8008ef4:	7ff00000 	.word	0x7ff00000
 8008ef8:	7fefffff 	.word	0x7fefffff
 8008efc:	3ff00000 	.word	0x3ff00000
 8008f00:	3fe00000 	.word	0x3fe00000
 8008f04:	7fe00000 	.word	0x7fe00000
 8008f08:	7c9fffff 	.word	0x7c9fffff
 8008f0c:	9b08      	ldr	r3, [sp, #32]
 8008f0e:	b323      	cbz	r3, 8008f5a <_strtod_l+0xb5a>
 8008f10:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008f14:	d821      	bhi.n	8008f5a <_strtod_l+0xb5a>
 8008f16:	a328      	add	r3, pc, #160	@ (adr r3, 8008fb8 <_strtod_l+0xbb8>)
 8008f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	4639      	mov	r1, r7
 8008f20:	f7f7 fde6 	bl	8000af0 <__aeabi_dcmple>
 8008f24:	b1a0      	cbz	r0, 8008f50 <_strtod_l+0xb50>
 8008f26:	4639      	mov	r1, r7
 8008f28:	4630      	mov	r0, r6
 8008f2a:	f7f7 fe3d 	bl	8000ba8 <__aeabi_d2uiz>
 8008f2e:	2801      	cmp	r0, #1
 8008f30:	bf38      	it	cc
 8008f32:	2001      	movcc	r0, #1
 8008f34:	f7f7 fae6 	bl	8000504 <__aeabi_ui2d>
 8008f38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	460f      	mov	r7, r1
 8008f3e:	b9fb      	cbnz	r3, 8008f80 <_strtod_l+0xb80>
 8008f40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f44:	9014      	str	r0, [sp, #80]	@ 0x50
 8008f46:	9315      	str	r3, [sp, #84]	@ 0x54
 8008f48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008f4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008f50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008f52:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008f56:	1b5b      	subs	r3, r3, r5
 8008f58:	9311      	str	r3, [sp, #68]	@ 0x44
 8008f5a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008f5e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008f62:	f7ff f8f1 	bl	8008148 <__ulp>
 8008f66:	4650      	mov	r0, sl
 8008f68:	ec53 2b10 	vmov	r2, r3, d0
 8008f6c:	4659      	mov	r1, fp
 8008f6e:	f7f7 fb43 	bl	80005f8 <__aeabi_dmul>
 8008f72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008f76:	f7f7 f989 	bl	800028c <__adddf3>
 8008f7a:	4682      	mov	sl, r0
 8008f7c:	468b      	mov	fp, r1
 8008f7e:	e770      	b.n	8008e62 <_strtod_l+0xa62>
 8008f80:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008f84:	e7e0      	b.n	8008f48 <_strtod_l+0xb48>
 8008f86:	a30e      	add	r3, pc, #56	@ (adr r3, 8008fc0 <_strtod_l+0xbc0>)
 8008f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8c:	f7f7 fda6 	bl	8000adc <__aeabi_dcmplt>
 8008f90:	e798      	b.n	8008ec4 <_strtod_l+0xac4>
 8008f92:	2300      	movs	r3, #0
 8008f94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f96:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008f98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f9a:	6013      	str	r3, [r2, #0]
 8008f9c:	f7ff ba6d 	b.w	800847a <_strtod_l+0x7a>
 8008fa0:	2a65      	cmp	r2, #101	@ 0x65
 8008fa2:	f43f ab66 	beq.w	8008672 <_strtod_l+0x272>
 8008fa6:	2a45      	cmp	r2, #69	@ 0x45
 8008fa8:	f43f ab63 	beq.w	8008672 <_strtod_l+0x272>
 8008fac:	2301      	movs	r3, #1
 8008fae:	f7ff bb9e 	b.w	80086ee <_strtod_l+0x2ee>
 8008fb2:	bf00      	nop
 8008fb4:	f3af 8000 	nop.w
 8008fb8:	ffc00000 	.word	0xffc00000
 8008fbc:	41dfffff 	.word	0x41dfffff
 8008fc0:	94a03595 	.word	0x94a03595
 8008fc4:	3fcfffff 	.word	0x3fcfffff

08008fc8 <_strtod_r>:
 8008fc8:	4b01      	ldr	r3, [pc, #4]	@ (8008fd0 <_strtod_r+0x8>)
 8008fca:	f7ff ba19 	b.w	8008400 <_strtod_l>
 8008fce:	bf00      	nop
 8008fd0:	20000080 	.word	0x20000080

08008fd4 <_strtol_l.constprop.0>:
 8008fd4:	2b24      	cmp	r3, #36	@ 0x24
 8008fd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fda:	4686      	mov	lr, r0
 8008fdc:	4690      	mov	r8, r2
 8008fde:	d801      	bhi.n	8008fe4 <_strtol_l.constprop.0+0x10>
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d106      	bne.n	8008ff2 <_strtol_l.constprop.0+0x1e>
 8008fe4:	f7fd fdbc 	bl	8006b60 <__errno>
 8008fe8:	2316      	movs	r3, #22
 8008fea:	6003      	str	r3, [r0, #0]
 8008fec:	2000      	movs	r0, #0
 8008fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff2:	4834      	ldr	r0, [pc, #208]	@ (80090c4 <_strtol_l.constprop.0+0xf0>)
 8008ff4:	460d      	mov	r5, r1
 8008ff6:	462a      	mov	r2, r5
 8008ff8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ffc:	5d06      	ldrb	r6, [r0, r4]
 8008ffe:	f016 0608 	ands.w	r6, r6, #8
 8009002:	d1f8      	bne.n	8008ff6 <_strtol_l.constprop.0+0x22>
 8009004:	2c2d      	cmp	r4, #45	@ 0x2d
 8009006:	d12d      	bne.n	8009064 <_strtol_l.constprop.0+0x90>
 8009008:	782c      	ldrb	r4, [r5, #0]
 800900a:	2601      	movs	r6, #1
 800900c:	1c95      	adds	r5, r2, #2
 800900e:	f033 0210 	bics.w	r2, r3, #16
 8009012:	d109      	bne.n	8009028 <_strtol_l.constprop.0+0x54>
 8009014:	2c30      	cmp	r4, #48	@ 0x30
 8009016:	d12a      	bne.n	800906e <_strtol_l.constprop.0+0x9a>
 8009018:	782a      	ldrb	r2, [r5, #0]
 800901a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800901e:	2a58      	cmp	r2, #88	@ 0x58
 8009020:	d125      	bne.n	800906e <_strtol_l.constprop.0+0x9a>
 8009022:	786c      	ldrb	r4, [r5, #1]
 8009024:	2310      	movs	r3, #16
 8009026:	3502      	adds	r5, #2
 8009028:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800902c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009030:	2200      	movs	r2, #0
 8009032:	fbbc f9f3 	udiv	r9, ip, r3
 8009036:	4610      	mov	r0, r2
 8009038:	fb03 ca19 	mls	sl, r3, r9, ip
 800903c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009040:	2f09      	cmp	r7, #9
 8009042:	d81b      	bhi.n	800907c <_strtol_l.constprop.0+0xa8>
 8009044:	463c      	mov	r4, r7
 8009046:	42a3      	cmp	r3, r4
 8009048:	dd27      	ble.n	800909a <_strtol_l.constprop.0+0xc6>
 800904a:	1c57      	adds	r7, r2, #1
 800904c:	d007      	beq.n	800905e <_strtol_l.constprop.0+0x8a>
 800904e:	4581      	cmp	r9, r0
 8009050:	d320      	bcc.n	8009094 <_strtol_l.constprop.0+0xc0>
 8009052:	d101      	bne.n	8009058 <_strtol_l.constprop.0+0x84>
 8009054:	45a2      	cmp	sl, r4
 8009056:	db1d      	blt.n	8009094 <_strtol_l.constprop.0+0xc0>
 8009058:	fb00 4003 	mla	r0, r0, r3, r4
 800905c:	2201      	movs	r2, #1
 800905e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009062:	e7eb      	b.n	800903c <_strtol_l.constprop.0+0x68>
 8009064:	2c2b      	cmp	r4, #43	@ 0x2b
 8009066:	bf04      	itt	eq
 8009068:	782c      	ldrbeq	r4, [r5, #0]
 800906a:	1c95      	addeq	r5, r2, #2
 800906c:	e7cf      	b.n	800900e <_strtol_l.constprop.0+0x3a>
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1da      	bne.n	8009028 <_strtol_l.constprop.0+0x54>
 8009072:	2c30      	cmp	r4, #48	@ 0x30
 8009074:	bf0c      	ite	eq
 8009076:	2308      	moveq	r3, #8
 8009078:	230a      	movne	r3, #10
 800907a:	e7d5      	b.n	8009028 <_strtol_l.constprop.0+0x54>
 800907c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009080:	2f19      	cmp	r7, #25
 8009082:	d801      	bhi.n	8009088 <_strtol_l.constprop.0+0xb4>
 8009084:	3c37      	subs	r4, #55	@ 0x37
 8009086:	e7de      	b.n	8009046 <_strtol_l.constprop.0+0x72>
 8009088:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800908c:	2f19      	cmp	r7, #25
 800908e:	d804      	bhi.n	800909a <_strtol_l.constprop.0+0xc6>
 8009090:	3c57      	subs	r4, #87	@ 0x57
 8009092:	e7d8      	b.n	8009046 <_strtol_l.constprop.0+0x72>
 8009094:	f04f 32ff 	mov.w	r2, #4294967295
 8009098:	e7e1      	b.n	800905e <_strtol_l.constprop.0+0x8a>
 800909a:	1c53      	adds	r3, r2, #1
 800909c:	d108      	bne.n	80090b0 <_strtol_l.constprop.0+0xdc>
 800909e:	2322      	movs	r3, #34	@ 0x22
 80090a0:	f8ce 3000 	str.w	r3, [lr]
 80090a4:	4660      	mov	r0, ip
 80090a6:	f1b8 0f00 	cmp.w	r8, #0
 80090aa:	d0a0      	beq.n	8008fee <_strtol_l.constprop.0+0x1a>
 80090ac:	1e69      	subs	r1, r5, #1
 80090ae:	e006      	b.n	80090be <_strtol_l.constprop.0+0xea>
 80090b0:	b106      	cbz	r6, 80090b4 <_strtol_l.constprop.0+0xe0>
 80090b2:	4240      	negs	r0, r0
 80090b4:	f1b8 0f00 	cmp.w	r8, #0
 80090b8:	d099      	beq.n	8008fee <_strtol_l.constprop.0+0x1a>
 80090ba:	2a00      	cmp	r2, #0
 80090bc:	d1f6      	bne.n	80090ac <_strtol_l.constprop.0+0xd8>
 80090be:	f8c8 1000 	str.w	r1, [r8]
 80090c2:	e794      	b.n	8008fee <_strtol_l.constprop.0+0x1a>
 80090c4:	0800ad81 	.word	0x0800ad81

080090c8 <_strtol_r>:
 80090c8:	f7ff bf84 	b.w	8008fd4 <_strtol_l.constprop.0>

080090cc <__ssputs_r>:
 80090cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090d0:	688e      	ldr	r6, [r1, #8]
 80090d2:	461f      	mov	r7, r3
 80090d4:	42be      	cmp	r6, r7
 80090d6:	680b      	ldr	r3, [r1, #0]
 80090d8:	4682      	mov	sl, r0
 80090da:	460c      	mov	r4, r1
 80090dc:	4690      	mov	r8, r2
 80090de:	d82d      	bhi.n	800913c <__ssputs_r+0x70>
 80090e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80090e8:	d026      	beq.n	8009138 <__ssputs_r+0x6c>
 80090ea:	6965      	ldr	r5, [r4, #20]
 80090ec:	6909      	ldr	r1, [r1, #16]
 80090ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090f2:	eba3 0901 	sub.w	r9, r3, r1
 80090f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090fa:	1c7b      	adds	r3, r7, #1
 80090fc:	444b      	add	r3, r9
 80090fe:	106d      	asrs	r5, r5, #1
 8009100:	429d      	cmp	r5, r3
 8009102:	bf38      	it	cc
 8009104:	461d      	movcc	r5, r3
 8009106:	0553      	lsls	r3, r2, #21
 8009108:	d527      	bpl.n	800915a <__ssputs_r+0x8e>
 800910a:	4629      	mov	r1, r5
 800910c:	f7fe fc1c 	bl	8007948 <_malloc_r>
 8009110:	4606      	mov	r6, r0
 8009112:	b360      	cbz	r0, 800916e <__ssputs_r+0xa2>
 8009114:	6921      	ldr	r1, [r4, #16]
 8009116:	464a      	mov	r2, r9
 8009118:	f000 ff5a 	bl	8009fd0 <memcpy>
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009126:	81a3      	strh	r3, [r4, #12]
 8009128:	6126      	str	r6, [r4, #16]
 800912a:	6165      	str	r5, [r4, #20]
 800912c:	444e      	add	r6, r9
 800912e:	eba5 0509 	sub.w	r5, r5, r9
 8009132:	6026      	str	r6, [r4, #0]
 8009134:	60a5      	str	r5, [r4, #8]
 8009136:	463e      	mov	r6, r7
 8009138:	42be      	cmp	r6, r7
 800913a:	d900      	bls.n	800913e <__ssputs_r+0x72>
 800913c:	463e      	mov	r6, r7
 800913e:	6820      	ldr	r0, [r4, #0]
 8009140:	4632      	mov	r2, r6
 8009142:	4641      	mov	r1, r8
 8009144:	f000 fef7 	bl	8009f36 <memmove>
 8009148:	68a3      	ldr	r3, [r4, #8]
 800914a:	1b9b      	subs	r3, r3, r6
 800914c:	60a3      	str	r3, [r4, #8]
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	4433      	add	r3, r6
 8009152:	6023      	str	r3, [r4, #0]
 8009154:	2000      	movs	r0, #0
 8009156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800915a:	462a      	mov	r2, r5
 800915c:	f001 facd 	bl	800a6fa <_realloc_r>
 8009160:	4606      	mov	r6, r0
 8009162:	2800      	cmp	r0, #0
 8009164:	d1e0      	bne.n	8009128 <__ssputs_r+0x5c>
 8009166:	6921      	ldr	r1, [r4, #16]
 8009168:	4650      	mov	r0, sl
 800916a:	f7fe fb79 	bl	8007860 <_free_r>
 800916e:	230c      	movs	r3, #12
 8009170:	f8ca 3000 	str.w	r3, [sl]
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800917a:	81a3      	strh	r3, [r4, #12]
 800917c:	f04f 30ff 	mov.w	r0, #4294967295
 8009180:	e7e9      	b.n	8009156 <__ssputs_r+0x8a>
	...

08009184 <_svfiprintf_r>:
 8009184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009188:	4698      	mov	r8, r3
 800918a:	898b      	ldrh	r3, [r1, #12]
 800918c:	061b      	lsls	r3, r3, #24
 800918e:	b09d      	sub	sp, #116	@ 0x74
 8009190:	4607      	mov	r7, r0
 8009192:	460d      	mov	r5, r1
 8009194:	4614      	mov	r4, r2
 8009196:	d510      	bpl.n	80091ba <_svfiprintf_r+0x36>
 8009198:	690b      	ldr	r3, [r1, #16]
 800919a:	b973      	cbnz	r3, 80091ba <_svfiprintf_r+0x36>
 800919c:	2140      	movs	r1, #64	@ 0x40
 800919e:	f7fe fbd3 	bl	8007948 <_malloc_r>
 80091a2:	6028      	str	r0, [r5, #0]
 80091a4:	6128      	str	r0, [r5, #16]
 80091a6:	b930      	cbnz	r0, 80091b6 <_svfiprintf_r+0x32>
 80091a8:	230c      	movs	r3, #12
 80091aa:	603b      	str	r3, [r7, #0]
 80091ac:	f04f 30ff 	mov.w	r0, #4294967295
 80091b0:	b01d      	add	sp, #116	@ 0x74
 80091b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b6:	2340      	movs	r3, #64	@ 0x40
 80091b8:	616b      	str	r3, [r5, #20]
 80091ba:	2300      	movs	r3, #0
 80091bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80091be:	2320      	movs	r3, #32
 80091c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80091c8:	2330      	movs	r3, #48	@ 0x30
 80091ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009368 <_svfiprintf_r+0x1e4>
 80091ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091d2:	f04f 0901 	mov.w	r9, #1
 80091d6:	4623      	mov	r3, r4
 80091d8:	469a      	mov	sl, r3
 80091da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091de:	b10a      	cbz	r2, 80091e4 <_svfiprintf_r+0x60>
 80091e0:	2a25      	cmp	r2, #37	@ 0x25
 80091e2:	d1f9      	bne.n	80091d8 <_svfiprintf_r+0x54>
 80091e4:	ebba 0b04 	subs.w	fp, sl, r4
 80091e8:	d00b      	beq.n	8009202 <_svfiprintf_r+0x7e>
 80091ea:	465b      	mov	r3, fp
 80091ec:	4622      	mov	r2, r4
 80091ee:	4629      	mov	r1, r5
 80091f0:	4638      	mov	r0, r7
 80091f2:	f7ff ff6b 	bl	80090cc <__ssputs_r>
 80091f6:	3001      	adds	r0, #1
 80091f8:	f000 80a7 	beq.w	800934a <_svfiprintf_r+0x1c6>
 80091fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091fe:	445a      	add	r2, fp
 8009200:	9209      	str	r2, [sp, #36]	@ 0x24
 8009202:	f89a 3000 	ldrb.w	r3, [sl]
 8009206:	2b00      	cmp	r3, #0
 8009208:	f000 809f 	beq.w	800934a <_svfiprintf_r+0x1c6>
 800920c:	2300      	movs	r3, #0
 800920e:	f04f 32ff 	mov.w	r2, #4294967295
 8009212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009216:	f10a 0a01 	add.w	sl, sl, #1
 800921a:	9304      	str	r3, [sp, #16]
 800921c:	9307      	str	r3, [sp, #28]
 800921e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009222:	931a      	str	r3, [sp, #104]	@ 0x68
 8009224:	4654      	mov	r4, sl
 8009226:	2205      	movs	r2, #5
 8009228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800922c:	484e      	ldr	r0, [pc, #312]	@ (8009368 <_svfiprintf_r+0x1e4>)
 800922e:	f7f6 ffcf 	bl	80001d0 <memchr>
 8009232:	9a04      	ldr	r2, [sp, #16]
 8009234:	b9d8      	cbnz	r0, 800926e <_svfiprintf_r+0xea>
 8009236:	06d0      	lsls	r0, r2, #27
 8009238:	bf44      	itt	mi
 800923a:	2320      	movmi	r3, #32
 800923c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009240:	0711      	lsls	r1, r2, #28
 8009242:	bf44      	itt	mi
 8009244:	232b      	movmi	r3, #43	@ 0x2b
 8009246:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800924a:	f89a 3000 	ldrb.w	r3, [sl]
 800924e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009250:	d015      	beq.n	800927e <_svfiprintf_r+0xfa>
 8009252:	9a07      	ldr	r2, [sp, #28]
 8009254:	4654      	mov	r4, sl
 8009256:	2000      	movs	r0, #0
 8009258:	f04f 0c0a 	mov.w	ip, #10
 800925c:	4621      	mov	r1, r4
 800925e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009262:	3b30      	subs	r3, #48	@ 0x30
 8009264:	2b09      	cmp	r3, #9
 8009266:	d94b      	bls.n	8009300 <_svfiprintf_r+0x17c>
 8009268:	b1b0      	cbz	r0, 8009298 <_svfiprintf_r+0x114>
 800926a:	9207      	str	r2, [sp, #28]
 800926c:	e014      	b.n	8009298 <_svfiprintf_r+0x114>
 800926e:	eba0 0308 	sub.w	r3, r0, r8
 8009272:	fa09 f303 	lsl.w	r3, r9, r3
 8009276:	4313      	orrs	r3, r2
 8009278:	9304      	str	r3, [sp, #16]
 800927a:	46a2      	mov	sl, r4
 800927c:	e7d2      	b.n	8009224 <_svfiprintf_r+0xa0>
 800927e:	9b03      	ldr	r3, [sp, #12]
 8009280:	1d19      	adds	r1, r3, #4
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	9103      	str	r1, [sp, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	bfbb      	ittet	lt
 800928a:	425b      	neglt	r3, r3
 800928c:	f042 0202 	orrlt.w	r2, r2, #2
 8009290:	9307      	strge	r3, [sp, #28]
 8009292:	9307      	strlt	r3, [sp, #28]
 8009294:	bfb8      	it	lt
 8009296:	9204      	strlt	r2, [sp, #16]
 8009298:	7823      	ldrb	r3, [r4, #0]
 800929a:	2b2e      	cmp	r3, #46	@ 0x2e
 800929c:	d10a      	bne.n	80092b4 <_svfiprintf_r+0x130>
 800929e:	7863      	ldrb	r3, [r4, #1]
 80092a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80092a2:	d132      	bne.n	800930a <_svfiprintf_r+0x186>
 80092a4:	9b03      	ldr	r3, [sp, #12]
 80092a6:	1d1a      	adds	r2, r3, #4
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	9203      	str	r2, [sp, #12]
 80092ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092b0:	3402      	adds	r4, #2
 80092b2:	9305      	str	r3, [sp, #20]
 80092b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009378 <_svfiprintf_r+0x1f4>
 80092b8:	7821      	ldrb	r1, [r4, #0]
 80092ba:	2203      	movs	r2, #3
 80092bc:	4650      	mov	r0, sl
 80092be:	f7f6 ff87 	bl	80001d0 <memchr>
 80092c2:	b138      	cbz	r0, 80092d4 <_svfiprintf_r+0x150>
 80092c4:	9b04      	ldr	r3, [sp, #16]
 80092c6:	eba0 000a 	sub.w	r0, r0, sl
 80092ca:	2240      	movs	r2, #64	@ 0x40
 80092cc:	4082      	lsls	r2, r0
 80092ce:	4313      	orrs	r3, r2
 80092d0:	3401      	adds	r4, #1
 80092d2:	9304      	str	r3, [sp, #16]
 80092d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d8:	4824      	ldr	r0, [pc, #144]	@ (800936c <_svfiprintf_r+0x1e8>)
 80092da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092de:	2206      	movs	r2, #6
 80092e0:	f7f6 ff76 	bl	80001d0 <memchr>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d036      	beq.n	8009356 <_svfiprintf_r+0x1d2>
 80092e8:	4b21      	ldr	r3, [pc, #132]	@ (8009370 <_svfiprintf_r+0x1ec>)
 80092ea:	bb1b      	cbnz	r3, 8009334 <_svfiprintf_r+0x1b0>
 80092ec:	9b03      	ldr	r3, [sp, #12]
 80092ee:	3307      	adds	r3, #7
 80092f0:	f023 0307 	bic.w	r3, r3, #7
 80092f4:	3308      	adds	r3, #8
 80092f6:	9303      	str	r3, [sp, #12]
 80092f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092fa:	4433      	add	r3, r6
 80092fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80092fe:	e76a      	b.n	80091d6 <_svfiprintf_r+0x52>
 8009300:	fb0c 3202 	mla	r2, ip, r2, r3
 8009304:	460c      	mov	r4, r1
 8009306:	2001      	movs	r0, #1
 8009308:	e7a8      	b.n	800925c <_svfiprintf_r+0xd8>
 800930a:	2300      	movs	r3, #0
 800930c:	3401      	adds	r4, #1
 800930e:	9305      	str	r3, [sp, #20]
 8009310:	4619      	mov	r1, r3
 8009312:	f04f 0c0a 	mov.w	ip, #10
 8009316:	4620      	mov	r0, r4
 8009318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800931c:	3a30      	subs	r2, #48	@ 0x30
 800931e:	2a09      	cmp	r2, #9
 8009320:	d903      	bls.n	800932a <_svfiprintf_r+0x1a6>
 8009322:	2b00      	cmp	r3, #0
 8009324:	d0c6      	beq.n	80092b4 <_svfiprintf_r+0x130>
 8009326:	9105      	str	r1, [sp, #20]
 8009328:	e7c4      	b.n	80092b4 <_svfiprintf_r+0x130>
 800932a:	fb0c 2101 	mla	r1, ip, r1, r2
 800932e:	4604      	mov	r4, r0
 8009330:	2301      	movs	r3, #1
 8009332:	e7f0      	b.n	8009316 <_svfiprintf_r+0x192>
 8009334:	ab03      	add	r3, sp, #12
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	462a      	mov	r2, r5
 800933a:	4b0e      	ldr	r3, [pc, #56]	@ (8009374 <_svfiprintf_r+0x1f0>)
 800933c:	a904      	add	r1, sp, #16
 800933e:	4638      	mov	r0, r7
 8009340:	f7fc fb88 	bl	8005a54 <_printf_float>
 8009344:	1c42      	adds	r2, r0, #1
 8009346:	4606      	mov	r6, r0
 8009348:	d1d6      	bne.n	80092f8 <_svfiprintf_r+0x174>
 800934a:	89ab      	ldrh	r3, [r5, #12]
 800934c:	065b      	lsls	r3, r3, #25
 800934e:	f53f af2d 	bmi.w	80091ac <_svfiprintf_r+0x28>
 8009352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009354:	e72c      	b.n	80091b0 <_svfiprintf_r+0x2c>
 8009356:	ab03      	add	r3, sp, #12
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	462a      	mov	r2, r5
 800935c:	4b05      	ldr	r3, [pc, #20]	@ (8009374 <_svfiprintf_r+0x1f0>)
 800935e:	a904      	add	r1, sp, #16
 8009360:	4638      	mov	r0, r7
 8009362:	f7fc fe0f 	bl	8005f84 <_printf_i>
 8009366:	e7ed      	b.n	8009344 <_svfiprintf_r+0x1c0>
 8009368:	0800ae81 	.word	0x0800ae81
 800936c:	0800ae8b 	.word	0x0800ae8b
 8009370:	08005a55 	.word	0x08005a55
 8009374:	080090cd 	.word	0x080090cd
 8009378:	0800ae87 	.word	0x0800ae87

0800937c <_sungetc_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	1c4b      	adds	r3, r1, #1
 8009380:	4614      	mov	r4, r2
 8009382:	d103      	bne.n	800938c <_sungetc_r+0x10>
 8009384:	f04f 35ff 	mov.w	r5, #4294967295
 8009388:	4628      	mov	r0, r5
 800938a:	bd38      	pop	{r3, r4, r5, pc}
 800938c:	8993      	ldrh	r3, [r2, #12]
 800938e:	f023 0320 	bic.w	r3, r3, #32
 8009392:	8193      	strh	r3, [r2, #12]
 8009394:	6853      	ldr	r3, [r2, #4]
 8009396:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009398:	b2cd      	uxtb	r5, r1
 800939a:	b18a      	cbz	r2, 80093c0 <_sungetc_r+0x44>
 800939c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800939e:	429a      	cmp	r2, r3
 80093a0:	dd08      	ble.n	80093b4 <_sungetc_r+0x38>
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	1e5a      	subs	r2, r3, #1
 80093a6:	6022      	str	r2, [r4, #0]
 80093a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80093ac:	6863      	ldr	r3, [r4, #4]
 80093ae:	3301      	adds	r3, #1
 80093b0:	6063      	str	r3, [r4, #4]
 80093b2:	e7e9      	b.n	8009388 <_sungetc_r+0xc>
 80093b4:	4621      	mov	r1, r4
 80093b6:	f000 fd84 	bl	8009ec2 <__submore>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d0f1      	beq.n	80093a2 <_sungetc_r+0x26>
 80093be:	e7e1      	b.n	8009384 <_sungetc_r+0x8>
 80093c0:	6921      	ldr	r1, [r4, #16]
 80093c2:	6822      	ldr	r2, [r4, #0]
 80093c4:	b141      	cbz	r1, 80093d8 <_sungetc_r+0x5c>
 80093c6:	4291      	cmp	r1, r2
 80093c8:	d206      	bcs.n	80093d8 <_sungetc_r+0x5c>
 80093ca:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80093ce:	42a9      	cmp	r1, r5
 80093d0:	d102      	bne.n	80093d8 <_sungetc_r+0x5c>
 80093d2:	3a01      	subs	r2, #1
 80093d4:	6022      	str	r2, [r4, #0]
 80093d6:	e7ea      	b.n	80093ae <_sungetc_r+0x32>
 80093d8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80093dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80093e2:	2303      	movs	r3, #3
 80093e4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80093e6:	4623      	mov	r3, r4
 80093e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	2301      	movs	r3, #1
 80093f0:	e7de      	b.n	80093b0 <_sungetc_r+0x34>

080093f2 <__ssrefill_r>:
 80093f2:	b510      	push	{r4, lr}
 80093f4:	460c      	mov	r4, r1
 80093f6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80093f8:	b169      	cbz	r1, 8009416 <__ssrefill_r+0x24>
 80093fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093fe:	4299      	cmp	r1, r3
 8009400:	d001      	beq.n	8009406 <__ssrefill_r+0x14>
 8009402:	f7fe fa2d 	bl	8007860 <_free_r>
 8009406:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009408:	6063      	str	r3, [r4, #4]
 800940a:	2000      	movs	r0, #0
 800940c:	6360      	str	r0, [r4, #52]	@ 0x34
 800940e:	b113      	cbz	r3, 8009416 <__ssrefill_r+0x24>
 8009410:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009412:	6023      	str	r3, [r4, #0]
 8009414:	bd10      	pop	{r4, pc}
 8009416:	6923      	ldr	r3, [r4, #16]
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	2300      	movs	r3, #0
 800941c:	6063      	str	r3, [r4, #4]
 800941e:	89a3      	ldrh	r3, [r4, #12]
 8009420:	f043 0320 	orr.w	r3, r3, #32
 8009424:	81a3      	strh	r3, [r4, #12]
 8009426:	f04f 30ff 	mov.w	r0, #4294967295
 800942a:	e7f3      	b.n	8009414 <__ssrefill_r+0x22>

0800942c <__ssvfiscanf_r>:
 800942c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009430:	460c      	mov	r4, r1
 8009432:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009436:	2100      	movs	r1, #0
 8009438:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800943c:	49a5      	ldr	r1, [pc, #660]	@ (80096d4 <__ssvfiscanf_r+0x2a8>)
 800943e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009440:	f10d 0804 	add.w	r8, sp, #4
 8009444:	49a4      	ldr	r1, [pc, #656]	@ (80096d8 <__ssvfiscanf_r+0x2ac>)
 8009446:	4fa5      	ldr	r7, [pc, #660]	@ (80096dc <__ssvfiscanf_r+0x2b0>)
 8009448:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800944c:	4606      	mov	r6, r0
 800944e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	7813      	ldrb	r3, [r2, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	f000 8158 	beq.w	800970a <__ssvfiscanf_r+0x2de>
 800945a:	5cf9      	ldrb	r1, [r7, r3]
 800945c:	f011 0108 	ands.w	r1, r1, #8
 8009460:	f102 0501 	add.w	r5, r2, #1
 8009464:	d019      	beq.n	800949a <__ssvfiscanf_r+0x6e>
 8009466:	6863      	ldr	r3, [r4, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	dd0f      	ble.n	800948c <__ssvfiscanf_r+0x60>
 800946c:	6823      	ldr	r3, [r4, #0]
 800946e:	781a      	ldrb	r2, [r3, #0]
 8009470:	5cba      	ldrb	r2, [r7, r2]
 8009472:	0712      	lsls	r2, r2, #28
 8009474:	d401      	bmi.n	800947a <__ssvfiscanf_r+0x4e>
 8009476:	462a      	mov	r2, r5
 8009478:	e7eb      	b.n	8009452 <__ssvfiscanf_r+0x26>
 800947a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800947c:	3201      	adds	r2, #1
 800947e:	9245      	str	r2, [sp, #276]	@ 0x114
 8009480:	6862      	ldr	r2, [r4, #4]
 8009482:	3301      	adds	r3, #1
 8009484:	3a01      	subs	r2, #1
 8009486:	6062      	str	r2, [r4, #4]
 8009488:	6023      	str	r3, [r4, #0]
 800948a:	e7ec      	b.n	8009466 <__ssvfiscanf_r+0x3a>
 800948c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800948e:	4621      	mov	r1, r4
 8009490:	4630      	mov	r0, r6
 8009492:	4798      	blx	r3
 8009494:	2800      	cmp	r0, #0
 8009496:	d0e9      	beq.n	800946c <__ssvfiscanf_r+0x40>
 8009498:	e7ed      	b.n	8009476 <__ssvfiscanf_r+0x4a>
 800949a:	2b25      	cmp	r3, #37	@ 0x25
 800949c:	d012      	beq.n	80094c4 <__ssvfiscanf_r+0x98>
 800949e:	4699      	mov	r9, r3
 80094a0:	6863      	ldr	r3, [r4, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f340 8093 	ble.w	80095ce <__ssvfiscanf_r+0x1a2>
 80094a8:	6822      	ldr	r2, [r4, #0]
 80094aa:	7813      	ldrb	r3, [r2, #0]
 80094ac:	454b      	cmp	r3, r9
 80094ae:	f040 812c 	bne.w	800970a <__ssvfiscanf_r+0x2de>
 80094b2:	6863      	ldr	r3, [r4, #4]
 80094b4:	3b01      	subs	r3, #1
 80094b6:	6063      	str	r3, [r4, #4]
 80094b8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80094ba:	3201      	adds	r2, #1
 80094bc:	3301      	adds	r3, #1
 80094be:	6022      	str	r2, [r4, #0]
 80094c0:	9345      	str	r3, [sp, #276]	@ 0x114
 80094c2:	e7d8      	b.n	8009476 <__ssvfiscanf_r+0x4a>
 80094c4:	9141      	str	r1, [sp, #260]	@ 0x104
 80094c6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80094c8:	7853      	ldrb	r3, [r2, #1]
 80094ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80094cc:	bf02      	ittt	eq
 80094ce:	2310      	moveq	r3, #16
 80094d0:	1c95      	addeq	r5, r2, #2
 80094d2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80094d4:	220a      	movs	r2, #10
 80094d6:	46a9      	mov	r9, r5
 80094d8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80094dc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80094e0:	2b09      	cmp	r3, #9
 80094e2:	d91e      	bls.n	8009522 <__ssvfiscanf_r+0xf6>
 80094e4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80096e0 <__ssvfiscanf_r+0x2b4>
 80094e8:	2203      	movs	r2, #3
 80094ea:	4650      	mov	r0, sl
 80094ec:	f7f6 fe70 	bl	80001d0 <memchr>
 80094f0:	b138      	cbz	r0, 8009502 <__ssvfiscanf_r+0xd6>
 80094f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80094f4:	eba0 000a 	sub.w	r0, r0, sl
 80094f8:	2301      	movs	r3, #1
 80094fa:	4083      	lsls	r3, r0
 80094fc:	4313      	orrs	r3, r2
 80094fe:	9341      	str	r3, [sp, #260]	@ 0x104
 8009500:	464d      	mov	r5, r9
 8009502:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009506:	2b78      	cmp	r3, #120	@ 0x78
 8009508:	d806      	bhi.n	8009518 <__ssvfiscanf_r+0xec>
 800950a:	2b57      	cmp	r3, #87	@ 0x57
 800950c:	d810      	bhi.n	8009530 <__ssvfiscanf_r+0x104>
 800950e:	2b25      	cmp	r3, #37	@ 0x25
 8009510:	d0c5      	beq.n	800949e <__ssvfiscanf_r+0x72>
 8009512:	d857      	bhi.n	80095c4 <__ssvfiscanf_r+0x198>
 8009514:	2b00      	cmp	r3, #0
 8009516:	d065      	beq.n	80095e4 <__ssvfiscanf_r+0x1b8>
 8009518:	2303      	movs	r3, #3
 800951a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800951c:	230a      	movs	r3, #10
 800951e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009520:	e078      	b.n	8009614 <__ssvfiscanf_r+0x1e8>
 8009522:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009524:	fb02 1103 	mla	r1, r2, r3, r1
 8009528:	3930      	subs	r1, #48	@ 0x30
 800952a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800952c:	464d      	mov	r5, r9
 800952e:	e7d2      	b.n	80094d6 <__ssvfiscanf_r+0xaa>
 8009530:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009534:	2a20      	cmp	r2, #32
 8009536:	d8ef      	bhi.n	8009518 <__ssvfiscanf_r+0xec>
 8009538:	a101      	add	r1, pc, #4	@ (adr r1, 8009540 <__ssvfiscanf_r+0x114>)
 800953a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800953e:	bf00      	nop
 8009540:	080095f3 	.word	0x080095f3
 8009544:	08009519 	.word	0x08009519
 8009548:	08009519 	.word	0x08009519
 800954c:	0800964d 	.word	0x0800964d
 8009550:	08009519 	.word	0x08009519
 8009554:	08009519 	.word	0x08009519
 8009558:	08009519 	.word	0x08009519
 800955c:	08009519 	.word	0x08009519
 8009560:	08009519 	.word	0x08009519
 8009564:	08009519 	.word	0x08009519
 8009568:	08009519 	.word	0x08009519
 800956c:	08009663 	.word	0x08009663
 8009570:	08009649 	.word	0x08009649
 8009574:	080095cb 	.word	0x080095cb
 8009578:	080095cb 	.word	0x080095cb
 800957c:	080095cb 	.word	0x080095cb
 8009580:	08009519 	.word	0x08009519
 8009584:	08009605 	.word	0x08009605
 8009588:	08009519 	.word	0x08009519
 800958c:	08009519 	.word	0x08009519
 8009590:	08009519 	.word	0x08009519
 8009594:	08009519 	.word	0x08009519
 8009598:	08009673 	.word	0x08009673
 800959c:	0800960d 	.word	0x0800960d
 80095a0:	080095eb 	.word	0x080095eb
 80095a4:	08009519 	.word	0x08009519
 80095a8:	08009519 	.word	0x08009519
 80095ac:	0800966f 	.word	0x0800966f
 80095b0:	08009519 	.word	0x08009519
 80095b4:	08009649 	.word	0x08009649
 80095b8:	08009519 	.word	0x08009519
 80095bc:	08009519 	.word	0x08009519
 80095c0:	080095f3 	.word	0x080095f3
 80095c4:	3b45      	subs	r3, #69	@ 0x45
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d8a6      	bhi.n	8009518 <__ssvfiscanf_r+0xec>
 80095ca:	2305      	movs	r3, #5
 80095cc:	e021      	b.n	8009612 <__ssvfiscanf_r+0x1e6>
 80095ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80095d0:	4621      	mov	r1, r4
 80095d2:	4630      	mov	r0, r6
 80095d4:	4798      	blx	r3
 80095d6:	2800      	cmp	r0, #0
 80095d8:	f43f af66 	beq.w	80094a8 <__ssvfiscanf_r+0x7c>
 80095dc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80095de:	2800      	cmp	r0, #0
 80095e0:	f040 808b 	bne.w	80096fa <__ssvfiscanf_r+0x2ce>
 80095e4:	f04f 30ff 	mov.w	r0, #4294967295
 80095e8:	e08b      	b.n	8009702 <__ssvfiscanf_r+0x2d6>
 80095ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80095ec:	f042 0220 	orr.w	r2, r2, #32
 80095f0:	9241      	str	r2, [sp, #260]	@ 0x104
 80095f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80095f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095f8:	9241      	str	r2, [sp, #260]	@ 0x104
 80095fa:	2210      	movs	r2, #16
 80095fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80095fe:	9242      	str	r2, [sp, #264]	@ 0x108
 8009600:	d902      	bls.n	8009608 <__ssvfiscanf_r+0x1dc>
 8009602:	e005      	b.n	8009610 <__ssvfiscanf_r+0x1e4>
 8009604:	2300      	movs	r3, #0
 8009606:	9342      	str	r3, [sp, #264]	@ 0x108
 8009608:	2303      	movs	r3, #3
 800960a:	e002      	b.n	8009612 <__ssvfiscanf_r+0x1e6>
 800960c:	2308      	movs	r3, #8
 800960e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009610:	2304      	movs	r3, #4
 8009612:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009614:	6863      	ldr	r3, [r4, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	dd39      	ble.n	800968e <__ssvfiscanf_r+0x262>
 800961a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800961c:	0659      	lsls	r1, r3, #25
 800961e:	d404      	bmi.n	800962a <__ssvfiscanf_r+0x1fe>
 8009620:	6823      	ldr	r3, [r4, #0]
 8009622:	781a      	ldrb	r2, [r3, #0]
 8009624:	5cba      	ldrb	r2, [r7, r2]
 8009626:	0712      	lsls	r2, r2, #28
 8009628:	d438      	bmi.n	800969c <__ssvfiscanf_r+0x270>
 800962a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800962c:	2b02      	cmp	r3, #2
 800962e:	dc47      	bgt.n	80096c0 <__ssvfiscanf_r+0x294>
 8009630:	466b      	mov	r3, sp
 8009632:	4622      	mov	r2, r4
 8009634:	a941      	add	r1, sp, #260	@ 0x104
 8009636:	4630      	mov	r0, r6
 8009638:	f000 f9ae 	bl	8009998 <_scanf_chars>
 800963c:	2801      	cmp	r0, #1
 800963e:	d064      	beq.n	800970a <__ssvfiscanf_r+0x2de>
 8009640:	2802      	cmp	r0, #2
 8009642:	f47f af18 	bne.w	8009476 <__ssvfiscanf_r+0x4a>
 8009646:	e7c9      	b.n	80095dc <__ssvfiscanf_r+0x1b0>
 8009648:	220a      	movs	r2, #10
 800964a:	e7d7      	b.n	80095fc <__ssvfiscanf_r+0x1d0>
 800964c:	4629      	mov	r1, r5
 800964e:	4640      	mov	r0, r8
 8009650:	f000 fbfe 	bl	8009e50 <__sccl>
 8009654:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800965a:	9341      	str	r3, [sp, #260]	@ 0x104
 800965c:	4605      	mov	r5, r0
 800965e:	2301      	movs	r3, #1
 8009660:	e7d7      	b.n	8009612 <__ssvfiscanf_r+0x1e6>
 8009662:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009668:	9341      	str	r3, [sp, #260]	@ 0x104
 800966a:	2300      	movs	r3, #0
 800966c:	e7d1      	b.n	8009612 <__ssvfiscanf_r+0x1e6>
 800966e:	2302      	movs	r3, #2
 8009670:	e7cf      	b.n	8009612 <__ssvfiscanf_r+0x1e6>
 8009672:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009674:	06c3      	lsls	r3, r0, #27
 8009676:	f53f aefe 	bmi.w	8009476 <__ssvfiscanf_r+0x4a>
 800967a:	9b00      	ldr	r3, [sp, #0]
 800967c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800967e:	1d19      	adds	r1, r3, #4
 8009680:	9100      	str	r1, [sp, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	07c0      	lsls	r0, r0, #31
 8009686:	bf4c      	ite	mi
 8009688:	801a      	strhmi	r2, [r3, #0]
 800968a:	601a      	strpl	r2, [r3, #0]
 800968c:	e6f3      	b.n	8009476 <__ssvfiscanf_r+0x4a>
 800968e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009690:	4621      	mov	r1, r4
 8009692:	4630      	mov	r0, r6
 8009694:	4798      	blx	r3
 8009696:	2800      	cmp	r0, #0
 8009698:	d0bf      	beq.n	800961a <__ssvfiscanf_r+0x1ee>
 800969a:	e79f      	b.n	80095dc <__ssvfiscanf_r+0x1b0>
 800969c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800969e:	3201      	adds	r2, #1
 80096a0:	9245      	str	r2, [sp, #276]	@ 0x114
 80096a2:	6862      	ldr	r2, [r4, #4]
 80096a4:	3a01      	subs	r2, #1
 80096a6:	2a00      	cmp	r2, #0
 80096a8:	6062      	str	r2, [r4, #4]
 80096aa:	dd02      	ble.n	80096b2 <__ssvfiscanf_r+0x286>
 80096ac:	3301      	adds	r3, #1
 80096ae:	6023      	str	r3, [r4, #0]
 80096b0:	e7b6      	b.n	8009620 <__ssvfiscanf_r+0x1f4>
 80096b2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80096b4:	4621      	mov	r1, r4
 80096b6:	4630      	mov	r0, r6
 80096b8:	4798      	blx	r3
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d0b0      	beq.n	8009620 <__ssvfiscanf_r+0x1f4>
 80096be:	e78d      	b.n	80095dc <__ssvfiscanf_r+0x1b0>
 80096c0:	2b04      	cmp	r3, #4
 80096c2:	dc0f      	bgt.n	80096e4 <__ssvfiscanf_r+0x2b8>
 80096c4:	466b      	mov	r3, sp
 80096c6:	4622      	mov	r2, r4
 80096c8:	a941      	add	r1, sp, #260	@ 0x104
 80096ca:	4630      	mov	r0, r6
 80096cc:	f000 f9be 	bl	8009a4c <_scanf_i>
 80096d0:	e7b4      	b.n	800963c <__ssvfiscanf_r+0x210>
 80096d2:	bf00      	nop
 80096d4:	0800937d 	.word	0x0800937d
 80096d8:	080093f3 	.word	0x080093f3
 80096dc:	0800ad81 	.word	0x0800ad81
 80096e0:	0800ae87 	.word	0x0800ae87
 80096e4:	4b0a      	ldr	r3, [pc, #40]	@ (8009710 <__ssvfiscanf_r+0x2e4>)
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f43f aec5 	beq.w	8009476 <__ssvfiscanf_r+0x4a>
 80096ec:	466b      	mov	r3, sp
 80096ee:	4622      	mov	r2, r4
 80096f0:	a941      	add	r1, sp, #260	@ 0x104
 80096f2:	4630      	mov	r0, r6
 80096f4:	f7fc fd66 	bl	80061c4 <_scanf_float>
 80096f8:	e7a0      	b.n	800963c <__ssvfiscanf_r+0x210>
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	065b      	lsls	r3, r3, #25
 80096fe:	f53f af71 	bmi.w	80095e4 <__ssvfiscanf_r+0x1b8>
 8009702:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8009706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800970a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800970c:	e7f9      	b.n	8009702 <__ssvfiscanf_r+0x2d6>
 800970e:	bf00      	nop
 8009710:	080061c5 	.word	0x080061c5

08009714 <__sfputc_r>:
 8009714:	6893      	ldr	r3, [r2, #8]
 8009716:	3b01      	subs	r3, #1
 8009718:	2b00      	cmp	r3, #0
 800971a:	b410      	push	{r4}
 800971c:	6093      	str	r3, [r2, #8]
 800971e:	da08      	bge.n	8009732 <__sfputc_r+0x1e>
 8009720:	6994      	ldr	r4, [r2, #24]
 8009722:	42a3      	cmp	r3, r4
 8009724:	db01      	blt.n	800972a <__sfputc_r+0x16>
 8009726:	290a      	cmp	r1, #10
 8009728:	d103      	bne.n	8009732 <__sfputc_r+0x1e>
 800972a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800972e:	f7fd b91e 	b.w	800696e <__swbuf_r>
 8009732:	6813      	ldr	r3, [r2, #0]
 8009734:	1c58      	adds	r0, r3, #1
 8009736:	6010      	str	r0, [r2, #0]
 8009738:	7019      	strb	r1, [r3, #0]
 800973a:	4608      	mov	r0, r1
 800973c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009740:	4770      	bx	lr

08009742 <__sfputs_r>:
 8009742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009744:	4606      	mov	r6, r0
 8009746:	460f      	mov	r7, r1
 8009748:	4614      	mov	r4, r2
 800974a:	18d5      	adds	r5, r2, r3
 800974c:	42ac      	cmp	r4, r5
 800974e:	d101      	bne.n	8009754 <__sfputs_r+0x12>
 8009750:	2000      	movs	r0, #0
 8009752:	e007      	b.n	8009764 <__sfputs_r+0x22>
 8009754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009758:	463a      	mov	r2, r7
 800975a:	4630      	mov	r0, r6
 800975c:	f7ff ffda 	bl	8009714 <__sfputc_r>
 8009760:	1c43      	adds	r3, r0, #1
 8009762:	d1f3      	bne.n	800974c <__sfputs_r+0xa>
 8009764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009768 <_vfiprintf_r>:
 8009768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976c:	460d      	mov	r5, r1
 800976e:	b09d      	sub	sp, #116	@ 0x74
 8009770:	4614      	mov	r4, r2
 8009772:	4698      	mov	r8, r3
 8009774:	4606      	mov	r6, r0
 8009776:	b118      	cbz	r0, 8009780 <_vfiprintf_r+0x18>
 8009778:	6a03      	ldr	r3, [r0, #32]
 800977a:	b90b      	cbnz	r3, 8009780 <_vfiprintf_r+0x18>
 800977c:	f7fc ffc2 	bl	8006704 <__sinit>
 8009780:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009782:	07d9      	lsls	r1, r3, #31
 8009784:	d405      	bmi.n	8009792 <_vfiprintf_r+0x2a>
 8009786:	89ab      	ldrh	r3, [r5, #12]
 8009788:	059a      	lsls	r2, r3, #22
 800978a:	d402      	bmi.n	8009792 <_vfiprintf_r+0x2a>
 800978c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800978e:	f7fd fa12 	bl	8006bb6 <__retarget_lock_acquire_recursive>
 8009792:	89ab      	ldrh	r3, [r5, #12]
 8009794:	071b      	lsls	r3, r3, #28
 8009796:	d501      	bpl.n	800979c <_vfiprintf_r+0x34>
 8009798:	692b      	ldr	r3, [r5, #16]
 800979a:	b99b      	cbnz	r3, 80097c4 <_vfiprintf_r+0x5c>
 800979c:	4629      	mov	r1, r5
 800979e:	4630      	mov	r0, r6
 80097a0:	f7fd f924 	bl	80069ec <__swsetup_r>
 80097a4:	b170      	cbz	r0, 80097c4 <_vfiprintf_r+0x5c>
 80097a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097a8:	07dc      	lsls	r4, r3, #31
 80097aa:	d504      	bpl.n	80097b6 <_vfiprintf_r+0x4e>
 80097ac:	f04f 30ff 	mov.w	r0, #4294967295
 80097b0:	b01d      	add	sp, #116	@ 0x74
 80097b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b6:	89ab      	ldrh	r3, [r5, #12]
 80097b8:	0598      	lsls	r0, r3, #22
 80097ba:	d4f7      	bmi.n	80097ac <_vfiprintf_r+0x44>
 80097bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097be:	f7fd f9fb 	bl	8006bb8 <__retarget_lock_release_recursive>
 80097c2:	e7f3      	b.n	80097ac <_vfiprintf_r+0x44>
 80097c4:	2300      	movs	r3, #0
 80097c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80097c8:	2320      	movs	r3, #32
 80097ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80097d2:	2330      	movs	r3, #48	@ 0x30
 80097d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009984 <_vfiprintf_r+0x21c>
 80097d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097dc:	f04f 0901 	mov.w	r9, #1
 80097e0:	4623      	mov	r3, r4
 80097e2:	469a      	mov	sl, r3
 80097e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097e8:	b10a      	cbz	r2, 80097ee <_vfiprintf_r+0x86>
 80097ea:	2a25      	cmp	r2, #37	@ 0x25
 80097ec:	d1f9      	bne.n	80097e2 <_vfiprintf_r+0x7a>
 80097ee:	ebba 0b04 	subs.w	fp, sl, r4
 80097f2:	d00b      	beq.n	800980c <_vfiprintf_r+0xa4>
 80097f4:	465b      	mov	r3, fp
 80097f6:	4622      	mov	r2, r4
 80097f8:	4629      	mov	r1, r5
 80097fa:	4630      	mov	r0, r6
 80097fc:	f7ff ffa1 	bl	8009742 <__sfputs_r>
 8009800:	3001      	adds	r0, #1
 8009802:	f000 80a7 	beq.w	8009954 <_vfiprintf_r+0x1ec>
 8009806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009808:	445a      	add	r2, fp
 800980a:	9209      	str	r2, [sp, #36]	@ 0x24
 800980c:	f89a 3000 	ldrb.w	r3, [sl]
 8009810:	2b00      	cmp	r3, #0
 8009812:	f000 809f 	beq.w	8009954 <_vfiprintf_r+0x1ec>
 8009816:	2300      	movs	r3, #0
 8009818:	f04f 32ff 	mov.w	r2, #4294967295
 800981c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009820:	f10a 0a01 	add.w	sl, sl, #1
 8009824:	9304      	str	r3, [sp, #16]
 8009826:	9307      	str	r3, [sp, #28]
 8009828:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800982c:	931a      	str	r3, [sp, #104]	@ 0x68
 800982e:	4654      	mov	r4, sl
 8009830:	2205      	movs	r2, #5
 8009832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009836:	4853      	ldr	r0, [pc, #332]	@ (8009984 <_vfiprintf_r+0x21c>)
 8009838:	f7f6 fcca 	bl	80001d0 <memchr>
 800983c:	9a04      	ldr	r2, [sp, #16]
 800983e:	b9d8      	cbnz	r0, 8009878 <_vfiprintf_r+0x110>
 8009840:	06d1      	lsls	r1, r2, #27
 8009842:	bf44      	itt	mi
 8009844:	2320      	movmi	r3, #32
 8009846:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800984a:	0713      	lsls	r3, r2, #28
 800984c:	bf44      	itt	mi
 800984e:	232b      	movmi	r3, #43	@ 0x2b
 8009850:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009854:	f89a 3000 	ldrb.w	r3, [sl]
 8009858:	2b2a      	cmp	r3, #42	@ 0x2a
 800985a:	d015      	beq.n	8009888 <_vfiprintf_r+0x120>
 800985c:	9a07      	ldr	r2, [sp, #28]
 800985e:	4654      	mov	r4, sl
 8009860:	2000      	movs	r0, #0
 8009862:	f04f 0c0a 	mov.w	ip, #10
 8009866:	4621      	mov	r1, r4
 8009868:	f811 3b01 	ldrb.w	r3, [r1], #1
 800986c:	3b30      	subs	r3, #48	@ 0x30
 800986e:	2b09      	cmp	r3, #9
 8009870:	d94b      	bls.n	800990a <_vfiprintf_r+0x1a2>
 8009872:	b1b0      	cbz	r0, 80098a2 <_vfiprintf_r+0x13a>
 8009874:	9207      	str	r2, [sp, #28]
 8009876:	e014      	b.n	80098a2 <_vfiprintf_r+0x13a>
 8009878:	eba0 0308 	sub.w	r3, r0, r8
 800987c:	fa09 f303 	lsl.w	r3, r9, r3
 8009880:	4313      	orrs	r3, r2
 8009882:	9304      	str	r3, [sp, #16]
 8009884:	46a2      	mov	sl, r4
 8009886:	e7d2      	b.n	800982e <_vfiprintf_r+0xc6>
 8009888:	9b03      	ldr	r3, [sp, #12]
 800988a:	1d19      	adds	r1, r3, #4
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	9103      	str	r1, [sp, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	bfbb      	ittet	lt
 8009894:	425b      	neglt	r3, r3
 8009896:	f042 0202 	orrlt.w	r2, r2, #2
 800989a:	9307      	strge	r3, [sp, #28]
 800989c:	9307      	strlt	r3, [sp, #28]
 800989e:	bfb8      	it	lt
 80098a0:	9204      	strlt	r2, [sp, #16]
 80098a2:	7823      	ldrb	r3, [r4, #0]
 80098a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80098a6:	d10a      	bne.n	80098be <_vfiprintf_r+0x156>
 80098a8:	7863      	ldrb	r3, [r4, #1]
 80098aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80098ac:	d132      	bne.n	8009914 <_vfiprintf_r+0x1ac>
 80098ae:	9b03      	ldr	r3, [sp, #12]
 80098b0:	1d1a      	adds	r2, r3, #4
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	9203      	str	r2, [sp, #12]
 80098b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098ba:	3402      	adds	r4, #2
 80098bc:	9305      	str	r3, [sp, #20]
 80098be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009994 <_vfiprintf_r+0x22c>
 80098c2:	7821      	ldrb	r1, [r4, #0]
 80098c4:	2203      	movs	r2, #3
 80098c6:	4650      	mov	r0, sl
 80098c8:	f7f6 fc82 	bl	80001d0 <memchr>
 80098cc:	b138      	cbz	r0, 80098de <_vfiprintf_r+0x176>
 80098ce:	9b04      	ldr	r3, [sp, #16]
 80098d0:	eba0 000a 	sub.w	r0, r0, sl
 80098d4:	2240      	movs	r2, #64	@ 0x40
 80098d6:	4082      	lsls	r2, r0
 80098d8:	4313      	orrs	r3, r2
 80098da:	3401      	adds	r4, #1
 80098dc:	9304      	str	r3, [sp, #16]
 80098de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e2:	4829      	ldr	r0, [pc, #164]	@ (8009988 <_vfiprintf_r+0x220>)
 80098e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098e8:	2206      	movs	r2, #6
 80098ea:	f7f6 fc71 	bl	80001d0 <memchr>
 80098ee:	2800      	cmp	r0, #0
 80098f0:	d03f      	beq.n	8009972 <_vfiprintf_r+0x20a>
 80098f2:	4b26      	ldr	r3, [pc, #152]	@ (800998c <_vfiprintf_r+0x224>)
 80098f4:	bb1b      	cbnz	r3, 800993e <_vfiprintf_r+0x1d6>
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	3307      	adds	r3, #7
 80098fa:	f023 0307 	bic.w	r3, r3, #7
 80098fe:	3308      	adds	r3, #8
 8009900:	9303      	str	r3, [sp, #12]
 8009902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009904:	443b      	add	r3, r7
 8009906:	9309      	str	r3, [sp, #36]	@ 0x24
 8009908:	e76a      	b.n	80097e0 <_vfiprintf_r+0x78>
 800990a:	fb0c 3202 	mla	r2, ip, r2, r3
 800990e:	460c      	mov	r4, r1
 8009910:	2001      	movs	r0, #1
 8009912:	e7a8      	b.n	8009866 <_vfiprintf_r+0xfe>
 8009914:	2300      	movs	r3, #0
 8009916:	3401      	adds	r4, #1
 8009918:	9305      	str	r3, [sp, #20]
 800991a:	4619      	mov	r1, r3
 800991c:	f04f 0c0a 	mov.w	ip, #10
 8009920:	4620      	mov	r0, r4
 8009922:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009926:	3a30      	subs	r2, #48	@ 0x30
 8009928:	2a09      	cmp	r2, #9
 800992a:	d903      	bls.n	8009934 <_vfiprintf_r+0x1cc>
 800992c:	2b00      	cmp	r3, #0
 800992e:	d0c6      	beq.n	80098be <_vfiprintf_r+0x156>
 8009930:	9105      	str	r1, [sp, #20]
 8009932:	e7c4      	b.n	80098be <_vfiprintf_r+0x156>
 8009934:	fb0c 2101 	mla	r1, ip, r1, r2
 8009938:	4604      	mov	r4, r0
 800993a:	2301      	movs	r3, #1
 800993c:	e7f0      	b.n	8009920 <_vfiprintf_r+0x1b8>
 800993e:	ab03      	add	r3, sp, #12
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	462a      	mov	r2, r5
 8009944:	4b12      	ldr	r3, [pc, #72]	@ (8009990 <_vfiprintf_r+0x228>)
 8009946:	a904      	add	r1, sp, #16
 8009948:	4630      	mov	r0, r6
 800994a:	f7fc f883 	bl	8005a54 <_printf_float>
 800994e:	4607      	mov	r7, r0
 8009950:	1c78      	adds	r0, r7, #1
 8009952:	d1d6      	bne.n	8009902 <_vfiprintf_r+0x19a>
 8009954:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009956:	07d9      	lsls	r1, r3, #31
 8009958:	d405      	bmi.n	8009966 <_vfiprintf_r+0x1fe>
 800995a:	89ab      	ldrh	r3, [r5, #12]
 800995c:	059a      	lsls	r2, r3, #22
 800995e:	d402      	bmi.n	8009966 <_vfiprintf_r+0x1fe>
 8009960:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009962:	f7fd f929 	bl	8006bb8 <__retarget_lock_release_recursive>
 8009966:	89ab      	ldrh	r3, [r5, #12]
 8009968:	065b      	lsls	r3, r3, #25
 800996a:	f53f af1f 	bmi.w	80097ac <_vfiprintf_r+0x44>
 800996e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009970:	e71e      	b.n	80097b0 <_vfiprintf_r+0x48>
 8009972:	ab03      	add	r3, sp, #12
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	462a      	mov	r2, r5
 8009978:	4b05      	ldr	r3, [pc, #20]	@ (8009990 <_vfiprintf_r+0x228>)
 800997a:	a904      	add	r1, sp, #16
 800997c:	4630      	mov	r0, r6
 800997e:	f7fc fb01 	bl	8005f84 <_printf_i>
 8009982:	e7e4      	b.n	800994e <_vfiprintf_r+0x1e6>
 8009984:	0800ae81 	.word	0x0800ae81
 8009988:	0800ae8b 	.word	0x0800ae8b
 800998c:	08005a55 	.word	0x08005a55
 8009990:	08009743 	.word	0x08009743
 8009994:	0800ae87 	.word	0x0800ae87

08009998 <_scanf_chars>:
 8009998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800999c:	4615      	mov	r5, r2
 800999e:	688a      	ldr	r2, [r1, #8]
 80099a0:	4680      	mov	r8, r0
 80099a2:	460c      	mov	r4, r1
 80099a4:	b932      	cbnz	r2, 80099b4 <_scanf_chars+0x1c>
 80099a6:	698a      	ldr	r2, [r1, #24]
 80099a8:	2a00      	cmp	r2, #0
 80099aa:	bf14      	ite	ne
 80099ac:	f04f 32ff 	movne.w	r2, #4294967295
 80099b0:	2201      	moveq	r2, #1
 80099b2:	608a      	str	r2, [r1, #8]
 80099b4:	6822      	ldr	r2, [r4, #0]
 80099b6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009a48 <_scanf_chars+0xb0>
 80099ba:	06d1      	lsls	r1, r2, #27
 80099bc:	bf5f      	itttt	pl
 80099be:	681a      	ldrpl	r2, [r3, #0]
 80099c0:	1d11      	addpl	r1, r2, #4
 80099c2:	6019      	strpl	r1, [r3, #0]
 80099c4:	6816      	ldrpl	r6, [r2, #0]
 80099c6:	2700      	movs	r7, #0
 80099c8:	69a0      	ldr	r0, [r4, #24]
 80099ca:	b188      	cbz	r0, 80099f0 <_scanf_chars+0x58>
 80099cc:	2801      	cmp	r0, #1
 80099ce:	d107      	bne.n	80099e0 <_scanf_chars+0x48>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	781a      	ldrb	r2, [r3, #0]
 80099d4:	6963      	ldr	r3, [r4, #20]
 80099d6:	5c9b      	ldrb	r3, [r3, r2]
 80099d8:	b953      	cbnz	r3, 80099f0 <_scanf_chars+0x58>
 80099da:	2f00      	cmp	r7, #0
 80099dc:	d031      	beq.n	8009a42 <_scanf_chars+0xaa>
 80099de:	e022      	b.n	8009a26 <_scanf_chars+0x8e>
 80099e0:	2802      	cmp	r0, #2
 80099e2:	d120      	bne.n	8009a26 <_scanf_chars+0x8e>
 80099e4:	682b      	ldr	r3, [r5, #0]
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80099ec:	071b      	lsls	r3, r3, #28
 80099ee:	d41a      	bmi.n	8009a26 <_scanf_chars+0x8e>
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	06da      	lsls	r2, r3, #27
 80099f4:	bf5e      	ittt	pl
 80099f6:	682b      	ldrpl	r3, [r5, #0]
 80099f8:	781b      	ldrbpl	r3, [r3, #0]
 80099fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80099fe:	682a      	ldr	r2, [r5, #0]
 8009a00:	686b      	ldr	r3, [r5, #4]
 8009a02:	3201      	adds	r2, #1
 8009a04:	602a      	str	r2, [r5, #0]
 8009a06:	68a2      	ldr	r2, [r4, #8]
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	3a01      	subs	r2, #1
 8009a0c:	606b      	str	r3, [r5, #4]
 8009a0e:	3701      	adds	r7, #1
 8009a10:	60a2      	str	r2, [r4, #8]
 8009a12:	b142      	cbz	r2, 8009a26 <_scanf_chars+0x8e>
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	dcd7      	bgt.n	80099c8 <_scanf_chars+0x30>
 8009a18:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009a1c:	4629      	mov	r1, r5
 8009a1e:	4640      	mov	r0, r8
 8009a20:	4798      	blx	r3
 8009a22:	2800      	cmp	r0, #0
 8009a24:	d0d0      	beq.n	80099c8 <_scanf_chars+0x30>
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	f013 0310 	ands.w	r3, r3, #16
 8009a2c:	d105      	bne.n	8009a3a <_scanf_chars+0xa2>
 8009a2e:	68e2      	ldr	r2, [r4, #12]
 8009a30:	3201      	adds	r2, #1
 8009a32:	60e2      	str	r2, [r4, #12]
 8009a34:	69a2      	ldr	r2, [r4, #24]
 8009a36:	b102      	cbz	r2, 8009a3a <_scanf_chars+0xa2>
 8009a38:	7033      	strb	r3, [r6, #0]
 8009a3a:	6923      	ldr	r3, [r4, #16]
 8009a3c:	443b      	add	r3, r7
 8009a3e:	6123      	str	r3, [r4, #16]
 8009a40:	2000      	movs	r0, #0
 8009a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a46:	bf00      	nop
 8009a48:	0800ad81 	.word	0x0800ad81

08009a4c <_scanf_i>:
 8009a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a50:	4698      	mov	r8, r3
 8009a52:	4b74      	ldr	r3, [pc, #464]	@ (8009c24 <_scanf_i+0x1d8>)
 8009a54:	460c      	mov	r4, r1
 8009a56:	4682      	mov	sl, r0
 8009a58:	4616      	mov	r6, r2
 8009a5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a5e:	b087      	sub	sp, #28
 8009a60:	ab03      	add	r3, sp, #12
 8009a62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009a66:	4b70      	ldr	r3, [pc, #448]	@ (8009c28 <_scanf_i+0x1dc>)
 8009a68:	69a1      	ldr	r1, [r4, #24]
 8009a6a:	4a70      	ldr	r2, [pc, #448]	@ (8009c2c <_scanf_i+0x1e0>)
 8009a6c:	2903      	cmp	r1, #3
 8009a6e:	bf08      	it	eq
 8009a70:	461a      	moveq	r2, r3
 8009a72:	68a3      	ldr	r3, [r4, #8]
 8009a74:	9201      	str	r2, [sp, #4]
 8009a76:	1e5a      	subs	r2, r3, #1
 8009a78:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009a7c:	bf88      	it	hi
 8009a7e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009a82:	4627      	mov	r7, r4
 8009a84:	bf82      	ittt	hi
 8009a86:	eb03 0905 	addhi.w	r9, r3, r5
 8009a8a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009a8e:	60a3      	strhi	r3, [r4, #8]
 8009a90:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009a94:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009a98:	bf98      	it	ls
 8009a9a:	f04f 0900 	movls.w	r9, #0
 8009a9e:	6023      	str	r3, [r4, #0]
 8009aa0:	463d      	mov	r5, r7
 8009aa2:	f04f 0b00 	mov.w	fp, #0
 8009aa6:	6831      	ldr	r1, [r6, #0]
 8009aa8:	ab03      	add	r3, sp, #12
 8009aaa:	7809      	ldrb	r1, [r1, #0]
 8009aac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009ab0:	2202      	movs	r2, #2
 8009ab2:	f7f6 fb8d 	bl	80001d0 <memchr>
 8009ab6:	b328      	cbz	r0, 8009b04 <_scanf_i+0xb8>
 8009ab8:	f1bb 0f01 	cmp.w	fp, #1
 8009abc:	d159      	bne.n	8009b72 <_scanf_i+0x126>
 8009abe:	6862      	ldr	r2, [r4, #4]
 8009ac0:	b92a      	cbnz	r2, 8009ace <_scanf_i+0x82>
 8009ac2:	6822      	ldr	r2, [r4, #0]
 8009ac4:	2108      	movs	r1, #8
 8009ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009aca:	6061      	str	r1, [r4, #4]
 8009acc:	6022      	str	r2, [r4, #0]
 8009ace:	6822      	ldr	r2, [r4, #0]
 8009ad0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009ad4:	6022      	str	r2, [r4, #0]
 8009ad6:	68a2      	ldr	r2, [r4, #8]
 8009ad8:	1e51      	subs	r1, r2, #1
 8009ada:	60a1      	str	r1, [r4, #8]
 8009adc:	b192      	cbz	r2, 8009b04 <_scanf_i+0xb8>
 8009ade:	6832      	ldr	r2, [r6, #0]
 8009ae0:	1c51      	adds	r1, r2, #1
 8009ae2:	6031      	str	r1, [r6, #0]
 8009ae4:	7812      	ldrb	r2, [r2, #0]
 8009ae6:	f805 2b01 	strb.w	r2, [r5], #1
 8009aea:	6872      	ldr	r2, [r6, #4]
 8009aec:	3a01      	subs	r2, #1
 8009aee:	2a00      	cmp	r2, #0
 8009af0:	6072      	str	r2, [r6, #4]
 8009af2:	dc07      	bgt.n	8009b04 <_scanf_i+0xb8>
 8009af4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009af8:	4631      	mov	r1, r6
 8009afa:	4650      	mov	r0, sl
 8009afc:	4790      	blx	r2
 8009afe:	2800      	cmp	r0, #0
 8009b00:	f040 8085 	bne.w	8009c0e <_scanf_i+0x1c2>
 8009b04:	f10b 0b01 	add.w	fp, fp, #1
 8009b08:	f1bb 0f03 	cmp.w	fp, #3
 8009b0c:	d1cb      	bne.n	8009aa6 <_scanf_i+0x5a>
 8009b0e:	6863      	ldr	r3, [r4, #4]
 8009b10:	b90b      	cbnz	r3, 8009b16 <_scanf_i+0xca>
 8009b12:	230a      	movs	r3, #10
 8009b14:	6063      	str	r3, [r4, #4]
 8009b16:	6863      	ldr	r3, [r4, #4]
 8009b18:	4945      	ldr	r1, [pc, #276]	@ (8009c30 <_scanf_i+0x1e4>)
 8009b1a:	6960      	ldr	r0, [r4, #20]
 8009b1c:	1ac9      	subs	r1, r1, r3
 8009b1e:	f000 f997 	bl	8009e50 <__sccl>
 8009b22:	f04f 0b00 	mov.w	fp, #0
 8009b26:	68a3      	ldr	r3, [r4, #8]
 8009b28:	6822      	ldr	r2, [r4, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d03d      	beq.n	8009baa <_scanf_i+0x15e>
 8009b2e:	6831      	ldr	r1, [r6, #0]
 8009b30:	6960      	ldr	r0, [r4, #20]
 8009b32:	f891 c000 	ldrb.w	ip, [r1]
 8009b36:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	d035      	beq.n	8009baa <_scanf_i+0x15e>
 8009b3e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009b42:	d124      	bne.n	8009b8e <_scanf_i+0x142>
 8009b44:	0510      	lsls	r0, r2, #20
 8009b46:	d522      	bpl.n	8009b8e <_scanf_i+0x142>
 8009b48:	f10b 0b01 	add.w	fp, fp, #1
 8009b4c:	f1b9 0f00 	cmp.w	r9, #0
 8009b50:	d003      	beq.n	8009b5a <_scanf_i+0x10e>
 8009b52:	3301      	adds	r3, #1
 8009b54:	f109 39ff 	add.w	r9, r9, #4294967295
 8009b58:	60a3      	str	r3, [r4, #8]
 8009b5a:	6873      	ldr	r3, [r6, #4]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	6073      	str	r3, [r6, #4]
 8009b62:	dd1b      	ble.n	8009b9c <_scanf_i+0x150>
 8009b64:	6833      	ldr	r3, [r6, #0]
 8009b66:	3301      	adds	r3, #1
 8009b68:	6033      	str	r3, [r6, #0]
 8009b6a:	68a3      	ldr	r3, [r4, #8]
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	60a3      	str	r3, [r4, #8]
 8009b70:	e7d9      	b.n	8009b26 <_scanf_i+0xda>
 8009b72:	f1bb 0f02 	cmp.w	fp, #2
 8009b76:	d1ae      	bne.n	8009ad6 <_scanf_i+0x8a>
 8009b78:	6822      	ldr	r2, [r4, #0]
 8009b7a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8009b7e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009b82:	d1bf      	bne.n	8009b04 <_scanf_i+0xb8>
 8009b84:	2110      	movs	r1, #16
 8009b86:	6061      	str	r1, [r4, #4]
 8009b88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b8c:	e7a2      	b.n	8009ad4 <_scanf_i+0x88>
 8009b8e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009b92:	6022      	str	r2, [r4, #0]
 8009b94:	780b      	ldrb	r3, [r1, #0]
 8009b96:	f805 3b01 	strb.w	r3, [r5], #1
 8009b9a:	e7de      	b.n	8009b5a <_scanf_i+0x10e>
 8009b9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009ba0:	4631      	mov	r1, r6
 8009ba2:	4650      	mov	r0, sl
 8009ba4:	4798      	blx	r3
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d0df      	beq.n	8009b6a <_scanf_i+0x11e>
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	05d9      	lsls	r1, r3, #23
 8009bae:	d50d      	bpl.n	8009bcc <_scanf_i+0x180>
 8009bb0:	42bd      	cmp	r5, r7
 8009bb2:	d909      	bls.n	8009bc8 <_scanf_i+0x17c>
 8009bb4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009bb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009bbc:	4632      	mov	r2, r6
 8009bbe:	4650      	mov	r0, sl
 8009bc0:	4798      	blx	r3
 8009bc2:	f105 39ff 	add.w	r9, r5, #4294967295
 8009bc6:	464d      	mov	r5, r9
 8009bc8:	42bd      	cmp	r5, r7
 8009bca:	d028      	beq.n	8009c1e <_scanf_i+0x1d2>
 8009bcc:	6822      	ldr	r2, [r4, #0]
 8009bce:	f012 0210 	ands.w	r2, r2, #16
 8009bd2:	d113      	bne.n	8009bfc <_scanf_i+0x1b0>
 8009bd4:	702a      	strb	r2, [r5, #0]
 8009bd6:	6863      	ldr	r3, [r4, #4]
 8009bd8:	9e01      	ldr	r6, [sp, #4]
 8009bda:	4639      	mov	r1, r7
 8009bdc:	4650      	mov	r0, sl
 8009bde:	47b0      	blx	r6
 8009be0:	f8d8 3000 	ldr.w	r3, [r8]
 8009be4:	6821      	ldr	r1, [r4, #0]
 8009be6:	1d1a      	adds	r2, r3, #4
 8009be8:	f8c8 2000 	str.w	r2, [r8]
 8009bec:	f011 0f20 	tst.w	r1, #32
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	d00f      	beq.n	8009c14 <_scanf_i+0x1c8>
 8009bf4:	6018      	str	r0, [r3, #0]
 8009bf6:	68e3      	ldr	r3, [r4, #12]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	60e3      	str	r3, [r4, #12]
 8009bfc:	6923      	ldr	r3, [r4, #16]
 8009bfe:	1bed      	subs	r5, r5, r7
 8009c00:	445d      	add	r5, fp
 8009c02:	442b      	add	r3, r5
 8009c04:	6123      	str	r3, [r4, #16]
 8009c06:	2000      	movs	r0, #0
 8009c08:	b007      	add	sp, #28
 8009c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c0e:	f04f 0b00 	mov.w	fp, #0
 8009c12:	e7ca      	b.n	8009baa <_scanf_i+0x15e>
 8009c14:	07ca      	lsls	r2, r1, #31
 8009c16:	bf4c      	ite	mi
 8009c18:	8018      	strhmi	r0, [r3, #0]
 8009c1a:	6018      	strpl	r0, [r3, #0]
 8009c1c:	e7eb      	b.n	8009bf6 <_scanf_i+0x1aa>
 8009c1e:	2001      	movs	r0, #1
 8009c20:	e7f2      	b.n	8009c08 <_scanf_i+0x1bc>
 8009c22:	bf00      	nop
 8009c24:	0800aae0 	.word	0x0800aae0
 8009c28:	080090c9 	.word	0x080090c9
 8009c2c:	0800a835 	.word	0x0800a835
 8009c30:	0800aea2 	.word	0x0800aea2

08009c34 <__sflush_r>:
 8009c34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c3c:	0716      	lsls	r6, r2, #28
 8009c3e:	4605      	mov	r5, r0
 8009c40:	460c      	mov	r4, r1
 8009c42:	d454      	bmi.n	8009cee <__sflush_r+0xba>
 8009c44:	684b      	ldr	r3, [r1, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	dc02      	bgt.n	8009c50 <__sflush_r+0x1c>
 8009c4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	dd48      	ble.n	8009ce2 <__sflush_r+0xae>
 8009c50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c52:	2e00      	cmp	r6, #0
 8009c54:	d045      	beq.n	8009ce2 <__sflush_r+0xae>
 8009c56:	2300      	movs	r3, #0
 8009c58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c5c:	682f      	ldr	r7, [r5, #0]
 8009c5e:	6a21      	ldr	r1, [r4, #32]
 8009c60:	602b      	str	r3, [r5, #0]
 8009c62:	d030      	beq.n	8009cc6 <__sflush_r+0x92>
 8009c64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c66:	89a3      	ldrh	r3, [r4, #12]
 8009c68:	0759      	lsls	r1, r3, #29
 8009c6a:	d505      	bpl.n	8009c78 <__sflush_r+0x44>
 8009c6c:	6863      	ldr	r3, [r4, #4]
 8009c6e:	1ad2      	subs	r2, r2, r3
 8009c70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c72:	b10b      	cbz	r3, 8009c78 <__sflush_r+0x44>
 8009c74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c76:	1ad2      	subs	r2, r2, r3
 8009c78:	2300      	movs	r3, #0
 8009c7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c7c:	6a21      	ldr	r1, [r4, #32]
 8009c7e:	4628      	mov	r0, r5
 8009c80:	47b0      	blx	r6
 8009c82:	1c43      	adds	r3, r0, #1
 8009c84:	89a3      	ldrh	r3, [r4, #12]
 8009c86:	d106      	bne.n	8009c96 <__sflush_r+0x62>
 8009c88:	6829      	ldr	r1, [r5, #0]
 8009c8a:	291d      	cmp	r1, #29
 8009c8c:	d82b      	bhi.n	8009ce6 <__sflush_r+0xb2>
 8009c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8009d38 <__sflush_r+0x104>)
 8009c90:	410a      	asrs	r2, r1
 8009c92:	07d6      	lsls	r6, r2, #31
 8009c94:	d427      	bmi.n	8009ce6 <__sflush_r+0xb2>
 8009c96:	2200      	movs	r2, #0
 8009c98:	6062      	str	r2, [r4, #4]
 8009c9a:	04d9      	lsls	r1, r3, #19
 8009c9c:	6922      	ldr	r2, [r4, #16]
 8009c9e:	6022      	str	r2, [r4, #0]
 8009ca0:	d504      	bpl.n	8009cac <__sflush_r+0x78>
 8009ca2:	1c42      	adds	r2, r0, #1
 8009ca4:	d101      	bne.n	8009caa <__sflush_r+0x76>
 8009ca6:	682b      	ldr	r3, [r5, #0]
 8009ca8:	b903      	cbnz	r3, 8009cac <__sflush_r+0x78>
 8009caa:	6560      	str	r0, [r4, #84]	@ 0x54
 8009cac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009cae:	602f      	str	r7, [r5, #0]
 8009cb0:	b1b9      	cbz	r1, 8009ce2 <__sflush_r+0xae>
 8009cb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cb6:	4299      	cmp	r1, r3
 8009cb8:	d002      	beq.n	8009cc0 <__sflush_r+0x8c>
 8009cba:	4628      	mov	r0, r5
 8009cbc:	f7fd fdd0 	bl	8007860 <_free_r>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cc4:	e00d      	b.n	8009ce2 <__sflush_r+0xae>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	4628      	mov	r0, r5
 8009cca:	47b0      	blx	r6
 8009ccc:	4602      	mov	r2, r0
 8009cce:	1c50      	adds	r0, r2, #1
 8009cd0:	d1c9      	bne.n	8009c66 <__sflush_r+0x32>
 8009cd2:	682b      	ldr	r3, [r5, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d0c6      	beq.n	8009c66 <__sflush_r+0x32>
 8009cd8:	2b1d      	cmp	r3, #29
 8009cda:	d001      	beq.n	8009ce0 <__sflush_r+0xac>
 8009cdc:	2b16      	cmp	r3, #22
 8009cde:	d11e      	bne.n	8009d1e <__sflush_r+0xea>
 8009ce0:	602f      	str	r7, [r5, #0]
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	e022      	b.n	8009d2c <__sflush_r+0xf8>
 8009ce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cea:	b21b      	sxth	r3, r3
 8009cec:	e01b      	b.n	8009d26 <__sflush_r+0xf2>
 8009cee:	690f      	ldr	r7, [r1, #16]
 8009cf0:	2f00      	cmp	r7, #0
 8009cf2:	d0f6      	beq.n	8009ce2 <__sflush_r+0xae>
 8009cf4:	0793      	lsls	r3, r2, #30
 8009cf6:	680e      	ldr	r6, [r1, #0]
 8009cf8:	bf08      	it	eq
 8009cfa:	694b      	ldreq	r3, [r1, #20]
 8009cfc:	600f      	str	r7, [r1, #0]
 8009cfe:	bf18      	it	ne
 8009d00:	2300      	movne	r3, #0
 8009d02:	eba6 0807 	sub.w	r8, r6, r7
 8009d06:	608b      	str	r3, [r1, #8]
 8009d08:	f1b8 0f00 	cmp.w	r8, #0
 8009d0c:	dde9      	ble.n	8009ce2 <__sflush_r+0xae>
 8009d0e:	6a21      	ldr	r1, [r4, #32]
 8009d10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d12:	4643      	mov	r3, r8
 8009d14:	463a      	mov	r2, r7
 8009d16:	4628      	mov	r0, r5
 8009d18:	47b0      	blx	r6
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	dc08      	bgt.n	8009d30 <__sflush_r+0xfc>
 8009d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d26:	81a3      	strh	r3, [r4, #12]
 8009d28:	f04f 30ff 	mov.w	r0, #4294967295
 8009d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d30:	4407      	add	r7, r0
 8009d32:	eba8 0800 	sub.w	r8, r8, r0
 8009d36:	e7e7      	b.n	8009d08 <__sflush_r+0xd4>
 8009d38:	dfbffffe 	.word	0xdfbffffe

08009d3c <_fflush_r>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	690b      	ldr	r3, [r1, #16]
 8009d40:	4605      	mov	r5, r0
 8009d42:	460c      	mov	r4, r1
 8009d44:	b913      	cbnz	r3, 8009d4c <_fflush_r+0x10>
 8009d46:	2500      	movs	r5, #0
 8009d48:	4628      	mov	r0, r5
 8009d4a:	bd38      	pop	{r3, r4, r5, pc}
 8009d4c:	b118      	cbz	r0, 8009d56 <_fflush_r+0x1a>
 8009d4e:	6a03      	ldr	r3, [r0, #32]
 8009d50:	b90b      	cbnz	r3, 8009d56 <_fflush_r+0x1a>
 8009d52:	f7fc fcd7 	bl	8006704 <__sinit>
 8009d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d0f3      	beq.n	8009d46 <_fflush_r+0xa>
 8009d5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d60:	07d0      	lsls	r0, r2, #31
 8009d62:	d404      	bmi.n	8009d6e <_fflush_r+0x32>
 8009d64:	0599      	lsls	r1, r3, #22
 8009d66:	d402      	bmi.n	8009d6e <_fflush_r+0x32>
 8009d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d6a:	f7fc ff24 	bl	8006bb6 <__retarget_lock_acquire_recursive>
 8009d6e:	4628      	mov	r0, r5
 8009d70:	4621      	mov	r1, r4
 8009d72:	f7ff ff5f 	bl	8009c34 <__sflush_r>
 8009d76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d78:	07da      	lsls	r2, r3, #31
 8009d7a:	4605      	mov	r5, r0
 8009d7c:	d4e4      	bmi.n	8009d48 <_fflush_r+0xc>
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	059b      	lsls	r3, r3, #22
 8009d82:	d4e1      	bmi.n	8009d48 <_fflush_r+0xc>
 8009d84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d86:	f7fc ff17 	bl	8006bb8 <__retarget_lock_release_recursive>
 8009d8a:	e7dd      	b.n	8009d48 <_fflush_r+0xc>

08009d8c <__swhatbuf_r>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	460c      	mov	r4, r1
 8009d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d94:	2900      	cmp	r1, #0
 8009d96:	b096      	sub	sp, #88	@ 0x58
 8009d98:	4615      	mov	r5, r2
 8009d9a:	461e      	mov	r6, r3
 8009d9c:	da0d      	bge.n	8009dba <__swhatbuf_r+0x2e>
 8009d9e:	89a3      	ldrh	r3, [r4, #12]
 8009da0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009da4:	f04f 0100 	mov.w	r1, #0
 8009da8:	bf14      	ite	ne
 8009daa:	2340      	movne	r3, #64	@ 0x40
 8009dac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009db0:	2000      	movs	r0, #0
 8009db2:	6031      	str	r1, [r6, #0]
 8009db4:	602b      	str	r3, [r5, #0]
 8009db6:	b016      	add	sp, #88	@ 0x58
 8009db8:	bd70      	pop	{r4, r5, r6, pc}
 8009dba:	466a      	mov	r2, sp
 8009dbc:	f000 f8d6 	bl	8009f6c <_fstat_r>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	dbec      	blt.n	8009d9e <__swhatbuf_r+0x12>
 8009dc4:	9901      	ldr	r1, [sp, #4]
 8009dc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009dca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009dce:	4259      	negs	r1, r3
 8009dd0:	4159      	adcs	r1, r3
 8009dd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dd6:	e7eb      	b.n	8009db0 <__swhatbuf_r+0x24>

08009dd8 <__smakebuf_r>:
 8009dd8:	898b      	ldrh	r3, [r1, #12]
 8009dda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ddc:	079d      	lsls	r5, r3, #30
 8009dde:	4606      	mov	r6, r0
 8009de0:	460c      	mov	r4, r1
 8009de2:	d507      	bpl.n	8009df4 <__smakebuf_r+0x1c>
 8009de4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	6123      	str	r3, [r4, #16]
 8009dec:	2301      	movs	r3, #1
 8009dee:	6163      	str	r3, [r4, #20]
 8009df0:	b003      	add	sp, #12
 8009df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009df4:	ab01      	add	r3, sp, #4
 8009df6:	466a      	mov	r2, sp
 8009df8:	f7ff ffc8 	bl	8009d8c <__swhatbuf_r>
 8009dfc:	9f00      	ldr	r7, [sp, #0]
 8009dfe:	4605      	mov	r5, r0
 8009e00:	4639      	mov	r1, r7
 8009e02:	4630      	mov	r0, r6
 8009e04:	f7fd fda0 	bl	8007948 <_malloc_r>
 8009e08:	b948      	cbnz	r0, 8009e1e <__smakebuf_r+0x46>
 8009e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e0e:	059a      	lsls	r2, r3, #22
 8009e10:	d4ee      	bmi.n	8009df0 <__smakebuf_r+0x18>
 8009e12:	f023 0303 	bic.w	r3, r3, #3
 8009e16:	f043 0302 	orr.w	r3, r3, #2
 8009e1a:	81a3      	strh	r3, [r4, #12]
 8009e1c:	e7e2      	b.n	8009de4 <__smakebuf_r+0xc>
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	6020      	str	r0, [r4, #0]
 8009e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e26:	81a3      	strh	r3, [r4, #12]
 8009e28:	9b01      	ldr	r3, [sp, #4]
 8009e2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e2e:	b15b      	cbz	r3, 8009e48 <__smakebuf_r+0x70>
 8009e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e34:	4630      	mov	r0, r6
 8009e36:	f000 f8ab 	bl	8009f90 <_isatty_r>
 8009e3a:	b128      	cbz	r0, 8009e48 <__smakebuf_r+0x70>
 8009e3c:	89a3      	ldrh	r3, [r4, #12]
 8009e3e:	f023 0303 	bic.w	r3, r3, #3
 8009e42:	f043 0301 	orr.w	r3, r3, #1
 8009e46:	81a3      	strh	r3, [r4, #12]
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	431d      	orrs	r5, r3
 8009e4c:	81a5      	strh	r5, [r4, #12]
 8009e4e:	e7cf      	b.n	8009df0 <__smakebuf_r+0x18>

08009e50 <__sccl>:
 8009e50:	b570      	push	{r4, r5, r6, lr}
 8009e52:	780b      	ldrb	r3, [r1, #0]
 8009e54:	4604      	mov	r4, r0
 8009e56:	2b5e      	cmp	r3, #94	@ 0x5e
 8009e58:	bf0b      	itete	eq
 8009e5a:	784b      	ldrbeq	r3, [r1, #1]
 8009e5c:	1c4a      	addne	r2, r1, #1
 8009e5e:	1c8a      	addeq	r2, r1, #2
 8009e60:	2100      	movne	r1, #0
 8009e62:	bf08      	it	eq
 8009e64:	2101      	moveq	r1, #1
 8009e66:	3801      	subs	r0, #1
 8009e68:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009e6c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009e70:	42a8      	cmp	r0, r5
 8009e72:	d1fb      	bne.n	8009e6c <__sccl+0x1c>
 8009e74:	b90b      	cbnz	r3, 8009e7a <__sccl+0x2a>
 8009e76:	1e50      	subs	r0, r2, #1
 8009e78:	bd70      	pop	{r4, r5, r6, pc}
 8009e7a:	f081 0101 	eor.w	r1, r1, #1
 8009e7e:	54e1      	strb	r1, [r4, r3]
 8009e80:	4610      	mov	r0, r2
 8009e82:	4602      	mov	r2, r0
 8009e84:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009e88:	2d2d      	cmp	r5, #45	@ 0x2d
 8009e8a:	d005      	beq.n	8009e98 <__sccl+0x48>
 8009e8c:	2d5d      	cmp	r5, #93	@ 0x5d
 8009e8e:	d016      	beq.n	8009ebe <__sccl+0x6e>
 8009e90:	2d00      	cmp	r5, #0
 8009e92:	d0f1      	beq.n	8009e78 <__sccl+0x28>
 8009e94:	462b      	mov	r3, r5
 8009e96:	e7f2      	b.n	8009e7e <__sccl+0x2e>
 8009e98:	7846      	ldrb	r6, [r0, #1]
 8009e9a:	2e5d      	cmp	r6, #93	@ 0x5d
 8009e9c:	d0fa      	beq.n	8009e94 <__sccl+0x44>
 8009e9e:	42b3      	cmp	r3, r6
 8009ea0:	dcf8      	bgt.n	8009e94 <__sccl+0x44>
 8009ea2:	3002      	adds	r0, #2
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	3201      	adds	r2, #1
 8009ea8:	4296      	cmp	r6, r2
 8009eaa:	54a1      	strb	r1, [r4, r2]
 8009eac:	dcfb      	bgt.n	8009ea6 <__sccl+0x56>
 8009eae:	1af2      	subs	r2, r6, r3
 8009eb0:	3a01      	subs	r2, #1
 8009eb2:	1c5d      	adds	r5, r3, #1
 8009eb4:	42b3      	cmp	r3, r6
 8009eb6:	bfa8      	it	ge
 8009eb8:	2200      	movge	r2, #0
 8009eba:	18ab      	adds	r3, r5, r2
 8009ebc:	e7e1      	b.n	8009e82 <__sccl+0x32>
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	e7da      	b.n	8009e78 <__sccl+0x28>

08009ec2 <__submore>:
 8009ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec6:	460c      	mov	r4, r1
 8009ec8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009eca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ece:	4299      	cmp	r1, r3
 8009ed0:	d11d      	bne.n	8009f0e <__submore+0x4c>
 8009ed2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009ed6:	f7fd fd37 	bl	8007948 <_malloc_r>
 8009eda:	b918      	cbnz	r0, 8009ee4 <__submore+0x22>
 8009edc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ee8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009eea:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009eee:	6360      	str	r0, [r4, #52]	@ 0x34
 8009ef0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009ef4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009ef8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009efc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009f00:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009f04:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009f08:	6020      	str	r0, [r4, #0]
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	e7e8      	b.n	8009ee0 <__submore+0x1e>
 8009f0e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009f10:	0077      	lsls	r7, r6, #1
 8009f12:	463a      	mov	r2, r7
 8009f14:	f000 fbf1 	bl	800a6fa <_realloc_r>
 8009f18:	4605      	mov	r5, r0
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d0de      	beq.n	8009edc <__submore+0x1a>
 8009f1e:	eb00 0806 	add.w	r8, r0, r6
 8009f22:	4601      	mov	r1, r0
 8009f24:	4632      	mov	r2, r6
 8009f26:	4640      	mov	r0, r8
 8009f28:	f000 f852 	bl	8009fd0 <memcpy>
 8009f2c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009f30:	f8c4 8000 	str.w	r8, [r4]
 8009f34:	e7e9      	b.n	8009f0a <__submore+0x48>

08009f36 <memmove>:
 8009f36:	4288      	cmp	r0, r1
 8009f38:	b510      	push	{r4, lr}
 8009f3a:	eb01 0402 	add.w	r4, r1, r2
 8009f3e:	d902      	bls.n	8009f46 <memmove+0x10>
 8009f40:	4284      	cmp	r4, r0
 8009f42:	4623      	mov	r3, r4
 8009f44:	d807      	bhi.n	8009f56 <memmove+0x20>
 8009f46:	1e43      	subs	r3, r0, #1
 8009f48:	42a1      	cmp	r1, r4
 8009f4a:	d008      	beq.n	8009f5e <memmove+0x28>
 8009f4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f50:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f54:	e7f8      	b.n	8009f48 <memmove+0x12>
 8009f56:	4402      	add	r2, r0
 8009f58:	4601      	mov	r1, r0
 8009f5a:	428a      	cmp	r2, r1
 8009f5c:	d100      	bne.n	8009f60 <memmove+0x2a>
 8009f5e:	bd10      	pop	{r4, pc}
 8009f60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f64:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f68:	e7f7      	b.n	8009f5a <memmove+0x24>
	...

08009f6c <_fstat_r>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	4d07      	ldr	r5, [pc, #28]	@ (8009f8c <_fstat_r+0x20>)
 8009f70:	2300      	movs	r3, #0
 8009f72:	4604      	mov	r4, r0
 8009f74:	4608      	mov	r0, r1
 8009f76:	4611      	mov	r1, r2
 8009f78:	602b      	str	r3, [r5, #0]
 8009f7a:	f7f7 ffad 	bl	8001ed8 <_fstat>
 8009f7e:	1c43      	adds	r3, r0, #1
 8009f80:	d102      	bne.n	8009f88 <_fstat_r+0x1c>
 8009f82:	682b      	ldr	r3, [r5, #0]
 8009f84:	b103      	cbz	r3, 8009f88 <_fstat_r+0x1c>
 8009f86:	6023      	str	r3, [r4, #0]
 8009f88:	bd38      	pop	{r3, r4, r5, pc}
 8009f8a:	bf00      	nop
 8009f8c:	20000590 	.word	0x20000590

08009f90 <_isatty_r>:
 8009f90:	b538      	push	{r3, r4, r5, lr}
 8009f92:	4d06      	ldr	r5, [pc, #24]	@ (8009fac <_isatty_r+0x1c>)
 8009f94:	2300      	movs	r3, #0
 8009f96:	4604      	mov	r4, r0
 8009f98:	4608      	mov	r0, r1
 8009f9a:	602b      	str	r3, [r5, #0]
 8009f9c:	f7f7 ffac 	bl	8001ef8 <_isatty>
 8009fa0:	1c43      	adds	r3, r0, #1
 8009fa2:	d102      	bne.n	8009faa <_isatty_r+0x1a>
 8009fa4:	682b      	ldr	r3, [r5, #0]
 8009fa6:	b103      	cbz	r3, 8009faa <_isatty_r+0x1a>
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	bd38      	pop	{r3, r4, r5, pc}
 8009fac:	20000590 	.word	0x20000590

08009fb0 <_sbrk_r>:
 8009fb0:	b538      	push	{r3, r4, r5, lr}
 8009fb2:	4d06      	ldr	r5, [pc, #24]	@ (8009fcc <_sbrk_r+0x1c>)
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	4608      	mov	r0, r1
 8009fba:	602b      	str	r3, [r5, #0]
 8009fbc:	f7f7 ffb4 	bl	8001f28 <_sbrk>
 8009fc0:	1c43      	adds	r3, r0, #1
 8009fc2:	d102      	bne.n	8009fca <_sbrk_r+0x1a>
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	b103      	cbz	r3, 8009fca <_sbrk_r+0x1a>
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	20000590 	.word	0x20000590

08009fd0 <memcpy>:
 8009fd0:	440a      	add	r2, r1
 8009fd2:	4291      	cmp	r1, r2
 8009fd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fd8:	d100      	bne.n	8009fdc <memcpy+0xc>
 8009fda:	4770      	bx	lr
 8009fdc:	b510      	push	{r4, lr}
 8009fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fe6:	4291      	cmp	r1, r2
 8009fe8:	d1f9      	bne.n	8009fde <memcpy+0xe>
 8009fea:	bd10      	pop	{r4, pc}
 8009fec:	0000      	movs	r0, r0
	...

08009ff0 <nan>:
 8009ff0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009ff8 <nan+0x8>
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	00000000 	.word	0x00000000
 8009ffc:	7ff80000 	.word	0x7ff80000

0800a000 <__assert_func>:
 800a000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a002:	4614      	mov	r4, r2
 800a004:	461a      	mov	r2, r3
 800a006:	4b09      	ldr	r3, [pc, #36]	@ (800a02c <__assert_func+0x2c>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4605      	mov	r5, r0
 800a00c:	68d8      	ldr	r0, [r3, #12]
 800a00e:	b954      	cbnz	r4, 800a026 <__assert_func+0x26>
 800a010:	4b07      	ldr	r3, [pc, #28]	@ (800a030 <__assert_func+0x30>)
 800a012:	461c      	mov	r4, r3
 800a014:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a018:	9100      	str	r1, [sp, #0]
 800a01a:	462b      	mov	r3, r5
 800a01c:	4905      	ldr	r1, [pc, #20]	@ (800a034 <__assert_func+0x34>)
 800a01e:	f000 fc19 	bl	800a854 <fiprintf>
 800a022:	f000 fc29 	bl	800a878 <abort>
 800a026:	4b04      	ldr	r3, [pc, #16]	@ (800a038 <__assert_func+0x38>)
 800a028:	e7f4      	b.n	800a014 <__assert_func+0x14>
 800a02a:	bf00      	nop
 800a02c:	20000030 	.word	0x20000030
 800a030:	0800aef0 	.word	0x0800aef0
 800a034:	0800aec2 	.word	0x0800aec2
 800a038:	0800aeb5 	.word	0x0800aeb5

0800a03c <_calloc_r>:
 800a03c:	b570      	push	{r4, r5, r6, lr}
 800a03e:	fba1 5402 	umull	r5, r4, r1, r2
 800a042:	b93c      	cbnz	r4, 800a054 <_calloc_r+0x18>
 800a044:	4629      	mov	r1, r5
 800a046:	f7fd fc7f 	bl	8007948 <_malloc_r>
 800a04a:	4606      	mov	r6, r0
 800a04c:	b928      	cbnz	r0, 800a05a <_calloc_r+0x1e>
 800a04e:	2600      	movs	r6, #0
 800a050:	4630      	mov	r0, r6
 800a052:	bd70      	pop	{r4, r5, r6, pc}
 800a054:	220c      	movs	r2, #12
 800a056:	6002      	str	r2, [r0, #0]
 800a058:	e7f9      	b.n	800a04e <_calloc_r+0x12>
 800a05a:	462a      	mov	r2, r5
 800a05c:	4621      	mov	r1, r4
 800a05e:	f7fc fd1b 	bl	8006a98 <memset>
 800a062:	e7f5      	b.n	800a050 <_calloc_r+0x14>

0800a064 <rshift>:
 800a064:	6903      	ldr	r3, [r0, #16]
 800a066:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a06a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a06e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a072:	f100 0414 	add.w	r4, r0, #20
 800a076:	dd45      	ble.n	800a104 <rshift+0xa0>
 800a078:	f011 011f 	ands.w	r1, r1, #31
 800a07c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a080:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a084:	d10c      	bne.n	800a0a0 <rshift+0x3c>
 800a086:	f100 0710 	add.w	r7, r0, #16
 800a08a:	4629      	mov	r1, r5
 800a08c:	42b1      	cmp	r1, r6
 800a08e:	d334      	bcc.n	800a0fa <rshift+0x96>
 800a090:	1a9b      	subs	r3, r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	1eea      	subs	r2, r5, #3
 800a096:	4296      	cmp	r6, r2
 800a098:	bf38      	it	cc
 800a09a:	2300      	movcc	r3, #0
 800a09c:	4423      	add	r3, r4
 800a09e:	e015      	b.n	800a0cc <rshift+0x68>
 800a0a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a0a4:	f1c1 0820 	rsb	r8, r1, #32
 800a0a8:	40cf      	lsrs	r7, r1
 800a0aa:	f105 0e04 	add.w	lr, r5, #4
 800a0ae:	46a1      	mov	r9, r4
 800a0b0:	4576      	cmp	r6, lr
 800a0b2:	46f4      	mov	ip, lr
 800a0b4:	d815      	bhi.n	800a0e2 <rshift+0x7e>
 800a0b6:	1a9a      	subs	r2, r3, r2
 800a0b8:	0092      	lsls	r2, r2, #2
 800a0ba:	3a04      	subs	r2, #4
 800a0bc:	3501      	adds	r5, #1
 800a0be:	42ae      	cmp	r6, r5
 800a0c0:	bf38      	it	cc
 800a0c2:	2200      	movcc	r2, #0
 800a0c4:	18a3      	adds	r3, r4, r2
 800a0c6:	50a7      	str	r7, [r4, r2]
 800a0c8:	b107      	cbz	r7, 800a0cc <rshift+0x68>
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	1b1a      	subs	r2, r3, r4
 800a0ce:	42a3      	cmp	r3, r4
 800a0d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a0d4:	bf08      	it	eq
 800a0d6:	2300      	moveq	r3, #0
 800a0d8:	6102      	str	r2, [r0, #16]
 800a0da:	bf08      	it	eq
 800a0dc:	6143      	streq	r3, [r0, #20]
 800a0de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0e2:	f8dc c000 	ldr.w	ip, [ip]
 800a0e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a0ea:	ea4c 0707 	orr.w	r7, ip, r7
 800a0ee:	f849 7b04 	str.w	r7, [r9], #4
 800a0f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a0f6:	40cf      	lsrs	r7, r1
 800a0f8:	e7da      	b.n	800a0b0 <rshift+0x4c>
 800a0fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800a0fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800a102:	e7c3      	b.n	800a08c <rshift+0x28>
 800a104:	4623      	mov	r3, r4
 800a106:	e7e1      	b.n	800a0cc <rshift+0x68>

0800a108 <__hexdig_fun>:
 800a108:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a10c:	2b09      	cmp	r3, #9
 800a10e:	d802      	bhi.n	800a116 <__hexdig_fun+0xe>
 800a110:	3820      	subs	r0, #32
 800a112:	b2c0      	uxtb	r0, r0
 800a114:	4770      	bx	lr
 800a116:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a11a:	2b05      	cmp	r3, #5
 800a11c:	d801      	bhi.n	800a122 <__hexdig_fun+0x1a>
 800a11e:	3847      	subs	r0, #71	@ 0x47
 800a120:	e7f7      	b.n	800a112 <__hexdig_fun+0xa>
 800a122:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a126:	2b05      	cmp	r3, #5
 800a128:	d801      	bhi.n	800a12e <__hexdig_fun+0x26>
 800a12a:	3827      	subs	r0, #39	@ 0x27
 800a12c:	e7f1      	b.n	800a112 <__hexdig_fun+0xa>
 800a12e:	2000      	movs	r0, #0
 800a130:	4770      	bx	lr
	...

0800a134 <__gethex>:
 800a134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a138:	b085      	sub	sp, #20
 800a13a:	468a      	mov	sl, r1
 800a13c:	9302      	str	r3, [sp, #8]
 800a13e:	680b      	ldr	r3, [r1, #0]
 800a140:	9001      	str	r0, [sp, #4]
 800a142:	4690      	mov	r8, r2
 800a144:	1c9c      	adds	r4, r3, #2
 800a146:	46a1      	mov	r9, r4
 800a148:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a14c:	2830      	cmp	r0, #48	@ 0x30
 800a14e:	d0fa      	beq.n	800a146 <__gethex+0x12>
 800a150:	eba9 0303 	sub.w	r3, r9, r3
 800a154:	f1a3 0b02 	sub.w	fp, r3, #2
 800a158:	f7ff ffd6 	bl	800a108 <__hexdig_fun>
 800a15c:	4605      	mov	r5, r0
 800a15e:	2800      	cmp	r0, #0
 800a160:	d168      	bne.n	800a234 <__gethex+0x100>
 800a162:	49a0      	ldr	r1, [pc, #640]	@ (800a3e4 <__gethex+0x2b0>)
 800a164:	2201      	movs	r2, #1
 800a166:	4648      	mov	r0, r9
 800a168:	f7fc fc9e 	bl	8006aa8 <strncmp>
 800a16c:	4607      	mov	r7, r0
 800a16e:	2800      	cmp	r0, #0
 800a170:	d167      	bne.n	800a242 <__gethex+0x10e>
 800a172:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a176:	4626      	mov	r6, r4
 800a178:	f7ff ffc6 	bl	800a108 <__hexdig_fun>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d062      	beq.n	800a246 <__gethex+0x112>
 800a180:	4623      	mov	r3, r4
 800a182:	7818      	ldrb	r0, [r3, #0]
 800a184:	2830      	cmp	r0, #48	@ 0x30
 800a186:	4699      	mov	r9, r3
 800a188:	f103 0301 	add.w	r3, r3, #1
 800a18c:	d0f9      	beq.n	800a182 <__gethex+0x4e>
 800a18e:	f7ff ffbb 	bl	800a108 <__hexdig_fun>
 800a192:	fab0 f580 	clz	r5, r0
 800a196:	096d      	lsrs	r5, r5, #5
 800a198:	f04f 0b01 	mov.w	fp, #1
 800a19c:	464a      	mov	r2, r9
 800a19e:	4616      	mov	r6, r2
 800a1a0:	3201      	adds	r2, #1
 800a1a2:	7830      	ldrb	r0, [r6, #0]
 800a1a4:	f7ff ffb0 	bl	800a108 <__hexdig_fun>
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d1f8      	bne.n	800a19e <__gethex+0x6a>
 800a1ac:	498d      	ldr	r1, [pc, #564]	@ (800a3e4 <__gethex+0x2b0>)
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	f7fc fc79 	bl	8006aa8 <strncmp>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d13f      	bne.n	800a23a <__gethex+0x106>
 800a1ba:	b944      	cbnz	r4, 800a1ce <__gethex+0x9a>
 800a1bc:	1c74      	adds	r4, r6, #1
 800a1be:	4622      	mov	r2, r4
 800a1c0:	4616      	mov	r6, r2
 800a1c2:	3201      	adds	r2, #1
 800a1c4:	7830      	ldrb	r0, [r6, #0]
 800a1c6:	f7ff ff9f 	bl	800a108 <__hexdig_fun>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	d1f8      	bne.n	800a1c0 <__gethex+0x8c>
 800a1ce:	1ba4      	subs	r4, r4, r6
 800a1d0:	00a7      	lsls	r7, r4, #2
 800a1d2:	7833      	ldrb	r3, [r6, #0]
 800a1d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a1d8:	2b50      	cmp	r3, #80	@ 0x50
 800a1da:	d13e      	bne.n	800a25a <__gethex+0x126>
 800a1dc:	7873      	ldrb	r3, [r6, #1]
 800a1de:	2b2b      	cmp	r3, #43	@ 0x2b
 800a1e0:	d033      	beq.n	800a24a <__gethex+0x116>
 800a1e2:	2b2d      	cmp	r3, #45	@ 0x2d
 800a1e4:	d034      	beq.n	800a250 <__gethex+0x11c>
 800a1e6:	1c71      	adds	r1, r6, #1
 800a1e8:	2400      	movs	r4, #0
 800a1ea:	7808      	ldrb	r0, [r1, #0]
 800a1ec:	f7ff ff8c 	bl	800a108 <__hexdig_fun>
 800a1f0:	1e43      	subs	r3, r0, #1
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	2b18      	cmp	r3, #24
 800a1f6:	d830      	bhi.n	800a25a <__gethex+0x126>
 800a1f8:	f1a0 0210 	sub.w	r2, r0, #16
 800a1fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a200:	f7ff ff82 	bl	800a108 <__hexdig_fun>
 800a204:	f100 3cff 	add.w	ip, r0, #4294967295
 800a208:	fa5f fc8c 	uxtb.w	ip, ip
 800a20c:	f1bc 0f18 	cmp.w	ip, #24
 800a210:	f04f 030a 	mov.w	r3, #10
 800a214:	d91e      	bls.n	800a254 <__gethex+0x120>
 800a216:	b104      	cbz	r4, 800a21a <__gethex+0xe6>
 800a218:	4252      	negs	r2, r2
 800a21a:	4417      	add	r7, r2
 800a21c:	f8ca 1000 	str.w	r1, [sl]
 800a220:	b1ed      	cbz	r5, 800a25e <__gethex+0x12a>
 800a222:	f1bb 0f00 	cmp.w	fp, #0
 800a226:	bf0c      	ite	eq
 800a228:	2506      	moveq	r5, #6
 800a22a:	2500      	movne	r5, #0
 800a22c:	4628      	mov	r0, r5
 800a22e:	b005      	add	sp, #20
 800a230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a234:	2500      	movs	r5, #0
 800a236:	462c      	mov	r4, r5
 800a238:	e7b0      	b.n	800a19c <__gethex+0x68>
 800a23a:	2c00      	cmp	r4, #0
 800a23c:	d1c7      	bne.n	800a1ce <__gethex+0x9a>
 800a23e:	4627      	mov	r7, r4
 800a240:	e7c7      	b.n	800a1d2 <__gethex+0x9e>
 800a242:	464e      	mov	r6, r9
 800a244:	462f      	mov	r7, r5
 800a246:	2501      	movs	r5, #1
 800a248:	e7c3      	b.n	800a1d2 <__gethex+0x9e>
 800a24a:	2400      	movs	r4, #0
 800a24c:	1cb1      	adds	r1, r6, #2
 800a24e:	e7cc      	b.n	800a1ea <__gethex+0xb6>
 800a250:	2401      	movs	r4, #1
 800a252:	e7fb      	b.n	800a24c <__gethex+0x118>
 800a254:	fb03 0002 	mla	r0, r3, r2, r0
 800a258:	e7ce      	b.n	800a1f8 <__gethex+0xc4>
 800a25a:	4631      	mov	r1, r6
 800a25c:	e7de      	b.n	800a21c <__gethex+0xe8>
 800a25e:	eba6 0309 	sub.w	r3, r6, r9
 800a262:	3b01      	subs	r3, #1
 800a264:	4629      	mov	r1, r5
 800a266:	2b07      	cmp	r3, #7
 800a268:	dc0a      	bgt.n	800a280 <__gethex+0x14c>
 800a26a:	9801      	ldr	r0, [sp, #4]
 800a26c:	f7fd fbf8 	bl	8007a60 <_Balloc>
 800a270:	4604      	mov	r4, r0
 800a272:	b940      	cbnz	r0, 800a286 <__gethex+0x152>
 800a274:	4b5c      	ldr	r3, [pc, #368]	@ (800a3e8 <__gethex+0x2b4>)
 800a276:	4602      	mov	r2, r0
 800a278:	21e4      	movs	r1, #228	@ 0xe4
 800a27a:	485c      	ldr	r0, [pc, #368]	@ (800a3ec <__gethex+0x2b8>)
 800a27c:	f7ff fec0 	bl	800a000 <__assert_func>
 800a280:	3101      	adds	r1, #1
 800a282:	105b      	asrs	r3, r3, #1
 800a284:	e7ef      	b.n	800a266 <__gethex+0x132>
 800a286:	f100 0a14 	add.w	sl, r0, #20
 800a28a:	2300      	movs	r3, #0
 800a28c:	4655      	mov	r5, sl
 800a28e:	469b      	mov	fp, r3
 800a290:	45b1      	cmp	r9, r6
 800a292:	d337      	bcc.n	800a304 <__gethex+0x1d0>
 800a294:	f845 bb04 	str.w	fp, [r5], #4
 800a298:	eba5 050a 	sub.w	r5, r5, sl
 800a29c:	10ad      	asrs	r5, r5, #2
 800a29e:	6125      	str	r5, [r4, #16]
 800a2a0:	4658      	mov	r0, fp
 800a2a2:	f7fd fccf 	bl	8007c44 <__hi0bits>
 800a2a6:	016d      	lsls	r5, r5, #5
 800a2a8:	f8d8 6000 	ldr.w	r6, [r8]
 800a2ac:	1a2d      	subs	r5, r5, r0
 800a2ae:	42b5      	cmp	r5, r6
 800a2b0:	dd54      	ble.n	800a35c <__gethex+0x228>
 800a2b2:	1bad      	subs	r5, r5, r6
 800a2b4:	4629      	mov	r1, r5
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f7fe f863 	bl	8008382 <__any_on>
 800a2bc:	4681      	mov	r9, r0
 800a2be:	b178      	cbz	r0, 800a2e0 <__gethex+0x1ac>
 800a2c0:	1e6b      	subs	r3, r5, #1
 800a2c2:	1159      	asrs	r1, r3, #5
 800a2c4:	f003 021f 	and.w	r2, r3, #31
 800a2c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a2cc:	f04f 0901 	mov.w	r9, #1
 800a2d0:	fa09 f202 	lsl.w	r2, r9, r2
 800a2d4:	420a      	tst	r2, r1
 800a2d6:	d003      	beq.n	800a2e0 <__gethex+0x1ac>
 800a2d8:	454b      	cmp	r3, r9
 800a2da:	dc36      	bgt.n	800a34a <__gethex+0x216>
 800a2dc:	f04f 0902 	mov.w	r9, #2
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	f7ff febe 	bl	800a064 <rshift>
 800a2e8:	442f      	add	r7, r5
 800a2ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a2ee:	42bb      	cmp	r3, r7
 800a2f0:	da42      	bge.n	800a378 <__gethex+0x244>
 800a2f2:	9801      	ldr	r0, [sp, #4]
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	f7fd fbf3 	bl	8007ae0 <_Bfree>
 800a2fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	6013      	str	r3, [r2, #0]
 800a300:	25a3      	movs	r5, #163	@ 0xa3
 800a302:	e793      	b.n	800a22c <__gethex+0xf8>
 800a304:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a308:	2a2e      	cmp	r2, #46	@ 0x2e
 800a30a:	d012      	beq.n	800a332 <__gethex+0x1fe>
 800a30c:	2b20      	cmp	r3, #32
 800a30e:	d104      	bne.n	800a31a <__gethex+0x1e6>
 800a310:	f845 bb04 	str.w	fp, [r5], #4
 800a314:	f04f 0b00 	mov.w	fp, #0
 800a318:	465b      	mov	r3, fp
 800a31a:	7830      	ldrb	r0, [r6, #0]
 800a31c:	9303      	str	r3, [sp, #12]
 800a31e:	f7ff fef3 	bl	800a108 <__hexdig_fun>
 800a322:	9b03      	ldr	r3, [sp, #12]
 800a324:	f000 000f 	and.w	r0, r0, #15
 800a328:	4098      	lsls	r0, r3
 800a32a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a32e:	3304      	adds	r3, #4
 800a330:	e7ae      	b.n	800a290 <__gethex+0x15c>
 800a332:	45b1      	cmp	r9, r6
 800a334:	d8ea      	bhi.n	800a30c <__gethex+0x1d8>
 800a336:	492b      	ldr	r1, [pc, #172]	@ (800a3e4 <__gethex+0x2b0>)
 800a338:	9303      	str	r3, [sp, #12]
 800a33a:	2201      	movs	r2, #1
 800a33c:	4630      	mov	r0, r6
 800a33e:	f7fc fbb3 	bl	8006aa8 <strncmp>
 800a342:	9b03      	ldr	r3, [sp, #12]
 800a344:	2800      	cmp	r0, #0
 800a346:	d1e1      	bne.n	800a30c <__gethex+0x1d8>
 800a348:	e7a2      	b.n	800a290 <__gethex+0x15c>
 800a34a:	1ea9      	subs	r1, r5, #2
 800a34c:	4620      	mov	r0, r4
 800a34e:	f7fe f818 	bl	8008382 <__any_on>
 800a352:	2800      	cmp	r0, #0
 800a354:	d0c2      	beq.n	800a2dc <__gethex+0x1a8>
 800a356:	f04f 0903 	mov.w	r9, #3
 800a35a:	e7c1      	b.n	800a2e0 <__gethex+0x1ac>
 800a35c:	da09      	bge.n	800a372 <__gethex+0x23e>
 800a35e:	1b75      	subs	r5, r6, r5
 800a360:	4621      	mov	r1, r4
 800a362:	9801      	ldr	r0, [sp, #4]
 800a364:	462a      	mov	r2, r5
 800a366:	f7fd fdd3 	bl	8007f10 <__lshift>
 800a36a:	1b7f      	subs	r7, r7, r5
 800a36c:	4604      	mov	r4, r0
 800a36e:	f100 0a14 	add.w	sl, r0, #20
 800a372:	f04f 0900 	mov.w	r9, #0
 800a376:	e7b8      	b.n	800a2ea <__gethex+0x1b6>
 800a378:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a37c:	42bd      	cmp	r5, r7
 800a37e:	dd6f      	ble.n	800a460 <__gethex+0x32c>
 800a380:	1bed      	subs	r5, r5, r7
 800a382:	42ae      	cmp	r6, r5
 800a384:	dc34      	bgt.n	800a3f0 <__gethex+0x2bc>
 800a386:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d022      	beq.n	800a3d4 <__gethex+0x2a0>
 800a38e:	2b03      	cmp	r3, #3
 800a390:	d024      	beq.n	800a3dc <__gethex+0x2a8>
 800a392:	2b01      	cmp	r3, #1
 800a394:	d115      	bne.n	800a3c2 <__gethex+0x28e>
 800a396:	42ae      	cmp	r6, r5
 800a398:	d113      	bne.n	800a3c2 <__gethex+0x28e>
 800a39a:	2e01      	cmp	r6, #1
 800a39c:	d10b      	bne.n	800a3b6 <__gethex+0x282>
 800a39e:	9a02      	ldr	r2, [sp, #8]
 800a3a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a3a4:	6013      	str	r3, [r2, #0]
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	6123      	str	r3, [r4, #16]
 800a3aa:	f8ca 3000 	str.w	r3, [sl]
 800a3ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3b0:	2562      	movs	r5, #98	@ 0x62
 800a3b2:	601c      	str	r4, [r3, #0]
 800a3b4:	e73a      	b.n	800a22c <__gethex+0xf8>
 800a3b6:	1e71      	subs	r1, r6, #1
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f7fd ffe2 	bl	8008382 <__any_on>
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d1ed      	bne.n	800a39e <__gethex+0x26a>
 800a3c2:	9801      	ldr	r0, [sp, #4]
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	f7fd fb8b 	bl	8007ae0 <_Bfree>
 800a3ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	6013      	str	r3, [r2, #0]
 800a3d0:	2550      	movs	r5, #80	@ 0x50
 800a3d2:	e72b      	b.n	800a22c <__gethex+0xf8>
 800a3d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d1f3      	bne.n	800a3c2 <__gethex+0x28e>
 800a3da:	e7e0      	b.n	800a39e <__gethex+0x26a>
 800a3dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1dd      	bne.n	800a39e <__gethex+0x26a>
 800a3e2:	e7ee      	b.n	800a3c2 <__gethex+0x28e>
 800a3e4:	0800ad28 	.word	0x0800ad28
 800a3e8:	0800abbf 	.word	0x0800abbf
 800a3ec:	0800aef1 	.word	0x0800aef1
 800a3f0:	1e6f      	subs	r7, r5, #1
 800a3f2:	f1b9 0f00 	cmp.w	r9, #0
 800a3f6:	d130      	bne.n	800a45a <__gethex+0x326>
 800a3f8:	b127      	cbz	r7, 800a404 <__gethex+0x2d0>
 800a3fa:	4639      	mov	r1, r7
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	f7fd ffc0 	bl	8008382 <__any_on>
 800a402:	4681      	mov	r9, r0
 800a404:	117a      	asrs	r2, r7, #5
 800a406:	2301      	movs	r3, #1
 800a408:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a40c:	f007 071f 	and.w	r7, r7, #31
 800a410:	40bb      	lsls	r3, r7
 800a412:	4213      	tst	r3, r2
 800a414:	4629      	mov	r1, r5
 800a416:	4620      	mov	r0, r4
 800a418:	bf18      	it	ne
 800a41a:	f049 0902 	orrne.w	r9, r9, #2
 800a41e:	f7ff fe21 	bl	800a064 <rshift>
 800a422:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a426:	1b76      	subs	r6, r6, r5
 800a428:	2502      	movs	r5, #2
 800a42a:	f1b9 0f00 	cmp.w	r9, #0
 800a42e:	d047      	beq.n	800a4c0 <__gethex+0x38c>
 800a430:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a434:	2b02      	cmp	r3, #2
 800a436:	d015      	beq.n	800a464 <__gethex+0x330>
 800a438:	2b03      	cmp	r3, #3
 800a43a:	d017      	beq.n	800a46c <__gethex+0x338>
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d109      	bne.n	800a454 <__gethex+0x320>
 800a440:	f019 0f02 	tst.w	r9, #2
 800a444:	d006      	beq.n	800a454 <__gethex+0x320>
 800a446:	f8da 3000 	ldr.w	r3, [sl]
 800a44a:	ea49 0903 	orr.w	r9, r9, r3
 800a44e:	f019 0f01 	tst.w	r9, #1
 800a452:	d10e      	bne.n	800a472 <__gethex+0x33e>
 800a454:	f045 0510 	orr.w	r5, r5, #16
 800a458:	e032      	b.n	800a4c0 <__gethex+0x38c>
 800a45a:	f04f 0901 	mov.w	r9, #1
 800a45e:	e7d1      	b.n	800a404 <__gethex+0x2d0>
 800a460:	2501      	movs	r5, #1
 800a462:	e7e2      	b.n	800a42a <__gethex+0x2f6>
 800a464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a466:	f1c3 0301 	rsb	r3, r3, #1
 800a46a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a46c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d0f0      	beq.n	800a454 <__gethex+0x320>
 800a472:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a476:	f104 0314 	add.w	r3, r4, #20
 800a47a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a47e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a482:	f04f 0c00 	mov.w	ip, #0
 800a486:	4618      	mov	r0, r3
 800a488:	f853 2b04 	ldr.w	r2, [r3], #4
 800a48c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a490:	d01b      	beq.n	800a4ca <__gethex+0x396>
 800a492:	3201      	adds	r2, #1
 800a494:	6002      	str	r2, [r0, #0]
 800a496:	2d02      	cmp	r5, #2
 800a498:	f104 0314 	add.w	r3, r4, #20
 800a49c:	d13c      	bne.n	800a518 <__gethex+0x3e4>
 800a49e:	f8d8 2000 	ldr.w	r2, [r8]
 800a4a2:	3a01      	subs	r2, #1
 800a4a4:	42b2      	cmp	r2, r6
 800a4a6:	d109      	bne.n	800a4bc <__gethex+0x388>
 800a4a8:	1171      	asrs	r1, r6, #5
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a4b0:	f006 061f 	and.w	r6, r6, #31
 800a4b4:	fa02 f606 	lsl.w	r6, r2, r6
 800a4b8:	421e      	tst	r6, r3
 800a4ba:	d13a      	bne.n	800a532 <__gethex+0x3fe>
 800a4bc:	f045 0520 	orr.w	r5, r5, #32
 800a4c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4c2:	601c      	str	r4, [r3, #0]
 800a4c4:	9b02      	ldr	r3, [sp, #8]
 800a4c6:	601f      	str	r7, [r3, #0]
 800a4c8:	e6b0      	b.n	800a22c <__gethex+0xf8>
 800a4ca:	4299      	cmp	r1, r3
 800a4cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a4d0:	d8d9      	bhi.n	800a486 <__gethex+0x352>
 800a4d2:	68a3      	ldr	r3, [r4, #8]
 800a4d4:	459b      	cmp	fp, r3
 800a4d6:	db17      	blt.n	800a508 <__gethex+0x3d4>
 800a4d8:	6861      	ldr	r1, [r4, #4]
 800a4da:	9801      	ldr	r0, [sp, #4]
 800a4dc:	3101      	adds	r1, #1
 800a4de:	f7fd fabf 	bl	8007a60 <_Balloc>
 800a4e2:	4681      	mov	r9, r0
 800a4e4:	b918      	cbnz	r0, 800a4ee <__gethex+0x3ba>
 800a4e6:	4b1a      	ldr	r3, [pc, #104]	@ (800a550 <__gethex+0x41c>)
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	2184      	movs	r1, #132	@ 0x84
 800a4ec:	e6c5      	b.n	800a27a <__gethex+0x146>
 800a4ee:	6922      	ldr	r2, [r4, #16]
 800a4f0:	3202      	adds	r2, #2
 800a4f2:	f104 010c 	add.w	r1, r4, #12
 800a4f6:	0092      	lsls	r2, r2, #2
 800a4f8:	300c      	adds	r0, #12
 800a4fa:	f7ff fd69 	bl	8009fd0 <memcpy>
 800a4fe:	4621      	mov	r1, r4
 800a500:	9801      	ldr	r0, [sp, #4]
 800a502:	f7fd faed 	bl	8007ae0 <_Bfree>
 800a506:	464c      	mov	r4, r9
 800a508:	6923      	ldr	r3, [r4, #16]
 800a50a:	1c5a      	adds	r2, r3, #1
 800a50c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a510:	6122      	str	r2, [r4, #16]
 800a512:	2201      	movs	r2, #1
 800a514:	615a      	str	r2, [r3, #20]
 800a516:	e7be      	b.n	800a496 <__gethex+0x362>
 800a518:	6922      	ldr	r2, [r4, #16]
 800a51a:	455a      	cmp	r2, fp
 800a51c:	dd0b      	ble.n	800a536 <__gethex+0x402>
 800a51e:	2101      	movs	r1, #1
 800a520:	4620      	mov	r0, r4
 800a522:	f7ff fd9f 	bl	800a064 <rshift>
 800a526:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a52a:	3701      	adds	r7, #1
 800a52c:	42bb      	cmp	r3, r7
 800a52e:	f6ff aee0 	blt.w	800a2f2 <__gethex+0x1be>
 800a532:	2501      	movs	r5, #1
 800a534:	e7c2      	b.n	800a4bc <__gethex+0x388>
 800a536:	f016 061f 	ands.w	r6, r6, #31
 800a53a:	d0fa      	beq.n	800a532 <__gethex+0x3fe>
 800a53c:	4453      	add	r3, sl
 800a53e:	f1c6 0620 	rsb	r6, r6, #32
 800a542:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a546:	f7fd fb7d 	bl	8007c44 <__hi0bits>
 800a54a:	42b0      	cmp	r0, r6
 800a54c:	dbe7      	blt.n	800a51e <__gethex+0x3ea>
 800a54e:	e7f0      	b.n	800a532 <__gethex+0x3fe>
 800a550:	0800abbf 	.word	0x0800abbf

0800a554 <L_shift>:
 800a554:	f1c2 0208 	rsb	r2, r2, #8
 800a558:	0092      	lsls	r2, r2, #2
 800a55a:	b570      	push	{r4, r5, r6, lr}
 800a55c:	f1c2 0620 	rsb	r6, r2, #32
 800a560:	6843      	ldr	r3, [r0, #4]
 800a562:	6804      	ldr	r4, [r0, #0]
 800a564:	fa03 f506 	lsl.w	r5, r3, r6
 800a568:	432c      	orrs	r4, r5
 800a56a:	40d3      	lsrs	r3, r2
 800a56c:	6004      	str	r4, [r0, #0]
 800a56e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a572:	4288      	cmp	r0, r1
 800a574:	d3f4      	bcc.n	800a560 <L_shift+0xc>
 800a576:	bd70      	pop	{r4, r5, r6, pc}

0800a578 <__match>:
 800a578:	b530      	push	{r4, r5, lr}
 800a57a:	6803      	ldr	r3, [r0, #0]
 800a57c:	3301      	adds	r3, #1
 800a57e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a582:	b914      	cbnz	r4, 800a58a <__match+0x12>
 800a584:	6003      	str	r3, [r0, #0]
 800a586:	2001      	movs	r0, #1
 800a588:	bd30      	pop	{r4, r5, pc}
 800a58a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a58e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a592:	2d19      	cmp	r5, #25
 800a594:	bf98      	it	ls
 800a596:	3220      	addls	r2, #32
 800a598:	42a2      	cmp	r2, r4
 800a59a:	d0f0      	beq.n	800a57e <__match+0x6>
 800a59c:	2000      	movs	r0, #0
 800a59e:	e7f3      	b.n	800a588 <__match+0x10>

0800a5a0 <__hexnan>:
 800a5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a4:	680b      	ldr	r3, [r1, #0]
 800a5a6:	6801      	ldr	r1, [r0, #0]
 800a5a8:	115e      	asrs	r6, r3, #5
 800a5aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a5ae:	f013 031f 	ands.w	r3, r3, #31
 800a5b2:	b087      	sub	sp, #28
 800a5b4:	bf18      	it	ne
 800a5b6:	3604      	addne	r6, #4
 800a5b8:	2500      	movs	r5, #0
 800a5ba:	1f37      	subs	r7, r6, #4
 800a5bc:	4682      	mov	sl, r0
 800a5be:	4690      	mov	r8, r2
 800a5c0:	9301      	str	r3, [sp, #4]
 800a5c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a5c6:	46b9      	mov	r9, r7
 800a5c8:	463c      	mov	r4, r7
 800a5ca:	9502      	str	r5, [sp, #8]
 800a5cc:	46ab      	mov	fp, r5
 800a5ce:	784a      	ldrb	r2, [r1, #1]
 800a5d0:	1c4b      	adds	r3, r1, #1
 800a5d2:	9303      	str	r3, [sp, #12]
 800a5d4:	b342      	cbz	r2, 800a628 <__hexnan+0x88>
 800a5d6:	4610      	mov	r0, r2
 800a5d8:	9105      	str	r1, [sp, #20]
 800a5da:	9204      	str	r2, [sp, #16]
 800a5dc:	f7ff fd94 	bl	800a108 <__hexdig_fun>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	d151      	bne.n	800a688 <__hexnan+0xe8>
 800a5e4:	9a04      	ldr	r2, [sp, #16]
 800a5e6:	9905      	ldr	r1, [sp, #20]
 800a5e8:	2a20      	cmp	r2, #32
 800a5ea:	d818      	bhi.n	800a61e <__hexnan+0x7e>
 800a5ec:	9b02      	ldr	r3, [sp, #8]
 800a5ee:	459b      	cmp	fp, r3
 800a5f0:	dd13      	ble.n	800a61a <__hexnan+0x7a>
 800a5f2:	454c      	cmp	r4, r9
 800a5f4:	d206      	bcs.n	800a604 <__hexnan+0x64>
 800a5f6:	2d07      	cmp	r5, #7
 800a5f8:	dc04      	bgt.n	800a604 <__hexnan+0x64>
 800a5fa:	462a      	mov	r2, r5
 800a5fc:	4649      	mov	r1, r9
 800a5fe:	4620      	mov	r0, r4
 800a600:	f7ff ffa8 	bl	800a554 <L_shift>
 800a604:	4544      	cmp	r4, r8
 800a606:	d952      	bls.n	800a6ae <__hexnan+0x10e>
 800a608:	2300      	movs	r3, #0
 800a60a:	f1a4 0904 	sub.w	r9, r4, #4
 800a60e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a612:	f8cd b008 	str.w	fp, [sp, #8]
 800a616:	464c      	mov	r4, r9
 800a618:	461d      	mov	r5, r3
 800a61a:	9903      	ldr	r1, [sp, #12]
 800a61c:	e7d7      	b.n	800a5ce <__hexnan+0x2e>
 800a61e:	2a29      	cmp	r2, #41	@ 0x29
 800a620:	d157      	bne.n	800a6d2 <__hexnan+0x132>
 800a622:	3102      	adds	r1, #2
 800a624:	f8ca 1000 	str.w	r1, [sl]
 800a628:	f1bb 0f00 	cmp.w	fp, #0
 800a62c:	d051      	beq.n	800a6d2 <__hexnan+0x132>
 800a62e:	454c      	cmp	r4, r9
 800a630:	d206      	bcs.n	800a640 <__hexnan+0xa0>
 800a632:	2d07      	cmp	r5, #7
 800a634:	dc04      	bgt.n	800a640 <__hexnan+0xa0>
 800a636:	462a      	mov	r2, r5
 800a638:	4649      	mov	r1, r9
 800a63a:	4620      	mov	r0, r4
 800a63c:	f7ff ff8a 	bl	800a554 <L_shift>
 800a640:	4544      	cmp	r4, r8
 800a642:	d936      	bls.n	800a6b2 <__hexnan+0x112>
 800a644:	f1a8 0204 	sub.w	r2, r8, #4
 800a648:	4623      	mov	r3, r4
 800a64a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a64e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a652:	429f      	cmp	r7, r3
 800a654:	d2f9      	bcs.n	800a64a <__hexnan+0xaa>
 800a656:	1b3b      	subs	r3, r7, r4
 800a658:	f023 0303 	bic.w	r3, r3, #3
 800a65c:	3304      	adds	r3, #4
 800a65e:	3401      	adds	r4, #1
 800a660:	3e03      	subs	r6, #3
 800a662:	42b4      	cmp	r4, r6
 800a664:	bf88      	it	hi
 800a666:	2304      	movhi	r3, #4
 800a668:	4443      	add	r3, r8
 800a66a:	2200      	movs	r2, #0
 800a66c:	f843 2b04 	str.w	r2, [r3], #4
 800a670:	429f      	cmp	r7, r3
 800a672:	d2fb      	bcs.n	800a66c <__hexnan+0xcc>
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	b91b      	cbnz	r3, 800a680 <__hexnan+0xe0>
 800a678:	4547      	cmp	r7, r8
 800a67a:	d128      	bne.n	800a6ce <__hexnan+0x12e>
 800a67c:	2301      	movs	r3, #1
 800a67e:	603b      	str	r3, [r7, #0]
 800a680:	2005      	movs	r0, #5
 800a682:	b007      	add	sp, #28
 800a684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a688:	3501      	adds	r5, #1
 800a68a:	2d08      	cmp	r5, #8
 800a68c:	f10b 0b01 	add.w	fp, fp, #1
 800a690:	dd06      	ble.n	800a6a0 <__hexnan+0x100>
 800a692:	4544      	cmp	r4, r8
 800a694:	d9c1      	bls.n	800a61a <__hexnan+0x7a>
 800a696:	2300      	movs	r3, #0
 800a698:	f844 3c04 	str.w	r3, [r4, #-4]
 800a69c:	2501      	movs	r5, #1
 800a69e:	3c04      	subs	r4, #4
 800a6a0:	6822      	ldr	r2, [r4, #0]
 800a6a2:	f000 000f 	and.w	r0, r0, #15
 800a6a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a6aa:	6020      	str	r0, [r4, #0]
 800a6ac:	e7b5      	b.n	800a61a <__hexnan+0x7a>
 800a6ae:	2508      	movs	r5, #8
 800a6b0:	e7b3      	b.n	800a61a <__hexnan+0x7a>
 800a6b2:	9b01      	ldr	r3, [sp, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d0dd      	beq.n	800a674 <__hexnan+0xd4>
 800a6b8:	f1c3 0320 	rsb	r3, r3, #32
 800a6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c0:	40da      	lsrs	r2, r3
 800a6c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a6c6:	4013      	ands	r3, r2
 800a6c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a6cc:	e7d2      	b.n	800a674 <__hexnan+0xd4>
 800a6ce:	3f04      	subs	r7, #4
 800a6d0:	e7d0      	b.n	800a674 <__hexnan+0xd4>
 800a6d2:	2004      	movs	r0, #4
 800a6d4:	e7d5      	b.n	800a682 <__hexnan+0xe2>

0800a6d6 <__ascii_mbtowc>:
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	b901      	cbnz	r1, 800a6dc <__ascii_mbtowc+0x6>
 800a6da:	a901      	add	r1, sp, #4
 800a6dc:	b142      	cbz	r2, 800a6f0 <__ascii_mbtowc+0x1a>
 800a6de:	b14b      	cbz	r3, 800a6f4 <__ascii_mbtowc+0x1e>
 800a6e0:	7813      	ldrb	r3, [r2, #0]
 800a6e2:	600b      	str	r3, [r1, #0]
 800a6e4:	7812      	ldrb	r2, [r2, #0]
 800a6e6:	1e10      	subs	r0, r2, #0
 800a6e8:	bf18      	it	ne
 800a6ea:	2001      	movne	r0, #1
 800a6ec:	b002      	add	sp, #8
 800a6ee:	4770      	bx	lr
 800a6f0:	4610      	mov	r0, r2
 800a6f2:	e7fb      	b.n	800a6ec <__ascii_mbtowc+0x16>
 800a6f4:	f06f 0001 	mvn.w	r0, #1
 800a6f8:	e7f8      	b.n	800a6ec <__ascii_mbtowc+0x16>

0800a6fa <_realloc_r>:
 800a6fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6fe:	4680      	mov	r8, r0
 800a700:	4615      	mov	r5, r2
 800a702:	460c      	mov	r4, r1
 800a704:	b921      	cbnz	r1, 800a710 <_realloc_r+0x16>
 800a706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a70a:	4611      	mov	r1, r2
 800a70c:	f7fd b91c 	b.w	8007948 <_malloc_r>
 800a710:	b92a      	cbnz	r2, 800a71e <_realloc_r+0x24>
 800a712:	f7fd f8a5 	bl	8007860 <_free_r>
 800a716:	2400      	movs	r4, #0
 800a718:	4620      	mov	r0, r4
 800a71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a71e:	f000 f8b2 	bl	800a886 <_malloc_usable_size_r>
 800a722:	4285      	cmp	r5, r0
 800a724:	4606      	mov	r6, r0
 800a726:	d802      	bhi.n	800a72e <_realloc_r+0x34>
 800a728:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a72c:	d8f4      	bhi.n	800a718 <_realloc_r+0x1e>
 800a72e:	4629      	mov	r1, r5
 800a730:	4640      	mov	r0, r8
 800a732:	f7fd f909 	bl	8007948 <_malloc_r>
 800a736:	4607      	mov	r7, r0
 800a738:	2800      	cmp	r0, #0
 800a73a:	d0ec      	beq.n	800a716 <_realloc_r+0x1c>
 800a73c:	42b5      	cmp	r5, r6
 800a73e:	462a      	mov	r2, r5
 800a740:	4621      	mov	r1, r4
 800a742:	bf28      	it	cs
 800a744:	4632      	movcs	r2, r6
 800a746:	f7ff fc43 	bl	8009fd0 <memcpy>
 800a74a:	4621      	mov	r1, r4
 800a74c:	4640      	mov	r0, r8
 800a74e:	f7fd f887 	bl	8007860 <_free_r>
 800a752:	463c      	mov	r4, r7
 800a754:	e7e0      	b.n	800a718 <_realloc_r+0x1e>
	...

0800a758 <_strtoul_l.constprop.0>:
 800a758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a75c:	4e34      	ldr	r6, [pc, #208]	@ (800a830 <_strtoul_l.constprop.0+0xd8>)
 800a75e:	4686      	mov	lr, r0
 800a760:	460d      	mov	r5, r1
 800a762:	4628      	mov	r0, r5
 800a764:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a768:	5d37      	ldrb	r7, [r6, r4]
 800a76a:	f017 0708 	ands.w	r7, r7, #8
 800a76e:	d1f8      	bne.n	800a762 <_strtoul_l.constprop.0+0xa>
 800a770:	2c2d      	cmp	r4, #45	@ 0x2d
 800a772:	d12f      	bne.n	800a7d4 <_strtoul_l.constprop.0+0x7c>
 800a774:	782c      	ldrb	r4, [r5, #0]
 800a776:	2701      	movs	r7, #1
 800a778:	1c85      	adds	r5, r0, #2
 800a77a:	f033 0010 	bics.w	r0, r3, #16
 800a77e:	d109      	bne.n	800a794 <_strtoul_l.constprop.0+0x3c>
 800a780:	2c30      	cmp	r4, #48	@ 0x30
 800a782:	d12c      	bne.n	800a7de <_strtoul_l.constprop.0+0x86>
 800a784:	7828      	ldrb	r0, [r5, #0]
 800a786:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a78a:	2858      	cmp	r0, #88	@ 0x58
 800a78c:	d127      	bne.n	800a7de <_strtoul_l.constprop.0+0x86>
 800a78e:	786c      	ldrb	r4, [r5, #1]
 800a790:	2310      	movs	r3, #16
 800a792:	3502      	adds	r5, #2
 800a794:	f04f 38ff 	mov.w	r8, #4294967295
 800a798:	2600      	movs	r6, #0
 800a79a:	fbb8 f8f3 	udiv	r8, r8, r3
 800a79e:	fb03 f908 	mul.w	r9, r3, r8
 800a7a2:	ea6f 0909 	mvn.w	r9, r9
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a7ac:	f1bc 0f09 	cmp.w	ip, #9
 800a7b0:	d81c      	bhi.n	800a7ec <_strtoul_l.constprop.0+0x94>
 800a7b2:	4664      	mov	r4, ip
 800a7b4:	42a3      	cmp	r3, r4
 800a7b6:	dd2a      	ble.n	800a80e <_strtoul_l.constprop.0+0xb6>
 800a7b8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a7bc:	d007      	beq.n	800a7ce <_strtoul_l.constprop.0+0x76>
 800a7be:	4580      	cmp	r8, r0
 800a7c0:	d322      	bcc.n	800a808 <_strtoul_l.constprop.0+0xb0>
 800a7c2:	d101      	bne.n	800a7c8 <_strtoul_l.constprop.0+0x70>
 800a7c4:	45a1      	cmp	r9, r4
 800a7c6:	db1f      	blt.n	800a808 <_strtoul_l.constprop.0+0xb0>
 800a7c8:	fb00 4003 	mla	r0, r0, r3, r4
 800a7cc:	2601      	movs	r6, #1
 800a7ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7d2:	e7e9      	b.n	800a7a8 <_strtoul_l.constprop.0+0x50>
 800a7d4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a7d6:	bf04      	itt	eq
 800a7d8:	782c      	ldrbeq	r4, [r5, #0]
 800a7da:	1c85      	addeq	r5, r0, #2
 800a7dc:	e7cd      	b.n	800a77a <_strtoul_l.constprop.0+0x22>
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1d8      	bne.n	800a794 <_strtoul_l.constprop.0+0x3c>
 800a7e2:	2c30      	cmp	r4, #48	@ 0x30
 800a7e4:	bf0c      	ite	eq
 800a7e6:	2308      	moveq	r3, #8
 800a7e8:	230a      	movne	r3, #10
 800a7ea:	e7d3      	b.n	800a794 <_strtoul_l.constprop.0+0x3c>
 800a7ec:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a7f0:	f1bc 0f19 	cmp.w	ip, #25
 800a7f4:	d801      	bhi.n	800a7fa <_strtoul_l.constprop.0+0xa2>
 800a7f6:	3c37      	subs	r4, #55	@ 0x37
 800a7f8:	e7dc      	b.n	800a7b4 <_strtoul_l.constprop.0+0x5c>
 800a7fa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a7fe:	f1bc 0f19 	cmp.w	ip, #25
 800a802:	d804      	bhi.n	800a80e <_strtoul_l.constprop.0+0xb6>
 800a804:	3c57      	subs	r4, #87	@ 0x57
 800a806:	e7d5      	b.n	800a7b4 <_strtoul_l.constprop.0+0x5c>
 800a808:	f04f 36ff 	mov.w	r6, #4294967295
 800a80c:	e7df      	b.n	800a7ce <_strtoul_l.constprop.0+0x76>
 800a80e:	1c73      	adds	r3, r6, #1
 800a810:	d106      	bne.n	800a820 <_strtoul_l.constprop.0+0xc8>
 800a812:	2322      	movs	r3, #34	@ 0x22
 800a814:	f8ce 3000 	str.w	r3, [lr]
 800a818:	4630      	mov	r0, r6
 800a81a:	b932      	cbnz	r2, 800a82a <_strtoul_l.constprop.0+0xd2>
 800a81c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a820:	b107      	cbz	r7, 800a824 <_strtoul_l.constprop.0+0xcc>
 800a822:	4240      	negs	r0, r0
 800a824:	2a00      	cmp	r2, #0
 800a826:	d0f9      	beq.n	800a81c <_strtoul_l.constprop.0+0xc4>
 800a828:	b106      	cbz	r6, 800a82c <_strtoul_l.constprop.0+0xd4>
 800a82a:	1e69      	subs	r1, r5, #1
 800a82c:	6011      	str	r1, [r2, #0]
 800a82e:	e7f5      	b.n	800a81c <_strtoul_l.constprop.0+0xc4>
 800a830:	0800ad81 	.word	0x0800ad81

0800a834 <_strtoul_r>:
 800a834:	f7ff bf90 	b.w	800a758 <_strtoul_l.constprop.0>

0800a838 <__ascii_wctomb>:
 800a838:	4603      	mov	r3, r0
 800a83a:	4608      	mov	r0, r1
 800a83c:	b141      	cbz	r1, 800a850 <__ascii_wctomb+0x18>
 800a83e:	2aff      	cmp	r2, #255	@ 0xff
 800a840:	d904      	bls.n	800a84c <__ascii_wctomb+0x14>
 800a842:	228a      	movs	r2, #138	@ 0x8a
 800a844:	601a      	str	r2, [r3, #0]
 800a846:	f04f 30ff 	mov.w	r0, #4294967295
 800a84a:	4770      	bx	lr
 800a84c:	700a      	strb	r2, [r1, #0]
 800a84e:	2001      	movs	r0, #1
 800a850:	4770      	bx	lr
	...

0800a854 <fiprintf>:
 800a854:	b40e      	push	{r1, r2, r3}
 800a856:	b503      	push	{r0, r1, lr}
 800a858:	4601      	mov	r1, r0
 800a85a:	ab03      	add	r3, sp, #12
 800a85c:	4805      	ldr	r0, [pc, #20]	@ (800a874 <fiprintf+0x20>)
 800a85e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a862:	6800      	ldr	r0, [r0, #0]
 800a864:	9301      	str	r3, [sp, #4]
 800a866:	f7fe ff7f 	bl	8009768 <_vfiprintf_r>
 800a86a:	b002      	add	sp, #8
 800a86c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a870:	b003      	add	sp, #12
 800a872:	4770      	bx	lr
 800a874:	20000030 	.word	0x20000030

0800a878 <abort>:
 800a878:	b508      	push	{r3, lr}
 800a87a:	2006      	movs	r0, #6
 800a87c:	f000 f834 	bl	800a8e8 <raise>
 800a880:	2001      	movs	r0, #1
 800a882:	f7f7 faf5 	bl	8001e70 <_exit>

0800a886 <_malloc_usable_size_r>:
 800a886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a88a:	1f18      	subs	r0, r3, #4
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	bfbc      	itt	lt
 800a890:	580b      	ldrlt	r3, [r1, r0]
 800a892:	18c0      	addlt	r0, r0, r3
 800a894:	4770      	bx	lr

0800a896 <_raise_r>:
 800a896:	291f      	cmp	r1, #31
 800a898:	b538      	push	{r3, r4, r5, lr}
 800a89a:	4605      	mov	r5, r0
 800a89c:	460c      	mov	r4, r1
 800a89e:	d904      	bls.n	800a8aa <_raise_r+0x14>
 800a8a0:	2316      	movs	r3, #22
 800a8a2:	6003      	str	r3, [r0, #0]
 800a8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a8:	bd38      	pop	{r3, r4, r5, pc}
 800a8aa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a8ac:	b112      	cbz	r2, 800a8b4 <_raise_r+0x1e>
 800a8ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8b2:	b94b      	cbnz	r3, 800a8c8 <_raise_r+0x32>
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	f000 f831 	bl	800a91c <_getpid_r>
 800a8ba:	4622      	mov	r2, r4
 800a8bc:	4601      	mov	r1, r0
 800a8be:	4628      	mov	r0, r5
 800a8c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8c4:	f000 b818 	b.w	800a8f8 <_kill_r>
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d00a      	beq.n	800a8e2 <_raise_r+0x4c>
 800a8cc:	1c59      	adds	r1, r3, #1
 800a8ce:	d103      	bne.n	800a8d8 <_raise_r+0x42>
 800a8d0:	2316      	movs	r3, #22
 800a8d2:	6003      	str	r3, [r0, #0]
 800a8d4:	2001      	movs	r0, #1
 800a8d6:	e7e7      	b.n	800a8a8 <_raise_r+0x12>
 800a8d8:	2100      	movs	r1, #0
 800a8da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a8de:	4620      	mov	r0, r4
 800a8e0:	4798      	blx	r3
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	e7e0      	b.n	800a8a8 <_raise_r+0x12>
	...

0800a8e8 <raise>:
 800a8e8:	4b02      	ldr	r3, [pc, #8]	@ (800a8f4 <raise+0xc>)
 800a8ea:	4601      	mov	r1, r0
 800a8ec:	6818      	ldr	r0, [r3, #0]
 800a8ee:	f7ff bfd2 	b.w	800a896 <_raise_r>
 800a8f2:	bf00      	nop
 800a8f4:	20000030 	.word	0x20000030

0800a8f8 <_kill_r>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	4d07      	ldr	r5, [pc, #28]	@ (800a918 <_kill_r+0x20>)
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	4604      	mov	r4, r0
 800a900:	4608      	mov	r0, r1
 800a902:	4611      	mov	r1, r2
 800a904:	602b      	str	r3, [r5, #0]
 800a906:	f7f7 faa3 	bl	8001e50 <_kill>
 800a90a:	1c43      	adds	r3, r0, #1
 800a90c:	d102      	bne.n	800a914 <_kill_r+0x1c>
 800a90e:	682b      	ldr	r3, [r5, #0]
 800a910:	b103      	cbz	r3, 800a914 <_kill_r+0x1c>
 800a912:	6023      	str	r3, [r4, #0]
 800a914:	bd38      	pop	{r3, r4, r5, pc}
 800a916:	bf00      	nop
 800a918:	20000590 	.word	0x20000590

0800a91c <_getpid_r>:
 800a91c:	f7f7 ba90 	b.w	8001e40 <_getpid>

0800a920 <_init>:
 800a920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a922:	bf00      	nop
 800a924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a926:	bc08      	pop	{r3}
 800a928:	469e      	mov	lr, r3
 800a92a:	4770      	bx	lr

0800a92c <_fini>:
 800a92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a92e:	bf00      	nop
 800a930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a932:	bc08      	pop	{r3}
 800a934:	469e      	mov	lr, r3
 800a936:	4770      	bx	lr
