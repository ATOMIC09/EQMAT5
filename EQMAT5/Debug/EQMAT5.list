
EQMAT5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abf0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  0800ad80  0800ad80  0000bd80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b394  0800b394  0000d24c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b394  0800b394  0000c394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b39c  0800b39c  0000d24c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b39c  0800b39c  0000c39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b3a0  0800b3a0  0000c3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000024c  20000000  0800b3a4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d24c  2**0
                  CONTENTS
 10 .bss          000083c0  2000024c  2000024c  0000d24c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000860c  2000860c  0000d24c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d24c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bcf2  00000000  00000000  0000d27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002255  00000000  00000000  00018f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f8  00000000  00000000  0001b1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000766  00000000  00000000  0001bbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd63  00000000  00000000  0001c326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d5b8  00000000  00000000  0003c089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bca96  00000000  00000000  00049641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b3  00000000  00000000  001060d7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f30  00000000  00000000  0010618c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0010a0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000005bb  00000000  00000000  0010a117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  0010a6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000024c 	.word	0x2000024c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad68 	.word	0x0800ad68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000250 	.word	0x20000250
 80001cc:	0800ad68 	.word	0x0800ad68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ff0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d013      	beq.n	8001024 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ffc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001000:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001004:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00b      	beq.n	8001024 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800100c:	e000      	b.n	8001010 <ITM_SendChar+0x2c>
    {
      __NOP();
 800100e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001010:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f9      	beq.n	800100e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800101a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103a:	f001 f96d 	bl	8002318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103e:	f000 f945 	bl	80012cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001042:	f000 fa2f 	bl	80014a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001046:	f000 fa05 	bl	8001454 <MX_DMA_Init>
  MX_I2S2_Init();
 800104a:	f000 f9a9 	bl	80013a0 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800104e:	f000 f9d7 	bl	8001400 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Start UART communication
  HAL_UART_Transmit(&huart1, tx_buffer, sizeof(tx_buffer), 10); // Send ready message
 8001052:	230a      	movs	r3, #10
 8001054:	2211      	movs	r2, #17
 8001056:	4989      	ldr	r1, [pc, #548]	@ (800127c <main+0x248>)
 8001058:	4889      	ldr	r0, [pc, #548]	@ (8001280 <main+0x24c>)
 800105a:	f003 fd9d 	bl	8004b98 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer)); // Start UART receive
 800105e:	224b      	movs	r2, #75	@ 0x4b
 8001060:	4988      	ldr	r1, [pc, #544]	@ (8001284 <main+0x250>)
 8001062:	4887      	ldr	r0, [pc, #540]	@ (8001280 <main+0x24c>)
 8001064:	f003 fe23 	bl	8004cae <HAL_UART_Receive_IT>
  // parseAndStoreCoeffs("Reset");

  // Start I2S communication

  //init IIR structure
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_l, 1, &iir_coeffs_low[0], &iir_l_state[0]);
 8001068:	4b87      	ldr	r3, [pc, #540]	@ (8001288 <main+0x254>)
 800106a:	4a88      	ldr	r2, [pc, #544]	@ (800128c <main+0x258>)
 800106c:	2101      	movs	r1, #1
 800106e:	4888      	ldr	r0, [pc, #544]	@ (8001290 <main+0x25c>)
 8001070:	f004 fd98 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_r, 1, &iir_coeffs_low[0], &iir_r_state[0]);
 8001074:	4b87      	ldr	r3, [pc, #540]	@ (8001294 <main+0x260>)
 8001076:	4a85      	ldr	r2, [pc, #532]	@ (800128c <main+0x258>)
 8001078:	2101      	movs	r1, #1
 800107a:	4887      	ldr	r0, [pc, #540]	@ (8001298 <main+0x264>)
 800107c:	f004 fd92 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_l, 1, &iir_coeffs_lowmid[0], &iir_l_state[0]);
 8001080:	4b81      	ldr	r3, [pc, #516]	@ (8001288 <main+0x254>)
 8001082:	4a86      	ldr	r2, [pc, #536]	@ (800129c <main+0x268>)
 8001084:	2101      	movs	r1, #1
 8001086:	4882      	ldr	r0, [pc, #520]	@ (8001290 <main+0x25c>)
 8001088:	f004 fd8c 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_r, 1, &iir_coeffs_lowmid[0], &iir_r_state[0]);
 800108c:	4b81      	ldr	r3, [pc, #516]	@ (8001294 <main+0x260>)
 800108e:	4a83      	ldr	r2, [pc, #524]	@ (800129c <main+0x268>)
 8001090:	2101      	movs	r1, #1
 8001092:	4881      	ldr	r0, [pc, #516]	@ (8001298 <main+0x264>)
 8001094:	f004 fd86 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_l, 1, &iir_coeffs_mid[0], &iir_l_state[0]);
 8001098:	4b7b      	ldr	r3, [pc, #492]	@ (8001288 <main+0x254>)
 800109a:	4a81      	ldr	r2, [pc, #516]	@ (80012a0 <main+0x26c>)
 800109c:	2101      	movs	r1, #1
 800109e:	487c      	ldr	r0, [pc, #496]	@ (8001290 <main+0x25c>)
 80010a0:	f004 fd80 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_r, 1, &iir_coeffs_mid[0], &iir_r_state[0]);
 80010a4:	4b7b      	ldr	r3, [pc, #492]	@ (8001294 <main+0x260>)
 80010a6:	4a7e      	ldr	r2, [pc, #504]	@ (80012a0 <main+0x26c>)
 80010a8:	2101      	movs	r1, #1
 80010aa:	487b      	ldr	r0, [pc, #492]	@ (8001298 <main+0x264>)
 80010ac:	f004 fd7a 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_l, 1, &iir_coeffs_highmid[0], &iir_l_state[0]);
 80010b0:	4b75      	ldr	r3, [pc, #468]	@ (8001288 <main+0x254>)
 80010b2:	4a7c      	ldr	r2, [pc, #496]	@ (80012a4 <main+0x270>)
 80010b4:	2101      	movs	r1, #1
 80010b6:	4876      	ldr	r0, [pc, #472]	@ (8001290 <main+0x25c>)
 80010b8:	f004 fd74 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_r, 1, &iir_coeffs_highmid[0], &iir_r_state[0]);
 80010bc:	4b75      	ldr	r3, [pc, #468]	@ (8001294 <main+0x260>)
 80010be:	4a79      	ldr	r2, [pc, #484]	@ (80012a4 <main+0x270>)
 80010c0:	2101      	movs	r1, #1
 80010c2:	4875      	ldr	r0, [pc, #468]	@ (8001298 <main+0x264>)
 80010c4:	f004 fd6e 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_l, 1, &iir_coeffs_high[0], &iir_l_state[0]);
 80010c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001288 <main+0x254>)
 80010ca:	4a77      	ldr	r2, [pc, #476]	@ (80012a8 <main+0x274>)
 80010cc:	2101      	movs	r1, #1
 80010ce:	4870      	ldr	r0, [pc, #448]	@ (8001290 <main+0x25c>)
 80010d0:	f004 fd68 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_r, 1, &iir_coeffs_high[0], &iir_r_state[0]);
 80010d4:	4b6f      	ldr	r3, [pc, #444]	@ (8001294 <main+0x260>)
 80010d6:	4a74      	ldr	r2, [pc, #464]	@ (80012a8 <main+0x274>)
 80010d8:	2101      	movs	r1, #1
 80010da:	486f      	ldr	r0, [pc, #444]	@ (8001298 <main+0x264>)
 80010dc:	f004 fd62 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>

  //start i2s with 2048 samples transmission => 4096*u16 words
  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, BLOCK_SIZE_U16);
 80010e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010e4:	4a71      	ldr	r2, [pc, #452]	@ (80012ac <main+0x278>)
 80010e6:	4972      	ldr	r1, [pc, #456]	@ (80012b0 <main+0x27c>)
 80010e8:	4872      	ldr	r0, [pc, #456]	@ (80012b4 <main+0x280>)
 80010ea:	f002 fa97 	bl	800361c <HAL_I2SEx_TransmitReceive_DMA>
  
    // Blink the LED while working
    // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
    // HAL_Delay(1000);

    if (callback_state != 0) {
 80010ee:	4b72      	ldr	r3, [pc, #456]	@ (80012b8 <main+0x284>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0fb      	beq.n	80010ee <main+0xba>

		  //decide if it was half or cplt callback
		  if (callback_state == 1)   {
 80010f6:	4b70      	ldr	r3, [pc, #448]	@ (80012b8 <main+0x284>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d106      	bne.n	800110c <main+0xd8>
			  	  offset_r_ptr = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
			  	  offset_w_ptr = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
			  	  w_ptr = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	e00c      	b.n	8001126 <main+0xf2>
			  }

		  else if (callback_state == 2) {
 800110c:	4b6a      	ldr	r3, [pc, #424]	@ (80012b8 <main+0x284>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d108      	bne.n	8001126 <main+0xf2>
			  offset_r_ptr = BLOCK_SIZE_U16;
 8001114:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001118:	617b      	str	r3, [r7, #20]
			  offset_w_ptr = BLOCK_SIZE_FLOAT;
 800111a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800111e:	613b      	str	r3, [r7, #16]
			  w_ptr = BLOCK_SIZE_FLOAT;
 8001120:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001124:	60fb      	str	r3, [r7, #12]
		  }


		  //restore input sample buffer to float array
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	e030      	b.n	800118e <main+0x15a>
			  l_buf_in[w_ptr] = (float) ((int) (rxBuf[i]<<16)|rxBuf[i+1]);
 800112c:	4a5f      	ldr	r2, [pc, #380]	@ (80012ac <main+0x278>)
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001134:	041b      	lsls	r3, r3, #16
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	3201      	adds	r2, #1
 800113a:	495c      	ldr	r1, [pc, #368]	@ (80012ac <main+0x278>)
 800113c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001140:	4313      	orrs	r3, r2
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114a:	4a5c      	ldr	r2, [pc, #368]	@ (80012bc <main+0x288>)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	edc3 7a00 	vstr	s15, [r3]
			  r_buf_in[w_ptr] = (float) ((int) (rxBuf[i+2]<<16)|rxBuf[i+3]);
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	3302      	adds	r3, #2
 800115a:	4a54      	ldr	r2, [pc, #336]	@ (80012ac <main+0x278>)
 800115c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001160:	041b      	lsls	r3, r3, #16
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	3203      	adds	r2, #3
 8001166:	4951      	ldr	r1, [pc, #324]	@ (80012ac <main+0x278>)
 8001168:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800116c:	4313      	orrs	r3, r2
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001176:	4a52      	ldr	r2, [pc, #328]	@ (80012c0 <main+0x28c>)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	edc3 7a00 	vstr	s15, [r3]
			  w_ptr++;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3301      	adds	r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	3304      	adds	r3, #4
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	429a      	cmp	r2, r3
 8001198:	ddc8      	ble.n	800112c <main+0xf8>
		  }


		  //process IIR
		  arm_biquad_cascade_df1_f32 (&iirsettings_l, &l_buf_in[offset_w_ptr], &l_buf_out[offset_w_ptr],BLOCK_SIZE_FLOAT);
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4a47      	ldr	r2, [pc, #284]	@ (80012bc <main+0x288>)
 80011a0:	1899      	adds	r1, r3, r2
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4a47      	ldr	r2, [pc, #284]	@ (80012c4 <main+0x290>)
 80011a8:	441a      	add	r2, r3
 80011aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011ae:	4838      	ldr	r0, [pc, #224]	@ (8001290 <main+0x25c>)
 80011b0:	f004 fd04 	bl	8005bbc <arm_biquad_cascade_df1_f32>
		  arm_biquad_cascade_df1_f32 (&iirsettings_r, &r_buf_in[offset_w_ptr], &r_buf_out[offset_w_ptr],BLOCK_SIZE_FLOAT);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4a41      	ldr	r2, [pc, #260]	@ (80012c0 <main+0x28c>)
 80011ba:	1899      	adds	r1, r3, r2
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4a41      	ldr	r2, [pc, #260]	@ (80012c8 <main+0x294>)
 80011c2:	441a      	add	r2, r3
 80011c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011c8:	4833      	ldr	r0, [pc, #204]	@ (8001298 <main+0x264>)
 80011ca:	f004 fcf7 	bl	8005bbc <arm_biquad_cascade_df1_f32>
      //   l_buf_out[i] = l_buf_in[i];
      //   r_buf_out[i] = r_buf_in[i];
      // }

		  //restore processed float-array to output sample-buffer
		  w_ptr = offset_w_ptr;
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	60fb      	str	r3, [r7, #12]

		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	e046      	b.n	8001266 <main+0x232>
				txBuf[i] =  (((int)l_buf_out[w_ptr])>>16)&0xFFFF;
 80011d8:	4a3a      	ldr	r2, [pc, #232]	@ (80012c4 <main+0x290>)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e8:	ee17 3a90 	vmov	r3, s15
 80011ec:	0c1b      	lsrs	r3, r3, #16
 80011ee:	b299      	uxth	r1, r3
 80011f0:	4a2f      	ldr	r2, [pc, #188]	@ (80012b0 <main+0x27c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[i+1] = ((int)l_buf_out[w_ptr])&0xFFFF;
 80011f8:	4a32      	ldr	r2, [pc, #200]	@ (80012c4 <main+0x290>)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3301      	adds	r3, #1
 800120c:	ee17 2a90 	vmov	r2, s15
 8001210:	b291      	uxth	r1, r2
 8001212:	4a27      	ldr	r2, [pc, #156]	@ (80012b0 <main+0x27c>)
 8001214:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[i+2] = (((int)r_buf_out[w_ptr])>>16)&0xFFFF;
 8001218:	4a2b      	ldr	r2, [pc, #172]	@ (80012c8 <main+0x294>)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001228:	ee17 3a90 	vmov	r3, s15
 800122c:	0c1a      	lsrs	r2, r3, #16
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3302      	adds	r3, #2
 8001232:	b291      	uxth	r1, r2
 8001234:	4a1e      	ldr	r2, [pc, #120]	@ (80012b0 <main+0x27c>)
 8001236:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[i+3] = ((int)r_buf_out[w_ptr])&0xFFFF;
 800123a:	4a23      	ldr	r2, [pc, #140]	@ (80012c8 <main+0x294>)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3303      	adds	r3, #3
 800124e:	ee17 2a90 	vmov	r2, s15
 8001252:	b291      	uxth	r1, r2
 8001254:	4a16      	ldr	r2, [pc, #88]	@ (80012b0 <main+0x27c>)
 8001256:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				w_ptr++;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3301      	adds	r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3304      	adds	r3, #4
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	429a      	cmp	r2, r3
 8001270:	ddb2      	ble.n	80011d8 <main+0x1a4>
		  }

		  callback_state = 0;
 8001272:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <main+0x284>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
    if (callback_state != 0) {
 8001278:	e739      	b.n	80010ee <main+0xba>
 800127a:	bf00      	nop
 800127c:	20000000 	.word	0x20000000
 8001280:	20000370 	.word	0x20000370
 8001284:	200003d0 	.word	0x200003d0
 8001288:	2000041c 	.word	0x2000041c
 800128c:	20000014 	.word	0x20000014
 8001290:	200003b8 	.word	0x200003b8
 8001294:	2000042c 	.word	0x2000042c
 8001298:	200003c4 	.word	0x200003c4
 800129c:	20000028 	.word	0x20000028
 80012a0:	2000003c 	.word	0x2000003c
 80012a4:	20000050 	.word	0x20000050
 80012a8:	20000064 	.word	0x20000064
 80012ac:	2000043c 	.word	0x2000043c
 80012b0:	2000243c 	.word	0x2000243c
 80012b4:	20000268 	.word	0x20000268
 80012b8:	2000843c 	.word	0x2000843c
 80012bc:	2000443c 	.word	0x2000443c
 80012c0:	2000543c 	.word	0x2000543c
 80012c4:	2000643c 	.word	0x2000643c
 80012c8:	2000743c 	.word	0x2000743c

080012cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b094      	sub	sp, #80	@ 0x50
 80012d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d2:	f107 0320 	add.w	r3, r7, #32
 80012d6:	2230      	movs	r2, #48	@ 0x30
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f005 fe00 	bl	8006ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <SystemClock_Config+0xcc>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f8:	4a27      	ldr	r2, [pc, #156]	@ (8001398 <SystemClock_Config+0xcc>)
 80012fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001300:	4b25      	ldr	r3, [pc, #148]	@ (8001398 <SystemClock_Config+0xcc>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	4b22      	ldr	r3, [pc, #136]	@ (800139c <SystemClock_Config+0xd0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a21      	ldr	r2, [pc, #132]	@ (800139c <SystemClock_Config+0xd0>)
 8001316:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b1f      	ldr	r3, [pc, #124]	@ (800139c <SystemClock_Config+0xd0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001328:	2301      	movs	r3, #1
 800132a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800132c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001332:	2302      	movs	r3, #2
 8001334:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001336:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800133a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800133c:	2308      	movs	r3, #8
 800133e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001340:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001344:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001346:	2302      	movs	r3, #2
 8001348:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800134a:	2304      	movs	r3, #4
 800134c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134e:	f107 0320 	add.w	r3, r7, #32
 8001352:	4618      	mov	r0, r3
 8001354:	f002 fdf6 	bl	8003f44 <HAL_RCC_OscConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800135e:	f000 fd2d 	bl	8001dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	230f      	movs	r3, #15
 8001364:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001366:	2302      	movs	r3, #2
 8001368:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800136e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001372:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001374:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001378:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2105      	movs	r1, #5
 8001380:	4618      	mov	r0, r3
 8001382:	f003 f857 	bl	8004434 <HAL_RCC_ClockConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800138c:	f000 fd16 	bl	8001dbc <Error_Handler>
  }
}
 8001390:	bf00      	nop
 8001392:	3750      	adds	r7, #80	@ 0x50
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800
 800139c:	40007000 	.word	0x40007000

080013a0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80013a4:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <MX_I2S2_Init+0x54>)
 80013a6:	4a14      	ldr	r2, [pc, #80]	@ (80013f8 <MX_I2S2_Init+0x58>)
 80013a8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80013aa:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <MX_I2S2_Init+0x54>)
 80013ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013b0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <MX_I2S2_Init+0x54>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80013b8:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <MX_I2S2_Init+0x54>)
 80013ba:	2203      	movs	r2, #3
 80013bc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80013be:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <MX_I2S2_Init+0x54>)
 80013c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013c4:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <MX_I2S2_Init+0x54>)
 80013c8:	4a0c      	ldr	r2, [pc, #48]	@ (80013fc <MX_I2S2_Init+0x5c>)
 80013ca:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80013cc:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <MX_I2S2_Init+0x54>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80013d2:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <MX_I2S2_Init+0x54>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <MX_I2S2_Init+0x54>)
 80013da:	2201      	movs	r2, #1
 80013dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <MX_I2S2_Init+0x54>)
 80013e0:	f001 fed6 	bl	8003190 <HAL_I2S_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80013ea:	f000 fce7 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000268 	.word	0x20000268
 80013f8:	40003800 	.word	0x40003800
 80013fc:	00017700 	.word	0x00017700

08001400 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <MX_USART1_UART_Init+0x4c>)
 8001406:	4a12      	ldr	r2, [pc, #72]	@ (8001450 <MX_USART1_UART_Init+0x50>)
 8001408:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800140a:	4b10      	ldr	r3, [pc, #64]	@ (800144c <MX_USART1_UART_Init+0x4c>)
 800140c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001410:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <MX_USART1_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <MX_USART1_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <MX_USART1_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b09      	ldr	r3, [pc, #36]	@ (800144c <MX_USART1_UART_Init+0x4c>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b08      	ldr	r3, [pc, #32]	@ (800144c <MX_USART1_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <MX_USART1_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	@ (800144c <MX_USART1_UART_Init+0x4c>)
 8001438:	f003 fb5e 	bl	8004af8 <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001442:	f000 fcbb 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000370 	.word	0x20000370
 8001450:	40011000 	.word	0x40011000

08001454 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <MX_DMA_Init+0x4c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a0f      	ldr	r2, [pc, #60]	@ (80014a0 <MX_DMA_Init+0x4c>)
 8001464:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b0d      	ldr	r3, [pc, #52]	@ (80014a0 <MX_DMA_Init+0x4c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	200e      	movs	r0, #14
 800147c:	f001 f899 	bl	80025b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001480:	200e      	movs	r0, #14
 8001482:	f001 f8b2 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	200f      	movs	r0, #15
 800148c:	f001 f891 	bl	80025b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001490:	200f      	movs	r0, #15
 8001492:	f001 f8aa 	bl	80025ea <HAL_NVIC_EnableIRQ>

}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b26      	ldr	r3, [pc, #152]	@ (8001558 <MX_GPIO_Init+0xb4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a25      	ldr	r2, [pc, #148]	@ (8001558 <MX_GPIO_Init+0xb4>)
 80014c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b23      	ldr	r3, [pc, #140]	@ (8001558 <MX_GPIO_Init+0xb4>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <MX_GPIO_Init+0xb4>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a1e      	ldr	r2, [pc, #120]	@ (8001558 <MX_GPIO_Init+0xb4>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <MX_GPIO_Init+0xb4>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <MX_GPIO_Init+0xb4>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	4a17      	ldr	r2, [pc, #92]	@ (8001558 <MX_GPIO_Init+0xb4>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6313      	str	r3, [r2, #48]	@ 0x30
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <MX_GPIO_Init+0xb4>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <MX_GPIO_Init+0xb4>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a10      	ldr	r2, [pc, #64]	@ (8001558 <MX_GPIO_Init+0xb4>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <MX_GPIO_Init+0xb4>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2104      	movs	r1, #4
 800152e:	480b      	ldr	r0, [pc, #44]	@ (800155c <MX_GPIO_Init+0xb8>)
 8001530:	f001 fe14 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001534:	2304      	movs	r3, #4
 8001536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	4804      	ldr	r0, [pc, #16]	@ (800155c <MX_GPIO_Init+0xb8>)
 800154c:	f001 fc6a 	bl	8002e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	@ 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800
 800155c:	40020400 	.word	0x40020400

08001560 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e009      	b.n	8001586 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	60ba      	str	r2, [r7, #8]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fd32 	bl	8000fe4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3301      	adds	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	dbf1      	blt.n	8001572 <_write+0x12>
  }
  return len;
 800158e:	687b      	ldr	r3, [r7, #4]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  // HAL_UART_Transmit(&huart1, rx_buffer, sizeof(rx_buffer), 10); // Echo the received data
  printf("Received UART: %s\n", rx_buffer); // Print the received data to serial
 80015a0:	490d      	ldr	r1, [pc, #52]	@ (80015d8 <HAL_UART_RxCpltCallback+0x40>)
 80015a2:	480e      	ldr	r0, [pc, #56]	@ (80015dc <HAL_UART_RxCpltCallback+0x44>)
 80015a4:	f005 fb08 	bl	8006bb8 <iprintf>

  isConfigComplete = false;
 80015a8:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <HAL_UART_RxCpltCallback+0x48>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
  parseAndStoreCoeffs((char *)rx_buffer); // Parse the received data
 80015ae:	480a      	ldr	r0, [pc, #40]	@ (80015d8 <HAL_UART_RxCpltCallback+0x40>)
 80015b0:	f000 f81a 	bl	80015e8 <parseAndStoreCoeffs>
  isConfigComplete = true;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_UART_RxCpltCallback+0x48>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
  memset(rx_buffer, 0, sizeof(rx_buffer)); // Clear the buffer
 80015ba:	224b      	movs	r2, #75	@ 0x4b
 80015bc:	2100      	movs	r1, #0
 80015be:	4806      	ldr	r0, [pc, #24]	@ (80015d8 <HAL_UART_RxCpltCallback+0x40>)
 80015c0:	f005 fc8e 	bl	8006ee0 <memset>
  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer)); // Start the next receive
 80015c4:	224b      	movs	r2, #75	@ 0x4b
 80015c6:	4904      	ldr	r1, [pc, #16]	@ (80015d8 <HAL_UART_RxCpltCallback+0x40>)
 80015c8:	4806      	ldr	r0, [pc, #24]	@ (80015e4 <HAL_UART_RxCpltCallback+0x4c>)
 80015ca:	f003 fb70 	bl	8004cae <HAL_UART_Receive_IT>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200003d0 	.word	0x200003d0
 80015dc:	0800ad80 	.word	0x0800ad80
 80015e0:	20000011 	.word	0x20000011
 80015e4:	20000370 	.word	0x20000370

080015e8 <parseAndStoreCoeffs>:

void parseAndStoreCoeffs(char *rx_buffer) {
 80015e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015ec:	b090      	sub	sp, #64	@ 0x40
 80015ee:	af0a      	add	r7, sp, #40	@ 0x28
 80015f0:	6178      	str	r0, [r7, #20]
    // Determine which band the coefficients are for
    if (strncmp(rx_buffer, "LowMid", 6) == 0) {
 80015f2:	2206      	movs	r2, #6
 80015f4:	497f      	ldr	r1, [pc, #508]	@ (80017f4 <parseAndStoreCoeffs+0x20c>)
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f005 fc7a 	bl	8006ef0 <strncmp>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d14c      	bne.n	800169c <parseAndStoreCoeffs+0xb4>
        sscanf(rx_buffer, "LowMid %f %f %f %f %f %f", 
 8001602:	4b7d      	ldr	r3, [pc, #500]	@ (80017f8 <parseAndStoreCoeffs+0x210>)
 8001604:	9303      	str	r3, [sp, #12]
 8001606:	4b7d      	ldr	r3, [pc, #500]	@ (80017fc <parseAndStoreCoeffs+0x214>)
 8001608:	9302      	str	r3, [sp, #8]
 800160a:	4b7d      	ldr	r3, [pc, #500]	@ (8001800 <parseAndStoreCoeffs+0x218>)
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	4b7d      	ldr	r3, [pc, #500]	@ (8001804 <parseAndStoreCoeffs+0x21c>)
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	4b7d      	ldr	r3, [pc, #500]	@ (8001808 <parseAndStoreCoeffs+0x220>)
 8001614:	4a7d      	ldr	r2, [pc, #500]	@ (800180c <parseAndStoreCoeffs+0x224>)
 8001616:	497e      	ldr	r1, [pc, #504]	@ (8001810 <parseAndStoreCoeffs+0x228>)
 8001618:	6978      	ldr	r0, [r7, #20]
 800161a:	f005 fb5d 	bl	8006cd8 <siscanf>
               &midLowCoeffs.a0, &midLowCoeffs.a1, &midLowCoeffs.a2, 
               &midLowCoeffs.b0, &midLowCoeffs.b1, &midLowCoeffs.b2);
        printf("Parsed LowMid: %f %f %f %f %f %f\n",
                midLowCoeffs.a0, midLowCoeffs.a1, midLowCoeffs.a2, 
 800161e:	4b7b      	ldr	r3, [pc, #492]	@ (800180c <parseAndStoreCoeffs+0x224>)
 8001620:	681b      	ldr	r3, [r3, #0]
        printf("Parsed LowMid: %f %f %f %f %f %f\n",
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff90 	bl	8000548 <__aeabi_f2d>
 8001628:	e9c7 0102 	strd	r0, r1, [r7, #8]
                midLowCoeffs.a0, midLowCoeffs.a1, midLowCoeffs.a2, 
 800162c:	4b77      	ldr	r3, [pc, #476]	@ (800180c <parseAndStoreCoeffs+0x224>)
 800162e:	685b      	ldr	r3, [r3, #4]
        printf("Parsed LowMid: %f %f %f %f %f %f\n",
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff89 	bl	8000548 <__aeabi_f2d>
 8001636:	4604      	mov	r4, r0
 8001638:	460d      	mov	r5, r1
                midLowCoeffs.a0, midLowCoeffs.a1, midLowCoeffs.a2, 
 800163a:	4b74      	ldr	r3, [pc, #464]	@ (800180c <parseAndStoreCoeffs+0x224>)
 800163c:	689b      	ldr	r3, [r3, #8]
        printf("Parsed LowMid: %f %f %f %f %f %f\n",
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ff82 	bl	8000548 <__aeabi_f2d>
 8001644:	4680      	mov	r8, r0
 8001646:	4689      	mov	r9, r1
                midLowCoeffs.b0, midLowCoeffs.b1, midLowCoeffs.b2);
 8001648:	4b70      	ldr	r3, [pc, #448]	@ (800180c <parseAndStoreCoeffs+0x224>)
 800164a:	68db      	ldr	r3, [r3, #12]
        printf("Parsed LowMid: %f %f %f %f %f %f\n",
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff7b 	bl	8000548 <__aeabi_f2d>
 8001652:	4682      	mov	sl, r0
 8001654:	468b      	mov	fp, r1
                midLowCoeffs.b0, midLowCoeffs.b1, midLowCoeffs.b2);
 8001656:	4b6d      	ldr	r3, [pc, #436]	@ (800180c <parseAndStoreCoeffs+0x224>)
 8001658:	691b      	ldr	r3, [r3, #16]
        printf("Parsed LowMid: %f %f %f %f %f %f\n",
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff74 	bl	8000548 <__aeabi_f2d>
 8001660:	e9c7 0100 	strd	r0, r1, [r7]
                midLowCoeffs.b0, midLowCoeffs.b1, midLowCoeffs.b2);
 8001664:	4b69      	ldr	r3, [pc, #420]	@ (800180c <parseAndStoreCoeffs+0x224>)
 8001666:	695b      	ldr	r3, [r3, #20]
        printf("Parsed LowMid: %f %f %f %f %f %f\n",
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe ff6d 	bl	8000548 <__aeabi_f2d>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001676:	ed97 7b00 	vldr	d7, [r7]
 800167a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800167e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001682:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001686:	e9cd 4500 	strd	r4, r5, [sp]
 800168a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800168e:	4861      	ldr	r0, [pc, #388]	@ (8001814 <parseAndStoreCoeffs+0x22c>)
 8001690:	f005 fa92 	bl	8006bb8 <iprintf>
        applyNewCoeffs("LowMid");
 8001694:	4857      	ldr	r0, [pc, #348]	@ (80017f4 <parseAndStoreCoeffs+0x20c>)
 8001696:	f000 fa49 	bl	8001b2c <applyNewCoeffs>

        printf("Coefficients reset!\n");
    } else {
        printf("Invalid parameter\n");
    }
}
 800169a:	e1fe      	b.n	8001a9a <parseAndStoreCoeffs+0x4b2>
    } else if (strncmp(rx_buffer, "HighMid", 7) == 0) {
 800169c:	2207      	movs	r2, #7
 800169e:	495e      	ldr	r1, [pc, #376]	@ (8001818 <parseAndStoreCoeffs+0x230>)
 80016a0:	6978      	ldr	r0, [r7, #20]
 80016a2:	f005 fc25 	bl	8006ef0 <strncmp>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d14c      	bne.n	8001746 <parseAndStoreCoeffs+0x15e>
        sscanf(rx_buffer, "HighMid %f %f %f %f %f %f", 
 80016ac:	4b5b      	ldr	r3, [pc, #364]	@ (800181c <parseAndStoreCoeffs+0x234>)
 80016ae:	9303      	str	r3, [sp, #12]
 80016b0:	4b5b      	ldr	r3, [pc, #364]	@ (8001820 <parseAndStoreCoeffs+0x238>)
 80016b2:	9302      	str	r3, [sp, #8]
 80016b4:	4b5b      	ldr	r3, [pc, #364]	@ (8001824 <parseAndStoreCoeffs+0x23c>)
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001828 <parseAndStoreCoeffs+0x240>)
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	4b5b      	ldr	r3, [pc, #364]	@ (800182c <parseAndStoreCoeffs+0x244>)
 80016be:	4a5c      	ldr	r2, [pc, #368]	@ (8001830 <parseAndStoreCoeffs+0x248>)
 80016c0:	495c      	ldr	r1, [pc, #368]	@ (8001834 <parseAndStoreCoeffs+0x24c>)
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f005 fb08 	bl	8006cd8 <siscanf>
                midHighCoeffs.a0, midHighCoeffs.a1, midHighCoeffs.a2, 
 80016c8:	4b59      	ldr	r3, [pc, #356]	@ (8001830 <parseAndStoreCoeffs+0x248>)
 80016ca:	681b      	ldr	r3, [r3, #0]
        printf("Parsed HighMid: %f %f %f %f %f %f\n",
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe ff3b 	bl	8000548 <__aeabi_f2d>
 80016d2:	e9c7 0102 	strd	r0, r1, [r7, #8]
                midHighCoeffs.a0, midHighCoeffs.a1, midHighCoeffs.a2, 
 80016d6:	4b56      	ldr	r3, [pc, #344]	@ (8001830 <parseAndStoreCoeffs+0x248>)
 80016d8:	685b      	ldr	r3, [r3, #4]
        printf("Parsed HighMid: %f %f %f %f %f %f\n",
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff34 	bl	8000548 <__aeabi_f2d>
 80016e0:	4604      	mov	r4, r0
 80016e2:	460d      	mov	r5, r1
                midHighCoeffs.a0, midHighCoeffs.a1, midHighCoeffs.a2, 
 80016e4:	4b52      	ldr	r3, [pc, #328]	@ (8001830 <parseAndStoreCoeffs+0x248>)
 80016e6:	689b      	ldr	r3, [r3, #8]
        printf("Parsed HighMid: %f %f %f %f %f %f\n",
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff2d 	bl	8000548 <__aeabi_f2d>
 80016ee:	4680      	mov	r8, r0
 80016f0:	4689      	mov	r9, r1
                midHighCoeffs.b0, midHighCoeffs.b1, midHighCoeffs.b2);
 80016f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001830 <parseAndStoreCoeffs+0x248>)
 80016f4:	68db      	ldr	r3, [r3, #12]
        printf("Parsed HighMid: %f %f %f %f %f %f\n",
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe ff26 	bl	8000548 <__aeabi_f2d>
 80016fc:	4682      	mov	sl, r0
 80016fe:	468b      	mov	fp, r1
                midHighCoeffs.b0, midHighCoeffs.b1, midHighCoeffs.b2);
 8001700:	4b4b      	ldr	r3, [pc, #300]	@ (8001830 <parseAndStoreCoeffs+0x248>)
 8001702:	691b      	ldr	r3, [r3, #16]
        printf("Parsed HighMid: %f %f %f %f %f %f\n",
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe ff1f 	bl	8000548 <__aeabi_f2d>
 800170a:	e9c7 0100 	strd	r0, r1, [r7]
                midHighCoeffs.b0, midHighCoeffs.b1, midHighCoeffs.b2);
 800170e:	4b48      	ldr	r3, [pc, #288]	@ (8001830 <parseAndStoreCoeffs+0x248>)
 8001710:	695b      	ldr	r3, [r3, #20]
        printf("Parsed HighMid: %f %f %f %f %f %f\n",
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff18 	bl	8000548 <__aeabi_f2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001720:	ed97 7b00 	vldr	d7, [r7]
 8001724:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001728:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800172c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001730:	e9cd 4500 	strd	r4, r5, [sp]
 8001734:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001738:	483f      	ldr	r0, [pc, #252]	@ (8001838 <parseAndStoreCoeffs+0x250>)
 800173a:	f005 fa3d 	bl	8006bb8 <iprintf>
        applyNewCoeffs("HighMid");
 800173e:	4836      	ldr	r0, [pc, #216]	@ (8001818 <parseAndStoreCoeffs+0x230>)
 8001740:	f000 f9f4 	bl	8001b2c <applyNewCoeffs>
}
 8001744:	e1a9      	b.n	8001a9a <parseAndStoreCoeffs+0x4b2>
    } else if (strncmp(rx_buffer, "High", 4) == 0) {
 8001746:	2204      	movs	r2, #4
 8001748:	493c      	ldr	r1, [pc, #240]	@ (800183c <parseAndStoreCoeffs+0x254>)
 800174a:	6978      	ldr	r0, [r7, #20]
 800174c:	f005 fbd0 	bl	8006ef0 <strncmp>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	f040 8084 	bne.w	8001860 <parseAndStoreCoeffs+0x278>
        sscanf(rx_buffer, "High %f %f %f %f %f %f", 
 8001758:	4b39      	ldr	r3, [pc, #228]	@ (8001840 <parseAndStoreCoeffs+0x258>)
 800175a:	9303      	str	r3, [sp, #12]
 800175c:	4b39      	ldr	r3, [pc, #228]	@ (8001844 <parseAndStoreCoeffs+0x25c>)
 800175e:	9302      	str	r3, [sp, #8]
 8001760:	4b39      	ldr	r3, [pc, #228]	@ (8001848 <parseAndStoreCoeffs+0x260>)
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	4b39      	ldr	r3, [pc, #228]	@ (800184c <parseAndStoreCoeffs+0x264>)
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	4b39      	ldr	r3, [pc, #228]	@ (8001850 <parseAndStoreCoeffs+0x268>)
 800176a:	4a3a      	ldr	r2, [pc, #232]	@ (8001854 <parseAndStoreCoeffs+0x26c>)
 800176c:	493a      	ldr	r1, [pc, #232]	@ (8001858 <parseAndStoreCoeffs+0x270>)
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f005 fab2 	bl	8006cd8 <siscanf>
                highBandCoeffs.a0, highBandCoeffs.a1, highBandCoeffs.a2, 
 8001774:	4b37      	ldr	r3, [pc, #220]	@ (8001854 <parseAndStoreCoeffs+0x26c>)
 8001776:	681b      	ldr	r3, [r3, #0]
        printf("Parsed High: %f %f %f %f %f %f\n",
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fee5 	bl	8000548 <__aeabi_f2d>
 800177e:	e9c7 0102 	strd	r0, r1, [r7, #8]
                highBandCoeffs.a0, highBandCoeffs.a1, highBandCoeffs.a2, 
 8001782:	4b34      	ldr	r3, [pc, #208]	@ (8001854 <parseAndStoreCoeffs+0x26c>)
 8001784:	685b      	ldr	r3, [r3, #4]
        printf("Parsed High: %f %f %f %f %f %f\n",
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fede 	bl	8000548 <__aeabi_f2d>
 800178c:	4604      	mov	r4, r0
 800178e:	460d      	mov	r5, r1
                highBandCoeffs.a0, highBandCoeffs.a1, highBandCoeffs.a2, 
 8001790:	4b30      	ldr	r3, [pc, #192]	@ (8001854 <parseAndStoreCoeffs+0x26c>)
 8001792:	689b      	ldr	r3, [r3, #8]
        printf("Parsed High: %f %f %f %f %f %f\n",
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fed7 	bl	8000548 <__aeabi_f2d>
 800179a:	4680      	mov	r8, r0
 800179c:	4689      	mov	r9, r1
                highBandCoeffs.b0, highBandCoeffs.b1, highBandCoeffs.b2);
 800179e:	4b2d      	ldr	r3, [pc, #180]	@ (8001854 <parseAndStoreCoeffs+0x26c>)
 80017a0:	68db      	ldr	r3, [r3, #12]
        printf("Parsed High: %f %f %f %f %f %f\n",
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fed0 	bl	8000548 <__aeabi_f2d>
 80017a8:	4682      	mov	sl, r0
 80017aa:	468b      	mov	fp, r1
                highBandCoeffs.b0, highBandCoeffs.b1, highBandCoeffs.b2);
 80017ac:	4b29      	ldr	r3, [pc, #164]	@ (8001854 <parseAndStoreCoeffs+0x26c>)
 80017ae:	691b      	ldr	r3, [r3, #16]
        printf("Parsed High: %f %f %f %f %f %f\n",
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fec9 	bl	8000548 <__aeabi_f2d>
 80017b6:	e9c7 0100 	strd	r0, r1, [r7]
                highBandCoeffs.b0, highBandCoeffs.b1, highBandCoeffs.b2);
 80017ba:	4b26      	ldr	r3, [pc, #152]	@ (8001854 <parseAndStoreCoeffs+0x26c>)
 80017bc:	695b      	ldr	r3, [r3, #20]
        printf("Parsed High: %f %f %f %f %f %f\n",
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fec2 	bl	8000548 <__aeabi_f2d>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80017cc:	ed97 7b00 	vldr	d7, [r7]
 80017d0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80017d4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80017d8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017dc:	e9cd 4500 	strd	r4, r5, [sp]
 80017e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017e4:	481d      	ldr	r0, [pc, #116]	@ (800185c <parseAndStoreCoeffs+0x274>)
 80017e6:	f005 f9e7 	bl	8006bb8 <iprintf>
        applyNewCoeffs("High");
 80017ea:	4814      	ldr	r0, [pc, #80]	@ (800183c <parseAndStoreCoeffs+0x254>)
 80017ec:	f000 f99e 	bl	8001b2c <applyNewCoeffs>
}
 80017f0:	e153      	b.n	8001a9a <parseAndStoreCoeffs+0x4b2>
 80017f2:	bf00      	nop
 80017f4:	0800ad94 	.word	0x0800ad94
 80017f8:	2000846c 	.word	0x2000846c
 80017fc:	20008468 	.word	0x20008468
 8001800:	20008464 	.word	0x20008464
 8001804:	20008460 	.word	0x20008460
 8001808:	2000845c 	.word	0x2000845c
 800180c:	20008458 	.word	0x20008458
 8001810:	0800ad9c 	.word	0x0800ad9c
 8001814:	0800adb8 	.word	0x0800adb8
 8001818:	0800addc 	.word	0x0800addc
 800181c:	2000849c 	.word	0x2000849c
 8001820:	20008498 	.word	0x20008498
 8001824:	20008494 	.word	0x20008494
 8001828:	20008490 	.word	0x20008490
 800182c:	2000848c 	.word	0x2000848c
 8001830:	20008488 	.word	0x20008488
 8001834:	0800ade4 	.word	0x0800ade4
 8001838:	0800ae00 	.word	0x0800ae00
 800183c:	0800ae24 	.word	0x0800ae24
 8001840:	200084b4 	.word	0x200084b4
 8001844:	200084b0 	.word	0x200084b0
 8001848:	200084ac 	.word	0x200084ac
 800184c:	200084a8 	.word	0x200084a8
 8001850:	200084a4 	.word	0x200084a4
 8001854:	200084a0 	.word	0x200084a0
 8001858:	0800ae2c 	.word	0x0800ae2c
 800185c:	0800ae44 	.word	0x0800ae44
    } else if (strncmp(rx_buffer, "Mid", 3) == 0) {
 8001860:	2203      	movs	r2, #3
 8001862:	4990      	ldr	r1, [pc, #576]	@ (8001aa4 <parseAndStoreCoeffs+0x4bc>)
 8001864:	6978      	ldr	r0, [r7, #20]
 8001866:	f005 fb43 	bl	8006ef0 <strncmp>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d14c      	bne.n	800190a <parseAndStoreCoeffs+0x322>
        sscanf(rx_buffer, "Mid %f %f %f %f %f %f", 
 8001870:	4b8d      	ldr	r3, [pc, #564]	@ (8001aa8 <parseAndStoreCoeffs+0x4c0>)
 8001872:	9303      	str	r3, [sp, #12]
 8001874:	4b8d      	ldr	r3, [pc, #564]	@ (8001aac <parseAndStoreCoeffs+0x4c4>)
 8001876:	9302      	str	r3, [sp, #8]
 8001878:	4b8d      	ldr	r3, [pc, #564]	@ (8001ab0 <parseAndStoreCoeffs+0x4c8>)
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	4b8d      	ldr	r3, [pc, #564]	@ (8001ab4 <parseAndStoreCoeffs+0x4cc>)
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	4b8d      	ldr	r3, [pc, #564]	@ (8001ab8 <parseAndStoreCoeffs+0x4d0>)
 8001882:	4a8e      	ldr	r2, [pc, #568]	@ (8001abc <parseAndStoreCoeffs+0x4d4>)
 8001884:	498e      	ldr	r1, [pc, #568]	@ (8001ac0 <parseAndStoreCoeffs+0x4d8>)
 8001886:	6978      	ldr	r0, [r7, #20]
 8001888:	f005 fa26 	bl	8006cd8 <siscanf>
                midBandCoeffs.a0, midBandCoeffs.a1, midBandCoeffs.a2, 
 800188c:	4b8b      	ldr	r3, [pc, #556]	@ (8001abc <parseAndStoreCoeffs+0x4d4>)
 800188e:	681b      	ldr	r3, [r3, #0]
        printf("Parsed Mid: %f %f %f %f %f %f\n",
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe59 	bl	8000548 <__aeabi_f2d>
 8001896:	e9c7 0102 	strd	r0, r1, [r7, #8]
                midBandCoeffs.a0, midBandCoeffs.a1, midBandCoeffs.a2, 
 800189a:	4b88      	ldr	r3, [pc, #544]	@ (8001abc <parseAndStoreCoeffs+0x4d4>)
 800189c:	685b      	ldr	r3, [r3, #4]
        printf("Parsed Mid: %f %f %f %f %f %f\n",
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fe52 	bl	8000548 <__aeabi_f2d>
 80018a4:	4604      	mov	r4, r0
 80018a6:	460d      	mov	r5, r1
                midBandCoeffs.a0, midBandCoeffs.a1, midBandCoeffs.a2, 
 80018a8:	4b84      	ldr	r3, [pc, #528]	@ (8001abc <parseAndStoreCoeffs+0x4d4>)
 80018aa:	689b      	ldr	r3, [r3, #8]
        printf("Parsed Mid: %f %f %f %f %f %f\n",
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe4b 	bl	8000548 <__aeabi_f2d>
 80018b2:	4680      	mov	r8, r0
 80018b4:	4689      	mov	r9, r1
                midBandCoeffs.b0, midBandCoeffs.b1, midBandCoeffs.b2);
 80018b6:	4b81      	ldr	r3, [pc, #516]	@ (8001abc <parseAndStoreCoeffs+0x4d4>)
 80018b8:	68db      	ldr	r3, [r3, #12]
        printf("Parsed Mid: %f %f %f %f %f %f\n",
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fe44 	bl	8000548 <__aeabi_f2d>
 80018c0:	4682      	mov	sl, r0
 80018c2:	468b      	mov	fp, r1
                midBandCoeffs.b0, midBandCoeffs.b1, midBandCoeffs.b2);
 80018c4:	4b7d      	ldr	r3, [pc, #500]	@ (8001abc <parseAndStoreCoeffs+0x4d4>)
 80018c6:	691b      	ldr	r3, [r3, #16]
        printf("Parsed Mid: %f %f %f %f %f %f\n",
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe3d 	bl	8000548 <__aeabi_f2d>
 80018ce:	e9c7 0100 	strd	r0, r1, [r7]
                midBandCoeffs.b0, midBandCoeffs.b1, midBandCoeffs.b2);
 80018d2:	4b7a      	ldr	r3, [pc, #488]	@ (8001abc <parseAndStoreCoeffs+0x4d4>)
 80018d4:	695b      	ldr	r3, [r3, #20]
        printf("Parsed Mid: %f %f %f %f %f %f\n",
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fe36 	bl	8000548 <__aeabi_f2d>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80018e4:	ed97 7b00 	vldr	d7, [r7]
 80018e8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80018ec:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80018f0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80018f4:	e9cd 4500 	strd	r4, r5, [sp]
 80018f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018fc:	4871      	ldr	r0, [pc, #452]	@ (8001ac4 <parseAndStoreCoeffs+0x4dc>)
 80018fe:	f005 f95b 	bl	8006bb8 <iprintf>
        applyNewCoeffs("Mid");
 8001902:	4868      	ldr	r0, [pc, #416]	@ (8001aa4 <parseAndStoreCoeffs+0x4bc>)
 8001904:	f000 f912 	bl	8001b2c <applyNewCoeffs>
}
 8001908:	e0c7      	b.n	8001a9a <parseAndStoreCoeffs+0x4b2>
    } else if (strncmp(rx_buffer, "Low", 3) == 0) {
 800190a:	2203      	movs	r2, #3
 800190c:	496e      	ldr	r1, [pc, #440]	@ (8001ac8 <parseAndStoreCoeffs+0x4e0>)
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f005 faee 	bl	8006ef0 <strncmp>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d14c      	bne.n	80019b4 <parseAndStoreCoeffs+0x3cc>
        sscanf(rx_buffer, "Low %f %f %f %f %f %f", 
 800191a:	4b6c      	ldr	r3, [pc, #432]	@ (8001acc <parseAndStoreCoeffs+0x4e4>)
 800191c:	9303      	str	r3, [sp, #12]
 800191e:	4b6c      	ldr	r3, [pc, #432]	@ (8001ad0 <parseAndStoreCoeffs+0x4e8>)
 8001920:	9302      	str	r3, [sp, #8]
 8001922:	4b6c      	ldr	r3, [pc, #432]	@ (8001ad4 <parseAndStoreCoeffs+0x4ec>)
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	4b6c      	ldr	r3, [pc, #432]	@ (8001ad8 <parseAndStoreCoeffs+0x4f0>)
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	4b6c      	ldr	r3, [pc, #432]	@ (8001adc <parseAndStoreCoeffs+0x4f4>)
 800192c:	4a6c      	ldr	r2, [pc, #432]	@ (8001ae0 <parseAndStoreCoeffs+0x4f8>)
 800192e:	496d      	ldr	r1, [pc, #436]	@ (8001ae4 <parseAndStoreCoeffs+0x4fc>)
 8001930:	6978      	ldr	r0, [r7, #20]
 8001932:	f005 f9d1 	bl	8006cd8 <siscanf>
               lowBandCoeffs.a0, lowBandCoeffs.a1, lowBandCoeffs.a2, 
 8001936:	4b6a      	ldr	r3, [pc, #424]	@ (8001ae0 <parseAndStoreCoeffs+0x4f8>)
 8001938:	681b      	ldr	r3, [r3, #0]
        printf("Parsed Low: %f %f %f %f %f %f\n", 
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fe04 	bl	8000548 <__aeabi_f2d>
 8001940:	e9c7 0102 	strd	r0, r1, [r7, #8]
               lowBandCoeffs.a0, lowBandCoeffs.a1, lowBandCoeffs.a2, 
 8001944:	4b66      	ldr	r3, [pc, #408]	@ (8001ae0 <parseAndStoreCoeffs+0x4f8>)
 8001946:	685b      	ldr	r3, [r3, #4]
        printf("Parsed Low: %f %f %f %f %f %f\n", 
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fdfd 	bl	8000548 <__aeabi_f2d>
 800194e:	4604      	mov	r4, r0
 8001950:	460d      	mov	r5, r1
               lowBandCoeffs.a0, lowBandCoeffs.a1, lowBandCoeffs.a2, 
 8001952:	4b63      	ldr	r3, [pc, #396]	@ (8001ae0 <parseAndStoreCoeffs+0x4f8>)
 8001954:	689b      	ldr	r3, [r3, #8]
        printf("Parsed Low: %f %f %f %f %f %f\n", 
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fdf6 	bl	8000548 <__aeabi_f2d>
 800195c:	4680      	mov	r8, r0
 800195e:	4689      	mov	r9, r1
               lowBandCoeffs.b0, lowBandCoeffs.b1, lowBandCoeffs.b2);
 8001960:	4b5f      	ldr	r3, [pc, #380]	@ (8001ae0 <parseAndStoreCoeffs+0x4f8>)
 8001962:	68db      	ldr	r3, [r3, #12]
        printf("Parsed Low: %f %f %f %f %f %f\n", 
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fdef 	bl	8000548 <__aeabi_f2d>
 800196a:	4682      	mov	sl, r0
 800196c:	468b      	mov	fp, r1
               lowBandCoeffs.b0, lowBandCoeffs.b1, lowBandCoeffs.b2);
 800196e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ae0 <parseAndStoreCoeffs+0x4f8>)
 8001970:	691b      	ldr	r3, [r3, #16]
        printf("Parsed Low: %f %f %f %f %f %f\n", 
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fde8 	bl	8000548 <__aeabi_f2d>
 8001978:	e9c7 0100 	strd	r0, r1, [r7]
               lowBandCoeffs.b0, lowBandCoeffs.b1, lowBandCoeffs.b2);
 800197c:	4b58      	ldr	r3, [pc, #352]	@ (8001ae0 <parseAndStoreCoeffs+0x4f8>)
 800197e:	695b      	ldr	r3, [r3, #20]
        printf("Parsed Low: %f %f %f %f %f %f\n", 
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fde1 	bl	8000548 <__aeabi_f2d>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800198e:	ed97 7b00 	vldr	d7, [r7]
 8001992:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001996:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800199a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800199e:	e9cd 4500 	strd	r4, r5, [sp]
 80019a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019a6:	4850      	ldr	r0, [pc, #320]	@ (8001ae8 <parseAndStoreCoeffs+0x500>)
 80019a8:	f005 f906 	bl	8006bb8 <iprintf>
        applyNewCoeffs("Low");
 80019ac:	4846      	ldr	r0, [pc, #280]	@ (8001ac8 <parseAndStoreCoeffs+0x4e0>)
 80019ae:	f000 f8bd 	bl	8001b2c <applyNewCoeffs>
}
 80019b2:	e072      	b.n	8001a9a <parseAndStoreCoeffs+0x4b2>
    } else if (strncmp(rx_buffer, "Reset", 5) == 0) {
 80019b4:	2205      	movs	r2, #5
 80019b6:	494d      	ldr	r1, [pc, #308]	@ (8001aec <parseAndStoreCoeffs+0x504>)
 80019b8:	6978      	ldr	r0, [r7, #20]
 80019ba:	f005 fa99 	bl	8006ef0 <strncmp>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d167      	bne.n	8001a94 <parseAndStoreCoeffs+0x4ac>
        lowBandCoeffs.a0 = 1.000000f;
 80019c4:	4b46      	ldr	r3, [pc, #280]	@ (8001ae0 <parseAndStoreCoeffs+0x4f8>)
 80019c6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019ca:	601a      	str	r2, [r3, #0]
        lowBandCoeffs.a1 = -1.9967221676279703f;
 80019cc:	4b44      	ldr	r3, [pc, #272]	@ (8001ae0 <parseAndStoreCoeffs+0x4f8>)
 80019ce:	4a48      	ldr	r2, [pc, #288]	@ (8001af0 <parseAndStoreCoeffs+0x508>)
 80019d0:	605a      	str	r2, [r3, #4]
        lowBandCoeffs.a2 = 0.9967328593303515f;
 80019d2:	4b43      	ldr	r3, [pc, #268]	@ (8001ae0 <parseAndStoreCoeffs+0x4f8>)
 80019d4:	4a47      	ldr	r2, [pc, #284]	@ (8001af4 <parseAndStoreCoeffs+0x50c>)
 80019d6:	609a      	str	r2, [r3, #8]
        lowBandCoeffs.b0 = 1.0f;
 80019d8:	4b41      	ldr	r3, [pc, #260]	@ (8001ae0 <parseAndStoreCoeffs+0x4f8>)
 80019da:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019de:	60da      	str	r2, [r3, #12]
        lowBandCoeffs.b1 = -1.9967221676279703f;
 80019e0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae0 <parseAndStoreCoeffs+0x4f8>)
 80019e2:	4a43      	ldr	r2, [pc, #268]	@ (8001af0 <parseAndStoreCoeffs+0x508>)
 80019e4:	611a      	str	r2, [r3, #16]
        lowBandCoeffs.b2 = 0.9967328593303515f;
 80019e6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae0 <parseAndStoreCoeffs+0x4f8>)
 80019e8:	4a42      	ldr	r2, [pc, #264]	@ (8001af4 <parseAndStoreCoeffs+0x50c>)
 80019ea:	615a      	str	r2, [r3, #20]
        midLowCoeffs.a0 = 1.000000f;
 80019ec:	4b42      	ldr	r3, [pc, #264]	@ (8001af8 <parseAndStoreCoeffs+0x510>)
 80019ee:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019f2:	601a      	str	r2, [r3, #0]
        midLowCoeffs.a1 = -1.9868252854194832f;
 80019f4:	4b40      	ldr	r3, [pc, #256]	@ (8001af8 <parseAndStoreCoeffs+0x510>)
 80019f6:	4a41      	ldr	r2, [pc, #260]	@ (8001afc <parseAndStoreCoeffs+0x514>)
 80019f8:	605a      	str	r2, [r3, #4]
        midLowCoeffs.a2 = 0.9869955161457885f;
 80019fa:	4b3f      	ldr	r3, [pc, #252]	@ (8001af8 <parseAndStoreCoeffs+0x510>)
 80019fc:	4a40      	ldr	r2, [pc, #256]	@ (8001b00 <parseAndStoreCoeffs+0x518>)
 80019fe:	609a      	str	r2, [r3, #8]
        midLowCoeffs.b0 = 1.0f;
 8001a00:	4b3d      	ldr	r3, [pc, #244]	@ (8001af8 <parseAndStoreCoeffs+0x510>)
 8001a02:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a06:	60da      	str	r2, [r3, #12]
        midLowCoeffs.b1 = -1.9868252854194832f;
 8001a08:	4b3b      	ldr	r3, [pc, #236]	@ (8001af8 <parseAndStoreCoeffs+0x510>)
 8001a0a:	4a3c      	ldr	r2, [pc, #240]	@ (8001afc <parseAndStoreCoeffs+0x514>)
 8001a0c:	611a      	str	r2, [r3, #16]
        midLowCoeffs.b2 = 0.9869955161457885f;
 8001a0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001af8 <parseAndStoreCoeffs+0x510>)
 8001a10:	4a3b      	ldr	r2, [pc, #236]	@ (8001b00 <parseAndStoreCoeffs+0x518>)
 8001a12:	615a      	str	r2, [r3, #20]
        midBandCoeffs.a0 = 1.000000f;
 8001a14:	4b29      	ldr	r3, [pc, #164]	@ (8001abc <parseAndStoreCoeffs+0x4d4>)
 8001a16:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a1a:	601a      	str	r2, [r3, #0]
        midBandCoeffs.a1 = -1.8973814990203015f;
 8001a1c:	4b27      	ldr	r3, [pc, #156]	@ (8001abc <parseAndStoreCoeffs+0x4d4>)
 8001a1e:	4a39      	ldr	r2, [pc, #228]	@ (8001b04 <parseAndStoreCoeffs+0x51c>)
 8001a20:	605a      	str	r2, [r3, #4]
        midBandCoeffs.a2 = 0.9065621167287853f;
 8001a22:	4b26      	ldr	r3, [pc, #152]	@ (8001abc <parseAndStoreCoeffs+0x4d4>)
 8001a24:	4a38      	ldr	r2, [pc, #224]	@ (8001b08 <parseAndStoreCoeffs+0x520>)
 8001a26:	609a      	str	r2, [r3, #8]
        midBandCoeffs.b0 = 1.0f;
 8001a28:	4b24      	ldr	r3, [pc, #144]	@ (8001abc <parseAndStoreCoeffs+0x4d4>)
 8001a2a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a2e:	60da      	str	r2, [r3, #12]
        midBandCoeffs.b1 = -1.8973814990203015f;
 8001a30:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <parseAndStoreCoeffs+0x4d4>)
 8001a32:	4a34      	ldr	r2, [pc, #208]	@ (8001b04 <parseAndStoreCoeffs+0x51c>)
 8001a34:	611a      	str	r2, [r3, #16]
        midBandCoeffs.b2 = 0.9065621167287853f;
 8001a36:	4b21      	ldr	r3, [pc, #132]	@ (8001abc <parseAndStoreCoeffs+0x4d4>)
 8001a38:	4a33      	ldr	r2, [pc, #204]	@ (8001b08 <parseAndStoreCoeffs+0x520>)
 8001a3a:	615a      	str	r2, [r3, #20]
        midHighCoeffs.a0 = 0.9999999999999999f;
 8001a3c:	4b33      	ldr	r3, [pc, #204]	@ (8001b0c <parseAndStoreCoeffs+0x524>)
 8001a3e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a42:	601a      	str	r2, [r3, #0]
        midHighCoeffs.a1 = -1.7872344851894877f;
 8001a44:	4b31      	ldr	r3, [pc, #196]	@ (8001b0c <parseAndStoreCoeffs+0x524>)
 8001a46:	4a32      	ldr	r2, [pc, #200]	@ (8001b10 <parseAndStoreCoeffs+0x528>)
 8001a48:	605a      	str	r2, [r3, #4]
        midHighCoeffs.a2 = 0.8222484787441973f;
 8001a4a:	4b30      	ldr	r3, [pc, #192]	@ (8001b0c <parseAndStoreCoeffs+0x524>)
 8001a4c:	4a31      	ldr	r2, [pc, #196]	@ (8001b14 <parseAndStoreCoeffs+0x52c>)
 8001a4e:	609a      	str	r2, [r3, #8]
        midHighCoeffs.b0 = 1.0f;
 8001a50:	4b2e      	ldr	r3, [pc, #184]	@ (8001b0c <parseAndStoreCoeffs+0x524>)
 8001a52:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a56:	60da      	str	r2, [r3, #12]
        midHighCoeffs.b1 = -1.7872344851894877f;
 8001a58:	4b2c      	ldr	r3, [pc, #176]	@ (8001b0c <parseAndStoreCoeffs+0x524>)
 8001a5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001b10 <parseAndStoreCoeffs+0x528>)
 8001a5c:	611a      	str	r2, [r3, #16]
        midHighCoeffs.b2 = 0.8222484787441973f;
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b0c <parseAndStoreCoeffs+0x524>)
 8001a60:	4a2c      	ldr	r2, [pc, #176]	@ (8001b14 <parseAndStoreCoeffs+0x52c>)
 8001a62:	615a      	str	r2, [r3, #20]
        highBandCoeffs.a0 = 0.9999999999999999f;
 8001a64:	4b2c      	ldr	r3, [pc, #176]	@ (8001b18 <parseAndStoreCoeffs+0x530>)
 8001a66:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a6a:	601a      	str	r2, [r3, #0]
        highBandCoeffs.a1 = -1.2164444497980702f;
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b18 <parseAndStoreCoeffs+0x530>)
 8001a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8001b1c <parseAndStoreCoeffs+0x534>)
 8001a70:	605a      	str	r2, [r3, #4]
        highBandCoeffs.a2 = 0.5332946721463616f;
 8001a72:	4b29      	ldr	r3, [pc, #164]	@ (8001b18 <parseAndStoreCoeffs+0x530>)
 8001a74:	4a2a      	ldr	r2, [pc, #168]	@ (8001b20 <parseAndStoreCoeffs+0x538>)
 8001a76:	609a      	str	r2, [r3, #8]
        highBandCoeffs.b0 = 1.0f;
 8001a78:	4b27      	ldr	r3, [pc, #156]	@ (8001b18 <parseAndStoreCoeffs+0x530>)
 8001a7a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a7e:	60da      	str	r2, [r3, #12]
        highBandCoeffs.b1 = -1.2164444497980702f;
 8001a80:	4b25      	ldr	r3, [pc, #148]	@ (8001b18 <parseAndStoreCoeffs+0x530>)
 8001a82:	4a26      	ldr	r2, [pc, #152]	@ (8001b1c <parseAndStoreCoeffs+0x534>)
 8001a84:	611a      	str	r2, [r3, #16]
        highBandCoeffs.b2 = 0.5332946721463616f;
 8001a86:	4b24      	ldr	r3, [pc, #144]	@ (8001b18 <parseAndStoreCoeffs+0x530>)
 8001a88:	4a25      	ldr	r2, [pc, #148]	@ (8001b20 <parseAndStoreCoeffs+0x538>)
 8001a8a:	615a      	str	r2, [r3, #20]
        printf("Coefficients reset!\n");
 8001a8c:	4825      	ldr	r0, [pc, #148]	@ (8001b24 <parseAndStoreCoeffs+0x53c>)
 8001a8e:	f005 f8fb 	bl	8006c88 <puts>
}
 8001a92:	e002      	b.n	8001a9a <parseAndStoreCoeffs+0x4b2>
        printf("Invalid parameter\n");
 8001a94:	4824      	ldr	r0, [pc, #144]	@ (8001b28 <parseAndStoreCoeffs+0x540>)
 8001a96:	f005 f8f7 	bl	8006c88 <puts>
}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aa4:	0800ae64 	.word	0x0800ae64
 8001aa8:	20008484 	.word	0x20008484
 8001aac:	20008480 	.word	0x20008480
 8001ab0:	2000847c 	.word	0x2000847c
 8001ab4:	20008478 	.word	0x20008478
 8001ab8:	20008474 	.word	0x20008474
 8001abc:	20008470 	.word	0x20008470
 8001ac0:	0800ae68 	.word	0x0800ae68
 8001ac4:	0800ae80 	.word	0x0800ae80
 8001ac8:	0800aea0 	.word	0x0800aea0
 8001acc:	20008454 	.word	0x20008454
 8001ad0:	20008450 	.word	0x20008450
 8001ad4:	2000844c 	.word	0x2000844c
 8001ad8:	20008448 	.word	0x20008448
 8001adc:	20008444 	.word	0x20008444
 8001ae0:	20008440 	.word	0x20008440
 8001ae4:	0800aea4 	.word	0x0800aea4
 8001ae8:	0800aebc 	.word	0x0800aebc
 8001aec:	0800aedc 	.word	0x0800aedc
 8001af0:	bfff9498 	.word	0xbfff9498
 8001af4:	3f7f29e2 	.word	0x3f7f29e2
 8001af8:	20008458 	.word	0x20008458
 8001afc:	bffe504a 	.word	0xbffe504a
 8001b00:	3f7cabbd 	.word	0x3f7cabbd
 8001b04:	bff2dd66 	.word	0xbff2dd66
 8001b08:	3f681474 	.word	0x3f681474
 8001b0c:	20008488 	.word	0x20008488
 8001b10:	bfe4c41a 	.word	0xbfe4c41a
 8001b14:	3f527ee0 	.word	0x3f527ee0
 8001b18:	200084a0 	.word	0x200084a0
 8001b1c:	bf9bb474 	.word	0xbf9bb474
 8001b20:	3f088600 	.word	0x3f088600
 8001b24:	0800aee4 	.word	0x0800aee4
 8001b28:	0800aef8 	.word	0x0800aef8

08001b2c <applyNewCoeffs>:

void applyNewCoeffs(char *band) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
    // Apply the new coefficients to the IIR filter
    if (strncmp(band, "LowMid", 6) == 0) {
 8001b34:	2206      	movs	r2, #6
 8001b36:	497d      	ldr	r1, [pc, #500]	@ (8001d2c <applyNewCoeffs+0x200>)
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f005 f9d9 	bl	8006ef0 <strncmp>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d128      	bne.n	8001b96 <applyNewCoeffs+0x6a>
        iir_coeffs_lowmid[0] = midLowCoeffs.a0;
 8001b44:	4b7a      	ldr	r3, [pc, #488]	@ (8001d30 <applyNewCoeffs+0x204>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a7a      	ldr	r2, [pc, #488]	@ (8001d34 <applyNewCoeffs+0x208>)
 8001b4a:	6013      	str	r3, [r2, #0]
        iir_coeffs_lowmid[1] = midLowCoeffs.a1;
 8001b4c:	4b78      	ldr	r3, [pc, #480]	@ (8001d30 <applyNewCoeffs+0x204>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	4a78      	ldr	r2, [pc, #480]	@ (8001d34 <applyNewCoeffs+0x208>)
 8001b52:	6053      	str	r3, [r2, #4]
        iir_coeffs_lowmid[2] = midLowCoeffs.a2;
 8001b54:	4b76      	ldr	r3, [pc, #472]	@ (8001d30 <applyNewCoeffs+0x204>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4a76      	ldr	r2, [pc, #472]	@ (8001d34 <applyNewCoeffs+0x208>)
 8001b5a:	6093      	str	r3, [r2, #8]
        iir_coeffs_lowmid[3] = -midLowCoeffs.b1;
 8001b5c:	4b74      	ldr	r3, [pc, #464]	@ (8001d30 <applyNewCoeffs+0x204>)
 8001b5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b62:	eef1 7a67 	vneg.f32	s15, s15
 8001b66:	4b73      	ldr	r3, [pc, #460]	@ (8001d34 <applyNewCoeffs+0x208>)
 8001b68:	edc3 7a03 	vstr	s15, [r3, #12]
        iir_coeffs_lowmid[4] = -midLowCoeffs.b2;
 8001b6c:	4b70      	ldr	r3, [pc, #448]	@ (8001d30 <applyNewCoeffs+0x204>)
 8001b6e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b72:	eef1 7a67 	vneg.f32	s15, s15
 8001b76:	4b6f      	ldr	r3, [pc, #444]	@ (8001d34 <applyNewCoeffs+0x208>)
 8001b78:	edc3 7a04 	vstr	s15, [r3, #16]
        arm_biquad_cascade_df1_init_f32(&iirsettings_l, 1, &iir_coeffs_lowmid[0], &iir_l_state[0]);
 8001b7c:	4b6e      	ldr	r3, [pc, #440]	@ (8001d38 <applyNewCoeffs+0x20c>)
 8001b7e:	4a6d      	ldr	r2, [pc, #436]	@ (8001d34 <applyNewCoeffs+0x208>)
 8001b80:	2101      	movs	r1, #1
 8001b82:	486e      	ldr	r0, [pc, #440]	@ (8001d3c <applyNewCoeffs+0x210>)
 8001b84:	f004 f80e 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
        arm_biquad_cascade_df1_init_f32(&iirsettings_r, 1, &iir_coeffs_lowmid[0], &iir_r_state[0]);
 8001b88:	4b6d      	ldr	r3, [pc, #436]	@ (8001d40 <applyNewCoeffs+0x214>)
 8001b8a:	4a6a      	ldr	r2, [pc, #424]	@ (8001d34 <applyNewCoeffs+0x208>)
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	486d      	ldr	r0, [pc, #436]	@ (8001d44 <applyNewCoeffs+0x218>)
 8001b90:	f004 f808 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
        arm_biquad_cascade_df1_init_f32(&iirsettings_l, 1, &iir_coeffs_low[0], &iir_l_state[0]);
        arm_biquad_cascade_df1_init_f32(&iirsettings_r, 1, &iir_coeffs_low[0], &iir_r_state[0]);
    } else {
        printf("Invalid band\n");
    }
}
 8001b94:	e0c6      	b.n	8001d24 <applyNewCoeffs+0x1f8>
    } else if (strncmp(band, "HighMid", 7) == 0) {
 8001b96:	2207      	movs	r2, #7
 8001b98:	496b      	ldr	r1, [pc, #428]	@ (8001d48 <applyNewCoeffs+0x21c>)
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f005 f9a8 	bl	8006ef0 <strncmp>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d128      	bne.n	8001bf8 <applyNewCoeffs+0xcc>
        iir_coeffs_highmid[0] = midHighCoeffs.a0;
 8001ba6:	4b69      	ldr	r3, [pc, #420]	@ (8001d4c <applyNewCoeffs+0x220>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a69      	ldr	r2, [pc, #420]	@ (8001d50 <applyNewCoeffs+0x224>)
 8001bac:	6013      	str	r3, [r2, #0]
        iir_coeffs_highmid[1] = midHighCoeffs.a1;
 8001bae:	4b67      	ldr	r3, [pc, #412]	@ (8001d4c <applyNewCoeffs+0x220>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4a67      	ldr	r2, [pc, #412]	@ (8001d50 <applyNewCoeffs+0x224>)
 8001bb4:	6053      	str	r3, [r2, #4]
        iir_coeffs_highmid[2] = midHighCoeffs.a2;
 8001bb6:	4b65      	ldr	r3, [pc, #404]	@ (8001d4c <applyNewCoeffs+0x220>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	4a65      	ldr	r2, [pc, #404]	@ (8001d50 <applyNewCoeffs+0x224>)
 8001bbc:	6093      	str	r3, [r2, #8]
        iir_coeffs_highmid[3] = -midHighCoeffs.b1;
 8001bbe:	4b63      	ldr	r3, [pc, #396]	@ (8001d4c <applyNewCoeffs+0x220>)
 8001bc0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bc4:	eef1 7a67 	vneg.f32	s15, s15
 8001bc8:	4b61      	ldr	r3, [pc, #388]	@ (8001d50 <applyNewCoeffs+0x224>)
 8001bca:	edc3 7a03 	vstr	s15, [r3, #12]
        iir_coeffs_highmid[4] = -midHighCoeffs.b2;
 8001bce:	4b5f      	ldr	r3, [pc, #380]	@ (8001d4c <applyNewCoeffs+0x220>)
 8001bd0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bd4:	eef1 7a67 	vneg.f32	s15, s15
 8001bd8:	4b5d      	ldr	r3, [pc, #372]	@ (8001d50 <applyNewCoeffs+0x224>)
 8001bda:	edc3 7a04 	vstr	s15, [r3, #16]
        arm_biquad_cascade_df1_init_f32(&iirsettings_l, 1, &iir_coeffs_highmid[0], &iir_l_state[0]);
 8001bde:	4b56      	ldr	r3, [pc, #344]	@ (8001d38 <applyNewCoeffs+0x20c>)
 8001be0:	4a5b      	ldr	r2, [pc, #364]	@ (8001d50 <applyNewCoeffs+0x224>)
 8001be2:	2101      	movs	r1, #1
 8001be4:	4855      	ldr	r0, [pc, #340]	@ (8001d3c <applyNewCoeffs+0x210>)
 8001be6:	f003 ffdd 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
        arm_biquad_cascade_df1_init_f32(&iirsettings_r, 1, &iir_coeffs_highmid[0], &iir_r_state[0]);
 8001bea:	4b55      	ldr	r3, [pc, #340]	@ (8001d40 <applyNewCoeffs+0x214>)
 8001bec:	4a58      	ldr	r2, [pc, #352]	@ (8001d50 <applyNewCoeffs+0x224>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	4854      	ldr	r0, [pc, #336]	@ (8001d44 <applyNewCoeffs+0x218>)
 8001bf2:	f003 ffd7 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
}
 8001bf6:	e095      	b.n	8001d24 <applyNewCoeffs+0x1f8>
    } else if (strncmp(band, "High", 4) == 0) {
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	4956      	ldr	r1, [pc, #344]	@ (8001d54 <applyNewCoeffs+0x228>)
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f005 f977 	bl	8006ef0 <strncmp>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d128      	bne.n	8001c5a <applyNewCoeffs+0x12e>
        iir_coeffs_high[0] = highBandCoeffs.a0;
 8001c08:	4b53      	ldr	r3, [pc, #332]	@ (8001d58 <applyNewCoeffs+0x22c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a53      	ldr	r2, [pc, #332]	@ (8001d5c <applyNewCoeffs+0x230>)
 8001c0e:	6013      	str	r3, [r2, #0]
        iir_coeffs_high[1] = highBandCoeffs.a1;
 8001c10:	4b51      	ldr	r3, [pc, #324]	@ (8001d58 <applyNewCoeffs+0x22c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4a51      	ldr	r2, [pc, #324]	@ (8001d5c <applyNewCoeffs+0x230>)
 8001c16:	6053      	str	r3, [r2, #4]
        iir_coeffs_high[2] = highBandCoeffs.a2;
 8001c18:	4b4f      	ldr	r3, [pc, #316]	@ (8001d58 <applyNewCoeffs+0x22c>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d5c <applyNewCoeffs+0x230>)
 8001c1e:	6093      	str	r3, [r2, #8]
        iir_coeffs_high[3] = -highBandCoeffs.b1;
 8001c20:	4b4d      	ldr	r3, [pc, #308]	@ (8001d58 <applyNewCoeffs+0x22c>)
 8001c22:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c26:	eef1 7a67 	vneg.f32	s15, s15
 8001c2a:	4b4c      	ldr	r3, [pc, #304]	@ (8001d5c <applyNewCoeffs+0x230>)
 8001c2c:	edc3 7a03 	vstr	s15, [r3, #12]
        iir_coeffs_high[4] = -highBandCoeffs.b2;
 8001c30:	4b49      	ldr	r3, [pc, #292]	@ (8001d58 <applyNewCoeffs+0x22c>)
 8001c32:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c36:	eef1 7a67 	vneg.f32	s15, s15
 8001c3a:	4b48      	ldr	r3, [pc, #288]	@ (8001d5c <applyNewCoeffs+0x230>)
 8001c3c:	edc3 7a04 	vstr	s15, [r3, #16]
        arm_biquad_cascade_df1_init_f32(&iirsettings_l, 1, &iir_coeffs_high[0], &iir_l_state[0]);
 8001c40:	4b3d      	ldr	r3, [pc, #244]	@ (8001d38 <applyNewCoeffs+0x20c>)
 8001c42:	4a46      	ldr	r2, [pc, #280]	@ (8001d5c <applyNewCoeffs+0x230>)
 8001c44:	2101      	movs	r1, #1
 8001c46:	483d      	ldr	r0, [pc, #244]	@ (8001d3c <applyNewCoeffs+0x210>)
 8001c48:	f003 ffac 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
        arm_biquad_cascade_df1_init_f32(&iirsettings_r, 1, &iir_coeffs_high[0], &iir_r_state[0]);
 8001c4c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d40 <applyNewCoeffs+0x214>)
 8001c4e:	4a43      	ldr	r2, [pc, #268]	@ (8001d5c <applyNewCoeffs+0x230>)
 8001c50:	2101      	movs	r1, #1
 8001c52:	483c      	ldr	r0, [pc, #240]	@ (8001d44 <applyNewCoeffs+0x218>)
 8001c54:	f003 ffa6 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
}
 8001c58:	e064      	b.n	8001d24 <applyNewCoeffs+0x1f8>
    } else if (strncmp(band, "Mid", 3) == 0) {
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	4940      	ldr	r1, [pc, #256]	@ (8001d60 <applyNewCoeffs+0x234>)
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f005 f946 	bl	8006ef0 <strncmp>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d128      	bne.n	8001cbc <applyNewCoeffs+0x190>
        iir_coeffs_mid[0] = midBandCoeffs.a0;
 8001c6a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d64 <applyNewCoeffs+0x238>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d68 <applyNewCoeffs+0x23c>)
 8001c70:	6013      	str	r3, [r2, #0]
        iir_coeffs_mid[1] = midBandCoeffs.a1;
 8001c72:	4b3c      	ldr	r3, [pc, #240]	@ (8001d64 <applyNewCoeffs+0x238>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4a3c      	ldr	r2, [pc, #240]	@ (8001d68 <applyNewCoeffs+0x23c>)
 8001c78:	6053      	str	r3, [r2, #4]
        iir_coeffs_mid[2] = midBandCoeffs.a2;
 8001c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d64 <applyNewCoeffs+0x238>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	4a3a      	ldr	r2, [pc, #232]	@ (8001d68 <applyNewCoeffs+0x23c>)
 8001c80:	6093      	str	r3, [r2, #8]
        iir_coeffs_mid[3] = -midBandCoeffs.b1;
 8001c82:	4b38      	ldr	r3, [pc, #224]	@ (8001d64 <applyNewCoeffs+0x238>)
 8001c84:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c88:	eef1 7a67 	vneg.f32	s15, s15
 8001c8c:	4b36      	ldr	r3, [pc, #216]	@ (8001d68 <applyNewCoeffs+0x23c>)
 8001c8e:	edc3 7a03 	vstr	s15, [r3, #12]
        iir_coeffs_mid[4] = -midBandCoeffs.b2;
 8001c92:	4b34      	ldr	r3, [pc, #208]	@ (8001d64 <applyNewCoeffs+0x238>)
 8001c94:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c98:	eef1 7a67 	vneg.f32	s15, s15
 8001c9c:	4b32      	ldr	r3, [pc, #200]	@ (8001d68 <applyNewCoeffs+0x23c>)
 8001c9e:	edc3 7a04 	vstr	s15, [r3, #16]
        arm_biquad_cascade_df1_init_f32(&iirsettings_l, 1, &iir_coeffs_mid[0], &iir_l_state[0]);
 8001ca2:	4b25      	ldr	r3, [pc, #148]	@ (8001d38 <applyNewCoeffs+0x20c>)
 8001ca4:	4a30      	ldr	r2, [pc, #192]	@ (8001d68 <applyNewCoeffs+0x23c>)
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4824      	ldr	r0, [pc, #144]	@ (8001d3c <applyNewCoeffs+0x210>)
 8001caa:	f003 ff7b 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
        arm_biquad_cascade_df1_init_f32(&iirsettings_r, 1, &iir_coeffs_mid[0], &iir_r_state[0]);
 8001cae:	4b24      	ldr	r3, [pc, #144]	@ (8001d40 <applyNewCoeffs+0x214>)
 8001cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8001d68 <applyNewCoeffs+0x23c>)
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	4823      	ldr	r0, [pc, #140]	@ (8001d44 <applyNewCoeffs+0x218>)
 8001cb6:	f003 ff75 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
}
 8001cba:	e033      	b.n	8001d24 <applyNewCoeffs+0x1f8>
    } else if (strncmp(band, "Low", 3) == 0) {
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	492b      	ldr	r1, [pc, #172]	@ (8001d6c <applyNewCoeffs+0x240>)
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f005 f915 	bl	8006ef0 <strncmp>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d128      	bne.n	8001d1e <applyNewCoeffs+0x1f2>
        iir_coeffs_low[0] = lowBandCoeffs.a0;
 8001ccc:	4b28      	ldr	r3, [pc, #160]	@ (8001d70 <applyNewCoeffs+0x244>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a28      	ldr	r2, [pc, #160]	@ (8001d74 <applyNewCoeffs+0x248>)
 8001cd2:	6013      	str	r3, [r2, #0]
        iir_coeffs_low[1] = lowBandCoeffs.a1;
 8001cd4:	4b26      	ldr	r3, [pc, #152]	@ (8001d70 <applyNewCoeffs+0x244>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4a26      	ldr	r2, [pc, #152]	@ (8001d74 <applyNewCoeffs+0x248>)
 8001cda:	6053      	str	r3, [r2, #4]
        iir_coeffs_low[2] = lowBandCoeffs.a2;
 8001cdc:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <applyNewCoeffs+0x244>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	4a24      	ldr	r2, [pc, #144]	@ (8001d74 <applyNewCoeffs+0x248>)
 8001ce2:	6093      	str	r3, [r2, #8]
        iir_coeffs_low[3] = -lowBandCoeffs.b1;
 8001ce4:	4b22      	ldr	r3, [pc, #136]	@ (8001d70 <applyNewCoeffs+0x244>)
 8001ce6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cea:	eef1 7a67 	vneg.f32	s15, s15
 8001cee:	4b21      	ldr	r3, [pc, #132]	@ (8001d74 <applyNewCoeffs+0x248>)
 8001cf0:	edc3 7a03 	vstr	s15, [r3, #12]
        iir_coeffs_low[4] = -lowBandCoeffs.b2;
 8001cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d70 <applyNewCoeffs+0x244>)
 8001cf6:	edd3 7a05 	vldr	s15, [r3, #20]
 8001cfa:	eef1 7a67 	vneg.f32	s15, s15
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001d74 <applyNewCoeffs+0x248>)
 8001d00:	edc3 7a04 	vstr	s15, [r3, #16]
        arm_biquad_cascade_df1_init_f32(&iirsettings_l, 1, &iir_coeffs_low[0], &iir_l_state[0]);
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <applyNewCoeffs+0x20c>)
 8001d06:	4a1b      	ldr	r2, [pc, #108]	@ (8001d74 <applyNewCoeffs+0x248>)
 8001d08:	2101      	movs	r1, #1
 8001d0a:	480c      	ldr	r0, [pc, #48]	@ (8001d3c <applyNewCoeffs+0x210>)
 8001d0c:	f003 ff4a 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
        arm_biquad_cascade_df1_init_f32(&iirsettings_r, 1, &iir_coeffs_low[0], &iir_r_state[0]);
 8001d10:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <applyNewCoeffs+0x214>)
 8001d12:	4a18      	ldr	r2, [pc, #96]	@ (8001d74 <applyNewCoeffs+0x248>)
 8001d14:	2101      	movs	r1, #1
 8001d16:	480b      	ldr	r0, [pc, #44]	@ (8001d44 <applyNewCoeffs+0x218>)
 8001d18:	f003 ff44 	bl	8005ba4 <arm_biquad_cascade_df1_init_f32>
}
 8001d1c:	e002      	b.n	8001d24 <applyNewCoeffs+0x1f8>
        printf("Invalid band\n");
 8001d1e:	4816      	ldr	r0, [pc, #88]	@ (8001d78 <applyNewCoeffs+0x24c>)
 8001d20:	f004 ffb2 	bl	8006c88 <puts>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	0800ad94 	.word	0x0800ad94
 8001d30:	20008458 	.word	0x20008458
 8001d34:	20000028 	.word	0x20000028
 8001d38:	2000041c 	.word	0x2000041c
 8001d3c:	200003b8 	.word	0x200003b8
 8001d40:	2000042c 	.word	0x2000042c
 8001d44:	200003c4 	.word	0x200003c4
 8001d48:	0800addc 	.word	0x0800addc
 8001d4c:	20008488 	.word	0x20008488
 8001d50:	20000050 	.word	0x20000050
 8001d54:	0800ae24 	.word	0x0800ae24
 8001d58:	200084a0 	.word	0x200084a0
 8001d5c:	20000064 	.word	0x20000064
 8001d60:	0800ae64 	.word	0x0800ae64
 8001d64:	20008470 	.word	0x20008470
 8001d68:	2000003c 	.word	0x2000003c
 8001d6c:	0800aea0 	.word	0x0800aea0
 8001d70:	20008440 	.word	0x20008440
 8001d74:	20000014 	.word	0x20000014
 8001d78:	0800af0c 	.word	0x0800af0c

08001d7c <HAL_I2SEx_TxRxHalfCpltCallback>:

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  callback_state = 1;
 8001d84:	4b04      	ldr	r3, [pc, #16]	@ (8001d98 <HAL_I2SEx_TxRxHalfCpltCallback+0x1c>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	2000843c 	.word	0x2000843c

08001d9c <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  callback_state = 2;
 8001da4:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <HAL_I2SEx_TxRxCpltCallback+0x1c>)
 8001da6:	2202      	movs	r2, #2
 8001da8:	701a      	strb	r2, [r3, #0]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	2000843c 	.word	0x2000843c

08001dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc0:	b672      	cpsid	i
}
 8001dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc4:	bf00      	nop
 8001dc6:	e7fd      	b.n	8001dc4 <Error_Handler+0x8>

08001dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <HAL_MspInit+0x4c>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd6:	4a0f      	ldr	r2, [pc, #60]	@ (8001e14 <HAL_MspInit+0x4c>)
 8001dd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dde:	4b0d      	ldr	r3, [pc, #52]	@ (8001e14 <HAL_MspInit+0x4c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <HAL_MspInit+0x4c>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	4a08      	ldr	r2, [pc, #32]	@ (8001e14 <HAL_MspInit+0x4c>)
 8001df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_MspInit+0x4c>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800

08001e18 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08e      	sub	sp, #56	@ 0x38
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a6b      	ldr	r2, [pc, #428]	@ (8001ff0 <HAL_I2S_MspInit+0x1d8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	f040 80cf 	bne.w	8001fe8 <HAL_I2S_MspInit+0x1d0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001e4e:	23c0      	movs	r3, #192	@ 0xc0
 8001e50:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001e52:	2302      	movs	r3, #2
 8001e54:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f002 fd0a 	bl	8004874 <HAL_RCCEx_PeriphCLKConfig>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001e66:	f7ff ffa9 	bl	8001dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	4b61      	ldr	r3, [pc, #388]	@ (8001ff4 <HAL_I2S_MspInit+0x1dc>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	4a60      	ldr	r2, [pc, #384]	@ (8001ff4 <HAL_I2S_MspInit+0x1dc>)
 8001e74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7a:	4b5e      	ldr	r3, [pc, #376]	@ (8001ff4 <HAL_I2S_MspInit+0x1dc>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ff4 <HAL_I2S_MspInit+0x1dc>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	4a59      	ldr	r2, [pc, #356]	@ (8001ff4 <HAL_I2S_MspInit+0x1dc>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e96:	4b57      	ldr	r3, [pc, #348]	@ (8001ff4 <HAL_I2S_MspInit+0x1dc>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	4b53      	ldr	r3, [pc, #332]	@ (8001ff4 <HAL_I2S_MspInit+0x1dc>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a52      	ldr	r2, [pc, #328]	@ (8001ff4 <HAL_I2S_MspInit+0x1dc>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b50      	ldr	r3, [pc, #320]	@ (8001ff4 <HAL_I2S_MspInit+0x1dc>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001ebe:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ed0:	2305      	movs	r3, #5
 8001ed2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4847      	ldr	r0, [pc, #284]	@ (8001ff8 <HAL_I2S_MspInit+0x1e0>)
 8001edc:	f000 ffa2 	bl	8002e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001ee0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001ef2:	2306      	movs	r3, #6
 8001ef4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001efa:	4619      	mov	r1, r3
 8001efc:	483e      	ldr	r0, [pc, #248]	@ (8001ff8 <HAL_I2S_MspInit+0x1e0>)
 8001efe:	f000 ff91 	bl	8002e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f02:	2340      	movs	r3, #64	@ 0x40
 8001f04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f12:	2305      	movs	r3, #5
 8001f14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4837      	ldr	r0, [pc, #220]	@ (8001ffc <HAL_I2S_MspInit+0x1e4>)
 8001f1e:	f000 ff81 	bl	8002e24 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8001f22:	4b37      	ldr	r3, [pc, #220]	@ (8002000 <HAL_I2S_MspInit+0x1e8>)
 8001f24:	4a37      	ldr	r2, [pc, #220]	@ (8002004 <HAL_I2S_MspInit+0x1ec>)
 8001f26:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001f28:	4b35      	ldr	r3, [pc, #212]	@ (8002000 <HAL_I2S_MspInit+0x1e8>)
 8001f2a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001f2e:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f30:	4b33      	ldr	r3, [pc, #204]	@ (8002000 <HAL_I2S_MspInit+0x1e8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f36:	4b32      	ldr	r3, [pc, #200]	@ (8002000 <HAL_I2S_MspInit+0x1e8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f3c:	4b30      	ldr	r3, [pc, #192]	@ (8002000 <HAL_I2S_MspInit+0x1e8>)
 8001f3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f42:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f44:	4b2e      	ldr	r3, [pc, #184]	@ (8002000 <HAL_I2S_MspInit+0x1e8>)
 8001f46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f4a:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002000 <HAL_I2S_MspInit+0x1e8>)
 8001f4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f52:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001f54:	4b2a      	ldr	r3, [pc, #168]	@ (8002000 <HAL_I2S_MspInit+0x1e8>)
 8001f56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f5a:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001f5c:	4b28      	ldr	r3, [pc, #160]	@ (8002000 <HAL_I2S_MspInit+0x1e8>)
 8001f5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f62:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f64:	4b26      	ldr	r3, [pc, #152]	@ (8002000 <HAL_I2S_MspInit+0x1e8>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8001f6a:	4825      	ldr	r0, [pc, #148]	@ (8002000 <HAL_I2S_MspInit+0x1e8>)
 8001f6c:	f000 fb58 	bl	8002620 <HAL_DMA_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 8001f76:	f7ff ff21 	bl	8001dbc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a20      	ldr	r2, [pc, #128]	@ (8002000 <HAL_I2S_MspInit+0x1e8>)
 8001f7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f80:	4a1f      	ldr	r2, [pc, #124]	@ (8002000 <HAL_I2S_MspInit+0x1e8>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001f86:	4b20      	ldr	r3, [pc, #128]	@ (8002008 <HAL_I2S_MspInit+0x1f0>)
 8001f88:	4a20      	ldr	r2, [pc, #128]	@ (800200c <HAL_I2S_MspInit+0x1f4>)
 8001f8a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002008 <HAL_I2S_MspInit+0x1f0>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f92:	4b1d      	ldr	r3, [pc, #116]	@ (8002008 <HAL_I2S_MspInit+0x1f0>)
 8001f94:	2240      	movs	r2, #64	@ 0x40
 8001f96:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	@ (8002008 <HAL_I2S_MspInit+0x1f0>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <HAL_I2S_MspInit+0x1f0>)
 8001fa0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fa4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fa6:	4b18      	ldr	r3, [pc, #96]	@ (8002008 <HAL_I2S_MspInit+0x1f0>)
 8001fa8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001fac:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fae:	4b16      	ldr	r3, [pc, #88]	@ (8002008 <HAL_I2S_MspInit+0x1f0>)
 8001fb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fb4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001fb6:	4b14      	ldr	r3, [pc, #80]	@ (8002008 <HAL_I2S_MspInit+0x1f0>)
 8001fb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fbc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001fbe:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <HAL_I2S_MspInit+0x1f0>)
 8001fc0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fc4:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fc6:	4b10      	ldr	r3, [pc, #64]	@ (8002008 <HAL_I2S_MspInit+0x1f0>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001fcc:	480e      	ldr	r0, [pc, #56]	@ (8002008 <HAL_I2S_MspInit+0x1f0>)
 8001fce:	f000 fb27 	bl	8002620 <HAL_DMA_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 8001fd8:	f7ff fef0 	bl	8001dbc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <HAL_I2S_MspInit+0x1f0>)
 8001fe0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fe2:	4a09      	ldr	r2, [pc, #36]	@ (8002008 <HAL_I2S_MspInit+0x1f0>)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001fe8:	bf00      	nop
 8001fea:	3738      	adds	r7, #56	@ 0x38
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40003800 	.word	0x40003800
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	40020800 	.word	0x40020800
 8002000:	200002b0 	.word	0x200002b0
 8002004:	40026058 	.word	0x40026058
 8002008:	20000310 	.word	0x20000310
 800200c:	40026070 	.word	0x40026070

08002010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	@ 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a1d      	ldr	r2, [pc, #116]	@ (80020a4 <HAL_UART_MspInit+0x94>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d134      	bne.n	800209c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	4b1c      	ldr	r3, [pc, #112]	@ (80020a8 <HAL_UART_MspInit+0x98>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203a:	4a1b      	ldr	r2, [pc, #108]	@ (80020a8 <HAL_UART_MspInit+0x98>)
 800203c:	f043 0310 	orr.w	r3, r3, #16
 8002040:	6453      	str	r3, [r2, #68]	@ 0x44
 8002042:	4b19      	ldr	r3, [pc, #100]	@ (80020a8 <HAL_UART_MspInit+0x98>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <HAL_UART_MspInit+0x98>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	4a14      	ldr	r2, [pc, #80]	@ (80020a8 <HAL_UART_MspInit+0x98>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6313      	str	r3, [r2, #48]	@ 0x30
 800205e:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <HAL_UART_MspInit+0x98>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800206a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800206e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002078:	2303      	movs	r3, #3
 800207a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800207c:	2307      	movs	r3, #7
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	4619      	mov	r1, r3
 8002086:	4809      	ldr	r0, [pc, #36]	@ (80020ac <HAL_UART_MspInit+0x9c>)
 8002088:	f000 fecc 	bl	8002e24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800208c:	2200      	movs	r2, #0
 800208e:	2100      	movs	r1, #0
 8002090:	2025      	movs	r0, #37	@ 0x25
 8002092:	f000 fa8e 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002096:	2025      	movs	r0, #37	@ 0x25
 8002098:	f000 faa7 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800209c:	bf00      	nop
 800209e:	3728      	adds	r7, #40	@ 0x28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40011000 	.word	0x40011000
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40020000 	.word	0x40020000

080020b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <NMI_Handler+0x4>

080020b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <HardFault_Handler+0x4>

080020c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <MemManage_Handler+0x4>

080020c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <BusFault_Handler+0x4>

080020d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <UsageFault_Handler+0x4>

080020d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002106:	f000 f959 	bl	80023bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8002114:	4802      	ldr	r0, [pc, #8]	@ (8002120 <DMA1_Stream3_IRQHandler+0x10>)
 8002116:	f000 fc1b 	bl	8002950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200002b0 	.word	0x200002b0

08002124 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002128:	4802      	ldr	r0, [pc, #8]	@ (8002134 <DMA1_Stream4_IRQHandler+0x10>)
 800212a:	f000 fc11 	bl	8002950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000310 	.word	0x20000310

08002138 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800213c:	4802      	ldr	r0, [pc, #8]	@ (8002148 <USART1_IRQHandler+0x10>)
 800213e:	f002 fddb 	bl	8004cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000370 	.word	0x20000370

0800214c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return 1;
 8002150:	2301      	movs	r3, #1
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <_kill>:

int _kill(int pid, int sig)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002166:	f004 ff1f 	bl	8006fa8 <__errno>
 800216a:	4603      	mov	r3, r0
 800216c:	2216      	movs	r2, #22
 800216e:	601a      	str	r2, [r3, #0]
  return -1;
 8002170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <_exit>:

void _exit (int status)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff ffe7 	bl	800215c <_kill>
  while (1) {}    /* Make sure we hang here */
 800218e:	bf00      	nop
 8002190:	e7fd      	b.n	800218e <_exit+0x12>

08002192 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	e00a      	b.n	80021ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021a4:	f3af 8000 	nop.w
 80021a8:	4601      	mov	r1, r0
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	60ba      	str	r2, [r7, #8]
 80021b0:	b2ca      	uxtb	r2, r1
 80021b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	3301      	adds	r3, #1
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	429a      	cmp	r2, r3
 80021c0:	dbf0      	blt.n	80021a4 <_read+0x12>
  }

  return len;
 80021c2:	687b      	ldr	r3, [r7, #4]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_close>:
  }
  return len;
}

int _close(int file)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021f4:	605a      	str	r2, [r3, #4]
  return 0;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <_isatty>:

int _isatty(int file)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800220c:	2301      	movs	r3, #1
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800223c:	4a14      	ldr	r2, [pc, #80]	@ (8002290 <_sbrk+0x5c>)
 800223e:	4b15      	ldr	r3, [pc, #84]	@ (8002294 <_sbrk+0x60>)
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002248:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <_sbrk+0x64>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002250:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <_sbrk+0x64>)
 8002252:	4a12      	ldr	r2, [pc, #72]	@ (800229c <_sbrk+0x68>)
 8002254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002256:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <_sbrk+0x64>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	429a      	cmp	r2, r3
 8002262:	d207      	bcs.n	8002274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002264:	f004 fea0 	bl	8006fa8 <__errno>
 8002268:	4603      	mov	r3, r0
 800226a:	220c      	movs	r2, #12
 800226c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800226e:	f04f 33ff 	mov.w	r3, #4294967295
 8002272:	e009      	b.n	8002288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002274:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <_sbrk+0x64>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800227a:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	4a05      	ldr	r2, [pc, #20]	@ (8002298 <_sbrk+0x64>)
 8002284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002286:	68fb      	ldr	r3, [r7, #12]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20020000 	.word	0x20020000
 8002294:	00000400 	.word	0x00000400
 8002298:	200084b8 	.word	0x200084b8
 800229c:	20008610 	.word	0x20008610

080022a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a4:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <SystemInit+0x20>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022aa:	4a05      	ldr	r2, [pc, #20]	@ (80022c0 <SystemInit+0x20>)
 80022ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022c8:	f7ff ffea 	bl	80022a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022cc:	480c      	ldr	r0, [pc, #48]	@ (8002300 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022ce:	490d      	ldr	r1, [pc, #52]	@ (8002304 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002308 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d4:	e002      	b.n	80022dc <LoopCopyDataInit>

080022d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022da:	3304      	adds	r3, #4

080022dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e0:	d3f9      	bcc.n	80022d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e2:	4a0a      	ldr	r2, [pc, #40]	@ (800230c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002310 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e8:	e001      	b.n	80022ee <LoopFillZerobss>

080022ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022ec:	3204      	adds	r2, #4

080022ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f0:	d3fb      	bcc.n	80022ea <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80022f2:	f004 fe5f 	bl	8006fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022f6:	f7fe fe9d 	bl	8001034 <main>
  bx  lr    
 80022fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002304:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8002308:	0800b3a4 	.word	0x0800b3a4
  ldr r2, =_sbss
 800230c:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8002310:	2000860c 	.word	0x2000860c

08002314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002314:	e7fe      	b.n	8002314 <ADC_IRQHandler>
	...

08002318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800231c:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <HAL_Init+0x40>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0d      	ldr	r2, [pc, #52]	@ (8002358 <HAL_Init+0x40>)
 8002322:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002326:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002328:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <HAL_Init+0x40>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <HAL_Init+0x40>)
 800232e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002332:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002334:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <HAL_Init+0x40>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a07      	ldr	r2, [pc, #28]	@ (8002358 <HAL_Init+0x40>)
 800233a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800233e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002340:	2003      	movs	r0, #3
 8002342:	f000 f92b 	bl	800259c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002346:	200f      	movs	r0, #15
 8002348:	f000 f808 	bl	800235c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800234c:	f7ff fd3c 	bl	8001dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023c00 	.word	0x40023c00

0800235c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002364:	4b12      	ldr	r3, [pc, #72]	@ (80023b0 <HAL_InitTick+0x54>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <HAL_InitTick+0x58>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	4619      	mov	r1, r3
 800236e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002372:	fbb3 f3f1 	udiv	r3, r3, r1
 8002376:	fbb2 f3f3 	udiv	r3, r2, r3
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f943 	bl	8002606 <HAL_SYSTICK_Config>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e00e      	b.n	80023a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b0f      	cmp	r3, #15
 800238e:	d80a      	bhi.n	80023a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002390:	2200      	movs	r2, #0
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	f04f 30ff 	mov.w	r0, #4294967295
 8002398:	f000 f90b 	bl	80025b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800239c:	4a06      	ldr	r2, [pc, #24]	@ (80023b8 <HAL_InitTick+0x5c>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e000      	b.n	80023a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000078 	.word	0x20000078
 80023b4:	20000080 	.word	0x20000080
 80023b8:	2000007c 	.word	0x2000007c

080023bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c0:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <HAL_IncTick+0x20>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <HAL_IncTick+0x24>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	4a04      	ldr	r2, [pc, #16]	@ (80023e0 <HAL_IncTick+0x24>)
 80023ce:	6013      	str	r3, [r2, #0]
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000080 	.word	0x20000080
 80023e0:	200084bc 	.word	0x200084bc

080023e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return uwTick;
 80023e8:	4b03      	ldr	r3, [pc, #12]	@ (80023f8 <HAL_GetTick+0x14>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	200084bc 	.word	0x200084bc

080023fc <__NVIC_SetPriorityGrouping>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800240c:	4b0c      	ldr	r3, [pc, #48]	@ (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002418:	4013      	ands	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002424:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800242c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242e:	4a04      	ldr	r2, [pc, #16]	@ (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	60d3      	str	r3, [r2, #12]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <__NVIC_GetPriorityGrouping>:
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002448:	4b04      	ldr	r3, [pc, #16]	@ (800245c <__NVIC_GetPriorityGrouping+0x18>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	f003 0307 	and.w	r3, r3, #7
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <__NVIC_EnableIRQ>:
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	2b00      	cmp	r3, #0
 8002470:	db0b      	blt.n	800248a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	f003 021f 	and.w	r2, r3, #31
 8002478:	4907      	ldr	r1, [pc, #28]	@ (8002498 <__NVIC_EnableIRQ+0x38>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	2001      	movs	r0, #1
 8002482:	fa00 f202 	lsl.w	r2, r0, r2
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000e100 	.word	0xe000e100

0800249c <__NVIC_SetPriority>:
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	db0a      	blt.n	80024c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	490c      	ldr	r1, [pc, #48]	@ (80024e8 <__NVIC_SetPriority+0x4c>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	440b      	add	r3, r1
 80024c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80024c4:	e00a      	b.n	80024dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4908      	ldr	r1, [pc, #32]	@ (80024ec <__NVIC_SetPriority+0x50>)
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	3b04      	subs	r3, #4
 80024d4:	0112      	lsls	r2, r2, #4
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	440b      	add	r3, r1
 80024da:	761a      	strb	r2, [r3, #24]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000e100 	.word	0xe000e100
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <NVIC_EncodePriority>:
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	@ 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f1c3 0307 	rsb	r3, r3, #7
 800250a:	2b04      	cmp	r3, #4
 800250c:	bf28      	it	cs
 800250e:	2304      	movcs	r3, #4
 8002510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3304      	adds	r3, #4
 8002516:	2b06      	cmp	r3, #6
 8002518:	d902      	bls.n	8002520 <NVIC_EncodePriority+0x30>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3b03      	subs	r3, #3
 800251e:	e000      	b.n	8002522 <NVIC_EncodePriority+0x32>
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	f04f 32ff 	mov.w	r2, #4294967295
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	401a      	ands	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002538:	f04f 31ff 	mov.w	r1, #4294967295
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	43d9      	mvns	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	4313      	orrs	r3, r2
}
 800254a:	4618      	mov	r0, r3
 800254c:	3724      	adds	r7, #36	@ 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <SysTick_Config>:
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002568:	d301      	bcc.n	800256e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800256a:	2301      	movs	r3, #1
 800256c:	e00f      	b.n	800258e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256e:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <SysTick_Config+0x40>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002576:	210f      	movs	r1, #15
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	f7ff ff8e 	bl	800249c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <SysTick_Config+0x40>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002586:	4b04      	ldr	r3, [pc, #16]	@ (8002598 <SysTick_Config+0x40>)
 8002588:	2207      	movs	r2, #7
 800258a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	e000e010 	.word	0xe000e010

0800259c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff29 	bl	80023fc <__NVIC_SetPriorityGrouping>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c4:	f7ff ff3e 	bl	8002444 <__NVIC_GetPriorityGrouping>
 80025c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	6978      	ldr	r0, [r7, #20]
 80025d0:	f7ff ff8e 	bl	80024f0 <NVIC_EncodePriority>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff5d 	bl	800249c <__NVIC_SetPriority>
}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff31 	bl	8002460 <__NVIC_EnableIRQ>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff ffa2 	bl	8002558 <SysTick_Config>
 8002614:	4603      	mov	r3, r0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800262c:	f7ff feda 	bl	80023e4 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e099      	b.n	8002770 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800265c:	e00f      	b.n	800267e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800265e:	f7ff fec1 	bl	80023e4 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b05      	cmp	r3, #5
 800266a:	d908      	bls.n	800267e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2220      	movs	r2, #32
 8002670:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2203      	movs	r2, #3
 8002676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e078      	b.n	8002770 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1e8      	bne.n	800265e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	4b38      	ldr	r3, [pc, #224]	@ (8002778 <HAL_DMA_Init+0x158>)
 8002698:	4013      	ands	r3, r2
 800269a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d107      	bne.n	80026e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e0:	4313      	orrs	r3, r2
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f023 0307 	bic.w	r3, r3, #7
 80026fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270e:	2b04      	cmp	r3, #4
 8002710:	d117      	bne.n	8002742 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4313      	orrs	r3, r2
 800271a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00e      	beq.n	8002742 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 fb01 	bl	8002d2c <DMA_CheckFifoParam>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2240      	movs	r2, #64	@ 0x40
 8002734:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800273e:	2301      	movs	r3, #1
 8002740:	e016      	b.n	8002770 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fab8 	bl	8002cc0 <DMA_CalcBaseAndBitshift>
 8002750:	4603      	mov	r3, r0
 8002752:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002758:	223f      	movs	r2, #63	@ 0x3f
 800275a:	409a      	lsls	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	f010803f 	.word	0xf010803f

0800277c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002792:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_DMA_Start_IT+0x26>
 800279e:	2302      	movs	r3, #2
 80027a0:	e040      	b.n	8002824 <HAL_DMA_Start_IT+0xa8>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d12f      	bne.n	8002816 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2202      	movs	r2, #2
 80027ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fa4a 	bl	8002c64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d4:	223f      	movs	r2, #63	@ 0x3f
 80027d6:	409a      	lsls	r2, r3
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0216 	orr.w	r2, r2, #22
 80027ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d007      	beq.n	8002804 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0208 	orr.w	r2, r2, #8
 8002802:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	e005      	b.n	8002822 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800281e:	2302      	movs	r3, #2
 8002820:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002822:	7dfb      	ldrb	r3, [r7, #23]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002838:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800283a:	f7ff fdd3 	bl	80023e4 <HAL_GetTick>
 800283e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d008      	beq.n	800285e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2280      	movs	r2, #128	@ 0x80
 8002850:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e052      	b.n	8002904 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0216 	bic.w	r2, r2, #22
 800286c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695a      	ldr	r2, [r3, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800287c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d103      	bne.n	800288e <HAL_DMA_Abort+0x62>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0208 	bic.w	r2, r2, #8
 800289c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0201 	bic.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ae:	e013      	b.n	80028d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028b0:	f7ff fd98 	bl	80023e4 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b05      	cmp	r3, #5
 80028bc:	d90c      	bls.n	80028d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2220      	movs	r2, #32
 80028c2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2203      	movs	r2, #3
 80028c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e015      	b.n	8002904 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1e4      	bne.n	80028b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ea:	223f      	movs	r2, #63	@ 0x3f
 80028ec:	409a      	lsls	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d004      	beq.n	800292a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2280      	movs	r2, #128	@ 0x80
 8002924:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e00c      	b.n	8002944 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2205      	movs	r2, #5
 800292e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800295c:	4b8e      	ldr	r3, [pc, #568]	@ (8002b98 <HAL_DMA_IRQHandler+0x248>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a8e      	ldr	r2, [pc, #568]	@ (8002b9c <HAL_DMA_IRQHandler+0x24c>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0a9b      	lsrs	r3, r3, #10
 8002968:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297a:	2208      	movs	r2, #8
 800297c:	409a      	lsls	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d01a      	beq.n	80029bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d013      	beq.n	80029bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0204 	bic.w	r2, r2, #4
 80029a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a8:	2208      	movs	r2, #8
 80029aa:	409a      	lsls	r2, r3
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b4:	f043 0201 	orr.w	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c0:	2201      	movs	r2, #1
 80029c2:	409a      	lsls	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d012      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029de:	2201      	movs	r2, #1
 80029e0:	409a      	lsls	r2, r3
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ea:	f043 0202 	orr.w	r2, r3, #2
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f6:	2204      	movs	r2, #4
 80029f8:	409a      	lsls	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d012      	beq.n	8002a28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00b      	beq.n	8002a28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a14:	2204      	movs	r2, #4
 8002a16:	409a      	lsls	r2, r3
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a20:	f043 0204 	orr.w	r2, r3, #4
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2c:	2210      	movs	r2, #16
 8002a2e:	409a      	lsls	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d043      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d03c      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4a:	2210      	movs	r2, #16
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d018      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d108      	bne.n	8002a80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d024      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
 8002a7e:	e01f      	b.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01b      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	4798      	blx	r3
 8002a90:	e016      	b.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d107      	bne.n	8002ab0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0208 	bic.w	r2, r2, #8
 8002aae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 808f 	beq.w	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8087 	beq.w	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d136      	bne.n	8002b68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0216 	bic.w	r2, r2, #22
 8002b08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d103      	bne.n	8002b2a <HAL_DMA_IRQHandler+0x1da>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0208 	bic.w	r2, r2, #8
 8002b38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3e:	223f      	movs	r2, #63	@ 0x3f
 8002b40:	409a      	lsls	r2, r3
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d07e      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
        }
        return;
 8002b66:	e079      	b.n	8002c5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01d      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10d      	bne.n	8002ba0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d031      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
 8002b94:	e02c      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
 8002b96:	bf00      	nop
 8002b98:	20000078 	.word	0x20000078
 8002b9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d023      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	4798      	blx	r3
 8002bb0:	e01e      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10f      	bne.n	8002be0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0210 	bic.w	r2, r2, #16
 8002bce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d032      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d022      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2205      	movs	r2, #5
 8002c08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d307      	bcc.n	8002c38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f2      	bne.n	8002c1c <HAL_DMA_IRQHandler+0x2cc>
 8002c36:	e000      	b.n	8002c3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	4798      	blx	r3
 8002c5a:	e000      	b.n	8002c5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c5c:	bf00      	nop
    }
  }
}
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b40      	cmp	r3, #64	@ 0x40
 8002c90:	d108      	bne.n	8002ca4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ca2:	e007      	b.n	8002cb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	60da      	str	r2, [r3, #12]
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	3b10      	subs	r3, #16
 8002cd0:	4a14      	ldr	r2, [pc, #80]	@ (8002d24 <DMA_CalcBaseAndBitshift+0x64>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cda:	4a13      	ldr	r2, [pc, #76]	@ (8002d28 <DMA_CalcBaseAndBitshift+0x68>)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4413      	add	r3, r2
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d909      	bls.n	8002d02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cf6:	f023 0303 	bic.w	r3, r3, #3
 8002cfa:	1d1a      	adds	r2, r3, #4
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d00:	e007      	b.n	8002d12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002d0a:	f023 0303 	bic.w	r3, r3, #3
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	aaaaaaab 	.word	0xaaaaaaab
 8002d28:	0800af40 	.word	0x0800af40

08002d2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11f      	bne.n	8002d86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d856      	bhi.n	8002dfa <DMA_CheckFifoParam+0xce>
 8002d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d54 <DMA_CheckFifoParam+0x28>)
 8002d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d52:	bf00      	nop
 8002d54:	08002d65 	.word	0x08002d65
 8002d58:	08002d77 	.word	0x08002d77
 8002d5c:	08002d65 	.word	0x08002d65
 8002d60:	08002dfb 	.word	0x08002dfb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d046      	beq.n	8002dfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d74:	e043      	b.n	8002dfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d7e:	d140      	bne.n	8002e02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d84:	e03d      	b.n	8002e02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d8e:	d121      	bne.n	8002dd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d837      	bhi.n	8002e06 <DMA_CheckFifoParam+0xda>
 8002d96:	a201      	add	r2, pc, #4	@ (adr r2, 8002d9c <DMA_CheckFifoParam+0x70>)
 8002d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9c:	08002dad 	.word	0x08002dad
 8002da0:	08002db3 	.word	0x08002db3
 8002da4:	08002dad 	.word	0x08002dad
 8002da8:	08002dc5 	.word	0x08002dc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      break;
 8002db0:	e030      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d025      	beq.n	8002e0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc2:	e022      	b.n	8002e0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002dcc:	d11f      	bne.n	8002e0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dd2:	e01c      	b.n	8002e0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d903      	bls.n	8002de2 <DMA_CheckFifoParam+0xb6>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d003      	beq.n	8002de8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002de0:	e018      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
      break;
 8002de6:	e015      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00e      	beq.n	8002e12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
      break;
 8002df8:	e00b      	b.n	8002e12 <DMA_CheckFifoParam+0xe6>
      break;
 8002dfa:	bf00      	nop
 8002dfc:	e00a      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e008      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      break;
 8002e02:	bf00      	nop
 8002e04:	e006      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      break;
 8002e06:	bf00      	nop
 8002e08:	e004      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      break;
 8002e0a:	bf00      	nop
 8002e0c:	e002      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e0e:	bf00      	nop
 8002e10:	e000      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      break;
 8002e12:	bf00      	nop
    }
  } 
  
  return status; 
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop

08002e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b089      	sub	sp, #36	@ 0x24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	e16b      	b.n	8003118 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e40:	2201      	movs	r2, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	f040 815a 	bne.w	8003112 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d005      	beq.n	8002e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d130      	bne.n	8002ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	2203      	movs	r2, #3
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eac:	2201      	movs	r2, #1
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f003 0201 	and.w	r2, r3, #1
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d017      	beq.n	8002f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d123      	bne.n	8002f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	08da      	lsrs	r2, r3, #3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3208      	adds	r2, #8
 8002f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	220f      	movs	r2, #15
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	08da      	lsrs	r2, r3, #3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3208      	adds	r2, #8
 8002f62:	69b9      	ldr	r1, [r7, #24]
 8002f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	2203      	movs	r2, #3
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 0203 	and.w	r2, r3, #3
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80b4 	beq.w	8003112 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	4b60      	ldr	r3, [pc, #384]	@ (8003130 <HAL_GPIO_Init+0x30c>)
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb2:	4a5f      	ldr	r2, [pc, #380]	@ (8003130 <HAL_GPIO_Init+0x30c>)
 8002fb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fba:	4b5d      	ldr	r3, [pc, #372]	@ (8003130 <HAL_GPIO_Init+0x30c>)
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fc6:	4a5b      	ldr	r2, [pc, #364]	@ (8003134 <HAL_GPIO_Init+0x310>)
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	3302      	adds	r3, #2
 8002fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	220f      	movs	r2, #15
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a52      	ldr	r2, [pc, #328]	@ (8003138 <HAL_GPIO_Init+0x314>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d02b      	beq.n	800304a <HAL_GPIO_Init+0x226>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a51      	ldr	r2, [pc, #324]	@ (800313c <HAL_GPIO_Init+0x318>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d025      	beq.n	8003046 <HAL_GPIO_Init+0x222>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a50      	ldr	r2, [pc, #320]	@ (8003140 <HAL_GPIO_Init+0x31c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01f      	beq.n	8003042 <HAL_GPIO_Init+0x21e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a4f      	ldr	r2, [pc, #316]	@ (8003144 <HAL_GPIO_Init+0x320>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d019      	beq.n	800303e <HAL_GPIO_Init+0x21a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4e      	ldr	r2, [pc, #312]	@ (8003148 <HAL_GPIO_Init+0x324>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <HAL_GPIO_Init+0x216>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a4d      	ldr	r2, [pc, #308]	@ (800314c <HAL_GPIO_Init+0x328>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00d      	beq.n	8003036 <HAL_GPIO_Init+0x212>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a4c      	ldr	r2, [pc, #304]	@ (8003150 <HAL_GPIO_Init+0x32c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <HAL_GPIO_Init+0x20e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a4b      	ldr	r2, [pc, #300]	@ (8003154 <HAL_GPIO_Init+0x330>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d101      	bne.n	800302e <HAL_GPIO_Init+0x20a>
 800302a:	2307      	movs	r3, #7
 800302c:	e00e      	b.n	800304c <HAL_GPIO_Init+0x228>
 800302e:	2308      	movs	r3, #8
 8003030:	e00c      	b.n	800304c <HAL_GPIO_Init+0x228>
 8003032:	2306      	movs	r3, #6
 8003034:	e00a      	b.n	800304c <HAL_GPIO_Init+0x228>
 8003036:	2305      	movs	r3, #5
 8003038:	e008      	b.n	800304c <HAL_GPIO_Init+0x228>
 800303a:	2304      	movs	r3, #4
 800303c:	e006      	b.n	800304c <HAL_GPIO_Init+0x228>
 800303e:	2303      	movs	r3, #3
 8003040:	e004      	b.n	800304c <HAL_GPIO_Init+0x228>
 8003042:	2302      	movs	r3, #2
 8003044:	e002      	b.n	800304c <HAL_GPIO_Init+0x228>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_GPIO_Init+0x228>
 800304a:	2300      	movs	r3, #0
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	f002 0203 	and.w	r2, r2, #3
 8003052:	0092      	lsls	r2, r2, #2
 8003054:	4093      	lsls	r3, r2
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800305c:	4935      	ldr	r1, [pc, #212]	@ (8003134 <HAL_GPIO_Init+0x310>)
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	3302      	adds	r3, #2
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800306a:	4b3b      	ldr	r3, [pc, #236]	@ (8003158 <HAL_GPIO_Init+0x334>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800308e:	4a32      	ldr	r2, [pc, #200]	@ (8003158 <HAL_GPIO_Init+0x334>)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003094:	4b30      	ldr	r3, [pc, #192]	@ (8003158 <HAL_GPIO_Init+0x334>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030b8:	4a27      	ldr	r2, [pc, #156]	@ (8003158 <HAL_GPIO_Init+0x334>)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030be:	4b26      	ldr	r3, [pc, #152]	@ (8003158 <HAL_GPIO_Init+0x334>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003158 <HAL_GPIO_Init+0x334>)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003158 <HAL_GPIO_Init+0x334>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800310c:	4a12      	ldr	r2, [pc, #72]	@ (8003158 <HAL_GPIO_Init+0x334>)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3301      	adds	r3, #1
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	2b0f      	cmp	r3, #15
 800311c:	f67f ae90 	bls.w	8002e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003120:	bf00      	nop
 8003122:	bf00      	nop
 8003124:	3724      	adds	r7, #36	@ 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800
 8003134:	40013800 	.word	0x40013800
 8003138:	40020000 	.word	0x40020000
 800313c:	40020400 	.word	0x40020400
 8003140:	40020800 	.word	0x40020800
 8003144:	40020c00 	.word	0x40020c00
 8003148:	40021000 	.word	0x40021000
 800314c:	40021400 	.word	0x40021400
 8003150:	40021800 	.word	0x40021800
 8003154:	40021c00 	.word	0x40021c00
 8003158:	40013c00 	.word	0x40013c00

0800315c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	807b      	strh	r3, [r7, #2]
 8003168:	4613      	mov	r3, r2
 800316a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800316c:	787b      	ldrb	r3, [r7, #1]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003172:	887a      	ldrh	r2, [r7, #2]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003178:	e003      	b.n	8003182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800317a:	887b      	ldrh	r3, [r7, #2]
 800317c:	041a      	lsls	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	619a      	str	r2, [r3, #24]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e128      	b.n	80033f4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a90      	ldr	r2, [pc, #576]	@ (80033fc <HAL_I2S_Init+0x26c>)
 80031ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7fe fe2b 	bl	8001e18 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2202      	movs	r2, #2
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80031d8:	f023 030f 	bic.w	r3, r3, #15
 80031dc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2202      	movs	r2, #2
 80031e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d060      	beq.n	80032b0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80031f6:	2310      	movs	r3, #16
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	e001      	b.n	8003200 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031fc:	2320      	movs	r3, #32
 80031fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b20      	cmp	r3, #32
 8003206:	d802      	bhi.n	800320e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800320e:	2001      	movs	r0, #1
 8003210:	f001 fc12 	bl	8004a38 <HAL_RCCEx_GetPeriphCLKFreq>
 8003214:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800321e:	d125      	bne.n	800326c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d010      	beq.n	800324a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	461a      	mov	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	3305      	adds	r3, #5
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	e01f      	b.n	800328a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	fbb2 f2f3 	udiv	r2, r2, r3
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	461a      	mov	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	3305      	adds	r3, #5
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	e00e      	b.n	800328a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	fbb2 f2f3 	udiv	r2, r2, r3
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	461a      	mov	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	fbb2 f3f3 	udiv	r3, r2, r3
 8003286:	3305      	adds	r3, #5
 8003288:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4a5c      	ldr	r2, [pc, #368]	@ (8003400 <HAL_I2S_Init+0x270>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	08db      	lsrs	r3, r3, #3
 8003294:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	085b      	lsrs	r3, r3, #1
 80032a6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	e003      	b.n	80032b8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80032b0:	2302      	movs	r3, #2
 80032b2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d902      	bls.n	80032c4 <HAL_I2S_Init+0x134>
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	2bff      	cmp	r3, #255	@ 0xff
 80032c2:	d907      	bls.n	80032d4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c8:	f043 0210 	orr.w	r2, r3, #16
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e08f      	b.n	80033f4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	ea42 0103 	orr.w	r1, r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80032f2:	f023 030f 	bic.w	r3, r3, #15
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6851      	ldr	r1, [r2, #4]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6892      	ldr	r2, [r2, #8]
 80032fe:	4311      	orrs	r1, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	68d2      	ldr	r2, [r2, #12]
 8003304:	4311      	orrs	r1, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6992      	ldr	r2, [r2, #24]
 800330a:	430a      	orrs	r2, r1
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003316:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d161      	bne.n	80033e4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a38      	ldr	r2, [pc, #224]	@ (8003404 <HAL_I2S_Init+0x274>)
 8003324:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a37      	ldr	r2, [pc, #220]	@ (8003408 <HAL_I2S_Init+0x278>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d101      	bne.n	8003334 <HAL_I2S_Init+0x1a4>
 8003330:	4b36      	ldr	r3, [pc, #216]	@ (800340c <HAL_I2S_Init+0x27c>)
 8003332:	e001      	b.n	8003338 <HAL_I2S_Init+0x1a8>
 8003334:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	4932      	ldr	r1, [pc, #200]	@ (8003408 <HAL_I2S_Init+0x278>)
 8003340:	428a      	cmp	r2, r1
 8003342:	d101      	bne.n	8003348 <HAL_I2S_Init+0x1b8>
 8003344:	4a31      	ldr	r2, [pc, #196]	@ (800340c <HAL_I2S_Init+0x27c>)
 8003346:	e001      	b.n	800334c <HAL_I2S_Init+0x1bc>
 8003348:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800334c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003350:	f023 030f 	bic.w	r3, r3, #15
 8003354:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a2b      	ldr	r2, [pc, #172]	@ (8003408 <HAL_I2S_Init+0x278>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d101      	bne.n	8003364 <HAL_I2S_Init+0x1d4>
 8003360:	4b2a      	ldr	r3, [pc, #168]	@ (800340c <HAL_I2S_Init+0x27c>)
 8003362:	e001      	b.n	8003368 <HAL_I2S_Init+0x1d8>
 8003364:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003368:	2202      	movs	r2, #2
 800336a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a25      	ldr	r2, [pc, #148]	@ (8003408 <HAL_I2S_Init+0x278>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d101      	bne.n	800337a <HAL_I2S_Init+0x1ea>
 8003376:	4b25      	ldr	r3, [pc, #148]	@ (800340c <HAL_I2S_Init+0x27c>)
 8003378:	e001      	b.n	800337e <HAL_I2S_Init+0x1ee>
 800337a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800338a:	d003      	beq.n	8003394 <HAL_I2S_Init+0x204>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d103      	bne.n	800339c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003394:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	e001      	b.n	80033a0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800339c:	2300      	movs	r3, #0
 800339e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033aa:	4313      	orrs	r3, r2
 80033ac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033b4:	4313      	orrs	r3, r2
 80033b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033be:	4313      	orrs	r3, r2
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	897b      	ldrh	r3, [r7, #10]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80033cc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003408 <HAL_I2S_Init+0x278>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d101      	bne.n	80033dc <HAL_I2S_Init+0x24c>
 80033d8:	4b0c      	ldr	r3, [pc, #48]	@ (800340c <HAL_I2S_Init+0x27c>)
 80033da:	e001      	b.n	80033e0 <HAL_I2S_Init+0x250>
 80033dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033e0:	897a      	ldrh	r2, [r7, #10]
 80033e2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	08003507 	.word	0x08003507
 8003400:	cccccccd 	.word	0xcccccccd
 8003404:	08003931 	.word	0x08003931
 8003408:	40003800 	.word	0x40003800
 800340c:	40003400 	.word	0x40003400

08003410 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003458:	881a      	ldrh	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	1c9a      	adds	r2, r3, #2
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10e      	bne.n	80034a0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003490:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff ffb8 	bl	8003410 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ba:	b292      	uxth	r2, r2
 80034bc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c2:	1c9a      	adds	r2, r3, #2
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10e      	bne.n	80034fe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80034ee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff ff93 	bl	8003424 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b086      	sub	sp, #24
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b04      	cmp	r3, #4
 8003520:	d13a      	bne.n	8003598 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b01      	cmp	r3, #1
 800352a:	d109      	bne.n	8003540 <I2S_IRQHandler+0x3a>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003536:	2b40      	cmp	r3, #64	@ 0x40
 8003538:	d102      	bne.n	8003540 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ffb4 	bl	80034a8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003546:	2b40      	cmp	r3, #64	@ 0x40
 8003548:	d126      	bne.n	8003598 <I2S_IRQHandler+0x92>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b20      	cmp	r3, #32
 8003556:	d11f      	bne.n	8003598 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003566:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003568:	2300      	movs	r3, #0
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358a:	f043 0202 	orr.w	r2, r3, #2
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff ff50 	bl	8003438 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d136      	bne.n	8003612 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d109      	bne.n	80035c2 <I2S_IRQHandler+0xbc>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b8:	2b80      	cmp	r3, #128	@ 0x80
 80035ba:	d102      	bne.n	80035c2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff ff45 	bl	800344c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d122      	bne.n	8003612 <I2S_IRQHandler+0x10c>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d11b      	bne.n	8003612 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80035e8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035ea:	2300      	movs	r3, #0
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003604:	f043 0204 	orr.w	r2, r3, #4
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff13 	bl	8003438 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003612:	bf00      	nop
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b01      	cmp	r3, #1
 8003640:	d002      	beq.n	8003648 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8003642:	2302      	movs	r3, #2
 8003644:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003646:	e160      	b.n	800390a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003654:	887b      	ldrh	r3, [r7, #2]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e15a      	b.n	8003914 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800366a:	2302      	movs	r3, #2
 800366c:	e152      	b.n	8003914 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  hi2s->pTxBuffPtr = pTxData;
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->pRxBuffPtr = pRxData;
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b03      	cmp	r3, #3
 8003692:	d002      	beq.n	800369a <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2b05      	cmp	r3, #5
 8003698:	d114      	bne.n	80036c4 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800369a:	887b      	ldrh	r3, [r7, #2]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80036a4:	887b      	ldrh	r3, [r7, #2]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 80036ae:	887b      	ldrh	r3, [r7, #2]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 80036b8:	887b      	ldrh	r3, [r7, #2]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	865a      	strh	r2, [r3, #50]	@ 0x32
 80036c2:	e00b      	b.n	80036dc <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	887a      	ldrh	r2, [r7, #2]
 80036c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	887a      	ldrh	r2, [r7, #2]
 80036ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	887a      	ldrh	r2, [r7, #2]
 80036d4:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	887a      	ldrh	r2, [r7, #2]
 80036da:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2205      	movs	r2, #5
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ee:	4a8b      	ldr	r2, [pc, #556]	@ (800391c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80036f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f6:	4a8a      	ldr	r2, [pc, #552]	@ (8003920 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80036f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fe:	4a89      	ldr	r2, [pc, #548]	@ (8003924 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003700:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003706:	2200      	movs	r2, #0
 8003708:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370e:	2200      	movs	r2, #0
 8003710:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003716:	4a83      	ldr	r2, [pc, #524]	@ (8003924 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003718:	64da      	str	r2, [r3, #76]	@ 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003724:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800372c:	d002      	beq.n	8003734 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d16b      	bne.n	800380c <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003734:	1d3b      	adds	r3, r7, #4
 8003736:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a79      	ldr	r2, [pc, #484]	@ (8003928 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8003746:	4b79      	ldr	r3, [pc, #484]	@ (800392c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003748:	e001      	b.n	800374e <HAL_I2SEx_TransmitReceive_DMA+0x132>
 800374a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800374e:	330c      	adds	r3, #12
 8003750:	4619      	mov	r1, r3
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800375a:	b29b      	uxth	r3, r3
 800375c:	f7ff f80e 	bl	800277c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a70      	ldr	r2, [pc, #448]	@ (8003928 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d101      	bne.n	800376e <HAL_I2SEx_TransmitReceive_DMA+0x152>
 800376a:	4b70      	ldr	r3, [pc, #448]	@ (800392c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800376c:	e001      	b.n	8003772 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 800376e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	496b      	ldr	r1, [pc, #428]	@ (8003928 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800377a:	428b      	cmp	r3, r1
 800377c:	d101      	bne.n	8003782 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 800377e:	4b6b      	ldr	r3, [pc, #428]	@ (800392c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003780:	e001      	b.n	8003786 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8003782:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800378c:	f107 0308 	add.w	r3, r7, #8
 8003790:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	330c      	adds	r3, #12
 80037a0:	461a      	mov	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f7fe ffe8 	bl	800277c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0202 	orr.w	r2, r2, #2
 80037ba:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ca:	f000 809e 	beq.w	800390a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a55      	ldr	r2, [pc, #340]	@ (8003928 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d101      	bne.n	80037dc <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80037d8:	4b54      	ldr	r3, [pc, #336]	@ (800392c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80037da:	e001      	b.n	80037e0 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80037dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037e0:	69da      	ldr	r2, [r3, #28]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4950      	ldr	r1, [pc, #320]	@ (8003928 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80037e8:	428b      	cmp	r3, r1
 80037ea:	d101      	bne.n	80037f0 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80037ec:	4b4f      	ldr	r3, [pc, #316]	@ (800392c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80037ee:	e001      	b.n	80037f4 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80037f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037f8:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003808:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800380a:	e07e      	b.n	800390a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003816:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800381a:	d10a      	bne.n	8003832 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003832:	f107 0308 	add.w	r3, r7, #8
 8003836:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	6819      	ldr	r1, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a38      	ldr	r2, [pc, #224]	@ (8003928 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d101      	bne.n	800384e <HAL_I2SEx_TransmitReceive_DMA+0x232>
 800384a:	4b38      	ldr	r3, [pc, #224]	@ (800392c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800384c:	e001      	b.n	8003852 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 800384e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003852:	330c      	adds	r3, #12
 8003854:	461a      	mov	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385a:	b29b      	uxth	r3, r3
 800385c:	f7fe ff8e 	bl	800277c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a30      	ldr	r2, [pc, #192]	@ (8003928 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d101      	bne.n	800386e <HAL_I2SEx_TransmitReceive_DMA+0x252>
 800386a:	4b30      	ldr	r3, [pc, #192]	@ (800392c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800386c:	e001      	b.n	8003872 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 800386e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	492b      	ldr	r1, [pc, #172]	@ (8003928 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800387a:	428b      	cmp	r3, r1
 800387c:	d101      	bne.n	8003882 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 800387e:	4b2b      	ldr	r3, [pc, #172]	@ (800392c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003880:	e001      	b.n	8003886 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8003882:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003886:	f042 0202 	orr.w	r2, r2, #2
 800388a:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 800388c:	1d3b      	adds	r3, r7, #4
 800388e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	330c      	adds	r3, #12
 800389a:	4619      	mov	r1, r3
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	f7fe ff69 	bl	800277c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0201 	orr.w	r2, r2, #1
 80038b8:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c8:	d01e      	beq.n	8003908 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a16      	ldr	r2, [pc, #88]	@ (8003928 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d101      	bne.n	80038d8 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80038d4:	4b15      	ldr	r3, [pc, #84]	@ (800392c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80038d6:	e001      	b.n	80038dc <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80038d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038dc:	69da      	ldr	r2, [r3, #28]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4911      	ldr	r1, [pc, #68]	@ (8003928 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80038e4:	428b      	cmp	r3, r1
 80038e6:	d101      	bne.n	80038ec <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 80038e8:	4b10      	ldr	r3, [pc, #64]	@ (800392c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80038ea:	e001      	b.n	80038f0 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 80038ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038f4:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69da      	ldr	r2, [r3, #28]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003904:	61da      	str	r2, [r3, #28]
 8003906:	e000      	b.n	800390a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8003908:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return errorcode;
 8003912:	7ffb      	ldrb	r3, [r7, #31]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3720      	adds	r7, #32
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	08003bd9 	.word	0x08003bd9
 8003920:	08003bf5 	.word	0x08003bf5
 8003924:	08003ccd 	.word	0x08003ccd
 8003928:	40003800 	.word	0x40003800
 800392c:	40003400 	.word	0x40003400

08003930 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a92      	ldr	r2, [pc, #584]	@ (8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800394a:	4b92      	ldr	r3, [pc, #584]	@ (8003b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800394c:	e001      	b.n	8003952 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800394e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a8b      	ldr	r2, [pc, #556]	@ (8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d101      	bne.n	800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003968:	4b8a      	ldr	r3, [pc, #552]	@ (8003b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800396a:	e001      	b.n	8003970 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800396c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800397c:	d004      	beq.n	8003988 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f040 8099 	bne.w	8003aba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b02      	cmp	r3, #2
 8003990:	d107      	bne.n	80039a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f9d5 	bl	8003d4c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d107      	bne.n	80039bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fa78 	bl	8003eac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c2:	2b40      	cmp	r3, #64	@ 0x40
 80039c4:	d13a      	bne.n	8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d035      	beq.n	8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d101      	bne.n	80039de <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80039da:	4b6e      	ldr	r3, [pc, #440]	@ (8003b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039dc:	e001      	b.n	80039e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80039de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4969      	ldr	r1, [pc, #420]	@ (8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039ea:	428b      	cmp	r3, r1
 80039ec:	d101      	bne.n	80039f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80039ee:	4b69      	ldr	r3, [pc, #420]	@ (8003b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039f0:	e001      	b.n	80039f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80039f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80039fa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2e:	f043 0202 	orr.w	r2, r3, #2
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff fcfe 	bl	8003438 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	f040 80c3 	bne.w	8003bce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80bd 	beq.w	8003bce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a62:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a49      	ldr	r2, [pc, #292]	@ (8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d101      	bne.n	8003a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a6e:	4b49      	ldr	r3, [pc, #292]	@ (8003b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a70:	e001      	b.n	8003a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4944      	ldr	r1, [pc, #272]	@ (8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a7e:	428b      	cmp	r3, r1
 8003a80:	d101      	bne.n	8003a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a82:	4b44      	ldr	r3, [pc, #272]	@ (8003b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a84:	e001      	b.n	8003a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a8a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a8e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a90:	2300      	movs	r3, #0
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aaa:	f043 0204 	orr.w	r2, r3, #4
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff fcc0 	bl	8003438 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ab8:	e089      	b.n	8003bce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d107      	bne.n	8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f96e 	bl	8003db0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d107      	bne.n	8003aee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f9ad 	bl	8003e48 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af4:	2b40      	cmp	r3, #64	@ 0x40
 8003af6:	d12f      	bne.n	8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d02a      	beq.n	8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b10:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1e      	ldr	r2, [pc, #120]	@ (8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d101      	bne.n	8003b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b1e:	e001      	b.n	8003b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003b20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4919      	ldr	r1, [pc, #100]	@ (8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b2c:	428b      	cmp	r3, r1
 8003b2e:	d101      	bne.n	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b30:	4b18      	ldr	r3, [pc, #96]	@ (8003b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b32:	e001      	b.n	8003b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b38:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b3c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4a:	f043 0202 	orr.w	r2, r3, #2
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff fc70 	bl	8003438 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d136      	bne.n	8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d031      	beq.n	8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a07      	ldr	r2, [pc, #28]	@ (8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d101      	bne.n	8003b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b76:	4b07      	ldr	r3, [pc, #28]	@ (8003b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b78:	e001      	b.n	8003b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003b7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4902      	ldr	r1, [pc, #8]	@ (8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b86:	428b      	cmp	r3, r1
 8003b88:	d106      	bne.n	8003b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003b8a:	4b02      	ldr	r3, [pc, #8]	@ (8003b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b8c:	e006      	b.n	8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003b8e:	bf00      	nop
 8003b90:	40003800 	.word	0x40003800
 8003b94:	40003400 	.word	0x40003400
 8003b98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b9c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ba0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003bb0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bbe:	f043 0204 	orr.w	r2, r3, #4
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff fc36 	bl	8003438 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bcc:	e000      	b.n	8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003bce:	bf00      	nop
}
 8003bd0:	bf00      	nop
 8003bd2:	3720      	adds	r7, #32
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f7fe f8c8 	bl	8001d7c <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003bec:	bf00      	nop
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d155      	bne.n	8003cb6 <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c18:	d006      	beq.n	8003c28 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d11e      	bne.n	8003c66 <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a25      	ldr	r2, [pc, #148]	@ (8003cc4 <I2SEx_TxRxDMACplt+0xd0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d101      	bne.n	8003c36 <I2SEx_TxRxDMACplt+0x42>
 8003c32:	4b25      	ldr	r3, [pc, #148]	@ (8003cc8 <I2SEx_TxRxDMACplt+0xd4>)
 8003c34:	e001      	b.n	8003c3a <I2SEx_TxRxDMACplt+0x46>
 8003c36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4920      	ldr	r1, [pc, #128]	@ (8003cc4 <I2SEx_TxRxDMACplt+0xd0>)
 8003c42:	428b      	cmp	r3, r1
 8003c44:	d101      	bne.n	8003c4a <I2SEx_TxRxDMACplt+0x56>
 8003c46:	4b20      	ldr	r3, [pc, #128]	@ (8003cc8 <I2SEx_TxRxDMACplt+0xd4>)
 8003c48:	e001      	b.n	8003c4e <I2SEx_TxRxDMACplt+0x5a>
 8003c4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0202 	bic.w	r2, r2, #2
 8003c62:	605a      	str	r2, [r3, #4]
 8003c64:	e01d      	b.n	8003ca2 <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0201 	bic.w	r2, r2, #1
 8003c74:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a12      	ldr	r2, [pc, #72]	@ (8003cc4 <I2SEx_TxRxDMACplt+0xd0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d101      	bne.n	8003c84 <I2SEx_TxRxDMACplt+0x90>
 8003c80:	4b11      	ldr	r3, [pc, #68]	@ (8003cc8 <I2SEx_TxRxDMACplt+0xd4>)
 8003c82:	e001      	b.n	8003c88 <I2SEx_TxRxDMACplt+0x94>
 8003c84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	490d      	ldr	r1, [pc, #52]	@ (8003cc4 <I2SEx_TxRxDMACplt+0xd0>)
 8003c90:	428b      	cmp	r3, r1
 8003c92:	d101      	bne.n	8003c98 <I2SEx_TxRxDMACplt+0xa4>
 8003c94:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc8 <I2SEx_TxRxDMACplt+0xd4>)
 8003c96:	e001      	b.n	8003c9c <I2SEx_TxRxDMACplt+0xa8>
 8003c98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c9c:	f022 0202 	bic.w	r2, r2, #2
 8003ca0:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->TxXferCount = 0U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f7fe f870 	bl	8001d9c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003cbc:	bf00      	nop
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40003800 	.word	0x40003800
 8003cc8:	40003400 	.word	0x40003400

08003ccc <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0203 	bic.w	r2, r2, #3
 8003ce8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a15      	ldr	r2, [pc, #84]	@ (8003d44 <I2SEx_TxRxDMAError+0x78>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d101      	bne.n	8003cf8 <I2SEx_TxRxDMAError+0x2c>
 8003cf4:	4b14      	ldr	r3, [pc, #80]	@ (8003d48 <I2SEx_TxRxDMAError+0x7c>)
 8003cf6:	e001      	b.n	8003cfc <I2SEx_TxRxDMAError+0x30>
 8003cf8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4910      	ldr	r1, [pc, #64]	@ (8003d44 <I2SEx_TxRxDMAError+0x78>)
 8003d04:	428b      	cmp	r3, r1
 8003d06:	d101      	bne.n	8003d0c <I2SEx_TxRxDMAError+0x40>
 8003d08:	4b0f      	ldr	r3, [pc, #60]	@ (8003d48 <I2SEx_TxRxDMAError+0x7c>)
 8003d0a:	e001      	b.n	8003d10 <I2SEx_TxRxDMAError+0x44>
 8003d0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d10:	f022 0203 	bic.w	r2, r2, #3
 8003d14:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2e:	f043 0208 	orr.w	r2, r3, #8
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f7ff fb7e 	bl	8003438 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40003800 	.word	0x40003800
 8003d48:	40003400 	.word	0x40003400

08003d4c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	1c99      	adds	r1, r3, #2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6251      	str	r1, [r2, #36]	@ 0x24
 8003d5e:	881a      	ldrh	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d113      	bne.n	8003da6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d106      	bne.n	8003da6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7fd fffb 	bl	8001d9c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	1c99      	adds	r1, r3, #2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6251      	str	r1, [r2, #36]	@ 0x24
 8003dc2:	8819      	ldrh	r1, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e40 <I2SEx_TxISR_I2SExt+0x90>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d101      	bne.n	8003dd2 <I2SEx_TxISR_I2SExt+0x22>
 8003dce:	4b1d      	ldr	r3, [pc, #116]	@ (8003e44 <I2SEx_TxISR_I2SExt+0x94>)
 8003dd0:	e001      	b.n	8003dd6 <I2SEx_TxISR_I2SExt+0x26>
 8003dd2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dd6:	460a      	mov	r2, r1
 8003dd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d121      	bne.n	8003e36 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a12      	ldr	r2, [pc, #72]	@ (8003e40 <I2SEx_TxISR_I2SExt+0x90>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d101      	bne.n	8003e00 <I2SEx_TxISR_I2SExt+0x50>
 8003dfc:	4b11      	ldr	r3, [pc, #68]	@ (8003e44 <I2SEx_TxISR_I2SExt+0x94>)
 8003dfe:	e001      	b.n	8003e04 <I2SEx_TxISR_I2SExt+0x54>
 8003e00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	490d      	ldr	r1, [pc, #52]	@ (8003e40 <I2SEx_TxISR_I2SExt+0x90>)
 8003e0c:	428b      	cmp	r3, r1
 8003e0e:	d101      	bne.n	8003e14 <I2SEx_TxISR_I2SExt+0x64>
 8003e10:	4b0c      	ldr	r3, [pc, #48]	@ (8003e44 <I2SEx_TxISR_I2SExt+0x94>)
 8003e12:	e001      	b.n	8003e18 <I2SEx_TxISR_I2SExt+0x68>
 8003e14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e18:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d106      	bne.n	8003e36 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7fd ffb3 	bl	8001d9c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40003800 	.word	0x40003800
 8003e44:	40003400 	.word	0x40003400

08003e48 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68d8      	ldr	r0, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5a:	1c99      	adds	r1, r3, #2
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003e60:	b282      	uxth	r2, r0
 8003e62:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d113      	bne.n	8003ea4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e8a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fd ff7c 	bl	8001d9c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a20      	ldr	r2, [pc, #128]	@ (8003f3c <I2SEx_RxISR_I2SExt+0x90>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d101      	bne.n	8003ec2 <I2SEx_RxISR_I2SExt+0x16>
 8003ebe:	4b20      	ldr	r3, [pc, #128]	@ (8003f40 <I2SEx_RxISR_I2SExt+0x94>)
 8003ec0:	e001      	b.n	8003ec6 <I2SEx_RxISR_I2SExt+0x1a>
 8003ec2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ec6:	68d8      	ldr	r0, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ecc:	1c99      	adds	r1, r3, #2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003ed2:	b282      	uxth	r2, r0
 8003ed4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d121      	bne.n	8003f32 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a12      	ldr	r2, [pc, #72]	@ (8003f3c <I2SEx_RxISR_I2SExt+0x90>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d101      	bne.n	8003efc <I2SEx_RxISR_I2SExt+0x50>
 8003ef8:	4b11      	ldr	r3, [pc, #68]	@ (8003f40 <I2SEx_RxISR_I2SExt+0x94>)
 8003efa:	e001      	b.n	8003f00 <I2SEx_RxISR_I2SExt+0x54>
 8003efc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	490d      	ldr	r1, [pc, #52]	@ (8003f3c <I2SEx_RxISR_I2SExt+0x90>)
 8003f08:	428b      	cmp	r3, r1
 8003f0a:	d101      	bne.n	8003f10 <I2SEx_RxISR_I2SExt+0x64>
 8003f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f40 <I2SEx_RxISR_I2SExt+0x94>)
 8003f0e:	e001      	b.n	8003f14 <I2SEx_RxISR_I2SExt+0x68>
 8003f10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f14:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f18:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d106      	bne.n	8003f32 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7fd ff35 	bl	8001d9c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40003800 	.word	0x40003800
 8003f40:	40003400 	.word	0x40003400

08003f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e267      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d075      	beq.n	800404e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f62:	4b88      	ldr	r3, [pc, #544]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d00c      	beq.n	8003f88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f6e:	4b85      	ldr	r3, [pc, #532]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d112      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7a:	4b82      	ldr	r3, [pc, #520]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f86:	d10b      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f88:	4b7e      	ldr	r3, [pc, #504]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d05b      	beq.n	800404c <HAL_RCC_OscConfig+0x108>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d157      	bne.n	800404c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e242      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa8:	d106      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x74>
 8003faa:	4b76      	ldr	r3, [pc, #472]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a75      	ldr	r2, [pc, #468]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	e01d      	b.n	8003ff4 <HAL_RCC_OscConfig+0xb0>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fc0:	d10c      	bne.n	8003fdc <HAL_RCC_OscConfig+0x98>
 8003fc2:	4b70      	ldr	r3, [pc, #448]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a6f      	ldr	r2, [pc, #444]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	4b6d      	ldr	r3, [pc, #436]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a6c      	ldr	r2, [pc, #432]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	e00b      	b.n	8003ff4 <HAL_RCC_OscConfig+0xb0>
 8003fdc:	4b69      	ldr	r3, [pc, #420]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a68      	ldr	r2, [pc, #416]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	4b66      	ldr	r3, [pc, #408]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a65      	ldr	r2, [pc, #404]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d013      	beq.n	8004024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffc:	f7fe f9f2 	bl	80023e4 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004004:	f7fe f9ee 	bl	80023e4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	@ 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e207      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	4b5b      	ldr	r3, [pc, #364]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0xc0>
 8004022:	e014      	b.n	800404e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004024:	f7fe f9de 	bl	80023e4 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800402c:	f7fe f9da 	bl	80023e4 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b64      	cmp	r3, #100	@ 0x64
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e1f3      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403e:	4b51      	ldr	r3, [pc, #324]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0xe8>
 800404a:	e000      	b.n	800404e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800404c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d063      	beq.n	8004122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800405a:	4b4a      	ldr	r3, [pc, #296]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004066:	4b47      	ldr	r3, [pc, #284]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800406e:	2b08      	cmp	r3, #8
 8004070:	d11c      	bne.n	80040ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004072:	4b44      	ldr	r3, [pc, #272]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d116      	bne.n	80040ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800407e:	4b41      	ldr	r3, [pc, #260]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d005      	beq.n	8004096 <HAL_RCC_OscConfig+0x152>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d001      	beq.n	8004096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e1c7      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004096:	4b3b      	ldr	r3, [pc, #236]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4937      	ldr	r1, [pc, #220]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040aa:	e03a      	b.n	8004122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d020      	beq.n	80040f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040b4:	4b34      	ldr	r3, [pc, #208]	@ (8004188 <HAL_RCC_OscConfig+0x244>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ba:	f7fe f993 	bl	80023e4 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c2:	f7fe f98f 	bl	80023e4 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e1a8      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0f0      	beq.n	80040c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e0:	4b28      	ldr	r3, [pc, #160]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4925      	ldr	r1, [pc, #148]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	600b      	str	r3, [r1, #0]
 80040f4:	e015      	b.n	8004122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040f6:	4b24      	ldr	r3, [pc, #144]	@ (8004188 <HAL_RCC_OscConfig+0x244>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fe f972 	bl	80023e4 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004104:	f7fe f96e 	bl	80023e4 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e187      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004116:	4b1b      	ldr	r3, [pc, #108]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d036      	beq.n	800419c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d016      	beq.n	8004164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004136:	4b15      	ldr	r3, [pc, #84]	@ (800418c <HAL_RCC_OscConfig+0x248>)
 8004138:	2201      	movs	r2, #1
 800413a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413c:	f7fe f952 	bl	80023e4 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004144:	f7fe f94e 	bl	80023e4 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e167      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004156:	4b0b      	ldr	r3, [pc, #44]	@ (8004184 <HAL_RCC_OscConfig+0x240>)
 8004158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0x200>
 8004162:	e01b      	b.n	800419c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004164:	4b09      	ldr	r3, [pc, #36]	@ (800418c <HAL_RCC_OscConfig+0x248>)
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800416a:	f7fe f93b 	bl	80023e4 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004170:	e00e      	b.n	8004190 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004172:	f7fe f937 	bl	80023e4 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d907      	bls.n	8004190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e150      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
 8004184:	40023800 	.word	0x40023800
 8004188:	42470000 	.word	0x42470000
 800418c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004190:	4b88      	ldr	r3, [pc, #544]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1ea      	bne.n	8004172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 8097 	beq.w	80042d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041aa:	2300      	movs	r3, #0
 80041ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ae:	4b81      	ldr	r3, [pc, #516]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 80041b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10f      	bne.n	80041da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ba:	2300      	movs	r3, #0
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	4b7d      	ldr	r3, [pc, #500]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c2:	4a7c      	ldr	r2, [pc, #496]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 80041c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041ca:	4b7a      	ldr	r3, [pc, #488]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041d2:	60bb      	str	r3, [r7, #8]
 80041d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d6:	2301      	movs	r3, #1
 80041d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041da:	4b77      	ldr	r3, [pc, #476]	@ (80043b8 <HAL_RCC_OscConfig+0x474>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d118      	bne.n	8004218 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041e6:	4b74      	ldr	r3, [pc, #464]	@ (80043b8 <HAL_RCC_OscConfig+0x474>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a73      	ldr	r2, [pc, #460]	@ (80043b8 <HAL_RCC_OscConfig+0x474>)
 80041ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f2:	f7fe f8f7 	bl	80023e4 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fa:	f7fe f8f3 	bl	80023e4 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e10c      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420c:	4b6a      	ldr	r3, [pc, #424]	@ (80043b8 <HAL_RCC_OscConfig+0x474>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d106      	bne.n	800422e <HAL_RCC_OscConfig+0x2ea>
 8004220:	4b64      	ldr	r3, [pc, #400]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004224:	4a63      	ldr	r2, [pc, #396]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	6713      	str	r3, [r2, #112]	@ 0x70
 800422c:	e01c      	b.n	8004268 <HAL_RCC_OscConfig+0x324>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2b05      	cmp	r3, #5
 8004234:	d10c      	bne.n	8004250 <HAL_RCC_OscConfig+0x30c>
 8004236:	4b5f      	ldr	r3, [pc, #380]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800423a:	4a5e      	ldr	r2, [pc, #376]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 800423c:	f043 0304 	orr.w	r3, r3, #4
 8004240:	6713      	str	r3, [r2, #112]	@ 0x70
 8004242:	4b5c      	ldr	r3, [pc, #368]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004246:	4a5b      	ldr	r2, [pc, #364]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	6713      	str	r3, [r2, #112]	@ 0x70
 800424e:	e00b      	b.n	8004268 <HAL_RCC_OscConfig+0x324>
 8004250:	4b58      	ldr	r3, [pc, #352]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004254:	4a57      	ldr	r2, [pc, #348]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	6713      	str	r3, [r2, #112]	@ 0x70
 800425c:	4b55      	ldr	r3, [pc, #340]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004260:	4a54      	ldr	r2, [pc, #336]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004262:	f023 0304 	bic.w	r3, r3, #4
 8004266:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d015      	beq.n	800429c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004270:	f7fe f8b8 	bl	80023e4 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004276:	e00a      	b.n	800428e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004278:	f7fe f8b4 	bl	80023e4 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e0cb      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428e:	4b49      	ldr	r3, [pc, #292]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0ee      	beq.n	8004278 <HAL_RCC_OscConfig+0x334>
 800429a:	e014      	b.n	80042c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800429c:	f7fe f8a2 	bl	80023e4 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a2:	e00a      	b.n	80042ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a4:	f7fe f89e 	bl	80023e4 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e0b5      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ba:	4b3e      	ldr	r3, [pc, #248]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1ee      	bne.n	80042a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d105      	bne.n	80042d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042cc:	4b39      	ldr	r3, [pc, #228]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 80042ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d0:	4a38      	ldr	r2, [pc, #224]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 80042d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80a1 	beq.w	8004424 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042e2:	4b34      	ldr	r3, [pc, #208]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d05c      	beq.n	80043a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d141      	bne.n	800437a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f6:	4b31      	ldr	r3, [pc, #196]	@ (80043bc <HAL_RCC_OscConfig+0x478>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fe f872 	bl	80023e4 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004304:	f7fe f86e 	bl	80023e4 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e087      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004316:	4b27      	ldr	r3, [pc, #156]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69da      	ldr	r2, [r3, #28]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004330:	019b      	lsls	r3, r3, #6
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	3b01      	subs	r3, #1
 800433c:	041b      	lsls	r3, r3, #16
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004344:	061b      	lsls	r3, r3, #24
 8004346:	491b      	ldr	r1, [pc, #108]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004348:	4313      	orrs	r3, r2
 800434a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800434c:	4b1b      	ldr	r3, [pc, #108]	@ (80043bc <HAL_RCC_OscConfig+0x478>)
 800434e:	2201      	movs	r2, #1
 8004350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004352:	f7fe f847 	bl	80023e4 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800435a:	f7fe f843 	bl	80023e4 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e05c      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436c:	4b11      	ldr	r3, [pc, #68]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCC_OscConfig+0x416>
 8004378:	e054      	b.n	8004424 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437a:	4b10      	ldr	r3, [pc, #64]	@ (80043bc <HAL_RCC_OscConfig+0x478>)
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004380:	f7fe f830 	bl	80023e4 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004388:	f7fe f82c 	bl	80023e4 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e045      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439a:	4b06      	ldr	r3, [pc, #24]	@ (80043b4 <HAL_RCC_OscConfig+0x470>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f0      	bne.n	8004388 <HAL_RCC_OscConfig+0x444>
 80043a6:	e03d      	b.n	8004424 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d107      	bne.n	80043c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e038      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
 80043b4:	40023800 	.word	0x40023800
 80043b8:	40007000 	.word	0x40007000
 80043bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004430 <HAL_RCC_OscConfig+0x4ec>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d028      	beq.n	8004420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d8:	429a      	cmp	r2, r3
 80043da:	d121      	bne.n	8004420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d11a      	bne.n	8004420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80043f0:	4013      	ands	r3, r2
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d111      	bne.n	8004420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004406:	085b      	lsrs	r3, r3, #1
 8004408:	3b01      	subs	r3, #1
 800440a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800440c:	429a      	cmp	r2, r3
 800440e:	d107      	bne.n	8004420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800441c:	429a      	cmp	r2, r3
 800441e:	d001      	beq.n	8004424 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800

08004434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0cc      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004448:	4b68      	ldr	r3, [pc, #416]	@ (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d90c      	bls.n	8004470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004456:	4b65      	ldr	r3, [pc, #404]	@ (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b63      	ldr	r3, [pc, #396]	@ (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0b8      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d020      	beq.n	80044be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004488:	4b59      	ldr	r3, [pc, #356]	@ (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	4a58      	ldr	r2, [pc, #352]	@ (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044a0:	4b53      	ldr	r3, [pc, #332]	@ (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4a52      	ldr	r2, [pc, #328]	@ (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80044aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ac:	4b50      	ldr	r3, [pc, #320]	@ (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	494d      	ldr	r1, [pc, #308]	@ (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d044      	beq.n	8004554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d2:	4b47      	ldr	r3, [pc, #284]	@ (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d119      	bne.n	8004512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e07f      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d003      	beq.n	80044f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f2:	4b3f      	ldr	r3, [pc, #252]	@ (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e06f      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004502:	4b3b      	ldr	r3, [pc, #236]	@ (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e067      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004512:	4b37      	ldr	r3, [pc, #220]	@ (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f023 0203 	bic.w	r2, r3, #3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	4934      	ldr	r1, [pc, #208]	@ (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	4313      	orrs	r3, r2
 8004522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004524:	f7fd ff5e 	bl	80023e4 <HAL_GetTick>
 8004528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452a:	e00a      	b.n	8004542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800452c:	f7fd ff5a 	bl	80023e4 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e04f      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004542:	4b2b      	ldr	r3, [pc, #172]	@ (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 020c 	and.w	r2, r3, #12
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	429a      	cmp	r2, r3
 8004552:	d1eb      	bne.n	800452c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004554:	4b25      	ldr	r3, [pc, #148]	@ (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d20c      	bcs.n	800457c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004562:	4b22      	ldr	r3, [pc, #136]	@ (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b20      	ldr	r3, [pc, #128]	@ (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e032      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004588:	4b19      	ldr	r3, [pc, #100]	@ (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4916      	ldr	r1, [pc, #88]	@ (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	4313      	orrs	r3, r2
 8004598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045a6:	4b12      	ldr	r3, [pc, #72]	@ (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	490e      	ldr	r1, [pc, #56]	@ (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ba:	f000 f821 	bl	8004600 <HAL_RCC_GetSysClockFreq>
 80045be:	4602      	mov	r2, r0
 80045c0:	4b0b      	ldr	r3, [pc, #44]	@ (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	091b      	lsrs	r3, r3, #4
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	490a      	ldr	r1, [pc, #40]	@ (80045f4 <HAL_RCC_ClockConfig+0x1c0>)
 80045cc:	5ccb      	ldrb	r3, [r1, r3]
 80045ce:	fa22 f303 	lsr.w	r3, r2, r3
 80045d2:	4a09      	ldr	r2, [pc, #36]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 80045d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045d6:	4b09      	ldr	r3, [pc, #36]	@ (80045fc <HAL_RCC_ClockConfig+0x1c8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fd febe 	bl	800235c <HAL_InitTick>

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40023c00 	.word	0x40023c00
 80045f0:	40023800 	.word	0x40023800
 80045f4:	0800af28 	.word	0x0800af28
 80045f8:	20000078 	.word	0x20000078
 80045fc:	2000007c 	.word	0x2000007c

08004600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004604:	b094      	sub	sp, #80	@ 0x50
 8004606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	647b      	str	r3, [r7, #68]	@ 0x44
 800460c:	2300      	movs	r3, #0
 800460e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004610:	2300      	movs	r3, #0
 8004612:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004618:	4b79      	ldr	r3, [pc, #484]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 030c 	and.w	r3, r3, #12
 8004620:	2b08      	cmp	r3, #8
 8004622:	d00d      	beq.n	8004640 <HAL_RCC_GetSysClockFreq+0x40>
 8004624:	2b08      	cmp	r3, #8
 8004626:	f200 80e1 	bhi.w	80047ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_RCC_GetSysClockFreq+0x34>
 800462e:	2b04      	cmp	r3, #4
 8004630:	d003      	beq.n	800463a <HAL_RCC_GetSysClockFreq+0x3a>
 8004632:	e0db      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004634:	4b73      	ldr	r3, [pc, #460]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x204>)
 8004636:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004638:	e0db      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800463a:	4b73      	ldr	r3, [pc, #460]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x208>)
 800463c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800463e:	e0d8      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004640:	4b6f      	ldr	r3, [pc, #444]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004648:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800464a:	4b6d      	ldr	r3, [pc, #436]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d063      	beq.n	800471e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004656:	4b6a      	ldr	r3, [pc, #424]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	099b      	lsrs	r3, r3, #6
 800465c:	2200      	movs	r2, #0
 800465e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004660:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004668:	633b      	str	r3, [r7, #48]	@ 0x30
 800466a:	2300      	movs	r3, #0
 800466c:	637b      	str	r3, [r7, #52]	@ 0x34
 800466e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004672:	4622      	mov	r2, r4
 8004674:	462b      	mov	r3, r5
 8004676:	f04f 0000 	mov.w	r0, #0
 800467a:	f04f 0100 	mov.w	r1, #0
 800467e:	0159      	lsls	r1, r3, #5
 8004680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004684:	0150      	lsls	r0, r2, #5
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4621      	mov	r1, r4
 800468c:	1a51      	subs	r1, r2, r1
 800468e:	6139      	str	r1, [r7, #16]
 8004690:	4629      	mov	r1, r5
 8004692:	eb63 0301 	sbc.w	r3, r3, r1
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046a4:	4659      	mov	r1, fp
 80046a6:	018b      	lsls	r3, r1, #6
 80046a8:	4651      	mov	r1, sl
 80046aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046ae:	4651      	mov	r1, sl
 80046b0:	018a      	lsls	r2, r1, #6
 80046b2:	4651      	mov	r1, sl
 80046b4:	ebb2 0801 	subs.w	r8, r2, r1
 80046b8:	4659      	mov	r1, fp
 80046ba:	eb63 0901 	sbc.w	r9, r3, r1
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046d2:	4690      	mov	r8, r2
 80046d4:	4699      	mov	r9, r3
 80046d6:	4623      	mov	r3, r4
 80046d8:	eb18 0303 	adds.w	r3, r8, r3
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	462b      	mov	r3, r5
 80046e0:	eb49 0303 	adc.w	r3, r9, r3
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046f2:	4629      	mov	r1, r5
 80046f4:	024b      	lsls	r3, r1, #9
 80046f6:	4621      	mov	r1, r4
 80046f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046fc:	4621      	mov	r1, r4
 80046fe:	024a      	lsls	r2, r1, #9
 8004700:	4610      	mov	r0, r2
 8004702:	4619      	mov	r1, r3
 8004704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004706:	2200      	movs	r2, #0
 8004708:	62bb      	str	r3, [r7, #40]	@ 0x28
 800470a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800470c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004710:	f7fc faba 	bl	8000c88 <__aeabi_uldivmod>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4613      	mov	r3, r2
 800471a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800471c:	e058      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800471e:	4b38      	ldr	r3, [pc, #224]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	099b      	lsrs	r3, r3, #6
 8004724:	2200      	movs	r2, #0
 8004726:	4618      	mov	r0, r3
 8004728:	4611      	mov	r1, r2
 800472a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800472e:	623b      	str	r3, [r7, #32]
 8004730:	2300      	movs	r3, #0
 8004732:	627b      	str	r3, [r7, #36]	@ 0x24
 8004734:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004738:	4642      	mov	r2, r8
 800473a:	464b      	mov	r3, r9
 800473c:	f04f 0000 	mov.w	r0, #0
 8004740:	f04f 0100 	mov.w	r1, #0
 8004744:	0159      	lsls	r1, r3, #5
 8004746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800474a:	0150      	lsls	r0, r2, #5
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4641      	mov	r1, r8
 8004752:	ebb2 0a01 	subs.w	sl, r2, r1
 8004756:	4649      	mov	r1, r9
 8004758:	eb63 0b01 	sbc.w	fp, r3, r1
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004768:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800476c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004770:	ebb2 040a 	subs.w	r4, r2, sl
 8004774:	eb63 050b 	sbc.w	r5, r3, fp
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	00eb      	lsls	r3, r5, #3
 8004782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004786:	00e2      	lsls	r2, r4, #3
 8004788:	4614      	mov	r4, r2
 800478a:	461d      	mov	r5, r3
 800478c:	4643      	mov	r3, r8
 800478e:	18e3      	adds	r3, r4, r3
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	464b      	mov	r3, r9
 8004794:	eb45 0303 	adc.w	r3, r5, r3
 8004798:	607b      	str	r3, [r7, #4]
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047a6:	4629      	mov	r1, r5
 80047a8:	028b      	lsls	r3, r1, #10
 80047aa:	4621      	mov	r1, r4
 80047ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047b0:	4621      	mov	r1, r4
 80047b2:	028a      	lsls	r2, r1, #10
 80047b4:	4610      	mov	r0, r2
 80047b6:	4619      	mov	r1, r3
 80047b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047ba:	2200      	movs	r2, #0
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	61fa      	str	r2, [r7, #28]
 80047c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047c4:	f7fc fa60 	bl	8000c88 <__aeabi_uldivmod>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4613      	mov	r3, r2
 80047ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	0c1b      	lsrs	r3, r3, #16
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	3301      	adds	r3, #1
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80047e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047ea:	e002      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047ec:	4b05      	ldr	r3, [pc, #20]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x204>)
 80047ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3750      	adds	r7, #80	@ 0x50
 80047f8:	46bd      	mov	sp, r7
 80047fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047fe:	bf00      	nop
 8004800:	40023800 	.word	0x40023800
 8004804:	00f42400 	.word	0x00f42400
 8004808:	007a1200 	.word	0x007a1200

0800480c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004810:	4b03      	ldr	r3, [pc, #12]	@ (8004820 <HAL_RCC_GetHCLKFreq+0x14>)
 8004812:	681b      	ldr	r3, [r3, #0]
}
 8004814:	4618      	mov	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	20000078 	.word	0x20000078

08004824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004828:	f7ff fff0 	bl	800480c <HAL_RCC_GetHCLKFreq>
 800482c:	4602      	mov	r2, r0
 800482e:	4b05      	ldr	r3, [pc, #20]	@ (8004844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	0a9b      	lsrs	r3, r3, #10
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	4903      	ldr	r1, [pc, #12]	@ (8004848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800483a:	5ccb      	ldrb	r3, [r1, r3]
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40023800 	.word	0x40023800
 8004848:	0800af38 	.word	0x0800af38

0800484c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004850:	f7ff ffdc 	bl	800480c <HAL_RCC_GetHCLKFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	4b05      	ldr	r3, [pc, #20]	@ (800486c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	0b5b      	lsrs	r3, r3, #13
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	4903      	ldr	r1, [pc, #12]	@ (8004870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004862:	5ccb      	ldrb	r3, [r1, r3]
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40023800 	.word	0x40023800
 8004870:	0800af38 	.word	0x0800af38

08004874 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d105      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004898:	2b00      	cmp	r3, #0
 800489a:	d035      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800489c:	4b62      	ldr	r3, [pc, #392]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800489e:	2200      	movs	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048a2:	f7fd fd9f 	bl	80023e4 <HAL_GetTick>
 80048a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048a8:	e008      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048aa:	f7fd fd9b 	bl	80023e4 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e0b0      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048bc:	4b5b      	ldr	r3, [pc, #364]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f0      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	019a      	lsls	r2, r3, #6
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	071b      	lsls	r3, r3, #28
 80048d4:	4955      	ldr	r1, [pc, #340]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048dc:	4b52      	ldr	r3, [pc, #328]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80048de:	2201      	movs	r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048e2:	f7fd fd7f 	bl	80023e4 <HAL_GetTick>
 80048e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048e8:	e008      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048ea:	f7fd fd7b 	bl	80023e4 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e090      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048fc:	4b4b      	ldr	r3, [pc, #300]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 8083 	beq.w	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004916:	2300      	movs	r3, #0
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	4b44      	ldr	r3, [pc, #272]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491e:	4a43      	ldr	r2, [pc, #268]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004924:	6413      	str	r3, [r2, #64]	@ 0x40
 8004926:	4b41      	ldr	r3, [pc, #260]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004932:	4b3f      	ldr	r3, [pc, #252]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a3e      	ldr	r2, [pc, #248]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800493c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800493e:	f7fd fd51 	bl	80023e4 <HAL_GetTick>
 8004942:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004944:	e008      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004946:	f7fd fd4d 	bl	80023e4 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e062      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004958:	4b35      	ldr	r3, [pc, #212]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f0      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004964:	4b31      	ldr	r3, [pc, #196]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004968:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800496c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d02f      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	429a      	cmp	r2, r3
 8004980:	d028      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004982:	4b2a      	ldr	r3, [pc, #168]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800498a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800498c:	4b29      	ldr	r3, [pc, #164]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004992:	4b28      	ldr	r3, [pc, #160]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004998:	4a24      	ldr	r2, [pc, #144]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800499e:	4b23      	ldr	r3, [pc, #140]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d114      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80049aa:	f7fd fd1b 	bl	80023e4 <HAL_GetTick>
 80049ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b0:	e00a      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b2:	f7fd fd17 	bl	80023e4 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e02a      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c8:	4b18      	ldr	r3, [pc, #96]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0ee      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049e0:	d10d      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80049e2:	4b12      	ldr	r3, [pc, #72]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80049f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049f6:	490d      	ldr	r1, [pc, #52]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	608b      	str	r3, [r1, #8]
 80049fc:	e005      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80049fe:	4b0b      	ldr	r3, [pc, #44]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	4a0a      	ldr	r2, [pc, #40]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a04:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004a08:	6093      	str	r3, [r2, #8]
 8004a0a:	4b08      	ldr	r3, [pc, #32]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a0c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a16:	4905      	ldr	r1, [pc, #20]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	42470068 	.word	0x42470068
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	40007000 	.word	0x40007000
 8004a34:	42470e40 	.word	0x42470e40

08004a38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d13f      	bne.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004a56:	4b24      	ldr	r3, [pc, #144]	@ (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d006      	beq.n	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a6c:	d12f      	bne.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8004aec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004a70:	617b      	str	r3, [r7, #20]
          break;
 8004a72:	e02f      	b.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a74:	4b1c      	ldr	r3, [pc, #112]	@ (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a80:	d108      	bne.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a82:	4b19      	ldr	r3, [pc, #100]	@ (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a8a:	4a19      	ldr	r2, [pc, #100]	@ (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	e007      	b.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a94:	4b14      	ldr	r3, [pc, #80]	@ (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a9c:	4a15      	ldr	r2, [pc, #84]	@ (8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004aa4:	4b10      	ldr	r3, [pc, #64]	@ (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aaa:	099b      	lsrs	r3, r3, #6
 8004aac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	fb02 f303 	mul.w	r3, r2, r3
 8004ab6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004abe:	0f1b      	lsrs	r3, r3, #28
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aca:	617b      	str	r3, [r7, #20]
          break;
 8004acc:	e002      	b.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]
          break;
 8004ad2:	bf00      	nop
        }
      }
      break;
 8004ad4:	e000      	b.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004ad6:	bf00      	nop
    }
  }
  return frequency;
 8004ad8:	697b      	ldr	r3, [r7, #20]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	00bb8000 	.word	0x00bb8000
 8004af0:	007a1200 	.word	0x007a1200
 8004af4:	00f42400 	.word	0x00f42400

08004af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e042      	b.n	8004b90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fd fa76 	bl	8002010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2224      	movs	r2, #36	@ 0x24
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fdbd 	bl	80056bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695a      	ldr	r2, [r3, #20]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	@ 0x28
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d175      	bne.n	8004ca4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_UART_Transmit+0x2c>
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e06e      	b.n	8004ca6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2221      	movs	r2, #33	@ 0x21
 8004bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bd6:	f7fd fc05 	bl	80023e4 <HAL_GetTick>
 8004bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	88fa      	ldrh	r2, [r7, #6]
 8004be0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	88fa      	ldrh	r2, [r7, #6]
 8004be6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bf0:	d108      	bne.n	8004c04 <HAL_UART_Transmit+0x6c>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d104      	bne.n	8004c04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	61bb      	str	r3, [r7, #24]
 8004c02:	e003      	b.n	8004c0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c0c:	e02e      	b.n	8004c6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2200      	movs	r2, #0
 8004c16:	2180      	movs	r1, #128	@ 0x80
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 fb1f 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e03a      	b.n	8004ca6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10b      	bne.n	8004c4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	3302      	adds	r3, #2
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	e007      	b.n	8004c5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	781a      	ldrb	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1cb      	bne.n	8004c0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2140      	movs	r1, #64	@ 0x40
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 faeb 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e006      	b.n	8004ca6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e000      	b.n	8004ca6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ca4:	2302      	movs	r3, #2
  }
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3720      	adds	r7, #32
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d112      	bne.n	8004cee <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_UART_Receive_IT+0x26>
 8004cce:	88fb      	ldrh	r3, [r7, #6]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e00b      	b.n	8004cf0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	68b9      	ldr	r1, [r7, #8]
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 fb12 	bl	800530e <UART_Start_Receive_IT>
 8004cea:	4603      	mov	r3, r0
 8004cec:	e000      	b.n	8004cf0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004cee:	2302      	movs	r3, #2
  }
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b0ba      	sub	sp, #232	@ 0xe8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10f      	bne.n	8004d5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_UART_IRQHandler+0x66>
 8004d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fbf2 	bl	8005540 <UART_Receive_IT>
      return;
 8004d5c:	e25b      	b.n	8005216 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 80de 	beq.w	8004f24 <HAL_UART_IRQHandler+0x22c>
 8004d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d106      	bne.n	8004d82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 80d1 	beq.w	8004f24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <HAL_UART_IRQHandler+0xae>
 8004d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9e:	f043 0201 	orr.w	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00b      	beq.n	8004dca <HAL_UART_IRQHandler+0xd2>
 8004db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc2:	f043 0202 	orr.w	r2, r3, #2
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00b      	beq.n	8004dee <HAL_UART_IRQHandler+0xf6>
 8004dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de6:	f043 0204 	orr.w	r2, r3, #4
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d011      	beq.n	8004e1e <HAL_UART_IRQHandler+0x126>
 8004dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d105      	bne.n	8004e12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d005      	beq.n	8004e1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e16:	f043 0208 	orr.w	r2, r3, #8
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 81f2 	beq.w	800520c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <HAL_UART_IRQHandler+0x14e>
 8004e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fb7d 	bl	8005540 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e50:	2b40      	cmp	r3, #64	@ 0x40
 8004e52:	bf0c      	ite	eq
 8004e54:	2301      	moveq	r3, #1
 8004e56:	2300      	movne	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d103      	bne.n	8004e72 <HAL_UART_IRQHandler+0x17a>
 8004e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d04f      	beq.n	8004f12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fa85 	bl	8005382 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e82:	2b40      	cmp	r3, #64	@ 0x40
 8004e84:	d141      	bne.n	8004f0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3314      	adds	r3, #20
 8004e8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ea0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3314      	adds	r3, #20
 8004eae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004eb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004ebe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004ec2:	e841 2300 	strex	r3, r2, [r1]
 8004ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004eca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1d9      	bne.n	8004e86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d013      	beq.n	8004f02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ede:	4a7e      	ldr	r2, [pc, #504]	@ (80050d8 <HAL_UART_IRQHandler+0x3e0>)
 8004ee0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fd fd10 	bl	800290c <HAL_DMA_Abort_IT>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d016      	beq.n	8004f20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004efc:	4610      	mov	r0, r2
 8004efe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f00:	e00e      	b.n	8004f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f994 	bl	8005230 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f08:	e00a      	b.n	8004f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f990 	bl	8005230 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f10:	e006      	b.n	8004f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f98c 	bl	8005230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f1e:	e175      	b.n	800520c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f20:	bf00      	nop
    return;
 8004f22:	e173      	b.n	800520c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	f040 814f 	bne.w	80051cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8148 	beq.w	80051cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 8141 	beq.w	80051cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60bb      	str	r3, [r7, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	60bb      	str	r3, [r7, #8]
 8004f5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6a:	2b40      	cmp	r3, #64	@ 0x40
 8004f6c:	f040 80b6 	bne.w	80050dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 8145 	beq.w	8005210 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	f080 813e 	bcs.w	8005210 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fa6:	f000 8088 	beq.w	80050ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	330c      	adds	r3, #12
 8004fb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004fc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004fd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004fe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1d9      	bne.n	8004faa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3314      	adds	r3, #20
 8004ffc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005006:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005008:	f023 0301 	bic.w	r3, r3, #1
 800500c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3314      	adds	r3, #20
 8005016:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800501a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800501e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005022:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005026:	e841 2300 	strex	r3, r2, [r1]
 800502a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800502c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1e1      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3314      	adds	r3, #20
 8005038:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800503c:	e853 3f00 	ldrex	r3, [r3]
 8005040:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005042:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005044:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005048:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3314      	adds	r3, #20
 8005052:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005056:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005058:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800505c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005064:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1e3      	bne.n	8005032 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	330c      	adds	r3, #12
 800507e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005088:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800508a:	f023 0310 	bic.w	r3, r3, #16
 800508e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	330c      	adds	r3, #12
 8005098:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800509c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800509e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050a4:	e841 2300 	strex	r3, r2, [r1]
 80050a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1e3      	bne.n	8005078 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fd fbb9 	bl	800282c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2202      	movs	r2, #2
 80050be:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	4619      	mov	r1, r3
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f8b7 	bl	8005244 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050d6:	e09b      	b.n	8005210 <HAL_UART_IRQHandler+0x518>
 80050d8:	08005449 	.word	0x08005449
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 808e 	beq.w	8005214 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80050f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 8089 	beq.w	8005214 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	330c      	adds	r3, #12
 8005108:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005114:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005118:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	330c      	adds	r3, #12
 8005122:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005126:	647a      	str	r2, [r7, #68]	@ 0x44
 8005128:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800512c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e3      	bne.n	8005102 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3314      	adds	r3, #20
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	623b      	str	r3, [r7, #32]
   return(result);
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	f023 0301 	bic.w	r3, r3, #1
 8005150:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3314      	adds	r3, #20
 800515a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800515e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005160:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800516c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1e3      	bne.n	800513a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0310 	bic.w	r3, r3, #16
 8005196:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	330c      	adds	r3, #12
 80051a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80051a4:	61fa      	str	r2, [r7, #28]
 80051a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	69b9      	ldr	r1, [r7, #24]
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	617b      	str	r3, [r7, #20]
   return(result);
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e3      	bne.n	8005180 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051c2:	4619      	mov	r1, r3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f83d 	bl	8005244 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051ca:	e023      	b.n	8005214 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d009      	beq.n	80051ec <HAL_UART_IRQHandler+0x4f4>
 80051d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f943 	bl	8005470 <UART_Transmit_IT>
    return;
 80051ea:	e014      	b.n	8005216 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00e      	beq.n	8005216 <HAL_UART_IRQHandler+0x51e>
 80051f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d008      	beq.n	8005216 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f983 	bl	8005510 <UART_EndTransmit_IT>
    return;
 800520a:	e004      	b.n	8005216 <HAL_UART_IRQHandler+0x51e>
    return;
 800520c:	bf00      	nop
 800520e:	e002      	b.n	8005216 <HAL_UART_IRQHandler+0x51e>
      return;
 8005210:	bf00      	nop
 8005212:	e000      	b.n	8005216 <HAL_UART_IRQHandler+0x51e>
      return;
 8005214:	bf00      	nop
  }
}
 8005216:	37e8      	adds	r7, #232	@ 0xe8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	4613      	mov	r3, r2
 800526a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800526c:	e03b      	b.n	80052e6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005274:	d037      	beq.n	80052e6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005276:	f7fd f8b5 	bl	80023e4 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	6a3a      	ldr	r2, [r7, #32]
 8005282:	429a      	cmp	r2, r3
 8005284:	d302      	bcc.n	800528c <UART_WaitOnFlagUntilTimeout+0x30>
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e03a      	b.n	8005306 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b00      	cmp	r3, #0
 800529c:	d023      	beq.n	80052e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b80      	cmp	r3, #128	@ 0x80
 80052a2:	d020      	beq.n	80052e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b40      	cmp	r3, #64	@ 0x40
 80052a8:	d01d      	beq.n	80052e6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d116      	bne.n	80052e6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80052b8:	2300      	movs	r3, #0
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 f857 	bl	8005382 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2208      	movs	r2, #8
 80052d8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e00f      	b.n	8005306 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4013      	ands	r3, r2
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	bf0c      	ite	eq
 80052f6:	2301      	moveq	r3, #1
 80052f8:	2300      	movne	r3, #0
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	429a      	cmp	r2, r3
 8005302:	d0b4      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	4613      	mov	r3, r2
 800531a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	88fa      	ldrh	r2, [r7, #6]
 8005326:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2222      	movs	r2, #34	@ 0x22
 8005338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005352:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695a      	ldr	r2, [r3, #20]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0220 	orr.w	r2, r2, #32
 8005372:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005382:	b480      	push	{r7}
 8005384:	b095      	sub	sp, #84	@ 0x54
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	330c      	adds	r3, #12
 8005390:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800539a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	330c      	adds	r3, #12
 80053a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80053ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e5      	bne.n	800538a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3314      	adds	r3, #20
 80053c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	f023 0301 	bic.w	r3, r3, #1
 80053d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3314      	adds	r3, #20
 80053dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e5      	bne.n	80053be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d119      	bne.n	800542e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	330c      	adds	r3, #12
 8005400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	e853 3f00 	ldrex	r3, [r3]
 8005408:	60bb      	str	r3, [r7, #8]
   return(result);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f023 0310 	bic.w	r3, r3, #16
 8005410:	647b      	str	r3, [r7, #68]	@ 0x44
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	330c      	adds	r3, #12
 8005418:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800541a:	61ba      	str	r2, [r7, #24]
 800541c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	6979      	ldr	r1, [r7, #20]
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	613b      	str	r3, [r7, #16]
   return(result);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1e5      	bne.n	80053fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800543c:	bf00      	nop
 800543e:	3754      	adds	r7, #84	@ 0x54
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005454:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f7ff fee4 	bl	8005230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005468:	bf00      	nop
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b21      	cmp	r3, #33	@ 0x21
 8005482:	d13e      	bne.n	8005502 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800548c:	d114      	bne.n	80054b8 <UART_Transmit_IT+0x48>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d110      	bne.n	80054b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	1c9a      	adds	r2, r3, #2
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	621a      	str	r2, [r3, #32]
 80054b6:	e008      	b.n	80054ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	1c59      	adds	r1, r3, #1
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6211      	str	r1, [r2, #32]
 80054c2:	781a      	ldrb	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	4619      	mov	r1, r3
 80054d8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10f      	bne.n	80054fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	e000      	b.n	8005504 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005502:	2302      	movs	r3, #2
  }
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005526:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2220      	movs	r2, #32
 800552c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff fe73 	bl	800521c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08c      	sub	sp, #48	@ 0x30
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b22      	cmp	r3, #34	@ 0x22
 8005552:	f040 80ae 	bne.w	80056b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800555e:	d117      	bne.n	8005590 <UART_Receive_IT+0x50>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d113      	bne.n	8005590 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005568:	2300      	movs	r3, #0
 800556a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005570:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	b29b      	uxth	r3, r3
 800557a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557e:	b29a      	uxth	r2, r3
 8005580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005582:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005588:	1c9a      	adds	r2, r3, #2
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	629a      	str	r2, [r3, #40]	@ 0x28
 800558e:	e026      	b.n	80055de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005594:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005596:	2300      	movs	r3, #0
 8005598:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a2:	d007      	beq.n	80055b4 <UART_Receive_IT+0x74>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <UART_Receive_IT+0x82>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d106      	bne.n	80055c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055be:	701a      	strb	r2, [r3, #0]
 80055c0:	e008      	b.n	80055d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	4619      	mov	r1, r3
 80055ec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d15d      	bne.n	80056ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0220 	bic.w	r2, r2, #32
 8005600:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005610:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695a      	ldr	r2, [r3, #20]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0201 	bic.w	r2, r2, #1
 8005620:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2220      	movs	r2, #32
 8005626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005634:	2b01      	cmp	r3, #1
 8005636:	d135      	bne.n	80056a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	330c      	adds	r3, #12
 8005644:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	613b      	str	r3, [r7, #16]
   return(result);
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f023 0310 	bic.w	r3, r3, #16
 8005654:	627b      	str	r3, [r7, #36]	@ 0x24
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	330c      	adds	r3, #12
 800565c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800565e:	623a      	str	r2, [r7, #32]
 8005660:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	69f9      	ldr	r1, [r7, #28]
 8005664:	6a3a      	ldr	r2, [r7, #32]
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	61bb      	str	r3, [r7, #24]
   return(result);
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e5      	bne.n	800563e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0310 	and.w	r3, r3, #16
 800567c:	2b10      	cmp	r3, #16
 800567e:	d10a      	bne.n	8005696 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005680:	2300      	movs	r3, #0
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800569a:	4619      	mov	r1, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff fdd1 	bl	8005244 <HAL_UARTEx_RxEventCallback>
 80056a2:	e002      	b.n	80056aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7fb ff77 	bl	8001598 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	e002      	b.n	80056b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e000      	b.n	80056b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80056b2:	2302      	movs	r3, #2
  }
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3730      	adds	r7, #48	@ 0x30
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056c0:	b0c0      	sub	sp, #256	@ 0x100
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80056d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d8:	68d9      	ldr	r1, [r3, #12]
 80056da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	ea40 0301 	orr.w	r3, r0, r1
 80056e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	431a      	orrs	r2, r3
 80056f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005714:	f021 010c 	bic.w	r1, r1, #12
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005722:	430b      	orrs	r3, r1
 8005724:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005736:	6999      	ldr	r1, [r3, #24]
 8005738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	ea40 0301 	orr.w	r3, r0, r1
 8005742:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	4b8f      	ldr	r3, [pc, #572]	@ (8005988 <UART_SetConfig+0x2cc>)
 800574c:	429a      	cmp	r2, r3
 800574e:	d005      	beq.n	800575c <UART_SetConfig+0xa0>
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	4b8d      	ldr	r3, [pc, #564]	@ (800598c <UART_SetConfig+0x2d0>)
 8005758:	429a      	cmp	r2, r3
 800575a:	d104      	bne.n	8005766 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800575c:	f7ff f876 	bl	800484c <HAL_RCC_GetPCLK2Freq>
 8005760:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005764:	e003      	b.n	800576e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005766:	f7ff f85d 	bl	8004824 <HAL_RCC_GetPCLK1Freq>
 800576a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800576e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005778:	f040 810c 	bne.w	8005994 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800577c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005780:	2200      	movs	r2, #0
 8005782:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005786:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800578a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800578e:	4622      	mov	r2, r4
 8005790:	462b      	mov	r3, r5
 8005792:	1891      	adds	r1, r2, r2
 8005794:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005796:	415b      	adcs	r3, r3
 8005798:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800579a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800579e:	4621      	mov	r1, r4
 80057a0:	eb12 0801 	adds.w	r8, r2, r1
 80057a4:	4629      	mov	r1, r5
 80057a6:	eb43 0901 	adc.w	r9, r3, r1
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	f04f 0300 	mov.w	r3, #0
 80057b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057be:	4690      	mov	r8, r2
 80057c0:	4699      	mov	r9, r3
 80057c2:	4623      	mov	r3, r4
 80057c4:	eb18 0303 	adds.w	r3, r8, r3
 80057c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057cc:	462b      	mov	r3, r5
 80057ce:	eb49 0303 	adc.w	r3, r9, r3
 80057d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80057e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80057e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80057ea:	460b      	mov	r3, r1
 80057ec:	18db      	adds	r3, r3, r3
 80057ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80057f0:	4613      	mov	r3, r2
 80057f2:	eb42 0303 	adc.w	r3, r2, r3
 80057f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80057f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80057fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005800:	f7fb fa42 	bl	8000c88 <__aeabi_uldivmod>
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	4b61      	ldr	r3, [pc, #388]	@ (8005990 <UART_SetConfig+0x2d4>)
 800580a:	fba3 2302 	umull	r2, r3, r3, r2
 800580e:	095b      	lsrs	r3, r3, #5
 8005810:	011c      	lsls	r4, r3, #4
 8005812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005816:	2200      	movs	r2, #0
 8005818:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800581c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005820:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005824:	4642      	mov	r2, r8
 8005826:	464b      	mov	r3, r9
 8005828:	1891      	adds	r1, r2, r2
 800582a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800582c:	415b      	adcs	r3, r3
 800582e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005830:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005834:	4641      	mov	r1, r8
 8005836:	eb12 0a01 	adds.w	sl, r2, r1
 800583a:	4649      	mov	r1, r9
 800583c:	eb43 0b01 	adc.w	fp, r3, r1
 8005840:	f04f 0200 	mov.w	r2, #0
 8005844:	f04f 0300 	mov.w	r3, #0
 8005848:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800584c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005850:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005854:	4692      	mov	sl, r2
 8005856:	469b      	mov	fp, r3
 8005858:	4643      	mov	r3, r8
 800585a:	eb1a 0303 	adds.w	r3, sl, r3
 800585e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005862:	464b      	mov	r3, r9
 8005864:	eb4b 0303 	adc.w	r3, fp, r3
 8005868:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005878:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800587c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005880:	460b      	mov	r3, r1
 8005882:	18db      	adds	r3, r3, r3
 8005884:	643b      	str	r3, [r7, #64]	@ 0x40
 8005886:	4613      	mov	r3, r2
 8005888:	eb42 0303 	adc.w	r3, r2, r3
 800588c:	647b      	str	r3, [r7, #68]	@ 0x44
 800588e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005892:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005896:	f7fb f9f7 	bl	8000c88 <__aeabi_uldivmod>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	4611      	mov	r1, r2
 80058a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005990 <UART_SetConfig+0x2d4>)
 80058a2:	fba3 2301 	umull	r2, r3, r3, r1
 80058a6:	095b      	lsrs	r3, r3, #5
 80058a8:	2264      	movs	r2, #100	@ 0x64
 80058aa:	fb02 f303 	mul.w	r3, r2, r3
 80058ae:	1acb      	subs	r3, r1, r3
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80058b6:	4b36      	ldr	r3, [pc, #216]	@ (8005990 <UART_SetConfig+0x2d4>)
 80058b8:	fba3 2302 	umull	r2, r3, r3, r2
 80058bc:	095b      	lsrs	r3, r3, #5
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80058c4:	441c      	add	r4, r3
 80058c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80058d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80058d8:	4642      	mov	r2, r8
 80058da:	464b      	mov	r3, r9
 80058dc:	1891      	adds	r1, r2, r2
 80058de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80058e0:	415b      	adcs	r3, r3
 80058e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80058e8:	4641      	mov	r1, r8
 80058ea:	1851      	adds	r1, r2, r1
 80058ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80058ee:	4649      	mov	r1, r9
 80058f0:	414b      	adcs	r3, r1
 80058f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	f04f 0300 	mov.w	r3, #0
 80058fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005900:	4659      	mov	r1, fp
 8005902:	00cb      	lsls	r3, r1, #3
 8005904:	4651      	mov	r1, sl
 8005906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800590a:	4651      	mov	r1, sl
 800590c:	00ca      	lsls	r2, r1, #3
 800590e:	4610      	mov	r0, r2
 8005910:	4619      	mov	r1, r3
 8005912:	4603      	mov	r3, r0
 8005914:	4642      	mov	r2, r8
 8005916:	189b      	adds	r3, r3, r2
 8005918:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800591c:	464b      	mov	r3, r9
 800591e:	460a      	mov	r2, r1
 8005920:	eb42 0303 	adc.w	r3, r2, r3
 8005924:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005934:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005938:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800593c:	460b      	mov	r3, r1
 800593e:	18db      	adds	r3, r3, r3
 8005940:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005942:	4613      	mov	r3, r2
 8005944:	eb42 0303 	adc.w	r3, r2, r3
 8005948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800594a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800594e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005952:	f7fb f999 	bl	8000c88 <__aeabi_uldivmod>
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	4b0d      	ldr	r3, [pc, #52]	@ (8005990 <UART_SetConfig+0x2d4>)
 800595c:	fba3 1302 	umull	r1, r3, r3, r2
 8005960:	095b      	lsrs	r3, r3, #5
 8005962:	2164      	movs	r1, #100	@ 0x64
 8005964:	fb01 f303 	mul.w	r3, r1, r3
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	3332      	adds	r3, #50	@ 0x32
 800596e:	4a08      	ldr	r2, [pc, #32]	@ (8005990 <UART_SetConfig+0x2d4>)
 8005970:	fba2 2303 	umull	r2, r3, r2, r3
 8005974:	095b      	lsrs	r3, r3, #5
 8005976:	f003 0207 	and.w	r2, r3, #7
 800597a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4422      	add	r2, r4
 8005982:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005984:	e106      	b.n	8005b94 <UART_SetConfig+0x4d8>
 8005986:	bf00      	nop
 8005988:	40011000 	.word	0x40011000
 800598c:	40011400 	.word	0x40011400
 8005990:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005998:	2200      	movs	r2, #0
 800599a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800599e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80059a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80059a6:	4642      	mov	r2, r8
 80059a8:	464b      	mov	r3, r9
 80059aa:	1891      	adds	r1, r2, r2
 80059ac:	6239      	str	r1, [r7, #32]
 80059ae:	415b      	adcs	r3, r3
 80059b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059b6:	4641      	mov	r1, r8
 80059b8:	1854      	adds	r4, r2, r1
 80059ba:	4649      	mov	r1, r9
 80059bc:	eb43 0501 	adc.w	r5, r3, r1
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	00eb      	lsls	r3, r5, #3
 80059ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059ce:	00e2      	lsls	r2, r4, #3
 80059d0:	4614      	mov	r4, r2
 80059d2:	461d      	mov	r5, r3
 80059d4:	4643      	mov	r3, r8
 80059d6:	18e3      	adds	r3, r4, r3
 80059d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059dc:	464b      	mov	r3, r9
 80059de:	eb45 0303 	adc.w	r3, r5, r3
 80059e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80059e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a02:	4629      	mov	r1, r5
 8005a04:	008b      	lsls	r3, r1, #2
 8005a06:	4621      	mov	r1, r4
 8005a08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	008a      	lsls	r2, r1, #2
 8005a10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a14:	f7fb f938 	bl	8000c88 <__aeabi_uldivmod>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4b60      	ldr	r3, [pc, #384]	@ (8005ba0 <UART_SetConfig+0x4e4>)
 8005a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	011c      	lsls	r4, r3, #4
 8005a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a38:	4642      	mov	r2, r8
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	1891      	adds	r1, r2, r2
 8005a3e:	61b9      	str	r1, [r7, #24]
 8005a40:	415b      	adcs	r3, r3
 8005a42:	61fb      	str	r3, [r7, #28]
 8005a44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a48:	4641      	mov	r1, r8
 8005a4a:	1851      	adds	r1, r2, r1
 8005a4c:	6139      	str	r1, [r7, #16]
 8005a4e:	4649      	mov	r1, r9
 8005a50:	414b      	adcs	r3, r1
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a60:	4659      	mov	r1, fp
 8005a62:	00cb      	lsls	r3, r1, #3
 8005a64:	4651      	mov	r1, sl
 8005a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a6a:	4651      	mov	r1, sl
 8005a6c:	00ca      	lsls	r2, r1, #3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	4619      	mov	r1, r3
 8005a72:	4603      	mov	r3, r0
 8005a74:	4642      	mov	r2, r8
 8005a76:	189b      	adds	r3, r3, r2
 8005a78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a7c:	464b      	mov	r3, r9
 8005a7e:	460a      	mov	r2, r1
 8005a80:	eb42 0303 	adc.w	r3, r2, r3
 8005a84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a94:	f04f 0200 	mov.w	r2, #0
 8005a98:	f04f 0300 	mov.w	r3, #0
 8005a9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	008b      	lsls	r3, r1, #2
 8005aa4:	4641      	mov	r1, r8
 8005aa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aaa:	4641      	mov	r1, r8
 8005aac:	008a      	lsls	r2, r1, #2
 8005aae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005ab2:	f7fb f8e9 	bl	8000c88 <__aeabi_uldivmod>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4611      	mov	r1, r2
 8005abc:	4b38      	ldr	r3, [pc, #224]	@ (8005ba0 <UART_SetConfig+0x4e4>)
 8005abe:	fba3 2301 	umull	r2, r3, r3, r1
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	2264      	movs	r2, #100	@ 0x64
 8005ac6:	fb02 f303 	mul.w	r3, r2, r3
 8005aca:	1acb      	subs	r3, r1, r3
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	3332      	adds	r3, #50	@ 0x32
 8005ad0:	4a33      	ldr	r2, [pc, #204]	@ (8005ba0 <UART_SetConfig+0x4e4>)
 8005ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005adc:	441c      	add	r4, r3
 8005ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ae6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ae8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005aec:	4642      	mov	r2, r8
 8005aee:	464b      	mov	r3, r9
 8005af0:	1891      	adds	r1, r2, r2
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	415b      	adcs	r3, r3
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005afc:	4641      	mov	r1, r8
 8005afe:	1851      	adds	r1, r2, r1
 8005b00:	6039      	str	r1, [r7, #0]
 8005b02:	4649      	mov	r1, r9
 8005b04:	414b      	adcs	r3, r1
 8005b06:	607b      	str	r3, [r7, #4]
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	f04f 0300 	mov.w	r3, #0
 8005b10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b14:	4659      	mov	r1, fp
 8005b16:	00cb      	lsls	r3, r1, #3
 8005b18:	4651      	mov	r1, sl
 8005b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b1e:	4651      	mov	r1, sl
 8005b20:	00ca      	lsls	r2, r1, #3
 8005b22:	4610      	mov	r0, r2
 8005b24:	4619      	mov	r1, r3
 8005b26:	4603      	mov	r3, r0
 8005b28:	4642      	mov	r2, r8
 8005b2a:	189b      	adds	r3, r3, r2
 8005b2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b2e:	464b      	mov	r3, r9
 8005b30:	460a      	mov	r2, r1
 8005b32:	eb42 0303 	adc.w	r3, r2, r3
 8005b36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b42:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b50:	4649      	mov	r1, r9
 8005b52:	008b      	lsls	r3, r1, #2
 8005b54:	4641      	mov	r1, r8
 8005b56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b5a:	4641      	mov	r1, r8
 8005b5c:	008a      	lsls	r2, r1, #2
 8005b5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b62:	f7fb f891 	bl	8000c88 <__aeabi_uldivmod>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba0 <UART_SetConfig+0x4e4>)
 8005b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	2164      	movs	r1, #100	@ 0x64
 8005b74:	fb01 f303 	mul.w	r3, r1, r3
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	3332      	adds	r3, #50	@ 0x32
 8005b7e:	4a08      	ldr	r2, [pc, #32]	@ (8005ba0 <UART_SetConfig+0x4e4>)
 8005b80:	fba2 2303 	umull	r2, r3, r2, r3
 8005b84:	095b      	lsrs	r3, r3, #5
 8005b86:	f003 020f 	and.w	r2, r3, #15
 8005b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4422      	add	r2, r4
 8005b92:	609a      	str	r2, [r3, #8]
}
 8005b94:	bf00      	nop
 8005b96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ba0:	51eb851f 	.word	0x51eb851f

08005ba4 <arm_biquad_cascade_df1_init_f32>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	6082      	str	r2, [r0, #8]
 8005baa:	6001      	str	r1, [r0, #0]
 8005bac:	461d      	mov	r5, r3
 8005bae:	010a      	lsls	r2, r1, #4
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	f001 f994 	bl	8006ee0 <memset>
 8005bb8:	6065      	str	r5, [r4, #4]
 8005bba:	bd38      	pop	{r3, r4, r5, pc}

08005bbc <arm_biquad_cascade_df1_f32>:
 8005bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bc0:	ed2d 8b02 	vpush	{d8}
 8005bc4:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005bc8:	6886      	ldr	r6, [r0, #8]
 8005bca:	6845      	ldr	r5, [r0, #4]
 8005bcc:	6807      	ldr	r7, [r0, #0]
 8005bce:	4696      	mov	lr, r2
 8005bd0:	ea4f 180c 	mov.w	r8, ip, lsl #4
 8005bd4:	f003 0203 	and.w	r2, r3, #3
 8005bd8:	eb0e 0908 	add.w	r9, lr, r8
 8005bdc:	3614      	adds	r6, #20
 8005bde:	3510      	adds	r5, #16
 8005be0:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 8005be4:	ed56 1a04 	vldr	s3, [r6, #-16]
 8005be8:	ed16 1a03 	vldr	s2, [r6, #-12]
 8005bec:	ed56 0a02 	vldr	s1, [r6, #-8]
 8005bf0:	ed16 0a01 	vldr	s0, [r6, #-4]
 8005bf4:	ed15 8a04 	vldr	s16, [r5, #-16]
 8005bf8:	ed55 8a03 	vldr	s17, [r5, #-12]
 8005bfc:	ed15 7a02 	vldr	s14, [r5, #-8]
 8005c00:	ed55 7a01 	vldr	s15, [r5, #-4]
 8005c04:	f1bc 0f00 	cmp.w	ip, #0
 8005c08:	f000 80a5 	beq.w	8005d56 <arm_biquad_cascade_df1_f32+0x19a>
 8005c0c:	f101 0010 	add.w	r0, r1, #16
 8005c10:	f10e 0310 	add.w	r3, lr, #16
 8005c14:	4664      	mov	r4, ip
 8005c16:	ed50 3a04 	vldr	s7, [r0, #-16]
 8005c1a:	ee21 6a88 	vmul.f32	s12, s3, s16
 8005c1e:	ee22 5a23 	vmul.f32	s10, s4, s7
 8005c22:	ee61 8a28 	vmul.f32	s17, s2, s17
 8005c26:	ee35 6a06 	vadd.f32	s12, s10, s12
 8005c2a:	ee60 6a87 	vmul.f32	s13, s1, s14
 8005c2e:	ee36 6a28 	vadd.f32	s12, s12, s17
 8005c32:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005c36:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005c3a:	ee61 6aa3 	vmul.f32	s13, s3, s7
 8005c3e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8005c42:	ee21 8a08 	vmul.f32	s16, s2, s16
 8005c46:	ed43 7a04 	vstr	s15, [r3, #-16]
 8005c4a:	ed50 2a03 	vldr	s5, [r0, #-12]
 8005c4e:	ee22 6a22 	vmul.f32	s12, s4, s5
 8005c52:	ee60 5aa7 	vmul.f32	s11, s1, s15
 8005c56:	ee36 6a26 	vadd.f32	s12, s12, s13
 8005c5a:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005c5e:	ee76 6a08 	vadd.f32	s13, s12, s16
 8005c62:	ee21 3aa2 	vmul.f32	s6, s3, s5
 8005c66:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8005c6a:	ee21 8a23 	vmul.f32	s16, s2, s7
 8005c6e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005c72:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005c76:	ed03 7a03 	vstr	s14, [r3, #-12]
 8005c7a:	ed50 8a02 	vldr	s17, [r0, #-8]
 8005c7e:	ee62 3a28 	vmul.f32	s7, s4, s17
 8005c82:	ee20 6a87 	vmul.f32	s12, s1, s14
 8005c86:	ee33 3a83 	vadd.f32	s6, s7, s6
 8005c8a:	ee21 4aa8 	vmul.f32	s8, s3, s17
 8005c8e:	ee73 6a08 	vadd.f32	s13, s6, s16
 8005c92:	ee61 2a22 	vmul.f32	s5, s2, s5
 8005c96:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005c9a:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca2:	3c01      	subs	r4, #1
 8005ca4:	ed43 7a02 	vstr	s15, [r3, #-8]
 8005ca8:	ed10 8a01 	vldr	s16, [r0, #-4]
 8005cac:	ee62 3a08 	vmul.f32	s7, s4, s16
 8005cb0:	ee60 6aa7 	vmul.f32	s13, s1, s15
 8005cb4:	ee73 3a84 	vadd.f32	s7, s7, s8
 8005cb8:	f100 0010 	add.w	r0, r0, #16
 8005cbc:	ee33 4aa2 	vadd.f32	s8, s7, s5
 8005cc0:	f103 0310 	add.w	r3, r3, #16
 8005cc4:	ee34 4a26 	vadd.f32	s8, s8, s13
 8005cc8:	ee34 7a07 	vadd.f32	s14, s8, s14
 8005ccc:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 8005cd0:	d1a1      	bne.n	8005c16 <arm_biquad_cascade_df1_f32+0x5a>
 8005cd2:	4441      	add	r1, r8
 8005cd4:	4648      	mov	r0, r9
 8005cd6:	b3aa      	cbz	r2, 8005d44 <arm_biquad_cascade_df1_f32+0x188>
 8005cd8:	4613      	mov	r3, r2
 8005cda:	e003      	b.n	8005ce4 <arm_biquad_cascade_df1_f32+0x128>
 8005cdc:	eeb0 7a45 	vmov.f32	s14, s10
 8005ce0:	eeb0 8a43 	vmov.f32	s16, s6
 8005ce4:	ecb1 3a01 	vldmia	r1!, {s6}
 8005ce8:	ee21 6a88 	vmul.f32	s12, s3, s16
 8005cec:	ee62 3a03 	vmul.f32	s7, s4, s6
 8005cf0:	ee61 8a28 	vmul.f32	s17, s2, s17
 8005cf4:	ee33 4a86 	vadd.f32	s8, s7, s12
 8005cf8:	ee60 4a87 	vmul.f32	s9, s1, s14
 8005cfc:	ee34 6a28 	vadd.f32	s12, s8, s17
 8005d00:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005d04:	ee76 4a24 	vadd.f32	s9, s12, s9
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8005d0e:	eef0 8a48 	vmov.f32	s17, s16
 8005d12:	eef0 7a47 	vmov.f32	s15, s14
 8005d16:	eca0 5a01 	vstmia	r0!, {s10}
 8005d1a:	d1df      	bne.n	8005cdc <arm_biquad_cascade_df1_f32+0x120>
 8005d1c:	3f01      	subs	r7, #1
 8005d1e:	ed05 3a04 	vstr	s6, [r5, #-16]
 8005d22:	ed05 8a03 	vstr	s16, [r5, #-12]
 8005d26:	ed05 5a02 	vstr	s10, [r5, #-8]
 8005d2a:	ed05 7a01 	vstr	s14, [r5, #-4]
 8005d2e:	f106 0614 	add.w	r6, r6, #20
 8005d32:	f105 0510 	add.w	r5, r5, #16
 8005d36:	4671      	mov	r1, lr
 8005d38:	f47f af52 	bne.w	8005be0 <arm_biquad_cascade_df1_f32+0x24>
 8005d3c:	ecbd 8b02 	vpop	{d8}
 8005d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d44:	eeb0 5a47 	vmov.f32	s10, s14
 8005d48:	eeb0 3a48 	vmov.f32	s6, s16
 8005d4c:	eeb0 7a67 	vmov.f32	s14, s15
 8005d50:	eeb0 8a68 	vmov.f32	s16, s17
 8005d54:	e7e2      	b.n	8005d1c <arm_biquad_cascade_df1_f32+0x160>
 8005d56:	4670      	mov	r0, lr
 8005d58:	e7bd      	b.n	8005cd6 <arm_biquad_cascade_df1_f32+0x11a>
 8005d5a:	bf00      	nop

08005d5c <__cvt>:
 8005d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	ec57 6b10 	vmov	r6, r7, d0
 8005d64:	2f00      	cmp	r7, #0
 8005d66:	460c      	mov	r4, r1
 8005d68:	4619      	mov	r1, r3
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	bfbb      	ittet	lt
 8005d6e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005d72:	461f      	movlt	r7, r3
 8005d74:	2300      	movge	r3, #0
 8005d76:	232d      	movlt	r3, #45	@ 0x2d
 8005d78:	700b      	strb	r3, [r1, #0]
 8005d7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d7c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005d80:	4691      	mov	r9, r2
 8005d82:	f023 0820 	bic.w	r8, r3, #32
 8005d86:	bfbc      	itt	lt
 8005d88:	4632      	movlt	r2, r6
 8005d8a:	4616      	movlt	r6, r2
 8005d8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d90:	d005      	beq.n	8005d9e <__cvt+0x42>
 8005d92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d96:	d100      	bne.n	8005d9a <__cvt+0x3e>
 8005d98:	3401      	adds	r4, #1
 8005d9a:	2102      	movs	r1, #2
 8005d9c:	e000      	b.n	8005da0 <__cvt+0x44>
 8005d9e:	2103      	movs	r1, #3
 8005da0:	ab03      	add	r3, sp, #12
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	ab02      	add	r3, sp, #8
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	ec47 6b10 	vmov	d0, r6, r7
 8005dac:	4653      	mov	r3, sl
 8005dae:	4622      	mov	r2, r4
 8005db0:	f001 f9b6 	bl	8007120 <_dtoa_r>
 8005db4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005db8:	4605      	mov	r5, r0
 8005dba:	d119      	bne.n	8005df0 <__cvt+0x94>
 8005dbc:	f019 0f01 	tst.w	r9, #1
 8005dc0:	d00e      	beq.n	8005de0 <__cvt+0x84>
 8005dc2:	eb00 0904 	add.w	r9, r0, r4
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	2300      	movs	r3, #0
 8005dca:	4630      	mov	r0, r6
 8005dcc:	4639      	mov	r1, r7
 8005dce:	f7fa fe7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dd2:	b108      	cbz	r0, 8005dd8 <__cvt+0x7c>
 8005dd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005dd8:	2230      	movs	r2, #48	@ 0x30
 8005dda:	9b03      	ldr	r3, [sp, #12]
 8005ddc:	454b      	cmp	r3, r9
 8005dde:	d31e      	bcc.n	8005e1e <__cvt+0xc2>
 8005de0:	9b03      	ldr	r3, [sp, #12]
 8005de2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005de4:	1b5b      	subs	r3, r3, r5
 8005de6:	4628      	mov	r0, r5
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	b004      	add	sp, #16
 8005dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005df4:	eb00 0904 	add.w	r9, r0, r4
 8005df8:	d1e5      	bne.n	8005dc6 <__cvt+0x6a>
 8005dfa:	7803      	ldrb	r3, [r0, #0]
 8005dfc:	2b30      	cmp	r3, #48	@ 0x30
 8005dfe:	d10a      	bne.n	8005e16 <__cvt+0xba>
 8005e00:	2200      	movs	r2, #0
 8005e02:	2300      	movs	r3, #0
 8005e04:	4630      	mov	r0, r6
 8005e06:	4639      	mov	r1, r7
 8005e08:	f7fa fe5e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e0c:	b918      	cbnz	r0, 8005e16 <__cvt+0xba>
 8005e0e:	f1c4 0401 	rsb	r4, r4, #1
 8005e12:	f8ca 4000 	str.w	r4, [sl]
 8005e16:	f8da 3000 	ldr.w	r3, [sl]
 8005e1a:	4499      	add	r9, r3
 8005e1c:	e7d3      	b.n	8005dc6 <__cvt+0x6a>
 8005e1e:	1c59      	adds	r1, r3, #1
 8005e20:	9103      	str	r1, [sp, #12]
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	e7d9      	b.n	8005dda <__cvt+0x7e>

08005e26 <__exponent>:
 8005e26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e28:	2900      	cmp	r1, #0
 8005e2a:	bfba      	itte	lt
 8005e2c:	4249      	neglt	r1, r1
 8005e2e:	232d      	movlt	r3, #45	@ 0x2d
 8005e30:	232b      	movge	r3, #43	@ 0x2b
 8005e32:	2909      	cmp	r1, #9
 8005e34:	7002      	strb	r2, [r0, #0]
 8005e36:	7043      	strb	r3, [r0, #1]
 8005e38:	dd29      	ble.n	8005e8e <__exponent+0x68>
 8005e3a:	f10d 0307 	add.w	r3, sp, #7
 8005e3e:	461d      	mov	r5, r3
 8005e40:	270a      	movs	r7, #10
 8005e42:	461a      	mov	r2, r3
 8005e44:	fbb1 f6f7 	udiv	r6, r1, r7
 8005e48:	fb07 1416 	mls	r4, r7, r6, r1
 8005e4c:	3430      	adds	r4, #48	@ 0x30
 8005e4e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005e52:	460c      	mov	r4, r1
 8005e54:	2c63      	cmp	r4, #99	@ 0x63
 8005e56:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	dcf1      	bgt.n	8005e42 <__exponent+0x1c>
 8005e5e:	3130      	adds	r1, #48	@ 0x30
 8005e60:	1e94      	subs	r4, r2, #2
 8005e62:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e66:	1c41      	adds	r1, r0, #1
 8005e68:	4623      	mov	r3, r4
 8005e6a:	42ab      	cmp	r3, r5
 8005e6c:	d30a      	bcc.n	8005e84 <__exponent+0x5e>
 8005e6e:	f10d 0309 	add.w	r3, sp, #9
 8005e72:	1a9b      	subs	r3, r3, r2
 8005e74:	42ac      	cmp	r4, r5
 8005e76:	bf88      	it	hi
 8005e78:	2300      	movhi	r3, #0
 8005e7a:	3302      	adds	r3, #2
 8005e7c:	4403      	add	r3, r0
 8005e7e:	1a18      	subs	r0, r3, r0
 8005e80:	b003      	add	sp, #12
 8005e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e84:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005e88:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e8c:	e7ed      	b.n	8005e6a <__exponent+0x44>
 8005e8e:	2330      	movs	r3, #48	@ 0x30
 8005e90:	3130      	adds	r1, #48	@ 0x30
 8005e92:	7083      	strb	r3, [r0, #2]
 8005e94:	70c1      	strb	r1, [r0, #3]
 8005e96:	1d03      	adds	r3, r0, #4
 8005e98:	e7f1      	b.n	8005e7e <__exponent+0x58>
	...

08005e9c <_printf_float>:
 8005e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea0:	b08d      	sub	sp, #52	@ 0x34
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005ea8:	4616      	mov	r6, r2
 8005eaa:	461f      	mov	r7, r3
 8005eac:	4605      	mov	r5, r0
 8005eae:	f001 f831 	bl	8006f14 <_localeconv_r>
 8005eb2:	6803      	ldr	r3, [r0, #0]
 8005eb4:	9304      	str	r3, [sp, #16]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fa f9da 	bl	8000270 <strlen>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ec0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ec4:	9005      	str	r0, [sp, #20]
 8005ec6:	3307      	adds	r3, #7
 8005ec8:	f023 0307 	bic.w	r3, r3, #7
 8005ecc:	f103 0208 	add.w	r2, r3, #8
 8005ed0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ed4:	f8d4 b000 	ldr.w	fp, [r4]
 8005ed8:	f8c8 2000 	str.w	r2, [r8]
 8005edc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ee0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ee4:	9307      	str	r3, [sp, #28]
 8005ee6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005eea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005eee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ef2:	4b9c      	ldr	r3, [pc, #624]	@ (8006164 <_printf_float+0x2c8>)
 8005ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef8:	f7fa fe18 	bl	8000b2c <__aeabi_dcmpun>
 8005efc:	bb70      	cbnz	r0, 8005f5c <_printf_float+0xc0>
 8005efe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f02:	4b98      	ldr	r3, [pc, #608]	@ (8006164 <_printf_float+0x2c8>)
 8005f04:	f04f 32ff 	mov.w	r2, #4294967295
 8005f08:	f7fa fdf2 	bl	8000af0 <__aeabi_dcmple>
 8005f0c:	bb30      	cbnz	r0, 8005f5c <_printf_float+0xc0>
 8005f0e:	2200      	movs	r2, #0
 8005f10:	2300      	movs	r3, #0
 8005f12:	4640      	mov	r0, r8
 8005f14:	4649      	mov	r1, r9
 8005f16:	f7fa fde1 	bl	8000adc <__aeabi_dcmplt>
 8005f1a:	b110      	cbz	r0, 8005f22 <_printf_float+0x86>
 8005f1c:	232d      	movs	r3, #45	@ 0x2d
 8005f1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f22:	4a91      	ldr	r2, [pc, #580]	@ (8006168 <_printf_float+0x2cc>)
 8005f24:	4b91      	ldr	r3, [pc, #580]	@ (800616c <_printf_float+0x2d0>)
 8005f26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005f2a:	bf94      	ite	ls
 8005f2c:	4690      	movls	r8, r2
 8005f2e:	4698      	movhi	r8, r3
 8005f30:	2303      	movs	r3, #3
 8005f32:	6123      	str	r3, [r4, #16]
 8005f34:	f02b 0304 	bic.w	r3, fp, #4
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	f04f 0900 	mov.w	r9, #0
 8005f3e:	9700      	str	r7, [sp, #0]
 8005f40:	4633      	mov	r3, r6
 8005f42:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005f44:	4621      	mov	r1, r4
 8005f46:	4628      	mov	r0, r5
 8005f48:	f000 f9d2 	bl	80062f0 <_printf_common>
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	f040 808d 	bne.w	800606c <_printf_float+0x1d0>
 8005f52:	f04f 30ff 	mov.w	r0, #4294967295
 8005f56:	b00d      	add	sp, #52	@ 0x34
 8005f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	464b      	mov	r3, r9
 8005f60:	4640      	mov	r0, r8
 8005f62:	4649      	mov	r1, r9
 8005f64:	f7fa fde2 	bl	8000b2c <__aeabi_dcmpun>
 8005f68:	b140      	cbz	r0, 8005f7c <_printf_float+0xe0>
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bfbc      	itt	lt
 8005f70:	232d      	movlt	r3, #45	@ 0x2d
 8005f72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005f76:	4a7e      	ldr	r2, [pc, #504]	@ (8006170 <_printf_float+0x2d4>)
 8005f78:	4b7e      	ldr	r3, [pc, #504]	@ (8006174 <_printf_float+0x2d8>)
 8005f7a:	e7d4      	b.n	8005f26 <_printf_float+0x8a>
 8005f7c:	6863      	ldr	r3, [r4, #4]
 8005f7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005f82:	9206      	str	r2, [sp, #24]
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	d13b      	bne.n	8006000 <_printf_float+0x164>
 8005f88:	2306      	movs	r3, #6
 8005f8a:	6063      	str	r3, [r4, #4]
 8005f8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005f90:	2300      	movs	r3, #0
 8005f92:	6022      	str	r2, [r4, #0]
 8005f94:	9303      	str	r3, [sp, #12]
 8005f96:	ab0a      	add	r3, sp, #40	@ 0x28
 8005f98:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005f9c:	ab09      	add	r3, sp, #36	@ 0x24
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	6861      	ldr	r1, [r4, #4]
 8005fa2:	ec49 8b10 	vmov	d0, r8, r9
 8005fa6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005faa:	4628      	mov	r0, r5
 8005fac:	f7ff fed6 	bl	8005d5c <__cvt>
 8005fb0:	9b06      	ldr	r3, [sp, #24]
 8005fb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005fb4:	2b47      	cmp	r3, #71	@ 0x47
 8005fb6:	4680      	mov	r8, r0
 8005fb8:	d129      	bne.n	800600e <_printf_float+0x172>
 8005fba:	1cc8      	adds	r0, r1, #3
 8005fbc:	db02      	blt.n	8005fc4 <_printf_float+0x128>
 8005fbe:	6863      	ldr	r3, [r4, #4]
 8005fc0:	4299      	cmp	r1, r3
 8005fc2:	dd41      	ble.n	8006048 <_printf_float+0x1ac>
 8005fc4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005fc8:	fa5f fa8a 	uxtb.w	sl, sl
 8005fcc:	3901      	subs	r1, #1
 8005fce:	4652      	mov	r2, sl
 8005fd0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005fd4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005fd6:	f7ff ff26 	bl	8005e26 <__exponent>
 8005fda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fdc:	1813      	adds	r3, r2, r0
 8005fde:	2a01      	cmp	r2, #1
 8005fe0:	4681      	mov	r9, r0
 8005fe2:	6123      	str	r3, [r4, #16]
 8005fe4:	dc02      	bgt.n	8005fec <_printf_float+0x150>
 8005fe6:	6822      	ldr	r2, [r4, #0]
 8005fe8:	07d2      	lsls	r2, r2, #31
 8005fea:	d501      	bpl.n	8005ff0 <_printf_float+0x154>
 8005fec:	3301      	adds	r3, #1
 8005fee:	6123      	str	r3, [r4, #16]
 8005ff0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0a2      	beq.n	8005f3e <_printf_float+0xa2>
 8005ff8:	232d      	movs	r3, #45	@ 0x2d
 8005ffa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ffe:	e79e      	b.n	8005f3e <_printf_float+0xa2>
 8006000:	9a06      	ldr	r2, [sp, #24]
 8006002:	2a47      	cmp	r2, #71	@ 0x47
 8006004:	d1c2      	bne.n	8005f8c <_printf_float+0xf0>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1c0      	bne.n	8005f8c <_printf_float+0xf0>
 800600a:	2301      	movs	r3, #1
 800600c:	e7bd      	b.n	8005f8a <_printf_float+0xee>
 800600e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006012:	d9db      	bls.n	8005fcc <_printf_float+0x130>
 8006014:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006018:	d118      	bne.n	800604c <_printf_float+0x1b0>
 800601a:	2900      	cmp	r1, #0
 800601c:	6863      	ldr	r3, [r4, #4]
 800601e:	dd0b      	ble.n	8006038 <_printf_float+0x19c>
 8006020:	6121      	str	r1, [r4, #16]
 8006022:	b913      	cbnz	r3, 800602a <_printf_float+0x18e>
 8006024:	6822      	ldr	r2, [r4, #0]
 8006026:	07d0      	lsls	r0, r2, #31
 8006028:	d502      	bpl.n	8006030 <_printf_float+0x194>
 800602a:	3301      	adds	r3, #1
 800602c:	440b      	add	r3, r1
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006032:	f04f 0900 	mov.w	r9, #0
 8006036:	e7db      	b.n	8005ff0 <_printf_float+0x154>
 8006038:	b913      	cbnz	r3, 8006040 <_printf_float+0x1a4>
 800603a:	6822      	ldr	r2, [r4, #0]
 800603c:	07d2      	lsls	r2, r2, #31
 800603e:	d501      	bpl.n	8006044 <_printf_float+0x1a8>
 8006040:	3302      	adds	r3, #2
 8006042:	e7f4      	b.n	800602e <_printf_float+0x192>
 8006044:	2301      	movs	r3, #1
 8006046:	e7f2      	b.n	800602e <_printf_float+0x192>
 8006048:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800604c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800604e:	4299      	cmp	r1, r3
 8006050:	db05      	blt.n	800605e <_printf_float+0x1c2>
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	6121      	str	r1, [r4, #16]
 8006056:	07d8      	lsls	r0, r3, #31
 8006058:	d5ea      	bpl.n	8006030 <_printf_float+0x194>
 800605a:	1c4b      	adds	r3, r1, #1
 800605c:	e7e7      	b.n	800602e <_printf_float+0x192>
 800605e:	2900      	cmp	r1, #0
 8006060:	bfd4      	ite	le
 8006062:	f1c1 0202 	rsble	r2, r1, #2
 8006066:	2201      	movgt	r2, #1
 8006068:	4413      	add	r3, r2
 800606a:	e7e0      	b.n	800602e <_printf_float+0x192>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	055a      	lsls	r2, r3, #21
 8006070:	d407      	bmi.n	8006082 <_printf_float+0x1e6>
 8006072:	6923      	ldr	r3, [r4, #16]
 8006074:	4642      	mov	r2, r8
 8006076:	4631      	mov	r1, r6
 8006078:	4628      	mov	r0, r5
 800607a:	47b8      	blx	r7
 800607c:	3001      	adds	r0, #1
 800607e:	d12b      	bne.n	80060d8 <_printf_float+0x23c>
 8006080:	e767      	b.n	8005f52 <_printf_float+0xb6>
 8006082:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006086:	f240 80dd 	bls.w	8006244 <_printf_float+0x3a8>
 800608a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800608e:	2200      	movs	r2, #0
 8006090:	2300      	movs	r3, #0
 8006092:	f7fa fd19 	bl	8000ac8 <__aeabi_dcmpeq>
 8006096:	2800      	cmp	r0, #0
 8006098:	d033      	beq.n	8006102 <_printf_float+0x266>
 800609a:	4a37      	ldr	r2, [pc, #220]	@ (8006178 <_printf_float+0x2dc>)
 800609c:	2301      	movs	r3, #1
 800609e:	4631      	mov	r1, r6
 80060a0:	4628      	mov	r0, r5
 80060a2:	47b8      	blx	r7
 80060a4:	3001      	adds	r0, #1
 80060a6:	f43f af54 	beq.w	8005f52 <_printf_float+0xb6>
 80060aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80060ae:	4543      	cmp	r3, r8
 80060b0:	db02      	blt.n	80060b8 <_printf_float+0x21c>
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	07d8      	lsls	r0, r3, #31
 80060b6:	d50f      	bpl.n	80060d8 <_printf_float+0x23c>
 80060b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060bc:	4631      	mov	r1, r6
 80060be:	4628      	mov	r0, r5
 80060c0:	47b8      	blx	r7
 80060c2:	3001      	adds	r0, #1
 80060c4:	f43f af45 	beq.w	8005f52 <_printf_float+0xb6>
 80060c8:	f04f 0900 	mov.w	r9, #0
 80060cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80060d0:	f104 0a1a 	add.w	sl, r4, #26
 80060d4:	45c8      	cmp	r8, r9
 80060d6:	dc09      	bgt.n	80060ec <_printf_float+0x250>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	079b      	lsls	r3, r3, #30
 80060dc:	f100 8103 	bmi.w	80062e6 <_printf_float+0x44a>
 80060e0:	68e0      	ldr	r0, [r4, #12]
 80060e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060e4:	4298      	cmp	r0, r3
 80060e6:	bfb8      	it	lt
 80060e8:	4618      	movlt	r0, r3
 80060ea:	e734      	b.n	8005f56 <_printf_float+0xba>
 80060ec:	2301      	movs	r3, #1
 80060ee:	4652      	mov	r2, sl
 80060f0:	4631      	mov	r1, r6
 80060f2:	4628      	mov	r0, r5
 80060f4:	47b8      	blx	r7
 80060f6:	3001      	adds	r0, #1
 80060f8:	f43f af2b 	beq.w	8005f52 <_printf_float+0xb6>
 80060fc:	f109 0901 	add.w	r9, r9, #1
 8006100:	e7e8      	b.n	80060d4 <_printf_float+0x238>
 8006102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006104:	2b00      	cmp	r3, #0
 8006106:	dc39      	bgt.n	800617c <_printf_float+0x2e0>
 8006108:	4a1b      	ldr	r2, [pc, #108]	@ (8006178 <_printf_float+0x2dc>)
 800610a:	2301      	movs	r3, #1
 800610c:	4631      	mov	r1, r6
 800610e:	4628      	mov	r0, r5
 8006110:	47b8      	blx	r7
 8006112:	3001      	adds	r0, #1
 8006114:	f43f af1d 	beq.w	8005f52 <_printf_float+0xb6>
 8006118:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800611c:	ea59 0303 	orrs.w	r3, r9, r3
 8006120:	d102      	bne.n	8006128 <_printf_float+0x28c>
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	07d9      	lsls	r1, r3, #31
 8006126:	d5d7      	bpl.n	80060d8 <_printf_float+0x23c>
 8006128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800612c:	4631      	mov	r1, r6
 800612e:	4628      	mov	r0, r5
 8006130:	47b8      	blx	r7
 8006132:	3001      	adds	r0, #1
 8006134:	f43f af0d 	beq.w	8005f52 <_printf_float+0xb6>
 8006138:	f04f 0a00 	mov.w	sl, #0
 800613c:	f104 0b1a 	add.w	fp, r4, #26
 8006140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006142:	425b      	negs	r3, r3
 8006144:	4553      	cmp	r3, sl
 8006146:	dc01      	bgt.n	800614c <_printf_float+0x2b0>
 8006148:	464b      	mov	r3, r9
 800614a:	e793      	b.n	8006074 <_printf_float+0x1d8>
 800614c:	2301      	movs	r3, #1
 800614e:	465a      	mov	r2, fp
 8006150:	4631      	mov	r1, r6
 8006152:	4628      	mov	r0, r5
 8006154:	47b8      	blx	r7
 8006156:	3001      	adds	r0, #1
 8006158:	f43f aefb 	beq.w	8005f52 <_printf_float+0xb6>
 800615c:	f10a 0a01 	add.w	sl, sl, #1
 8006160:	e7ee      	b.n	8006140 <_printf_float+0x2a4>
 8006162:	bf00      	nop
 8006164:	7fefffff 	.word	0x7fefffff
 8006168:	0800af48 	.word	0x0800af48
 800616c:	0800af4c 	.word	0x0800af4c
 8006170:	0800af50 	.word	0x0800af50
 8006174:	0800af54 	.word	0x0800af54
 8006178:	0800b2e8 	.word	0x0800b2e8
 800617c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800617e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006182:	4553      	cmp	r3, sl
 8006184:	bfa8      	it	ge
 8006186:	4653      	movge	r3, sl
 8006188:	2b00      	cmp	r3, #0
 800618a:	4699      	mov	r9, r3
 800618c:	dc36      	bgt.n	80061fc <_printf_float+0x360>
 800618e:	f04f 0b00 	mov.w	fp, #0
 8006192:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006196:	f104 021a 	add.w	r2, r4, #26
 800619a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800619c:	9306      	str	r3, [sp, #24]
 800619e:	eba3 0309 	sub.w	r3, r3, r9
 80061a2:	455b      	cmp	r3, fp
 80061a4:	dc31      	bgt.n	800620a <_printf_float+0x36e>
 80061a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061a8:	459a      	cmp	sl, r3
 80061aa:	dc3a      	bgt.n	8006222 <_printf_float+0x386>
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	07da      	lsls	r2, r3, #31
 80061b0:	d437      	bmi.n	8006222 <_printf_float+0x386>
 80061b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061b4:	ebaa 0903 	sub.w	r9, sl, r3
 80061b8:	9b06      	ldr	r3, [sp, #24]
 80061ba:	ebaa 0303 	sub.w	r3, sl, r3
 80061be:	4599      	cmp	r9, r3
 80061c0:	bfa8      	it	ge
 80061c2:	4699      	movge	r9, r3
 80061c4:	f1b9 0f00 	cmp.w	r9, #0
 80061c8:	dc33      	bgt.n	8006232 <_printf_float+0x396>
 80061ca:	f04f 0800 	mov.w	r8, #0
 80061ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061d2:	f104 0b1a 	add.w	fp, r4, #26
 80061d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061d8:	ebaa 0303 	sub.w	r3, sl, r3
 80061dc:	eba3 0309 	sub.w	r3, r3, r9
 80061e0:	4543      	cmp	r3, r8
 80061e2:	f77f af79 	ble.w	80060d8 <_printf_float+0x23c>
 80061e6:	2301      	movs	r3, #1
 80061e8:	465a      	mov	r2, fp
 80061ea:	4631      	mov	r1, r6
 80061ec:	4628      	mov	r0, r5
 80061ee:	47b8      	blx	r7
 80061f0:	3001      	adds	r0, #1
 80061f2:	f43f aeae 	beq.w	8005f52 <_printf_float+0xb6>
 80061f6:	f108 0801 	add.w	r8, r8, #1
 80061fa:	e7ec      	b.n	80061d6 <_printf_float+0x33a>
 80061fc:	4642      	mov	r2, r8
 80061fe:	4631      	mov	r1, r6
 8006200:	4628      	mov	r0, r5
 8006202:	47b8      	blx	r7
 8006204:	3001      	adds	r0, #1
 8006206:	d1c2      	bne.n	800618e <_printf_float+0x2f2>
 8006208:	e6a3      	b.n	8005f52 <_printf_float+0xb6>
 800620a:	2301      	movs	r3, #1
 800620c:	4631      	mov	r1, r6
 800620e:	4628      	mov	r0, r5
 8006210:	9206      	str	r2, [sp, #24]
 8006212:	47b8      	blx	r7
 8006214:	3001      	adds	r0, #1
 8006216:	f43f ae9c 	beq.w	8005f52 <_printf_float+0xb6>
 800621a:	9a06      	ldr	r2, [sp, #24]
 800621c:	f10b 0b01 	add.w	fp, fp, #1
 8006220:	e7bb      	b.n	800619a <_printf_float+0x2fe>
 8006222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006226:	4631      	mov	r1, r6
 8006228:	4628      	mov	r0, r5
 800622a:	47b8      	blx	r7
 800622c:	3001      	adds	r0, #1
 800622e:	d1c0      	bne.n	80061b2 <_printf_float+0x316>
 8006230:	e68f      	b.n	8005f52 <_printf_float+0xb6>
 8006232:	9a06      	ldr	r2, [sp, #24]
 8006234:	464b      	mov	r3, r9
 8006236:	4442      	add	r2, r8
 8006238:	4631      	mov	r1, r6
 800623a:	4628      	mov	r0, r5
 800623c:	47b8      	blx	r7
 800623e:	3001      	adds	r0, #1
 8006240:	d1c3      	bne.n	80061ca <_printf_float+0x32e>
 8006242:	e686      	b.n	8005f52 <_printf_float+0xb6>
 8006244:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006248:	f1ba 0f01 	cmp.w	sl, #1
 800624c:	dc01      	bgt.n	8006252 <_printf_float+0x3b6>
 800624e:	07db      	lsls	r3, r3, #31
 8006250:	d536      	bpl.n	80062c0 <_printf_float+0x424>
 8006252:	2301      	movs	r3, #1
 8006254:	4642      	mov	r2, r8
 8006256:	4631      	mov	r1, r6
 8006258:	4628      	mov	r0, r5
 800625a:	47b8      	blx	r7
 800625c:	3001      	adds	r0, #1
 800625e:	f43f ae78 	beq.w	8005f52 <_printf_float+0xb6>
 8006262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006266:	4631      	mov	r1, r6
 8006268:	4628      	mov	r0, r5
 800626a:	47b8      	blx	r7
 800626c:	3001      	adds	r0, #1
 800626e:	f43f ae70 	beq.w	8005f52 <_printf_float+0xb6>
 8006272:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006276:	2200      	movs	r2, #0
 8006278:	2300      	movs	r3, #0
 800627a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800627e:	f7fa fc23 	bl	8000ac8 <__aeabi_dcmpeq>
 8006282:	b9c0      	cbnz	r0, 80062b6 <_printf_float+0x41a>
 8006284:	4653      	mov	r3, sl
 8006286:	f108 0201 	add.w	r2, r8, #1
 800628a:	4631      	mov	r1, r6
 800628c:	4628      	mov	r0, r5
 800628e:	47b8      	blx	r7
 8006290:	3001      	adds	r0, #1
 8006292:	d10c      	bne.n	80062ae <_printf_float+0x412>
 8006294:	e65d      	b.n	8005f52 <_printf_float+0xb6>
 8006296:	2301      	movs	r3, #1
 8006298:	465a      	mov	r2, fp
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	f43f ae56 	beq.w	8005f52 <_printf_float+0xb6>
 80062a6:	f108 0801 	add.w	r8, r8, #1
 80062aa:	45d0      	cmp	r8, sl
 80062ac:	dbf3      	blt.n	8006296 <_printf_float+0x3fa>
 80062ae:	464b      	mov	r3, r9
 80062b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80062b4:	e6df      	b.n	8006076 <_printf_float+0x1da>
 80062b6:	f04f 0800 	mov.w	r8, #0
 80062ba:	f104 0b1a 	add.w	fp, r4, #26
 80062be:	e7f4      	b.n	80062aa <_printf_float+0x40e>
 80062c0:	2301      	movs	r3, #1
 80062c2:	4642      	mov	r2, r8
 80062c4:	e7e1      	b.n	800628a <_printf_float+0x3ee>
 80062c6:	2301      	movs	r3, #1
 80062c8:	464a      	mov	r2, r9
 80062ca:	4631      	mov	r1, r6
 80062cc:	4628      	mov	r0, r5
 80062ce:	47b8      	blx	r7
 80062d0:	3001      	adds	r0, #1
 80062d2:	f43f ae3e 	beq.w	8005f52 <_printf_float+0xb6>
 80062d6:	f108 0801 	add.w	r8, r8, #1
 80062da:	68e3      	ldr	r3, [r4, #12]
 80062dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80062de:	1a5b      	subs	r3, r3, r1
 80062e0:	4543      	cmp	r3, r8
 80062e2:	dcf0      	bgt.n	80062c6 <_printf_float+0x42a>
 80062e4:	e6fc      	b.n	80060e0 <_printf_float+0x244>
 80062e6:	f04f 0800 	mov.w	r8, #0
 80062ea:	f104 0919 	add.w	r9, r4, #25
 80062ee:	e7f4      	b.n	80062da <_printf_float+0x43e>

080062f0 <_printf_common>:
 80062f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062f4:	4616      	mov	r6, r2
 80062f6:	4698      	mov	r8, r3
 80062f8:	688a      	ldr	r2, [r1, #8]
 80062fa:	690b      	ldr	r3, [r1, #16]
 80062fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006300:	4293      	cmp	r3, r2
 8006302:	bfb8      	it	lt
 8006304:	4613      	movlt	r3, r2
 8006306:	6033      	str	r3, [r6, #0]
 8006308:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800630c:	4607      	mov	r7, r0
 800630e:	460c      	mov	r4, r1
 8006310:	b10a      	cbz	r2, 8006316 <_printf_common+0x26>
 8006312:	3301      	adds	r3, #1
 8006314:	6033      	str	r3, [r6, #0]
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	0699      	lsls	r1, r3, #26
 800631a:	bf42      	ittt	mi
 800631c:	6833      	ldrmi	r3, [r6, #0]
 800631e:	3302      	addmi	r3, #2
 8006320:	6033      	strmi	r3, [r6, #0]
 8006322:	6825      	ldr	r5, [r4, #0]
 8006324:	f015 0506 	ands.w	r5, r5, #6
 8006328:	d106      	bne.n	8006338 <_printf_common+0x48>
 800632a:	f104 0a19 	add.w	sl, r4, #25
 800632e:	68e3      	ldr	r3, [r4, #12]
 8006330:	6832      	ldr	r2, [r6, #0]
 8006332:	1a9b      	subs	r3, r3, r2
 8006334:	42ab      	cmp	r3, r5
 8006336:	dc26      	bgt.n	8006386 <_printf_common+0x96>
 8006338:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800633c:	6822      	ldr	r2, [r4, #0]
 800633e:	3b00      	subs	r3, #0
 8006340:	bf18      	it	ne
 8006342:	2301      	movne	r3, #1
 8006344:	0692      	lsls	r2, r2, #26
 8006346:	d42b      	bmi.n	80063a0 <_printf_common+0xb0>
 8006348:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800634c:	4641      	mov	r1, r8
 800634e:	4638      	mov	r0, r7
 8006350:	47c8      	blx	r9
 8006352:	3001      	adds	r0, #1
 8006354:	d01e      	beq.n	8006394 <_printf_common+0xa4>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	6922      	ldr	r2, [r4, #16]
 800635a:	f003 0306 	and.w	r3, r3, #6
 800635e:	2b04      	cmp	r3, #4
 8006360:	bf02      	ittt	eq
 8006362:	68e5      	ldreq	r5, [r4, #12]
 8006364:	6833      	ldreq	r3, [r6, #0]
 8006366:	1aed      	subeq	r5, r5, r3
 8006368:	68a3      	ldr	r3, [r4, #8]
 800636a:	bf0c      	ite	eq
 800636c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006370:	2500      	movne	r5, #0
 8006372:	4293      	cmp	r3, r2
 8006374:	bfc4      	itt	gt
 8006376:	1a9b      	subgt	r3, r3, r2
 8006378:	18ed      	addgt	r5, r5, r3
 800637a:	2600      	movs	r6, #0
 800637c:	341a      	adds	r4, #26
 800637e:	42b5      	cmp	r5, r6
 8006380:	d11a      	bne.n	80063b8 <_printf_common+0xc8>
 8006382:	2000      	movs	r0, #0
 8006384:	e008      	b.n	8006398 <_printf_common+0xa8>
 8006386:	2301      	movs	r3, #1
 8006388:	4652      	mov	r2, sl
 800638a:	4641      	mov	r1, r8
 800638c:	4638      	mov	r0, r7
 800638e:	47c8      	blx	r9
 8006390:	3001      	adds	r0, #1
 8006392:	d103      	bne.n	800639c <_printf_common+0xac>
 8006394:	f04f 30ff 	mov.w	r0, #4294967295
 8006398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639c:	3501      	adds	r5, #1
 800639e:	e7c6      	b.n	800632e <_printf_common+0x3e>
 80063a0:	18e1      	adds	r1, r4, r3
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	2030      	movs	r0, #48	@ 0x30
 80063a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063aa:	4422      	add	r2, r4
 80063ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80063b4:	3302      	adds	r3, #2
 80063b6:	e7c7      	b.n	8006348 <_printf_common+0x58>
 80063b8:	2301      	movs	r3, #1
 80063ba:	4622      	mov	r2, r4
 80063bc:	4641      	mov	r1, r8
 80063be:	4638      	mov	r0, r7
 80063c0:	47c8      	blx	r9
 80063c2:	3001      	adds	r0, #1
 80063c4:	d0e6      	beq.n	8006394 <_printf_common+0xa4>
 80063c6:	3601      	adds	r6, #1
 80063c8:	e7d9      	b.n	800637e <_printf_common+0x8e>
	...

080063cc <_printf_i>:
 80063cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063d0:	7e0f      	ldrb	r7, [r1, #24]
 80063d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063d4:	2f78      	cmp	r7, #120	@ 0x78
 80063d6:	4691      	mov	r9, r2
 80063d8:	4680      	mov	r8, r0
 80063da:	460c      	mov	r4, r1
 80063dc:	469a      	mov	sl, r3
 80063de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063e2:	d807      	bhi.n	80063f4 <_printf_i+0x28>
 80063e4:	2f62      	cmp	r7, #98	@ 0x62
 80063e6:	d80a      	bhi.n	80063fe <_printf_i+0x32>
 80063e8:	2f00      	cmp	r7, #0
 80063ea:	f000 80d2 	beq.w	8006592 <_printf_i+0x1c6>
 80063ee:	2f58      	cmp	r7, #88	@ 0x58
 80063f0:	f000 80b9 	beq.w	8006566 <_printf_i+0x19a>
 80063f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063fc:	e03a      	b.n	8006474 <_printf_i+0xa8>
 80063fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006402:	2b15      	cmp	r3, #21
 8006404:	d8f6      	bhi.n	80063f4 <_printf_i+0x28>
 8006406:	a101      	add	r1, pc, #4	@ (adr r1, 800640c <_printf_i+0x40>)
 8006408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800640c:	08006465 	.word	0x08006465
 8006410:	08006479 	.word	0x08006479
 8006414:	080063f5 	.word	0x080063f5
 8006418:	080063f5 	.word	0x080063f5
 800641c:	080063f5 	.word	0x080063f5
 8006420:	080063f5 	.word	0x080063f5
 8006424:	08006479 	.word	0x08006479
 8006428:	080063f5 	.word	0x080063f5
 800642c:	080063f5 	.word	0x080063f5
 8006430:	080063f5 	.word	0x080063f5
 8006434:	080063f5 	.word	0x080063f5
 8006438:	08006579 	.word	0x08006579
 800643c:	080064a3 	.word	0x080064a3
 8006440:	08006533 	.word	0x08006533
 8006444:	080063f5 	.word	0x080063f5
 8006448:	080063f5 	.word	0x080063f5
 800644c:	0800659b 	.word	0x0800659b
 8006450:	080063f5 	.word	0x080063f5
 8006454:	080064a3 	.word	0x080064a3
 8006458:	080063f5 	.word	0x080063f5
 800645c:	080063f5 	.word	0x080063f5
 8006460:	0800653b 	.word	0x0800653b
 8006464:	6833      	ldr	r3, [r6, #0]
 8006466:	1d1a      	adds	r2, r3, #4
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6032      	str	r2, [r6, #0]
 800646c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006470:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006474:	2301      	movs	r3, #1
 8006476:	e09d      	b.n	80065b4 <_printf_i+0x1e8>
 8006478:	6833      	ldr	r3, [r6, #0]
 800647a:	6820      	ldr	r0, [r4, #0]
 800647c:	1d19      	adds	r1, r3, #4
 800647e:	6031      	str	r1, [r6, #0]
 8006480:	0606      	lsls	r6, r0, #24
 8006482:	d501      	bpl.n	8006488 <_printf_i+0xbc>
 8006484:	681d      	ldr	r5, [r3, #0]
 8006486:	e003      	b.n	8006490 <_printf_i+0xc4>
 8006488:	0645      	lsls	r5, r0, #25
 800648a:	d5fb      	bpl.n	8006484 <_printf_i+0xb8>
 800648c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006490:	2d00      	cmp	r5, #0
 8006492:	da03      	bge.n	800649c <_printf_i+0xd0>
 8006494:	232d      	movs	r3, #45	@ 0x2d
 8006496:	426d      	negs	r5, r5
 8006498:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800649c:	4859      	ldr	r0, [pc, #356]	@ (8006604 <_printf_i+0x238>)
 800649e:	230a      	movs	r3, #10
 80064a0:	e011      	b.n	80064c6 <_printf_i+0xfa>
 80064a2:	6821      	ldr	r1, [r4, #0]
 80064a4:	6833      	ldr	r3, [r6, #0]
 80064a6:	0608      	lsls	r0, r1, #24
 80064a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80064ac:	d402      	bmi.n	80064b4 <_printf_i+0xe8>
 80064ae:	0649      	lsls	r1, r1, #25
 80064b0:	bf48      	it	mi
 80064b2:	b2ad      	uxthmi	r5, r5
 80064b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80064b6:	4853      	ldr	r0, [pc, #332]	@ (8006604 <_printf_i+0x238>)
 80064b8:	6033      	str	r3, [r6, #0]
 80064ba:	bf14      	ite	ne
 80064bc:	230a      	movne	r3, #10
 80064be:	2308      	moveq	r3, #8
 80064c0:	2100      	movs	r1, #0
 80064c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064c6:	6866      	ldr	r6, [r4, #4]
 80064c8:	60a6      	str	r6, [r4, #8]
 80064ca:	2e00      	cmp	r6, #0
 80064cc:	bfa2      	ittt	ge
 80064ce:	6821      	ldrge	r1, [r4, #0]
 80064d0:	f021 0104 	bicge.w	r1, r1, #4
 80064d4:	6021      	strge	r1, [r4, #0]
 80064d6:	b90d      	cbnz	r5, 80064dc <_printf_i+0x110>
 80064d8:	2e00      	cmp	r6, #0
 80064da:	d04b      	beq.n	8006574 <_printf_i+0x1a8>
 80064dc:	4616      	mov	r6, r2
 80064de:	fbb5 f1f3 	udiv	r1, r5, r3
 80064e2:	fb03 5711 	mls	r7, r3, r1, r5
 80064e6:	5dc7      	ldrb	r7, [r0, r7]
 80064e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064ec:	462f      	mov	r7, r5
 80064ee:	42bb      	cmp	r3, r7
 80064f0:	460d      	mov	r5, r1
 80064f2:	d9f4      	bls.n	80064de <_printf_i+0x112>
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d10b      	bne.n	8006510 <_printf_i+0x144>
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	07df      	lsls	r7, r3, #31
 80064fc:	d508      	bpl.n	8006510 <_printf_i+0x144>
 80064fe:	6923      	ldr	r3, [r4, #16]
 8006500:	6861      	ldr	r1, [r4, #4]
 8006502:	4299      	cmp	r1, r3
 8006504:	bfde      	ittt	le
 8006506:	2330      	movle	r3, #48	@ 0x30
 8006508:	f806 3c01 	strble.w	r3, [r6, #-1]
 800650c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006510:	1b92      	subs	r2, r2, r6
 8006512:	6122      	str	r2, [r4, #16]
 8006514:	f8cd a000 	str.w	sl, [sp]
 8006518:	464b      	mov	r3, r9
 800651a:	aa03      	add	r2, sp, #12
 800651c:	4621      	mov	r1, r4
 800651e:	4640      	mov	r0, r8
 8006520:	f7ff fee6 	bl	80062f0 <_printf_common>
 8006524:	3001      	adds	r0, #1
 8006526:	d14a      	bne.n	80065be <_printf_i+0x1f2>
 8006528:	f04f 30ff 	mov.w	r0, #4294967295
 800652c:	b004      	add	sp, #16
 800652e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	f043 0320 	orr.w	r3, r3, #32
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	4833      	ldr	r0, [pc, #204]	@ (8006608 <_printf_i+0x23c>)
 800653c:	2778      	movs	r7, #120	@ 0x78
 800653e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	6831      	ldr	r1, [r6, #0]
 8006546:	061f      	lsls	r7, r3, #24
 8006548:	f851 5b04 	ldr.w	r5, [r1], #4
 800654c:	d402      	bmi.n	8006554 <_printf_i+0x188>
 800654e:	065f      	lsls	r7, r3, #25
 8006550:	bf48      	it	mi
 8006552:	b2ad      	uxthmi	r5, r5
 8006554:	6031      	str	r1, [r6, #0]
 8006556:	07d9      	lsls	r1, r3, #31
 8006558:	bf44      	itt	mi
 800655a:	f043 0320 	orrmi.w	r3, r3, #32
 800655e:	6023      	strmi	r3, [r4, #0]
 8006560:	b11d      	cbz	r5, 800656a <_printf_i+0x19e>
 8006562:	2310      	movs	r3, #16
 8006564:	e7ac      	b.n	80064c0 <_printf_i+0xf4>
 8006566:	4827      	ldr	r0, [pc, #156]	@ (8006604 <_printf_i+0x238>)
 8006568:	e7e9      	b.n	800653e <_printf_i+0x172>
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	f023 0320 	bic.w	r3, r3, #32
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	e7f6      	b.n	8006562 <_printf_i+0x196>
 8006574:	4616      	mov	r6, r2
 8006576:	e7bd      	b.n	80064f4 <_printf_i+0x128>
 8006578:	6833      	ldr	r3, [r6, #0]
 800657a:	6825      	ldr	r5, [r4, #0]
 800657c:	6961      	ldr	r1, [r4, #20]
 800657e:	1d18      	adds	r0, r3, #4
 8006580:	6030      	str	r0, [r6, #0]
 8006582:	062e      	lsls	r6, r5, #24
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	d501      	bpl.n	800658c <_printf_i+0x1c0>
 8006588:	6019      	str	r1, [r3, #0]
 800658a:	e002      	b.n	8006592 <_printf_i+0x1c6>
 800658c:	0668      	lsls	r0, r5, #25
 800658e:	d5fb      	bpl.n	8006588 <_printf_i+0x1bc>
 8006590:	8019      	strh	r1, [r3, #0]
 8006592:	2300      	movs	r3, #0
 8006594:	6123      	str	r3, [r4, #16]
 8006596:	4616      	mov	r6, r2
 8006598:	e7bc      	b.n	8006514 <_printf_i+0x148>
 800659a:	6833      	ldr	r3, [r6, #0]
 800659c:	1d1a      	adds	r2, r3, #4
 800659e:	6032      	str	r2, [r6, #0]
 80065a0:	681e      	ldr	r6, [r3, #0]
 80065a2:	6862      	ldr	r2, [r4, #4]
 80065a4:	2100      	movs	r1, #0
 80065a6:	4630      	mov	r0, r6
 80065a8:	f7f9 fe12 	bl	80001d0 <memchr>
 80065ac:	b108      	cbz	r0, 80065b2 <_printf_i+0x1e6>
 80065ae:	1b80      	subs	r0, r0, r6
 80065b0:	6060      	str	r0, [r4, #4]
 80065b2:	6863      	ldr	r3, [r4, #4]
 80065b4:	6123      	str	r3, [r4, #16]
 80065b6:	2300      	movs	r3, #0
 80065b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065bc:	e7aa      	b.n	8006514 <_printf_i+0x148>
 80065be:	6923      	ldr	r3, [r4, #16]
 80065c0:	4632      	mov	r2, r6
 80065c2:	4649      	mov	r1, r9
 80065c4:	4640      	mov	r0, r8
 80065c6:	47d0      	blx	sl
 80065c8:	3001      	adds	r0, #1
 80065ca:	d0ad      	beq.n	8006528 <_printf_i+0x15c>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	079b      	lsls	r3, r3, #30
 80065d0:	d413      	bmi.n	80065fa <_printf_i+0x22e>
 80065d2:	68e0      	ldr	r0, [r4, #12]
 80065d4:	9b03      	ldr	r3, [sp, #12]
 80065d6:	4298      	cmp	r0, r3
 80065d8:	bfb8      	it	lt
 80065da:	4618      	movlt	r0, r3
 80065dc:	e7a6      	b.n	800652c <_printf_i+0x160>
 80065de:	2301      	movs	r3, #1
 80065e0:	4632      	mov	r2, r6
 80065e2:	4649      	mov	r1, r9
 80065e4:	4640      	mov	r0, r8
 80065e6:	47d0      	blx	sl
 80065e8:	3001      	adds	r0, #1
 80065ea:	d09d      	beq.n	8006528 <_printf_i+0x15c>
 80065ec:	3501      	adds	r5, #1
 80065ee:	68e3      	ldr	r3, [r4, #12]
 80065f0:	9903      	ldr	r1, [sp, #12]
 80065f2:	1a5b      	subs	r3, r3, r1
 80065f4:	42ab      	cmp	r3, r5
 80065f6:	dcf2      	bgt.n	80065de <_printf_i+0x212>
 80065f8:	e7eb      	b.n	80065d2 <_printf_i+0x206>
 80065fa:	2500      	movs	r5, #0
 80065fc:	f104 0619 	add.w	r6, r4, #25
 8006600:	e7f5      	b.n	80065ee <_printf_i+0x222>
 8006602:	bf00      	nop
 8006604:	0800af58 	.word	0x0800af58
 8006608:	0800af69 	.word	0x0800af69

0800660c <_scanf_float>:
 800660c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006610:	b087      	sub	sp, #28
 8006612:	4617      	mov	r7, r2
 8006614:	9303      	str	r3, [sp, #12]
 8006616:	688b      	ldr	r3, [r1, #8]
 8006618:	1e5a      	subs	r2, r3, #1
 800661a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800661e:	bf81      	itttt	hi
 8006620:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006624:	eb03 0b05 	addhi.w	fp, r3, r5
 8006628:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800662c:	608b      	strhi	r3, [r1, #8]
 800662e:	680b      	ldr	r3, [r1, #0]
 8006630:	460a      	mov	r2, r1
 8006632:	f04f 0500 	mov.w	r5, #0
 8006636:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800663a:	f842 3b1c 	str.w	r3, [r2], #28
 800663e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006642:	4680      	mov	r8, r0
 8006644:	460c      	mov	r4, r1
 8006646:	bf98      	it	ls
 8006648:	f04f 0b00 	movls.w	fp, #0
 800664c:	9201      	str	r2, [sp, #4]
 800664e:	4616      	mov	r6, r2
 8006650:	46aa      	mov	sl, r5
 8006652:	46a9      	mov	r9, r5
 8006654:	9502      	str	r5, [sp, #8]
 8006656:	68a2      	ldr	r2, [r4, #8]
 8006658:	b152      	cbz	r2, 8006670 <_scanf_float+0x64>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006660:	d864      	bhi.n	800672c <_scanf_float+0x120>
 8006662:	2b40      	cmp	r3, #64	@ 0x40
 8006664:	d83c      	bhi.n	80066e0 <_scanf_float+0xd4>
 8006666:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800666a:	b2c8      	uxtb	r0, r1
 800666c:	280e      	cmp	r0, #14
 800666e:	d93a      	bls.n	80066e6 <_scanf_float+0xda>
 8006670:	f1b9 0f00 	cmp.w	r9, #0
 8006674:	d003      	beq.n	800667e <_scanf_float+0x72>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800667c:	6023      	str	r3, [r4, #0]
 800667e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006682:	f1ba 0f01 	cmp.w	sl, #1
 8006686:	f200 8117 	bhi.w	80068b8 <_scanf_float+0x2ac>
 800668a:	9b01      	ldr	r3, [sp, #4]
 800668c:	429e      	cmp	r6, r3
 800668e:	f200 8108 	bhi.w	80068a2 <_scanf_float+0x296>
 8006692:	2001      	movs	r0, #1
 8006694:	b007      	add	sp, #28
 8006696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800669e:	2a0d      	cmp	r2, #13
 80066a0:	d8e6      	bhi.n	8006670 <_scanf_float+0x64>
 80066a2:	a101      	add	r1, pc, #4	@ (adr r1, 80066a8 <_scanf_float+0x9c>)
 80066a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80066a8:	080067ef 	.word	0x080067ef
 80066ac:	08006671 	.word	0x08006671
 80066b0:	08006671 	.word	0x08006671
 80066b4:	08006671 	.word	0x08006671
 80066b8:	0800684f 	.word	0x0800684f
 80066bc:	08006827 	.word	0x08006827
 80066c0:	08006671 	.word	0x08006671
 80066c4:	08006671 	.word	0x08006671
 80066c8:	080067fd 	.word	0x080067fd
 80066cc:	08006671 	.word	0x08006671
 80066d0:	08006671 	.word	0x08006671
 80066d4:	08006671 	.word	0x08006671
 80066d8:	08006671 	.word	0x08006671
 80066dc:	080067b5 	.word	0x080067b5
 80066e0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80066e4:	e7db      	b.n	800669e <_scanf_float+0x92>
 80066e6:	290e      	cmp	r1, #14
 80066e8:	d8c2      	bhi.n	8006670 <_scanf_float+0x64>
 80066ea:	a001      	add	r0, pc, #4	@ (adr r0, 80066f0 <_scanf_float+0xe4>)
 80066ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80066f0:	080067a5 	.word	0x080067a5
 80066f4:	08006671 	.word	0x08006671
 80066f8:	080067a5 	.word	0x080067a5
 80066fc:	0800683b 	.word	0x0800683b
 8006700:	08006671 	.word	0x08006671
 8006704:	0800674d 	.word	0x0800674d
 8006708:	0800678b 	.word	0x0800678b
 800670c:	0800678b 	.word	0x0800678b
 8006710:	0800678b 	.word	0x0800678b
 8006714:	0800678b 	.word	0x0800678b
 8006718:	0800678b 	.word	0x0800678b
 800671c:	0800678b 	.word	0x0800678b
 8006720:	0800678b 	.word	0x0800678b
 8006724:	0800678b 	.word	0x0800678b
 8006728:	0800678b 	.word	0x0800678b
 800672c:	2b6e      	cmp	r3, #110	@ 0x6e
 800672e:	d809      	bhi.n	8006744 <_scanf_float+0x138>
 8006730:	2b60      	cmp	r3, #96	@ 0x60
 8006732:	d8b2      	bhi.n	800669a <_scanf_float+0x8e>
 8006734:	2b54      	cmp	r3, #84	@ 0x54
 8006736:	d07b      	beq.n	8006830 <_scanf_float+0x224>
 8006738:	2b59      	cmp	r3, #89	@ 0x59
 800673a:	d199      	bne.n	8006670 <_scanf_float+0x64>
 800673c:	2d07      	cmp	r5, #7
 800673e:	d197      	bne.n	8006670 <_scanf_float+0x64>
 8006740:	2508      	movs	r5, #8
 8006742:	e02c      	b.n	800679e <_scanf_float+0x192>
 8006744:	2b74      	cmp	r3, #116	@ 0x74
 8006746:	d073      	beq.n	8006830 <_scanf_float+0x224>
 8006748:	2b79      	cmp	r3, #121	@ 0x79
 800674a:	e7f6      	b.n	800673a <_scanf_float+0x12e>
 800674c:	6821      	ldr	r1, [r4, #0]
 800674e:	05c8      	lsls	r0, r1, #23
 8006750:	d51b      	bpl.n	800678a <_scanf_float+0x17e>
 8006752:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006756:	6021      	str	r1, [r4, #0]
 8006758:	f109 0901 	add.w	r9, r9, #1
 800675c:	f1bb 0f00 	cmp.w	fp, #0
 8006760:	d003      	beq.n	800676a <_scanf_float+0x15e>
 8006762:	3201      	adds	r2, #1
 8006764:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006768:	60a2      	str	r2, [r4, #8]
 800676a:	68a3      	ldr	r3, [r4, #8]
 800676c:	3b01      	subs	r3, #1
 800676e:	60a3      	str	r3, [r4, #8]
 8006770:	6923      	ldr	r3, [r4, #16]
 8006772:	3301      	adds	r3, #1
 8006774:	6123      	str	r3, [r4, #16]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3b01      	subs	r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	607b      	str	r3, [r7, #4]
 800677e:	f340 8087 	ble.w	8006890 <_scanf_float+0x284>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	3301      	adds	r3, #1
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	e765      	b.n	8006656 <_scanf_float+0x4a>
 800678a:	eb1a 0105 	adds.w	r1, sl, r5
 800678e:	f47f af6f 	bne.w	8006670 <_scanf_float+0x64>
 8006792:	6822      	ldr	r2, [r4, #0]
 8006794:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006798:	6022      	str	r2, [r4, #0]
 800679a:	460d      	mov	r5, r1
 800679c:	468a      	mov	sl, r1
 800679e:	f806 3b01 	strb.w	r3, [r6], #1
 80067a2:	e7e2      	b.n	800676a <_scanf_float+0x15e>
 80067a4:	6822      	ldr	r2, [r4, #0]
 80067a6:	0610      	lsls	r0, r2, #24
 80067a8:	f57f af62 	bpl.w	8006670 <_scanf_float+0x64>
 80067ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067b0:	6022      	str	r2, [r4, #0]
 80067b2:	e7f4      	b.n	800679e <_scanf_float+0x192>
 80067b4:	f1ba 0f00 	cmp.w	sl, #0
 80067b8:	d10e      	bne.n	80067d8 <_scanf_float+0x1cc>
 80067ba:	f1b9 0f00 	cmp.w	r9, #0
 80067be:	d10e      	bne.n	80067de <_scanf_float+0x1d2>
 80067c0:	6822      	ldr	r2, [r4, #0]
 80067c2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80067c6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80067ca:	d108      	bne.n	80067de <_scanf_float+0x1d2>
 80067cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80067d0:	6022      	str	r2, [r4, #0]
 80067d2:	f04f 0a01 	mov.w	sl, #1
 80067d6:	e7e2      	b.n	800679e <_scanf_float+0x192>
 80067d8:	f1ba 0f02 	cmp.w	sl, #2
 80067dc:	d055      	beq.n	800688a <_scanf_float+0x27e>
 80067de:	2d01      	cmp	r5, #1
 80067e0:	d002      	beq.n	80067e8 <_scanf_float+0x1dc>
 80067e2:	2d04      	cmp	r5, #4
 80067e4:	f47f af44 	bne.w	8006670 <_scanf_float+0x64>
 80067e8:	3501      	adds	r5, #1
 80067ea:	b2ed      	uxtb	r5, r5
 80067ec:	e7d7      	b.n	800679e <_scanf_float+0x192>
 80067ee:	f1ba 0f01 	cmp.w	sl, #1
 80067f2:	f47f af3d 	bne.w	8006670 <_scanf_float+0x64>
 80067f6:	f04f 0a02 	mov.w	sl, #2
 80067fa:	e7d0      	b.n	800679e <_scanf_float+0x192>
 80067fc:	b97d      	cbnz	r5, 800681e <_scanf_float+0x212>
 80067fe:	f1b9 0f00 	cmp.w	r9, #0
 8006802:	f47f af38 	bne.w	8006676 <_scanf_float+0x6a>
 8006806:	6822      	ldr	r2, [r4, #0]
 8006808:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800680c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006810:	f040 8108 	bne.w	8006a24 <_scanf_float+0x418>
 8006814:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006818:	6022      	str	r2, [r4, #0]
 800681a:	2501      	movs	r5, #1
 800681c:	e7bf      	b.n	800679e <_scanf_float+0x192>
 800681e:	2d03      	cmp	r5, #3
 8006820:	d0e2      	beq.n	80067e8 <_scanf_float+0x1dc>
 8006822:	2d05      	cmp	r5, #5
 8006824:	e7de      	b.n	80067e4 <_scanf_float+0x1d8>
 8006826:	2d02      	cmp	r5, #2
 8006828:	f47f af22 	bne.w	8006670 <_scanf_float+0x64>
 800682c:	2503      	movs	r5, #3
 800682e:	e7b6      	b.n	800679e <_scanf_float+0x192>
 8006830:	2d06      	cmp	r5, #6
 8006832:	f47f af1d 	bne.w	8006670 <_scanf_float+0x64>
 8006836:	2507      	movs	r5, #7
 8006838:	e7b1      	b.n	800679e <_scanf_float+0x192>
 800683a:	6822      	ldr	r2, [r4, #0]
 800683c:	0591      	lsls	r1, r2, #22
 800683e:	f57f af17 	bpl.w	8006670 <_scanf_float+0x64>
 8006842:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006846:	6022      	str	r2, [r4, #0]
 8006848:	f8cd 9008 	str.w	r9, [sp, #8]
 800684c:	e7a7      	b.n	800679e <_scanf_float+0x192>
 800684e:	6822      	ldr	r2, [r4, #0]
 8006850:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006854:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006858:	d006      	beq.n	8006868 <_scanf_float+0x25c>
 800685a:	0550      	lsls	r0, r2, #21
 800685c:	f57f af08 	bpl.w	8006670 <_scanf_float+0x64>
 8006860:	f1b9 0f00 	cmp.w	r9, #0
 8006864:	f000 80de 	beq.w	8006a24 <_scanf_float+0x418>
 8006868:	0591      	lsls	r1, r2, #22
 800686a:	bf58      	it	pl
 800686c:	9902      	ldrpl	r1, [sp, #8]
 800686e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006872:	bf58      	it	pl
 8006874:	eba9 0101 	subpl.w	r1, r9, r1
 8006878:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800687c:	bf58      	it	pl
 800687e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006882:	6022      	str	r2, [r4, #0]
 8006884:	f04f 0900 	mov.w	r9, #0
 8006888:	e789      	b.n	800679e <_scanf_float+0x192>
 800688a:	f04f 0a03 	mov.w	sl, #3
 800688e:	e786      	b.n	800679e <_scanf_float+0x192>
 8006890:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006894:	4639      	mov	r1, r7
 8006896:	4640      	mov	r0, r8
 8006898:	4798      	blx	r3
 800689a:	2800      	cmp	r0, #0
 800689c:	f43f aedb 	beq.w	8006656 <_scanf_float+0x4a>
 80068a0:	e6e6      	b.n	8006670 <_scanf_float+0x64>
 80068a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068aa:	463a      	mov	r2, r7
 80068ac:	4640      	mov	r0, r8
 80068ae:	4798      	blx	r3
 80068b0:	6923      	ldr	r3, [r4, #16]
 80068b2:	3b01      	subs	r3, #1
 80068b4:	6123      	str	r3, [r4, #16]
 80068b6:	e6e8      	b.n	800668a <_scanf_float+0x7e>
 80068b8:	1e6b      	subs	r3, r5, #1
 80068ba:	2b06      	cmp	r3, #6
 80068bc:	d824      	bhi.n	8006908 <_scanf_float+0x2fc>
 80068be:	2d02      	cmp	r5, #2
 80068c0:	d836      	bhi.n	8006930 <_scanf_float+0x324>
 80068c2:	9b01      	ldr	r3, [sp, #4]
 80068c4:	429e      	cmp	r6, r3
 80068c6:	f67f aee4 	bls.w	8006692 <_scanf_float+0x86>
 80068ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068d2:	463a      	mov	r2, r7
 80068d4:	4640      	mov	r0, r8
 80068d6:	4798      	blx	r3
 80068d8:	6923      	ldr	r3, [r4, #16]
 80068da:	3b01      	subs	r3, #1
 80068dc:	6123      	str	r3, [r4, #16]
 80068de:	e7f0      	b.n	80068c2 <_scanf_float+0x2b6>
 80068e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068e4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80068e8:	463a      	mov	r2, r7
 80068ea:	4640      	mov	r0, r8
 80068ec:	4798      	blx	r3
 80068ee:	6923      	ldr	r3, [r4, #16]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	6123      	str	r3, [r4, #16]
 80068f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068f8:	fa5f fa8a 	uxtb.w	sl, sl
 80068fc:	f1ba 0f02 	cmp.w	sl, #2
 8006900:	d1ee      	bne.n	80068e0 <_scanf_float+0x2d4>
 8006902:	3d03      	subs	r5, #3
 8006904:	b2ed      	uxtb	r5, r5
 8006906:	1b76      	subs	r6, r6, r5
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	05da      	lsls	r2, r3, #23
 800690c:	d530      	bpl.n	8006970 <_scanf_float+0x364>
 800690e:	055b      	lsls	r3, r3, #21
 8006910:	d511      	bpl.n	8006936 <_scanf_float+0x32a>
 8006912:	9b01      	ldr	r3, [sp, #4]
 8006914:	429e      	cmp	r6, r3
 8006916:	f67f aebc 	bls.w	8006692 <_scanf_float+0x86>
 800691a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800691e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006922:	463a      	mov	r2, r7
 8006924:	4640      	mov	r0, r8
 8006926:	4798      	blx	r3
 8006928:	6923      	ldr	r3, [r4, #16]
 800692a:	3b01      	subs	r3, #1
 800692c:	6123      	str	r3, [r4, #16]
 800692e:	e7f0      	b.n	8006912 <_scanf_float+0x306>
 8006930:	46aa      	mov	sl, r5
 8006932:	46b3      	mov	fp, r6
 8006934:	e7de      	b.n	80068f4 <_scanf_float+0x2e8>
 8006936:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800693a:	6923      	ldr	r3, [r4, #16]
 800693c:	2965      	cmp	r1, #101	@ 0x65
 800693e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006942:	f106 35ff 	add.w	r5, r6, #4294967295
 8006946:	6123      	str	r3, [r4, #16]
 8006948:	d00c      	beq.n	8006964 <_scanf_float+0x358>
 800694a:	2945      	cmp	r1, #69	@ 0x45
 800694c:	d00a      	beq.n	8006964 <_scanf_float+0x358>
 800694e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006952:	463a      	mov	r2, r7
 8006954:	4640      	mov	r0, r8
 8006956:	4798      	blx	r3
 8006958:	6923      	ldr	r3, [r4, #16]
 800695a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800695e:	3b01      	subs	r3, #1
 8006960:	1eb5      	subs	r5, r6, #2
 8006962:	6123      	str	r3, [r4, #16]
 8006964:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006968:	463a      	mov	r2, r7
 800696a:	4640      	mov	r0, r8
 800696c:	4798      	blx	r3
 800696e:	462e      	mov	r6, r5
 8006970:	6822      	ldr	r2, [r4, #0]
 8006972:	f012 0210 	ands.w	r2, r2, #16
 8006976:	d001      	beq.n	800697c <_scanf_float+0x370>
 8006978:	2000      	movs	r0, #0
 800697a:	e68b      	b.n	8006694 <_scanf_float+0x88>
 800697c:	7032      	strb	r2, [r6, #0]
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006988:	d11c      	bne.n	80069c4 <_scanf_float+0x3b8>
 800698a:	9b02      	ldr	r3, [sp, #8]
 800698c:	454b      	cmp	r3, r9
 800698e:	eba3 0209 	sub.w	r2, r3, r9
 8006992:	d123      	bne.n	80069dc <_scanf_float+0x3d0>
 8006994:	9901      	ldr	r1, [sp, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	4640      	mov	r0, r8
 800699a:	f002 fd39 	bl	8009410 <_strtod_r>
 800699e:	9b03      	ldr	r3, [sp, #12]
 80069a0:	6821      	ldr	r1, [r4, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f011 0f02 	tst.w	r1, #2
 80069a8:	ec57 6b10 	vmov	r6, r7, d0
 80069ac:	f103 0204 	add.w	r2, r3, #4
 80069b0:	d01f      	beq.n	80069f2 <_scanf_float+0x3e6>
 80069b2:	9903      	ldr	r1, [sp, #12]
 80069b4:	600a      	str	r2, [r1, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	e9c3 6700 	strd	r6, r7, [r3]
 80069bc:	68e3      	ldr	r3, [r4, #12]
 80069be:	3301      	adds	r3, #1
 80069c0:	60e3      	str	r3, [r4, #12]
 80069c2:	e7d9      	b.n	8006978 <_scanf_float+0x36c>
 80069c4:	9b04      	ldr	r3, [sp, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0e4      	beq.n	8006994 <_scanf_float+0x388>
 80069ca:	9905      	ldr	r1, [sp, #20]
 80069cc:	230a      	movs	r3, #10
 80069ce:	3101      	adds	r1, #1
 80069d0:	4640      	mov	r0, r8
 80069d2:	f002 fd9d 	bl	8009510 <_strtol_r>
 80069d6:	9b04      	ldr	r3, [sp, #16]
 80069d8:	9e05      	ldr	r6, [sp, #20]
 80069da:	1ac2      	subs	r2, r0, r3
 80069dc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80069e0:	429e      	cmp	r6, r3
 80069e2:	bf28      	it	cs
 80069e4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80069e8:	4910      	ldr	r1, [pc, #64]	@ (8006a2c <_scanf_float+0x420>)
 80069ea:	4630      	mov	r0, r6
 80069ec:	f000 f954 	bl	8006c98 <siprintf>
 80069f0:	e7d0      	b.n	8006994 <_scanf_float+0x388>
 80069f2:	f011 0f04 	tst.w	r1, #4
 80069f6:	9903      	ldr	r1, [sp, #12]
 80069f8:	600a      	str	r2, [r1, #0]
 80069fa:	d1dc      	bne.n	80069b6 <_scanf_float+0x3aa>
 80069fc:	681d      	ldr	r5, [r3, #0]
 80069fe:	4632      	mov	r2, r6
 8006a00:	463b      	mov	r3, r7
 8006a02:	4630      	mov	r0, r6
 8006a04:	4639      	mov	r1, r7
 8006a06:	f7fa f891 	bl	8000b2c <__aeabi_dcmpun>
 8006a0a:	b128      	cbz	r0, 8006a18 <_scanf_float+0x40c>
 8006a0c:	4808      	ldr	r0, [pc, #32]	@ (8006a30 <_scanf_float+0x424>)
 8006a0e:	f000 faf9 	bl	8007004 <nanf>
 8006a12:	ed85 0a00 	vstr	s0, [r5]
 8006a16:	e7d1      	b.n	80069bc <_scanf_float+0x3b0>
 8006a18:	4630      	mov	r0, r6
 8006a1a:	4639      	mov	r1, r7
 8006a1c:	f7fa f8e4 	bl	8000be8 <__aeabi_d2f>
 8006a20:	6028      	str	r0, [r5, #0]
 8006a22:	e7cb      	b.n	80069bc <_scanf_float+0x3b0>
 8006a24:	f04f 0900 	mov.w	r9, #0
 8006a28:	e629      	b.n	800667e <_scanf_float+0x72>
 8006a2a:	bf00      	nop
 8006a2c:	0800af7a 	.word	0x0800af7a
 8006a30:	0800b330 	.word	0x0800b330

08006a34 <std>:
 8006a34:	2300      	movs	r3, #0
 8006a36:	b510      	push	{r4, lr}
 8006a38:	4604      	mov	r4, r0
 8006a3a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a42:	6083      	str	r3, [r0, #8]
 8006a44:	8181      	strh	r1, [r0, #12]
 8006a46:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a48:	81c2      	strh	r2, [r0, #14]
 8006a4a:	6183      	str	r3, [r0, #24]
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	2208      	movs	r2, #8
 8006a50:	305c      	adds	r0, #92	@ 0x5c
 8006a52:	f000 fa45 	bl	8006ee0 <memset>
 8006a56:	4b0d      	ldr	r3, [pc, #52]	@ (8006a8c <std+0x58>)
 8006a58:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a90 <std+0x5c>)
 8006a5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a94 <std+0x60>)
 8006a60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a62:	4b0d      	ldr	r3, [pc, #52]	@ (8006a98 <std+0x64>)
 8006a64:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a66:	4b0d      	ldr	r3, [pc, #52]	@ (8006a9c <std+0x68>)
 8006a68:	6224      	str	r4, [r4, #32]
 8006a6a:	429c      	cmp	r4, r3
 8006a6c:	d006      	beq.n	8006a7c <std+0x48>
 8006a6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a72:	4294      	cmp	r4, r2
 8006a74:	d002      	beq.n	8006a7c <std+0x48>
 8006a76:	33d0      	adds	r3, #208	@ 0xd0
 8006a78:	429c      	cmp	r4, r3
 8006a7a:	d105      	bne.n	8006a88 <std+0x54>
 8006a7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a84:	f000 baba 	b.w	8006ffc <__retarget_lock_init_recursive>
 8006a88:	bd10      	pop	{r4, pc}
 8006a8a:	bf00      	nop
 8006a8c:	08006d2d 	.word	0x08006d2d
 8006a90:	08006d53 	.word	0x08006d53
 8006a94:	08006d8b 	.word	0x08006d8b
 8006a98:	08006daf 	.word	0x08006daf
 8006a9c:	200084c0 	.word	0x200084c0

08006aa0 <stdio_exit_handler>:
 8006aa0:	4a02      	ldr	r2, [pc, #8]	@ (8006aac <stdio_exit_handler+0xc>)
 8006aa2:	4903      	ldr	r1, [pc, #12]	@ (8006ab0 <stdio_exit_handler+0x10>)
 8006aa4:	4803      	ldr	r0, [pc, #12]	@ (8006ab4 <stdio_exit_handler+0x14>)
 8006aa6:	f000 b869 	b.w	8006b7c <_fwalk_sglue>
 8006aaa:	bf00      	nop
 8006aac:	20000084 	.word	0x20000084
 8006ab0:	0800a185 	.word	0x0800a185
 8006ab4:	20000094 	.word	0x20000094

08006ab8 <cleanup_stdio>:
 8006ab8:	6841      	ldr	r1, [r0, #4]
 8006aba:	4b0c      	ldr	r3, [pc, #48]	@ (8006aec <cleanup_stdio+0x34>)
 8006abc:	4299      	cmp	r1, r3
 8006abe:	b510      	push	{r4, lr}
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	d001      	beq.n	8006ac8 <cleanup_stdio+0x10>
 8006ac4:	f003 fb5e 	bl	800a184 <_fflush_r>
 8006ac8:	68a1      	ldr	r1, [r4, #8]
 8006aca:	4b09      	ldr	r3, [pc, #36]	@ (8006af0 <cleanup_stdio+0x38>)
 8006acc:	4299      	cmp	r1, r3
 8006ace:	d002      	beq.n	8006ad6 <cleanup_stdio+0x1e>
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f003 fb57 	bl	800a184 <_fflush_r>
 8006ad6:	68e1      	ldr	r1, [r4, #12]
 8006ad8:	4b06      	ldr	r3, [pc, #24]	@ (8006af4 <cleanup_stdio+0x3c>)
 8006ada:	4299      	cmp	r1, r3
 8006adc:	d004      	beq.n	8006ae8 <cleanup_stdio+0x30>
 8006ade:	4620      	mov	r0, r4
 8006ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ae4:	f003 bb4e 	b.w	800a184 <_fflush_r>
 8006ae8:	bd10      	pop	{r4, pc}
 8006aea:	bf00      	nop
 8006aec:	200084c0 	.word	0x200084c0
 8006af0:	20008528 	.word	0x20008528
 8006af4:	20008590 	.word	0x20008590

08006af8 <global_stdio_init.part.0>:
 8006af8:	b510      	push	{r4, lr}
 8006afa:	4b0b      	ldr	r3, [pc, #44]	@ (8006b28 <global_stdio_init.part.0+0x30>)
 8006afc:	4c0b      	ldr	r4, [pc, #44]	@ (8006b2c <global_stdio_init.part.0+0x34>)
 8006afe:	4a0c      	ldr	r2, [pc, #48]	@ (8006b30 <global_stdio_init.part.0+0x38>)
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	4620      	mov	r0, r4
 8006b04:	2200      	movs	r2, #0
 8006b06:	2104      	movs	r1, #4
 8006b08:	f7ff ff94 	bl	8006a34 <std>
 8006b0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b10:	2201      	movs	r2, #1
 8006b12:	2109      	movs	r1, #9
 8006b14:	f7ff ff8e 	bl	8006a34 <std>
 8006b18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b1c:	2202      	movs	r2, #2
 8006b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b22:	2112      	movs	r1, #18
 8006b24:	f7ff bf86 	b.w	8006a34 <std>
 8006b28:	200085f8 	.word	0x200085f8
 8006b2c:	200084c0 	.word	0x200084c0
 8006b30:	08006aa1 	.word	0x08006aa1

08006b34 <__sfp_lock_acquire>:
 8006b34:	4801      	ldr	r0, [pc, #4]	@ (8006b3c <__sfp_lock_acquire+0x8>)
 8006b36:	f000 ba62 	b.w	8006ffe <__retarget_lock_acquire_recursive>
 8006b3a:	bf00      	nop
 8006b3c:	20008601 	.word	0x20008601

08006b40 <__sfp_lock_release>:
 8006b40:	4801      	ldr	r0, [pc, #4]	@ (8006b48 <__sfp_lock_release+0x8>)
 8006b42:	f000 ba5d 	b.w	8007000 <__retarget_lock_release_recursive>
 8006b46:	bf00      	nop
 8006b48:	20008601 	.word	0x20008601

08006b4c <__sinit>:
 8006b4c:	b510      	push	{r4, lr}
 8006b4e:	4604      	mov	r4, r0
 8006b50:	f7ff fff0 	bl	8006b34 <__sfp_lock_acquire>
 8006b54:	6a23      	ldr	r3, [r4, #32]
 8006b56:	b11b      	cbz	r3, 8006b60 <__sinit+0x14>
 8006b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b5c:	f7ff bff0 	b.w	8006b40 <__sfp_lock_release>
 8006b60:	4b04      	ldr	r3, [pc, #16]	@ (8006b74 <__sinit+0x28>)
 8006b62:	6223      	str	r3, [r4, #32]
 8006b64:	4b04      	ldr	r3, [pc, #16]	@ (8006b78 <__sinit+0x2c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1f5      	bne.n	8006b58 <__sinit+0xc>
 8006b6c:	f7ff ffc4 	bl	8006af8 <global_stdio_init.part.0>
 8006b70:	e7f2      	b.n	8006b58 <__sinit+0xc>
 8006b72:	bf00      	nop
 8006b74:	08006ab9 	.word	0x08006ab9
 8006b78:	200085f8 	.word	0x200085f8

08006b7c <_fwalk_sglue>:
 8006b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b80:	4607      	mov	r7, r0
 8006b82:	4688      	mov	r8, r1
 8006b84:	4614      	mov	r4, r2
 8006b86:	2600      	movs	r6, #0
 8006b88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b8c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b90:	d505      	bpl.n	8006b9e <_fwalk_sglue+0x22>
 8006b92:	6824      	ldr	r4, [r4, #0]
 8006b94:	2c00      	cmp	r4, #0
 8006b96:	d1f7      	bne.n	8006b88 <_fwalk_sglue+0xc>
 8006b98:	4630      	mov	r0, r6
 8006b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b9e:	89ab      	ldrh	r3, [r5, #12]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d907      	bls.n	8006bb4 <_fwalk_sglue+0x38>
 8006ba4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	d003      	beq.n	8006bb4 <_fwalk_sglue+0x38>
 8006bac:	4629      	mov	r1, r5
 8006bae:	4638      	mov	r0, r7
 8006bb0:	47c0      	blx	r8
 8006bb2:	4306      	orrs	r6, r0
 8006bb4:	3568      	adds	r5, #104	@ 0x68
 8006bb6:	e7e9      	b.n	8006b8c <_fwalk_sglue+0x10>

08006bb8 <iprintf>:
 8006bb8:	b40f      	push	{r0, r1, r2, r3}
 8006bba:	b507      	push	{r0, r1, r2, lr}
 8006bbc:	4906      	ldr	r1, [pc, #24]	@ (8006bd8 <iprintf+0x20>)
 8006bbe:	ab04      	add	r3, sp, #16
 8006bc0:	6808      	ldr	r0, [r1, #0]
 8006bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bc6:	6881      	ldr	r1, [r0, #8]
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	f002 fff1 	bl	8009bb0 <_vfiprintf_r>
 8006bce:	b003      	add	sp, #12
 8006bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bd4:	b004      	add	sp, #16
 8006bd6:	4770      	bx	lr
 8006bd8:	20000090 	.word	0x20000090

08006bdc <_puts_r>:
 8006bdc:	6a03      	ldr	r3, [r0, #32]
 8006bde:	b570      	push	{r4, r5, r6, lr}
 8006be0:	6884      	ldr	r4, [r0, #8]
 8006be2:	4605      	mov	r5, r0
 8006be4:	460e      	mov	r6, r1
 8006be6:	b90b      	cbnz	r3, 8006bec <_puts_r+0x10>
 8006be8:	f7ff ffb0 	bl	8006b4c <__sinit>
 8006bec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bee:	07db      	lsls	r3, r3, #31
 8006bf0:	d405      	bmi.n	8006bfe <_puts_r+0x22>
 8006bf2:	89a3      	ldrh	r3, [r4, #12]
 8006bf4:	0598      	lsls	r0, r3, #22
 8006bf6:	d402      	bmi.n	8006bfe <_puts_r+0x22>
 8006bf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bfa:	f000 fa00 	bl	8006ffe <__retarget_lock_acquire_recursive>
 8006bfe:	89a3      	ldrh	r3, [r4, #12]
 8006c00:	0719      	lsls	r1, r3, #28
 8006c02:	d502      	bpl.n	8006c0a <_puts_r+0x2e>
 8006c04:	6923      	ldr	r3, [r4, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d135      	bne.n	8006c76 <_puts_r+0x9a>
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	f000 f911 	bl	8006e34 <__swsetup_r>
 8006c12:	b380      	cbz	r0, 8006c76 <_puts_r+0x9a>
 8006c14:	f04f 35ff 	mov.w	r5, #4294967295
 8006c18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c1a:	07da      	lsls	r2, r3, #31
 8006c1c:	d405      	bmi.n	8006c2a <_puts_r+0x4e>
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	059b      	lsls	r3, r3, #22
 8006c22:	d402      	bmi.n	8006c2a <_puts_r+0x4e>
 8006c24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c26:	f000 f9eb 	bl	8007000 <__retarget_lock_release_recursive>
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	bd70      	pop	{r4, r5, r6, pc}
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	da04      	bge.n	8006c3c <_puts_r+0x60>
 8006c32:	69a2      	ldr	r2, [r4, #24]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	dc17      	bgt.n	8006c68 <_puts_r+0x8c>
 8006c38:	290a      	cmp	r1, #10
 8006c3a:	d015      	beq.n	8006c68 <_puts_r+0x8c>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	6022      	str	r2, [r4, #0]
 8006c42:	7019      	strb	r1, [r3, #0]
 8006c44:	68a3      	ldr	r3, [r4, #8]
 8006c46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	60a3      	str	r3, [r4, #8]
 8006c4e:	2900      	cmp	r1, #0
 8006c50:	d1ed      	bne.n	8006c2e <_puts_r+0x52>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	da11      	bge.n	8006c7a <_puts_r+0x9e>
 8006c56:	4622      	mov	r2, r4
 8006c58:	210a      	movs	r1, #10
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	f000 f8ab 	bl	8006db6 <__swbuf_r>
 8006c60:	3001      	adds	r0, #1
 8006c62:	d0d7      	beq.n	8006c14 <_puts_r+0x38>
 8006c64:	250a      	movs	r5, #10
 8006c66:	e7d7      	b.n	8006c18 <_puts_r+0x3c>
 8006c68:	4622      	mov	r2, r4
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	f000 f8a3 	bl	8006db6 <__swbuf_r>
 8006c70:	3001      	adds	r0, #1
 8006c72:	d1e7      	bne.n	8006c44 <_puts_r+0x68>
 8006c74:	e7ce      	b.n	8006c14 <_puts_r+0x38>
 8006c76:	3e01      	subs	r6, #1
 8006c78:	e7e4      	b.n	8006c44 <_puts_r+0x68>
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	6022      	str	r2, [r4, #0]
 8006c80:	220a      	movs	r2, #10
 8006c82:	701a      	strb	r2, [r3, #0]
 8006c84:	e7ee      	b.n	8006c64 <_puts_r+0x88>
	...

08006c88 <puts>:
 8006c88:	4b02      	ldr	r3, [pc, #8]	@ (8006c94 <puts+0xc>)
 8006c8a:	4601      	mov	r1, r0
 8006c8c:	6818      	ldr	r0, [r3, #0]
 8006c8e:	f7ff bfa5 	b.w	8006bdc <_puts_r>
 8006c92:	bf00      	nop
 8006c94:	20000090 	.word	0x20000090

08006c98 <siprintf>:
 8006c98:	b40e      	push	{r1, r2, r3}
 8006c9a:	b500      	push	{lr}
 8006c9c:	b09c      	sub	sp, #112	@ 0x70
 8006c9e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006ca0:	9002      	str	r0, [sp, #8]
 8006ca2:	9006      	str	r0, [sp, #24]
 8006ca4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006ca8:	4809      	ldr	r0, [pc, #36]	@ (8006cd0 <siprintf+0x38>)
 8006caa:	9107      	str	r1, [sp, #28]
 8006cac:	9104      	str	r1, [sp, #16]
 8006cae:	4909      	ldr	r1, [pc, #36]	@ (8006cd4 <siprintf+0x3c>)
 8006cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cb4:	9105      	str	r1, [sp, #20]
 8006cb6:	6800      	ldr	r0, [r0, #0]
 8006cb8:	9301      	str	r3, [sp, #4]
 8006cba:	a902      	add	r1, sp, #8
 8006cbc:	f002 fc86 	bl	80095cc <_svfiprintf_r>
 8006cc0:	9b02      	ldr	r3, [sp, #8]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	701a      	strb	r2, [r3, #0]
 8006cc6:	b01c      	add	sp, #112	@ 0x70
 8006cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ccc:	b003      	add	sp, #12
 8006cce:	4770      	bx	lr
 8006cd0:	20000090 	.word	0x20000090
 8006cd4:	ffff0208 	.word	0xffff0208

08006cd8 <siscanf>:
 8006cd8:	b40e      	push	{r1, r2, r3}
 8006cda:	b530      	push	{r4, r5, lr}
 8006cdc:	b09c      	sub	sp, #112	@ 0x70
 8006cde:	ac1f      	add	r4, sp, #124	@ 0x7c
 8006ce0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8006ce4:	f854 5b04 	ldr.w	r5, [r4], #4
 8006ce8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006cec:	9002      	str	r0, [sp, #8]
 8006cee:	9006      	str	r0, [sp, #24]
 8006cf0:	f7f9 fabe 	bl	8000270 <strlen>
 8006cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8006d24 <siscanf+0x4c>)
 8006cf6:	9003      	str	r0, [sp, #12]
 8006cf8:	9007      	str	r0, [sp, #28]
 8006cfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cfc:	480a      	ldr	r0, [pc, #40]	@ (8006d28 <siscanf+0x50>)
 8006cfe:	9401      	str	r4, [sp, #4]
 8006d00:	2300      	movs	r3, #0
 8006d02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d04:	9314      	str	r3, [sp, #80]	@ 0x50
 8006d06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d0a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d0e:	462a      	mov	r2, r5
 8006d10:	4623      	mov	r3, r4
 8006d12:	a902      	add	r1, sp, #8
 8006d14:	6800      	ldr	r0, [r0, #0]
 8006d16:	f002 fdad 	bl	8009874 <__ssvfiscanf_r>
 8006d1a:	b01c      	add	sp, #112	@ 0x70
 8006d1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d20:	b003      	add	sp, #12
 8006d22:	4770      	bx	lr
 8006d24:	08006d4f 	.word	0x08006d4f
 8006d28:	20000090 	.word	0x20000090

08006d2c <__sread>:
 8006d2c:	b510      	push	{r4, lr}
 8006d2e:	460c      	mov	r4, r1
 8006d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d34:	f000 f914 	bl	8006f60 <_read_r>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	bfab      	itete	ge
 8006d3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8006d40:	181b      	addge	r3, r3, r0
 8006d42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d46:	bfac      	ite	ge
 8006d48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d4a:	81a3      	strhlt	r3, [r4, #12]
 8006d4c:	bd10      	pop	{r4, pc}

08006d4e <__seofread>:
 8006d4e:	2000      	movs	r0, #0
 8006d50:	4770      	bx	lr

08006d52 <__swrite>:
 8006d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d56:	461f      	mov	r7, r3
 8006d58:	898b      	ldrh	r3, [r1, #12]
 8006d5a:	05db      	lsls	r3, r3, #23
 8006d5c:	4605      	mov	r5, r0
 8006d5e:	460c      	mov	r4, r1
 8006d60:	4616      	mov	r6, r2
 8006d62:	d505      	bpl.n	8006d70 <__swrite+0x1e>
 8006d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d68:	2302      	movs	r3, #2
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f000 f8e6 	bl	8006f3c <_lseek_r>
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d7a:	81a3      	strh	r3, [r4, #12]
 8006d7c:	4632      	mov	r2, r6
 8006d7e:	463b      	mov	r3, r7
 8006d80:	4628      	mov	r0, r5
 8006d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d86:	f000 b8fd 	b.w	8006f84 <_write_r>

08006d8a <__sseek>:
 8006d8a:	b510      	push	{r4, lr}
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d92:	f000 f8d3 	bl	8006f3c <_lseek_r>
 8006d96:	1c43      	adds	r3, r0, #1
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	bf15      	itete	ne
 8006d9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006da2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006da6:	81a3      	strheq	r3, [r4, #12]
 8006da8:	bf18      	it	ne
 8006daa:	81a3      	strhne	r3, [r4, #12]
 8006dac:	bd10      	pop	{r4, pc}

08006dae <__sclose>:
 8006dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db2:	f000 b8b3 	b.w	8006f1c <_close_r>

08006db6 <__swbuf_r>:
 8006db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db8:	460e      	mov	r6, r1
 8006dba:	4614      	mov	r4, r2
 8006dbc:	4605      	mov	r5, r0
 8006dbe:	b118      	cbz	r0, 8006dc8 <__swbuf_r+0x12>
 8006dc0:	6a03      	ldr	r3, [r0, #32]
 8006dc2:	b90b      	cbnz	r3, 8006dc8 <__swbuf_r+0x12>
 8006dc4:	f7ff fec2 	bl	8006b4c <__sinit>
 8006dc8:	69a3      	ldr	r3, [r4, #24]
 8006dca:	60a3      	str	r3, [r4, #8]
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	071a      	lsls	r2, r3, #28
 8006dd0:	d501      	bpl.n	8006dd6 <__swbuf_r+0x20>
 8006dd2:	6923      	ldr	r3, [r4, #16]
 8006dd4:	b943      	cbnz	r3, 8006de8 <__swbuf_r+0x32>
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	4628      	mov	r0, r5
 8006dda:	f000 f82b 	bl	8006e34 <__swsetup_r>
 8006dde:	b118      	cbz	r0, 8006de8 <__swbuf_r+0x32>
 8006de0:	f04f 37ff 	mov.w	r7, #4294967295
 8006de4:	4638      	mov	r0, r7
 8006de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	6922      	ldr	r2, [r4, #16]
 8006dec:	1a98      	subs	r0, r3, r2
 8006dee:	6963      	ldr	r3, [r4, #20]
 8006df0:	b2f6      	uxtb	r6, r6
 8006df2:	4283      	cmp	r3, r0
 8006df4:	4637      	mov	r7, r6
 8006df6:	dc05      	bgt.n	8006e04 <__swbuf_r+0x4e>
 8006df8:	4621      	mov	r1, r4
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f003 f9c2 	bl	800a184 <_fflush_r>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d1ed      	bne.n	8006de0 <__swbuf_r+0x2a>
 8006e04:	68a3      	ldr	r3, [r4, #8]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	60a3      	str	r3, [r4, #8]
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	6022      	str	r2, [r4, #0]
 8006e10:	701e      	strb	r6, [r3, #0]
 8006e12:	6962      	ldr	r2, [r4, #20]
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d004      	beq.n	8006e24 <__swbuf_r+0x6e>
 8006e1a:	89a3      	ldrh	r3, [r4, #12]
 8006e1c:	07db      	lsls	r3, r3, #31
 8006e1e:	d5e1      	bpl.n	8006de4 <__swbuf_r+0x2e>
 8006e20:	2e0a      	cmp	r6, #10
 8006e22:	d1df      	bne.n	8006de4 <__swbuf_r+0x2e>
 8006e24:	4621      	mov	r1, r4
 8006e26:	4628      	mov	r0, r5
 8006e28:	f003 f9ac 	bl	800a184 <_fflush_r>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d0d9      	beq.n	8006de4 <__swbuf_r+0x2e>
 8006e30:	e7d6      	b.n	8006de0 <__swbuf_r+0x2a>
	...

08006e34 <__swsetup_r>:
 8006e34:	b538      	push	{r3, r4, r5, lr}
 8006e36:	4b29      	ldr	r3, [pc, #164]	@ (8006edc <__swsetup_r+0xa8>)
 8006e38:	4605      	mov	r5, r0
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	b118      	cbz	r0, 8006e48 <__swsetup_r+0x14>
 8006e40:	6a03      	ldr	r3, [r0, #32]
 8006e42:	b90b      	cbnz	r3, 8006e48 <__swsetup_r+0x14>
 8006e44:	f7ff fe82 	bl	8006b4c <__sinit>
 8006e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e4c:	0719      	lsls	r1, r3, #28
 8006e4e:	d422      	bmi.n	8006e96 <__swsetup_r+0x62>
 8006e50:	06da      	lsls	r2, r3, #27
 8006e52:	d407      	bmi.n	8006e64 <__swsetup_r+0x30>
 8006e54:	2209      	movs	r2, #9
 8006e56:	602a      	str	r2, [r5, #0]
 8006e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e5c:	81a3      	strh	r3, [r4, #12]
 8006e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e62:	e033      	b.n	8006ecc <__swsetup_r+0x98>
 8006e64:	0758      	lsls	r0, r3, #29
 8006e66:	d512      	bpl.n	8006e8e <__swsetup_r+0x5a>
 8006e68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e6a:	b141      	cbz	r1, 8006e7e <__swsetup_r+0x4a>
 8006e6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e70:	4299      	cmp	r1, r3
 8006e72:	d002      	beq.n	8006e7a <__swsetup_r+0x46>
 8006e74:	4628      	mov	r0, r5
 8006e76:	f000 ff17 	bl	8007ca8 <_free_r>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e7e:	89a3      	ldrh	r3, [r4, #12]
 8006e80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e84:	81a3      	strh	r3, [r4, #12]
 8006e86:	2300      	movs	r3, #0
 8006e88:	6063      	str	r3, [r4, #4]
 8006e8a:	6923      	ldr	r3, [r4, #16]
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	89a3      	ldrh	r3, [r4, #12]
 8006e90:	f043 0308 	orr.w	r3, r3, #8
 8006e94:	81a3      	strh	r3, [r4, #12]
 8006e96:	6923      	ldr	r3, [r4, #16]
 8006e98:	b94b      	cbnz	r3, 8006eae <__swsetup_r+0x7a>
 8006e9a:	89a3      	ldrh	r3, [r4, #12]
 8006e9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ea4:	d003      	beq.n	8006eae <__swsetup_r+0x7a>
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f003 f9b9 	bl	800a220 <__smakebuf_r>
 8006eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eb2:	f013 0201 	ands.w	r2, r3, #1
 8006eb6:	d00a      	beq.n	8006ece <__swsetup_r+0x9a>
 8006eb8:	2200      	movs	r2, #0
 8006eba:	60a2      	str	r2, [r4, #8]
 8006ebc:	6962      	ldr	r2, [r4, #20]
 8006ebe:	4252      	negs	r2, r2
 8006ec0:	61a2      	str	r2, [r4, #24]
 8006ec2:	6922      	ldr	r2, [r4, #16]
 8006ec4:	b942      	cbnz	r2, 8006ed8 <__swsetup_r+0xa4>
 8006ec6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006eca:	d1c5      	bne.n	8006e58 <__swsetup_r+0x24>
 8006ecc:	bd38      	pop	{r3, r4, r5, pc}
 8006ece:	0799      	lsls	r1, r3, #30
 8006ed0:	bf58      	it	pl
 8006ed2:	6962      	ldrpl	r2, [r4, #20]
 8006ed4:	60a2      	str	r2, [r4, #8]
 8006ed6:	e7f4      	b.n	8006ec2 <__swsetup_r+0x8e>
 8006ed8:	2000      	movs	r0, #0
 8006eda:	e7f7      	b.n	8006ecc <__swsetup_r+0x98>
 8006edc:	20000090 	.word	0x20000090

08006ee0 <memset>:
 8006ee0:	4402      	add	r2, r0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d100      	bne.n	8006eea <memset+0xa>
 8006ee8:	4770      	bx	lr
 8006eea:	f803 1b01 	strb.w	r1, [r3], #1
 8006eee:	e7f9      	b.n	8006ee4 <memset+0x4>

08006ef0 <strncmp>:
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	b16a      	cbz	r2, 8006f10 <strncmp+0x20>
 8006ef4:	3901      	subs	r1, #1
 8006ef6:	1884      	adds	r4, r0, r2
 8006ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006efc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d103      	bne.n	8006f0c <strncmp+0x1c>
 8006f04:	42a0      	cmp	r0, r4
 8006f06:	d001      	beq.n	8006f0c <strncmp+0x1c>
 8006f08:	2a00      	cmp	r2, #0
 8006f0a:	d1f5      	bne.n	8006ef8 <strncmp+0x8>
 8006f0c:	1ad0      	subs	r0, r2, r3
 8006f0e:	bd10      	pop	{r4, pc}
 8006f10:	4610      	mov	r0, r2
 8006f12:	e7fc      	b.n	8006f0e <strncmp+0x1e>

08006f14 <_localeconv_r>:
 8006f14:	4800      	ldr	r0, [pc, #0]	@ (8006f18 <_localeconv_r+0x4>)
 8006f16:	4770      	bx	lr
 8006f18:	200001d0 	.word	0x200001d0

08006f1c <_close_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4d06      	ldr	r5, [pc, #24]	@ (8006f38 <_close_r+0x1c>)
 8006f20:	2300      	movs	r3, #0
 8006f22:	4604      	mov	r4, r0
 8006f24:	4608      	mov	r0, r1
 8006f26:	602b      	str	r3, [r5, #0]
 8006f28:	f7fb f950 	bl	80021cc <_close>
 8006f2c:	1c43      	adds	r3, r0, #1
 8006f2e:	d102      	bne.n	8006f36 <_close_r+0x1a>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	b103      	cbz	r3, 8006f36 <_close_r+0x1a>
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	bd38      	pop	{r3, r4, r5, pc}
 8006f38:	200085fc 	.word	0x200085fc

08006f3c <_lseek_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	4d07      	ldr	r5, [pc, #28]	@ (8006f5c <_lseek_r+0x20>)
 8006f40:	4604      	mov	r4, r0
 8006f42:	4608      	mov	r0, r1
 8006f44:	4611      	mov	r1, r2
 8006f46:	2200      	movs	r2, #0
 8006f48:	602a      	str	r2, [r5, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f7fb f965 	bl	800221a <_lseek>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d102      	bne.n	8006f5a <_lseek_r+0x1e>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	b103      	cbz	r3, 8006f5a <_lseek_r+0x1e>
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	200085fc 	.word	0x200085fc

08006f60 <_read_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4d07      	ldr	r5, [pc, #28]	@ (8006f80 <_read_r+0x20>)
 8006f64:	4604      	mov	r4, r0
 8006f66:	4608      	mov	r0, r1
 8006f68:	4611      	mov	r1, r2
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	602a      	str	r2, [r5, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f7fb f90f 	bl	8002192 <_read>
 8006f74:	1c43      	adds	r3, r0, #1
 8006f76:	d102      	bne.n	8006f7e <_read_r+0x1e>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	b103      	cbz	r3, 8006f7e <_read_r+0x1e>
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	200085fc 	.word	0x200085fc

08006f84 <_write_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4d07      	ldr	r5, [pc, #28]	@ (8006fa4 <_write_r+0x20>)
 8006f88:	4604      	mov	r4, r0
 8006f8a:	4608      	mov	r0, r1
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	2200      	movs	r2, #0
 8006f90:	602a      	str	r2, [r5, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	f7fa fae4 	bl	8001560 <_write>
 8006f98:	1c43      	adds	r3, r0, #1
 8006f9a:	d102      	bne.n	8006fa2 <_write_r+0x1e>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	b103      	cbz	r3, 8006fa2 <_write_r+0x1e>
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
 8006fa4:	200085fc 	.word	0x200085fc

08006fa8 <__errno>:
 8006fa8:	4b01      	ldr	r3, [pc, #4]	@ (8006fb0 <__errno+0x8>)
 8006faa:	6818      	ldr	r0, [r3, #0]
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	20000090 	.word	0x20000090

08006fb4 <__libc_init_array>:
 8006fb4:	b570      	push	{r4, r5, r6, lr}
 8006fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8006fec <__libc_init_array+0x38>)
 8006fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8006ff0 <__libc_init_array+0x3c>)
 8006fba:	1b64      	subs	r4, r4, r5
 8006fbc:	10a4      	asrs	r4, r4, #2
 8006fbe:	2600      	movs	r6, #0
 8006fc0:	42a6      	cmp	r6, r4
 8006fc2:	d109      	bne.n	8006fd8 <__libc_init_array+0x24>
 8006fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8006ff4 <__libc_init_array+0x40>)
 8006fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8006ff8 <__libc_init_array+0x44>)
 8006fc8:	f003 fece 	bl	800ad68 <_init>
 8006fcc:	1b64      	subs	r4, r4, r5
 8006fce:	10a4      	asrs	r4, r4, #2
 8006fd0:	2600      	movs	r6, #0
 8006fd2:	42a6      	cmp	r6, r4
 8006fd4:	d105      	bne.n	8006fe2 <__libc_init_array+0x2e>
 8006fd6:	bd70      	pop	{r4, r5, r6, pc}
 8006fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fdc:	4798      	blx	r3
 8006fde:	3601      	adds	r6, #1
 8006fe0:	e7ee      	b.n	8006fc0 <__libc_init_array+0xc>
 8006fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fe6:	4798      	blx	r3
 8006fe8:	3601      	adds	r6, #1
 8006fea:	e7f2      	b.n	8006fd2 <__libc_init_array+0x1e>
 8006fec:	0800b39c 	.word	0x0800b39c
 8006ff0:	0800b39c 	.word	0x0800b39c
 8006ff4:	0800b39c 	.word	0x0800b39c
 8006ff8:	0800b3a0 	.word	0x0800b3a0

08006ffc <__retarget_lock_init_recursive>:
 8006ffc:	4770      	bx	lr

08006ffe <__retarget_lock_acquire_recursive>:
 8006ffe:	4770      	bx	lr

08007000 <__retarget_lock_release_recursive>:
 8007000:	4770      	bx	lr
	...

08007004 <nanf>:
 8007004:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800700c <nanf+0x8>
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	7fc00000 	.word	0x7fc00000

08007010 <quorem>:
 8007010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	6903      	ldr	r3, [r0, #16]
 8007016:	690c      	ldr	r4, [r1, #16]
 8007018:	42a3      	cmp	r3, r4
 800701a:	4607      	mov	r7, r0
 800701c:	db7e      	blt.n	800711c <quorem+0x10c>
 800701e:	3c01      	subs	r4, #1
 8007020:	f101 0814 	add.w	r8, r1, #20
 8007024:	00a3      	lsls	r3, r4, #2
 8007026:	f100 0514 	add.w	r5, r0, #20
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007030:	9301      	str	r3, [sp, #4]
 8007032:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007036:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800703a:	3301      	adds	r3, #1
 800703c:	429a      	cmp	r2, r3
 800703e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007042:	fbb2 f6f3 	udiv	r6, r2, r3
 8007046:	d32e      	bcc.n	80070a6 <quorem+0x96>
 8007048:	f04f 0a00 	mov.w	sl, #0
 800704c:	46c4      	mov	ip, r8
 800704e:	46ae      	mov	lr, r5
 8007050:	46d3      	mov	fp, sl
 8007052:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007056:	b298      	uxth	r0, r3
 8007058:	fb06 a000 	mla	r0, r6, r0, sl
 800705c:	0c02      	lsrs	r2, r0, #16
 800705e:	0c1b      	lsrs	r3, r3, #16
 8007060:	fb06 2303 	mla	r3, r6, r3, r2
 8007064:	f8de 2000 	ldr.w	r2, [lr]
 8007068:	b280      	uxth	r0, r0
 800706a:	b292      	uxth	r2, r2
 800706c:	1a12      	subs	r2, r2, r0
 800706e:	445a      	add	r2, fp
 8007070:	f8de 0000 	ldr.w	r0, [lr]
 8007074:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007078:	b29b      	uxth	r3, r3
 800707a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800707e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007082:	b292      	uxth	r2, r2
 8007084:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007088:	45e1      	cmp	r9, ip
 800708a:	f84e 2b04 	str.w	r2, [lr], #4
 800708e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007092:	d2de      	bcs.n	8007052 <quorem+0x42>
 8007094:	9b00      	ldr	r3, [sp, #0]
 8007096:	58eb      	ldr	r3, [r5, r3]
 8007098:	b92b      	cbnz	r3, 80070a6 <quorem+0x96>
 800709a:	9b01      	ldr	r3, [sp, #4]
 800709c:	3b04      	subs	r3, #4
 800709e:	429d      	cmp	r5, r3
 80070a0:	461a      	mov	r2, r3
 80070a2:	d32f      	bcc.n	8007104 <quorem+0xf4>
 80070a4:	613c      	str	r4, [r7, #16]
 80070a6:	4638      	mov	r0, r7
 80070a8:	f001 f9c2 	bl	8008430 <__mcmp>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	db25      	blt.n	80070fc <quorem+0xec>
 80070b0:	4629      	mov	r1, r5
 80070b2:	2000      	movs	r0, #0
 80070b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80070b8:	f8d1 c000 	ldr.w	ip, [r1]
 80070bc:	fa1f fe82 	uxth.w	lr, r2
 80070c0:	fa1f f38c 	uxth.w	r3, ip
 80070c4:	eba3 030e 	sub.w	r3, r3, lr
 80070c8:	4403      	add	r3, r0
 80070ca:	0c12      	lsrs	r2, r2, #16
 80070cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80070d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070da:	45c1      	cmp	r9, r8
 80070dc:	f841 3b04 	str.w	r3, [r1], #4
 80070e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80070e4:	d2e6      	bcs.n	80070b4 <quorem+0xa4>
 80070e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070ee:	b922      	cbnz	r2, 80070fa <quorem+0xea>
 80070f0:	3b04      	subs	r3, #4
 80070f2:	429d      	cmp	r5, r3
 80070f4:	461a      	mov	r2, r3
 80070f6:	d30b      	bcc.n	8007110 <quorem+0x100>
 80070f8:	613c      	str	r4, [r7, #16]
 80070fa:	3601      	adds	r6, #1
 80070fc:	4630      	mov	r0, r6
 80070fe:	b003      	add	sp, #12
 8007100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007104:	6812      	ldr	r2, [r2, #0]
 8007106:	3b04      	subs	r3, #4
 8007108:	2a00      	cmp	r2, #0
 800710a:	d1cb      	bne.n	80070a4 <quorem+0x94>
 800710c:	3c01      	subs	r4, #1
 800710e:	e7c6      	b.n	800709e <quorem+0x8e>
 8007110:	6812      	ldr	r2, [r2, #0]
 8007112:	3b04      	subs	r3, #4
 8007114:	2a00      	cmp	r2, #0
 8007116:	d1ef      	bne.n	80070f8 <quorem+0xe8>
 8007118:	3c01      	subs	r4, #1
 800711a:	e7ea      	b.n	80070f2 <quorem+0xe2>
 800711c:	2000      	movs	r0, #0
 800711e:	e7ee      	b.n	80070fe <quorem+0xee>

08007120 <_dtoa_r>:
 8007120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007124:	69c7      	ldr	r7, [r0, #28]
 8007126:	b099      	sub	sp, #100	@ 0x64
 8007128:	ed8d 0b02 	vstr	d0, [sp, #8]
 800712c:	ec55 4b10 	vmov	r4, r5, d0
 8007130:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007132:	9109      	str	r1, [sp, #36]	@ 0x24
 8007134:	4683      	mov	fp, r0
 8007136:	920e      	str	r2, [sp, #56]	@ 0x38
 8007138:	9313      	str	r3, [sp, #76]	@ 0x4c
 800713a:	b97f      	cbnz	r7, 800715c <_dtoa_r+0x3c>
 800713c:	2010      	movs	r0, #16
 800713e:	f000 fdfd 	bl	8007d3c <malloc>
 8007142:	4602      	mov	r2, r0
 8007144:	f8cb 001c 	str.w	r0, [fp, #28]
 8007148:	b920      	cbnz	r0, 8007154 <_dtoa_r+0x34>
 800714a:	4ba7      	ldr	r3, [pc, #668]	@ (80073e8 <_dtoa_r+0x2c8>)
 800714c:	21ef      	movs	r1, #239	@ 0xef
 800714e:	48a7      	ldr	r0, [pc, #668]	@ (80073ec <_dtoa_r+0x2cc>)
 8007150:	f003 f97a 	bl	800a448 <__assert_func>
 8007154:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007158:	6007      	str	r7, [r0, #0]
 800715a:	60c7      	str	r7, [r0, #12]
 800715c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007160:	6819      	ldr	r1, [r3, #0]
 8007162:	b159      	cbz	r1, 800717c <_dtoa_r+0x5c>
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	604a      	str	r2, [r1, #4]
 8007168:	2301      	movs	r3, #1
 800716a:	4093      	lsls	r3, r2
 800716c:	608b      	str	r3, [r1, #8]
 800716e:	4658      	mov	r0, fp
 8007170:	f000 feda 	bl	8007f28 <_Bfree>
 8007174:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007178:	2200      	movs	r2, #0
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	1e2b      	subs	r3, r5, #0
 800717e:	bfb9      	ittee	lt
 8007180:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007184:	9303      	strlt	r3, [sp, #12]
 8007186:	2300      	movge	r3, #0
 8007188:	6033      	strge	r3, [r6, #0]
 800718a:	9f03      	ldr	r7, [sp, #12]
 800718c:	4b98      	ldr	r3, [pc, #608]	@ (80073f0 <_dtoa_r+0x2d0>)
 800718e:	bfbc      	itt	lt
 8007190:	2201      	movlt	r2, #1
 8007192:	6032      	strlt	r2, [r6, #0]
 8007194:	43bb      	bics	r3, r7
 8007196:	d112      	bne.n	80071be <_dtoa_r+0x9e>
 8007198:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800719a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800719e:	6013      	str	r3, [r2, #0]
 80071a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80071a4:	4323      	orrs	r3, r4
 80071a6:	f000 854d 	beq.w	8007c44 <_dtoa_r+0xb24>
 80071aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007404 <_dtoa_r+0x2e4>
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 854f 	beq.w	8007c54 <_dtoa_r+0xb34>
 80071b6:	f10a 0303 	add.w	r3, sl, #3
 80071ba:	f000 bd49 	b.w	8007c50 <_dtoa_r+0xb30>
 80071be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071c2:	2200      	movs	r2, #0
 80071c4:	ec51 0b17 	vmov	r0, r1, d7
 80071c8:	2300      	movs	r3, #0
 80071ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80071ce:	f7f9 fc7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80071d2:	4680      	mov	r8, r0
 80071d4:	b158      	cbz	r0, 80071ee <_dtoa_r+0xce>
 80071d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80071d8:	2301      	movs	r3, #1
 80071da:	6013      	str	r3, [r2, #0]
 80071dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071de:	b113      	cbz	r3, 80071e6 <_dtoa_r+0xc6>
 80071e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80071e2:	4b84      	ldr	r3, [pc, #528]	@ (80073f4 <_dtoa_r+0x2d4>)
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007408 <_dtoa_r+0x2e8>
 80071ea:	f000 bd33 	b.w	8007c54 <_dtoa_r+0xb34>
 80071ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80071f2:	aa16      	add	r2, sp, #88	@ 0x58
 80071f4:	a917      	add	r1, sp, #92	@ 0x5c
 80071f6:	4658      	mov	r0, fp
 80071f8:	f001 fa3a 	bl	8008670 <__d2b>
 80071fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007200:	4681      	mov	r9, r0
 8007202:	2e00      	cmp	r6, #0
 8007204:	d077      	beq.n	80072f6 <_dtoa_r+0x1d6>
 8007206:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007208:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800720c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007214:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007218:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800721c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007220:	4619      	mov	r1, r3
 8007222:	2200      	movs	r2, #0
 8007224:	4b74      	ldr	r3, [pc, #464]	@ (80073f8 <_dtoa_r+0x2d8>)
 8007226:	f7f9 f82f 	bl	8000288 <__aeabi_dsub>
 800722a:	a369      	add	r3, pc, #420	@ (adr r3, 80073d0 <_dtoa_r+0x2b0>)
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	f7f9 f9e2 	bl	80005f8 <__aeabi_dmul>
 8007234:	a368      	add	r3, pc, #416	@ (adr r3, 80073d8 <_dtoa_r+0x2b8>)
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	f7f9 f827 	bl	800028c <__adddf3>
 800723e:	4604      	mov	r4, r0
 8007240:	4630      	mov	r0, r6
 8007242:	460d      	mov	r5, r1
 8007244:	f7f9 f96e 	bl	8000524 <__aeabi_i2d>
 8007248:	a365      	add	r3, pc, #404	@ (adr r3, 80073e0 <_dtoa_r+0x2c0>)
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	f7f9 f9d3 	bl	80005f8 <__aeabi_dmul>
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	4620      	mov	r0, r4
 8007258:	4629      	mov	r1, r5
 800725a:	f7f9 f817 	bl	800028c <__adddf3>
 800725e:	4604      	mov	r4, r0
 8007260:	460d      	mov	r5, r1
 8007262:	f7f9 fc79 	bl	8000b58 <__aeabi_d2iz>
 8007266:	2200      	movs	r2, #0
 8007268:	4607      	mov	r7, r0
 800726a:	2300      	movs	r3, #0
 800726c:	4620      	mov	r0, r4
 800726e:	4629      	mov	r1, r5
 8007270:	f7f9 fc34 	bl	8000adc <__aeabi_dcmplt>
 8007274:	b140      	cbz	r0, 8007288 <_dtoa_r+0x168>
 8007276:	4638      	mov	r0, r7
 8007278:	f7f9 f954 	bl	8000524 <__aeabi_i2d>
 800727c:	4622      	mov	r2, r4
 800727e:	462b      	mov	r3, r5
 8007280:	f7f9 fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 8007284:	b900      	cbnz	r0, 8007288 <_dtoa_r+0x168>
 8007286:	3f01      	subs	r7, #1
 8007288:	2f16      	cmp	r7, #22
 800728a:	d851      	bhi.n	8007330 <_dtoa_r+0x210>
 800728c:	4b5b      	ldr	r3, [pc, #364]	@ (80073fc <_dtoa_r+0x2dc>)
 800728e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007296:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800729a:	f7f9 fc1f 	bl	8000adc <__aeabi_dcmplt>
 800729e:	2800      	cmp	r0, #0
 80072a0:	d048      	beq.n	8007334 <_dtoa_r+0x214>
 80072a2:	3f01      	subs	r7, #1
 80072a4:	2300      	movs	r3, #0
 80072a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80072a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80072aa:	1b9b      	subs	r3, r3, r6
 80072ac:	1e5a      	subs	r2, r3, #1
 80072ae:	bf44      	itt	mi
 80072b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80072b4:	2300      	movmi	r3, #0
 80072b6:	9208      	str	r2, [sp, #32]
 80072b8:	bf54      	ite	pl
 80072ba:	f04f 0800 	movpl.w	r8, #0
 80072be:	9308      	strmi	r3, [sp, #32]
 80072c0:	2f00      	cmp	r7, #0
 80072c2:	db39      	blt.n	8007338 <_dtoa_r+0x218>
 80072c4:	9b08      	ldr	r3, [sp, #32]
 80072c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80072c8:	443b      	add	r3, r7
 80072ca:	9308      	str	r3, [sp, #32]
 80072cc:	2300      	movs	r3, #0
 80072ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80072d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d2:	2b09      	cmp	r3, #9
 80072d4:	d864      	bhi.n	80073a0 <_dtoa_r+0x280>
 80072d6:	2b05      	cmp	r3, #5
 80072d8:	bfc4      	itt	gt
 80072da:	3b04      	subgt	r3, #4
 80072dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80072de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072e0:	f1a3 0302 	sub.w	r3, r3, #2
 80072e4:	bfcc      	ite	gt
 80072e6:	2400      	movgt	r4, #0
 80072e8:	2401      	movle	r4, #1
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d863      	bhi.n	80073b6 <_dtoa_r+0x296>
 80072ee:	e8df f003 	tbb	[pc, r3]
 80072f2:	372a      	.short	0x372a
 80072f4:	5535      	.short	0x5535
 80072f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80072fa:	441e      	add	r6, r3
 80072fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007300:	2b20      	cmp	r3, #32
 8007302:	bfc1      	itttt	gt
 8007304:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007308:	409f      	lslgt	r7, r3
 800730a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800730e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007312:	bfd6      	itet	le
 8007314:	f1c3 0320 	rsble	r3, r3, #32
 8007318:	ea47 0003 	orrgt.w	r0, r7, r3
 800731c:	fa04 f003 	lslle.w	r0, r4, r3
 8007320:	f7f9 f8f0 	bl	8000504 <__aeabi_ui2d>
 8007324:	2201      	movs	r2, #1
 8007326:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800732a:	3e01      	subs	r6, #1
 800732c:	9214      	str	r2, [sp, #80]	@ 0x50
 800732e:	e777      	b.n	8007220 <_dtoa_r+0x100>
 8007330:	2301      	movs	r3, #1
 8007332:	e7b8      	b.n	80072a6 <_dtoa_r+0x186>
 8007334:	9012      	str	r0, [sp, #72]	@ 0x48
 8007336:	e7b7      	b.n	80072a8 <_dtoa_r+0x188>
 8007338:	427b      	negs	r3, r7
 800733a:	930a      	str	r3, [sp, #40]	@ 0x28
 800733c:	2300      	movs	r3, #0
 800733e:	eba8 0807 	sub.w	r8, r8, r7
 8007342:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007344:	e7c4      	b.n	80072d0 <_dtoa_r+0x1b0>
 8007346:	2300      	movs	r3, #0
 8007348:	930b      	str	r3, [sp, #44]	@ 0x2c
 800734a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800734c:	2b00      	cmp	r3, #0
 800734e:	dc35      	bgt.n	80073bc <_dtoa_r+0x29c>
 8007350:	2301      	movs	r3, #1
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	9307      	str	r3, [sp, #28]
 8007356:	461a      	mov	r2, r3
 8007358:	920e      	str	r2, [sp, #56]	@ 0x38
 800735a:	e00b      	b.n	8007374 <_dtoa_r+0x254>
 800735c:	2301      	movs	r3, #1
 800735e:	e7f3      	b.n	8007348 <_dtoa_r+0x228>
 8007360:	2300      	movs	r3, #0
 8007362:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007364:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007366:	18fb      	adds	r3, r7, r3
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	3301      	adds	r3, #1
 800736c:	2b01      	cmp	r3, #1
 800736e:	9307      	str	r3, [sp, #28]
 8007370:	bfb8      	it	lt
 8007372:	2301      	movlt	r3, #1
 8007374:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007378:	2100      	movs	r1, #0
 800737a:	2204      	movs	r2, #4
 800737c:	f102 0514 	add.w	r5, r2, #20
 8007380:	429d      	cmp	r5, r3
 8007382:	d91f      	bls.n	80073c4 <_dtoa_r+0x2a4>
 8007384:	6041      	str	r1, [r0, #4]
 8007386:	4658      	mov	r0, fp
 8007388:	f000 fd8e 	bl	8007ea8 <_Balloc>
 800738c:	4682      	mov	sl, r0
 800738e:	2800      	cmp	r0, #0
 8007390:	d13c      	bne.n	800740c <_dtoa_r+0x2ec>
 8007392:	4b1b      	ldr	r3, [pc, #108]	@ (8007400 <_dtoa_r+0x2e0>)
 8007394:	4602      	mov	r2, r0
 8007396:	f240 11af 	movw	r1, #431	@ 0x1af
 800739a:	e6d8      	b.n	800714e <_dtoa_r+0x2e>
 800739c:	2301      	movs	r3, #1
 800739e:	e7e0      	b.n	8007362 <_dtoa_r+0x242>
 80073a0:	2401      	movs	r4, #1
 80073a2:	2300      	movs	r3, #0
 80073a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80073a8:	f04f 33ff 	mov.w	r3, #4294967295
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	9307      	str	r3, [sp, #28]
 80073b0:	2200      	movs	r2, #0
 80073b2:	2312      	movs	r3, #18
 80073b4:	e7d0      	b.n	8007358 <_dtoa_r+0x238>
 80073b6:	2301      	movs	r3, #1
 80073b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073ba:	e7f5      	b.n	80073a8 <_dtoa_r+0x288>
 80073bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	9307      	str	r3, [sp, #28]
 80073c2:	e7d7      	b.n	8007374 <_dtoa_r+0x254>
 80073c4:	3101      	adds	r1, #1
 80073c6:	0052      	lsls	r2, r2, #1
 80073c8:	e7d8      	b.n	800737c <_dtoa_r+0x25c>
 80073ca:	bf00      	nop
 80073cc:	f3af 8000 	nop.w
 80073d0:	636f4361 	.word	0x636f4361
 80073d4:	3fd287a7 	.word	0x3fd287a7
 80073d8:	8b60c8b3 	.word	0x8b60c8b3
 80073dc:	3fc68a28 	.word	0x3fc68a28
 80073e0:	509f79fb 	.word	0x509f79fb
 80073e4:	3fd34413 	.word	0x3fd34413
 80073e8:	0800af8c 	.word	0x0800af8c
 80073ec:	0800afa3 	.word	0x0800afa3
 80073f0:	7ff00000 	.word	0x7ff00000
 80073f4:	0800b2e9 	.word	0x0800b2e9
 80073f8:	3ff80000 	.word	0x3ff80000
 80073fc:	0800b0a0 	.word	0x0800b0a0
 8007400:	0800affb 	.word	0x0800affb
 8007404:	0800af88 	.word	0x0800af88
 8007408:	0800b2e8 	.word	0x0800b2e8
 800740c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007410:	6018      	str	r0, [r3, #0]
 8007412:	9b07      	ldr	r3, [sp, #28]
 8007414:	2b0e      	cmp	r3, #14
 8007416:	f200 80a4 	bhi.w	8007562 <_dtoa_r+0x442>
 800741a:	2c00      	cmp	r4, #0
 800741c:	f000 80a1 	beq.w	8007562 <_dtoa_r+0x442>
 8007420:	2f00      	cmp	r7, #0
 8007422:	dd33      	ble.n	800748c <_dtoa_r+0x36c>
 8007424:	4bad      	ldr	r3, [pc, #692]	@ (80076dc <_dtoa_r+0x5bc>)
 8007426:	f007 020f 	and.w	r2, r7, #15
 800742a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800742e:	ed93 7b00 	vldr	d7, [r3]
 8007432:	05f8      	lsls	r0, r7, #23
 8007434:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007438:	ea4f 1427 	mov.w	r4, r7, asr #4
 800743c:	d516      	bpl.n	800746c <_dtoa_r+0x34c>
 800743e:	4ba8      	ldr	r3, [pc, #672]	@ (80076e0 <_dtoa_r+0x5c0>)
 8007440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007448:	f7f9 fa00 	bl	800084c <__aeabi_ddiv>
 800744c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007450:	f004 040f 	and.w	r4, r4, #15
 8007454:	2603      	movs	r6, #3
 8007456:	4da2      	ldr	r5, [pc, #648]	@ (80076e0 <_dtoa_r+0x5c0>)
 8007458:	b954      	cbnz	r4, 8007470 <_dtoa_r+0x350>
 800745a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800745e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007462:	f7f9 f9f3 	bl	800084c <__aeabi_ddiv>
 8007466:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800746a:	e028      	b.n	80074be <_dtoa_r+0x39e>
 800746c:	2602      	movs	r6, #2
 800746e:	e7f2      	b.n	8007456 <_dtoa_r+0x336>
 8007470:	07e1      	lsls	r1, r4, #31
 8007472:	d508      	bpl.n	8007486 <_dtoa_r+0x366>
 8007474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007478:	e9d5 2300 	ldrd	r2, r3, [r5]
 800747c:	f7f9 f8bc 	bl	80005f8 <__aeabi_dmul>
 8007480:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007484:	3601      	adds	r6, #1
 8007486:	1064      	asrs	r4, r4, #1
 8007488:	3508      	adds	r5, #8
 800748a:	e7e5      	b.n	8007458 <_dtoa_r+0x338>
 800748c:	f000 80d2 	beq.w	8007634 <_dtoa_r+0x514>
 8007490:	427c      	negs	r4, r7
 8007492:	4b92      	ldr	r3, [pc, #584]	@ (80076dc <_dtoa_r+0x5bc>)
 8007494:	4d92      	ldr	r5, [pc, #584]	@ (80076e0 <_dtoa_r+0x5c0>)
 8007496:	f004 020f 	and.w	r2, r4, #15
 800749a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074a6:	f7f9 f8a7 	bl	80005f8 <__aeabi_dmul>
 80074aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074ae:	1124      	asrs	r4, r4, #4
 80074b0:	2300      	movs	r3, #0
 80074b2:	2602      	movs	r6, #2
 80074b4:	2c00      	cmp	r4, #0
 80074b6:	f040 80b2 	bne.w	800761e <_dtoa_r+0x4fe>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1d3      	bne.n	8007466 <_dtoa_r+0x346>
 80074be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80074c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 80b7 	beq.w	8007638 <_dtoa_r+0x518>
 80074ca:	4b86      	ldr	r3, [pc, #536]	@ (80076e4 <_dtoa_r+0x5c4>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	4620      	mov	r0, r4
 80074d0:	4629      	mov	r1, r5
 80074d2:	f7f9 fb03 	bl	8000adc <__aeabi_dcmplt>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f000 80ae 	beq.w	8007638 <_dtoa_r+0x518>
 80074dc:	9b07      	ldr	r3, [sp, #28]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 80aa 	beq.w	8007638 <_dtoa_r+0x518>
 80074e4:	9b00      	ldr	r3, [sp, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	dd37      	ble.n	800755a <_dtoa_r+0x43a>
 80074ea:	1e7b      	subs	r3, r7, #1
 80074ec:	9304      	str	r3, [sp, #16]
 80074ee:	4620      	mov	r0, r4
 80074f0:	4b7d      	ldr	r3, [pc, #500]	@ (80076e8 <_dtoa_r+0x5c8>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	4629      	mov	r1, r5
 80074f6:	f7f9 f87f 	bl	80005f8 <__aeabi_dmul>
 80074fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074fe:	9c00      	ldr	r4, [sp, #0]
 8007500:	3601      	adds	r6, #1
 8007502:	4630      	mov	r0, r6
 8007504:	f7f9 f80e 	bl	8000524 <__aeabi_i2d>
 8007508:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800750c:	f7f9 f874 	bl	80005f8 <__aeabi_dmul>
 8007510:	4b76      	ldr	r3, [pc, #472]	@ (80076ec <_dtoa_r+0x5cc>)
 8007512:	2200      	movs	r2, #0
 8007514:	f7f8 feba 	bl	800028c <__adddf3>
 8007518:	4605      	mov	r5, r0
 800751a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800751e:	2c00      	cmp	r4, #0
 8007520:	f040 808d 	bne.w	800763e <_dtoa_r+0x51e>
 8007524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007528:	4b71      	ldr	r3, [pc, #452]	@ (80076f0 <_dtoa_r+0x5d0>)
 800752a:	2200      	movs	r2, #0
 800752c:	f7f8 feac 	bl	8000288 <__aeabi_dsub>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007538:	462a      	mov	r2, r5
 800753a:	4633      	mov	r3, r6
 800753c:	f7f9 faec 	bl	8000b18 <__aeabi_dcmpgt>
 8007540:	2800      	cmp	r0, #0
 8007542:	f040 828b 	bne.w	8007a5c <_dtoa_r+0x93c>
 8007546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800754a:	462a      	mov	r2, r5
 800754c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007550:	f7f9 fac4 	bl	8000adc <__aeabi_dcmplt>
 8007554:	2800      	cmp	r0, #0
 8007556:	f040 8128 	bne.w	80077aa <_dtoa_r+0x68a>
 800755a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800755e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007562:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007564:	2b00      	cmp	r3, #0
 8007566:	f2c0 815a 	blt.w	800781e <_dtoa_r+0x6fe>
 800756a:	2f0e      	cmp	r7, #14
 800756c:	f300 8157 	bgt.w	800781e <_dtoa_r+0x6fe>
 8007570:	4b5a      	ldr	r3, [pc, #360]	@ (80076dc <_dtoa_r+0x5bc>)
 8007572:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007576:	ed93 7b00 	vldr	d7, [r3]
 800757a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800757c:	2b00      	cmp	r3, #0
 800757e:	ed8d 7b00 	vstr	d7, [sp]
 8007582:	da03      	bge.n	800758c <_dtoa_r+0x46c>
 8007584:	9b07      	ldr	r3, [sp, #28]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f340 8101 	ble.w	800778e <_dtoa_r+0x66e>
 800758c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007590:	4656      	mov	r6, sl
 8007592:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007596:	4620      	mov	r0, r4
 8007598:	4629      	mov	r1, r5
 800759a:	f7f9 f957 	bl	800084c <__aeabi_ddiv>
 800759e:	f7f9 fadb 	bl	8000b58 <__aeabi_d2iz>
 80075a2:	4680      	mov	r8, r0
 80075a4:	f7f8 ffbe 	bl	8000524 <__aeabi_i2d>
 80075a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075ac:	f7f9 f824 	bl	80005f8 <__aeabi_dmul>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	4620      	mov	r0, r4
 80075b6:	4629      	mov	r1, r5
 80075b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80075bc:	f7f8 fe64 	bl	8000288 <__aeabi_dsub>
 80075c0:	f806 4b01 	strb.w	r4, [r6], #1
 80075c4:	9d07      	ldr	r5, [sp, #28]
 80075c6:	eba6 040a 	sub.w	r4, r6, sl
 80075ca:	42a5      	cmp	r5, r4
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	f040 8117 	bne.w	8007802 <_dtoa_r+0x6e2>
 80075d4:	f7f8 fe5a 	bl	800028c <__adddf3>
 80075d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075dc:	4604      	mov	r4, r0
 80075de:	460d      	mov	r5, r1
 80075e0:	f7f9 fa9a 	bl	8000b18 <__aeabi_dcmpgt>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	f040 80f9 	bne.w	80077dc <_dtoa_r+0x6bc>
 80075ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075ee:	4620      	mov	r0, r4
 80075f0:	4629      	mov	r1, r5
 80075f2:	f7f9 fa69 	bl	8000ac8 <__aeabi_dcmpeq>
 80075f6:	b118      	cbz	r0, 8007600 <_dtoa_r+0x4e0>
 80075f8:	f018 0f01 	tst.w	r8, #1
 80075fc:	f040 80ee 	bne.w	80077dc <_dtoa_r+0x6bc>
 8007600:	4649      	mov	r1, r9
 8007602:	4658      	mov	r0, fp
 8007604:	f000 fc90 	bl	8007f28 <_Bfree>
 8007608:	2300      	movs	r3, #0
 800760a:	7033      	strb	r3, [r6, #0]
 800760c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800760e:	3701      	adds	r7, #1
 8007610:	601f      	str	r7, [r3, #0]
 8007612:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 831d 	beq.w	8007c54 <_dtoa_r+0xb34>
 800761a:	601e      	str	r6, [r3, #0]
 800761c:	e31a      	b.n	8007c54 <_dtoa_r+0xb34>
 800761e:	07e2      	lsls	r2, r4, #31
 8007620:	d505      	bpl.n	800762e <_dtoa_r+0x50e>
 8007622:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007626:	f7f8 ffe7 	bl	80005f8 <__aeabi_dmul>
 800762a:	3601      	adds	r6, #1
 800762c:	2301      	movs	r3, #1
 800762e:	1064      	asrs	r4, r4, #1
 8007630:	3508      	adds	r5, #8
 8007632:	e73f      	b.n	80074b4 <_dtoa_r+0x394>
 8007634:	2602      	movs	r6, #2
 8007636:	e742      	b.n	80074be <_dtoa_r+0x39e>
 8007638:	9c07      	ldr	r4, [sp, #28]
 800763a:	9704      	str	r7, [sp, #16]
 800763c:	e761      	b.n	8007502 <_dtoa_r+0x3e2>
 800763e:	4b27      	ldr	r3, [pc, #156]	@ (80076dc <_dtoa_r+0x5bc>)
 8007640:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007642:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007646:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800764a:	4454      	add	r4, sl
 800764c:	2900      	cmp	r1, #0
 800764e:	d053      	beq.n	80076f8 <_dtoa_r+0x5d8>
 8007650:	4928      	ldr	r1, [pc, #160]	@ (80076f4 <_dtoa_r+0x5d4>)
 8007652:	2000      	movs	r0, #0
 8007654:	f7f9 f8fa 	bl	800084c <__aeabi_ddiv>
 8007658:	4633      	mov	r3, r6
 800765a:	462a      	mov	r2, r5
 800765c:	f7f8 fe14 	bl	8000288 <__aeabi_dsub>
 8007660:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007664:	4656      	mov	r6, sl
 8007666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800766a:	f7f9 fa75 	bl	8000b58 <__aeabi_d2iz>
 800766e:	4605      	mov	r5, r0
 8007670:	f7f8 ff58 	bl	8000524 <__aeabi_i2d>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800767c:	f7f8 fe04 	bl	8000288 <__aeabi_dsub>
 8007680:	3530      	adds	r5, #48	@ 0x30
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800768a:	f806 5b01 	strb.w	r5, [r6], #1
 800768e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007692:	f7f9 fa23 	bl	8000adc <__aeabi_dcmplt>
 8007696:	2800      	cmp	r0, #0
 8007698:	d171      	bne.n	800777e <_dtoa_r+0x65e>
 800769a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800769e:	4911      	ldr	r1, [pc, #68]	@ (80076e4 <_dtoa_r+0x5c4>)
 80076a0:	2000      	movs	r0, #0
 80076a2:	f7f8 fdf1 	bl	8000288 <__aeabi_dsub>
 80076a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80076aa:	f7f9 fa17 	bl	8000adc <__aeabi_dcmplt>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	f040 8095 	bne.w	80077de <_dtoa_r+0x6be>
 80076b4:	42a6      	cmp	r6, r4
 80076b6:	f43f af50 	beq.w	800755a <_dtoa_r+0x43a>
 80076ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80076be:	4b0a      	ldr	r3, [pc, #40]	@ (80076e8 <_dtoa_r+0x5c8>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	f7f8 ff99 	bl	80005f8 <__aeabi_dmul>
 80076c6:	4b08      	ldr	r3, [pc, #32]	@ (80076e8 <_dtoa_r+0x5c8>)
 80076c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80076cc:	2200      	movs	r2, #0
 80076ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076d2:	f7f8 ff91 	bl	80005f8 <__aeabi_dmul>
 80076d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076da:	e7c4      	b.n	8007666 <_dtoa_r+0x546>
 80076dc:	0800b0a0 	.word	0x0800b0a0
 80076e0:	0800b078 	.word	0x0800b078
 80076e4:	3ff00000 	.word	0x3ff00000
 80076e8:	40240000 	.word	0x40240000
 80076ec:	401c0000 	.word	0x401c0000
 80076f0:	40140000 	.word	0x40140000
 80076f4:	3fe00000 	.word	0x3fe00000
 80076f8:	4631      	mov	r1, r6
 80076fa:	4628      	mov	r0, r5
 80076fc:	f7f8 ff7c 	bl	80005f8 <__aeabi_dmul>
 8007700:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007704:	9415      	str	r4, [sp, #84]	@ 0x54
 8007706:	4656      	mov	r6, sl
 8007708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800770c:	f7f9 fa24 	bl	8000b58 <__aeabi_d2iz>
 8007710:	4605      	mov	r5, r0
 8007712:	f7f8 ff07 	bl	8000524 <__aeabi_i2d>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800771e:	f7f8 fdb3 	bl	8000288 <__aeabi_dsub>
 8007722:	3530      	adds	r5, #48	@ 0x30
 8007724:	f806 5b01 	strb.w	r5, [r6], #1
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	42a6      	cmp	r6, r4
 800772e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007732:	f04f 0200 	mov.w	r2, #0
 8007736:	d124      	bne.n	8007782 <_dtoa_r+0x662>
 8007738:	4bac      	ldr	r3, [pc, #688]	@ (80079ec <_dtoa_r+0x8cc>)
 800773a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800773e:	f7f8 fda5 	bl	800028c <__adddf3>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800774a:	f7f9 f9e5 	bl	8000b18 <__aeabi_dcmpgt>
 800774e:	2800      	cmp	r0, #0
 8007750:	d145      	bne.n	80077de <_dtoa_r+0x6be>
 8007752:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007756:	49a5      	ldr	r1, [pc, #660]	@ (80079ec <_dtoa_r+0x8cc>)
 8007758:	2000      	movs	r0, #0
 800775a:	f7f8 fd95 	bl	8000288 <__aeabi_dsub>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007766:	f7f9 f9b9 	bl	8000adc <__aeabi_dcmplt>
 800776a:	2800      	cmp	r0, #0
 800776c:	f43f aef5 	beq.w	800755a <_dtoa_r+0x43a>
 8007770:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007772:	1e73      	subs	r3, r6, #1
 8007774:	9315      	str	r3, [sp, #84]	@ 0x54
 8007776:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800777a:	2b30      	cmp	r3, #48	@ 0x30
 800777c:	d0f8      	beq.n	8007770 <_dtoa_r+0x650>
 800777e:	9f04      	ldr	r7, [sp, #16]
 8007780:	e73e      	b.n	8007600 <_dtoa_r+0x4e0>
 8007782:	4b9b      	ldr	r3, [pc, #620]	@ (80079f0 <_dtoa_r+0x8d0>)
 8007784:	f7f8 ff38 	bl	80005f8 <__aeabi_dmul>
 8007788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800778c:	e7bc      	b.n	8007708 <_dtoa_r+0x5e8>
 800778e:	d10c      	bne.n	80077aa <_dtoa_r+0x68a>
 8007790:	4b98      	ldr	r3, [pc, #608]	@ (80079f4 <_dtoa_r+0x8d4>)
 8007792:	2200      	movs	r2, #0
 8007794:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007798:	f7f8 ff2e 	bl	80005f8 <__aeabi_dmul>
 800779c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077a0:	f7f9 f9b0 	bl	8000b04 <__aeabi_dcmpge>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	f000 8157 	beq.w	8007a58 <_dtoa_r+0x938>
 80077aa:	2400      	movs	r4, #0
 80077ac:	4625      	mov	r5, r4
 80077ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077b0:	43db      	mvns	r3, r3
 80077b2:	9304      	str	r3, [sp, #16]
 80077b4:	4656      	mov	r6, sl
 80077b6:	2700      	movs	r7, #0
 80077b8:	4621      	mov	r1, r4
 80077ba:	4658      	mov	r0, fp
 80077bc:	f000 fbb4 	bl	8007f28 <_Bfree>
 80077c0:	2d00      	cmp	r5, #0
 80077c2:	d0dc      	beq.n	800777e <_dtoa_r+0x65e>
 80077c4:	b12f      	cbz	r7, 80077d2 <_dtoa_r+0x6b2>
 80077c6:	42af      	cmp	r7, r5
 80077c8:	d003      	beq.n	80077d2 <_dtoa_r+0x6b2>
 80077ca:	4639      	mov	r1, r7
 80077cc:	4658      	mov	r0, fp
 80077ce:	f000 fbab 	bl	8007f28 <_Bfree>
 80077d2:	4629      	mov	r1, r5
 80077d4:	4658      	mov	r0, fp
 80077d6:	f000 fba7 	bl	8007f28 <_Bfree>
 80077da:	e7d0      	b.n	800777e <_dtoa_r+0x65e>
 80077dc:	9704      	str	r7, [sp, #16]
 80077de:	4633      	mov	r3, r6
 80077e0:	461e      	mov	r6, r3
 80077e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077e6:	2a39      	cmp	r2, #57	@ 0x39
 80077e8:	d107      	bne.n	80077fa <_dtoa_r+0x6da>
 80077ea:	459a      	cmp	sl, r3
 80077ec:	d1f8      	bne.n	80077e0 <_dtoa_r+0x6c0>
 80077ee:	9a04      	ldr	r2, [sp, #16]
 80077f0:	3201      	adds	r2, #1
 80077f2:	9204      	str	r2, [sp, #16]
 80077f4:	2230      	movs	r2, #48	@ 0x30
 80077f6:	f88a 2000 	strb.w	r2, [sl]
 80077fa:	781a      	ldrb	r2, [r3, #0]
 80077fc:	3201      	adds	r2, #1
 80077fe:	701a      	strb	r2, [r3, #0]
 8007800:	e7bd      	b.n	800777e <_dtoa_r+0x65e>
 8007802:	4b7b      	ldr	r3, [pc, #492]	@ (80079f0 <_dtoa_r+0x8d0>)
 8007804:	2200      	movs	r2, #0
 8007806:	f7f8 fef7 	bl	80005f8 <__aeabi_dmul>
 800780a:	2200      	movs	r2, #0
 800780c:	2300      	movs	r3, #0
 800780e:	4604      	mov	r4, r0
 8007810:	460d      	mov	r5, r1
 8007812:	f7f9 f959 	bl	8000ac8 <__aeabi_dcmpeq>
 8007816:	2800      	cmp	r0, #0
 8007818:	f43f aebb 	beq.w	8007592 <_dtoa_r+0x472>
 800781c:	e6f0      	b.n	8007600 <_dtoa_r+0x4e0>
 800781e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007820:	2a00      	cmp	r2, #0
 8007822:	f000 80db 	beq.w	80079dc <_dtoa_r+0x8bc>
 8007826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007828:	2a01      	cmp	r2, #1
 800782a:	f300 80bf 	bgt.w	80079ac <_dtoa_r+0x88c>
 800782e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007830:	2a00      	cmp	r2, #0
 8007832:	f000 80b7 	beq.w	80079a4 <_dtoa_r+0x884>
 8007836:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800783a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800783c:	4646      	mov	r6, r8
 800783e:	9a08      	ldr	r2, [sp, #32]
 8007840:	2101      	movs	r1, #1
 8007842:	441a      	add	r2, r3
 8007844:	4658      	mov	r0, fp
 8007846:	4498      	add	r8, r3
 8007848:	9208      	str	r2, [sp, #32]
 800784a:	f000 fc6b 	bl	8008124 <__i2b>
 800784e:	4605      	mov	r5, r0
 8007850:	b15e      	cbz	r6, 800786a <_dtoa_r+0x74a>
 8007852:	9b08      	ldr	r3, [sp, #32]
 8007854:	2b00      	cmp	r3, #0
 8007856:	dd08      	ble.n	800786a <_dtoa_r+0x74a>
 8007858:	42b3      	cmp	r3, r6
 800785a:	9a08      	ldr	r2, [sp, #32]
 800785c:	bfa8      	it	ge
 800785e:	4633      	movge	r3, r6
 8007860:	eba8 0803 	sub.w	r8, r8, r3
 8007864:	1af6      	subs	r6, r6, r3
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	9308      	str	r3, [sp, #32]
 800786a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800786c:	b1f3      	cbz	r3, 80078ac <_dtoa_r+0x78c>
 800786e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 80b7 	beq.w	80079e4 <_dtoa_r+0x8c4>
 8007876:	b18c      	cbz	r4, 800789c <_dtoa_r+0x77c>
 8007878:	4629      	mov	r1, r5
 800787a:	4622      	mov	r2, r4
 800787c:	4658      	mov	r0, fp
 800787e:	f000 fd11 	bl	80082a4 <__pow5mult>
 8007882:	464a      	mov	r2, r9
 8007884:	4601      	mov	r1, r0
 8007886:	4605      	mov	r5, r0
 8007888:	4658      	mov	r0, fp
 800788a:	f000 fc61 	bl	8008150 <__multiply>
 800788e:	4649      	mov	r1, r9
 8007890:	9004      	str	r0, [sp, #16]
 8007892:	4658      	mov	r0, fp
 8007894:	f000 fb48 	bl	8007f28 <_Bfree>
 8007898:	9b04      	ldr	r3, [sp, #16]
 800789a:	4699      	mov	r9, r3
 800789c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800789e:	1b1a      	subs	r2, r3, r4
 80078a0:	d004      	beq.n	80078ac <_dtoa_r+0x78c>
 80078a2:	4649      	mov	r1, r9
 80078a4:	4658      	mov	r0, fp
 80078a6:	f000 fcfd 	bl	80082a4 <__pow5mult>
 80078aa:	4681      	mov	r9, r0
 80078ac:	2101      	movs	r1, #1
 80078ae:	4658      	mov	r0, fp
 80078b0:	f000 fc38 	bl	8008124 <__i2b>
 80078b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078b6:	4604      	mov	r4, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 81cf 	beq.w	8007c5c <_dtoa_r+0xb3c>
 80078be:	461a      	mov	r2, r3
 80078c0:	4601      	mov	r1, r0
 80078c2:	4658      	mov	r0, fp
 80078c4:	f000 fcee 	bl	80082a4 <__pow5mult>
 80078c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	4604      	mov	r4, r0
 80078ce:	f300 8095 	bgt.w	80079fc <_dtoa_r+0x8dc>
 80078d2:	9b02      	ldr	r3, [sp, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f040 8087 	bne.w	80079e8 <_dtoa_r+0x8c8>
 80078da:	9b03      	ldr	r3, [sp, #12]
 80078dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f040 8089 	bne.w	80079f8 <_dtoa_r+0x8d8>
 80078e6:	9b03      	ldr	r3, [sp, #12]
 80078e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078ec:	0d1b      	lsrs	r3, r3, #20
 80078ee:	051b      	lsls	r3, r3, #20
 80078f0:	b12b      	cbz	r3, 80078fe <_dtoa_r+0x7de>
 80078f2:	9b08      	ldr	r3, [sp, #32]
 80078f4:	3301      	adds	r3, #1
 80078f6:	9308      	str	r3, [sp, #32]
 80078f8:	f108 0801 	add.w	r8, r8, #1
 80078fc:	2301      	movs	r3, #1
 80078fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 81b0 	beq.w	8007c68 <_dtoa_r+0xb48>
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800790e:	6918      	ldr	r0, [r3, #16]
 8007910:	f000 fbbc 	bl	800808c <__hi0bits>
 8007914:	f1c0 0020 	rsb	r0, r0, #32
 8007918:	9b08      	ldr	r3, [sp, #32]
 800791a:	4418      	add	r0, r3
 800791c:	f010 001f 	ands.w	r0, r0, #31
 8007920:	d077      	beq.n	8007a12 <_dtoa_r+0x8f2>
 8007922:	f1c0 0320 	rsb	r3, r0, #32
 8007926:	2b04      	cmp	r3, #4
 8007928:	dd6b      	ble.n	8007a02 <_dtoa_r+0x8e2>
 800792a:	9b08      	ldr	r3, [sp, #32]
 800792c:	f1c0 001c 	rsb	r0, r0, #28
 8007930:	4403      	add	r3, r0
 8007932:	4480      	add	r8, r0
 8007934:	4406      	add	r6, r0
 8007936:	9308      	str	r3, [sp, #32]
 8007938:	f1b8 0f00 	cmp.w	r8, #0
 800793c:	dd05      	ble.n	800794a <_dtoa_r+0x82a>
 800793e:	4649      	mov	r1, r9
 8007940:	4642      	mov	r2, r8
 8007942:	4658      	mov	r0, fp
 8007944:	f000 fd08 	bl	8008358 <__lshift>
 8007948:	4681      	mov	r9, r0
 800794a:	9b08      	ldr	r3, [sp, #32]
 800794c:	2b00      	cmp	r3, #0
 800794e:	dd05      	ble.n	800795c <_dtoa_r+0x83c>
 8007950:	4621      	mov	r1, r4
 8007952:	461a      	mov	r2, r3
 8007954:	4658      	mov	r0, fp
 8007956:	f000 fcff 	bl	8008358 <__lshift>
 800795a:	4604      	mov	r4, r0
 800795c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800795e:	2b00      	cmp	r3, #0
 8007960:	d059      	beq.n	8007a16 <_dtoa_r+0x8f6>
 8007962:	4621      	mov	r1, r4
 8007964:	4648      	mov	r0, r9
 8007966:	f000 fd63 	bl	8008430 <__mcmp>
 800796a:	2800      	cmp	r0, #0
 800796c:	da53      	bge.n	8007a16 <_dtoa_r+0x8f6>
 800796e:	1e7b      	subs	r3, r7, #1
 8007970:	9304      	str	r3, [sp, #16]
 8007972:	4649      	mov	r1, r9
 8007974:	2300      	movs	r3, #0
 8007976:	220a      	movs	r2, #10
 8007978:	4658      	mov	r0, fp
 800797a:	f000 faf7 	bl	8007f6c <__multadd>
 800797e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007980:	4681      	mov	r9, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 8172 	beq.w	8007c6c <_dtoa_r+0xb4c>
 8007988:	2300      	movs	r3, #0
 800798a:	4629      	mov	r1, r5
 800798c:	220a      	movs	r2, #10
 800798e:	4658      	mov	r0, fp
 8007990:	f000 faec 	bl	8007f6c <__multadd>
 8007994:	9b00      	ldr	r3, [sp, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	4605      	mov	r5, r0
 800799a:	dc67      	bgt.n	8007a6c <_dtoa_r+0x94c>
 800799c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800799e:	2b02      	cmp	r3, #2
 80079a0:	dc41      	bgt.n	8007a26 <_dtoa_r+0x906>
 80079a2:	e063      	b.n	8007a6c <_dtoa_r+0x94c>
 80079a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80079a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80079aa:	e746      	b.n	800783a <_dtoa_r+0x71a>
 80079ac:	9b07      	ldr	r3, [sp, #28]
 80079ae:	1e5c      	subs	r4, r3, #1
 80079b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079b2:	42a3      	cmp	r3, r4
 80079b4:	bfbf      	itttt	lt
 80079b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80079b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80079ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80079bc:	1ae3      	sublt	r3, r4, r3
 80079be:	bfb4      	ite	lt
 80079c0:	18d2      	addlt	r2, r2, r3
 80079c2:	1b1c      	subge	r4, r3, r4
 80079c4:	9b07      	ldr	r3, [sp, #28]
 80079c6:	bfbc      	itt	lt
 80079c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80079ca:	2400      	movlt	r4, #0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	bfb5      	itete	lt
 80079d0:	eba8 0603 	sublt.w	r6, r8, r3
 80079d4:	9b07      	ldrge	r3, [sp, #28]
 80079d6:	2300      	movlt	r3, #0
 80079d8:	4646      	movge	r6, r8
 80079da:	e730      	b.n	800783e <_dtoa_r+0x71e>
 80079dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80079e0:	4646      	mov	r6, r8
 80079e2:	e735      	b.n	8007850 <_dtoa_r+0x730>
 80079e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079e6:	e75c      	b.n	80078a2 <_dtoa_r+0x782>
 80079e8:	2300      	movs	r3, #0
 80079ea:	e788      	b.n	80078fe <_dtoa_r+0x7de>
 80079ec:	3fe00000 	.word	0x3fe00000
 80079f0:	40240000 	.word	0x40240000
 80079f4:	40140000 	.word	0x40140000
 80079f8:	9b02      	ldr	r3, [sp, #8]
 80079fa:	e780      	b.n	80078fe <_dtoa_r+0x7de>
 80079fc:	2300      	movs	r3, #0
 80079fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a00:	e782      	b.n	8007908 <_dtoa_r+0x7e8>
 8007a02:	d099      	beq.n	8007938 <_dtoa_r+0x818>
 8007a04:	9a08      	ldr	r2, [sp, #32]
 8007a06:	331c      	adds	r3, #28
 8007a08:	441a      	add	r2, r3
 8007a0a:	4498      	add	r8, r3
 8007a0c:	441e      	add	r6, r3
 8007a0e:	9208      	str	r2, [sp, #32]
 8007a10:	e792      	b.n	8007938 <_dtoa_r+0x818>
 8007a12:	4603      	mov	r3, r0
 8007a14:	e7f6      	b.n	8007a04 <_dtoa_r+0x8e4>
 8007a16:	9b07      	ldr	r3, [sp, #28]
 8007a18:	9704      	str	r7, [sp, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	dc20      	bgt.n	8007a60 <_dtoa_r+0x940>
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	dd1e      	ble.n	8007a64 <_dtoa_r+0x944>
 8007a26:	9b00      	ldr	r3, [sp, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f47f aec0 	bne.w	80077ae <_dtoa_r+0x68e>
 8007a2e:	4621      	mov	r1, r4
 8007a30:	2205      	movs	r2, #5
 8007a32:	4658      	mov	r0, fp
 8007a34:	f000 fa9a 	bl	8007f6c <__multadd>
 8007a38:	4601      	mov	r1, r0
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	4648      	mov	r0, r9
 8007a3e:	f000 fcf7 	bl	8008430 <__mcmp>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	f77f aeb3 	ble.w	80077ae <_dtoa_r+0x68e>
 8007a48:	4656      	mov	r6, sl
 8007a4a:	2331      	movs	r3, #49	@ 0x31
 8007a4c:	f806 3b01 	strb.w	r3, [r6], #1
 8007a50:	9b04      	ldr	r3, [sp, #16]
 8007a52:	3301      	adds	r3, #1
 8007a54:	9304      	str	r3, [sp, #16]
 8007a56:	e6ae      	b.n	80077b6 <_dtoa_r+0x696>
 8007a58:	9c07      	ldr	r4, [sp, #28]
 8007a5a:	9704      	str	r7, [sp, #16]
 8007a5c:	4625      	mov	r5, r4
 8007a5e:	e7f3      	b.n	8007a48 <_dtoa_r+0x928>
 8007a60:	9b07      	ldr	r3, [sp, #28]
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 8104 	beq.w	8007c74 <_dtoa_r+0xb54>
 8007a6c:	2e00      	cmp	r6, #0
 8007a6e:	dd05      	ble.n	8007a7c <_dtoa_r+0x95c>
 8007a70:	4629      	mov	r1, r5
 8007a72:	4632      	mov	r2, r6
 8007a74:	4658      	mov	r0, fp
 8007a76:	f000 fc6f 	bl	8008358 <__lshift>
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d05a      	beq.n	8007b38 <_dtoa_r+0xa18>
 8007a82:	6869      	ldr	r1, [r5, #4]
 8007a84:	4658      	mov	r0, fp
 8007a86:	f000 fa0f 	bl	8007ea8 <_Balloc>
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	b928      	cbnz	r0, 8007a9a <_dtoa_r+0x97a>
 8007a8e:	4b84      	ldr	r3, [pc, #528]	@ (8007ca0 <_dtoa_r+0xb80>)
 8007a90:	4602      	mov	r2, r0
 8007a92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a96:	f7ff bb5a 	b.w	800714e <_dtoa_r+0x2e>
 8007a9a:	692a      	ldr	r2, [r5, #16]
 8007a9c:	3202      	adds	r2, #2
 8007a9e:	0092      	lsls	r2, r2, #2
 8007aa0:	f105 010c 	add.w	r1, r5, #12
 8007aa4:	300c      	adds	r0, #12
 8007aa6:	f002 fcb7 	bl	800a418 <memcpy>
 8007aaa:	2201      	movs	r2, #1
 8007aac:	4631      	mov	r1, r6
 8007aae:	4658      	mov	r0, fp
 8007ab0:	f000 fc52 	bl	8008358 <__lshift>
 8007ab4:	f10a 0301 	add.w	r3, sl, #1
 8007ab8:	9307      	str	r3, [sp, #28]
 8007aba:	9b00      	ldr	r3, [sp, #0]
 8007abc:	4453      	add	r3, sl
 8007abe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ac0:	9b02      	ldr	r3, [sp, #8]
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	462f      	mov	r7, r5
 8007ac8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007aca:	4605      	mov	r5, r0
 8007acc:	9b07      	ldr	r3, [sp, #28]
 8007ace:	4621      	mov	r1, r4
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	4648      	mov	r0, r9
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	f7ff fa9b 	bl	8007010 <quorem>
 8007ada:	4639      	mov	r1, r7
 8007adc:	9002      	str	r0, [sp, #8]
 8007ade:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007ae2:	4648      	mov	r0, r9
 8007ae4:	f000 fca4 	bl	8008430 <__mcmp>
 8007ae8:	462a      	mov	r2, r5
 8007aea:	9008      	str	r0, [sp, #32]
 8007aec:	4621      	mov	r1, r4
 8007aee:	4658      	mov	r0, fp
 8007af0:	f000 fcba 	bl	8008468 <__mdiff>
 8007af4:	68c2      	ldr	r2, [r0, #12]
 8007af6:	4606      	mov	r6, r0
 8007af8:	bb02      	cbnz	r2, 8007b3c <_dtoa_r+0xa1c>
 8007afa:	4601      	mov	r1, r0
 8007afc:	4648      	mov	r0, r9
 8007afe:	f000 fc97 	bl	8008430 <__mcmp>
 8007b02:	4602      	mov	r2, r0
 8007b04:	4631      	mov	r1, r6
 8007b06:	4658      	mov	r0, fp
 8007b08:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b0a:	f000 fa0d 	bl	8007f28 <_Bfree>
 8007b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b12:	9e07      	ldr	r6, [sp, #28]
 8007b14:	ea43 0102 	orr.w	r1, r3, r2
 8007b18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b1a:	4319      	orrs	r1, r3
 8007b1c:	d110      	bne.n	8007b40 <_dtoa_r+0xa20>
 8007b1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b22:	d029      	beq.n	8007b78 <_dtoa_r+0xa58>
 8007b24:	9b08      	ldr	r3, [sp, #32]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	dd02      	ble.n	8007b30 <_dtoa_r+0xa10>
 8007b2a:	9b02      	ldr	r3, [sp, #8]
 8007b2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007b30:	9b00      	ldr	r3, [sp, #0]
 8007b32:	f883 8000 	strb.w	r8, [r3]
 8007b36:	e63f      	b.n	80077b8 <_dtoa_r+0x698>
 8007b38:	4628      	mov	r0, r5
 8007b3a:	e7bb      	b.n	8007ab4 <_dtoa_r+0x994>
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	e7e1      	b.n	8007b04 <_dtoa_r+0x9e4>
 8007b40:	9b08      	ldr	r3, [sp, #32]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	db04      	blt.n	8007b50 <_dtoa_r+0xa30>
 8007b46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	d120      	bne.n	8007b92 <_dtoa_r+0xa72>
 8007b50:	2a00      	cmp	r2, #0
 8007b52:	dded      	ble.n	8007b30 <_dtoa_r+0xa10>
 8007b54:	4649      	mov	r1, r9
 8007b56:	2201      	movs	r2, #1
 8007b58:	4658      	mov	r0, fp
 8007b5a:	f000 fbfd 	bl	8008358 <__lshift>
 8007b5e:	4621      	mov	r1, r4
 8007b60:	4681      	mov	r9, r0
 8007b62:	f000 fc65 	bl	8008430 <__mcmp>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	dc03      	bgt.n	8007b72 <_dtoa_r+0xa52>
 8007b6a:	d1e1      	bne.n	8007b30 <_dtoa_r+0xa10>
 8007b6c:	f018 0f01 	tst.w	r8, #1
 8007b70:	d0de      	beq.n	8007b30 <_dtoa_r+0xa10>
 8007b72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b76:	d1d8      	bne.n	8007b2a <_dtoa_r+0xa0a>
 8007b78:	9a00      	ldr	r2, [sp, #0]
 8007b7a:	2339      	movs	r3, #57	@ 0x39
 8007b7c:	7013      	strb	r3, [r2, #0]
 8007b7e:	4633      	mov	r3, r6
 8007b80:	461e      	mov	r6, r3
 8007b82:	3b01      	subs	r3, #1
 8007b84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007b88:	2a39      	cmp	r2, #57	@ 0x39
 8007b8a:	d052      	beq.n	8007c32 <_dtoa_r+0xb12>
 8007b8c:	3201      	adds	r2, #1
 8007b8e:	701a      	strb	r2, [r3, #0]
 8007b90:	e612      	b.n	80077b8 <_dtoa_r+0x698>
 8007b92:	2a00      	cmp	r2, #0
 8007b94:	dd07      	ble.n	8007ba6 <_dtoa_r+0xa86>
 8007b96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b9a:	d0ed      	beq.n	8007b78 <_dtoa_r+0xa58>
 8007b9c:	9a00      	ldr	r2, [sp, #0]
 8007b9e:	f108 0301 	add.w	r3, r8, #1
 8007ba2:	7013      	strb	r3, [r2, #0]
 8007ba4:	e608      	b.n	80077b8 <_dtoa_r+0x698>
 8007ba6:	9b07      	ldr	r3, [sp, #28]
 8007ba8:	9a07      	ldr	r2, [sp, #28]
 8007baa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007bae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d028      	beq.n	8007c06 <_dtoa_r+0xae6>
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	220a      	movs	r2, #10
 8007bba:	4658      	mov	r0, fp
 8007bbc:	f000 f9d6 	bl	8007f6c <__multadd>
 8007bc0:	42af      	cmp	r7, r5
 8007bc2:	4681      	mov	r9, r0
 8007bc4:	f04f 0300 	mov.w	r3, #0
 8007bc8:	f04f 020a 	mov.w	r2, #10
 8007bcc:	4639      	mov	r1, r7
 8007bce:	4658      	mov	r0, fp
 8007bd0:	d107      	bne.n	8007be2 <_dtoa_r+0xac2>
 8007bd2:	f000 f9cb 	bl	8007f6c <__multadd>
 8007bd6:	4607      	mov	r7, r0
 8007bd8:	4605      	mov	r5, r0
 8007bda:	9b07      	ldr	r3, [sp, #28]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	9307      	str	r3, [sp, #28]
 8007be0:	e774      	b.n	8007acc <_dtoa_r+0x9ac>
 8007be2:	f000 f9c3 	bl	8007f6c <__multadd>
 8007be6:	4629      	mov	r1, r5
 8007be8:	4607      	mov	r7, r0
 8007bea:	2300      	movs	r3, #0
 8007bec:	220a      	movs	r2, #10
 8007bee:	4658      	mov	r0, fp
 8007bf0:	f000 f9bc 	bl	8007f6c <__multadd>
 8007bf4:	4605      	mov	r5, r0
 8007bf6:	e7f0      	b.n	8007bda <_dtoa_r+0xaba>
 8007bf8:	9b00      	ldr	r3, [sp, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	bfcc      	ite	gt
 8007bfe:	461e      	movgt	r6, r3
 8007c00:	2601      	movle	r6, #1
 8007c02:	4456      	add	r6, sl
 8007c04:	2700      	movs	r7, #0
 8007c06:	4649      	mov	r1, r9
 8007c08:	2201      	movs	r2, #1
 8007c0a:	4658      	mov	r0, fp
 8007c0c:	f000 fba4 	bl	8008358 <__lshift>
 8007c10:	4621      	mov	r1, r4
 8007c12:	4681      	mov	r9, r0
 8007c14:	f000 fc0c 	bl	8008430 <__mcmp>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	dcb0      	bgt.n	8007b7e <_dtoa_r+0xa5e>
 8007c1c:	d102      	bne.n	8007c24 <_dtoa_r+0xb04>
 8007c1e:	f018 0f01 	tst.w	r8, #1
 8007c22:	d1ac      	bne.n	8007b7e <_dtoa_r+0xa5e>
 8007c24:	4633      	mov	r3, r6
 8007c26:	461e      	mov	r6, r3
 8007c28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c2c:	2a30      	cmp	r2, #48	@ 0x30
 8007c2e:	d0fa      	beq.n	8007c26 <_dtoa_r+0xb06>
 8007c30:	e5c2      	b.n	80077b8 <_dtoa_r+0x698>
 8007c32:	459a      	cmp	sl, r3
 8007c34:	d1a4      	bne.n	8007b80 <_dtoa_r+0xa60>
 8007c36:	9b04      	ldr	r3, [sp, #16]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	9304      	str	r3, [sp, #16]
 8007c3c:	2331      	movs	r3, #49	@ 0x31
 8007c3e:	f88a 3000 	strb.w	r3, [sl]
 8007c42:	e5b9      	b.n	80077b8 <_dtoa_r+0x698>
 8007c44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c46:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007ca4 <_dtoa_r+0xb84>
 8007c4a:	b11b      	cbz	r3, 8007c54 <_dtoa_r+0xb34>
 8007c4c:	f10a 0308 	add.w	r3, sl, #8
 8007c50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	4650      	mov	r0, sl
 8007c56:	b019      	add	sp, #100	@ 0x64
 8007c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	f77f ae37 	ble.w	80078d2 <_dtoa_r+0x7b2>
 8007c64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c66:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c68:	2001      	movs	r0, #1
 8007c6a:	e655      	b.n	8007918 <_dtoa_r+0x7f8>
 8007c6c:	9b00      	ldr	r3, [sp, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f77f aed6 	ble.w	8007a20 <_dtoa_r+0x900>
 8007c74:	4656      	mov	r6, sl
 8007c76:	4621      	mov	r1, r4
 8007c78:	4648      	mov	r0, r9
 8007c7a:	f7ff f9c9 	bl	8007010 <quorem>
 8007c7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c82:	f806 8b01 	strb.w	r8, [r6], #1
 8007c86:	9b00      	ldr	r3, [sp, #0]
 8007c88:	eba6 020a 	sub.w	r2, r6, sl
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	ddb3      	ble.n	8007bf8 <_dtoa_r+0xad8>
 8007c90:	4649      	mov	r1, r9
 8007c92:	2300      	movs	r3, #0
 8007c94:	220a      	movs	r2, #10
 8007c96:	4658      	mov	r0, fp
 8007c98:	f000 f968 	bl	8007f6c <__multadd>
 8007c9c:	4681      	mov	r9, r0
 8007c9e:	e7ea      	b.n	8007c76 <_dtoa_r+0xb56>
 8007ca0:	0800affb 	.word	0x0800affb
 8007ca4:	0800af7f 	.word	0x0800af7f

08007ca8 <_free_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4605      	mov	r5, r0
 8007cac:	2900      	cmp	r1, #0
 8007cae:	d041      	beq.n	8007d34 <_free_r+0x8c>
 8007cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cb4:	1f0c      	subs	r4, r1, #4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bfb8      	it	lt
 8007cba:	18e4      	addlt	r4, r4, r3
 8007cbc:	f000 f8e8 	bl	8007e90 <__malloc_lock>
 8007cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8007d38 <_free_r+0x90>)
 8007cc2:	6813      	ldr	r3, [r2, #0]
 8007cc4:	b933      	cbnz	r3, 8007cd4 <_free_r+0x2c>
 8007cc6:	6063      	str	r3, [r4, #4]
 8007cc8:	6014      	str	r4, [r2, #0]
 8007cca:	4628      	mov	r0, r5
 8007ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cd0:	f000 b8e4 	b.w	8007e9c <__malloc_unlock>
 8007cd4:	42a3      	cmp	r3, r4
 8007cd6:	d908      	bls.n	8007cea <_free_r+0x42>
 8007cd8:	6820      	ldr	r0, [r4, #0]
 8007cda:	1821      	adds	r1, r4, r0
 8007cdc:	428b      	cmp	r3, r1
 8007cde:	bf01      	itttt	eq
 8007ce0:	6819      	ldreq	r1, [r3, #0]
 8007ce2:	685b      	ldreq	r3, [r3, #4]
 8007ce4:	1809      	addeq	r1, r1, r0
 8007ce6:	6021      	streq	r1, [r4, #0]
 8007ce8:	e7ed      	b.n	8007cc6 <_free_r+0x1e>
 8007cea:	461a      	mov	r2, r3
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	b10b      	cbz	r3, 8007cf4 <_free_r+0x4c>
 8007cf0:	42a3      	cmp	r3, r4
 8007cf2:	d9fa      	bls.n	8007cea <_free_r+0x42>
 8007cf4:	6811      	ldr	r1, [r2, #0]
 8007cf6:	1850      	adds	r0, r2, r1
 8007cf8:	42a0      	cmp	r0, r4
 8007cfa:	d10b      	bne.n	8007d14 <_free_r+0x6c>
 8007cfc:	6820      	ldr	r0, [r4, #0]
 8007cfe:	4401      	add	r1, r0
 8007d00:	1850      	adds	r0, r2, r1
 8007d02:	4283      	cmp	r3, r0
 8007d04:	6011      	str	r1, [r2, #0]
 8007d06:	d1e0      	bne.n	8007cca <_free_r+0x22>
 8007d08:	6818      	ldr	r0, [r3, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	6053      	str	r3, [r2, #4]
 8007d0e:	4408      	add	r0, r1
 8007d10:	6010      	str	r0, [r2, #0]
 8007d12:	e7da      	b.n	8007cca <_free_r+0x22>
 8007d14:	d902      	bls.n	8007d1c <_free_r+0x74>
 8007d16:	230c      	movs	r3, #12
 8007d18:	602b      	str	r3, [r5, #0]
 8007d1a:	e7d6      	b.n	8007cca <_free_r+0x22>
 8007d1c:	6820      	ldr	r0, [r4, #0]
 8007d1e:	1821      	adds	r1, r4, r0
 8007d20:	428b      	cmp	r3, r1
 8007d22:	bf04      	itt	eq
 8007d24:	6819      	ldreq	r1, [r3, #0]
 8007d26:	685b      	ldreq	r3, [r3, #4]
 8007d28:	6063      	str	r3, [r4, #4]
 8007d2a:	bf04      	itt	eq
 8007d2c:	1809      	addeq	r1, r1, r0
 8007d2e:	6021      	streq	r1, [r4, #0]
 8007d30:	6054      	str	r4, [r2, #4]
 8007d32:	e7ca      	b.n	8007cca <_free_r+0x22>
 8007d34:	bd38      	pop	{r3, r4, r5, pc}
 8007d36:	bf00      	nop
 8007d38:	20008608 	.word	0x20008608

08007d3c <malloc>:
 8007d3c:	4b02      	ldr	r3, [pc, #8]	@ (8007d48 <malloc+0xc>)
 8007d3e:	4601      	mov	r1, r0
 8007d40:	6818      	ldr	r0, [r3, #0]
 8007d42:	f000 b825 	b.w	8007d90 <_malloc_r>
 8007d46:	bf00      	nop
 8007d48:	20000090 	.word	0x20000090

08007d4c <sbrk_aligned>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	4e0f      	ldr	r6, [pc, #60]	@ (8007d8c <sbrk_aligned+0x40>)
 8007d50:	460c      	mov	r4, r1
 8007d52:	6831      	ldr	r1, [r6, #0]
 8007d54:	4605      	mov	r5, r0
 8007d56:	b911      	cbnz	r1, 8007d5e <sbrk_aligned+0x12>
 8007d58:	f002 fb4e 	bl	800a3f8 <_sbrk_r>
 8007d5c:	6030      	str	r0, [r6, #0]
 8007d5e:	4621      	mov	r1, r4
 8007d60:	4628      	mov	r0, r5
 8007d62:	f002 fb49 	bl	800a3f8 <_sbrk_r>
 8007d66:	1c43      	adds	r3, r0, #1
 8007d68:	d103      	bne.n	8007d72 <sbrk_aligned+0x26>
 8007d6a:	f04f 34ff 	mov.w	r4, #4294967295
 8007d6e:	4620      	mov	r0, r4
 8007d70:	bd70      	pop	{r4, r5, r6, pc}
 8007d72:	1cc4      	adds	r4, r0, #3
 8007d74:	f024 0403 	bic.w	r4, r4, #3
 8007d78:	42a0      	cmp	r0, r4
 8007d7a:	d0f8      	beq.n	8007d6e <sbrk_aligned+0x22>
 8007d7c:	1a21      	subs	r1, r4, r0
 8007d7e:	4628      	mov	r0, r5
 8007d80:	f002 fb3a 	bl	800a3f8 <_sbrk_r>
 8007d84:	3001      	adds	r0, #1
 8007d86:	d1f2      	bne.n	8007d6e <sbrk_aligned+0x22>
 8007d88:	e7ef      	b.n	8007d6a <sbrk_aligned+0x1e>
 8007d8a:	bf00      	nop
 8007d8c:	20008604 	.word	0x20008604

08007d90 <_malloc_r>:
 8007d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d94:	1ccd      	adds	r5, r1, #3
 8007d96:	f025 0503 	bic.w	r5, r5, #3
 8007d9a:	3508      	adds	r5, #8
 8007d9c:	2d0c      	cmp	r5, #12
 8007d9e:	bf38      	it	cc
 8007da0:	250c      	movcc	r5, #12
 8007da2:	2d00      	cmp	r5, #0
 8007da4:	4606      	mov	r6, r0
 8007da6:	db01      	blt.n	8007dac <_malloc_r+0x1c>
 8007da8:	42a9      	cmp	r1, r5
 8007daa:	d904      	bls.n	8007db6 <_malloc_r+0x26>
 8007dac:	230c      	movs	r3, #12
 8007dae:	6033      	str	r3, [r6, #0]
 8007db0:	2000      	movs	r0, #0
 8007db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007db6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e8c <_malloc_r+0xfc>
 8007dba:	f000 f869 	bl	8007e90 <__malloc_lock>
 8007dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8007dc2:	461c      	mov	r4, r3
 8007dc4:	bb44      	cbnz	r4, 8007e18 <_malloc_r+0x88>
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f7ff ffbf 	bl	8007d4c <sbrk_aligned>
 8007dce:	1c43      	adds	r3, r0, #1
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	d158      	bne.n	8007e86 <_malloc_r+0xf6>
 8007dd4:	f8d8 4000 	ldr.w	r4, [r8]
 8007dd8:	4627      	mov	r7, r4
 8007dda:	2f00      	cmp	r7, #0
 8007ddc:	d143      	bne.n	8007e66 <_malloc_r+0xd6>
 8007dde:	2c00      	cmp	r4, #0
 8007de0:	d04b      	beq.n	8007e7a <_malloc_r+0xea>
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	4639      	mov	r1, r7
 8007de6:	4630      	mov	r0, r6
 8007de8:	eb04 0903 	add.w	r9, r4, r3
 8007dec:	f002 fb04 	bl	800a3f8 <_sbrk_r>
 8007df0:	4581      	cmp	r9, r0
 8007df2:	d142      	bne.n	8007e7a <_malloc_r+0xea>
 8007df4:	6821      	ldr	r1, [r4, #0]
 8007df6:	1a6d      	subs	r5, r5, r1
 8007df8:	4629      	mov	r1, r5
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f7ff ffa6 	bl	8007d4c <sbrk_aligned>
 8007e00:	3001      	adds	r0, #1
 8007e02:	d03a      	beq.n	8007e7a <_malloc_r+0xea>
 8007e04:	6823      	ldr	r3, [r4, #0]
 8007e06:	442b      	add	r3, r5
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	bb62      	cbnz	r2, 8007e6c <_malloc_r+0xdc>
 8007e12:	f8c8 7000 	str.w	r7, [r8]
 8007e16:	e00f      	b.n	8007e38 <_malloc_r+0xa8>
 8007e18:	6822      	ldr	r2, [r4, #0]
 8007e1a:	1b52      	subs	r2, r2, r5
 8007e1c:	d420      	bmi.n	8007e60 <_malloc_r+0xd0>
 8007e1e:	2a0b      	cmp	r2, #11
 8007e20:	d917      	bls.n	8007e52 <_malloc_r+0xc2>
 8007e22:	1961      	adds	r1, r4, r5
 8007e24:	42a3      	cmp	r3, r4
 8007e26:	6025      	str	r5, [r4, #0]
 8007e28:	bf18      	it	ne
 8007e2a:	6059      	strne	r1, [r3, #4]
 8007e2c:	6863      	ldr	r3, [r4, #4]
 8007e2e:	bf08      	it	eq
 8007e30:	f8c8 1000 	streq.w	r1, [r8]
 8007e34:	5162      	str	r2, [r4, r5]
 8007e36:	604b      	str	r3, [r1, #4]
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f000 f82f 	bl	8007e9c <__malloc_unlock>
 8007e3e:	f104 000b 	add.w	r0, r4, #11
 8007e42:	1d23      	adds	r3, r4, #4
 8007e44:	f020 0007 	bic.w	r0, r0, #7
 8007e48:	1ac2      	subs	r2, r0, r3
 8007e4a:	bf1c      	itt	ne
 8007e4c:	1a1b      	subne	r3, r3, r0
 8007e4e:	50a3      	strne	r3, [r4, r2]
 8007e50:	e7af      	b.n	8007db2 <_malloc_r+0x22>
 8007e52:	6862      	ldr	r2, [r4, #4]
 8007e54:	42a3      	cmp	r3, r4
 8007e56:	bf0c      	ite	eq
 8007e58:	f8c8 2000 	streq.w	r2, [r8]
 8007e5c:	605a      	strne	r2, [r3, #4]
 8007e5e:	e7eb      	b.n	8007e38 <_malloc_r+0xa8>
 8007e60:	4623      	mov	r3, r4
 8007e62:	6864      	ldr	r4, [r4, #4]
 8007e64:	e7ae      	b.n	8007dc4 <_malloc_r+0x34>
 8007e66:	463c      	mov	r4, r7
 8007e68:	687f      	ldr	r7, [r7, #4]
 8007e6a:	e7b6      	b.n	8007dda <_malloc_r+0x4a>
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	42a3      	cmp	r3, r4
 8007e72:	d1fb      	bne.n	8007e6c <_malloc_r+0xdc>
 8007e74:	2300      	movs	r3, #0
 8007e76:	6053      	str	r3, [r2, #4]
 8007e78:	e7de      	b.n	8007e38 <_malloc_r+0xa8>
 8007e7a:	230c      	movs	r3, #12
 8007e7c:	6033      	str	r3, [r6, #0]
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f000 f80c 	bl	8007e9c <__malloc_unlock>
 8007e84:	e794      	b.n	8007db0 <_malloc_r+0x20>
 8007e86:	6005      	str	r5, [r0, #0]
 8007e88:	e7d6      	b.n	8007e38 <_malloc_r+0xa8>
 8007e8a:	bf00      	nop
 8007e8c:	20008608 	.word	0x20008608

08007e90 <__malloc_lock>:
 8007e90:	4801      	ldr	r0, [pc, #4]	@ (8007e98 <__malloc_lock+0x8>)
 8007e92:	f7ff b8b4 	b.w	8006ffe <__retarget_lock_acquire_recursive>
 8007e96:	bf00      	nop
 8007e98:	20008600 	.word	0x20008600

08007e9c <__malloc_unlock>:
 8007e9c:	4801      	ldr	r0, [pc, #4]	@ (8007ea4 <__malloc_unlock+0x8>)
 8007e9e:	f7ff b8af 	b.w	8007000 <__retarget_lock_release_recursive>
 8007ea2:	bf00      	nop
 8007ea4:	20008600 	.word	0x20008600

08007ea8 <_Balloc>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	69c6      	ldr	r6, [r0, #28]
 8007eac:	4604      	mov	r4, r0
 8007eae:	460d      	mov	r5, r1
 8007eb0:	b976      	cbnz	r6, 8007ed0 <_Balloc+0x28>
 8007eb2:	2010      	movs	r0, #16
 8007eb4:	f7ff ff42 	bl	8007d3c <malloc>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	61e0      	str	r0, [r4, #28]
 8007ebc:	b920      	cbnz	r0, 8007ec8 <_Balloc+0x20>
 8007ebe:	4b18      	ldr	r3, [pc, #96]	@ (8007f20 <_Balloc+0x78>)
 8007ec0:	4818      	ldr	r0, [pc, #96]	@ (8007f24 <_Balloc+0x7c>)
 8007ec2:	216b      	movs	r1, #107	@ 0x6b
 8007ec4:	f002 fac0 	bl	800a448 <__assert_func>
 8007ec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ecc:	6006      	str	r6, [r0, #0]
 8007ece:	60c6      	str	r6, [r0, #12]
 8007ed0:	69e6      	ldr	r6, [r4, #28]
 8007ed2:	68f3      	ldr	r3, [r6, #12]
 8007ed4:	b183      	cbz	r3, 8007ef8 <_Balloc+0x50>
 8007ed6:	69e3      	ldr	r3, [r4, #28]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ede:	b9b8      	cbnz	r0, 8007f10 <_Balloc+0x68>
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	fa01 f605 	lsl.w	r6, r1, r5
 8007ee6:	1d72      	adds	r2, r6, #5
 8007ee8:	0092      	lsls	r2, r2, #2
 8007eea:	4620      	mov	r0, r4
 8007eec:	f002 faca 	bl	800a484 <_calloc_r>
 8007ef0:	b160      	cbz	r0, 8007f0c <_Balloc+0x64>
 8007ef2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ef6:	e00e      	b.n	8007f16 <_Balloc+0x6e>
 8007ef8:	2221      	movs	r2, #33	@ 0x21
 8007efa:	2104      	movs	r1, #4
 8007efc:	4620      	mov	r0, r4
 8007efe:	f002 fac1 	bl	800a484 <_calloc_r>
 8007f02:	69e3      	ldr	r3, [r4, #28]
 8007f04:	60f0      	str	r0, [r6, #12]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1e4      	bne.n	8007ed6 <_Balloc+0x2e>
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	6802      	ldr	r2, [r0, #0]
 8007f12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f16:	2300      	movs	r3, #0
 8007f18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f1c:	e7f7      	b.n	8007f0e <_Balloc+0x66>
 8007f1e:	bf00      	nop
 8007f20:	0800af8c 	.word	0x0800af8c
 8007f24:	0800b00c 	.word	0x0800b00c

08007f28 <_Bfree>:
 8007f28:	b570      	push	{r4, r5, r6, lr}
 8007f2a:	69c6      	ldr	r6, [r0, #28]
 8007f2c:	4605      	mov	r5, r0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	b976      	cbnz	r6, 8007f50 <_Bfree+0x28>
 8007f32:	2010      	movs	r0, #16
 8007f34:	f7ff ff02 	bl	8007d3c <malloc>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	61e8      	str	r0, [r5, #28]
 8007f3c:	b920      	cbnz	r0, 8007f48 <_Bfree+0x20>
 8007f3e:	4b09      	ldr	r3, [pc, #36]	@ (8007f64 <_Bfree+0x3c>)
 8007f40:	4809      	ldr	r0, [pc, #36]	@ (8007f68 <_Bfree+0x40>)
 8007f42:	218f      	movs	r1, #143	@ 0x8f
 8007f44:	f002 fa80 	bl	800a448 <__assert_func>
 8007f48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f4c:	6006      	str	r6, [r0, #0]
 8007f4e:	60c6      	str	r6, [r0, #12]
 8007f50:	b13c      	cbz	r4, 8007f62 <_Bfree+0x3a>
 8007f52:	69eb      	ldr	r3, [r5, #28]
 8007f54:	6862      	ldr	r2, [r4, #4]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f5c:	6021      	str	r1, [r4, #0]
 8007f5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f62:	bd70      	pop	{r4, r5, r6, pc}
 8007f64:	0800af8c 	.word	0x0800af8c
 8007f68:	0800b00c 	.word	0x0800b00c

08007f6c <__multadd>:
 8007f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f70:	690d      	ldr	r5, [r1, #16]
 8007f72:	4607      	mov	r7, r0
 8007f74:	460c      	mov	r4, r1
 8007f76:	461e      	mov	r6, r3
 8007f78:	f101 0c14 	add.w	ip, r1, #20
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	f8dc 3000 	ldr.w	r3, [ip]
 8007f82:	b299      	uxth	r1, r3
 8007f84:	fb02 6101 	mla	r1, r2, r1, r6
 8007f88:	0c1e      	lsrs	r6, r3, #16
 8007f8a:	0c0b      	lsrs	r3, r1, #16
 8007f8c:	fb02 3306 	mla	r3, r2, r6, r3
 8007f90:	b289      	uxth	r1, r1
 8007f92:	3001      	adds	r0, #1
 8007f94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f98:	4285      	cmp	r5, r0
 8007f9a:	f84c 1b04 	str.w	r1, [ip], #4
 8007f9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007fa2:	dcec      	bgt.n	8007f7e <__multadd+0x12>
 8007fa4:	b30e      	cbz	r6, 8007fea <__multadd+0x7e>
 8007fa6:	68a3      	ldr	r3, [r4, #8]
 8007fa8:	42ab      	cmp	r3, r5
 8007faa:	dc19      	bgt.n	8007fe0 <__multadd+0x74>
 8007fac:	6861      	ldr	r1, [r4, #4]
 8007fae:	4638      	mov	r0, r7
 8007fb0:	3101      	adds	r1, #1
 8007fb2:	f7ff ff79 	bl	8007ea8 <_Balloc>
 8007fb6:	4680      	mov	r8, r0
 8007fb8:	b928      	cbnz	r0, 8007fc6 <__multadd+0x5a>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8007ff0 <__multadd+0x84>)
 8007fbe:	480d      	ldr	r0, [pc, #52]	@ (8007ff4 <__multadd+0x88>)
 8007fc0:	21ba      	movs	r1, #186	@ 0xba
 8007fc2:	f002 fa41 	bl	800a448 <__assert_func>
 8007fc6:	6922      	ldr	r2, [r4, #16]
 8007fc8:	3202      	adds	r2, #2
 8007fca:	f104 010c 	add.w	r1, r4, #12
 8007fce:	0092      	lsls	r2, r2, #2
 8007fd0:	300c      	adds	r0, #12
 8007fd2:	f002 fa21 	bl	800a418 <memcpy>
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	4638      	mov	r0, r7
 8007fda:	f7ff ffa5 	bl	8007f28 <_Bfree>
 8007fde:	4644      	mov	r4, r8
 8007fe0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007fe4:	3501      	adds	r5, #1
 8007fe6:	615e      	str	r6, [r3, #20]
 8007fe8:	6125      	str	r5, [r4, #16]
 8007fea:	4620      	mov	r0, r4
 8007fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ff0:	0800affb 	.word	0x0800affb
 8007ff4:	0800b00c 	.word	0x0800b00c

08007ff8 <__s2b>:
 8007ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ffc:	460c      	mov	r4, r1
 8007ffe:	4615      	mov	r5, r2
 8008000:	461f      	mov	r7, r3
 8008002:	2209      	movs	r2, #9
 8008004:	3308      	adds	r3, #8
 8008006:	4606      	mov	r6, r0
 8008008:	fb93 f3f2 	sdiv	r3, r3, r2
 800800c:	2100      	movs	r1, #0
 800800e:	2201      	movs	r2, #1
 8008010:	429a      	cmp	r2, r3
 8008012:	db09      	blt.n	8008028 <__s2b+0x30>
 8008014:	4630      	mov	r0, r6
 8008016:	f7ff ff47 	bl	8007ea8 <_Balloc>
 800801a:	b940      	cbnz	r0, 800802e <__s2b+0x36>
 800801c:	4602      	mov	r2, r0
 800801e:	4b19      	ldr	r3, [pc, #100]	@ (8008084 <__s2b+0x8c>)
 8008020:	4819      	ldr	r0, [pc, #100]	@ (8008088 <__s2b+0x90>)
 8008022:	21d3      	movs	r1, #211	@ 0xd3
 8008024:	f002 fa10 	bl	800a448 <__assert_func>
 8008028:	0052      	lsls	r2, r2, #1
 800802a:	3101      	adds	r1, #1
 800802c:	e7f0      	b.n	8008010 <__s2b+0x18>
 800802e:	9b08      	ldr	r3, [sp, #32]
 8008030:	6143      	str	r3, [r0, #20]
 8008032:	2d09      	cmp	r5, #9
 8008034:	f04f 0301 	mov.w	r3, #1
 8008038:	6103      	str	r3, [r0, #16]
 800803a:	dd16      	ble.n	800806a <__s2b+0x72>
 800803c:	f104 0909 	add.w	r9, r4, #9
 8008040:	46c8      	mov	r8, r9
 8008042:	442c      	add	r4, r5
 8008044:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008048:	4601      	mov	r1, r0
 800804a:	3b30      	subs	r3, #48	@ 0x30
 800804c:	220a      	movs	r2, #10
 800804e:	4630      	mov	r0, r6
 8008050:	f7ff ff8c 	bl	8007f6c <__multadd>
 8008054:	45a0      	cmp	r8, r4
 8008056:	d1f5      	bne.n	8008044 <__s2b+0x4c>
 8008058:	f1a5 0408 	sub.w	r4, r5, #8
 800805c:	444c      	add	r4, r9
 800805e:	1b2d      	subs	r5, r5, r4
 8008060:	1963      	adds	r3, r4, r5
 8008062:	42bb      	cmp	r3, r7
 8008064:	db04      	blt.n	8008070 <__s2b+0x78>
 8008066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800806a:	340a      	adds	r4, #10
 800806c:	2509      	movs	r5, #9
 800806e:	e7f6      	b.n	800805e <__s2b+0x66>
 8008070:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008074:	4601      	mov	r1, r0
 8008076:	3b30      	subs	r3, #48	@ 0x30
 8008078:	220a      	movs	r2, #10
 800807a:	4630      	mov	r0, r6
 800807c:	f7ff ff76 	bl	8007f6c <__multadd>
 8008080:	e7ee      	b.n	8008060 <__s2b+0x68>
 8008082:	bf00      	nop
 8008084:	0800affb 	.word	0x0800affb
 8008088:	0800b00c 	.word	0x0800b00c

0800808c <__hi0bits>:
 800808c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008090:	4603      	mov	r3, r0
 8008092:	bf36      	itet	cc
 8008094:	0403      	lslcc	r3, r0, #16
 8008096:	2000      	movcs	r0, #0
 8008098:	2010      	movcc	r0, #16
 800809a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800809e:	bf3c      	itt	cc
 80080a0:	021b      	lslcc	r3, r3, #8
 80080a2:	3008      	addcc	r0, #8
 80080a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080a8:	bf3c      	itt	cc
 80080aa:	011b      	lslcc	r3, r3, #4
 80080ac:	3004      	addcc	r0, #4
 80080ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080b2:	bf3c      	itt	cc
 80080b4:	009b      	lslcc	r3, r3, #2
 80080b6:	3002      	addcc	r0, #2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	db05      	blt.n	80080c8 <__hi0bits+0x3c>
 80080bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80080c0:	f100 0001 	add.w	r0, r0, #1
 80080c4:	bf08      	it	eq
 80080c6:	2020      	moveq	r0, #32
 80080c8:	4770      	bx	lr

080080ca <__lo0bits>:
 80080ca:	6803      	ldr	r3, [r0, #0]
 80080cc:	4602      	mov	r2, r0
 80080ce:	f013 0007 	ands.w	r0, r3, #7
 80080d2:	d00b      	beq.n	80080ec <__lo0bits+0x22>
 80080d4:	07d9      	lsls	r1, r3, #31
 80080d6:	d421      	bmi.n	800811c <__lo0bits+0x52>
 80080d8:	0798      	lsls	r0, r3, #30
 80080da:	bf49      	itett	mi
 80080dc:	085b      	lsrmi	r3, r3, #1
 80080de:	089b      	lsrpl	r3, r3, #2
 80080e0:	2001      	movmi	r0, #1
 80080e2:	6013      	strmi	r3, [r2, #0]
 80080e4:	bf5c      	itt	pl
 80080e6:	6013      	strpl	r3, [r2, #0]
 80080e8:	2002      	movpl	r0, #2
 80080ea:	4770      	bx	lr
 80080ec:	b299      	uxth	r1, r3
 80080ee:	b909      	cbnz	r1, 80080f4 <__lo0bits+0x2a>
 80080f0:	0c1b      	lsrs	r3, r3, #16
 80080f2:	2010      	movs	r0, #16
 80080f4:	b2d9      	uxtb	r1, r3
 80080f6:	b909      	cbnz	r1, 80080fc <__lo0bits+0x32>
 80080f8:	3008      	adds	r0, #8
 80080fa:	0a1b      	lsrs	r3, r3, #8
 80080fc:	0719      	lsls	r1, r3, #28
 80080fe:	bf04      	itt	eq
 8008100:	091b      	lsreq	r3, r3, #4
 8008102:	3004      	addeq	r0, #4
 8008104:	0799      	lsls	r1, r3, #30
 8008106:	bf04      	itt	eq
 8008108:	089b      	lsreq	r3, r3, #2
 800810a:	3002      	addeq	r0, #2
 800810c:	07d9      	lsls	r1, r3, #31
 800810e:	d403      	bmi.n	8008118 <__lo0bits+0x4e>
 8008110:	085b      	lsrs	r3, r3, #1
 8008112:	f100 0001 	add.w	r0, r0, #1
 8008116:	d003      	beq.n	8008120 <__lo0bits+0x56>
 8008118:	6013      	str	r3, [r2, #0]
 800811a:	4770      	bx	lr
 800811c:	2000      	movs	r0, #0
 800811e:	4770      	bx	lr
 8008120:	2020      	movs	r0, #32
 8008122:	4770      	bx	lr

08008124 <__i2b>:
 8008124:	b510      	push	{r4, lr}
 8008126:	460c      	mov	r4, r1
 8008128:	2101      	movs	r1, #1
 800812a:	f7ff febd 	bl	8007ea8 <_Balloc>
 800812e:	4602      	mov	r2, r0
 8008130:	b928      	cbnz	r0, 800813e <__i2b+0x1a>
 8008132:	4b05      	ldr	r3, [pc, #20]	@ (8008148 <__i2b+0x24>)
 8008134:	4805      	ldr	r0, [pc, #20]	@ (800814c <__i2b+0x28>)
 8008136:	f240 1145 	movw	r1, #325	@ 0x145
 800813a:	f002 f985 	bl	800a448 <__assert_func>
 800813e:	2301      	movs	r3, #1
 8008140:	6144      	str	r4, [r0, #20]
 8008142:	6103      	str	r3, [r0, #16]
 8008144:	bd10      	pop	{r4, pc}
 8008146:	bf00      	nop
 8008148:	0800affb 	.word	0x0800affb
 800814c:	0800b00c 	.word	0x0800b00c

08008150 <__multiply>:
 8008150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008154:	4614      	mov	r4, r2
 8008156:	690a      	ldr	r2, [r1, #16]
 8008158:	6923      	ldr	r3, [r4, #16]
 800815a:	429a      	cmp	r2, r3
 800815c:	bfa8      	it	ge
 800815e:	4623      	movge	r3, r4
 8008160:	460f      	mov	r7, r1
 8008162:	bfa4      	itt	ge
 8008164:	460c      	movge	r4, r1
 8008166:	461f      	movge	r7, r3
 8008168:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800816c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008170:	68a3      	ldr	r3, [r4, #8]
 8008172:	6861      	ldr	r1, [r4, #4]
 8008174:	eb0a 0609 	add.w	r6, sl, r9
 8008178:	42b3      	cmp	r3, r6
 800817a:	b085      	sub	sp, #20
 800817c:	bfb8      	it	lt
 800817e:	3101      	addlt	r1, #1
 8008180:	f7ff fe92 	bl	8007ea8 <_Balloc>
 8008184:	b930      	cbnz	r0, 8008194 <__multiply+0x44>
 8008186:	4602      	mov	r2, r0
 8008188:	4b44      	ldr	r3, [pc, #272]	@ (800829c <__multiply+0x14c>)
 800818a:	4845      	ldr	r0, [pc, #276]	@ (80082a0 <__multiply+0x150>)
 800818c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008190:	f002 f95a 	bl	800a448 <__assert_func>
 8008194:	f100 0514 	add.w	r5, r0, #20
 8008198:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800819c:	462b      	mov	r3, r5
 800819e:	2200      	movs	r2, #0
 80081a0:	4543      	cmp	r3, r8
 80081a2:	d321      	bcc.n	80081e8 <__multiply+0x98>
 80081a4:	f107 0114 	add.w	r1, r7, #20
 80081a8:	f104 0214 	add.w	r2, r4, #20
 80081ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80081b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80081b4:	9302      	str	r3, [sp, #8]
 80081b6:	1b13      	subs	r3, r2, r4
 80081b8:	3b15      	subs	r3, #21
 80081ba:	f023 0303 	bic.w	r3, r3, #3
 80081be:	3304      	adds	r3, #4
 80081c0:	f104 0715 	add.w	r7, r4, #21
 80081c4:	42ba      	cmp	r2, r7
 80081c6:	bf38      	it	cc
 80081c8:	2304      	movcc	r3, #4
 80081ca:	9301      	str	r3, [sp, #4]
 80081cc:	9b02      	ldr	r3, [sp, #8]
 80081ce:	9103      	str	r1, [sp, #12]
 80081d0:	428b      	cmp	r3, r1
 80081d2:	d80c      	bhi.n	80081ee <__multiply+0x9e>
 80081d4:	2e00      	cmp	r6, #0
 80081d6:	dd03      	ble.n	80081e0 <__multiply+0x90>
 80081d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d05b      	beq.n	8008298 <__multiply+0x148>
 80081e0:	6106      	str	r6, [r0, #16]
 80081e2:	b005      	add	sp, #20
 80081e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e8:	f843 2b04 	str.w	r2, [r3], #4
 80081ec:	e7d8      	b.n	80081a0 <__multiply+0x50>
 80081ee:	f8b1 a000 	ldrh.w	sl, [r1]
 80081f2:	f1ba 0f00 	cmp.w	sl, #0
 80081f6:	d024      	beq.n	8008242 <__multiply+0xf2>
 80081f8:	f104 0e14 	add.w	lr, r4, #20
 80081fc:	46a9      	mov	r9, r5
 80081fe:	f04f 0c00 	mov.w	ip, #0
 8008202:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008206:	f8d9 3000 	ldr.w	r3, [r9]
 800820a:	fa1f fb87 	uxth.w	fp, r7
 800820e:	b29b      	uxth	r3, r3
 8008210:	fb0a 330b 	mla	r3, sl, fp, r3
 8008214:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008218:	f8d9 7000 	ldr.w	r7, [r9]
 800821c:	4463      	add	r3, ip
 800821e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008222:	fb0a c70b 	mla	r7, sl, fp, ip
 8008226:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800822a:	b29b      	uxth	r3, r3
 800822c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008230:	4572      	cmp	r2, lr
 8008232:	f849 3b04 	str.w	r3, [r9], #4
 8008236:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800823a:	d8e2      	bhi.n	8008202 <__multiply+0xb2>
 800823c:	9b01      	ldr	r3, [sp, #4]
 800823e:	f845 c003 	str.w	ip, [r5, r3]
 8008242:	9b03      	ldr	r3, [sp, #12]
 8008244:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008248:	3104      	adds	r1, #4
 800824a:	f1b9 0f00 	cmp.w	r9, #0
 800824e:	d021      	beq.n	8008294 <__multiply+0x144>
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	f104 0c14 	add.w	ip, r4, #20
 8008256:	46ae      	mov	lr, r5
 8008258:	f04f 0a00 	mov.w	sl, #0
 800825c:	f8bc b000 	ldrh.w	fp, [ip]
 8008260:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008264:	fb09 770b 	mla	r7, r9, fp, r7
 8008268:	4457      	add	r7, sl
 800826a:	b29b      	uxth	r3, r3
 800826c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008270:	f84e 3b04 	str.w	r3, [lr], #4
 8008274:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008278:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800827c:	f8be 3000 	ldrh.w	r3, [lr]
 8008280:	fb09 330a 	mla	r3, r9, sl, r3
 8008284:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008288:	4562      	cmp	r2, ip
 800828a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800828e:	d8e5      	bhi.n	800825c <__multiply+0x10c>
 8008290:	9f01      	ldr	r7, [sp, #4]
 8008292:	51eb      	str	r3, [r5, r7]
 8008294:	3504      	adds	r5, #4
 8008296:	e799      	b.n	80081cc <__multiply+0x7c>
 8008298:	3e01      	subs	r6, #1
 800829a:	e79b      	b.n	80081d4 <__multiply+0x84>
 800829c:	0800affb 	.word	0x0800affb
 80082a0:	0800b00c 	.word	0x0800b00c

080082a4 <__pow5mult>:
 80082a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082a8:	4615      	mov	r5, r2
 80082aa:	f012 0203 	ands.w	r2, r2, #3
 80082ae:	4607      	mov	r7, r0
 80082b0:	460e      	mov	r6, r1
 80082b2:	d007      	beq.n	80082c4 <__pow5mult+0x20>
 80082b4:	4c25      	ldr	r4, [pc, #148]	@ (800834c <__pow5mult+0xa8>)
 80082b6:	3a01      	subs	r2, #1
 80082b8:	2300      	movs	r3, #0
 80082ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082be:	f7ff fe55 	bl	8007f6c <__multadd>
 80082c2:	4606      	mov	r6, r0
 80082c4:	10ad      	asrs	r5, r5, #2
 80082c6:	d03d      	beq.n	8008344 <__pow5mult+0xa0>
 80082c8:	69fc      	ldr	r4, [r7, #28]
 80082ca:	b97c      	cbnz	r4, 80082ec <__pow5mult+0x48>
 80082cc:	2010      	movs	r0, #16
 80082ce:	f7ff fd35 	bl	8007d3c <malloc>
 80082d2:	4602      	mov	r2, r0
 80082d4:	61f8      	str	r0, [r7, #28]
 80082d6:	b928      	cbnz	r0, 80082e4 <__pow5mult+0x40>
 80082d8:	4b1d      	ldr	r3, [pc, #116]	@ (8008350 <__pow5mult+0xac>)
 80082da:	481e      	ldr	r0, [pc, #120]	@ (8008354 <__pow5mult+0xb0>)
 80082dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80082e0:	f002 f8b2 	bl	800a448 <__assert_func>
 80082e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082e8:	6004      	str	r4, [r0, #0]
 80082ea:	60c4      	str	r4, [r0, #12]
 80082ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80082f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082f4:	b94c      	cbnz	r4, 800830a <__pow5mult+0x66>
 80082f6:	f240 2171 	movw	r1, #625	@ 0x271
 80082fa:	4638      	mov	r0, r7
 80082fc:	f7ff ff12 	bl	8008124 <__i2b>
 8008300:	2300      	movs	r3, #0
 8008302:	f8c8 0008 	str.w	r0, [r8, #8]
 8008306:	4604      	mov	r4, r0
 8008308:	6003      	str	r3, [r0, #0]
 800830a:	f04f 0900 	mov.w	r9, #0
 800830e:	07eb      	lsls	r3, r5, #31
 8008310:	d50a      	bpl.n	8008328 <__pow5mult+0x84>
 8008312:	4631      	mov	r1, r6
 8008314:	4622      	mov	r2, r4
 8008316:	4638      	mov	r0, r7
 8008318:	f7ff ff1a 	bl	8008150 <__multiply>
 800831c:	4631      	mov	r1, r6
 800831e:	4680      	mov	r8, r0
 8008320:	4638      	mov	r0, r7
 8008322:	f7ff fe01 	bl	8007f28 <_Bfree>
 8008326:	4646      	mov	r6, r8
 8008328:	106d      	asrs	r5, r5, #1
 800832a:	d00b      	beq.n	8008344 <__pow5mult+0xa0>
 800832c:	6820      	ldr	r0, [r4, #0]
 800832e:	b938      	cbnz	r0, 8008340 <__pow5mult+0x9c>
 8008330:	4622      	mov	r2, r4
 8008332:	4621      	mov	r1, r4
 8008334:	4638      	mov	r0, r7
 8008336:	f7ff ff0b 	bl	8008150 <__multiply>
 800833a:	6020      	str	r0, [r4, #0]
 800833c:	f8c0 9000 	str.w	r9, [r0]
 8008340:	4604      	mov	r4, r0
 8008342:	e7e4      	b.n	800830e <__pow5mult+0x6a>
 8008344:	4630      	mov	r0, r6
 8008346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800834a:	bf00      	nop
 800834c:	0800b068 	.word	0x0800b068
 8008350:	0800af8c 	.word	0x0800af8c
 8008354:	0800b00c 	.word	0x0800b00c

08008358 <__lshift>:
 8008358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800835c:	460c      	mov	r4, r1
 800835e:	6849      	ldr	r1, [r1, #4]
 8008360:	6923      	ldr	r3, [r4, #16]
 8008362:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008366:	68a3      	ldr	r3, [r4, #8]
 8008368:	4607      	mov	r7, r0
 800836a:	4691      	mov	r9, r2
 800836c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008370:	f108 0601 	add.w	r6, r8, #1
 8008374:	42b3      	cmp	r3, r6
 8008376:	db0b      	blt.n	8008390 <__lshift+0x38>
 8008378:	4638      	mov	r0, r7
 800837a:	f7ff fd95 	bl	8007ea8 <_Balloc>
 800837e:	4605      	mov	r5, r0
 8008380:	b948      	cbnz	r0, 8008396 <__lshift+0x3e>
 8008382:	4602      	mov	r2, r0
 8008384:	4b28      	ldr	r3, [pc, #160]	@ (8008428 <__lshift+0xd0>)
 8008386:	4829      	ldr	r0, [pc, #164]	@ (800842c <__lshift+0xd4>)
 8008388:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800838c:	f002 f85c 	bl	800a448 <__assert_func>
 8008390:	3101      	adds	r1, #1
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	e7ee      	b.n	8008374 <__lshift+0x1c>
 8008396:	2300      	movs	r3, #0
 8008398:	f100 0114 	add.w	r1, r0, #20
 800839c:	f100 0210 	add.w	r2, r0, #16
 80083a0:	4618      	mov	r0, r3
 80083a2:	4553      	cmp	r3, sl
 80083a4:	db33      	blt.n	800840e <__lshift+0xb6>
 80083a6:	6920      	ldr	r0, [r4, #16]
 80083a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083ac:	f104 0314 	add.w	r3, r4, #20
 80083b0:	f019 091f 	ands.w	r9, r9, #31
 80083b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083bc:	d02b      	beq.n	8008416 <__lshift+0xbe>
 80083be:	f1c9 0e20 	rsb	lr, r9, #32
 80083c2:	468a      	mov	sl, r1
 80083c4:	2200      	movs	r2, #0
 80083c6:	6818      	ldr	r0, [r3, #0]
 80083c8:	fa00 f009 	lsl.w	r0, r0, r9
 80083cc:	4310      	orrs	r0, r2
 80083ce:	f84a 0b04 	str.w	r0, [sl], #4
 80083d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80083d6:	459c      	cmp	ip, r3
 80083d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80083dc:	d8f3      	bhi.n	80083c6 <__lshift+0x6e>
 80083de:	ebac 0304 	sub.w	r3, ip, r4
 80083e2:	3b15      	subs	r3, #21
 80083e4:	f023 0303 	bic.w	r3, r3, #3
 80083e8:	3304      	adds	r3, #4
 80083ea:	f104 0015 	add.w	r0, r4, #21
 80083ee:	4584      	cmp	ip, r0
 80083f0:	bf38      	it	cc
 80083f2:	2304      	movcc	r3, #4
 80083f4:	50ca      	str	r2, [r1, r3]
 80083f6:	b10a      	cbz	r2, 80083fc <__lshift+0xa4>
 80083f8:	f108 0602 	add.w	r6, r8, #2
 80083fc:	3e01      	subs	r6, #1
 80083fe:	4638      	mov	r0, r7
 8008400:	612e      	str	r6, [r5, #16]
 8008402:	4621      	mov	r1, r4
 8008404:	f7ff fd90 	bl	8007f28 <_Bfree>
 8008408:	4628      	mov	r0, r5
 800840a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800840e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008412:	3301      	adds	r3, #1
 8008414:	e7c5      	b.n	80083a2 <__lshift+0x4a>
 8008416:	3904      	subs	r1, #4
 8008418:	f853 2b04 	ldr.w	r2, [r3], #4
 800841c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008420:	459c      	cmp	ip, r3
 8008422:	d8f9      	bhi.n	8008418 <__lshift+0xc0>
 8008424:	e7ea      	b.n	80083fc <__lshift+0xa4>
 8008426:	bf00      	nop
 8008428:	0800affb 	.word	0x0800affb
 800842c:	0800b00c 	.word	0x0800b00c

08008430 <__mcmp>:
 8008430:	690a      	ldr	r2, [r1, #16]
 8008432:	4603      	mov	r3, r0
 8008434:	6900      	ldr	r0, [r0, #16]
 8008436:	1a80      	subs	r0, r0, r2
 8008438:	b530      	push	{r4, r5, lr}
 800843a:	d10e      	bne.n	800845a <__mcmp+0x2a>
 800843c:	3314      	adds	r3, #20
 800843e:	3114      	adds	r1, #20
 8008440:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008444:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008448:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800844c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008450:	4295      	cmp	r5, r2
 8008452:	d003      	beq.n	800845c <__mcmp+0x2c>
 8008454:	d205      	bcs.n	8008462 <__mcmp+0x32>
 8008456:	f04f 30ff 	mov.w	r0, #4294967295
 800845a:	bd30      	pop	{r4, r5, pc}
 800845c:	42a3      	cmp	r3, r4
 800845e:	d3f3      	bcc.n	8008448 <__mcmp+0x18>
 8008460:	e7fb      	b.n	800845a <__mcmp+0x2a>
 8008462:	2001      	movs	r0, #1
 8008464:	e7f9      	b.n	800845a <__mcmp+0x2a>
	...

08008468 <__mdiff>:
 8008468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846c:	4689      	mov	r9, r1
 800846e:	4606      	mov	r6, r0
 8008470:	4611      	mov	r1, r2
 8008472:	4648      	mov	r0, r9
 8008474:	4614      	mov	r4, r2
 8008476:	f7ff ffdb 	bl	8008430 <__mcmp>
 800847a:	1e05      	subs	r5, r0, #0
 800847c:	d112      	bne.n	80084a4 <__mdiff+0x3c>
 800847e:	4629      	mov	r1, r5
 8008480:	4630      	mov	r0, r6
 8008482:	f7ff fd11 	bl	8007ea8 <_Balloc>
 8008486:	4602      	mov	r2, r0
 8008488:	b928      	cbnz	r0, 8008496 <__mdiff+0x2e>
 800848a:	4b3f      	ldr	r3, [pc, #252]	@ (8008588 <__mdiff+0x120>)
 800848c:	f240 2137 	movw	r1, #567	@ 0x237
 8008490:	483e      	ldr	r0, [pc, #248]	@ (800858c <__mdiff+0x124>)
 8008492:	f001 ffd9 	bl	800a448 <__assert_func>
 8008496:	2301      	movs	r3, #1
 8008498:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800849c:	4610      	mov	r0, r2
 800849e:	b003      	add	sp, #12
 80084a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a4:	bfbc      	itt	lt
 80084a6:	464b      	movlt	r3, r9
 80084a8:	46a1      	movlt	r9, r4
 80084aa:	4630      	mov	r0, r6
 80084ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80084b0:	bfba      	itte	lt
 80084b2:	461c      	movlt	r4, r3
 80084b4:	2501      	movlt	r5, #1
 80084b6:	2500      	movge	r5, #0
 80084b8:	f7ff fcf6 	bl	8007ea8 <_Balloc>
 80084bc:	4602      	mov	r2, r0
 80084be:	b918      	cbnz	r0, 80084c8 <__mdiff+0x60>
 80084c0:	4b31      	ldr	r3, [pc, #196]	@ (8008588 <__mdiff+0x120>)
 80084c2:	f240 2145 	movw	r1, #581	@ 0x245
 80084c6:	e7e3      	b.n	8008490 <__mdiff+0x28>
 80084c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80084cc:	6926      	ldr	r6, [r4, #16]
 80084ce:	60c5      	str	r5, [r0, #12]
 80084d0:	f109 0310 	add.w	r3, r9, #16
 80084d4:	f109 0514 	add.w	r5, r9, #20
 80084d8:	f104 0e14 	add.w	lr, r4, #20
 80084dc:	f100 0b14 	add.w	fp, r0, #20
 80084e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80084e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80084e8:	9301      	str	r3, [sp, #4]
 80084ea:	46d9      	mov	r9, fp
 80084ec:	f04f 0c00 	mov.w	ip, #0
 80084f0:	9b01      	ldr	r3, [sp, #4]
 80084f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80084f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80084fa:	9301      	str	r3, [sp, #4]
 80084fc:	fa1f f38a 	uxth.w	r3, sl
 8008500:	4619      	mov	r1, r3
 8008502:	b283      	uxth	r3, r0
 8008504:	1acb      	subs	r3, r1, r3
 8008506:	0c00      	lsrs	r0, r0, #16
 8008508:	4463      	add	r3, ip
 800850a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800850e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008512:	b29b      	uxth	r3, r3
 8008514:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008518:	4576      	cmp	r6, lr
 800851a:	f849 3b04 	str.w	r3, [r9], #4
 800851e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008522:	d8e5      	bhi.n	80084f0 <__mdiff+0x88>
 8008524:	1b33      	subs	r3, r6, r4
 8008526:	3b15      	subs	r3, #21
 8008528:	f023 0303 	bic.w	r3, r3, #3
 800852c:	3415      	adds	r4, #21
 800852e:	3304      	adds	r3, #4
 8008530:	42a6      	cmp	r6, r4
 8008532:	bf38      	it	cc
 8008534:	2304      	movcc	r3, #4
 8008536:	441d      	add	r5, r3
 8008538:	445b      	add	r3, fp
 800853a:	461e      	mov	r6, r3
 800853c:	462c      	mov	r4, r5
 800853e:	4544      	cmp	r4, r8
 8008540:	d30e      	bcc.n	8008560 <__mdiff+0xf8>
 8008542:	f108 0103 	add.w	r1, r8, #3
 8008546:	1b49      	subs	r1, r1, r5
 8008548:	f021 0103 	bic.w	r1, r1, #3
 800854c:	3d03      	subs	r5, #3
 800854e:	45a8      	cmp	r8, r5
 8008550:	bf38      	it	cc
 8008552:	2100      	movcc	r1, #0
 8008554:	440b      	add	r3, r1
 8008556:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800855a:	b191      	cbz	r1, 8008582 <__mdiff+0x11a>
 800855c:	6117      	str	r7, [r2, #16]
 800855e:	e79d      	b.n	800849c <__mdiff+0x34>
 8008560:	f854 1b04 	ldr.w	r1, [r4], #4
 8008564:	46e6      	mov	lr, ip
 8008566:	0c08      	lsrs	r0, r1, #16
 8008568:	fa1c fc81 	uxtah	ip, ip, r1
 800856c:	4471      	add	r1, lr
 800856e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008572:	b289      	uxth	r1, r1
 8008574:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008578:	f846 1b04 	str.w	r1, [r6], #4
 800857c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008580:	e7dd      	b.n	800853e <__mdiff+0xd6>
 8008582:	3f01      	subs	r7, #1
 8008584:	e7e7      	b.n	8008556 <__mdiff+0xee>
 8008586:	bf00      	nop
 8008588:	0800affb 	.word	0x0800affb
 800858c:	0800b00c 	.word	0x0800b00c

08008590 <__ulp>:
 8008590:	b082      	sub	sp, #8
 8008592:	ed8d 0b00 	vstr	d0, [sp]
 8008596:	9a01      	ldr	r2, [sp, #4]
 8008598:	4b0f      	ldr	r3, [pc, #60]	@ (80085d8 <__ulp+0x48>)
 800859a:	4013      	ands	r3, r2
 800859c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	dc08      	bgt.n	80085b6 <__ulp+0x26>
 80085a4:	425b      	negs	r3, r3
 80085a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80085aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80085ae:	da04      	bge.n	80085ba <__ulp+0x2a>
 80085b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80085b4:	4113      	asrs	r3, r2
 80085b6:	2200      	movs	r2, #0
 80085b8:	e008      	b.n	80085cc <__ulp+0x3c>
 80085ba:	f1a2 0314 	sub.w	r3, r2, #20
 80085be:	2b1e      	cmp	r3, #30
 80085c0:	bfda      	itte	le
 80085c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80085c6:	40da      	lsrle	r2, r3
 80085c8:	2201      	movgt	r2, #1
 80085ca:	2300      	movs	r3, #0
 80085cc:	4619      	mov	r1, r3
 80085ce:	4610      	mov	r0, r2
 80085d0:	ec41 0b10 	vmov	d0, r0, r1
 80085d4:	b002      	add	sp, #8
 80085d6:	4770      	bx	lr
 80085d8:	7ff00000 	.word	0x7ff00000

080085dc <__b2d>:
 80085dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e0:	6906      	ldr	r6, [r0, #16]
 80085e2:	f100 0814 	add.w	r8, r0, #20
 80085e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80085ea:	1f37      	subs	r7, r6, #4
 80085ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80085f0:	4610      	mov	r0, r2
 80085f2:	f7ff fd4b 	bl	800808c <__hi0bits>
 80085f6:	f1c0 0320 	rsb	r3, r0, #32
 80085fa:	280a      	cmp	r0, #10
 80085fc:	600b      	str	r3, [r1, #0]
 80085fe:	491b      	ldr	r1, [pc, #108]	@ (800866c <__b2d+0x90>)
 8008600:	dc15      	bgt.n	800862e <__b2d+0x52>
 8008602:	f1c0 0c0b 	rsb	ip, r0, #11
 8008606:	fa22 f30c 	lsr.w	r3, r2, ip
 800860a:	45b8      	cmp	r8, r7
 800860c:	ea43 0501 	orr.w	r5, r3, r1
 8008610:	bf34      	ite	cc
 8008612:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008616:	2300      	movcs	r3, #0
 8008618:	3015      	adds	r0, #21
 800861a:	fa02 f000 	lsl.w	r0, r2, r0
 800861e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008622:	4303      	orrs	r3, r0
 8008624:	461c      	mov	r4, r3
 8008626:	ec45 4b10 	vmov	d0, r4, r5
 800862a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800862e:	45b8      	cmp	r8, r7
 8008630:	bf3a      	itte	cc
 8008632:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008636:	f1a6 0708 	subcc.w	r7, r6, #8
 800863a:	2300      	movcs	r3, #0
 800863c:	380b      	subs	r0, #11
 800863e:	d012      	beq.n	8008666 <__b2d+0x8a>
 8008640:	f1c0 0120 	rsb	r1, r0, #32
 8008644:	fa23 f401 	lsr.w	r4, r3, r1
 8008648:	4082      	lsls	r2, r0
 800864a:	4322      	orrs	r2, r4
 800864c:	4547      	cmp	r7, r8
 800864e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008652:	bf8c      	ite	hi
 8008654:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008658:	2200      	movls	r2, #0
 800865a:	4083      	lsls	r3, r0
 800865c:	40ca      	lsrs	r2, r1
 800865e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008662:	4313      	orrs	r3, r2
 8008664:	e7de      	b.n	8008624 <__b2d+0x48>
 8008666:	ea42 0501 	orr.w	r5, r2, r1
 800866a:	e7db      	b.n	8008624 <__b2d+0x48>
 800866c:	3ff00000 	.word	0x3ff00000

08008670 <__d2b>:
 8008670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008674:	460f      	mov	r7, r1
 8008676:	2101      	movs	r1, #1
 8008678:	ec59 8b10 	vmov	r8, r9, d0
 800867c:	4616      	mov	r6, r2
 800867e:	f7ff fc13 	bl	8007ea8 <_Balloc>
 8008682:	4604      	mov	r4, r0
 8008684:	b930      	cbnz	r0, 8008694 <__d2b+0x24>
 8008686:	4602      	mov	r2, r0
 8008688:	4b23      	ldr	r3, [pc, #140]	@ (8008718 <__d2b+0xa8>)
 800868a:	4824      	ldr	r0, [pc, #144]	@ (800871c <__d2b+0xac>)
 800868c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008690:	f001 feda 	bl	800a448 <__assert_func>
 8008694:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008698:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800869c:	b10d      	cbz	r5, 80086a2 <__d2b+0x32>
 800869e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086a2:	9301      	str	r3, [sp, #4]
 80086a4:	f1b8 0300 	subs.w	r3, r8, #0
 80086a8:	d023      	beq.n	80086f2 <__d2b+0x82>
 80086aa:	4668      	mov	r0, sp
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	f7ff fd0c 	bl	80080ca <__lo0bits>
 80086b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086b6:	b1d0      	cbz	r0, 80086ee <__d2b+0x7e>
 80086b8:	f1c0 0320 	rsb	r3, r0, #32
 80086bc:	fa02 f303 	lsl.w	r3, r2, r3
 80086c0:	430b      	orrs	r3, r1
 80086c2:	40c2      	lsrs	r2, r0
 80086c4:	6163      	str	r3, [r4, #20]
 80086c6:	9201      	str	r2, [sp, #4]
 80086c8:	9b01      	ldr	r3, [sp, #4]
 80086ca:	61a3      	str	r3, [r4, #24]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	bf0c      	ite	eq
 80086d0:	2201      	moveq	r2, #1
 80086d2:	2202      	movne	r2, #2
 80086d4:	6122      	str	r2, [r4, #16]
 80086d6:	b1a5      	cbz	r5, 8008702 <__d2b+0x92>
 80086d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80086dc:	4405      	add	r5, r0
 80086de:	603d      	str	r5, [r7, #0]
 80086e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80086e4:	6030      	str	r0, [r6, #0]
 80086e6:	4620      	mov	r0, r4
 80086e8:	b003      	add	sp, #12
 80086ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086ee:	6161      	str	r1, [r4, #20]
 80086f0:	e7ea      	b.n	80086c8 <__d2b+0x58>
 80086f2:	a801      	add	r0, sp, #4
 80086f4:	f7ff fce9 	bl	80080ca <__lo0bits>
 80086f8:	9b01      	ldr	r3, [sp, #4]
 80086fa:	6163      	str	r3, [r4, #20]
 80086fc:	3020      	adds	r0, #32
 80086fe:	2201      	movs	r2, #1
 8008700:	e7e8      	b.n	80086d4 <__d2b+0x64>
 8008702:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008706:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800870a:	6038      	str	r0, [r7, #0]
 800870c:	6918      	ldr	r0, [r3, #16]
 800870e:	f7ff fcbd 	bl	800808c <__hi0bits>
 8008712:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008716:	e7e5      	b.n	80086e4 <__d2b+0x74>
 8008718:	0800affb 	.word	0x0800affb
 800871c:	0800b00c 	.word	0x0800b00c

08008720 <__ratio>:
 8008720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008724:	b085      	sub	sp, #20
 8008726:	e9cd 1000 	strd	r1, r0, [sp]
 800872a:	a902      	add	r1, sp, #8
 800872c:	f7ff ff56 	bl	80085dc <__b2d>
 8008730:	9800      	ldr	r0, [sp, #0]
 8008732:	a903      	add	r1, sp, #12
 8008734:	ec55 4b10 	vmov	r4, r5, d0
 8008738:	f7ff ff50 	bl	80085dc <__b2d>
 800873c:	9b01      	ldr	r3, [sp, #4]
 800873e:	6919      	ldr	r1, [r3, #16]
 8008740:	9b00      	ldr	r3, [sp, #0]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	1ac9      	subs	r1, r1, r3
 8008746:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800874a:	1a9b      	subs	r3, r3, r2
 800874c:	ec5b ab10 	vmov	sl, fp, d0
 8008750:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008754:	2b00      	cmp	r3, #0
 8008756:	bfce      	itee	gt
 8008758:	462a      	movgt	r2, r5
 800875a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800875e:	465a      	movle	r2, fp
 8008760:	462f      	mov	r7, r5
 8008762:	46d9      	mov	r9, fp
 8008764:	bfcc      	ite	gt
 8008766:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800876a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800876e:	464b      	mov	r3, r9
 8008770:	4652      	mov	r2, sl
 8008772:	4620      	mov	r0, r4
 8008774:	4639      	mov	r1, r7
 8008776:	f7f8 f869 	bl	800084c <__aeabi_ddiv>
 800877a:	ec41 0b10 	vmov	d0, r0, r1
 800877e:	b005      	add	sp, #20
 8008780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008784 <__copybits>:
 8008784:	3901      	subs	r1, #1
 8008786:	b570      	push	{r4, r5, r6, lr}
 8008788:	1149      	asrs	r1, r1, #5
 800878a:	6914      	ldr	r4, [r2, #16]
 800878c:	3101      	adds	r1, #1
 800878e:	f102 0314 	add.w	r3, r2, #20
 8008792:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008796:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800879a:	1f05      	subs	r5, r0, #4
 800879c:	42a3      	cmp	r3, r4
 800879e:	d30c      	bcc.n	80087ba <__copybits+0x36>
 80087a0:	1aa3      	subs	r3, r4, r2
 80087a2:	3b11      	subs	r3, #17
 80087a4:	f023 0303 	bic.w	r3, r3, #3
 80087a8:	3211      	adds	r2, #17
 80087aa:	42a2      	cmp	r2, r4
 80087ac:	bf88      	it	hi
 80087ae:	2300      	movhi	r3, #0
 80087b0:	4418      	add	r0, r3
 80087b2:	2300      	movs	r3, #0
 80087b4:	4288      	cmp	r0, r1
 80087b6:	d305      	bcc.n	80087c4 <__copybits+0x40>
 80087b8:	bd70      	pop	{r4, r5, r6, pc}
 80087ba:	f853 6b04 	ldr.w	r6, [r3], #4
 80087be:	f845 6f04 	str.w	r6, [r5, #4]!
 80087c2:	e7eb      	b.n	800879c <__copybits+0x18>
 80087c4:	f840 3b04 	str.w	r3, [r0], #4
 80087c8:	e7f4      	b.n	80087b4 <__copybits+0x30>

080087ca <__any_on>:
 80087ca:	f100 0214 	add.w	r2, r0, #20
 80087ce:	6900      	ldr	r0, [r0, #16]
 80087d0:	114b      	asrs	r3, r1, #5
 80087d2:	4298      	cmp	r0, r3
 80087d4:	b510      	push	{r4, lr}
 80087d6:	db11      	blt.n	80087fc <__any_on+0x32>
 80087d8:	dd0a      	ble.n	80087f0 <__any_on+0x26>
 80087da:	f011 011f 	ands.w	r1, r1, #31
 80087de:	d007      	beq.n	80087f0 <__any_on+0x26>
 80087e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80087e4:	fa24 f001 	lsr.w	r0, r4, r1
 80087e8:	fa00 f101 	lsl.w	r1, r0, r1
 80087ec:	428c      	cmp	r4, r1
 80087ee:	d10b      	bne.n	8008808 <__any_on+0x3e>
 80087f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d803      	bhi.n	8008800 <__any_on+0x36>
 80087f8:	2000      	movs	r0, #0
 80087fa:	bd10      	pop	{r4, pc}
 80087fc:	4603      	mov	r3, r0
 80087fe:	e7f7      	b.n	80087f0 <__any_on+0x26>
 8008800:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008804:	2900      	cmp	r1, #0
 8008806:	d0f5      	beq.n	80087f4 <__any_on+0x2a>
 8008808:	2001      	movs	r0, #1
 800880a:	e7f6      	b.n	80087fa <__any_on+0x30>

0800880c <sulp>:
 800880c:	b570      	push	{r4, r5, r6, lr}
 800880e:	4604      	mov	r4, r0
 8008810:	460d      	mov	r5, r1
 8008812:	ec45 4b10 	vmov	d0, r4, r5
 8008816:	4616      	mov	r6, r2
 8008818:	f7ff feba 	bl	8008590 <__ulp>
 800881c:	ec51 0b10 	vmov	r0, r1, d0
 8008820:	b17e      	cbz	r6, 8008842 <sulp+0x36>
 8008822:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008826:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800882a:	2b00      	cmp	r3, #0
 800882c:	dd09      	ble.n	8008842 <sulp+0x36>
 800882e:	051b      	lsls	r3, r3, #20
 8008830:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008834:	2400      	movs	r4, #0
 8008836:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800883a:	4622      	mov	r2, r4
 800883c:	462b      	mov	r3, r5
 800883e:	f7f7 fedb 	bl	80005f8 <__aeabi_dmul>
 8008842:	ec41 0b10 	vmov	d0, r0, r1
 8008846:	bd70      	pop	{r4, r5, r6, pc}

08008848 <_strtod_l>:
 8008848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884c:	b09f      	sub	sp, #124	@ 0x7c
 800884e:	460c      	mov	r4, r1
 8008850:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008852:	2200      	movs	r2, #0
 8008854:	921a      	str	r2, [sp, #104]	@ 0x68
 8008856:	9005      	str	r0, [sp, #20]
 8008858:	f04f 0a00 	mov.w	sl, #0
 800885c:	f04f 0b00 	mov.w	fp, #0
 8008860:	460a      	mov	r2, r1
 8008862:	9219      	str	r2, [sp, #100]	@ 0x64
 8008864:	7811      	ldrb	r1, [r2, #0]
 8008866:	292b      	cmp	r1, #43	@ 0x2b
 8008868:	d04a      	beq.n	8008900 <_strtod_l+0xb8>
 800886a:	d838      	bhi.n	80088de <_strtod_l+0x96>
 800886c:	290d      	cmp	r1, #13
 800886e:	d832      	bhi.n	80088d6 <_strtod_l+0x8e>
 8008870:	2908      	cmp	r1, #8
 8008872:	d832      	bhi.n	80088da <_strtod_l+0x92>
 8008874:	2900      	cmp	r1, #0
 8008876:	d03b      	beq.n	80088f0 <_strtod_l+0xa8>
 8008878:	2200      	movs	r2, #0
 800887a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800887c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800887e:	782a      	ldrb	r2, [r5, #0]
 8008880:	2a30      	cmp	r2, #48	@ 0x30
 8008882:	f040 80b3 	bne.w	80089ec <_strtod_l+0x1a4>
 8008886:	786a      	ldrb	r2, [r5, #1]
 8008888:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800888c:	2a58      	cmp	r2, #88	@ 0x58
 800888e:	d16e      	bne.n	800896e <_strtod_l+0x126>
 8008890:	9302      	str	r3, [sp, #8]
 8008892:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008894:	9301      	str	r3, [sp, #4]
 8008896:	ab1a      	add	r3, sp, #104	@ 0x68
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	4a8e      	ldr	r2, [pc, #568]	@ (8008ad4 <_strtod_l+0x28c>)
 800889c:	9805      	ldr	r0, [sp, #20]
 800889e:	ab1b      	add	r3, sp, #108	@ 0x6c
 80088a0:	a919      	add	r1, sp, #100	@ 0x64
 80088a2:	f001 fe6b 	bl	800a57c <__gethex>
 80088a6:	f010 060f 	ands.w	r6, r0, #15
 80088aa:	4604      	mov	r4, r0
 80088ac:	d005      	beq.n	80088ba <_strtod_l+0x72>
 80088ae:	2e06      	cmp	r6, #6
 80088b0:	d128      	bne.n	8008904 <_strtod_l+0xbc>
 80088b2:	3501      	adds	r5, #1
 80088b4:	2300      	movs	r3, #0
 80088b6:	9519      	str	r5, [sp, #100]	@ 0x64
 80088b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f040 858e 	bne.w	80093de <_strtod_l+0xb96>
 80088c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088c4:	b1cb      	cbz	r3, 80088fa <_strtod_l+0xb2>
 80088c6:	4652      	mov	r2, sl
 80088c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80088cc:	ec43 2b10 	vmov	d0, r2, r3
 80088d0:	b01f      	add	sp, #124	@ 0x7c
 80088d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d6:	2920      	cmp	r1, #32
 80088d8:	d1ce      	bne.n	8008878 <_strtod_l+0x30>
 80088da:	3201      	adds	r2, #1
 80088dc:	e7c1      	b.n	8008862 <_strtod_l+0x1a>
 80088de:	292d      	cmp	r1, #45	@ 0x2d
 80088e0:	d1ca      	bne.n	8008878 <_strtod_l+0x30>
 80088e2:	2101      	movs	r1, #1
 80088e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80088e6:	1c51      	adds	r1, r2, #1
 80088e8:	9119      	str	r1, [sp, #100]	@ 0x64
 80088ea:	7852      	ldrb	r2, [r2, #1]
 80088ec:	2a00      	cmp	r2, #0
 80088ee:	d1c5      	bne.n	800887c <_strtod_l+0x34>
 80088f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80088f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f040 8570 	bne.w	80093da <_strtod_l+0xb92>
 80088fa:	4652      	mov	r2, sl
 80088fc:	465b      	mov	r3, fp
 80088fe:	e7e5      	b.n	80088cc <_strtod_l+0x84>
 8008900:	2100      	movs	r1, #0
 8008902:	e7ef      	b.n	80088e4 <_strtod_l+0x9c>
 8008904:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008906:	b13a      	cbz	r2, 8008918 <_strtod_l+0xd0>
 8008908:	2135      	movs	r1, #53	@ 0x35
 800890a:	a81c      	add	r0, sp, #112	@ 0x70
 800890c:	f7ff ff3a 	bl	8008784 <__copybits>
 8008910:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008912:	9805      	ldr	r0, [sp, #20]
 8008914:	f7ff fb08 	bl	8007f28 <_Bfree>
 8008918:	3e01      	subs	r6, #1
 800891a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800891c:	2e04      	cmp	r6, #4
 800891e:	d806      	bhi.n	800892e <_strtod_l+0xe6>
 8008920:	e8df f006 	tbb	[pc, r6]
 8008924:	201d0314 	.word	0x201d0314
 8008928:	14          	.byte	0x14
 8008929:	00          	.byte	0x00
 800892a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800892e:	05e1      	lsls	r1, r4, #23
 8008930:	bf48      	it	mi
 8008932:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008936:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800893a:	0d1b      	lsrs	r3, r3, #20
 800893c:	051b      	lsls	r3, r3, #20
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1bb      	bne.n	80088ba <_strtod_l+0x72>
 8008942:	f7fe fb31 	bl	8006fa8 <__errno>
 8008946:	2322      	movs	r3, #34	@ 0x22
 8008948:	6003      	str	r3, [r0, #0]
 800894a:	e7b6      	b.n	80088ba <_strtod_l+0x72>
 800894c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008950:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008954:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008958:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800895c:	e7e7      	b.n	800892e <_strtod_l+0xe6>
 800895e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008adc <_strtod_l+0x294>
 8008962:	e7e4      	b.n	800892e <_strtod_l+0xe6>
 8008964:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008968:	f04f 3aff 	mov.w	sl, #4294967295
 800896c:	e7df      	b.n	800892e <_strtod_l+0xe6>
 800896e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008970:	1c5a      	adds	r2, r3, #1
 8008972:	9219      	str	r2, [sp, #100]	@ 0x64
 8008974:	785b      	ldrb	r3, [r3, #1]
 8008976:	2b30      	cmp	r3, #48	@ 0x30
 8008978:	d0f9      	beq.n	800896e <_strtod_l+0x126>
 800897a:	2b00      	cmp	r3, #0
 800897c:	d09d      	beq.n	80088ba <_strtod_l+0x72>
 800897e:	2301      	movs	r3, #1
 8008980:	9309      	str	r3, [sp, #36]	@ 0x24
 8008982:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008984:	930c      	str	r3, [sp, #48]	@ 0x30
 8008986:	2300      	movs	r3, #0
 8008988:	9308      	str	r3, [sp, #32]
 800898a:	930a      	str	r3, [sp, #40]	@ 0x28
 800898c:	461f      	mov	r7, r3
 800898e:	220a      	movs	r2, #10
 8008990:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008992:	7805      	ldrb	r5, [r0, #0]
 8008994:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008998:	b2d9      	uxtb	r1, r3
 800899a:	2909      	cmp	r1, #9
 800899c:	d928      	bls.n	80089f0 <_strtod_l+0x1a8>
 800899e:	494e      	ldr	r1, [pc, #312]	@ (8008ad8 <_strtod_l+0x290>)
 80089a0:	2201      	movs	r2, #1
 80089a2:	f7fe faa5 	bl	8006ef0 <strncmp>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d032      	beq.n	8008a10 <_strtod_l+0x1c8>
 80089aa:	2000      	movs	r0, #0
 80089ac:	462a      	mov	r2, r5
 80089ae:	4681      	mov	r9, r0
 80089b0:	463d      	mov	r5, r7
 80089b2:	4603      	mov	r3, r0
 80089b4:	2a65      	cmp	r2, #101	@ 0x65
 80089b6:	d001      	beq.n	80089bc <_strtod_l+0x174>
 80089b8:	2a45      	cmp	r2, #69	@ 0x45
 80089ba:	d114      	bne.n	80089e6 <_strtod_l+0x19e>
 80089bc:	b91d      	cbnz	r5, 80089c6 <_strtod_l+0x17e>
 80089be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089c0:	4302      	orrs	r2, r0
 80089c2:	d095      	beq.n	80088f0 <_strtod_l+0xa8>
 80089c4:	2500      	movs	r5, #0
 80089c6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80089c8:	1c62      	adds	r2, r4, #1
 80089ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80089cc:	7862      	ldrb	r2, [r4, #1]
 80089ce:	2a2b      	cmp	r2, #43	@ 0x2b
 80089d0:	d077      	beq.n	8008ac2 <_strtod_l+0x27a>
 80089d2:	2a2d      	cmp	r2, #45	@ 0x2d
 80089d4:	d07b      	beq.n	8008ace <_strtod_l+0x286>
 80089d6:	f04f 0c00 	mov.w	ip, #0
 80089da:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80089de:	2909      	cmp	r1, #9
 80089e0:	f240 8082 	bls.w	8008ae8 <_strtod_l+0x2a0>
 80089e4:	9419      	str	r4, [sp, #100]	@ 0x64
 80089e6:	f04f 0800 	mov.w	r8, #0
 80089ea:	e0a2      	b.n	8008b32 <_strtod_l+0x2ea>
 80089ec:	2300      	movs	r3, #0
 80089ee:	e7c7      	b.n	8008980 <_strtod_l+0x138>
 80089f0:	2f08      	cmp	r7, #8
 80089f2:	bfd5      	itete	le
 80089f4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80089f6:	9908      	ldrgt	r1, [sp, #32]
 80089f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80089fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008a00:	f100 0001 	add.w	r0, r0, #1
 8008a04:	bfd4      	ite	le
 8008a06:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008a08:	9308      	strgt	r3, [sp, #32]
 8008a0a:	3701      	adds	r7, #1
 8008a0c:	9019      	str	r0, [sp, #100]	@ 0x64
 8008a0e:	e7bf      	b.n	8008990 <_strtod_l+0x148>
 8008a10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a16:	785a      	ldrb	r2, [r3, #1]
 8008a18:	b37f      	cbz	r7, 8008a7a <_strtod_l+0x232>
 8008a1a:	4681      	mov	r9, r0
 8008a1c:	463d      	mov	r5, r7
 8008a1e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008a22:	2b09      	cmp	r3, #9
 8008a24:	d912      	bls.n	8008a4c <_strtod_l+0x204>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e7c4      	b.n	80089b4 <_strtod_l+0x16c>
 8008a2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a2c:	1c5a      	adds	r2, r3, #1
 8008a2e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a30:	785a      	ldrb	r2, [r3, #1]
 8008a32:	3001      	adds	r0, #1
 8008a34:	2a30      	cmp	r2, #48	@ 0x30
 8008a36:	d0f8      	beq.n	8008a2a <_strtod_l+0x1e2>
 8008a38:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008a3c:	2b08      	cmp	r3, #8
 8008a3e:	f200 84d3 	bhi.w	80093e8 <_strtod_l+0xba0>
 8008a42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a44:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a46:	4681      	mov	r9, r0
 8008a48:	2000      	movs	r0, #0
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	3a30      	subs	r2, #48	@ 0x30
 8008a4e:	f100 0301 	add.w	r3, r0, #1
 8008a52:	d02a      	beq.n	8008aaa <_strtod_l+0x262>
 8008a54:	4499      	add	r9, r3
 8008a56:	eb00 0c05 	add.w	ip, r0, r5
 8008a5a:	462b      	mov	r3, r5
 8008a5c:	210a      	movs	r1, #10
 8008a5e:	4563      	cmp	r3, ip
 8008a60:	d10d      	bne.n	8008a7e <_strtod_l+0x236>
 8008a62:	1c69      	adds	r1, r5, #1
 8008a64:	4401      	add	r1, r0
 8008a66:	4428      	add	r0, r5
 8008a68:	2808      	cmp	r0, #8
 8008a6a:	dc16      	bgt.n	8008a9a <_strtod_l+0x252>
 8008a6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a6e:	230a      	movs	r3, #10
 8008a70:	fb03 2300 	mla	r3, r3, r0, r2
 8008a74:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a76:	2300      	movs	r3, #0
 8008a78:	e018      	b.n	8008aac <_strtod_l+0x264>
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	e7da      	b.n	8008a34 <_strtod_l+0x1ec>
 8008a7e:	2b08      	cmp	r3, #8
 8008a80:	f103 0301 	add.w	r3, r3, #1
 8008a84:	dc03      	bgt.n	8008a8e <_strtod_l+0x246>
 8008a86:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008a88:	434e      	muls	r6, r1
 8008a8a:	960a      	str	r6, [sp, #40]	@ 0x28
 8008a8c:	e7e7      	b.n	8008a5e <_strtod_l+0x216>
 8008a8e:	2b10      	cmp	r3, #16
 8008a90:	bfde      	ittt	le
 8008a92:	9e08      	ldrle	r6, [sp, #32]
 8008a94:	434e      	mulle	r6, r1
 8008a96:	9608      	strle	r6, [sp, #32]
 8008a98:	e7e1      	b.n	8008a5e <_strtod_l+0x216>
 8008a9a:	280f      	cmp	r0, #15
 8008a9c:	dceb      	bgt.n	8008a76 <_strtod_l+0x22e>
 8008a9e:	9808      	ldr	r0, [sp, #32]
 8008aa0:	230a      	movs	r3, #10
 8008aa2:	fb03 2300 	mla	r3, r3, r0, r2
 8008aa6:	9308      	str	r3, [sp, #32]
 8008aa8:	e7e5      	b.n	8008a76 <_strtod_l+0x22e>
 8008aaa:	4629      	mov	r1, r5
 8008aac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008aae:	1c50      	adds	r0, r2, #1
 8008ab0:	9019      	str	r0, [sp, #100]	@ 0x64
 8008ab2:	7852      	ldrb	r2, [r2, #1]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	460d      	mov	r5, r1
 8008ab8:	e7b1      	b.n	8008a1e <_strtod_l+0x1d6>
 8008aba:	f04f 0900 	mov.w	r9, #0
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e77d      	b.n	80089be <_strtod_l+0x176>
 8008ac2:	f04f 0c00 	mov.w	ip, #0
 8008ac6:	1ca2      	adds	r2, r4, #2
 8008ac8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008aca:	78a2      	ldrb	r2, [r4, #2]
 8008acc:	e785      	b.n	80089da <_strtod_l+0x192>
 8008ace:	f04f 0c01 	mov.w	ip, #1
 8008ad2:	e7f8      	b.n	8008ac6 <_strtod_l+0x27e>
 8008ad4:	0800b180 	.word	0x0800b180
 8008ad8:	0800b168 	.word	0x0800b168
 8008adc:	7ff00000 	.word	0x7ff00000
 8008ae0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ae2:	1c51      	adds	r1, r2, #1
 8008ae4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008ae6:	7852      	ldrb	r2, [r2, #1]
 8008ae8:	2a30      	cmp	r2, #48	@ 0x30
 8008aea:	d0f9      	beq.n	8008ae0 <_strtod_l+0x298>
 8008aec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008af0:	2908      	cmp	r1, #8
 8008af2:	f63f af78 	bhi.w	80089e6 <_strtod_l+0x19e>
 8008af6:	3a30      	subs	r2, #48	@ 0x30
 8008af8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008afa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008afc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008afe:	f04f 080a 	mov.w	r8, #10
 8008b02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b04:	1c56      	adds	r6, r2, #1
 8008b06:	9619      	str	r6, [sp, #100]	@ 0x64
 8008b08:	7852      	ldrb	r2, [r2, #1]
 8008b0a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008b0e:	f1be 0f09 	cmp.w	lr, #9
 8008b12:	d939      	bls.n	8008b88 <_strtod_l+0x340>
 8008b14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008b16:	1a76      	subs	r6, r6, r1
 8008b18:	2e08      	cmp	r6, #8
 8008b1a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008b1e:	dc03      	bgt.n	8008b28 <_strtod_l+0x2e0>
 8008b20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008b22:	4588      	cmp	r8, r1
 8008b24:	bfa8      	it	ge
 8008b26:	4688      	movge	r8, r1
 8008b28:	f1bc 0f00 	cmp.w	ip, #0
 8008b2c:	d001      	beq.n	8008b32 <_strtod_l+0x2ea>
 8008b2e:	f1c8 0800 	rsb	r8, r8, #0
 8008b32:	2d00      	cmp	r5, #0
 8008b34:	d14e      	bne.n	8008bd4 <_strtod_l+0x38c>
 8008b36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b38:	4308      	orrs	r0, r1
 8008b3a:	f47f aebe 	bne.w	80088ba <_strtod_l+0x72>
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f47f aed6 	bne.w	80088f0 <_strtod_l+0xa8>
 8008b44:	2a69      	cmp	r2, #105	@ 0x69
 8008b46:	d028      	beq.n	8008b9a <_strtod_l+0x352>
 8008b48:	dc25      	bgt.n	8008b96 <_strtod_l+0x34e>
 8008b4a:	2a49      	cmp	r2, #73	@ 0x49
 8008b4c:	d025      	beq.n	8008b9a <_strtod_l+0x352>
 8008b4e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008b50:	f47f aece 	bne.w	80088f0 <_strtod_l+0xa8>
 8008b54:	499b      	ldr	r1, [pc, #620]	@ (8008dc4 <_strtod_l+0x57c>)
 8008b56:	a819      	add	r0, sp, #100	@ 0x64
 8008b58:	f001 ff32 	bl	800a9c0 <__match>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	f43f aec7 	beq.w	80088f0 <_strtod_l+0xa8>
 8008b62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	2b28      	cmp	r3, #40	@ 0x28
 8008b68:	d12e      	bne.n	8008bc8 <_strtod_l+0x380>
 8008b6a:	4997      	ldr	r1, [pc, #604]	@ (8008dc8 <_strtod_l+0x580>)
 8008b6c:	aa1c      	add	r2, sp, #112	@ 0x70
 8008b6e:	a819      	add	r0, sp, #100	@ 0x64
 8008b70:	f001 ff3a 	bl	800a9e8 <__hexnan>
 8008b74:	2805      	cmp	r0, #5
 8008b76:	d127      	bne.n	8008bc8 <_strtod_l+0x380>
 8008b78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008b7a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008b7e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008b82:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008b86:	e698      	b.n	80088ba <_strtod_l+0x72>
 8008b88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008b8a:	fb08 2101 	mla	r1, r8, r1, r2
 8008b8e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008b92:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b94:	e7b5      	b.n	8008b02 <_strtod_l+0x2ba>
 8008b96:	2a6e      	cmp	r2, #110	@ 0x6e
 8008b98:	e7da      	b.n	8008b50 <_strtod_l+0x308>
 8008b9a:	498c      	ldr	r1, [pc, #560]	@ (8008dcc <_strtod_l+0x584>)
 8008b9c:	a819      	add	r0, sp, #100	@ 0x64
 8008b9e:	f001 ff0f 	bl	800a9c0 <__match>
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	f43f aea4 	beq.w	80088f0 <_strtod_l+0xa8>
 8008ba8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008baa:	4989      	ldr	r1, [pc, #548]	@ (8008dd0 <_strtod_l+0x588>)
 8008bac:	3b01      	subs	r3, #1
 8008bae:	a819      	add	r0, sp, #100	@ 0x64
 8008bb0:	9319      	str	r3, [sp, #100]	@ 0x64
 8008bb2:	f001 ff05 	bl	800a9c0 <__match>
 8008bb6:	b910      	cbnz	r0, 8008bbe <_strtod_l+0x376>
 8008bb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bba:	3301      	adds	r3, #1
 8008bbc:	9319      	str	r3, [sp, #100]	@ 0x64
 8008bbe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008de0 <_strtod_l+0x598>
 8008bc2:	f04f 0a00 	mov.w	sl, #0
 8008bc6:	e678      	b.n	80088ba <_strtod_l+0x72>
 8008bc8:	4882      	ldr	r0, [pc, #520]	@ (8008dd4 <_strtod_l+0x58c>)
 8008bca:	f001 fc35 	bl	800a438 <nan>
 8008bce:	ec5b ab10 	vmov	sl, fp, d0
 8008bd2:	e672      	b.n	80088ba <_strtod_l+0x72>
 8008bd4:	eba8 0309 	sub.w	r3, r8, r9
 8008bd8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bdc:	2f00      	cmp	r7, #0
 8008bde:	bf08      	it	eq
 8008be0:	462f      	moveq	r7, r5
 8008be2:	2d10      	cmp	r5, #16
 8008be4:	462c      	mov	r4, r5
 8008be6:	bfa8      	it	ge
 8008be8:	2410      	movge	r4, #16
 8008bea:	f7f7 fc8b 	bl	8000504 <__aeabi_ui2d>
 8008bee:	2d09      	cmp	r5, #9
 8008bf0:	4682      	mov	sl, r0
 8008bf2:	468b      	mov	fp, r1
 8008bf4:	dc13      	bgt.n	8008c1e <_strtod_l+0x3d6>
 8008bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f43f ae5e 	beq.w	80088ba <_strtod_l+0x72>
 8008bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c00:	dd78      	ble.n	8008cf4 <_strtod_l+0x4ac>
 8008c02:	2b16      	cmp	r3, #22
 8008c04:	dc5f      	bgt.n	8008cc6 <_strtod_l+0x47e>
 8008c06:	4974      	ldr	r1, [pc, #464]	@ (8008dd8 <_strtod_l+0x590>)
 8008c08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c10:	4652      	mov	r2, sl
 8008c12:	465b      	mov	r3, fp
 8008c14:	f7f7 fcf0 	bl	80005f8 <__aeabi_dmul>
 8008c18:	4682      	mov	sl, r0
 8008c1a:	468b      	mov	fp, r1
 8008c1c:	e64d      	b.n	80088ba <_strtod_l+0x72>
 8008c1e:	4b6e      	ldr	r3, [pc, #440]	@ (8008dd8 <_strtod_l+0x590>)
 8008c20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008c28:	f7f7 fce6 	bl	80005f8 <__aeabi_dmul>
 8008c2c:	4682      	mov	sl, r0
 8008c2e:	9808      	ldr	r0, [sp, #32]
 8008c30:	468b      	mov	fp, r1
 8008c32:	f7f7 fc67 	bl	8000504 <__aeabi_ui2d>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4650      	mov	r0, sl
 8008c3c:	4659      	mov	r1, fp
 8008c3e:	f7f7 fb25 	bl	800028c <__adddf3>
 8008c42:	2d0f      	cmp	r5, #15
 8008c44:	4682      	mov	sl, r0
 8008c46:	468b      	mov	fp, r1
 8008c48:	ddd5      	ble.n	8008bf6 <_strtod_l+0x3ae>
 8008c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c4c:	1b2c      	subs	r4, r5, r4
 8008c4e:	441c      	add	r4, r3
 8008c50:	2c00      	cmp	r4, #0
 8008c52:	f340 8096 	ble.w	8008d82 <_strtod_l+0x53a>
 8008c56:	f014 030f 	ands.w	r3, r4, #15
 8008c5a:	d00a      	beq.n	8008c72 <_strtod_l+0x42a>
 8008c5c:	495e      	ldr	r1, [pc, #376]	@ (8008dd8 <_strtod_l+0x590>)
 8008c5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c62:	4652      	mov	r2, sl
 8008c64:	465b      	mov	r3, fp
 8008c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c6a:	f7f7 fcc5 	bl	80005f8 <__aeabi_dmul>
 8008c6e:	4682      	mov	sl, r0
 8008c70:	468b      	mov	fp, r1
 8008c72:	f034 040f 	bics.w	r4, r4, #15
 8008c76:	d073      	beq.n	8008d60 <_strtod_l+0x518>
 8008c78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008c7c:	dd48      	ble.n	8008d10 <_strtod_l+0x4c8>
 8008c7e:	2400      	movs	r4, #0
 8008c80:	46a0      	mov	r8, r4
 8008c82:	940a      	str	r4, [sp, #40]	@ 0x28
 8008c84:	46a1      	mov	r9, r4
 8008c86:	9a05      	ldr	r2, [sp, #20]
 8008c88:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008de0 <_strtod_l+0x598>
 8008c8c:	2322      	movs	r3, #34	@ 0x22
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	f04f 0a00 	mov.w	sl, #0
 8008c94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f43f ae0f 	beq.w	80088ba <_strtod_l+0x72>
 8008c9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c9e:	9805      	ldr	r0, [sp, #20]
 8008ca0:	f7ff f942 	bl	8007f28 <_Bfree>
 8008ca4:	9805      	ldr	r0, [sp, #20]
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	f7ff f93e 	bl	8007f28 <_Bfree>
 8008cac:	9805      	ldr	r0, [sp, #20]
 8008cae:	4641      	mov	r1, r8
 8008cb0:	f7ff f93a 	bl	8007f28 <_Bfree>
 8008cb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008cb6:	9805      	ldr	r0, [sp, #20]
 8008cb8:	f7ff f936 	bl	8007f28 <_Bfree>
 8008cbc:	9805      	ldr	r0, [sp, #20]
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	f7ff f932 	bl	8007f28 <_Bfree>
 8008cc4:	e5f9      	b.n	80088ba <_strtod_l+0x72>
 8008cc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cc8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	dbbc      	blt.n	8008c4a <_strtod_l+0x402>
 8008cd0:	4c41      	ldr	r4, [pc, #260]	@ (8008dd8 <_strtod_l+0x590>)
 8008cd2:	f1c5 050f 	rsb	r5, r5, #15
 8008cd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008cda:	4652      	mov	r2, sl
 8008cdc:	465b      	mov	r3, fp
 8008cde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ce2:	f7f7 fc89 	bl	80005f8 <__aeabi_dmul>
 8008ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce8:	1b5d      	subs	r5, r3, r5
 8008cea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008cee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008cf2:	e78f      	b.n	8008c14 <_strtod_l+0x3cc>
 8008cf4:	3316      	adds	r3, #22
 8008cf6:	dba8      	blt.n	8008c4a <_strtod_l+0x402>
 8008cf8:	4b37      	ldr	r3, [pc, #220]	@ (8008dd8 <_strtod_l+0x590>)
 8008cfa:	eba9 0808 	sub.w	r8, r9, r8
 8008cfe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008d02:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008d06:	4650      	mov	r0, sl
 8008d08:	4659      	mov	r1, fp
 8008d0a:	f7f7 fd9f 	bl	800084c <__aeabi_ddiv>
 8008d0e:	e783      	b.n	8008c18 <_strtod_l+0x3d0>
 8008d10:	4b32      	ldr	r3, [pc, #200]	@ (8008ddc <_strtod_l+0x594>)
 8008d12:	9308      	str	r3, [sp, #32]
 8008d14:	2300      	movs	r3, #0
 8008d16:	1124      	asrs	r4, r4, #4
 8008d18:	4650      	mov	r0, sl
 8008d1a:	4659      	mov	r1, fp
 8008d1c:	461e      	mov	r6, r3
 8008d1e:	2c01      	cmp	r4, #1
 8008d20:	dc21      	bgt.n	8008d66 <_strtod_l+0x51e>
 8008d22:	b10b      	cbz	r3, 8008d28 <_strtod_l+0x4e0>
 8008d24:	4682      	mov	sl, r0
 8008d26:	468b      	mov	fp, r1
 8008d28:	492c      	ldr	r1, [pc, #176]	@ (8008ddc <_strtod_l+0x594>)
 8008d2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008d2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008d32:	4652      	mov	r2, sl
 8008d34:	465b      	mov	r3, fp
 8008d36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d3a:	f7f7 fc5d 	bl	80005f8 <__aeabi_dmul>
 8008d3e:	4b28      	ldr	r3, [pc, #160]	@ (8008de0 <_strtod_l+0x598>)
 8008d40:	460a      	mov	r2, r1
 8008d42:	400b      	ands	r3, r1
 8008d44:	4927      	ldr	r1, [pc, #156]	@ (8008de4 <_strtod_l+0x59c>)
 8008d46:	428b      	cmp	r3, r1
 8008d48:	4682      	mov	sl, r0
 8008d4a:	d898      	bhi.n	8008c7e <_strtod_l+0x436>
 8008d4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008d50:	428b      	cmp	r3, r1
 8008d52:	bf86      	itte	hi
 8008d54:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008de8 <_strtod_l+0x5a0>
 8008d58:	f04f 3aff 	movhi.w	sl, #4294967295
 8008d5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008d60:	2300      	movs	r3, #0
 8008d62:	9308      	str	r3, [sp, #32]
 8008d64:	e07a      	b.n	8008e5c <_strtod_l+0x614>
 8008d66:	07e2      	lsls	r2, r4, #31
 8008d68:	d505      	bpl.n	8008d76 <_strtod_l+0x52e>
 8008d6a:	9b08      	ldr	r3, [sp, #32]
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f7f7 fc42 	bl	80005f8 <__aeabi_dmul>
 8008d74:	2301      	movs	r3, #1
 8008d76:	9a08      	ldr	r2, [sp, #32]
 8008d78:	3208      	adds	r2, #8
 8008d7a:	3601      	adds	r6, #1
 8008d7c:	1064      	asrs	r4, r4, #1
 8008d7e:	9208      	str	r2, [sp, #32]
 8008d80:	e7cd      	b.n	8008d1e <_strtod_l+0x4d6>
 8008d82:	d0ed      	beq.n	8008d60 <_strtod_l+0x518>
 8008d84:	4264      	negs	r4, r4
 8008d86:	f014 020f 	ands.w	r2, r4, #15
 8008d8a:	d00a      	beq.n	8008da2 <_strtod_l+0x55a>
 8008d8c:	4b12      	ldr	r3, [pc, #72]	@ (8008dd8 <_strtod_l+0x590>)
 8008d8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d92:	4650      	mov	r0, sl
 8008d94:	4659      	mov	r1, fp
 8008d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9a:	f7f7 fd57 	bl	800084c <__aeabi_ddiv>
 8008d9e:	4682      	mov	sl, r0
 8008da0:	468b      	mov	fp, r1
 8008da2:	1124      	asrs	r4, r4, #4
 8008da4:	d0dc      	beq.n	8008d60 <_strtod_l+0x518>
 8008da6:	2c1f      	cmp	r4, #31
 8008da8:	dd20      	ble.n	8008dec <_strtod_l+0x5a4>
 8008daa:	2400      	movs	r4, #0
 8008dac:	46a0      	mov	r8, r4
 8008dae:	940a      	str	r4, [sp, #40]	@ 0x28
 8008db0:	46a1      	mov	r9, r4
 8008db2:	9a05      	ldr	r2, [sp, #20]
 8008db4:	2322      	movs	r3, #34	@ 0x22
 8008db6:	f04f 0a00 	mov.w	sl, #0
 8008dba:	f04f 0b00 	mov.w	fp, #0
 8008dbe:	6013      	str	r3, [r2, #0]
 8008dc0:	e768      	b.n	8008c94 <_strtod_l+0x44c>
 8008dc2:	bf00      	nop
 8008dc4:	0800af55 	.word	0x0800af55
 8008dc8:	0800b16c 	.word	0x0800b16c
 8008dcc:	0800af4d 	.word	0x0800af4d
 8008dd0:	0800af82 	.word	0x0800af82
 8008dd4:	0800b330 	.word	0x0800b330
 8008dd8:	0800b0a0 	.word	0x0800b0a0
 8008ddc:	0800b078 	.word	0x0800b078
 8008de0:	7ff00000 	.word	0x7ff00000
 8008de4:	7ca00000 	.word	0x7ca00000
 8008de8:	7fefffff 	.word	0x7fefffff
 8008dec:	f014 0310 	ands.w	r3, r4, #16
 8008df0:	bf18      	it	ne
 8008df2:	236a      	movne	r3, #106	@ 0x6a
 8008df4:	4ea9      	ldr	r6, [pc, #676]	@ (800909c <_strtod_l+0x854>)
 8008df6:	9308      	str	r3, [sp, #32]
 8008df8:	4650      	mov	r0, sl
 8008dfa:	4659      	mov	r1, fp
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	07e2      	lsls	r2, r4, #31
 8008e00:	d504      	bpl.n	8008e0c <_strtod_l+0x5c4>
 8008e02:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e06:	f7f7 fbf7 	bl	80005f8 <__aeabi_dmul>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	1064      	asrs	r4, r4, #1
 8008e0e:	f106 0608 	add.w	r6, r6, #8
 8008e12:	d1f4      	bne.n	8008dfe <_strtod_l+0x5b6>
 8008e14:	b10b      	cbz	r3, 8008e1a <_strtod_l+0x5d2>
 8008e16:	4682      	mov	sl, r0
 8008e18:	468b      	mov	fp, r1
 8008e1a:	9b08      	ldr	r3, [sp, #32]
 8008e1c:	b1b3      	cbz	r3, 8008e4c <_strtod_l+0x604>
 8008e1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008e22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	4659      	mov	r1, fp
 8008e2a:	dd0f      	ble.n	8008e4c <_strtod_l+0x604>
 8008e2c:	2b1f      	cmp	r3, #31
 8008e2e:	dd55      	ble.n	8008edc <_strtod_l+0x694>
 8008e30:	2b34      	cmp	r3, #52	@ 0x34
 8008e32:	bfde      	ittt	le
 8008e34:	f04f 33ff 	movle.w	r3, #4294967295
 8008e38:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008e3c:	4093      	lslle	r3, r2
 8008e3e:	f04f 0a00 	mov.w	sl, #0
 8008e42:	bfcc      	ite	gt
 8008e44:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008e48:	ea03 0b01 	andle.w	fp, r3, r1
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	2300      	movs	r3, #0
 8008e50:	4650      	mov	r0, sl
 8008e52:	4659      	mov	r1, fp
 8008e54:	f7f7 fe38 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d1a6      	bne.n	8008daa <_strtod_l+0x562>
 8008e5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008e62:	9805      	ldr	r0, [sp, #20]
 8008e64:	462b      	mov	r3, r5
 8008e66:	463a      	mov	r2, r7
 8008e68:	f7ff f8c6 	bl	8007ff8 <__s2b>
 8008e6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	f43f af05 	beq.w	8008c7e <_strtod_l+0x436>
 8008e74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e76:	2a00      	cmp	r2, #0
 8008e78:	eba9 0308 	sub.w	r3, r9, r8
 8008e7c:	bfa8      	it	ge
 8008e7e:	2300      	movge	r3, #0
 8008e80:	9312      	str	r3, [sp, #72]	@ 0x48
 8008e82:	2400      	movs	r4, #0
 8008e84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008e88:	9316      	str	r3, [sp, #88]	@ 0x58
 8008e8a:	46a0      	mov	r8, r4
 8008e8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e8e:	9805      	ldr	r0, [sp, #20]
 8008e90:	6859      	ldr	r1, [r3, #4]
 8008e92:	f7ff f809 	bl	8007ea8 <_Balloc>
 8008e96:	4681      	mov	r9, r0
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	f43f aef4 	beq.w	8008c86 <_strtod_l+0x43e>
 8008e9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ea0:	691a      	ldr	r2, [r3, #16]
 8008ea2:	3202      	adds	r2, #2
 8008ea4:	f103 010c 	add.w	r1, r3, #12
 8008ea8:	0092      	lsls	r2, r2, #2
 8008eaa:	300c      	adds	r0, #12
 8008eac:	f001 fab4 	bl	800a418 <memcpy>
 8008eb0:	ec4b ab10 	vmov	d0, sl, fp
 8008eb4:	9805      	ldr	r0, [sp, #20]
 8008eb6:	aa1c      	add	r2, sp, #112	@ 0x70
 8008eb8:	a91b      	add	r1, sp, #108	@ 0x6c
 8008eba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008ebe:	f7ff fbd7 	bl	8008670 <__d2b>
 8008ec2:	901a      	str	r0, [sp, #104]	@ 0x68
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	f43f aede 	beq.w	8008c86 <_strtod_l+0x43e>
 8008eca:	9805      	ldr	r0, [sp, #20]
 8008ecc:	2101      	movs	r1, #1
 8008ece:	f7ff f929 	bl	8008124 <__i2b>
 8008ed2:	4680      	mov	r8, r0
 8008ed4:	b948      	cbnz	r0, 8008eea <_strtod_l+0x6a2>
 8008ed6:	f04f 0800 	mov.w	r8, #0
 8008eda:	e6d4      	b.n	8008c86 <_strtod_l+0x43e>
 8008edc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee4:	ea03 0a0a 	and.w	sl, r3, sl
 8008ee8:	e7b0      	b.n	8008e4c <_strtod_l+0x604>
 8008eea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008eec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008eee:	2d00      	cmp	r5, #0
 8008ef0:	bfab      	itete	ge
 8008ef2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008ef4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008ef6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008ef8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008efa:	bfac      	ite	ge
 8008efc:	18ef      	addge	r7, r5, r3
 8008efe:	1b5e      	sublt	r6, r3, r5
 8008f00:	9b08      	ldr	r3, [sp, #32]
 8008f02:	1aed      	subs	r5, r5, r3
 8008f04:	4415      	add	r5, r2
 8008f06:	4b66      	ldr	r3, [pc, #408]	@ (80090a0 <_strtod_l+0x858>)
 8008f08:	3d01      	subs	r5, #1
 8008f0a:	429d      	cmp	r5, r3
 8008f0c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008f10:	da50      	bge.n	8008fb4 <_strtod_l+0x76c>
 8008f12:	1b5b      	subs	r3, r3, r5
 8008f14:	2b1f      	cmp	r3, #31
 8008f16:	eba2 0203 	sub.w	r2, r2, r3
 8008f1a:	f04f 0101 	mov.w	r1, #1
 8008f1e:	dc3d      	bgt.n	8008f9c <_strtod_l+0x754>
 8008f20:	fa01 f303 	lsl.w	r3, r1, r3
 8008f24:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f26:	2300      	movs	r3, #0
 8008f28:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f2a:	18bd      	adds	r5, r7, r2
 8008f2c:	9b08      	ldr	r3, [sp, #32]
 8008f2e:	42af      	cmp	r7, r5
 8008f30:	4416      	add	r6, r2
 8008f32:	441e      	add	r6, r3
 8008f34:	463b      	mov	r3, r7
 8008f36:	bfa8      	it	ge
 8008f38:	462b      	movge	r3, r5
 8008f3a:	42b3      	cmp	r3, r6
 8008f3c:	bfa8      	it	ge
 8008f3e:	4633      	movge	r3, r6
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	bfc2      	ittt	gt
 8008f44:	1aed      	subgt	r5, r5, r3
 8008f46:	1af6      	subgt	r6, r6, r3
 8008f48:	1aff      	subgt	r7, r7, r3
 8008f4a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	dd16      	ble.n	8008f7e <_strtod_l+0x736>
 8008f50:	4641      	mov	r1, r8
 8008f52:	9805      	ldr	r0, [sp, #20]
 8008f54:	461a      	mov	r2, r3
 8008f56:	f7ff f9a5 	bl	80082a4 <__pow5mult>
 8008f5a:	4680      	mov	r8, r0
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d0ba      	beq.n	8008ed6 <_strtod_l+0x68e>
 8008f60:	4601      	mov	r1, r0
 8008f62:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f64:	9805      	ldr	r0, [sp, #20]
 8008f66:	f7ff f8f3 	bl	8008150 <__multiply>
 8008f6a:	900e      	str	r0, [sp, #56]	@ 0x38
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	f43f ae8a 	beq.w	8008c86 <_strtod_l+0x43e>
 8008f72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f74:	9805      	ldr	r0, [sp, #20]
 8008f76:	f7fe ffd7 	bl	8007f28 <_Bfree>
 8008f7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f7e:	2d00      	cmp	r5, #0
 8008f80:	dc1d      	bgt.n	8008fbe <_strtod_l+0x776>
 8008f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	dd23      	ble.n	8008fd0 <_strtod_l+0x788>
 8008f88:	4649      	mov	r1, r9
 8008f8a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008f8c:	9805      	ldr	r0, [sp, #20]
 8008f8e:	f7ff f989 	bl	80082a4 <__pow5mult>
 8008f92:	4681      	mov	r9, r0
 8008f94:	b9e0      	cbnz	r0, 8008fd0 <_strtod_l+0x788>
 8008f96:	f04f 0900 	mov.w	r9, #0
 8008f9a:	e674      	b.n	8008c86 <_strtod_l+0x43e>
 8008f9c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008fa0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008fa4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008fa8:	35e2      	adds	r5, #226	@ 0xe2
 8008faa:	fa01 f305 	lsl.w	r3, r1, r5
 8008fae:	9310      	str	r3, [sp, #64]	@ 0x40
 8008fb0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008fb2:	e7ba      	b.n	8008f2a <_strtod_l+0x6e2>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8008fb8:	2301      	movs	r3, #1
 8008fba:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008fbc:	e7b5      	b.n	8008f2a <_strtod_l+0x6e2>
 8008fbe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008fc0:	9805      	ldr	r0, [sp, #20]
 8008fc2:	462a      	mov	r2, r5
 8008fc4:	f7ff f9c8 	bl	8008358 <__lshift>
 8008fc8:	901a      	str	r0, [sp, #104]	@ 0x68
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d1d9      	bne.n	8008f82 <_strtod_l+0x73a>
 8008fce:	e65a      	b.n	8008c86 <_strtod_l+0x43e>
 8008fd0:	2e00      	cmp	r6, #0
 8008fd2:	dd07      	ble.n	8008fe4 <_strtod_l+0x79c>
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	9805      	ldr	r0, [sp, #20]
 8008fd8:	4632      	mov	r2, r6
 8008fda:	f7ff f9bd 	bl	8008358 <__lshift>
 8008fde:	4681      	mov	r9, r0
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d0d8      	beq.n	8008f96 <_strtod_l+0x74e>
 8008fe4:	2f00      	cmp	r7, #0
 8008fe6:	dd08      	ble.n	8008ffa <_strtod_l+0x7b2>
 8008fe8:	4641      	mov	r1, r8
 8008fea:	9805      	ldr	r0, [sp, #20]
 8008fec:	463a      	mov	r2, r7
 8008fee:	f7ff f9b3 	bl	8008358 <__lshift>
 8008ff2:	4680      	mov	r8, r0
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f43f ae46 	beq.w	8008c86 <_strtod_l+0x43e>
 8008ffa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ffc:	9805      	ldr	r0, [sp, #20]
 8008ffe:	464a      	mov	r2, r9
 8009000:	f7ff fa32 	bl	8008468 <__mdiff>
 8009004:	4604      	mov	r4, r0
 8009006:	2800      	cmp	r0, #0
 8009008:	f43f ae3d 	beq.w	8008c86 <_strtod_l+0x43e>
 800900c:	68c3      	ldr	r3, [r0, #12]
 800900e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009010:	2300      	movs	r3, #0
 8009012:	60c3      	str	r3, [r0, #12]
 8009014:	4641      	mov	r1, r8
 8009016:	f7ff fa0b 	bl	8008430 <__mcmp>
 800901a:	2800      	cmp	r0, #0
 800901c:	da46      	bge.n	80090ac <_strtod_l+0x864>
 800901e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009020:	ea53 030a 	orrs.w	r3, r3, sl
 8009024:	d16c      	bne.n	8009100 <_strtod_l+0x8b8>
 8009026:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800902a:	2b00      	cmp	r3, #0
 800902c:	d168      	bne.n	8009100 <_strtod_l+0x8b8>
 800902e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009032:	0d1b      	lsrs	r3, r3, #20
 8009034:	051b      	lsls	r3, r3, #20
 8009036:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800903a:	d961      	bls.n	8009100 <_strtod_l+0x8b8>
 800903c:	6963      	ldr	r3, [r4, #20]
 800903e:	b913      	cbnz	r3, 8009046 <_strtod_l+0x7fe>
 8009040:	6923      	ldr	r3, [r4, #16]
 8009042:	2b01      	cmp	r3, #1
 8009044:	dd5c      	ble.n	8009100 <_strtod_l+0x8b8>
 8009046:	4621      	mov	r1, r4
 8009048:	2201      	movs	r2, #1
 800904a:	9805      	ldr	r0, [sp, #20]
 800904c:	f7ff f984 	bl	8008358 <__lshift>
 8009050:	4641      	mov	r1, r8
 8009052:	4604      	mov	r4, r0
 8009054:	f7ff f9ec 	bl	8008430 <__mcmp>
 8009058:	2800      	cmp	r0, #0
 800905a:	dd51      	ble.n	8009100 <_strtod_l+0x8b8>
 800905c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009060:	9a08      	ldr	r2, [sp, #32]
 8009062:	0d1b      	lsrs	r3, r3, #20
 8009064:	051b      	lsls	r3, r3, #20
 8009066:	2a00      	cmp	r2, #0
 8009068:	d06b      	beq.n	8009142 <_strtod_l+0x8fa>
 800906a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800906e:	d868      	bhi.n	8009142 <_strtod_l+0x8fa>
 8009070:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009074:	f67f ae9d 	bls.w	8008db2 <_strtod_l+0x56a>
 8009078:	4b0a      	ldr	r3, [pc, #40]	@ (80090a4 <_strtod_l+0x85c>)
 800907a:	4650      	mov	r0, sl
 800907c:	4659      	mov	r1, fp
 800907e:	2200      	movs	r2, #0
 8009080:	f7f7 faba 	bl	80005f8 <__aeabi_dmul>
 8009084:	4b08      	ldr	r3, [pc, #32]	@ (80090a8 <_strtod_l+0x860>)
 8009086:	400b      	ands	r3, r1
 8009088:	4682      	mov	sl, r0
 800908a:	468b      	mov	fp, r1
 800908c:	2b00      	cmp	r3, #0
 800908e:	f47f ae05 	bne.w	8008c9c <_strtod_l+0x454>
 8009092:	9a05      	ldr	r2, [sp, #20]
 8009094:	2322      	movs	r3, #34	@ 0x22
 8009096:	6013      	str	r3, [r2, #0]
 8009098:	e600      	b.n	8008c9c <_strtod_l+0x454>
 800909a:	bf00      	nop
 800909c:	0800b198 	.word	0x0800b198
 80090a0:	fffffc02 	.word	0xfffffc02
 80090a4:	39500000 	.word	0x39500000
 80090a8:	7ff00000 	.word	0x7ff00000
 80090ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80090b0:	d165      	bne.n	800917e <_strtod_l+0x936>
 80090b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80090b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090b8:	b35a      	cbz	r2, 8009112 <_strtod_l+0x8ca>
 80090ba:	4a9f      	ldr	r2, [pc, #636]	@ (8009338 <_strtod_l+0xaf0>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d12b      	bne.n	8009118 <_strtod_l+0x8d0>
 80090c0:	9b08      	ldr	r3, [sp, #32]
 80090c2:	4651      	mov	r1, sl
 80090c4:	b303      	cbz	r3, 8009108 <_strtod_l+0x8c0>
 80090c6:	4b9d      	ldr	r3, [pc, #628]	@ (800933c <_strtod_l+0xaf4>)
 80090c8:	465a      	mov	r2, fp
 80090ca:	4013      	ands	r3, r2
 80090cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80090d0:	f04f 32ff 	mov.w	r2, #4294967295
 80090d4:	d81b      	bhi.n	800910e <_strtod_l+0x8c6>
 80090d6:	0d1b      	lsrs	r3, r3, #20
 80090d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80090dc:	fa02 f303 	lsl.w	r3, r2, r3
 80090e0:	4299      	cmp	r1, r3
 80090e2:	d119      	bne.n	8009118 <_strtod_l+0x8d0>
 80090e4:	4b96      	ldr	r3, [pc, #600]	@ (8009340 <_strtod_l+0xaf8>)
 80090e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d102      	bne.n	80090f2 <_strtod_l+0x8aa>
 80090ec:	3101      	adds	r1, #1
 80090ee:	f43f adca 	beq.w	8008c86 <_strtod_l+0x43e>
 80090f2:	4b92      	ldr	r3, [pc, #584]	@ (800933c <_strtod_l+0xaf4>)
 80090f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090f6:	401a      	ands	r2, r3
 80090f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80090fc:	f04f 0a00 	mov.w	sl, #0
 8009100:	9b08      	ldr	r3, [sp, #32]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1b8      	bne.n	8009078 <_strtod_l+0x830>
 8009106:	e5c9      	b.n	8008c9c <_strtod_l+0x454>
 8009108:	f04f 33ff 	mov.w	r3, #4294967295
 800910c:	e7e8      	b.n	80090e0 <_strtod_l+0x898>
 800910e:	4613      	mov	r3, r2
 8009110:	e7e6      	b.n	80090e0 <_strtod_l+0x898>
 8009112:	ea53 030a 	orrs.w	r3, r3, sl
 8009116:	d0a1      	beq.n	800905c <_strtod_l+0x814>
 8009118:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800911a:	b1db      	cbz	r3, 8009154 <_strtod_l+0x90c>
 800911c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800911e:	4213      	tst	r3, r2
 8009120:	d0ee      	beq.n	8009100 <_strtod_l+0x8b8>
 8009122:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009124:	9a08      	ldr	r2, [sp, #32]
 8009126:	4650      	mov	r0, sl
 8009128:	4659      	mov	r1, fp
 800912a:	b1bb      	cbz	r3, 800915c <_strtod_l+0x914>
 800912c:	f7ff fb6e 	bl	800880c <sulp>
 8009130:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009134:	ec53 2b10 	vmov	r2, r3, d0
 8009138:	f7f7 f8a8 	bl	800028c <__adddf3>
 800913c:	4682      	mov	sl, r0
 800913e:	468b      	mov	fp, r1
 8009140:	e7de      	b.n	8009100 <_strtod_l+0x8b8>
 8009142:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009146:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800914a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800914e:	f04f 3aff 	mov.w	sl, #4294967295
 8009152:	e7d5      	b.n	8009100 <_strtod_l+0x8b8>
 8009154:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009156:	ea13 0f0a 	tst.w	r3, sl
 800915a:	e7e1      	b.n	8009120 <_strtod_l+0x8d8>
 800915c:	f7ff fb56 	bl	800880c <sulp>
 8009160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009164:	ec53 2b10 	vmov	r2, r3, d0
 8009168:	f7f7 f88e 	bl	8000288 <__aeabi_dsub>
 800916c:	2200      	movs	r2, #0
 800916e:	2300      	movs	r3, #0
 8009170:	4682      	mov	sl, r0
 8009172:	468b      	mov	fp, r1
 8009174:	f7f7 fca8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009178:	2800      	cmp	r0, #0
 800917a:	d0c1      	beq.n	8009100 <_strtod_l+0x8b8>
 800917c:	e619      	b.n	8008db2 <_strtod_l+0x56a>
 800917e:	4641      	mov	r1, r8
 8009180:	4620      	mov	r0, r4
 8009182:	f7ff facd 	bl	8008720 <__ratio>
 8009186:	ec57 6b10 	vmov	r6, r7, d0
 800918a:	2200      	movs	r2, #0
 800918c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009190:	4630      	mov	r0, r6
 8009192:	4639      	mov	r1, r7
 8009194:	f7f7 fcac 	bl	8000af0 <__aeabi_dcmple>
 8009198:	2800      	cmp	r0, #0
 800919a:	d06f      	beq.n	800927c <_strtod_l+0xa34>
 800919c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d17a      	bne.n	8009298 <_strtod_l+0xa50>
 80091a2:	f1ba 0f00 	cmp.w	sl, #0
 80091a6:	d158      	bne.n	800925a <_strtod_l+0xa12>
 80091a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d15a      	bne.n	8009268 <_strtod_l+0xa20>
 80091b2:	4b64      	ldr	r3, [pc, #400]	@ (8009344 <_strtod_l+0xafc>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	4630      	mov	r0, r6
 80091b8:	4639      	mov	r1, r7
 80091ba:	f7f7 fc8f 	bl	8000adc <__aeabi_dcmplt>
 80091be:	2800      	cmp	r0, #0
 80091c0:	d159      	bne.n	8009276 <_strtod_l+0xa2e>
 80091c2:	4630      	mov	r0, r6
 80091c4:	4639      	mov	r1, r7
 80091c6:	4b60      	ldr	r3, [pc, #384]	@ (8009348 <_strtod_l+0xb00>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	f7f7 fa15 	bl	80005f8 <__aeabi_dmul>
 80091ce:	4606      	mov	r6, r0
 80091d0:	460f      	mov	r7, r1
 80091d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80091d6:	9606      	str	r6, [sp, #24]
 80091d8:	9307      	str	r3, [sp, #28]
 80091da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091de:	4d57      	ldr	r5, [pc, #348]	@ (800933c <_strtod_l+0xaf4>)
 80091e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80091e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091e6:	401d      	ands	r5, r3
 80091e8:	4b58      	ldr	r3, [pc, #352]	@ (800934c <_strtod_l+0xb04>)
 80091ea:	429d      	cmp	r5, r3
 80091ec:	f040 80b2 	bne.w	8009354 <_strtod_l+0xb0c>
 80091f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80091f6:	ec4b ab10 	vmov	d0, sl, fp
 80091fa:	f7ff f9c9 	bl	8008590 <__ulp>
 80091fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009202:	ec51 0b10 	vmov	r0, r1, d0
 8009206:	f7f7 f9f7 	bl	80005f8 <__aeabi_dmul>
 800920a:	4652      	mov	r2, sl
 800920c:	465b      	mov	r3, fp
 800920e:	f7f7 f83d 	bl	800028c <__adddf3>
 8009212:	460b      	mov	r3, r1
 8009214:	4949      	ldr	r1, [pc, #292]	@ (800933c <_strtod_l+0xaf4>)
 8009216:	4a4e      	ldr	r2, [pc, #312]	@ (8009350 <_strtod_l+0xb08>)
 8009218:	4019      	ands	r1, r3
 800921a:	4291      	cmp	r1, r2
 800921c:	4682      	mov	sl, r0
 800921e:	d942      	bls.n	80092a6 <_strtod_l+0xa5e>
 8009220:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009222:	4b47      	ldr	r3, [pc, #284]	@ (8009340 <_strtod_l+0xaf8>)
 8009224:	429a      	cmp	r2, r3
 8009226:	d103      	bne.n	8009230 <_strtod_l+0x9e8>
 8009228:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800922a:	3301      	adds	r3, #1
 800922c:	f43f ad2b 	beq.w	8008c86 <_strtod_l+0x43e>
 8009230:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009340 <_strtod_l+0xaf8>
 8009234:	f04f 3aff 	mov.w	sl, #4294967295
 8009238:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800923a:	9805      	ldr	r0, [sp, #20]
 800923c:	f7fe fe74 	bl	8007f28 <_Bfree>
 8009240:	9805      	ldr	r0, [sp, #20]
 8009242:	4649      	mov	r1, r9
 8009244:	f7fe fe70 	bl	8007f28 <_Bfree>
 8009248:	9805      	ldr	r0, [sp, #20]
 800924a:	4641      	mov	r1, r8
 800924c:	f7fe fe6c 	bl	8007f28 <_Bfree>
 8009250:	9805      	ldr	r0, [sp, #20]
 8009252:	4621      	mov	r1, r4
 8009254:	f7fe fe68 	bl	8007f28 <_Bfree>
 8009258:	e618      	b.n	8008e8c <_strtod_l+0x644>
 800925a:	f1ba 0f01 	cmp.w	sl, #1
 800925e:	d103      	bne.n	8009268 <_strtod_l+0xa20>
 8009260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009262:	2b00      	cmp	r3, #0
 8009264:	f43f ada5 	beq.w	8008db2 <_strtod_l+0x56a>
 8009268:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009318 <_strtod_l+0xad0>
 800926c:	4f35      	ldr	r7, [pc, #212]	@ (8009344 <_strtod_l+0xafc>)
 800926e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009272:	2600      	movs	r6, #0
 8009274:	e7b1      	b.n	80091da <_strtod_l+0x992>
 8009276:	4f34      	ldr	r7, [pc, #208]	@ (8009348 <_strtod_l+0xb00>)
 8009278:	2600      	movs	r6, #0
 800927a:	e7aa      	b.n	80091d2 <_strtod_l+0x98a>
 800927c:	4b32      	ldr	r3, [pc, #200]	@ (8009348 <_strtod_l+0xb00>)
 800927e:	4630      	mov	r0, r6
 8009280:	4639      	mov	r1, r7
 8009282:	2200      	movs	r2, #0
 8009284:	f7f7 f9b8 	bl	80005f8 <__aeabi_dmul>
 8009288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800928a:	4606      	mov	r6, r0
 800928c:	460f      	mov	r7, r1
 800928e:	2b00      	cmp	r3, #0
 8009290:	d09f      	beq.n	80091d2 <_strtod_l+0x98a>
 8009292:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009296:	e7a0      	b.n	80091da <_strtod_l+0x992>
 8009298:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009320 <_strtod_l+0xad8>
 800929c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80092a0:	ec57 6b17 	vmov	r6, r7, d7
 80092a4:	e799      	b.n	80091da <_strtod_l+0x992>
 80092a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80092aa:	9b08      	ldr	r3, [sp, #32]
 80092ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1c1      	bne.n	8009238 <_strtod_l+0x9f0>
 80092b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092b8:	0d1b      	lsrs	r3, r3, #20
 80092ba:	051b      	lsls	r3, r3, #20
 80092bc:	429d      	cmp	r5, r3
 80092be:	d1bb      	bne.n	8009238 <_strtod_l+0x9f0>
 80092c0:	4630      	mov	r0, r6
 80092c2:	4639      	mov	r1, r7
 80092c4:	f7f7 fcf8 	bl	8000cb8 <__aeabi_d2lz>
 80092c8:	f7f7 f968 	bl	800059c <__aeabi_l2d>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	4630      	mov	r0, r6
 80092d2:	4639      	mov	r1, r7
 80092d4:	f7f6 ffd8 	bl	8000288 <__aeabi_dsub>
 80092d8:	460b      	mov	r3, r1
 80092da:	4602      	mov	r2, r0
 80092dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80092e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80092e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092e6:	ea46 060a 	orr.w	r6, r6, sl
 80092ea:	431e      	orrs	r6, r3
 80092ec:	d06f      	beq.n	80093ce <_strtod_l+0xb86>
 80092ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8009328 <_strtod_l+0xae0>)
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	f7f7 fbf2 	bl	8000adc <__aeabi_dcmplt>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	f47f accf 	bne.w	8008c9c <_strtod_l+0x454>
 80092fe:	a30c      	add	r3, pc, #48	@ (adr r3, 8009330 <_strtod_l+0xae8>)
 8009300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009304:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009308:	f7f7 fc06 	bl	8000b18 <__aeabi_dcmpgt>
 800930c:	2800      	cmp	r0, #0
 800930e:	d093      	beq.n	8009238 <_strtod_l+0x9f0>
 8009310:	e4c4      	b.n	8008c9c <_strtod_l+0x454>
 8009312:	bf00      	nop
 8009314:	f3af 8000 	nop.w
 8009318:	00000000 	.word	0x00000000
 800931c:	bff00000 	.word	0xbff00000
 8009320:	00000000 	.word	0x00000000
 8009324:	3ff00000 	.word	0x3ff00000
 8009328:	94a03595 	.word	0x94a03595
 800932c:	3fdfffff 	.word	0x3fdfffff
 8009330:	35afe535 	.word	0x35afe535
 8009334:	3fe00000 	.word	0x3fe00000
 8009338:	000fffff 	.word	0x000fffff
 800933c:	7ff00000 	.word	0x7ff00000
 8009340:	7fefffff 	.word	0x7fefffff
 8009344:	3ff00000 	.word	0x3ff00000
 8009348:	3fe00000 	.word	0x3fe00000
 800934c:	7fe00000 	.word	0x7fe00000
 8009350:	7c9fffff 	.word	0x7c9fffff
 8009354:	9b08      	ldr	r3, [sp, #32]
 8009356:	b323      	cbz	r3, 80093a2 <_strtod_l+0xb5a>
 8009358:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800935c:	d821      	bhi.n	80093a2 <_strtod_l+0xb5a>
 800935e:	a328      	add	r3, pc, #160	@ (adr r3, 8009400 <_strtod_l+0xbb8>)
 8009360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009364:	4630      	mov	r0, r6
 8009366:	4639      	mov	r1, r7
 8009368:	f7f7 fbc2 	bl	8000af0 <__aeabi_dcmple>
 800936c:	b1a0      	cbz	r0, 8009398 <_strtod_l+0xb50>
 800936e:	4639      	mov	r1, r7
 8009370:	4630      	mov	r0, r6
 8009372:	f7f7 fc19 	bl	8000ba8 <__aeabi_d2uiz>
 8009376:	2801      	cmp	r0, #1
 8009378:	bf38      	it	cc
 800937a:	2001      	movcc	r0, #1
 800937c:	f7f7 f8c2 	bl	8000504 <__aeabi_ui2d>
 8009380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009382:	4606      	mov	r6, r0
 8009384:	460f      	mov	r7, r1
 8009386:	b9fb      	cbnz	r3, 80093c8 <_strtod_l+0xb80>
 8009388:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800938c:	9014      	str	r0, [sp, #80]	@ 0x50
 800938e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009390:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009394:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009398:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800939a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800939e:	1b5b      	subs	r3, r3, r5
 80093a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80093a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80093a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80093aa:	f7ff f8f1 	bl	8008590 <__ulp>
 80093ae:	4650      	mov	r0, sl
 80093b0:	ec53 2b10 	vmov	r2, r3, d0
 80093b4:	4659      	mov	r1, fp
 80093b6:	f7f7 f91f 	bl	80005f8 <__aeabi_dmul>
 80093ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80093be:	f7f6 ff65 	bl	800028c <__adddf3>
 80093c2:	4682      	mov	sl, r0
 80093c4:	468b      	mov	fp, r1
 80093c6:	e770      	b.n	80092aa <_strtod_l+0xa62>
 80093c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80093cc:	e7e0      	b.n	8009390 <_strtod_l+0xb48>
 80093ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8009408 <_strtod_l+0xbc0>)
 80093d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d4:	f7f7 fb82 	bl	8000adc <__aeabi_dcmplt>
 80093d8:	e798      	b.n	800930c <_strtod_l+0xac4>
 80093da:	2300      	movs	r3, #0
 80093dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80093e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	f7ff ba6d 	b.w	80088c2 <_strtod_l+0x7a>
 80093e8:	2a65      	cmp	r2, #101	@ 0x65
 80093ea:	f43f ab66 	beq.w	8008aba <_strtod_l+0x272>
 80093ee:	2a45      	cmp	r2, #69	@ 0x45
 80093f0:	f43f ab63 	beq.w	8008aba <_strtod_l+0x272>
 80093f4:	2301      	movs	r3, #1
 80093f6:	f7ff bb9e 	b.w	8008b36 <_strtod_l+0x2ee>
 80093fa:	bf00      	nop
 80093fc:	f3af 8000 	nop.w
 8009400:	ffc00000 	.word	0xffc00000
 8009404:	41dfffff 	.word	0x41dfffff
 8009408:	94a03595 	.word	0x94a03595
 800940c:	3fcfffff 	.word	0x3fcfffff

08009410 <_strtod_r>:
 8009410:	4b01      	ldr	r3, [pc, #4]	@ (8009418 <_strtod_r+0x8>)
 8009412:	f7ff ba19 	b.w	8008848 <_strtod_l>
 8009416:	bf00      	nop
 8009418:	200000e0 	.word	0x200000e0

0800941c <_strtol_l.constprop.0>:
 800941c:	2b24      	cmp	r3, #36	@ 0x24
 800941e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009422:	4686      	mov	lr, r0
 8009424:	4690      	mov	r8, r2
 8009426:	d801      	bhi.n	800942c <_strtol_l.constprop.0+0x10>
 8009428:	2b01      	cmp	r3, #1
 800942a:	d106      	bne.n	800943a <_strtol_l.constprop.0+0x1e>
 800942c:	f7fd fdbc 	bl	8006fa8 <__errno>
 8009430:	2316      	movs	r3, #22
 8009432:	6003      	str	r3, [r0, #0]
 8009434:	2000      	movs	r0, #0
 8009436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943a:	4834      	ldr	r0, [pc, #208]	@ (800950c <_strtol_l.constprop.0+0xf0>)
 800943c:	460d      	mov	r5, r1
 800943e:	462a      	mov	r2, r5
 8009440:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009444:	5d06      	ldrb	r6, [r0, r4]
 8009446:	f016 0608 	ands.w	r6, r6, #8
 800944a:	d1f8      	bne.n	800943e <_strtol_l.constprop.0+0x22>
 800944c:	2c2d      	cmp	r4, #45	@ 0x2d
 800944e:	d12d      	bne.n	80094ac <_strtol_l.constprop.0+0x90>
 8009450:	782c      	ldrb	r4, [r5, #0]
 8009452:	2601      	movs	r6, #1
 8009454:	1c95      	adds	r5, r2, #2
 8009456:	f033 0210 	bics.w	r2, r3, #16
 800945a:	d109      	bne.n	8009470 <_strtol_l.constprop.0+0x54>
 800945c:	2c30      	cmp	r4, #48	@ 0x30
 800945e:	d12a      	bne.n	80094b6 <_strtol_l.constprop.0+0x9a>
 8009460:	782a      	ldrb	r2, [r5, #0]
 8009462:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009466:	2a58      	cmp	r2, #88	@ 0x58
 8009468:	d125      	bne.n	80094b6 <_strtol_l.constprop.0+0x9a>
 800946a:	786c      	ldrb	r4, [r5, #1]
 800946c:	2310      	movs	r3, #16
 800946e:	3502      	adds	r5, #2
 8009470:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009474:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009478:	2200      	movs	r2, #0
 800947a:	fbbc f9f3 	udiv	r9, ip, r3
 800947e:	4610      	mov	r0, r2
 8009480:	fb03 ca19 	mls	sl, r3, r9, ip
 8009484:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009488:	2f09      	cmp	r7, #9
 800948a:	d81b      	bhi.n	80094c4 <_strtol_l.constprop.0+0xa8>
 800948c:	463c      	mov	r4, r7
 800948e:	42a3      	cmp	r3, r4
 8009490:	dd27      	ble.n	80094e2 <_strtol_l.constprop.0+0xc6>
 8009492:	1c57      	adds	r7, r2, #1
 8009494:	d007      	beq.n	80094a6 <_strtol_l.constprop.0+0x8a>
 8009496:	4581      	cmp	r9, r0
 8009498:	d320      	bcc.n	80094dc <_strtol_l.constprop.0+0xc0>
 800949a:	d101      	bne.n	80094a0 <_strtol_l.constprop.0+0x84>
 800949c:	45a2      	cmp	sl, r4
 800949e:	db1d      	blt.n	80094dc <_strtol_l.constprop.0+0xc0>
 80094a0:	fb00 4003 	mla	r0, r0, r3, r4
 80094a4:	2201      	movs	r2, #1
 80094a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094aa:	e7eb      	b.n	8009484 <_strtol_l.constprop.0+0x68>
 80094ac:	2c2b      	cmp	r4, #43	@ 0x2b
 80094ae:	bf04      	itt	eq
 80094b0:	782c      	ldrbeq	r4, [r5, #0]
 80094b2:	1c95      	addeq	r5, r2, #2
 80094b4:	e7cf      	b.n	8009456 <_strtol_l.constprop.0+0x3a>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1da      	bne.n	8009470 <_strtol_l.constprop.0+0x54>
 80094ba:	2c30      	cmp	r4, #48	@ 0x30
 80094bc:	bf0c      	ite	eq
 80094be:	2308      	moveq	r3, #8
 80094c0:	230a      	movne	r3, #10
 80094c2:	e7d5      	b.n	8009470 <_strtol_l.constprop.0+0x54>
 80094c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80094c8:	2f19      	cmp	r7, #25
 80094ca:	d801      	bhi.n	80094d0 <_strtol_l.constprop.0+0xb4>
 80094cc:	3c37      	subs	r4, #55	@ 0x37
 80094ce:	e7de      	b.n	800948e <_strtol_l.constprop.0+0x72>
 80094d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80094d4:	2f19      	cmp	r7, #25
 80094d6:	d804      	bhi.n	80094e2 <_strtol_l.constprop.0+0xc6>
 80094d8:	3c57      	subs	r4, #87	@ 0x57
 80094da:	e7d8      	b.n	800948e <_strtol_l.constprop.0+0x72>
 80094dc:	f04f 32ff 	mov.w	r2, #4294967295
 80094e0:	e7e1      	b.n	80094a6 <_strtol_l.constprop.0+0x8a>
 80094e2:	1c53      	adds	r3, r2, #1
 80094e4:	d108      	bne.n	80094f8 <_strtol_l.constprop.0+0xdc>
 80094e6:	2322      	movs	r3, #34	@ 0x22
 80094e8:	f8ce 3000 	str.w	r3, [lr]
 80094ec:	4660      	mov	r0, ip
 80094ee:	f1b8 0f00 	cmp.w	r8, #0
 80094f2:	d0a0      	beq.n	8009436 <_strtol_l.constprop.0+0x1a>
 80094f4:	1e69      	subs	r1, r5, #1
 80094f6:	e006      	b.n	8009506 <_strtol_l.constprop.0+0xea>
 80094f8:	b106      	cbz	r6, 80094fc <_strtol_l.constprop.0+0xe0>
 80094fa:	4240      	negs	r0, r0
 80094fc:	f1b8 0f00 	cmp.w	r8, #0
 8009500:	d099      	beq.n	8009436 <_strtol_l.constprop.0+0x1a>
 8009502:	2a00      	cmp	r2, #0
 8009504:	d1f6      	bne.n	80094f4 <_strtol_l.constprop.0+0xd8>
 8009506:	f8c8 1000 	str.w	r1, [r8]
 800950a:	e794      	b.n	8009436 <_strtol_l.constprop.0+0x1a>
 800950c:	0800b1c1 	.word	0x0800b1c1

08009510 <_strtol_r>:
 8009510:	f7ff bf84 	b.w	800941c <_strtol_l.constprop.0>

08009514 <__ssputs_r>:
 8009514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009518:	688e      	ldr	r6, [r1, #8]
 800951a:	461f      	mov	r7, r3
 800951c:	42be      	cmp	r6, r7
 800951e:	680b      	ldr	r3, [r1, #0]
 8009520:	4682      	mov	sl, r0
 8009522:	460c      	mov	r4, r1
 8009524:	4690      	mov	r8, r2
 8009526:	d82d      	bhi.n	8009584 <__ssputs_r+0x70>
 8009528:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800952c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009530:	d026      	beq.n	8009580 <__ssputs_r+0x6c>
 8009532:	6965      	ldr	r5, [r4, #20]
 8009534:	6909      	ldr	r1, [r1, #16]
 8009536:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800953a:	eba3 0901 	sub.w	r9, r3, r1
 800953e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009542:	1c7b      	adds	r3, r7, #1
 8009544:	444b      	add	r3, r9
 8009546:	106d      	asrs	r5, r5, #1
 8009548:	429d      	cmp	r5, r3
 800954a:	bf38      	it	cc
 800954c:	461d      	movcc	r5, r3
 800954e:	0553      	lsls	r3, r2, #21
 8009550:	d527      	bpl.n	80095a2 <__ssputs_r+0x8e>
 8009552:	4629      	mov	r1, r5
 8009554:	f7fe fc1c 	bl	8007d90 <_malloc_r>
 8009558:	4606      	mov	r6, r0
 800955a:	b360      	cbz	r0, 80095b6 <__ssputs_r+0xa2>
 800955c:	6921      	ldr	r1, [r4, #16]
 800955e:	464a      	mov	r2, r9
 8009560:	f000 ff5a 	bl	800a418 <memcpy>
 8009564:	89a3      	ldrh	r3, [r4, #12]
 8009566:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800956a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800956e:	81a3      	strh	r3, [r4, #12]
 8009570:	6126      	str	r6, [r4, #16]
 8009572:	6165      	str	r5, [r4, #20]
 8009574:	444e      	add	r6, r9
 8009576:	eba5 0509 	sub.w	r5, r5, r9
 800957a:	6026      	str	r6, [r4, #0]
 800957c:	60a5      	str	r5, [r4, #8]
 800957e:	463e      	mov	r6, r7
 8009580:	42be      	cmp	r6, r7
 8009582:	d900      	bls.n	8009586 <__ssputs_r+0x72>
 8009584:	463e      	mov	r6, r7
 8009586:	6820      	ldr	r0, [r4, #0]
 8009588:	4632      	mov	r2, r6
 800958a:	4641      	mov	r1, r8
 800958c:	f000 fef7 	bl	800a37e <memmove>
 8009590:	68a3      	ldr	r3, [r4, #8]
 8009592:	1b9b      	subs	r3, r3, r6
 8009594:	60a3      	str	r3, [r4, #8]
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	4433      	add	r3, r6
 800959a:	6023      	str	r3, [r4, #0]
 800959c:	2000      	movs	r0, #0
 800959e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a2:	462a      	mov	r2, r5
 80095a4:	f001 facd 	bl	800ab42 <_realloc_r>
 80095a8:	4606      	mov	r6, r0
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d1e0      	bne.n	8009570 <__ssputs_r+0x5c>
 80095ae:	6921      	ldr	r1, [r4, #16]
 80095b0:	4650      	mov	r0, sl
 80095b2:	f7fe fb79 	bl	8007ca8 <_free_r>
 80095b6:	230c      	movs	r3, #12
 80095b8:	f8ca 3000 	str.w	r3, [sl]
 80095bc:	89a3      	ldrh	r3, [r4, #12]
 80095be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095c2:	81a3      	strh	r3, [r4, #12]
 80095c4:	f04f 30ff 	mov.w	r0, #4294967295
 80095c8:	e7e9      	b.n	800959e <__ssputs_r+0x8a>
	...

080095cc <_svfiprintf_r>:
 80095cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d0:	4698      	mov	r8, r3
 80095d2:	898b      	ldrh	r3, [r1, #12]
 80095d4:	061b      	lsls	r3, r3, #24
 80095d6:	b09d      	sub	sp, #116	@ 0x74
 80095d8:	4607      	mov	r7, r0
 80095da:	460d      	mov	r5, r1
 80095dc:	4614      	mov	r4, r2
 80095de:	d510      	bpl.n	8009602 <_svfiprintf_r+0x36>
 80095e0:	690b      	ldr	r3, [r1, #16]
 80095e2:	b973      	cbnz	r3, 8009602 <_svfiprintf_r+0x36>
 80095e4:	2140      	movs	r1, #64	@ 0x40
 80095e6:	f7fe fbd3 	bl	8007d90 <_malloc_r>
 80095ea:	6028      	str	r0, [r5, #0]
 80095ec:	6128      	str	r0, [r5, #16]
 80095ee:	b930      	cbnz	r0, 80095fe <_svfiprintf_r+0x32>
 80095f0:	230c      	movs	r3, #12
 80095f2:	603b      	str	r3, [r7, #0]
 80095f4:	f04f 30ff 	mov.w	r0, #4294967295
 80095f8:	b01d      	add	sp, #116	@ 0x74
 80095fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095fe:	2340      	movs	r3, #64	@ 0x40
 8009600:	616b      	str	r3, [r5, #20]
 8009602:	2300      	movs	r3, #0
 8009604:	9309      	str	r3, [sp, #36]	@ 0x24
 8009606:	2320      	movs	r3, #32
 8009608:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800960c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009610:	2330      	movs	r3, #48	@ 0x30
 8009612:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80097b0 <_svfiprintf_r+0x1e4>
 8009616:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800961a:	f04f 0901 	mov.w	r9, #1
 800961e:	4623      	mov	r3, r4
 8009620:	469a      	mov	sl, r3
 8009622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009626:	b10a      	cbz	r2, 800962c <_svfiprintf_r+0x60>
 8009628:	2a25      	cmp	r2, #37	@ 0x25
 800962a:	d1f9      	bne.n	8009620 <_svfiprintf_r+0x54>
 800962c:	ebba 0b04 	subs.w	fp, sl, r4
 8009630:	d00b      	beq.n	800964a <_svfiprintf_r+0x7e>
 8009632:	465b      	mov	r3, fp
 8009634:	4622      	mov	r2, r4
 8009636:	4629      	mov	r1, r5
 8009638:	4638      	mov	r0, r7
 800963a:	f7ff ff6b 	bl	8009514 <__ssputs_r>
 800963e:	3001      	adds	r0, #1
 8009640:	f000 80a7 	beq.w	8009792 <_svfiprintf_r+0x1c6>
 8009644:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009646:	445a      	add	r2, fp
 8009648:	9209      	str	r2, [sp, #36]	@ 0x24
 800964a:	f89a 3000 	ldrb.w	r3, [sl]
 800964e:	2b00      	cmp	r3, #0
 8009650:	f000 809f 	beq.w	8009792 <_svfiprintf_r+0x1c6>
 8009654:	2300      	movs	r3, #0
 8009656:	f04f 32ff 	mov.w	r2, #4294967295
 800965a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800965e:	f10a 0a01 	add.w	sl, sl, #1
 8009662:	9304      	str	r3, [sp, #16]
 8009664:	9307      	str	r3, [sp, #28]
 8009666:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800966a:	931a      	str	r3, [sp, #104]	@ 0x68
 800966c:	4654      	mov	r4, sl
 800966e:	2205      	movs	r2, #5
 8009670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009674:	484e      	ldr	r0, [pc, #312]	@ (80097b0 <_svfiprintf_r+0x1e4>)
 8009676:	f7f6 fdab 	bl	80001d0 <memchr>
 800967a:	9a04      	ldr	r2, [sp, #16]
 800967c:	b9d8      	cbnz	r0, 80096b6 <_svfiprintf_r+0xea>
 800967e:	06d0      	lsls	r0, r2, #27
 8009680:	bf44      	itt	mi
 8009682:	2320      	movmi	r3, #32
 8009684:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009688:	0711      	lsls	r1, r2, #28
 800968a:	bf44      	itt	mi
 800968c:	232b      	movmi	r3, #43	@ 0x2b
 800968e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009692:	f89a 3000 	ldrb.w	r3, [sl]
 8009696:	2b2a      	cmp	r3, #42	@ 0x2a
 8009698:	d015      	beq.n	80096c6 <_svfiprintf_r+0xfa>
 800969a:	9a07      	ldr	r2, [sp, #28]
 800969c:	4654      	mov	r4, sl
 800969e:	2000      	movs	r0, #0
 80096a0:	f04f 0c0a 	mov.w	ip, #10
 80096a4:	4621      	mov	r1, r4
 80096a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096aa:	3b30      	subs	r3, #48	@ 0x30
 80096ac:	2b09      	cmp	r3, #9
 80096ae:	d94b      	bls.n	8009748 <_svfiprintf_r+0x17c>
 80096b0:	b1b0      	cbz	r0, 80096e0 <_svfiprintf_r+0x114>
 80096b2:	9207      	str	r2, [sp, #28]
 80096b4:	e014      	b.n	80096e0 <_svfiprintf_r+0x114>
 80096b6:	eba0 0308 	sub.w	r3, r0, r8
 80096ba:	fa09 f303 	lsl.w	r3, r9, r3
 80096be:	4313      	orrs	r3, r2
 80096c0:	9304      	str	r3, [sp, #16]
 80096c2:	46a2      	mov	sl, r4
 80096c4:	e7d2      	b.n	800966c <_svfiprintf_r+0xa0>
 80096c6:	9b03      	ldr	r3, [sp, #12]
 80096c8:	1d19      	adds	r1, r3, #4
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	9103      	str	r1, [sp, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	bfbb      	ittet	lt
 80096d2:	425b      	neglt	r3, r3
 80096d4:	f042 0202 	orrlt.w	r2, r2, #2
 80096d8:	9307      	strge	r3, [sp, #28]
 80096da:	9307      	strlt	r3, [sp, #28]
 80096dc:	bfb8      	it	lt
 80096de:	9204      	strlt	r2, [sp, #16]
 80096e0:	7823      	ldrb	r3, [r4, #0]
 80096e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80096e4:	d10a      	bne.n	80096fc <_svfiprintf_r+0x130>
 80096e6:	7863      	ldrb	r3, [r4, #1]
 80096e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80096ea:	d132      	bne.n	8009752 <_svfiprintf_r+0x186>
 80096ec:	9b03      	ldr	r3, [sp, #12]
 80096ee:	1d1a      	adds	r2, r3, #4
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	9203      	str	r2, [sp, #12]
 80096f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096f8:	3402      	adds	r4, #2
 80096fa:	9305      	str	r3, [sp, #20]
 80096fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80097c0 <_svfiprintf_r+0x1f4>
 8009700:	7821      	ldrb	r1, [r4, #0]
 8009702:	2203      	movs	r2, #3
 8009704:	4650      	mov	r0, sl
 8009706:	f7f6 fd63 	bl	80001d0 <memchr>
 800970a:	b138      	cbz	r0, 800971c <_svfiprintf_r+0x150>
 800970c:	9b04      	ldr	r3, [sp, #16]
 800970e:	eba0 000a 	sub.w	r0, r0, sl
 8009712:	2240      	movs	r2, #64	@ 0x40
 8009714:	4082      	lsls	r2, r0
 8009716:	4313      	orrs	r3, r2
 8009718:	3401      	adds	r4, #1
 800971a:	9304      	str	r3, [sp, #16]
 800971c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009720:	4824      	ldr	r0, [pc, #144]	@ (80097b4 <_svfiprintf_r+0x1e8>)
 8009722:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009726:	2206      	movs	r2, #6
 8009728:	f7f6 fd52 	bl	80001d0 <memchr>
 800972c:	2800      	cmp	r0, #0
 800972e:	d036      	beq.n	800979e <_svfiprintf_r+0x1d2>
 8009730:	4b21      	ldr	r3, [pc, #132]	@ (80097b8 <_svfiprintf_r+0x1ec>)
 8009732:	bb1b      	cbnz	r3, 800977c <_svfiprintf_r+0x1b0>
 8009734:	9b03      	ldr	r3, [sp, #12]
 8009736:	3307      	adds	r3, #7
 8009738:	f023 0307 	bic.w	r3, r3, #7
 800973c:	3308      	adds	r3, #8
 800973e:	9303      	str	r3, [sp, #12]
 8009740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009742:	4433      	add	r3, r6
 8009744:	9309      	str	r3, [sp, #36]	@ 0x24
 8009746:	e76a      	b.n	800961e <_svfiprintf_r+0x52>
 8009748:	fb0c 3202 	mla	r2, ip, r2, r3
 800974c:	460c      	mov	r4, r1
 800974e:	2001      	movs	r0, #1
 8009750:	e7a8      	b.n	80096a4 <_svfiprintf_r+0xd8>
 8009752:	2300      	movs	r3, #0
 8009754:	3401      	adds	r4, #1
 8009756:	9305      	str	r3, [sp, #20]
 8009758:	4619      	mov	r1, r3
 800975a:	f04f 0c0a 	mov.w	ip, #10
 800975e:	4620      	mov	r0, r4
 8009760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009764:	3a30      	subs	r2, #48	@ 0x30
 8009766:	2a09      	cmp	r2, #9
 8009768:	d903      	bls.n	8009772 <_svfiprintf_r+0x1a6>
 800976a:	2b00      	cmp	r3, #0
 800976c:	d0c6      	beq.n	80096fc <_svfiprintf_r+0x130>
 800976e:	9105      	str	r1, [sp, #20]
 8009770:	e7c4      	b.n	80096fc <_svfiprintf_r+0x130>
 8009772:	fb0c 2101 	mla	r1, ip, r1, r2
 8009776:	4604      	mov	r4, r0
 8009778:	2301      	movs	r3, #1
 800977a:	e7f0      	b.n	800975e <_svfiprintf_r+0x192>
 800977c:	ab03      	add	r3, sp, #12
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	462a      	mov	r2, r5
 8009782:	4b0e      	ldr	r3, [pc, #56]	@ (80097bc <_svfiprintf_r+0x1f0>)
 8009784:	a904      	add	r1, sp, #16
 8009786:	4638      	mov	r0, r7
 8009788:	f7fc fb88 	bl	8005e9c <_printf_float>
 800978c:	1c42      	adds	r2, r0, #1
 800978e:	4606      	mov	r6, r0
 8009790:	d1d6      	bne.n	8009740 <_svfiprintf_r+0x174>
 8009792:	89ab      	ldrh	r3, [r5, #12]
 8009794:	065b      	lsls	r3, r3, #25
 8009796:	f53f af2d 	bmi.w	80095f4 <_svfiprintf_r+0x28>
 800979a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800979c:	e72c      	b.n	80095f8 <_svfiprintf_r+0x2c>
 800979e:	ab03      	add	r3, sp, #12
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	462a      	mov	r2, r5
 80097a4:	4b05      	ldr	r3, [pc, #20]	@ (80097bc <_svfiprintf_r+0x1f0>)
 80097a6:	a904      	add	r1, sp, #16
 80097a8:	4638      	mov	r0, r7
 80097aa:	f7fc fe0f 	bl	80063cc <_printf_i>
 80097ae:	e7ed      	b.n	800978c <_svfiprintf_r+0x1c0>
 80097b0:	0800b2c1 	.word	0x0800b2c1
 80097b4:	0800b2cb 	.word	0x0800b2cb
 80097b8:	08005e9d 	.word	0x08005e9d
 80097bc:	08009515 	.word	0x08009515
 80097c0:	0800b2c7 	.word	0x0800b2c7

080097c4 <_sungetc_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	1c4b      	adds	r3, r1, #1
 80097c8:	4614      	mov	r4, r2
 80097ca:	d103      	bne.n	80097d4 <_sungetc_r+0x10>
 80097cc:	f04f 35ff 	mov.w	r5, #4294967295
 80097d0:	4628      	mov	r0, r5
 80097d2:	bd38      	pop	{r3, r4, r5, pc}
 80097d4:	8993      	ldrh	r3, [r2, #12]
 80097d6:	f023 0320 	bic.w	r3, r3, #32
 80097da:	8193      	strh	r3, [r2, #12]
 80097dc:	6853      	ldr	r3, [r2, #4]
 80097de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80097e0:	b2cd      	uxtb	r5, r1
 80097e2:	b18a      	cbz	r2, 8009808 <_sungetc_r+0x44>
 80097e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80097e6:	429a      	cmp	r2, r3
 80097e8:	dd08      	ble.n	80097fc <_sungetc_r+0x38>
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	1e5a      	subs	r2, r3, #1
 80097ee:	6022      	str	r2, [r4, #0]
 80097f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80097f4:	6863      	ldr	r3, [r4, #4]
 80097f6:	3301      	adds	r3, #1
 80097f8:	6063      	str	r3, [r4, #4]
 80097fa:	e7e9      	b.n	80097d0 <_sungetc_r+0xc>
 80097fc:	4621      	mov	r1, r4
 80097fe:	f000 fd84 	bl	800a30a <__submore>
 8009802:	2800      	cmp	r0, #0
 8009804:	d0f1      	beq.n	80097ea <_sungetc_r+0x26>
 8009806:	e7e1      	b.n	80097cc <_sungetc_r+0x8>
 8009808:	6921      	ldr	r1, [r4, #16]
 800980a:	6822      	ldr	r2, [r4, #0]
 800980c:	b141      	cbz	r1, 8009820 <_sungetc_r+0x5c>
 800980e:	4291      	cmp	r1, r2
 8009810:	d206      	bcs.n	8009820 <_sungetc_r+0x5c>
 8009812:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009816:	42a9      	cmp	r1, r5
 8009818:	d102      	bne.n	8009820 <_sungetc_r+0x5c>
 800981a:	3a01      	subs	r2, #1
 800981c:	6022      	str	r2, [r4, #0]
 800981e:	e7ea      	b.n	80097f6 <_sungetc_r+0x32>
 8009820:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8009824:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009828:	6363      	str	r3, [r4, #52]	@ 0x34
 800982a:	2303      	movs	r3, #3
 800982c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800982e:	4623      	mov	r3, r4
 8009830:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009834:	6023      	str	r3, [r4, #0]
 8009836:	2301      	movs	r3, #1
 8009838:	e7de      	b.n	80097f8 <_sungetc_r+0x34>

0800983a <__ssrefill_r>:
 800983a:	b510      	push	{r4, lr}
 800983c:	460c      	mov	r4, r1
 800983e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009840:	b169      	cbz	r1, 800985e <__ssrefill_r+0x24>
 8009842:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009846:	4299      	cmp	r1, r3
 8009848:	d001      	beq.n	800984e <__ssrefill_r+0x14>
 800984a:	f7fe fa2d 	bl	8007ca8 <_free_r>
 800984e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009850:	6063      	str	r3, [r4, #4]
 8009852:	2000      	movs	r0, #0
 8009854:	6360      	str	r0, [r4, #52]	@ 0x34
 8009856:	b113      	cbz	r3, 800985e <__ssrefill_r+0x24>
 8009858:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800985a:	6023      	str	r3, [r4, #0]
 800985c:	bd10      	pop	{r4, pc}
 800985e:	6923      	ldr	r3, [r4, #16]
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	2300      	movs	r3, #0
 8009864:	6063      	str	r3, [r4, #4]
 8009866:	89a3      	ldrh	r3, [r4, #12]
 8009868:	f043 0320 	orr.w	r3, r3, #32
 800986c:	81a3      	strh	r3, [r4, #12]
 800986e:	f04f 30ff 	mov.w	r0, #4294967295
 8009872:	e7f3      	b.n	800985c <__ssrefill_r+0x22>

08009874 <__ssvfiscanf_r>:
 8009874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009878:	460c      	mov	r4, r1
 800987a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800987e:	2100      	movs	r1, #0
 8009880:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009884:	49a5      	ldr	r1, [pc, #660]	@ (8009b1c <__ssvfiscanf_r+0x2a8>)
 8009886:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009888:	f10d 0804 	add.w	r8, sp, #4
 800988c:	49a4      	ldr	r1, [pc, #656]	@ (8009b20 <__ssvfiscanf_r+0x2ac>)
 800988e:	4fa5      	ldr	r7, [pc, #660]	@ (8009b24 <__ssvfiscanf_r+0x2b0>)
 8009890:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009894:	4606      	mov	r6, r0
 8009896:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	7813      	ldrb	r3, [r2, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 8158 	beq.w	8009b52 <__ssvfiscanf_r+0x2de>
 80098a2:	5cf9      	ldrb	r1, [r7, r3]
 80098a4:	f011 0108 	ands.w	r1, r1, #8
 80098a8:	f102 0501 	add.w	r5, r2, #1
 80098ac:	d019      	beq.n	80098e2 <__ssvfiscanf_r+0x6e>
 80098ae:	6863      	ldr	r3, [r4, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	dd0f      	ble.n	80098d4 <__ssvfiscanf_r+0x60>
 80098b4:	6823      	ldr	r3, [r4, #0]
 80098b6:	781a      	ldrb	r2, [r3, #0]
 80098b8:	5cba      	ldrb	r2, [r7, r2]
 80098ba:	0712      	lsls	r2, r2, #28
 80098bc:	d401      	bmi.n	80098c2 <__ssvfiscanf_r+0x4e>
 80098be:	462a      	mov	r2, r5
 80098c0:	e7eb      	b.n	800989a <__ssvfiscanf_r+0x26>
 80098c2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80098c4:	3201      	adds	r2, #1
 80098c6:	9245      	str	r2, [sp, #276]	@ 0x114
 80098c8:	6862      	ldr	r2, [r4, #4]
 80098ca:	3301      	adds	r3, #1
 80098cc:	3a01      	subs	r2, #1
 80098ce:	6062      	str	r2, [r4, #4]
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	e7ec      	b.n	80098ae <__ssvfiscanf_r+0x3a>
 80098d4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80098d6:	4621      	mov	r1, r4
 80098d8:	4630      	mov	r0, r6
 80098da:	4798      	blx	r3
 80098dc:	2800      	cmp	r0, #0
 80098de:	d0e9      	beq.n	80098b4 <__ssvfiscanf_r+0x40>
 80098e0:	e7ed      	b.n	80098be <__ssvfiscanf_r+0x4a>
 80098e2:	2b25      	cmp	r3, #37	@ 0x25
 80098e4:	d012      	beq.n	800990c <__ssvfiscanf_r+0x98>
 80098e6:	4699      	mov	r9, r3
 80098e8:	6863      	ldr	r3, [r4, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f340 8093 	ble.w	8009a16 <__ssvfiscanf_r+0x1a2>
 80098f0:	6822      	ldr	r2, [r4, #0]
 80098f2:	7813      	ldrb	r3, [r2, #0]
 80098f4:	454b      	cmp	r3, r9
 80098f6:	f040 812c 	bne.w	8009b52 <__ssvfiscanf_r+0x2de>
 80098fa:	6863      	ldr	r3, [r4, #4]
 80098fc:	3b01      	subs	r3, #1
 80098fe:	6063      	str	r3, [r4, #4]
 8009900:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8009902:	3201      	adds	r2, #1
 8009904:	3301      	adds	r3, #1
 8009906:	6022      	str	r2, [r4, #0]
 8009908:	9345      	str	r3, [sp, #276]	@ 0x114
 800990a:	e7d8      	b.n	80098be <__ssvfiscanf_r+0x4a>
 800990c:	9141      	str	r1, [sp, #260]	@ 0x104
 800990e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009910:	7853      	ldrb	r3, [r2, #1]
 8009912:	2b2a      	cmp	r3, #42	@ 0x2a
 8009914:	bf02      	ittt	eq
 8009916:	2310      	moveq	r3, #16
 8009918:	1c95      	addeq	r5, r2, #2
 800991a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800991c:	220a      	movs	r2, #10
 800991e:	46a9      	mov	r9, r5
 8009920:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009924:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009928:	2b09      	cmp	r3, #9
 800992a:	d91e      	bls.n	800996a <__ssvfiscanf_r+0xf6>
 800992c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8009b28 <__ssvfiscanf_r+0x2b4>
 8009930:	2203      	movs	r2, #3
 8009932:	4650      	mov	r0, sl
 8009934:	f7f6 fc4c 	bl	80001d0 <memchr>
 8009938:	b138      	cbz	r0, 800994a <__ssvfiscanf_r+0xd6>
 800993a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800993c:	eba0 000a 	sub.w	r0, r0, sl
 8009940:	2301      	movs	r3, #1
 8009942:	4083      	lsls	r3, r0
 8009944:	4313      	orrs	r3, r2
 8009946:	9341      	str	r3, [sp, #260]	@ 0x104
 8009948:	464d      	mov	r5, r9
 800994a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800994e:	2b78      	cmp	r3, #120	@ 0x78
 8009950:	d806      	bhi.n	8009960 <__ssvfiscanf_r+0xec>
 8009952:	2b57      	cmp	r3, #87	@ 0x57
 8009954:	d810      	bhi.n	8009978 <__ssvfiscanf_r+0x104>
 8009956:	2b25      	cmp	r3, #37	@ 0x25
 8009958:	d0c5      	beq.n	80098e6 <__ssvfiscanf_r+0x72>
 800995a:	d857      	bhi.n	8009a0c <__ssvfiscanf_r+0x198>
 800995c:	2b00      	cmp	r3, #0
 800995e:	d065      	beq.n	8009a2c <__ssvfiscanf_r+0x1b8>
 8009960:	2303      	movs	r3, #3
 8009962:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009964:	230a      	movs	r3, #10
 8009966:	9342      	str	r3, [sp, #264]	@ 0x108
 8009968:	e078      	b.n	8009a5c <__ssvfiscanf_r+0x1e8>
 800996a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800996c:	fb02 1103 	mla	r1, r2, r3, r1
 8009970:	3930      	subs	r1, #48	@ 0x30
 8009972:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009974:	464d      	mov	r5, r9
 8009976:	e7d2      	b.n	800991e <__ssvfiscanf_r+0xaa>
 8009978:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800997c:	2a20      	cmp	r2, #32
 800997e:	d8ef      	bhi.n	8009960 <__ssvfiscanf_r+0xec>
 8009980:	a101      	add	r1, pc, #4	@ (adr r1, 8009988 <__ssvfiscanf_r+0x114>)
 8009982:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009986:	bf00      	nop
 8009988:	08009a3b 	.word	0x08009a3b
 800998c:	08009961 	.word	0x08009961
 8009990:	08009961 	.word	0x08009961
 8009994:	08009a95 	.word	0x08009a95
 8009998:	08009961 	.word	0x08009961
 800999c:	08009961 	.word	0x08009961
 80099a0:	08009961 	.word	0x08009961
 80099a4:	08009961 	.word	0x08009961
 80099a8:	08009961 	.word	0x08009961
 80099ac:	08009961 	.word	0x08009961
 80099b0:	08009961 	.word	0x08009961
 80099b4:	08009aab 	.word	0x08009aab
 80099b8:	08009a91 	.word	0x08009a91
 80099bc:	08009a13 	.word	0x08009a13
 80099c0:	08009a13 	.word	0x08009a13
 80099c4:	08009a13 	.word	0x08009a13
 80099c8:	08009961 	.word	0x08009961
 80099cc:	08009a4d 	.word	0x08009a4d
 80099d0:	08009961 	.word	0x08009961
 80099d4:	08009961 	.word	0x08009961
 80099d8:	08009961 	.word	0x08009961
 80099dc:	08009961 	.word	0x08009961
 80099e0:	08009abb 	.word	0x08009abb
 80099e4:	08009a55 	.word	0x08009a55
 80099e8:	08009a33 	.word	0x08009a33
 80099ec:	08009961 	.word	0x08009961
 80099f0:	08009961 	.word	0x08009961
 80099f4:	08009ab7 	.word	0x08009ab7
 80099f8:	08009961 	.word	0x08009961
 80099fc:	08009a91 	.word	0x08009a91
 8009a00:	08009961 	.word	0x08009961
 8009a04:	08009961 	.word	0x08009961
 8009a08:	08009a3b 	.word	0x08009a3b
 8009a0c:	3b45      	subs	r3, #69	@ 0x45
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d8a6      	bhi.n	8009960 <__ssvfiscanf_r+0xec>
 8009a12:	2305      	movs	r3, #5
 8009a14:	e021      	b.n	8009a5a <__ssvfiscanf_r+0x1e6>
 8009a16:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009a18:	4621      	mov	r1, r4
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	4798      	blx	r3
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	f43f af66 	beq.w	80098f0 <__ssvfiscanf_r+0x7c>
 8009a24:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009a26:	2800      	cmp	r0, #0
 8009a28:	f040 808b 	bne.w	8009b42 <__ssvfiscanf_r+0x2ce>
 8009a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a30:	e08b      	b.n	8009b4a <__ssvfiscanf_r+0x2d6>
 8009a32:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009a34:	f042 0220 	orr.w	r2, r2, #32
 8009a38:	9241      	str	r2, [sp, #260]	@ 0x104
 8009a3a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009a3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a40:	9241      	str	r2, [sp, #260]	@ 0x104
 8009a42:	2210      	movs	r2, #16
 8009a44:	2b6e      	cmp	r3, #110	@ 0x6e
 8009a46:	9242      	str	r2, [sp, #264]	@ 0x108
 8009a48:	d902      	bls.n	8009a50 <__ssvfiscanf_r+0x1dc>
 8009a4a:	e005      	b.n	8009a58 <__ssvfiscanf_r+0x1e4>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009a50:	2303      	movs	r3, #3
 8009a52:	e002      	b.n	8009a5a <__ssvfiscanf_r+0x1e6>
 8009a54:	2308      	movs	r3, #8
 8009a56:	9342      	str	r3, [sp, #264]	@ 0x108
 8009a58:	2304      	movs	r3, #4
 8009a5a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009a5c:	6863      	ldr	r3, [r4, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	dd39      	ble.n	8009ad6 <__ssvfiscanf_r+0x262>
 8009a62:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009a64:	0659      	lsls	r1, r3, #25
 8009a66:	d404      	bmi.n	8009a72 <__ssvfiscanf_r+0x1fe>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	781a      	ldrb	r2, [r3, #0]
 8009a6c:	5cba      	ldrb	r2, [r7, r2]
 8009a6e:	0712      	lsls	r2, r2, #28
 8009a70:	d438      	bmi.n	8009ae4 <__ssvfiscanf_r+0x270>
 8009a72:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	dc47      	bgt.n	8009b08 <__ssvfiscanf_r+0x294>
 8009a78:	466b      	mov	r3, sp
 8009a7a:	4622      	mov	r2, r4
 8009a7c:	a941      	add	r1, sp, #260	@ 0x104
 8009a7e:	4630      	mov	r0, r6
 8009a80:	f000 f9ae 	bl	8009de0 <_scanf_chars>
 8009a84:	2801      	cmp	r0, #1
 8009a86:	d064      	beq.n	8009b52 <__ssvfiscanf_r+0x2de>
 8009a88:	2802      	cmp	r0, #2
 8009a8a:	f47f af18 	bne.w	80098be <__ssvfiscanf_r+0x4a>
 8009a8e:	e7c9      	b.n	8009a24 <__ssvfiscanf_r+0x1b0>
 8009a90:	220a      	movs	r2, #10
 8009a92:	e7d7      	b.n	8009a44 <__ssvfiscanf_r+0x1d0>
 8009a94:	4629      	mov	r1, r5
 8009a96:	4640      	mov	r0, r8
 8009a98:	f000 fbfe 	bl	800a298 <__sccl>
 8009a9c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aa2:	9341      	str	r3, [sp, #260]	@ 0x104
 8009aa4:	4605      	mov	r5, r0
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e7d7      	b.n	8009a5a <__ssvfiscanf_r+0x1e6>
 8009aaa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009aac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ab0:	9341      	str	r3, [sp, #260]	@ 0x104
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	e7d1      	b.n	8009a5a <__ssvfiscanf_r+0x1e6>
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	e7cf      	b.n	8009a5a <__ssvfiscanf_r+0x1e6>
 8009aba:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009abc:	06c3      	lsls	r3, r0, #27
 8009abe:	f53f aefe 	bmi.w	80098be <__ssvfiscanf_r+0x4a>
 8009ac2:	9b00      	ldr	r3, [sp, #0]
 8009ac4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009ac6:	1d19      	adds	r1, r3, #4
 8009ac8:	9100      	str	r1, [sp, #0]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	07c0      	lsls	r0, r0, #31
 8009ace:	bf4c      	ite	mi
 8009ad0:	801a      	strhmi	r2, [r3, #0]
 8009ad2:	601a      	strpl	r2, [r3, #0]
 8009ad4:	e6f3      	b.n	80098be <__ssvfiscanf_r+0x4a>
 8009ad6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009ad8:	4621      	mov	r1, r4
 8009ada:	4630      	mov	r0, r6
 8009adc:	4798      	blx	r3
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d0bf      	beq.n	8009a62 <__ssvfiscanf_r+0x1ee>
 8009ae2:	e79f      	b.n	8009a24 <__ssvfiscanf_r+0x1b0>
 8009ae4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009ae6:	3201      	adds	r2, #1
 8009ae8:	9245      	str	r2, [sp, #276]	@ 0x114
 8009aea:	6862      	ldr	r2, [r4, #4]
 8009aec:	3a01      	subs	r2, #1
 8009aee:	2a00      	cmp	r2, #0
 8009af0:	6062      	str	r2, [r4, #4]
 8009af2:	dd02      	ble.n	8009afa <__ssvfiscanf_r+0x286>
 8009af4:	3301      	adds	r3, #1
 8009af6:	6023      	str	r3, [r4, #0]
 8009af8:	e7b6      	b.n	8009a68 <__ssvfiscanf_r+0x1f4>
 8009afa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009afc:	4621      	mov	r1, r4
 8009afe:	4630      	mov	r0, r6
 8009b00:	4798      	blx	r3
 8009b02:	2800      	cmp	r0, #0
 8009b04:	d0b0      	beq.n	8009a68 <__ssvfiscanf_r+0x1f4>
 8009b06:	e78d      	b.n	8009a24 <__ssvfiscanf_r+0x1b0>
 8009b08:	2b04      	cmp	r3, #4
 8009b0a:	dc0f      	bgt.n	8009b2c <__ssvfiscanf_r+0x2b8>
 8009b0c:	466b      	mov	r3, sp
 8009b0e:	4622      	mov	r2, r4
 8009b10:	a941      	add	r1, sp, #260	@ 0x104
 8009b12:	4630      	mov	r0, r6
 8009b14:	f000 f9be 	bl	8009e94 <_scanf_i>
 8009b18:	e7b4      	b.n	8009a84 <__ssvfiscanf_r+0x210>
 8009b1a:	bf00      	nop
 8009b1c:	080097c5 	.word	0x080097c5
 8009b20:	0800983b 	.word	0x0800983b
 8009b24:	0800b1c1 	.word	0x0800b1c1
 8009b28:	0800b2c7 	.word	0x0800b2c7
 8009b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b58 <__ssvfiscanf_r+0x2e4>)
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f43f aec5 	beq.w	80098be <__ssvfiscanf_r+0x4a>
 8009b34:	466b      	mov	r3, sp
 8009b36:	4622      	mov	r2, r4
 8009b38:	a941      	add	r1, sp, #260	@ 0x104
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	f7fc fd66 	bl	800660c <_scanf_float>
 8009b40:	e7a0      	b.n	8009a84 <__ssvfiscanf_r+0x210>
 8009b42:	89a3      	ldrh	r3, [r4, #12]
 8009b44:	065b      	lsls	r3, r3, #25
 8009b46:	f53f af71 	bmi.w	8009a2c <__ssvfiscanf_r+0x1b8>
 8009b4a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8009b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b52:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009b54:	e7f9      	b.n	8009b4a <__ssvfiscanf_r+0x2d6>
 8009b56:	bf00      	nop
 8009b58:	0800660d 	.word	0x0800660d

08009b5c <__sfputc_r>:
 8009b5c:	6893      	ldr	r3, [r2, #8]
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	b410      	push	{r4}
 8009b64:	6093      	str	r3, [r2, #8]
 8009b66:	da08      	bge.n	8009b7a <__sfputc_r+0x1e>
 8009b68:	6994      	ldr	r4, [r2, #24]
 8009b6a:	42a3      	cmp	r3, r4
 8009b6c:	db01      	blt.n	8009b72 <__sfputc_r+0x16>
 8009b6e:	290a      	cmp	r1, #10
 8009b70:	d103      	bne.n	8009b7a <__sfputc_r+0x1e>
 8009b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b76:	f7fd b91e 	b.w	8006db6 <__swbuf_r>
 8009b7a:	6813      	ldr	r3, [r2, #0]
 8009b7c:	1c58      	adds	r0, r3, #1
 8009b7e:	6010      	str	r0, [r2, #0]
 8009b80:	7019      	strb	r1, [r3, #0]
 8009b82:	4608      	mov	r0, r1
 8009b84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <__sfputs_r>:
 8009b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8c:	4606      	mov	r6, r0
 8009b8e:	460f      	mov	r7, r1
 8009b90:	4614      	mov	r4, r2
 8009b92:	18d5      	adds	r5, r2, r3
 8009b94:	42ac      	cmp	r4, r5
 8009b96:	d101      	bne.n	8009b9c <__sfputs_r+0x12>
 8009b98:	2000      	movs	r0, #0
 8009b9a:	e007      	b.n	8009bac <__sfputs_r+0x22>
 8009b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba0:	463a      	mov	r2, r7
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	f7ff ffda 	bl	8009b5c <__sfputc_r>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d1f3      	bne.n	8009b94 <__sfputs_r+0xa>
 8009bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bb0 <_vfiprintf_r>:
 8009bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb4:	460d      	mov	r5, r1
 8009bb6:	b09d      	sub	sp, #116	@ 0x74
 8009bb8:	4614      	mov	r4, r2
 8009bba:	4698      	mov	r8, r3
 8009bbc:	4606      	mov	r6, r0
 8009bbe:	b118      	cbz	r0, 8009bc8 <_vfiprintf_r+0x18>
 8009bc0:	6a03      	ldr	r3, [r0, #32]
 8009bc2:	b90b      	cbnz	r3, 8009bc8 <_vfiprintf_r+0x18>
 8009bc4:	f7fc ffc2 	bl	8006b4c <__sinit>
 8009bc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bca:	07d9      	lsls	r1, r3, #31
 8009bcc:	d405      	bmi.n	8009bda <_vfiprintf_r+0x2a>
 8009bce:	89ab      	ldrh	r3, [r5, #12]
 8009bd0:	059a      	lsls	r2, r3, #22
 8009bd2:	d402      	bmi.n	8009bda <_vfiprintf_r+0x2a>
 8009bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bd6:	f7fd fa12 	bl	8006ffe <__retarget_lock_acquire_recursive>
 8009bda:	89ab      	ldrh	r3, [r5, #12]
 8009bdc:	071b      	lsls	r3, r3, #28
 8009bde:	d501      	bpl.n	8009be4 <_vfiprintf_r+0x34>
 8009be0:	692b      	ldr	r3, [r5, #16]
 8009be2:	b99b      	cbnz	r3, 8009c0c <_vfiprintf_r+0x5c>
 8009be4:	4629      	mov	r1, r5
 8009be6:	4630      	mov	r0, r6
 8009be8:	f7fd f924 	bl	8006e34 <__swsetup_r>
 8009bec:	b170      	cbz	r0, 8009c0c <_vfiprintf_r+0x5c>
 8009bee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bf0:	07dc      	lsls	r4, r3, #31
 8009bf2:	d504      	bpl.n	8009bfe <_vfiprintf_r+0x4e>
 8009bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf8:	b01d      	add	sp, #116	@ 0x74
 8009bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bfe:	89ab      	ldrh	r3, [r5, #12]
 8009c00:	0598      	lsls	r0, r3, #22
 8009c02:	d4f7      	bmi.n	8009bf4 <_vfiprintf_r+0x44>
 8009c04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c06:	f7fd f9fb 	bl	8007000 <__retarget_lock_release_recursive>
 8009c0a:	e7f3      	b.n	8009bf4 <_vfiprintf_r+0x44>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c10:	2320      	movs	r3, #32
 8009c12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c16:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c1a:	2330      	movs	r3, #48	@ 0x30
 8009c1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009dcc <_vfiprintf_r+0x21c>
 8009c20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c24:	f04f 0901 	mov.w	r9, #1
 8009c28:	4623      	mov	r3, r4
 8009c2a:	469a      	mov	sl, r3
 8009c2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c30:	b10a      	cbz	r2, 8009c36 <_vfiprintf_r+0x86>
 8009c32:	2a25      	cmp	r2, #37	@ 0x25
 8009c34:	d1f9      	bne.n	8009c2a <_vfiprintf_r+0x7a>
 8009c36:	ebba 0b04 	subs.w	fp, sl, r4
 8009c3a:	d00b      	beq.n	8009c54 <_vfiprintf_r+0xa4>
 8009c3c:	465b      	mov	r3, fp
 8009c3e:	4622      	mov	r2, r4
 8009c40:	4629      	mov	r1, r5
 8009c42:	4630      	mov	r0, r6
 8009c44:	f7ff ffa1 	bl	8009b8a <__sfputs_r>
 8009c48:	3001      	adds	r0, #1
 8009c4a:	f000 80a7 	beq.w	8009d9c <_vfiprintf_r+0x1ec>
 8009c4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c50:	445a      	add	r2, fp
 8009c52:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c54:	f89a 3000 	ldrb.w	r3, [sl]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 809f 	beq.w	8009d9c <_vfiprintf_r+0x1ec>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	f04f 32ff 	mov.w	r2, #4294967295
 8009c64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c68:	f10a 0a01 	add.w	sl, sl, #1
 8009c6c:	9304      	str	r3, [sp, #16]
 8009c6e:	9307      	str	r3, [sp, #28]
 8009c70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c74:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c76:	4654      	mov	r4, sl
 8009c78:	2205      	movs	r2, #5
 8009c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c7e:	4853      	ldr	r0, [pc, #332]	@ (8009dcc <_vfiprintf_r+0x21c>)
 8009c80:	f7f6 faa6 	bl	80001d0 <memchr>
 8009c84:	9a04      	ldr	r2, [sp, #16]
 8009c86:	b9d8      	cbnz	r0, 8009cc0 <_vfiprintf_r+0x110>
 8009c88:	06d1      	lsls	r1, r2, #27
 8009c8a:	bf44      	itt	mi
 8009c8c:	2320      	movmi	r3, #32
 8009c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c92:	0713      	lsls	r3, r2, #28
 8009c94:	bf44      	itt	mi
 8009c96:	232b      	movmi	r3, #43	@ 0x2b
 8009c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ca2:	d015      	beq.n	8009cd0 <_vfiprintf_r+0x120>
 8009ca4:	9a07      	ldr	r2, [sp, #28]
 8009ca6:	4654      	mov	r4, sl
 8009ca8:	2000      	movs	r0, #0
 8009caa:	f04f 0c0a 	mov.w	ip, #10
 8009cae:	4621      	mov	r1, r4
 8009cb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cb4:	3b30      	subs	r3, #48	@ 0x30
 8009cb6:	2b09      	cmp	r3, #9
 8009cb8:	d94b      	bls.n	8009d52 <_vfiprintf_r+0x1a2>
 8009cba:	b1b0      	cbz	r0, 8009cea <_vfiprintf_r+0x13a>
 8009cbc:	9207      	str	r2, [sp, #28]
 8009cbe:	e014      	b.n	8009cea <_vfiprintf_r+0x13a>
 8009cc0:	eba0 0308 	sub.w	r3, r0, r8
 8009cc4:	fa09 f303 	lsl.w	r3, r9, r3
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	9304      	str	r3, [sp, #16]
 8009ccc:	46a2      	mov	sl, r4
 8009cce:	e7d2      	b.n	8009c76 <_vfiprintf_r+0xc6>
 8009cd0:	9b03      	ldr	r3, [sp, #12]
 8009cd2:	1d19      	adds	r1, r3, #4
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	9103      	str	r1, [sp, #12]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	bfbb      	ittet	lt
 8009cdc:	425b      	neglt	r3, r3
 8009cde:	f042 0202 	orrlt.w	r2, r2, #2
 8009ce2:	9307      	strge	r3, [sp, #28]
 8009ce4:	9307      	strlt	r3, [sp, #28]
 8009ce6:	bfb8      	it	lt
 8009ce8:	9204      	strlt	r2, [sp, #16]
 8009cea:	7823      	ldrb	r3, [r4, #0]
 8009cec:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cee:	d10a      	bne.n	8009d06 <_vfiprintf_r+0x156>
 8009cf0:	7863      	ldrb	r3, [r4, #1]
 8009cf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cf4:	d132      	bne.n	8009d5c <_vfiprintf_r+0x1ac>
 8009cf6:	9b03      	ldr	r3, [sp, #12]
 8009cf8:	1d1a      	adds	r2, r3, #4
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	9203      	str	r2, [sp, #12]
 8009cfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d02:	3402      	adds	r4, #2
 8009d04:	9305      	str	r3, [sp, #20]
 8009d06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ddc <_vfiprintf_r+0x22c>
 8009d0a:	7821      	ldrb	r1, [r4, #0]
 8009d0c:	2203      	movs	r2, #3
 8009d0e:	4650      	mov	r0, sl
 8009d10:	f7f6 fa5e 	bl	80001d0 <memchr>
 8009d14:	b138      	cbz	r0, 8009d26 <_vfiprintf_r+0x176>
 8009d16:	9b04      	ldr	r3, [sp, #16]
 8009d18:	eba0 000a 	sub.w	r0, r0, sl
 8009d1c:	2240      	movs	r2, #64	@ 0x40
 8009d1e:	4082      	lsls	r2, r0
 8009d20:	4313      	orrs	r3, r2
 8009d22:	3401      	adds	r4, #1
 8009d24:	9304      	str	r3, [sp, #16]
 8009d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d2a:	4829      	ldr	r0, [pc, #164]	@ (8009dd0 <_vfiprintf_r+0x220>)
 8009d2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d30:	2206      	movs	r2, #6
 8009d32:	f7f6 fa4d 	bl	80001d0 <memchr>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d03f      	beq.n	8009dba <_vfiprintf_r+0x20a>
 8009d3a:	4b26      	ldr	r3, [pc, #152]	@ (8009dd4 <_vfiprintf_r+0x224>)
 8009d3c:	bb1b      	cbnz	r3, 8009d86 <_vfiprintf_r+0x1d6>
 8009d3e:	9b03      	ldr	r3, [sp, #12]
 8009d40:	3307      	adds	r3, #7
 8009d42:	f023 0307 	bic.w	r3, r3, #7
 8009d46:	3308      	adds	r3, #8
 8009d48:	9303      	str	r3, [sp, #12]
 8009d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d4c:	443b      	add	r3, r7
 8009d4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d50:	e76a      	b.n	8009c28 <_vfiprintf_r+0x78>
 8009d52:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d56:	460c      	mov	r4, r1
 8009d58:	2001      	movs	r0, #1
 8009d5a:	e7a8      	b.n	8009cae <_vfiprintf_r+0xfe>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	3401      	adds	r4, #1
 8009d60:	9305      	str	r3, [sp, #20]
 8009d62:	4619      	mov	r1, r3
 8009d64:	f04f 0c0a 	mov.w	ip, #10
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d6e:	3a30      	subs	r2, #48	@ 0x30
 8009d70:	2a09      	cmp	r2, #9
 8009d72:	d903      	bls.n	8009d7c <_vfiprintf_r+0x1cc>
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d0c6      	beq.n	8009d06 <_vfiprintf_r+0x156>
 8009d78:	9105      	str	r1, [sp, #20]
 8009d7a:	e7c4      	b.n	8009d06 <_vfiprintf_r+0x156>
 8009d7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d80:	4604      	mov	r4, r0
 8009d82:	2301      	movs	r3, #1
 8009d84:	e7f0      	b.n	8009d68 <_vfiprintf_r+0x1b8>
 8009d86:	ab03      	add	r3, sp, #12
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	462a      	mov	r2, r5
 8009d8c:	4b12      	ldr	r3, [pc, #72]	@ (8009dd8 <_vfiprintf_r+0x228>)
 8009d8e:	a904      	add	r1, sp, #16
 8009d90:	4630      	mov	r0, r6
 8009d92:	f7fc f883 	bl	8005e9c <_printf_float>
 8009d96:	4607      	mov	r7, r0
 8009d98:	1c78      	adds	r0, r7, #1
 8009d9a:	d1d6      	bne.n	8009d4a <_vfiprintf_r+0x19a>
 8009d9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d9e:	07d9      	lsls	r1, r3, #31
 8009da0:	d405      	bmi.n	8009dae <_vfiprintf_r+0x1fe>
 8009da2:	89ab      	ldrh	r3, [r5, #12]
 8009da4:	059a      	lsls	r2, r3, #22
 8009da6:	d402      	bmi.n	8009dae <_vfiprintf_r+0x1fe>
 8009da8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009daa:	f7fd f929 	bl	8007000 <__retarget_lock_release_recursive>
 8009dae:	89ab      	ldrh	r3, [r5, #12]
 8009db0:	065b      	lsls	r3, r3, #25
 8009db2:	f53f af1f 	bmi.w	8009bf4 <_vfiprintf_r+0x44>
 8009db6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009db8:	e71e      	b.n	8009bf8 <_vfiprintf_r+0x48>
 8009dba:	ab03      	add	r3, sp, #12
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	462a      	mov	r2, r5
 8009dc0:	4b05      	ldr	r3, [pc, #20]	@ (8009dd8 <_vfiprintf_r+0x228>)
 8009dc2:	a904      	add	r1, sp, #16
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	f7fc fb01 	bl	80063cc <_printf_i>
 8009dca:	e7e4      	b.n	8009d96 <_vfiprintf_r+0x1e6>
 8009dcc:	0800b2c1 	.word	0x0800b2c1
 8009dd0:	0800b2cb 	.word	0x0800b2cb
 8009dd4:	08005e9d 	.word	0x08005e9d
 8009dd8:	08009b8b 	.word	0x08009b8b
 8009ddc:	0800b2c7 	.word	0x0800b2c7

08009de0 <_scanf_chars>:
 8009de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009de4:	4615      	mov	r5, r2
 8009de6:	688a      	ldr	r2, [r1, #8]
 8009de8:	4680      	mov	r8, r0
 8009dea:	460c      	mov	r4, r1
 8009dec:	b932      	cbnz	r2, 8009dfc <_scanf_chars+0x1c>
 8009dee:	698a      	ldr	r2, [r1, #24]
 8009df0:	2a00      	cmp	r2, #0
 8009df2:	bf14      	ite	ne
 8009df4:	f04f 32ff 	movne.w	r2, #4294967295
 8009df8:	2201      	moveq	r2, #1
 8009dfa:	608a      	str	r2, [r1, #8]
 8009dfc:	6822      	ldr	r2, [r4, #0]
 8009dfe:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009e90 <_scanf_chars+0xb0>
 8009e02:	06d1      	lsls	r1, r2, #27
 8009e04:	bf5f      	itttt	pl
 8009e06:	681a      	ldrpl	r2, [r3, #0]
 8009e08:	1d11      	addpl	r1, r2, #4
 8009e0a:	6019      	strpl	r1, [r3, #0]
 8009e0c:	6816      	ldrpl	r6, [r2, #0]
 8009e0e:	2700      	movs	r7, #0
 8009e10:	69a0      	ldr	r0, [r4, #24]
 8009e12:	b188      	cbz	r0, 8009e38 <_scanf_chars+0x58>
 8009e14:	2801      	cmp	r0, #1
 8009e16:	d107      	bne.n	8009e28 <_scanf_chars+0x48>
 8009e18:	682b      	ldr	r3, [r5, #0]
 8009e1a:	781a      	ldrb	r2, [r3, #0]
 8009e1c:	6963      	ldr	r3, [r4, #20]
 8009e1e:	5c9b      	ldrb	r3, [r3, r2]
 8009e20:	b953      	cbnz	r3, 8009e38 <_scanf_chars+0x58>
 8009e22:	2f00      	cmp	r7, #0
 8009e24:	d031      	beq.n	8009e8a <_scanf_chars+0xaa>
 8009e26:	e022      	b.n	8009e6e <_scanf_chars+0x8e>
 8009e28:	2802      	cmp	r0, #2
 8009e2a:	d120      	bne.n	8009e6e <_scanf_chars+0x8e>
 8009e2c:	682b      	ldr	r3, [r5, #0]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009e34:	071b      	lsls	r3, r3, #28
 8009e36:	d41a      	bmi.n	8009e6e <_scanf_chars+0x8e>
 8009e38:	6823      	ldr	r3, [r4, #0]
 8009e3a:	06da      	lsls	r2, r3, #27
 8009e3c:	bf5e      	ittt	pl
 8009e3e:	682b      	ldrpl	r3, [r5, #0]
 8009e40:	781b      	ldrbpl	r3, [r3, #0]
 8009e42:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009e46:	682a      	ldr	r2, [r5, #0]
 8009e48:	686b      	ldr	r3, [r5, #4]
 8009e4a:	3201      	adds	r2, #1
 8009e4c:	602a      	str	r2, [r5, #0]
 8009e4e:	68a2      	ldr	r2, [r4, #8]
 8009e50:	3b01      	subs	r3, #1
 8009e52:	3a01      	subs	r2, #1
 8009e54:	606b      	str	r3, [r5, #4]
 8009e56:	3701      	adds	r7, #1
 8009e58:	60a2      	str	r2, [r4, #8]
 8009e5a:	b142      	cbz	r2, 8009e6e <_scanf_chars+0x8e>
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	dcd7      	bgt.n	8009e10 <_scanf_chars+0x30>
 8009e60:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009e64:	4629      	mov	r1, r5
 8009e66:	4640      	mov	r0, r8
 8009e68:	4798      	blx	r3
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d0d0      	beq.n	8009e10 <_scanf_chars+0x30>
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	f013 0310 	ands.w	r3, r3, #16
 8009e74:	d105      	bne.n	8009e82 <_scanf_chars+0xa2>
 8009e76:	68e2      	ldr	r2, [r4, #12]
 8009e78:	3201      	adds	r2, #1
 8009e7a:	60e2      	str	r2, [r4, #12]
 8009e7c:	69a2      	ldr	r2, [r4, #24]
 8009e7e:	b102      	cbz	r2, 8009e82 <_scanf_chars+0xa2>
 8009e80:	7033      	strb	r3, [r6, #0]
 8009e82:	6923      	ldr	r3, [r4, #16]
 8009e84:	443b      	add	r3, r7
 8009e86:	6123      	str	r3, [r4, #16]
 8009e88:	2000      	movs	r0, #0
 8009e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e8e:	bf00      	nop
 8009e90:	0800b1c1 	.word	0x0800b1c1

08009e94 <_scanf_i>:
 8009e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e98:	4698      	mov	r8, r3
 8009e9a:	4b74      	ldr	r3, [pc, #464]	@ (800a06c <_scanf_i+0x1d8>)
 8009e9c:	460c      	mov	r4, r1
 8009e9e:	4682      	mov	sl, r0
 8009ea0:	4616      	mov	r6, r2
 8009ea2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ea6:	b087      	sub	sp, #28
 8009ea8:	ab03      	add	r3, sp, #12
 8009eaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009eae:	4b70      	ldr	r3, [pc, #448]	@ (800a070 <_scanf_i+0x1dc>)
 8009eb0:	69a1      	ldr	r1, [r4, #24]
 8009eb2:	4a70      	ldr	r2, [pc, #448]	@ (800a074 <_scanf_i+0x1e0>)
 8009eb4:	2903      	cmp	r1, #3
 8009eb6:	bf08      	it	eq
 8009eb8:	461a      	moveq	r2, r3
 8009eba:	68a3      	ldr	r3, [r4, #8]
 8009ebc:	9201      	str	r2, [sp, #4]
 8009ebe:	1e5a      	subs	r2, r3, #1
 8009ec0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009ec4:	bf88      	it	hi
 8009ec6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009eca:	4627      	mov	r7, r4
 8009ecc:	bf82      	ittt	hi
 8009ece:	eb03 0905 	addhi.w	r9, r3, r5
 8009ed2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009ed6:	60a3      	strhi	r3, [r4, #8]
 8009ed8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009edc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009ee0:	bf98      	it	ls
 8009ee2:	f04f 0900 	movls.w	r9, #0
 8009ee6:	6023      	str	r3, [r4, #0]
 8009ee8:	463d      	mov	r5, r7
 8009eea:	f04f 0b00 	mov.w	fp, #0
 8009eee:	6831      	ldr	r1, [r6, #0]
 8009ef0:	ab03      	add	r3, sp, #12
 8009ef2:	7809      	ldrb	r1, [r1, #0]
 8009ef4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009ef8:	2202      	movs	r2, #2
 8009efa:	f7f6 f969 	bl	80001d0 <memchr>
 8009efe:	b328      	cbz	r0, 8009f4c <_scanf_i+0xb8>
 8009f00:	f1bb 0f01 	cmp.w	fp, #1
 8009f04:	d159      	bne.n	8009fba <_scanf_i+0x126>
 8009f06:	6862      	ldr	r2, [r4, #4]
 8009f08:	b92a      	cbnz	r2, 8009f16 <_scanf_i+0x82>
 8009f0a:	6822      	ldr	r2, [r4, #0]
 8009f0c:	2108      	movs	r1, #8
 8009f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f12:	6061      	str	r1, [r4, #4]
 8009f14:	6022      	str	r2, [r4, #0]
 8009f16:	6822      	ldr	r2, [r4, #0]
 8009f18:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009f1c:	6022      	str	r2, [r4, #0]
 8009f1e:	68a2      	ldr	r2, [r4, #8]
 8009f20:	1e51      	subs	r1, r2, #1
 8009f22:	60a1      	str	r1, [r4, #8]
 8009f24:	b192      	cbz	r2, 8009f4c <_scanf_i+0xb8>
 8009f26:	6832      	ldr	r2, [r6, #0]
 8009f28:	1c51      	adds	r1, r2, #1
 8009f2a:	6031      	str	r1, [r6, #0]
 8009f2c:	7812      	ldrb	r2, [r2, #0]
 8009f2e:	f805 2b01 	strb.w	r2, [r5], #1
 8009f32:	6872      	ldr	r2, [r6, #4]
 8009f34:	3a01      	subs	r2, #1
 8009f36:	2a00      	cmp	r2, #0
 8009f38:	6072      	str	r2, [r6, #4]
 8009f3a:	dc07      	bgt.n	8009f4c <_scanf_i+0xb8>
 8009f3c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009f40:	4631      	mov	r1, r6
 8009f42:	4650      	mov	r0, sl
 8009f44:	4790      	blx	r2
 8009f46:	2800      	cmp	r0, #0
 8009f48:	f040 8085 	bne.w	800a056 <_scanf_i+0x1c2>
 8009f4c:	f10b 0b01 	add.w	fp, fp, #1
 8009f50:	f1bb 0f03 	cmp.w	fp, #3
 8009f54:	d1cb      	bne.n	8009eee <_scanf_i+0x5a>
 8009f56:	6863      	ldr	r3, [r4, #4]
 8009f58:	b90b      	cbnz	r3, 8009f5e <_scanf_i+0xca>
 8009f5a:	230a      	movs	r3, #10
 8009f5c:	6063      	str	r3, [r4, #4]
 8009f5e:	6863      	ldr	r3, [r4, #4]
 8009f60:	4945      	ldr	r1, [pc, #276]	@ (800a078 <_scanf_i+0x1e4>)
 8009f62:	6960      	ldr	r0, [r4, #20]
 8009f64:	1ac9      	subs	r1, r1, r3
 8009f66:	f000 f997 	bl	800a298 <__sccl>
 8009f6a:	f04f 0b00 	mov.w	fp, #0
 8009f6e:	68a3      	ldr	r3, [r4, #8]
 8009f70:	6822      	ldr	r2, [r4, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d03d      	beq.n	8009ff2 <_scanf_i+0x15e>
 8009f76:	6831      	ldr	r1, [r6, #0]
 8009f78:	6960      	ldr	r0, [r4, #20]
 8009f7a:	f891 c000 	ldrb.w	ip, [r1]
 8009f7e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009f82:	2800      	cmp	r0, #0
 8009f84:	d035      	beq.n	8009ff2 <_scanf_i+0x15e>
 8009f86:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009f8a:	d124      	bne.n	8009fd6 <_scanf_i+0x142>
 8009f8c:	0510      	lsls	r0, r2, #20
 8009f8e:	d522      	bpl.n	8009fd6 <_scanf_i+0x142>
 8009f90:	f10b 0b01 	add.w	fp, fp, #1
 8009f94:	f1b9 0f00 	cmp.w	r9, #0
 8009f98:	d003      	beq.n	8009fa2 <_scanf_i+0x10e>
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	f109 39ff 	add.w	r9, r9, #4294967295
 8009fa0:	60a3      	str	r3, [r4, #8]
 8009fa2:	6873      	ldr	r3, [r6, #4]
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	6073      	str	r3, [r6, #4]
 8009faa:	dd1b      	ble.n	8009fe4 <_scanf_i+0x150>
 8009fac:	6833      	ldr	r3, [r6, #0]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	6033      	str	r3, [r6, #0]
 8009fb2:	68a3      	ldr	r3, [r4, #8]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	60a3      	str	r3, [r4, #8]
 8009fb8:	e7d9      	b.n	8009f6e <_scanf_i+0xda>
 8009fba:	f1bb 0f02 	cmp.w	fp, #2
 8009fbe:	d1ae      	bne.n	8009f1e <_scanf_i+0x8a>
 8009fc0:	6822      	ldr	r2, [r4, #0]
 8009fc2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8009fc6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009fca:	d1bf      	bne.n	8009f4c <_scanf_i+0xb8>
 8009fcc:	2110      	movs	r1, #16
 8009fce:	6061      	str	r1, [r4, #4]
 8009fd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009fd4:	e7a2      	b.n	8009f1c <_scanf_i+0x88>
 8009fd6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009fda:	6022      	str	r2, [r4, #0]
 8009fdc:	780b      	ldrb	r3, [r1, #0]
 8009fde:	f805 3b01 	strb.w	r3, [r5], #1
 8009fe2:	e7de      	b.n	8009fa2 <_scanf_i+0x10e>
 8009fe4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009fe8:	4631      	mov	r1, r6
 8009fea:	4650      	mov	r0, sl
 8009fec:	4798      	blx	r3
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d0df      	beq.n	8009fb2 <_scanf_i+0x11e>
 8009ff2:	6823      	ldr	r3, [r4, #0]
 8009ff4:	05d9      	lsls	r1, r3, #23
 8009ff6:	d50d      	bpl.n	800a014 <_scanf_i+0x180>
 8009ff8:	42bd      	cmp	r5, r7
 8009ffa:	d909      	bls.n	800a010 <_scanf_i+0x17c>
 8009ffc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a000:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a004:	4632      	mov	r2, r6
 800a006:	4650      	mov	r0, sl
 800a008:	4798      	blx	r3
 800a00a:	f105 39ff 	add.w	r9, r5, #4294967295
 800a00e:	464d      	mov	r5, r9
 800a010:	42bd      	cmp	r5, r7
 800a012:	d028      	beq.n	800a066 <_scanf_i+0x1d2>
 800a014:	6822      	ldr	r2, [r4, #0]
 800a016:	f012 0210 	ands.w	r2, r2, #16
 800a01a:	d113      	bne.n	800a044 <_scanf_i+0x1b0>
 800a01c:	702a      	strb	r2, [r5, #0]
 800a01e:	6863      	ldr	r3, [r4, #4]
 800a020:	9e01      	ldr	r6, [sp, #4]
 800a022:	4639      	mov	r1, r7
 800a024:	4650      	mov	r0, sl
 800a026:	47b0      	blx	r6
 800a028:	f8d8 3000 	ldr.w	r3, [r8]
 800a02c:	6821      	ldr	r1, [r4, #0]
 800a02e:	1d1a      	adds	r2, r3, #4
 800a030:	f8c8 2000 	str.w	r2, [r8]
 800a034:	f011 0f20 	tst.w	r1, #32
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	d00f      	beq.n	800a05c <_scanf_i+0x1c8>
 800a03c:	6018      	str	r0, [r3, #0]
 800a03e:	68e3      	ldr	r3, [r4, #12]
 800a040:	3301      	adds	r3, #1
 800a042:	60e3      	str	r3, [r4, #12]
 800a044:	6923      	ldr	r3, [r4, #16]
 800a046:	1bed      	subs	r5, r5, r7
 800a048:	445d      	add	r5, fp
 800a04a:	442b      	add	r3, r5
 800a04c:	6123      	str	r3, [r4, #16]
 800a04e:	2000      	movs	r0, #0
 800a050:	b007      	add	sp, #28
 800a052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a056:	f04f 0b00 	mov.w	fp, #0
 800a05a:	e7ca      	b.n	8009ff2 <_scanf_i+0x15e>
 800a05c:	07ca      	lsls	r2, r1, #31
 800a05e:	bf4c      	ite	mi
 800a060:	8018      	strhmi	r0, [r3, #0]
 800a062:	6018      	strpl	r0, [r3, #0]
 800a064:	e7eb      	b.n	800a03e <_scanf_i+0x1aa>
 800a066:	2001      	movs	r0, #1
 800a068:	e7f2      	b.n	800a050 <_scanf_i+0x1bc>
 800a06a:	bf00      	nop
 800a06c:	0800af1c 	.word	0x0800af1c
 800a070:	08009511 	.word	0x08009511
 800a074:	0800ac7d 	.word	0x0800ac7d
 800a078:	0800b2e2 	.word	0x0800b2e2

0800a07c <__sflush_r>:
 800a07c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a084:	0716      	lsls	r6, r2, #28
 800a086:	4605      	mov	r5, r0
 800a088:	460c      	mov	r4, r1
 800a08a:	d454      	bmi.n	800a136 <__sflush_r+0xba>
 800a08c:	684b      	ldr	r3, [r1, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	dc02      	bgt.n	800a098 <__sflush_r+0x1c>
 800a092:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a094:	2b00      	cmp	r3, #0
 800a096:	dd48      	ble.n	800a12a <__sflush_r+0xae>
 800a098:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a09a:	2e00      	cmp	r6, #0
 800a09c:	d045      	beq.n	800a12a <__sflush_r+0xae>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a0a4:	682f      	ldr	r7, [r5, #0]
 800a0a6:	6a21      	ldr	r1, [r4, #32]
 800a0a8:	602b      	str	r3, [r5, #0]
 800a0aa:	d030      	beq.n	800a10e <__sflush_r+0x92>
 800a0ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a0ae:	89a3      	ldrh	r3, [r4, #12]
 800a0b0:	0759      	lsls	r1, r3, #29
 800a0b2:	d505      	bpl.n	800a0c0 <__sflush_r+0x44>
 800a0b4:	6863      	ldr	r3, [r4, #4]
 800a0b6:	1ad2      	subs	r2, r2, r3
 800a0b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a0ba:	b10b      	cbz	r3, 800a0c0 <__sflush_r+0x44>
 800a0bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0be:	1ad2      	subs	r2, r2, r3
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0c4:	6a21      	ldr	r1, [r4, #32]
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	47b0      	blx	r6
 800a0ca:	1c43      	adds	r3, r0, #1
 800a0cc:	89a3      	ldrh	r3, [r4, #12]
 800a0ce:	d106      	bne.n	800a0de <__sflush_r+0x62>
 800a0d0:	6829      	ldr	r1, [r5, #0]
 800a0d2:	291d      	cmp	r1, #29
 800a0d4:	d82b      	bhi.n	800a12e <__sflush_r+0xb2>
 800a0d6:	4a2a      	ldr	r2, [pc, #168]	@ (800a180 <__sflush_r+0x104>)
 800a0d8:	410a      	asrs	r2, r1
 800a0da:	07d6      	lsls	r6, r2, #31
 800a0dc:	d427      	bmi.n	800a12e <__sflush_r+0xb2>
 800a0de:	2200      	movs	r2, #0
 800a0e0:	6062      	str	r2, [r4, #4]
 800a0e2:	04d9      	lsls	r1, r3, #19
 800a0e4:	6922      	ldr	r2, [r4, #16]
 800a0e6:	6022      	str	r2, [r4, #0]
 800a0e8:	d504      	bpl.n	800a0f4 <__sflush_r+0x78>
 800a0ea:	1c42      	adds	r2, r0, #1
 800a0ec:	d101      	bne.n	800a0f2 <__sflush_r+0x76>
 800a0ee:	682b      	ldr	r3, [r5, #0]
 800a0f0:	b903      	cbnz	r3, 800a0f4 <__sflush_r+0x78>
 800a0f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a0f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0f6:	602f      	str	r7, [r5, #0]
 800a0f8:	b1b9      	cbz	r1, 800a12a <__sflush_r+0xae>
 800a0fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0fe:	4299      	cmp	r1, r3
 800a100:	d002      	beq.n	800a108 <__sflush_r+0x8c>
 800a102:	4628      	mov	r0, r5
 800a104:	f7fd fdd0 	bl	8007ca8 <_free_r>
 800a108:	2300      	movs	r3, #0
 800a10a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a10c:	e00d      	b.n	800a12a <__sflush_r+0xae>
 800a10e:	2301      	movs	r3, #1
 800a110:	4628      	mov	r0, r5
 800a112:	47b0      	blx	r6
 800a114:	4602      	mov	r2, r0
 800a116:	1c50      	adds	r0, r2, #1
 800a118:	d1c9      	bne.n	800a0ae <__sflush_r+0x32>
 800a11a:	682b      	ldr	r3, [r5, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d0c6      	beq.n	800a0ae <__sflush_r+0x32>
 800a120:	2b1d      	cmp	r3, #29
 800a122:	d001      	beq.n	800a128 <__sflush_r+0xac>
 800a124:	2b16      	cmp	r3, #22
 800a126:	d11e      	bne.n	800a166 <__sflush_r+0xea>
 800a128:	602f      	str	r7, [r5, #0]
 800a12a:	2000      	movs	r0, #0
 800a12c:	e022      	b.n	800a174 <__sflush_r+0xf8>
 800a12e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a132:	b21b      	sxth	r3, r3
 800a134:	e01b      	b.n	800a16e <__sflush_r+0xf2>
 800a136:	690f      	ldr	r7, [r1, #16]
 800a138:	2f00      	cmp	r7, #0
 800a13a:	d0f6      	beq.n	800a12a <__sflush_r+0xae>
 800a13c:	0793      	lsls	r3, r2, #30
 800a13e:	680e      	ldr	r6, [r1, #0]
 800a140:	bf08      	it	eq
 800a142:	694b      	ldreq	r3, [r1, #20]
 800a144:	600f      	str	r7, [r1, #0]
 800a146:	bf18      	it	ne
 800a148:	2300      	movne	r3, #0
 800a14a:	eba6 0807 	sub.w	r8, r6, r7
 800a14e:	608b      	str	r3, [r1, #8]
 800a150:	f1b8 0f00 	cmp.w	r8, #0
 800a154:	dde9      	ble.n	800a12a <__sflush_r+0xae>
 800a156:	6a21      	ldr	r1, [r4, #32]
 800a158:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a15a:	4643      	mov	r3, r8
 800a15c:	463a      	mov	r2, r7
 800a15e:	4628      	mov	r0, r5
 800a160:	47b0      	blx	r6
 800a162:	2800      	cmp	r0, #0
 800a164:	dc08      	bgt.n	800a178 <__sflush_r+0xfc>
 800a166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a16a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a16e:	81a3      	strh	r3, [r4, #12]
 800a170:	f04f 30ff 	mov.w	r0, #4294967295
 800a174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a178:	4407      	add	r7, r0
 800a17a:	eba8 0800 	sub.w	r8, r8, r0
 800a17e:	e7e7      	b.n	800a150 <__sflush_r+0xd4>
 800a180:	dfbffffe 	.word	0xdfbffffe

0800a184 <_fflush_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	690b      	ldr	r3, [r1, #16]
 800a188:	4605      	mov	r5, r0
 800a18a:	460c      	mov	r4, r1
 800a18c:	b913      	cbnz	r3, 800a194 <_fflush_r+0x10>
 800a18e:	2500      	movs	r5, #0
 800a190:	4628      	mov	r0, r5
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	b118      	cbz	r0, 800a19e <_fflush_r+0x1a>
 800a196:	6a03      	ldr	r3, [r0, #32]
 800a198:	b90b      	cbnz	r3, 800a19e <_fflush_r+0x1a>
 800a19a:	f7fc fcd7 	bl	8006b4c <__sinit>
 800a19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d0f3      	beq.n	800a18e <_fflush_r+0xa>
 800a1a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a1a8:	07d0      	lsls	r0, r2, #31
 800a1aa:	d404      	bmi.n	800a1b6 <_fflush_r+0x32>
 800a1ac:	0599      	lsls	r1, r3, #22
 800a1ae:	d402      	bmi.n	800a1b6 <_fflush_r+0x32>
 800a1b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1b2:	f7fc ff24 	bl	8006ffe <__retarget_lock_acquire_recursive>
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	4621      	mov	r1, r4
 800a1ba:	f7ff ff5f 	bl	800a07c <__sflush_r>
 800a1be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1c0:	07da      	lsls	r2, r3, #31
 800a1c2:	4605      	mov	r5, r0
 800a1c4:	d4e4      	bmi.n	800a190 <_fflush_r+0xc>
 800a1c6:	89a3      	ldrh	r3, [r4, #12]
 800a1c8:	059b      	lsls	r3, r3, #22
 800a1ca:	d4e1      	bmi.n	800a190 <_fflush_r+0xc>
 800a1cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1ce:	f7fc ff17 	bl	8007000 <__retarget_lock_release_recursive>
 800a1d2:	e7dd      	b.n	800a190 <_fflush_r+0xc>

0800a1d4 <__swhatbuf_r>:
 800a1d4:	b570      	push	{r4, r5, r6, lr}
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1dc:	2900      	cmp	r1, #0
 800a1de:	b096      	sub	sp, #88	@ 0x58
 800a1e0:	4615      	mov	r5, r2
 800a1e2:	461e      	mov	r6, r3
 800a1e4:	da0d      	bge.n	800a202 <__swhatbuf_r+0x2e>
 800a1e6:	89a3      	ldrh	r3, [r4, #12]
 800a1e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1ec:	f04f 0100 	mov.w	r1, #0
 800a1f0:	bf14      	ite	ne
 800a1f2:	2340      	movne	r3, #64	@ 0x40
 800a1f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	6031      	str	r1, [r6, #0]
 800a1fc:	602b      	str	r3, [r5, #0]
 800a1fe:	b016      	add	sp, #88	@ 0x58
 800a200:	bd70      	pop	{r4, r5, r6, pc}
 800a202:	466a      	mov	r2, sp
 800a204:	f000 f8d6 	bl	800a3b4 <_fstat_r>
 800a208:	2800      	cmp	r0, #0
 800a20a:	dbec      	blt.n	800a1e6 <__swhatbuf_r+0x12>
 800a20c:	9901      	ldr	r1, [sp, #4]
 800a20e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a212:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a216:	4259      	negs	r1, r3
 800a218:	4159      	adcs	r1, r3
 800a21a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a21e:	e7eb      	b.n	800a1f8 <__swhatbuf_r+0x24>

0800a220 <__smakebuf_r>:
 800a220:	898b      	ldrh	r3, [r1, #12]
 800a222:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a224:	079d      	lsls	r5, r3, #30
 800a226:	4606      	mov	r6, r0
 800a228:	460c      	mov	r4, r1
 800a22a:	d507      	bpl.n	800a23c <__smakebuf_r+0x1c>
 800a22c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a230:	6023      	str	r3, [r4, #0]
 800a232:	6123      	str	r3, [r4, #16]
 800a234:	2301      	movs	r3, #1
 800a236:	6163      	str	r3, [r4, #20]
 800a238:	b003      	add	sp, #12
 800a23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a23c:	ab01      	add	r3, sp, #4
 800a23e:	466a      	mov	r2, sp
 800a240:	f7ff ffc8 	bl	800a1d4 <__swhatbuf_r>
 800a244:	9f00      	ldr	r7, [sp, #0]
 800a246:	4605      	mov	r5, r0
 800a248:	4639      	mov	r1, r7
 800a24a:	4630      	mov	r0, r6
 800a24c:	f7fd fda0 	bl	8007d90 <_malloc_r>
 800a250:	b948      	cbnz	r0, 800a266 <__smakebuf_r+0x46>
 800a252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a256:	059a      	lsls	r2, r3, #22
 800a258:	d4ee      	bmi.n	800a238 <__smakebuf_r+0x18>
 800a25a:	f023 0303 	bic.w	r3, r3, #3
 800a25e:	f043 0302 	orr.w	r3, r3, #2
 800a262:	81a3      	strh	r3, [r4, #12]
 800a264:	e7e2      	b.n	800a22c <__smakebuf_r+0xc>
 800a266:	89a3      	ldrh	r3, [r4, #12]
 800a268:	6020      	str	r0, [r4, #0]
 800a26a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a26e:	81a3      	strh	r3, [r4, #12]
 800a270:	9b01      	ldr	r3, [sp, #4]
 800a272:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a276:	b15b      	cbz	r3, 800a290 <__smakebuf_r+0x70>
 800a278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a27c:	4630      	mov	r0, r6
 800a27e:	f000 f8ab 	bl	800a3d8 <_isatty_r>
 800a282:	b128      	cbz	r0, 800a290 <__smakebuf_r+0x70>
 800a284:	89a3      	ldrh	r3, [r4, #12]
 800a286:	f023 0303 	bic.w	r3, r3, #3
 800a28a:	f043 0301 	orr.w	r3, r3, #1
 800a28e:	81a3      	strh	r3, [r4, #12]
 800a290:	89a3      	ldrh	r3, [r4, #12]
 800a292:	431d      	orrs	r5, r3
 800a294:	81a5      	strh	r5, [r4, #12]
 800a296:	e7cf      	b.n	800a238 <__smakebuf_r+0x18>

0800a298 <__sccl>:
 800a298:	b570      	push	{r4, r5, r6, lr}
 800a29a:	780b      	ldrb	r3, [r1, #0]
 800a29c:	4604      	mov	r4, r0
 800a29e:	2b5e      	cmp	r3, #94	@ 0x5e
 800a2a0:	bf0b      	itete	eq
 800a2a2:	784b      	ldrbeq	r3, [r1, #1]
 800a2a4:	1c4a      	addne	r2, r1, #1
 800a2a6:	1c8a      	addeq	r2, r1, #2
 800a2a8:	2100      	movne	r1, #0
 800a2aa:	bf08      	it	eq
 800a2ac:	2101      	moveq	r1, #1
 800a2ae:	3801      	subs	r0, #1
 800a2b0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a2b4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a2b8:	42a8      	cmp	r0, r5
 800a2ba:	d1fb      	bne.n	800a2b4 <__sccl+0x1c>
 800a2bc:	b90b      	cbnz	r3, 800a2c2 <__sccl+0x2a>
 800a2be:	1e50      	subs	r0, r2, #1
 800a2c0:	bd70      	pop	{r4, r5, r6, pc}
 800a2c2:	f081 0101 	eor.w	r1, r1, #1
 800a2c6:	54e1      	strb	r1, [r4, r3]
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a2d0:	2d2d      	cmp	r5, #45	@ 0x2d
 800a2d2:	d005      	beq.n	800a2e0 <__sccl+0x48>
 800a2d4:	2d5d      	cmp	r5, #93	@ 0x5d
 800a2d6:	d016      	beq.n	800a306 <__sccl+0x6e>
 800a2d8:	2d00      	cmp	r5, #0
 800a2da:	d0f1      	beq.n	800a2c0 <__sccl+0x28>
 800a2dc:	462b      	mov	r3, r5
 800a2de:	e7f2      	b.n	800a2c6 <__sccl+0x2e>
 800a2e0:	7846      	ldrb	r6, [r0, #1]
 800a2e2:	2e5d      	cmp	r6, #93	@ 0x5d
 800a2e4:	d0fa      	beq.n	800a2dc <__sccl+0x44>
 800a2e6:	42b3      	cmp	r3, r6
 800a2e8:	dcf8      	bgt.n	800a2dc <__sccl+0x44>
 800a2ea:	3002      	adds	r0, #2
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	3201      	adds	r2, #1
 800a2f0:	4296      	cmp	r6, r2
 800a2f2:	54a1      	strb	r1, [r4, r2]
 800a2f4:	dcfb      	bgt.n	800a2ee <__sccl+0x56>
 800a2f6:	1af2      	subs	r2, r6, r3
 800a2f8:	3a01      	subs	r2, #1
 800a2fa:	1c5d      	adds	r5, r3, #1
 800a2fc:	42b3      	cmp	r3, r6
 800a2fe:	bfa8      	it	ge
 800a300:	2200      	movge	r2, #0
 800a302:	18ab      	adds	r3, r5, r2
 800a304:	e7e1      	b.n	800a2ca <__sccl+0x32>
 800a306:	4610      	mov	r0, r2
 800a308:	e7da      	b.n	800a2c0 <__sccl+0x28>

0800a30a <__submore>:
 800a30a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a30e:	460c      	mov	r4, r1
 800a310:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a312:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a316:	4299      	cmp	r1, r3
 800a318:	d11d      	bne.n	800a356 <__submore+0x4c>
 800a31a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a31e:	f7fd fd37 	bl	8007d90 <_malloc_r>
 800a322:	b918      	cbnz	r0, 800a32c <__submore+0x22>
 800a324:	f04f 30ff 	mov.w	r0, #4294967295
 800a328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a32c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a330:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a332:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a336:	6360      	str	r0, [r4, #52]	@ 0x34
 800a338:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a33c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a340:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800a344:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a348:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800a34c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a350:	6020      	str	r0, [r4, #0]
 800a352:	2000      	movs	r0, #0
 800a354:	e7e8      	b.n	800a328 <__submore+0x1e>
 800a356:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a358:	0077      	lsls	r7, r6, #1
 800a35a:	463a      	mov	r2, r7
 800a35c:	f000 fbf1 	bl	800ab42 <_realloc_r>
 800a360:	4605      	mov	r5, r0
 800a362:	2800      	cmp	r0, #0
 800a364:	d0de      	beq.n	800a324 <__submore+0x1a>
 800a366:	eb00 0806 	add.w	r8, r0, r6
 800a36a:	4601      	mov	r1, r0
 800a36c:	4632      	mov	r2, r6
 800a36e:	4640      	mov	r0, r8
 800a370:	f000 f852 	bl	800a418 <memcpy>
 800a374:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a378:	f8c4 8000 	str.w	r8, [r4]
 800a37c:	e7e9      	b.n	800a352 <__submore+0x48>

0800a37e <memmove>:
 800a37e:	4288      	cmp	r0, r1
 800a380:	b510      	push	{r4, lr}
 800a382:	eb01 0402 	add.w	r4, r1, r2
 800a386:	d902      	bls.n	800a38e <memmove+0x10>
 800a388:	4284      	cmp	r4, r0
 800a38a:	4623      	mov	r3, r4
 800a38c:	d807      	bhi.n	800a39e <memmove+0x20>
 800a38e:	1e43      	subs	r3, r0, #1
 800a390:	42a1      	cmp	r1, r4
 800a392:	d008      	beq.n	800a3a6 <memmove+0x28>
 800a394:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a398:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a39c:	e7f8      	b.n	800a390 <memmove+0x12>
 800a39e:	4402      	add	r2, r0
 800a3a0:	4601      	mov	r1, r0
 800a3a2:	428a      	cmp	r2, r1
 800a3a4:	d100      	bne.n	800a3a8 <memmove+0x2a>
 800a3a6:	bd10      	pop	{r4, pc}
 800a3a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3b0:	e7f7      	b.n	800a3a2 <memmove+0x24>
	...

0800a3b4 <_fstat_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	4d07      	ldr	r5, [pc, #28]	@ (800a3d4 <_fstat_r+0x20>)
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	4608      	mov	r0, r1
 800a3be:	4611      	mov	r1, r2
 800a3c0:	602b      	str	r3, [r5, #0]
 800a3c2:	f7f7 ff0f 	bl	80021e4 <_fstat>
 800a3c6:	1c43      	adds	r3, r0, #1
 800a3c8:	d102      	bne.n	800a3d0 <_fstat_r+0x1c>
 800a3ca:	682b      	ldr	r3, [r5, #0]
 800a3cc:	b103      	cbz	r3, 800a3d0 <_fstat_r+0x1c>
 800a3ce:	6023      	str	r3, [r4, #0]
 800a3d0:	bd38      	pop	{r3, r4, r5, pc}
 800a3d2:	bf00      	nop
 800a3d4:	200085fc 	.word	0x200085fc

0800a3d8 <_isatty_r>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	4d06      	ldr	r5, [pc, #24]	@ (800a3f4 <_isatty_r+0x1c>)
 800a3dc:	2300      	movs	r3, #0
 800a3de:	4604      	mov	r4, r0
 800a3e0:	4608      	mov	r0, r1
 800a3e2:	602b      	str	r3, [r5, #0]
 800a3e4:	f7f7 ff0e 	bl	8002204 <_isatty>
 800a3e8:	1c43      	adds	r3, r0, #1
 800a3ea:	d102      	bne.n	800a3f2 <_isatty_r+0x1a>
 800a3ec:	682b      	ldr	r3, [r5, #0]
 800a3ee:	b103      	cbz	r3, 800a3f2 <_isatty_r+0x1a>
 800a3f0:	6023      	str	r3, [r4, #0]
 800a3f2:	bd38      	pop	{r3, r4, r5, pc}
 800a3f4:	200085fc 	.word	0x200085fc

0800a3f8 <_sbrk_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	4d06      	ldr	r5, [pc, #24]	@ (800a414 <_sbrk_r+0x1c>)
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	4604      	mov	r4, r0
 800a400:	4608      	mov	r0, r1
 800a402:	602b      	str	r3, [r5, #0]
 800a404:	f7f7 ff16 	bl	8002234 <_sbrk>
 800a408:	1c43      	adds	r3, r0, #1
 800a40a:	d102      	bne.n	800a412 <_sbrk_r+0x1a>
 800a40c:	682b      	ldr	r3, [r5, #0]
 800a40e:	b103      	cbz	r3, 800a412 <_sbrk_r+0x1a>
 800a410:	6023      	str	r3, [r4, #0]
 800a412:	bd38      	pop	{r3, r4, r5, pc}
 800a414:	200085fc 	.word	0x200085fc

0800a418 <memcpy>:
 800a418:	440a      	add	r2, r1
 800a41a:	4291      	cmp	r1, r2
 800a41c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a420:	d100      	bne.n	800a424 <memcpy+0xc>
 800a422:	4770      	bx	lr
 800a424:	b510      	push	{r4, lr}
 800a426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a42a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a42e:	4291      	cmp	r1, r2
 800a430:	d1f9      	bne.n	800a426 <memcpy+0xe>
 800a432:	bd10      	pop	{r4, pc}
 800a434:	0000      	movs	r0, r0
	...

0800a438 <nan>:
 800a438:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a440 <nan+0x8>
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	00000000 	.word	0x00000000
 800a444:	7ff80000 	.word	0x7ff80000

0800a448 <__assert_func>:
 800a448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a44a:	4614      	mov	r4, r2
 800a44c:	461a      	mov	r2, r3
 800a44e:	4b09      	ldr	r3, [pc, #36]	@ (800a474 <__assert_func+0x2c>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4605      	mov	r5, r0
 800a454:	68d8      	ldr	r0, [r3, #12]
 800a456:	b954      	cbnz	r4, 800a46e <__assert_func+0x26>
 800a458:	4b07      	ldr	r3, [pc, #28]	@ (800a478 <__assert_func+0x30>)
 800a45a:	461c      	mov	r4, r3
 800a45c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a460:	9100      	str	r1, [sp, #0]
 800a462:	462b      	mov	r3, r5
 800a464:	4905      	ldr	r1, [pc, #20]	@ (800a47c <__assert_func+0x34>)
 800a466:	f000 fc19 	bl	800ac9c <fiprintf>
 800a46a:	f000 fc29 	bl	800acc0 <abort>
 800a46e:	4b04      	ldr	r3, [pc, #16]	@ (800a480 <__assert_func+0x38>)
 800a470:	e7f4      	b.n	800a45c <__assert_func+0x14>
 800a472:	bf00      	nop
 800a474:	20000090 	.word	0x20000090
 800a478:	0800b330 	.word	0x0800b330
 800a47c:	0800b302 	.word	0x0800b302
 800a480:	0800b2f5 	.word	0x0800b2f5

0800a484 <_calloc_r>:
 800a484:	b570      	push	{r4, r5, r6, lr}
 800a486:	fba1 5402 	umull	r5, r4, r1, r2
 800a48a:	b93c      	cbnz	r4, 800a49c <_calloc_r+0x18>
 800a48c:	4629      	mov	r1, r5
 800a48e:	f7fd fc7f 	bl	8007d90 <_malloc_r>
 800a492:	4606      	mov	r6, r0
 800a494:	b928      	cbnz	r0, 800a4a2 <_calloc_r+0x1e>
 800a496:	2600      	movs	r6, #0
 800a498:	4630      	mov	r0, r6
 800a49a:	bd70      	pop	{r4, r5, r6, pc}
 800a49c:	220c      	movs	r2, #12
 800a49e:	6002      	str	r2, [r0, #0]
 800a4a0:	e7f9      	b.n	800a496 <_calloc_r+0x12>
 800a4a2:	462a      	mov	r2, r5
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	f7fc fd1b 	bl	8006ee0 <memset>
 800a4aa:	e7f5      	b.n	800a498 <_calloc_r+0x14>

0800a4ac <rshift>:
 800a4ac:	6903      	ldr	r3, [r0, #16]
 800a4ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a4b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a4ba:	f100 0414 	add.w	r4, r0, #20
 800a4be:	dd45      	ble.n	800a54c <rshift+0xa0>
 800a4c0:	f011 011f 	ands.w	r1, r1, #31
 800a4c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a4c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a4cc:	d10c      	bne.n	800a4e8 <rshift+0x3c>
 800a4ce:	f100 0710 	add.w	r7, r0, #16
 800a4d2:	4629      	mov	r1, r5
 800a4d4:	42b1      	cmp	r1, r6
 800a4d6:	d334      	bcc.n	800a542 <rshift+0x96>
 800a4d8:	1a9b      	subs	r3, r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	1eea      	subs	r2, r5, #3
 800a4de:	4296      	cmp	r6, r2
 800a4e0:	bf38      	it	cc
 800a4e2:	2300      	movcc	r3, #0
 800a4e4:	4423      	add	r3, r4
 800a4e6:	e015      	b.n	800a514 <rshift+0x68>
 800a4e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a4ec:	f1c1 0820 	rsb	r8, r1, #32
 800a4f0:	40cf      	lsrs	r7, r1
 800a4f2:	f105 0e04 	add.w	lr, r5, #4
 800a4f6:	46a1      	mov	r9, r4
 800a4f8:	4576      	cmp	r6, lr
 800a4fa:	46f4      	mov	ip, lr
 800a4fc:	d815      	bhi.n	800a52a <rshift+0x7e>
 800a4fe:	1a9a      	subs	r2, r3, r2
 800a500:	0092      	lsls	r2, r2, #2
 800a502:	3a04      	subs	r2, #4
 800a504:	3501      	adds	r5, #1
 800a506:	42ae      	cmp	r6, r5
 800a508:	bf38      	it	cc
 800a50a:	2200      	movcc	r2, #0
 800a50c:	18a3      	adds	r3, r4, r2
 800a50e:	50a7      	str	r7, [r4, r2]
 800a510:	b107      	cbz	r7, 800a514 <rshift+0x68>
 800a512:	3304      	adds	r3, #4
 800a514:	1b1a      	subs	r2, r3, r4
 800a516:	42a3      	cmp	r3, r4
 800a518:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a51c:	bf08      	it	eq
 800a51e:	2300      	moveq	r3, #0
 800a520:	6102      	str	r2, [r0, #16]
 800a522:	bf08      	it	eq
 800a524:	6143      	streq	r3, [r0, #20]
 800a526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a52a:	f8dc c000 	ldr.w	ip, [ip]
 800a52e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a532:	ea4c 0707 	orr.w	r7, ip, r7
 800a536:	f849 7b04 	str.w	r7, [r9], #4
 800a53a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a53e:	40cf      	lsrs	r7, r1
 800a540:	e7da      	b.n	800a4f8 <rshift+0x4c>
 800a542:	f851 cb04 	ldr.w	ip, [r1], #4
 800a546:	f847 cf04 	str.w	ip, [r7, #4]!
 800a54a:	e7c3      	b.n	800a4d4 <rshift+0x28>
 800a54c:	4623      	mov	r3, r4
 800a54e:	e7e1      	b.n	800a514 <rshift+0x68>

0800a550 <__hexdig_fun>:
 800a550:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a554:	2b09      	cmp	r3, #9
 800a556:	d802      	bhi.n	800a55e <__hexdig_fun+0xe>
 800a558:	3820      	subs	r0, #32
 800a55a:	b2c0      	uxtb	r0, r0
 800a55c:	4770      	bx	lr
 800a55e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a562:	2b05      	cmp	r3, #5
 800a564:	d801      	bhi.n	800a56a <__hexdig_fun+0x1a>
 800a566:	3847      	subs	r0, #71	@ 0x47
 800a568:	e7f7      	b.n	800a55a <__hexdig_fun+0xa>
 800a56a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a56e:	2b05      	cmp	r3, #5
 800a570:	d801      	bhi.n	800a576 <__hexdig_fun+0x26>
 800a572:	3827      	subs	r0, #39	@ 0x27
 800a574:	e7f1      	b.n	800a55a <__hexdig_fun+0xa>
 800a576:	2000      	movs	r0, #0
 800a578:	4770      	bx	lr
	...

0800a57c <__gethex>:
 800a57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a580:	b085      	sub	sp, #20
 800a582:	468a      	mov	sl, r1
 800a584:	9302      	str	r3, [sp, #8]
 800a586:	680b      	ldr	r3, [r1, #0]
 800a588:	9001      	str	r0, [sp, #4]
 800a58a:	4690      	mov	r8, r2
 800a58c:	1c9c      	adds	r4, r3, #2
 800a58e:	46a1      	mov	r9, r4
 800a590:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a594:	2830      	cmp	r0, #48	@ 0x30
 800a596:	d0fa      	beq.n	800a58e <__gethex+0x12>
 800a598:	eba9 0303 	sub.w	r3, r9, r3
 800a59c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a5a0:	f7ff ffd6 	bl	800a550 <__hexdig_fun>
 800a5a4:	4605      	mov	r5, r0
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d168      	bne.n	800a67c <__gethex+0x100>
 800a5aa:	49a0      	ldr	r1, [pc, #640]	@ (800a82c <__gethex+0x2b0>)
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	4648      	mov	r0, r9
 800a5b0:	f7fc fc9e 	bl	8006ef0 <strncmp>
 800a5b4:	4607      	mov	r7, r0
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	d167      	bne.n	800a68a <__gethex+0x10e>
 800a5ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a5be:	4626      	mov	r6, r4
 800a5c0:	f7ff ffc6 	bl	800a550 <__hexdig_fun>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	d062      	beq.n	800a68e <__gethex+0x112>
 800a5c8:	4623      	mov	r3, r4
 800a5ca:	7818      	ldrb	r0, [r3, #0]
 800a5cc:	2830      	cmp	r0, #48	@ 0x30
 800a5ce:	4699      	mov	r9, r3
 800a5d0:	f103 0301 	add.w	r3, r3, #1
 800a5d4:	d0f9      	beq.n	800a5ca <__gethex+0x4e>
 800a5d6:	f7ff ffbb 	bl	800a550 <__hexdig_fun>
 800a5da:	fab0 f580 	clz	r5, r0
 800a5de:	096d      	lsrs	r5, r5, #5
 800a5e0:	f04f 0b01 	mov.w	fp, #1
 800a5e4:	464a      	mov	r2, r9
 800a5e6:	4616      	mov	r6, r2
 800a5e8:	3201      	adds	r2, #1
 800a5ea:	7830      	ldrb	r0, [r6, #0]
 800a5ec:	f7ff ffb0 	bl	800a550 <__hexdig_fun>
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	d1f8      	bne.n	800a5e6 <__gethex+0x6a>
 800a5f4:	498d      	ldr	r1, [pc, #564]	@ (800a82c <__gethex+0x2b0>)
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	f7fc fc79 	bl	8006ef0 <strncmp>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d13f      	bne.n	800a682 <__gethex+0x106>
 800a602:	b944      	cbnz	r4, 800a616 <__gethex+0x9a>
 800a604:	1c74      	adds	r4, r6, #1
 800a606:	4622      	mov	r2, r4
 800a608:	4616      	mov	r6, r2
 800a60a:	3201      	adds	r2, #1
 800a60c:	7830      	ldrb	r0, [r6, #0]
 800a60e:	f7ff ff9f 	bl	800a550 <__hexdig_fun>
 800a612:	2800      	cmp	r0, #0
 800a614:	d1f8      	bne.n	800a608 <__gethex+0x8c>
 800a616:	1ba4      	subs	r4, r4, r6
 800a618:	00a7      	lsls	r7, r4, #2
 800a61a:	7833      	ldrb	r3, [r6, #0]
 800a61c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a620:	2b50      	cmp	r3, #80	@ 0x50
 800a622:	d13e      	bne.n	800a6a2 <__gethex+0x126>
 800a624:	7873      	ldrb	r3, [r6, #1]
 800a626:	2b2b      	cmp	r3, #43	@ 0x2b
 800a628:	d033      	beq.n	800a692 <__gethex+0x116>
 800a62a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a62c:	d034      	beq.n	800a698 <__gethex+0x11c>
 800a62e:	1c71      	adds	r1, r6, #1
 800a630:	2400      	movs	r4, #0
 800a632:	7808      	ldrb	r0, [r1, #0]
 800a634:	f7ff ff8c 	bl	800a550 <__hexdig_fun>
 800a638:	1e43      	subs	r3, r0, #1
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	2b18      	cmp	r3, #24
 800a63e:	d830      	bhi.n	800a6a2 <__gethex+0x126>
 800a640:	f1a0 0210 	sub.w	r2, r0, #16
 800a644:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a648:	f7ff ff82 	bl	800a550 <__hexdig_fun>
 800a64c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a650:	fa5f fc8c 	uxtb.w	ip, ip
 800a654:	f1bc 0f18 	cmp.w	ip, #24
 800a658:	f04f 030a 	mov.w	r3, #10
 800a65c:	d91e      	bls.n	800a69c <__gethex+0x120>
 800a65e:	b104      	cbz	r4, 800a662 <__gethex+0xe6>
 800a660:	4252      	negs	r2, r2
 800a662:	4417      	add	r7, r2
 800a664:	f8ca 1000 	str.w	r1, [sl]
 800a668:	b1ed      	cbz	r5, 800a6a6 <__gethex+0x12a>
 800a66a:	f1bb 0f00 	cmp.w	fp, #0
 800a66e:	bf0c      	ite	eq
 800a670:	2506      	moveq	r5, #6
 800a672:	2500      	movne	r5, #0
 800a674:	4628      	mov	r0, r5
 800a676:	b005      	add	sp, #20
 800a678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a67c:	2500      	movs	r5, #0
 800a67e:	462c      	mov	r4, r5
 800a680:	e7b0      	b.n	800a5e4 <__gethex+0x68>
 800a682:	2c00      	cmp	r4, #0
 800a684:	d1c7      	bne.n	800a616 <__gethex+0x9a>
 800a686:	4627      	mov	r7, r4
 800a688:	e7c7      	b.n	800a61a <__gethex+0x9e>
 800a68a:	464e      	mov	r6, r9
 800a68c:	462f      	mov	r7, r5
 800a68e:	2501      	movs	r5, #1
 800a690:	e7c3      	b.n	800a61a <__gethex+0x9e>
 800a692:	2400      	movs	r4, #0
 800a694:	1cb1      	adds	r1, r6, #2
 800a696:	e7cc      	b.n	800a632 <__gethex+0xb6>
 800a698:	2401      	movs	r4, #1
 800a69a:	e7fb      	b.n	800a694 <__gethex+0x118>
 800a69c:	fb03 0002 	mla	r0, r3, r2, r0
 800a6a0:	e7ce      	b.n	800a640 <__gethex+0xc4>
 800a6a2:	4631      	mov	r1, r6
 800a6a4:	e7de      	b.n	800a664 <__gethex+0xe8>
 800a6a6:	eba6 0309 	sub.w	r3, r6, r9
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	2b07      	cmp	r3, #7
 800a6b0:	dc0a      	bgt.n	800a6c8 <__gethex+0x14c>
 800a6b2:	9801      	ldr	r0, [sp, #4]
 800a6b4:	f7fd fbf8 	bl	8007ea8 <_Balloc>
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	b940      	cbnz	r0, 800a6ce <__gethex+0x152>
 800a6bc:	4b5c      	ldr	r3, [pc, #368]	@ (800a830 <__gethex+0x2b4>)
 800a6be:	4602      	mov	r2, r0
 800a6c0:	21e4      	movs	r1, #228	@ 0xe4
 800a6c2:	485c      	ldr	r0, [pc, #368]	@ (800a834 <__gethex+0x2b8>)
 800a6c4:	f7ff fec0 	bl	800a448 <__assert_func>
 800a6c8:	3101      	adds	r1, #1
 800a6ca:	105b      	asrs	r3, r3, #1
 800a6cc:	e7ef      	b.n	800a6ae <__gethex+0x132>
 800a6ce:	f100 0a14 	add.w	sl, r0, #20
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	4655      	mov	r5, sl
 800a6d6:	469b      	mov	fp, r3
 800a6d8:	45b1      	cmp	r9, r6
 800a6da:	d337      	bcc.n	800a74c <__gethex+0x1d0>
 800a6dc:	f845 bb04 	str.w	fp, [r5], #4
 800a6e0:	eba5 050a 	sub.w	r5, r5, sl
 800a6e4:	10ad      	asrs	r5, r5, #2
 800a6e6:	6125      	str	r5, [r4, #16]
 800a6e8:	4658      	mov	r0, fp
 800a6ea:	f7fd fccf 	bl	800808c <__hi0bits>
 800a6ee:	016d      	lsls	r5, r5, #5
 800a6f0:	f8d8 6000 	ldr.w	r6, [r8]
 800a6f4:	1a2d      	subs	r5, r5, r0
 800a6f6:	42b5      	cmp	r5, r6
 800a6f8:	dd54      	ble.n	800a7a4 <__gethex+0x228>
 800a6fa:	1bad      	subs	r5, r5, r6
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	4620      	mov	r0, r4
 800a700:	f7fe f863 	bl	80087ca <__any_on>
 800a704:	4681      	mov	r9, r0
 800a706:	b178      	cbz	r0, 800a728 <__gethex+0x1ac>
 800a708:	1e6b      	subs	r3, r5, #1
 800a70a:	1159      	asrs	r1, r3, #5
 800a70c:	f003 021f 	and.w	r2, r3, #31
 800a710:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a714:	f04f 0901 	mov.w	r9, #1
 800a718:	fa09 f202 	lsl.w	r2, r9, r2
 800a71c:	420a      	tst	r2, r1
 800a71e:	d003      	beq.n	800a728 <__gethex+0x1ac>
 800a720:	454b      	cmp	r3, r9
 800a722:	dc36      	bgt.n	800a792 <__gethex+0x216>
 800a724:	f04f 0902 	mov.w	r9, #2
 800a728:	4629      	mov	r1, r5
 800a72a:	4620      	mov	r0, r4
 800a72c:	f7ff febe 	bl	800a4ac <rshift>
 800a730:	442f      	add	r7, r5
 800a732:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a736:	42bb      	cmp	r3, r7
 800a738:	da42      	bge.n	800a7c0 <__gethex+0x244>
 800a73a:	9801      	ldr	r0, [sp, #4]
 800a73c:	4621      	mov	r1, r4
 800a73e:	f7fd fbf3 	bl	8007f28 <_Bfree>
 800a742:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a744:	2300      	movs	r3, #0
 800a746:	6013      	str	r3, [r2, #0]
 800a748:	25a3      	movs	r5, #163	@ 0xa3
 800a74a:	e793      	b.n	800a674 <__gethex+0xf8>
 800a74c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a750:	2a2e      	cmp	r2, #46	@ 0x2e
 800a752:	d012      	beq.n	800a77a <__gethex+0x1fe>
 800a754:	2b20      	cmp	r3, #32
 800a756:	d104      	bne.n	800a762 <__gethex+0x1e6>
 800a758:	f845 bb04 	str.w	fp, [r5], #4
 800a75c:	f04f 0b00 	mov.w	fp, #0
 800a760:	465b      	mov	r3, fp
 800a762:	7830      	ldrb	r0, [r6, #0]
 800a764:	9303      	str	r3, [sp, #12]
 800a766:	f7ff fef3 	bl	800a550 <__hexdig_fun>
 800a76a:	9b03      	ldr	r3, [sp, #12]
 800a76c:	f000 000f 	and.w	r0, r0, #15
 800a770:	4098      	lsls	r0, r3
 800a772:	ea4b 0b00 	orr.w	fp, fp, r0
 800a776:	3304      	adds	r3, #4
 800a778:	e7ae      	b.n	800a6d8 <__gethex+0x15c>
 800a77a:	45b1      	cmp	r9, r6
 800a77c:	d8ea      	bhi.n	800a754 <__gethex+0x1d8>
 800a77e:	492b      	ldr	r1, [pc, #172]	@ (800a82c <__gethex+0x2b0>)
 800a780:	9303      	str	r3, [sp, #12]
 800a782:	2201      	movs	r2, #1
 800a784:	4630      	mov	r0, r6
 800a786:	f7fc fbb3 	bl	8006ef0 <strncmp>
 800a78a:	9b03      	ldr	r3, [sp, #12]
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d1e1      	bne.n	800a754 <__gethex+0x1d8>
 800a790:	e7a2      	b.n	800a6d8 <__gethex+0x15c>
 800a792:	1ea9      	subs	r1, r5, #2
 800a794:	4620      	mov	r0, r4
 800a796:	f7fe f818 	bl	80087ca <__any_on>
 800a79a:	2800      	cmp	r0, #0
 800a79c:	d0c2      	beq.n	800a724 <__gethex+0x1a8>
 800a79e:	f04f 0903 	mov.w	r9, #3
 800a7a2:	e7c1      	b.n	800a728 <__gethex+0x1ac>
 800a7a4:	da09      	bge.n	800a7ba <__gethex+0x23e>
 800a7a6:	1b75      	subs	r5, r6, r5
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	9801      	ldr	r0, [sp, #4]
 800a7ac:	462a      	mov	r2, r5
 800a7ae:	f7fd fdd3 	bl	8008358 <__lshift>
 800a7b2:	1b7f      	subs	r7, r7, r5
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	f100 0a14 	add.w	sl, r0, #20
 800a7ba:	f04f 0900 	mov.w	r9, #0
 800a7be:	e7b8      	b.n	800a732 <__gethex+0x1b6>
 800a7c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a7c4:	42bd      	cmp	r5, r7
 800a7c6:	dd6f      	ble.n	800a8a8 <__gethex+0x32c>
 800a7c8:	1bed      	subs	r5, r5, r7
 800a7ca:	42ae      	cmp	r6, r5
 800a7cc:	dc34      	bgt.n	800a838 <__gethex+0x2bc>
 800a7ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d022      	beq.n	800a81c <__gethex+0x2a0>
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	d024      	beq.n	800a824 <__gethex+0x2a8>
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d115      	bne.n	800a80a <__gethex+0x28e>
 800a7de:	42ae      	cmp	r6, r5
 800a7e0:	d113      	bne.n	800a80a <__gethex+0x28e>
 800a7e2:	2e01      	cmp	r6, #1
 800a7e4:	d10b      	bne.n	800a7fe <__gethex+0x282>
 800a7e6:	9a02      	ldr	r2, [sp, #8]
 800a7e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a7ec:	6013      	str	r3, [r2, #0]
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	6123      	str	r3, [r4, #16]
 800a7f2:	f8ca 3000 	str.w	r3, [sl]
 800a7f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7f8:	2562      	movs	r5, #98	@ 0x62
 800a7fa:	601c      	str	r4, [r3, #0]
 800a7fc:	e73a      	b.n	800a674 <__gethex+0xf8>
 800a7fe:	1e71      	subs	r1, r6, #1
 800a800:	4620      	mov	r0, r4
 800a802:	f7fd ffe2 	bl	80087ca <__any_on>
 800a806:	2800      	cmp	r0, #0
 800a808:	d1ed      	bne.n	800a7e6 <__gethex+0x26a>
 800a80a:	9801      	ldr	r0, [sp, #4]
 800a80c:	4621      	mov	r1, r4
 800a80e:	f7fd fb8b 	bl	8007f28 <_Bfree>
 800a812:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a814:	2300      	movs	r3, #0
 800a816:	6013      	str	r3, [r2, #0]
 800a818:	2550      	movs	r5, #80	@ 0x50
 800a81a:	e72b      	b.n	800a674 <__gethex+0xf8>
 800a81c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1f3      	bne.n	800a80a <__gethex+0x28e>
 800a822:	e7e0      	b.n	800a7e6 <__gethex+0x26a>
 800a824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1dd      	bne.n	800a7e6 <__gethex+0x26a>
 800a82a:	e7ee      	b.n	800a80a <__gethex+0x28e>
 800a82c:	0800b168 	.word	0x0800b168
 800a830:	0800affb 	.word	0x0800affb
 800a834:	0800b331 	.word	0x0800b331
 800a838:	1e6f      	subs	r7, r5, #1
 800a83a:	f1b9 0f00 	cmp.w	r9, #0
 800a83e:	d130      	bne.n	800a8a2 <__gethex+0x326>
 800a840:	b127      	cbz	r7, 800a84c <__gethex+0x2d0>
 800a842:	4639      	mov	r1, r7
 800a844:	4620      	mov	r0, r4
 800a846:	f7fd ffc0 	bl	80087ca <__any_on>
 800a84a:	4681      	mov	r9, r0
 800a84c:	117a      	asrs	r2, r7, #5
 800a84e:	2301      	movs	r3, #1
 800a850:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a854:	f007 071f 	and.w	r7, r7, #31
 800a858:	40bb      	lsls	r3, r7
 800a85a:	4213      	tst	r3, r2
 800a85c:	4629      	mov	r1, r5
 800a85e:	4620      	mov	r0, r4
 800a860:	bf18      	it	ne
 800a862:	f049 0902 	orrne.w	r9, r9, #2
 800a866:	f7ff fe21 	bl	800a4ac <rshift>
 800a86a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a86e:	1b76      	subs	r6, r6, r5
 800a870:	2502      	movs	r5, #2
 800a872:	f1b9 0f00 	cmp.w	r9, #0
 800a876:	d047      	beq.n	800a908 <__gethex+0x38c>
 800a878:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	d015      	beq.n	800a8ac <__gethex+0x330>
 800a880:	2b03      	cmp	r3, #3
 800a882:	d017      	beq.n	800a8b4 <__gethex+0x338>
 800a884:	2b01      	cmp	r3, #1
 800a886:	d109      	bne.n	800a89c <__gethex+0x320>
 800a888:	f019 0f02 	tst.w	r9, #2
 800a88c:	d006      	beq.n	800a89c <__gethex+0x320>
 800a88e:	f8da 3000 	ldr.w	r3, [sl]
 800a892:	ea49 0903 	orr.w	r9, r9, r3
 800a896:	f019 0f01 	tst.w	r9, #1
 800a89a:	d10e      	bne.n	800a8ba <__gethex+0x33e>
 800a89c:	f045 0510 	orr.w	r5, r5, #16
 800a8a0:	e032      	b.n	800a908 <__gethex+0x38c>
 800a8a2:	f04f 0901 	mov.w	r9, #1
 800a8a6:	e7d1      	b.n	800a84c <__gethex+0x2d0>
 800a8a8:	2501      	movs	r5, #1
 800a8aa:	e7e2      	b.n	800a872 <__gethex+0x2f6>
 800a8ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8ae:	f1c3 0301 	rsb	r3, r3, #1
 800a8b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d0f0      	beq.n	800a89c <__gethex+0x320>
 800a8ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a8be:	f104 0314 	add.w	r3, r4, #20
 800a8c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a8c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a8ca:	f04f 0c00 	mov.w	ip, #0
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a8d8:	d01b      	beq.n	800a912 <__gethex+0x396>
 800a8da:	3201      	adds	r2, #1
 800a8dc:	6002      	str	r2, [r0, #0]
 800a8de:	2d02      	cmp	r5, #2
 800a8e0:	f104 0314 	add.w	r3, r4, #20
 800a8e4:	d13c      	bne.n	800a960 <__gethex+0x3e4>
 800a8e6:	f8d8 2000 	ldr.w	r2, [r8]
 800a8ea:	3a01      	subs	r2, #1
 800a8ec:	42b2      	cmp	r2, r6
 800a8ee:	d109      	bne.n	800a904 <__gethex+0x388>
 800a8f0:	1171      	asrs	r1, r6, #5
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a8f8:	f006 061f 	and.w	r6, r6, #31
 800a8fc:	fa02 f606 	lsl.w	r6, r2, r6
 800a900:	421e      	tst	r6, r3
 800a902:	d13a      	bne.n	800a97a <__gethex+0x3fe>
 800a904:	f045 0520 	orr.w	r5, r5, #32
 800a908:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a90a:	601c      	str	r4, [r3, #0]
 800a90c:	9b02      	ldr	r3, [sp, #8]
 800a90e:	601f      	str	r7, [r3, #0]
 800a910:	e6b0      	b.n	800a674 <__gethex+0xf8>
 800a912:	4299      	cmp	r1, r3
 800a914:	f843 cc04 	str.w	ip, [r3, #-4]
 800a918:	d8d9      	bhi.n	800a8ce <__gethex+0x352>
 800a91a:	68a3      	ldr	r3, [r4, #8]
 800a91c:	459b      	cmp	fp, r3
 800a91e:	db17      	blt.n	800a950 <__gethex+0x3d4>
 800a920:	6861      	ldr	r1, [r4, #4]
 800a922:	9801      	ldr	r0, [sp, #4]
 800a924:	3101      	adds	r1, #1
 800a926:	f7fd fabf 	bl	8007ea8 <_Balloc>
 800a92a:	4681      	mov	r9, r0
 800a92c:	b918      	cbnz	r0, 800a936 <__gethex+0x3ba>
 800a92e:	4b1a      	ldr	r3, [pc, #104]	@ (800a998 <__gethex+0x41c>)
 800a930:	4602      	mov	r2, r0
 800a932:	2184      	movs	r1, #132	@ 0x84
 800a934:	e6c5      	b.n	800a6c2 <__gethex+0x146>
 800a936:	6922      	ldr	r2, [r4, #16]
 800a938:	3202      	adds	r2, #2
 800a93a:	f104 010c 	add.w	r1, r4, #12
 800a93e:	0092      	lsls	r2, r2, #2
 800a940:	300c      	adds	r0, #12
 800a942:	f7ff fd69 	bl	800a418 <memcpy>
 800a946:	4621      	mov	r1, r4
 800a948:	9801      	ldr	r0, [sp, #4]
 800a94a:	f7fd faed 	bl	8007f28 <_Bfree>
 800a94e:	464c      	mov	r4, r9
 800a950:	6923      	ldr	r3, [r4, #16]
 800a952:	1c5a      	adds	r2, r3, #1
 800a954:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a958:	6122      	str	r2, [r4, #16]
 800a95a:	2201      	movs	r2, #1
 800a95c:	615a      	str	r2, [r3, #20]
 800a95e:	e7be      	b.n	800a8de <__gethex+0x362>
 800a960:	6922      	ldr	r2, [r4, #16]
 800a962:	455a      	cmp	r2, fp
 800a964:	dd0b      	ble.n	800a97e <__gethex+0x402>
 800a966:	2101      	movs	r1, #1
 800a968:	4620      	mov	r0, r4
 800a96a:	f7ff fd9f 	bl	800a4ac <rshift>
 800a96e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a972:	3701      	adds	r7, #1
 800a974:	42bb      	cmp	r3, r7
 800a976:	f6ff aee0 	blt.w	800a73a <__gethex+0x1be>
 800a97a:	2501      	movs	r5, #1
 800a97c:	e7c2      	b.n	800a904 <__gethex+0x388>
 800a97e:	f016 061f 	ands.w	r6, r6, #31
 800a982:	d0fa      	beq.n	800a97a <__gethex+0x3fe>
 800a984:	4453      	add	r3, sl
 800a986:	f1c6 0620 	rsb	r6, r6, #32
 800a98a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a98e:	f7fd fb7d 	bl	800808c <__hi0bits>
 800a992:	42b0      	cmp	r0, r6
 800a994:	dbe7      	blt.n	800a966 <__gethex+0x3ea>
 800a996:	e7f0      	b.n	800a97a <__gethex+0x3fe>
 800a998:	0800affb 	.word	0x0800affb

0800a99c <L_shift>:
 800a99c:	f1c2 0208 	rsb	r2, r2, #8
 800a9a0:	0092      	lsls	r2, r2, #2
 800a9a2:	b570      	push	{r4, r5, r6, lr}
 800a9a4:	f1c2 0620 	rsb	r6, r2, #32
 800a9a8:	6843      	ldr	r3, [r0, #4]
 800a9aa:	6804      	ldr	r4, [r0, #0]
 800a9ac:	fa03 f506 	lsl.w	r5, r3, r6
 800a9b0:	432c      	orrs	r4, r5
 800a9b2:	40d3      	lsrs	r3, r2
 800a9b4:	6004      	str	r4, [r0, #0]
 800a9b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a9ba:	4288      	cmp	r0, r1
 800a9bc:	d3f4      	bcc.n	800a9a8 <L_shift+0xc>
 800a9be:	bd70      	pop	{r4, r5, r6, pc}

0800a9c0 <__match>:
 800a9c0:	b530      	push	{r4, r5, lr}
 800a9c2:	6803      	ldr	r3, [r0, #0]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9ca:	b914      	cbnz	r4, 800a9d2 <__match+0x12>
 800a9cc:	6003      	str	r3, [r0, #0]
 800a9ce:	2001      	movs	r0, #1
 800a9d0:	bd30      	pop	{r4, r5, pc}
 800a9d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a9da:	2d19      	cmp	r5, #25
 800a9dc:	bf98      	it	ls
 800a9de:	3220      	addls	r2, #32
 800a9e0:	42a2      	cmp	r2, r4
 800a9e2:	d0f0      	beq.n	800a9c6 <__match+0x6>
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	e7f3      	b.n	800a9d0 <__match+0x10>

0800a9e8 <__hexnan>:
 800a9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ec:	680b      	ldr	r3, [r1, #0]
 800a9ee:	6801      	ldr	r1, [r0, #0]
 800a9f0:	115e      	asrs	r6, r3, #5
 800a9f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a9f6:	f013 031f 	ands.w	r3, r3, #31
 800a9fa:	b087      	sub	sp, #28
 800a9fc:	bf18      	it	ne
 800a9fe:	3604      	addne	r6, #4
 800aa00:	2500      	movs	r5, #0
 800aa02:	1f37      	subs	r7, r6, #4
 800aa04:	4682      	mov	sl, r0
 800aa06:	4690      	mov	r8, r2
 800aa08:	9301      	str	r3, [sp, #4]
 800aa0a:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa0e:	46b9      	mov	r9, r7
 800aa10:	463c      	mov	r4, r7
 800aa12:	9502      	str	r5, [sp, #8]
 800aa14:	46ab      	mov	fp, r5
 800aa16:	784a      	ldrb	r2, [r1, #1]
 800aa18:	1c4b      	adds	r3, r1, #1
 800aa1a:	9303      	str	r3, [sp, #12]
 800aa1c:	b342      	cbz	r2, 800aa70 <__hexnan+0x88>
 800aa1e:	4610      	mov	r0, r2
 800aa20:	9105      	str	r1, [sp, #20]
 800aa22:	9204      	str	r2, [sp, #16]
 800aa24:	f7ff fd94 	bl	800a550 <__hexdig_fun>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d151      	bne.n	800aad0 <__hexnan+0xe8>
 800aa2c:	9a04      	ldr	r2, [sp, #16]
 800aa2e:	9905      	ldr	r1, [sp, #20]
 800aa30:	2a20      	cmp	r2, #32
 800aa32:	d818      	bhi.n	800aa66 <__hexnan+0x7e>
 800aa34:	9b02      	ldr	r3, [sp, #8]
 800aa36:	459b      	cmp	fp, r3
 800aa38:	dd13      	ble.n	800aa62 <__hexnan+0x7a>
 800aa3a:	454c      	cmp	r4, r9
 800aa3c:	d206      	bcs.n	800aa4c <__hexnan+0x64>
 800aa3e:	2d07      	cmp	r5, #7
 800aa40:	dc04      	bgt.n	800aa4c <__hexnan+0x64>
 800aa42:	462a      	mov	r2, r5
 800aa44:	4649      	mov	r1, r9
 800aa46:	4620      	mov	r0, r4
 800aa48:	f7ff ffa8 	bl	800a99c <L_shift>
 800aa4c:	4544      	cmp	r4, r8
 800aa4e:	d952      	bls.n	800aaf6 <__hexnan+0x10e>
 800aa50:	2300      	movs	r3, #0
 800aa52:	f1a4 0904 	sub.w	r9, r4, #4
 800aa56:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa5a:	f8cd b008 	str.w	fp, [sp, #8]
 800aa5e:	464c      	mov	r4, r9
 800aa60:	461d      	mov	r5, r3
 800aa62:	9903      	ldr	r1, [sp, #12]
 800aa64:	e7d7      	b.n	800aa16 <__hexnan+0x2e>
 800aa66:	2a29      	cmp	r2, #41	@ 0x29
 800aa68:	d157      	bne.n	800ab1a <__hexnan+0x132>
 800aa6a:	3102      	adds	r1, #2
 800aa6c:	f8ca 1000 	str.w	r1, [sl]
 800aa70:	f1bb 0f00 	cmp.w	fp, #0
 800aa74:	d051      	beq.n	800ab1a <__hexnan+0x132>
 800aa76:	454c      	cmp	r4, r9
 800aa78:	d206      	bcs.n	800aa88 <__hexnan+0xa0>
 800aa7a:	2d07      	cmp	r5, #7
 800aa7c:	dc04      	bgt.n	800aa88 <__hexnan+0xa0>
 800aa7e:	462a      	mov	r2, r5
 800aa80:	4649      	mov	r1, r9
 800aa82:	4620      	mov	r0, r4
 800aa84:	f7ff ff8a 	bl	800a99c <L_shift>
 800aa88:	4544      	cmp	r4, r8
 800aa8a:	d936      	bls.n	800aafa <__hexnan+0x112>
 800aa8c:	f1a8 0204 	sub.w	r2, r8, #4
 800aa90:	4623      	mov	r3, r4
 800aa92:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa96:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa9a:	429f      	cmp	r7, r3
 800aa9c:	d2f9      	bcs.n	800aa92 <__hexnan+0xaa>
 800aa9e:	1b3b      	subs	r3, r7, r4
 800aaa0:	f023 0303 	bic.w	r3, r3, #3
 800aaa4:	3304      	adds	r3, #4
 800aaa6:	3401      	adds	r4, #1
 800aaa8:	3e03      	subs	r6, #3
 800aaaa:	42b4      	cmp	r4, r6
 800aaac:	bf88      	it	hi
 800aaae:	2304      	movhi	r3, #4
 800aab0:	4443      	add	r3, r8
 800aab2:	2200      	movs	r2, #0
 800aab4:	f843 2b04 	str.w	r2, [r3], #4
 800aab8:	429f      	cmp	r7, r3
 800aaba:	d2fb      	bcs.n	800aab4 <__hexnan+0xcc>
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	b91b      	cbnz	r3, 800aac8 <__hexnan+0xe0>
 800aac0:	4547      	cmp	r7, r8
 800aac2:	d128      	bne.n	800ab16 <__hexnan+0x12e>
 800aac4:	2301      	movs	r3, #1
 800aac6:	603b      	str	r3, [r7, #0]
 800aac8:	2005      	movs	r0, #5
 800aaca:	b007      	add	sp, #28
 800aacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad0:	3501      	adds	r5, #1
 800aad2:	2d08      	cmp	r5, #8
 800aad4:	f10b 0b01 	add.w	fp, fp, #1
 800aad8:	dd06      	ble.n	800aae8 <__hexnan+0x100>
 800aada:	4544      	cmp	r4, r8
 800aadc:	d9c1      	bls.n	800aa62 <__hexnan+0x7a>
 800aade:	2300      	movs	r3, #0
 800aae0:	f844 3c04 	str.w	r3, [r4, #-4]
 800aae4:	2501      	movs	r5, #1
 800aae6:	3c04      	subs	r4, #4
 800aae8:	6822      	ldr	r2, [r4, #0]
 800aaea:	f000 000f 	and.w	r0, r0, #15
 800aaee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aaf2:	6020      	str	r0, [r4, #0]
 800aaf4:	e7b5      	b.n	800aa62 <__hexnan+0x7a>
 800aaf6:	2508      	movs	r5, #8
 800aaf8:	e7b3      	b.n	800aa62 <__hexnan+0x7a>
 800aafa:	9b01      	ldr	r3, [sp, #4]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d0dd      	beq.n	800aabc <__hexnan+0xd4>
 800ab00:	f1c3 0320 	rsb	r3, r3, #32
 800ab04:	f04f 32ff 	mov.w	r2, #4294967295
 800ab08:	40da      	lsrs	r2, r3
 800ab0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ab0e:	4013      	ands	r3, r2
 800ab10:	f846 3c04 	str.w	r3, [r6, #-4]
 800ab14:	e7d2      	b.n	800aabc <__hexnan+0xd4>
 800ab16:	3f04      	subs	r7, #4
 800ab18:	e7d0      	b.n	800aabc <__hexnan+0xd4>
 800ab1a:	2004      	movs	r0, #4
 800ab1c:	e7d5      	b.n	800aaca <__hexnan+0xe2>

0800ab1e <__ascii_mbtowc>:
 800ab1e:	b082      	sub	sp, #8
 800ab20:	b901      	cbnz	r1, 800ab24 <__ascii_mbtowc+0x6>
 800ab22:	a901      	add	r1, sp, #4
 800ab24:	b142      	cbz	r2, 800ab38 <__ascii_mbtowc+0x1a>
 800ab26:	b14b      	cbz	r3, 800ab3c <__ascii_mbtowc+0x1e>
 800ab28:	7813      	ldrb	r3, [r2, #0]
 800ab2a:	600b      	str	r3, [r1, #0]
 800ab2c:	7812      	ldrb	r2, [r2, #0]
 800ab2e:	1e10      	subs	r0, r2, #0
 800ab30:	bf18      	it	ne
 800ab32:	2001      	movne	r0, #1
 800ab34:	b002      	add	sp, #8
 800ab36:	4770      	bx	lr
 800ab38:	4610      	mov	r0, r2
 800ab3a:	e7fb      	b.n	800ab34 <__ascii_mbtowc+0x16>
 800ab3c:	f06f 0001 	mvn.w	r0, #1
 800ab40:	e7f8      	b.n	800ab34 <__ascii_mbtowc+0x16>

0800ab42 <_realloc_r>:
 800ab42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab46:	4680      	mov	r8, r0
 800ab48:	4615      	mov	r5, r2
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	b921      	cbnz	r1, 800ab58 <_realloc_r+0x16>
 800ab4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab52:	4611      	mov	r1, r2
 800ab54:	f7fd b91c 	b.w	8007d90 <_malloc_r>
 800ab58:	b92a      	cbnz	r2, 800ab66 <_realloc_r+0x24>
 800ab5a:	f7fd f8a5 	bl	8007ca8 <_free_r>
 800ab5e:	2400      	movs	r4, #0
 800ab60:	4620      	mov	r0, r4
 800ab62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab66:	f000 f8b2 	bl	800acce <_malloc_usable_size_r>
 800ab6a:	4285      	cmp	r5, r0
 800ab6c:	4606      	mov	r6, r0
 800ab6e:	d802      	bhi.n	800ab76 <_realloc_r+0x34>
 800ab70:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ab74:	d8f4      	bhi.n	800ab60 <_realloc_r+0x1e>
 800ab76:	4629      	mov	r1, r5
 800ab78:	4640      	mov	r0, r8
 800ab7a:	f7fd f909 	bl	8007d90 <_malloc_r>
 800ab7e:	4607      	mov	r7, r0
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d0ec      	beq.n	800ab5e <_realloc_r+0x1c>
 800ab84:	42b5      	cmp	r5, r6
 800ab86:	462a      	mov	r2, r5
 800ab88:	4621      	mov	r1, r4
 800ab8a:	bf28      	it	cs
 800ab8c:	4632      	movcs	r2, r6
 800ab8e:	f7ff fc43 	bl	800a418 <memcpy>
 800ab92:	4621      	mov	r1, r4
 800ab94:	4640      	mov	r0, r8
 800ab96:	f7fd f887 	bl	8007ca8 <_free_r>
 800ab9a:	463c      	mov	r4, r7
 800ab9c:	e7e0      	b.n	800ab60 <_realloc_r+0x1e>
	...

0800aba0 <_strtoul_l.constprop.0>:
 800aba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aba4:	4e34      	ldr	r6, [pc, #208]	@ (800ac78 <_strtoul_l.constprop.0+0xd8>)
 800aba6:	4686      	mov	lr, r0
 800aba8:	460d      	mov	r5, r1
 800abaa:	4628      	mov	r0, r5
 800abac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abb0:	5d37      	ldrb	r7, [r6, r4]
 800abb2:	f017 0708 	ands.w	r7, r7, #8
 800abb6:	d1f8      	bne.n	800abaa <_strtoul_l.constprop.0+0xa>
 800abb8:	2c2d      	cmp	r4, #45	@ 0x2d
 800abba:	d12f      	bne.n	800ac1c <_strtoul_l.constprop.0+0x7c>
 800abbc:	782c      	ldrb	r4, [r5, #0]
 800abbe:	2701      	movs	r7, #1
 800abc0:	1c85      	adds	r5, r0, #2
 800abc2:	f033 0010 	bics.w	r0, r3, #16
 800abc6:	d109      	bne.n	800abdc <_strtoul_l.constprop.0+0x3c>
 800abc8:	2c30      	cmp	r4, #48	@ 0x30
 800abca:	d12c      	bne.n	800ac26 <_strtoul_l.constprop.0+0x86>
 800abcc:	7828      	ldrb	r0, [r5, #0]
 800abce:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800abd2:	2858      	cmp	r0, #88	@ 0x58
 800abd4:	d127      	bne.n	800ac26 <_strtoul_l.constprop.0+0x86>
 800abd6:	786c      	ldrb	r4, [r5, #1]
 800abd8:	2310      	movs	r3, #16
 800abda:	3502      	adds	r5, #2
 800abdc:	f04f 38ff 	mov.w	r8, #4294967295
 800abe0:	2600      	movs	r6, #0
 800abe2:	fbb8 f8f3 	udiv	r8, r8, r3
 800abe6:	fb03 f908 	mul.w	r9, r3, r8
 800abea:	ea6f 0909 	mvn.w	r9, r9
 800abee:	4630      	mov	r0, r6
 800abf0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800abf4:	f1bc 0f09 	cmp.w	ip, #9
 800abf8:	d81c      	bhi.n	800ac34 <_strtoul_l.constprop.0+0x94>
 800abfa:	4664      	mov	r4, ip
 800abfc:	42a3      	cmp	r3, r4
 800abfe:	dd2a      	ble.n	800ac56 <_strtoul_l.constprop.0+0xb6>
 800ac00:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ac04:	d007      	beq.n	800ac16 <_strtoul_l.constprop.0+0x76>
 800ac06:	4580      	cmp	r8, r0
 800ac08:	d322      	bcc.n	800ac50 <_strtoul_l.constprop.0+0xb0>
 800ac0a:	d101      	bne.n	800ac10 <_strtoul_l.constprop.0+0x70>
 800ac0c:	45a1      	cmp	r9, r4
 800ac0e:	db1f      	blt.n	800ac50 <_strtoul_l.constprop.0+0xb0>
 800ac10:	fb00 4003 	mla	r0, r0, r3, r4
 800ac14:	2601      	movs	r6, #1
 800ac16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac1a:	e7e9      	b.n	800abf0 <_strtoul_l.constprop.0+0x50>
 800ac1c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ac1e:	bf04      	itt	eq
 800ac20:	782c      	ldrbeq	r4, [r5, #0]
 800ac22:	1c85      	addeq	r5, r0, #2
 800ac24:	e7cd      	b.n	800abc2 <_strtoul_l.constprop.0+0x22>
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1d8      	bne.n	800abdc <_strtoul_l.constprop.0+0x3c>
 800ac2a:	2c30      	cmp	r4, #48	@ 0x30
 800ac2c:	bf0c      	ite	eq
 800ac2e:	2308      	moveq	r3, #8
 800ac30:	230a      	movne	r3, #10
 800ac32:	e7d3      	b.n	800abdc <_strtoul_l.constprop.0+0x3c>
 800ac34:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ac38:	f1bc 0f19 	cmp.w	ip, #25
 800ac3c:	d801      	bhi.n	800ac42 <_strtoul_l.constprop.0+0xa2>
 800ac3e:	3c37      	subs	r4, #55	@ 0x37
 800ac40:	e7dc      	b.n	800abfc <_strtoul_l.constprop.0+0x5c>
 800ac42:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ac46:	f1bc 0f19 	cmp.w	ip, #25
 800ac4a:	d804      	bhi.n	800ac56 <_strtoul_l.constprop.0+0xb6>
 800ac4c:	3c57      	subs	r4, #87	@ 0x57
 800ac4e:	e7d5      	b.n	800abfc <_strtoul_l.constprop.0+0x5c>
 800ac50:	f04f 36ff 	mov.w	r6, #4294967295
 800ac54:	e7df      	b.n	800ac16 <_strtoul_l.constprop.0+0x76>
 800ac56:	1c73      	adds	r3, r6, #1
 800ac58:	d106      	bne.n	800ac68 <_strtoul_l.constprop.0+0xc8>
 800ac5a:	2322      	movs	r3, #34	@ 0x22
 800ac5c:	f8ce 3000 	str.w	r3, [lr]
 800ac60:	4630      	mov	r0, r6
 800ac62:	b932      	cbnz	r2, 800ac72 <_strtoul_l.constprop.0+0xd2>
 800ac64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac68:	b107      	cbz	r7, 800ac6c <_strtoul_l.constprop.0+0xcc>
 800ac6a:	4240      	negs	r0, r0
 800ac6c:	2a00      	cmp	r2, #0
 800ac6e:	d0f9      	beq.n	800ac64 <_strtoul_l.constprop.0+0xc4>
 800ac70:	b106      	cbz	r6, 800ac74 <_strtoul_l.constprop.0+0xd4>
 800ac72:	1e69      	subs	r1, r5, #1
 800ac74:	6011      	str	r1, [r2, #0]
 800ac76:	e7f5      	b.n	800ac64 <_strtoul_l.constprop.0+0xc4>
 800ac78:	0800b1c1 	.word	0x0800b1c1

0800ac7c <_strtoul_r>:
 800ac7c:	f7ff bf90 	b.w	800aba0 <_strtoul_l.constprop.0>

0800ac80 <__ascii_wctomb>:
 800ac80:	4603      	mov	r3, r0
 800ac82:	4608      	mov	r0, r1
 800ac84:	b141      	cbz	r1, 800ac98 <__ascii_wctomb+0x18>
 800ac86:	2aff      	cmp	r2, #255	@ 0xff
 800ac88:	d904      	bls.n	800ac94 <__ascii_wctomb+0x14>
 800ac8a:	228a      	movs	r2, #138	@ 0x8a
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac92:	4770      	bx	lr
 800ac94:	700a      	strb	r2, [r1, #0]
 800ac96:	2001      	movs	r0, #1
 800ac98:	4770      	bx	lr
	...

0800ac9c <fiprintf>:
 800ac9c:	b40e      	push	{r1, r2, r3}
 800ac9e:	b503      	push	{r0, r1, lr}
 800aca0:	4601      	mov	r1, r0
 800aca2:	ab03      	add	r3, sp, #12
 800aca4:	4805      	ldr	r0, [pc, #20]	@ (800acbc <fiprintf+0x20>)
 800aca6:	f853 2b04 	ldr.w	r2, [r3], #4
 800acaa:	6800      	ldr	r0, [r0, #0]
 800acac:	9301      	str	r3, [sp, #4]
 800acae:	f7fe ff7f 	bl	8009bb0 <_vfiprintf_r>
 800acb2:	b002      	add	sp, #8
 800acb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800acb8:	b003      	add	sp, #12
 800acba:	4770      	bx	lr
 800acbc:	20000090 	.word	0x20000090

0800acc0 <abort>:
 800acc0:	b508      	push	{r3, lr}
 800acc2:	2006      	movs	r0, #6
 800acc4:	f000 f834 	bl	800ad30 <raise>
 800acc8:	2001      	movs	r0, #1
 800acca:	f7f7 fa57 	bl	800217c <_exit>

0800acce <_malloc_usable_size_r>:
 800acce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acd2:	1f18      	subs	r0, r3, #4
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	bfbc      	itt	lt
 800acd8:	580b      	ldrlt	r3, [r1, r0]
 800acda:	18c0      	addlt	r0, r0, r3
 800acdc:	4770      	bx	lr

0800acde <_raise_r>:
 800acde:	291f      	cmp	r1, #31
 800ace0:	b538      	push	{r3, r4, r5, lr}
 800ace2:	4605      	mov	r5, r0
 800ace4:	460c      	mov	r4, r1
 800ace6:	d904      	bls.n	800acf2 <_raise_r+0x14>
 800ace8:	2316      	movs	r3, #22
 800acea:	6003      	str	r3, [r0, #0]
 800acec:	f04f 30ff 	mov.w	r0, #4294967295
 800acf0:	bd38      	pop	{r3, r4, r5, pc}
 800acf2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800acf4:	b112      	cbz	r2, 800acfc <_raise_r+0x1e>
 800acf6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acfa:	b94b      	cbnz	r3, 800ad10 <_raise_r+0x32>
 800acfc:	4628      	mov	r0, r5
 800acfe:	f000 f831 	bl	800ad64 <_getpid_r>
 800ad02:	4622      	mov	r2, r4
 800ad04:	4601      	mov	r1, r0
 800ad06:	4628      	mov	r0, r5
 800ad08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad0c:	f000 b818 	b.w	800ad40 <_kill_r>
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d00a      	beq.n	800ad2a <_raise_r+0x4c>
 800ad14:	1c59      	adds	r1, r3, #1
 800ad16:	d103      	bne.n	800ad20 <_raise_r+0x42>
 800ad18:	2316      	movs	r3, #22
 800ad1a:	6003      	str	r3, [r0, #0]
 800ad1c:	2001      	movs	r0, #1
 800ad1e:	e7e7      	b.n	800acf0 <_raise_r+0x12>
 800ad20:	2100      	movs	r1, #0
 800ad22:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ad26:	4620      	mov	r0, r4
 800ad28:	4798      	blx	r3
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	e7e0      	b.n	800acf0 <_raise_r+0x12>
	...

0800ad30 <raise>:
 800ad30:	4b02      	ldr	r3, [pc, #8]	@ (800ad3c <raise+0xc>)
 800ad32:	4601      	mov	r1, r0
 800ad34:	6818      	ldr	r0, [r3, #0]
 800ad36:	f7ff bfd2 	b.w	800acde <_raise_r>
 800ad3a:	bf00      	nop
 800ad3c:	20000090 	.word	0x20000090

0800ad40 <_kill_r>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	4d07      	ldr	r5, [pc, #28]	@ (800ad60 <_kill_r+0x20>)
 800ad44:	2300      	movs	r3, #0
 800ad46:	4604      	mov	r4, r0
 800ad48:	4608      	mov	r0, r1
 800ad4a:	4611      	mov	r1, r2
 800ad4c:	602b      	str	r3, [r5, #0]
 800ad4e:	f7f7 fa05 	bl	800215c <_kill>
 800ad52:	1c43      	adds	r3, r0, #1
 800ad54:	d102      	bne.n	800ad5c <_kill_r+0x1c>
 800ad56:	682b      	ldr	r3, [r5, #0]
 800ad58:	b103      	cbz	r3, 800ad5c <_kill_r+0x1c>
 800ad5a:	6023      	str	r3, [r4, #0]
 800ad5c:	bd38      	pop	{r3, r4, r5, pc}
 800ad5e:	bf00      	nop
 800ad60:	200085fc 	.word	0x200085fc

0800ad64 <_getpid_r>:
 800ad64:	f7f7 b9f2 	b.w	800214c <_getpid>

0800ad68 <_init>:
 800ad68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6a:	bf00      	nop
 800ad6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad6e:	bc08      	pop	{r3}
 800ad70:	469e      	mov	lr, r3
 800ad72:	4770      	bx	lr

0800ad74 <_fini>:
 800ad74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad76:	bf00      	nop
 800ad78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad7a:	bc08      	pop	{r3}
 800ad7c:	469e      	mov	lr, r3
 800ad7e:	4770      	bx	lr
